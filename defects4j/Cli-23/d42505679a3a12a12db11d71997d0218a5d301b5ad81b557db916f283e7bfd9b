{
    "generation": "    /**\n     * Render the specified text and return the rendered Options\n     * in a StringBuffer.\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        // Find the first wrap position in the initial text.\n        // `text` initially contains the full string to be rendered.\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) // If no wrap needed, append and return.\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        \n        // Append the first line, trimmed, followed by a new line.\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // Update 'text' to contain only the remaining content after the first line.\n        // This is crucial: subsequent wrapping logic will operate on this actual content.\n        text = text.substring(pos).trim(); \n\n        // All following lines must be padded with nextLineTabStop space characters\n        final String padding = createPadding(nextLineTabStop);\n\n        // Calculate the effective width available for the actual content on subsequent lines.\n        // This is the total line width minus the padding length.\n        int effectiveContentWidth = width - nextLineTabStop;\n\n        // If the padding itself consumes all or more of the line width,\n        // it's impossible to wrap further within the specified width while respecting the indent.\n        // In such cases, we simply append the padding (if content exists) and the remaining text,\n        // without trying to wrap it further, to avoid an infinite loop (CLI-162).\n        if (effectiveContentWidth <= 0)\n        {\n            if (!text.isEmpty()) // Only append if there's actual text left to render\n            {\n                // Append the padding. Note: this line might exceed 'width' if padding > width.\n                // This is a necessary compromise to avoid infinite loops when nextLineTabStop is too large.\n                sb.append(padding).append(text).append(defaultNewLine);\n            }\n            return sb; // Finished processing as no further wrapping is possible under constraints\n        }\n\n        while (true)\n        {\n            // Store the current position for infinite loop detection.\n            int lastPos = pos;\n            \n            // Find the wrap position for the remaining 'text' using the 'effectiveContentWidth'.\n            // 'text' now only contains the actual content, not including any padding.\n            pos = findWrapPos(text, effectiveContentWidth, 0);\n\n            if (pos == -1) // If no more wrapping needed for the remaining content\n            {\n                sb.append(padding).append(text); // Append remaining text with padding\n                return sb;\n            } \n            else if (pos == lastPos) // Detect infinite loop: if 'pos' doesn't advance for the same content\n            {\n                // This means 'text' (the content part) cannot be wrapped further within 'effectiveContentWidth',\n                // typically because it's a single word longer than 'effectiveContentWidth' with no breaks.\n                throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\n            }\n\n            // Append the wrapped segment for the current line, with padding.\n            sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            \n            // Update 'text' to the remaining content for the next iteration.\n            text = text.substring(pos).trim();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}