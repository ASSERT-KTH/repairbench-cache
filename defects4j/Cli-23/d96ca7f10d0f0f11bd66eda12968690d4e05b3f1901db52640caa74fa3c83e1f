{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text) {\n    // Trim any trailing whitespace from the text.\n    text = rtrim(text);\n    if (text.length() == 0) {\n        return sb;\n    }\n\n    // Wrap the first line using the full width.\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1) {\n        sb.append(text);\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    text = text.substring(pos).trim();\n\n    // For subsequent lines, we need to account for the padding added.\n    final String padding = createPadding(nextLineTabStop);\n    int availableWidth = width - nextLineTabStop;\n    if (availableWidth < 1) { \n        // Safeguard in case the nextLineTabStop is equal to or greater than width.\n        availableWidth = width;\n    }\n\n    // Process remaining text.\n    while (text.length() > 0) {\n        pos = findWrapPos(text, availableWidth, 0);\n        if (pos == -1) {\n            // No natural break found; append the rest of the text.\n            sb.append(padding).append(text);\n            break;\n        }\n        // If the break position is 0 (i.e. no progress made), force a break.\n        if (pos <= 0) {\n            pos = Math.min(availableWidth, text.length());\n        }\n        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos).trim();\n    }\n\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}