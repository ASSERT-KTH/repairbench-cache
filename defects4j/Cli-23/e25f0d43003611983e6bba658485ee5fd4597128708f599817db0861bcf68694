{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        int lastPos = pos;\n\n        // Trim left side only (to avoid excessive whitespace); don't trim right for preserving line content.\n        String remainder = text.substring(pos);\n        // Remove leading spaces only\n        remainder = remainder.replaceFirst(\"^\\\\s+\", \"\");\n        text = padding + remainder;\n        // Find wrap position AFTER the padding, so pass the actual text that appears visually.\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n        // Fix for infinite loop: If wrapped position does not progress, i.e. the available width < padding+first word,\n        // force one character to be appended to avoid hanging.\n        if (pos == lastPos)\n        {\n            // If even after adding padding we can't break, force a break to prevent infinite loop\n            if (width <= padding.length() + 1) {\n                // Append the rest as is\n                sb.append(text);\n                return sb;\n            }\n            // Otherwise, forcibly break at the next possible breakpoint, or just append the rest if we're stuck\n            pos++;\n            // But limit pos to text.length() to avoid StringIndexOutOfBoundsException\n            if (pos > text.length()) {\n                pos = text.length();\n            }\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}