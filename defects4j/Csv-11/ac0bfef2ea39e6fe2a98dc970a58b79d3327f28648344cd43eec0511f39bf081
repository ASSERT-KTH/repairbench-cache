{
    "generation": "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader != null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            // read the header from the first line of the file\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord != null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n\n        // build the name to index mappings\n        if (headerRecord != null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                String header = headerRecord[i];\n                // If header is null (for example, due to a nullString conversion), treat it as empty.\n                if (header == null) {\n                    header = \"\";\n                }\n                boolean isEmpty = header.trim().isEmpty();\n                if (isEmpty && this.format.getIgnoreEmptyHeaders()) {\n                    continue;\n                }\n                if (hdrMap.containsKey(header)) {\n                    throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\"\n                        + header + \"\\\" in \" + Arrays.toString(headerRecord));\n                }\n                hdrMap.put(header, Integer.valueOf(i));\n            }\n        }\n    }\n    return hdrMap;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}