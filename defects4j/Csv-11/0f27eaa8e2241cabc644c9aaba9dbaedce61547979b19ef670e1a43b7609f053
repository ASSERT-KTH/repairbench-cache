{
    "generation": "    /**\n     * Initializes the name to index mapping if the format defines a header.\n     *\n     * @return null if the format has no header.\n     * @throws IOException if there is a problem reading the header or skipping the first record\n     */\n    private Map<String, Integer> initializeHeader() throws IOException {\n        Map<String, Integer> hdrMap = null;\n        final String[] formatHeader = this.format.getHeader();\n        if (formatHeader != null) {\n            hdrMap = new LinkedHashMap<String, Integer>();\n\n            String[] headerRecord = null;\n            if (formatHeader.length == 0) {\n                // read the header from the first line of the file\n                final CSVRecord nextRecord = this.nextRecord();\n                if (nextRecord != null) {\n                    headerRecord = nextRecord.values();\n                }\n            } else {\n                if (this.format.getSkipHeaderRecord()) {\n                    this.nextRecord();\n                }\n                headerRecord = formatHeader;\n            }\n\n            // build the name to index mappings\n            if (headerRecord != null) {\n                for (int i = 0; i < headerRecord.length; i++) {\n                    final String header = headerRecord[i];\n\n                    // Per CSVFormat.withHeader(String...), headers are not validated for null by the format.\n                    // A null header name would cause NullPointerException when calling methods like trim() or isEmpty().\n                    // It's an invalid state, so throw IllegalArgumentException.\n                    if (header == null) {\n                        throw new IllegalArgumentException(\"Header contains a null name at index \" + i +\n                                \" in \" + Arrays.toString(headerRecord));\n                    }\n\n                    final boolean emptyHeader = header.trim().isEmpty();\n\n                    // If empty headers are configured to be ignored, and this is an empty header,\n                    // then we skip processing it entirely. It will not be added to the header map,\n                    // and it won't trigger duplicate checks.\n                    if (emptyHeader && this.format.getIgnoreEmptyHeaders()) {\n                        continue;\n                    }\n\n                    // For non-empty headers, or for empty headers that are NOT ignored,\n                    // check if the header name already exists in the map (i.e., it's a duplicate).\n                    if (hdrMap.containsKey(header)) {\n                        throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                \"\\\" in \" + Arrays.toString(headerRecord));\n                    }\n                    hdrMap.put(header, Integer.valueOf(i));\n                }\n            }\n        }\n        return hdrMap;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}