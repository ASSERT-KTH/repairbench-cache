{
    "generation": "    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            // inlined from Attribute.html()\n            final String key = keys[i];\n            final String val = vals[i];\n            accum.append(' ').append(key);\n\n            // collapse conditions for boolean attributes in html syntax: key=null, key=\"\", key=key\n            // Rationale: these values are equivalent to omitting the value altogether for boolean attributes.\n            // \"false\" is not collapsed, because that has specific meaning.\n            if (!(out.syntax() == Document.OutputSettings.Syntax.html\n                && Attribute.isBooleanAttribute(key) // is it a known boolean attribute?\n                && (val == null || val.isEmpty() || val.equalsIgnoreCase(key)))) { // should we collapse it? (valueless or value is empty or matches key)\n                // if not collapsing, write out the value\n                accum.append(\"=\\\"\");\n                // Original code used EmptyString for null val; assuming it's available and equivalent to \"\" for escape context.\n                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n            // else: looks like a boolean attribute that should be collapsed, so just the key is written.\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}