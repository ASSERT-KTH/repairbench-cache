{
    "generation": "    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            // inlined from Attribute.html()\n            final String key = keys[i];\n            final String val = vals[i]; // val can be null\n\n            accum.append(' ').append(key);\n\n            final boolean isHtmlSyntax = out.syntax() == Document.OutputSettings.Syntax.html;\n            final boolean isBooleanAttr = Attribute.isBooleanAttribute(key);\n\n            if (isHtmlSyntax && isBooleanAttr) {\n                // This is an HTML boolean attribute. Collapse if value is null, empty string, or equals key.\n                // Examples to collapse: `checked`, `checked=null`, `checked=\"\"`, `checked=checked`\n                // Examples to not collapse (i.e., render as key=\"value\"): `autofocus=\"false\"`\n                if (val == null || val.equals(key) || (val != null && val.isEmpty())) {\n                    // Collapse: do not append =\"value\". The attribute name itself is enough.\n                } else {\n                    // It's a boolean attribute with a value that is NOT null, empty, or equal to key.\n                    // Render as key=\"value\".\n                    accum.append(\"=\\\"\");\n                    Entities.escape(accum, val, out, true, false, false); // val is guaranteed not null here\n                    accum.append('\"');\n                }\n            } else {\n                // Not HTML syntax OR not a boolean attribute. Always write out value.\n                // e.g., <foo:bar checked=\"true\"> or <img src=\"foo\">\n                accum.append(\"=\\\"\");\n                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}