{
    "generation": "    final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            // inlined from Attribute.html()\n            final String key = keys[i];\n            final String val = vals[i];\n            accum.append(' ').append(key);\n\n            // collapse boolean attributes in html mode to only key name (e.g. <img async>)\n            // handles val=null, val=\"\", val=key case\n            final boolean skipValue;\n            if (out.syntax() == Document.OutputSettings.Syntax.html) {\n                if (val == null) { // attributeCaseSensitive=false Checks null only, \"\" is different...\n                    // todo: We need a case-generalised isBoolean check\n                    skipValue = Attribute.isBooleanAttribute(key); // ... attributes look boolean by name, but might not be, depending on value\n                } else {\n                     if (Attribute.isBooleanAttribute(key))\n                        skipValue = val.isEmpty() || val.equalsIgnoreCase(key); // val=\"\", val=\"async\"\n                    else // is not boolean, output value\n                        skipValue = false;\n                }\n            } else { // xml syntax\n                 skipValue = false;\n            }\n\n            if (!skipValue) {\n                accum.append(\"=\\\"\");\n                Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}