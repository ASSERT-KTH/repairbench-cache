{
    "generation": "public static Date parse(String date, ParsePosition pos) throws ParseException {\n    Exception fail = null;\n    try {\n        int offset = pos.getIndex();\n\n        // extract year\n        int year = parseInt(date, offset, offset += 4);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract month\n        int month = parseInt(date, offset, offset += 2);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract day\n        int day = parseInt(date, offset, offset += 2);\n        // default time value\n        int hour = 0;\n        int minutes = 0;\n        int seconds = 0;\n        int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n\n        // if the value has no time component (and no time zone), we are done\n        boolean hasT = checkOffset(date, offset, 'T');\n\n        if (!hasT && (date.length() <= offset)) {\n            Calendar calendar = new GregorianCalendar(year, month - 1, day);\n\n            pos.setIndex(offset);\n            return calendar.getTime();\n        }\n\n        if (hasT) {\n            offset += 1; // skip 'T'\n\n            // extract hours, minutes, seconds and milliseconds\n            hour = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            } else if (date.length() > offset) {\n                // Handle case where hours might be 4 digits (like 0000)\n                // But in ISO-8601, hours should be 2 digits\n                // So we might need to adjust\n                if (hour > 23) {\n                    // Likely read extra digits (like 0000 for 00:00)\n                    // Backtrack and try with proper() handling\n                    offset -= 2;\n                    try {\n                        // Try parsing with colon separator\n                        String timePart = date.substring(offset);\n                        String[] parts = timePart.split(\"[:Z+-]\");\n                        if (parts.length > 0) {\n                            hour = Integer.parseInt(parts[0].substring(0, Math.min(2, parts[0].length())));\n                            offset += parts[0].length();\n                            if (offset < date.length() && date.charAt(offset) == ':') {\n                                offset += 1;\n                            }\n                        }\n                    } catch (Exception e) {\n                        // Fall back to original parsing\n                        hour = parseInt(date, offset, offset += 2);\n                    }\n                }\n            }\n\n            minutes = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n\n            // second and milliseconds can be optional\n            if (date.length() > offset) {\n                char c = date.charAt(offset);\n                if (c != 'Z' && c != '+' && c != '-') {\n                    seconds = parseInt(date, offset, offset += 2);\n                    if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds\n                    // milliseconds can be optional in the format\n                    if (checkOffset(date, offset, '.')) {\n                        offset += 1;\n                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit\n                        int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits\n                        int fraction = parseInt(date, offset, parseEndOffset);\n                        // compensate for \"missing\" digits\n                        switch (parseEndOffset - offset) { // number of digits parsed\n                        case 2:\n                            milliseconds = fraction * 10;\n                            break;\n                        case 1:\n                            milliseconds = fraction * 100;\n                            break;\n                        default:\n                            milliseconds = fraction;\n                        }\n                        offset = endOffset;\n                    }\n                }\n            }\n        }\n\n        // extract timezone\n        if (date.length() <= offset) {\n            throw new IllegalArgumentException(\"No time zone indicator\");\n        }\n\n        TimeZone timezone = null;\n        char timezoneIndicator = date.charAt(offset);\n\n        if (timezoneIndicator == 'Z') {\n            timezone = TIMEZONE_UTC;\n            offset += 1;\n        } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n            // Find the end of the timezone offset\n            int tzEnd = offset + 1;\n            while (tzEnd < date.length()) {\n                char c = date.charAt(tzEnd);\n                if (Character.isDigit(c) || c == ':') {\n                    tzEnd++;\n                } else {\n                    break;\n                }\n            }\n            String timezoneOffset = date.substring(offset, tzEnd);\n            offset = tzEnd;\n\n            // Normalize timezone format (add colon if needed for parsing)\n            if (timezoneOffset.length() == 5) { // format like +0100\n                String normalizedTz = timezoneOffset.substring(0, 3) + \":\" + timezoneOffset.substring(3);\n                String timezoneId = \"GMT\" + normalizedTz;\n                timezone = TimeZone.getTimeZone(timezoneId);\n            } else if (timezoneOffset.length() == 3) { // format like +01\n                String normalizedTz = timezoneOffset + \":00\";\n                String timezoneId = \"GMT\" + normalizedTz;\n                timezone = TimeZone.getTimeZone(timezoneId);\n            } else {\n                // For other formats, try to handle them as-is\n                String timezoneId = \"GMT\" + timezoneOffset;\n                timezone = TimeZone.getTimeZone(timezoneId);\n\n                String act = timezone.getID();\n                if (!act.equals(\"GMT\" + timezoneOffset)) {\n                    /* Check with and without colon */\n                    boolean found = false;\n                    String alternativeTzId = \"GMT\" + timezoneOffset.replace(\":\", \"\");\n                    if (timezone.getDisplayName().contains(alternativeTzId.replace(\"GMT\", \"\"))) {\n                        found = true;\n                    } else {\n                        // Try with colon added if not present\n                        if (timezoneOffset.length() == 5 && !timezoneOffset.contains(\":\")) {\n                            String withColon = \"GMT\" + timezoneOffset.substring(0, 3) + \":\" + timezoneOffset.substring(3);\n                            TimeZone testTz = TimeZone.getTimeZone(withColon);\n                            if (testTz.getID().equals(withColon)) {\n                                timezone = testTz;\n                                found = true;\n                            }\n                        }\n                    }\n                    if (!found) {\n                        throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \"+timezoneOffset+\" given, resolves to \"\n                                +timezone.getID());\n                    }\n                }\n            }\n\n            // Special case for UTC\n            if (timezone.getRawOffset() == 0) {\n                timezone = TIMEZONE_UTC;\n            }\n        } else {\n            throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator+\"'\");\n        }\n\n        Calendar calendar = new GregorianCalendar(timezone);\n        calendar.setLenient(false);\n        calendar.set(Calendar.YEAR, year);\n        calendar.set(Calendar.MONTH, month - 1);\n        calendar.set(Calendar.DAY_OF_MONTH, day);\n        calendar.set(Calendar.HOUR_OF_DAY, hour);\n        calendar.set(Calendar.MINUTE, minutes);\n        calendar.set(Calendar.SECOND, seconds);\n        calendar.set(Calendar.MILLISECOND, milliseconds);\n\n        if (!date.startsWith(\"\" + year, pos.getIndex())) {\n            // Validation check in case something went wrong with parsing\n            throw new IllegalArgumentException(\"Parsed date doesn't match input\");\n        }\n\n        pos.setIndex(offset);\n        return calendar.getTime();\n    } catch (IndexOutOfBoundsException e) {\n        fail = e;\n    } catch (NumberFormatException e) {\n        fail = e;\n    } catch (IllegalArgumentException e) {\n        fail = e;\n    }\n    String input = (date == null) ? null : ('\"' + date + \"'\");\n    String msg = fail.getMessage();\n    if (msg == null || msg.isEmpty()) {\n        msg = \"(\"+fail.getClass().getName()+\")\";\n    }\n    ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());\n    ex.initCause(fail);\n    throw ex;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}