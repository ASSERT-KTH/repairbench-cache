{
    "generation": "public static Date parse(String date, ParsePosition pos) throws ParseException {\n    Exception fail = null;\n    try {\n        int offset = pos.getIndex();\n\n        // extract year\n        int year = parseInt(date, offset, offset += 4);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract month\n        int month = parseInt(date, offset, offset += 2);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract day\n        int day = parseInt(date, offset, offset += 2);\n        // default time value\n        int hour = 0;\n        int minutes = 0;\n        int seconds = 0;\n        int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n\n        // if the value has no time component (and no time zone), we are done\n        boolean hasT = checkOffset(date, offset, 'T');\n        \n        if (!hasT && (date.length() <= offset)) {\n            Calendar calendar = new GregorianCalendar(year, month - 1, day);\n\n            pos.setIndex(offset);\n            return calendar.getTime();\n        }\n\n        if (hasT) {\n\n            // extract hours, minutes, seconds and milliseconds\n            hour = parseInt(date, offset += 1, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n\n            minutes = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n            // second and milliseconds can be optional\n            if (date.length() > offset) {\n                char c = date.charAt(offset);\n                if (c != 'Z' && c != '+' && c != '-') {\n                    seconds = parseInt(date, offset, offset += 2);\n                    if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds\n                    // milliseconds can be optional in the format\n                    if (checkOffset(date, offset, '.')) {\n                        offset += 1;\n                        int endOffset = indexOfNonDigit(date, offset); // fix: offset, not offset + 1\n                        int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits\n                        int fraction = parseInt(date, offset, parseEndOffset);\n                        // compensate for \"missing\" digits\n                        switch (parseEndOffset - offset) { // number of digits parsed\n                        case 2:\n                            milliseconds = fraction * 10;\n                            break;\n                        case 1:\n                            milliseconds = fraction * 100;\n                            break;\n                        default:\n                            milliseconds = fraction;\n                        }\n                        offset = endOffset;\n                    }\n                }\n            }\n        }\n\n        // extract timezone\n        if (date.length() <= offset) {\n            throw new IllegalArgumentException(\"No time zone indicator\");\n        }\n\n        TimeZone timezone = null;\n        char timezoneIndicator = date.charAt(offset);\n\n        if (timezoneIndicator == 'Z') {\n            timezone = TIMEZONE_UTC;\n            offset += 1;\n        } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n            // Find the end of the timezone offset\n            int tzOffsetStart = offset;\n            int tzOffsetEnd = date.length();\n\n            // Acceptable forms: +hh, +hhmm, +hh:mm\n            // Find either '+hh', '+hhmm', '+hh:mm'\n            // Try to consume first two digits (hour)\n            if (date.length() - tzOffsetStart < 3) {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator: \"+date.substring(tzOffsetStart));\n            }\n            // Collect the timezone offset up to allowed form\n            // Always at least '+hh'\n            String sign = date.substring(offset, offset+1); // '+' or '-'\n            int tzHour = parseInt(date, offset+1, offset+3);\n\n            StringBuilder timezoneOffset = new StringBuilder(sign);\n            timezoneOffset.append(String.format(\"%02d\", tzHour));\n            int newOffset = offset + 3;\n\n            if (newOffset < date.length()) {\n                char next = date.charAt(newOffset);\n                if (next == ':') {\n                    // '+hh:mm'\n                    if (date.length() < newOffset + 3) {\n                        throw new IndexOutOfBoundsException(\"Invalid time zone indicator, invalid mm in \" + date.substring(offset));\n                    }\n                    int tzMin = parseInt(date, newOffset + 1, newOffset + 3);\n                    timezoneOffset.append(\":\").append(String.format(\"%02d\", tzMin));\n                    newOffset = newOffset + 3;\n                } else if (Character.isDigit(next)) {\n                    // '+hhmm'\n                    if (date.length() < newOffset + 2) {\n                        throw new IndexOutOfBoundsException(\"Invalid time zone indicator, invalid mm in \" + date.substring(offset));\n                    }\n                    int tzMin = parseInt(date, newOffset, newOffset + 2);\n                    timezoneOffset.append(String.format(\"%02d\", tzMin));\n                    newOffset = newOffset + 2;\n                }\n                // else it is just '+hh'\n            }\n\n            offset = newOffset;\n\n            // Normalize \"+01\" to \"+0100\"\n            if (timezoneOffset.length() == 3) {\n                timezoneOffset.append(\"00\");\n            } else if (timezoneOffset.length() == 6 && timezoneOffset.charAt(3) == ':') {\n                // already in format \"+hh:mm\"\n            } else if (timezoneOffset.length() == 5) {\n                // \"+hhmm\", so add colon to produce \"+hh:mm\"\n                timezoneOffset.insert(3, ':');\n            }\n\n            String tzId;\n            if (timezoneOffset.length() == 6 && timezoneOffset.charAt(3) == ':') {\n                tzId = \"GMT\" + timezoneOffset.toString();\n            } else if (timezoneOffset.length() == 5) {\n                tzId = \"GMT\" + timezoneOffset.substring(0, 3) + \":\" + timezoneOffset.substring(3, 5);\n            } else if (timezoneOffset.length() == 7 && timezoneOffset.charAt(3) == ':') {\n                // e.g., \"+01:00\"\n                tzId = \"GMT\" + timezoneOffset.toString();\n            } else {\n                tzId = \"GMT\" + timezoneOffset.toString();\n            }\n\n            // 18-Jun-2015, tatu: Minor simplification, skip offset of \"+0000\"/\"+00:00\"\n            if (\"GMT+0000\".equals(tzId) || \"GMT+00:00\".equals(tzId)) {\n                timezone = TIMEZONE_UTC;\n            } else {\n                timezone = TimeZone.getTimeZone(tzId);\n\n                String act = timezone.getID();\n                if (!act.equals(tzId)) {\n                    /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given\n                     *    one without. If so, don't sweat.\n                     *   Yes, very inefficient. Hopefully not hit often.\n                     *   If it becomes a perf problem, add 'loose' comparison instead.\n                     */\n                    String cleaned = act.replace(\":\", \"\");\n                    if (!cleaned.equals(tzId.replace(\":\", \"\"))) {\n                        throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \"+tzId+\" given, resolves to \"\n                                +timezone.getID());\n                    }\n                }\n            }\n        } else {\n            throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator+\"'\");\n        }\n\n        Calendar calendar = new GregorianCalendar(timezone);\n        calendar.setLenient(false);\n        calendar.set(Calendar.YEAR, year);\n        calendar.set(Calendar.MONTH, month - 1);\n        calendar.set(Calendar.DAY_OF_MONTH, day);\n        calendar.set(Calendar.HOUR_OF_DAY, hour);\n        calendar.set(Calendar.MINUTE, minutes);\n        calendar.set(Calendar.SECOND, seconds);\n        calendar.set(Calendar.MILLISECOND, milliseconds);\n\n        pos.setIndex(offset);\n        return calendar.getTime();\n        // If we get a ParseException it'll already have the right message/offset.\n        // Other exception types can convert here.\n    } catch (IndexOutOfBoundsException e) {\n        fail = e;\n    } catch (NumberFormatException e) {\n        fail = e;\n    } catch (IllegalArgumentException e) {\n        fail = e;\n    }\n    String input = (date == null) ? null : ('\"' + date + \"'\");\n    String msg = fail.getMessage();\n    if (msg == null || msg.isEmpty()) {\n        msg = \"(\"+fail.getClass().getName()+\")\";\n    }\n    ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());\n    ex.initCause(fail);\n    throw ex;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}