{
    "generation": "public static Date parse(String date, ParsePosition pos) throws ParseException {\n    Exception fail = null;\n    try {\n        int offset = pos.getIndex();\n\n        // extract year\n        int year = parseInt(date, offset, offset += 4);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract month\n        int month = parseInt(date, offset, offset += 2);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract day\n        int day = parseInt(date, offset, offset += 2);\n\n        // default time value\n        int hour = 0;\n        int minutes = 0;\n        int seconds = 0;\n        int milliseconds = 0;\n\n        // if no time and no timezone, we're done\n        boolean hasT = checkOffset(date, offset, 'T');\n        if (!hasT && (date.length() <= offset)) {\n            Calendar cal = new GregorianCalendar(year, month - 1, day);\n            pos.setIndex(offset);\n            return cal.getTime();\n        }\n\n        // parse time if present\n        if (hasT) {\n            hour = parseInt(date, offset += 1, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n            minutes = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n            if (date.length() > offset) {\n                char c = date.charAt(offset);\n                if (c != 'Z' && c != '+' && c != '-') {\n                    seconds = parseInt(date, offset, offset += 2);\n                    if (seconds > 59 && seconds < 63) { // handle leap seconds\n                        seconds = 59;\n                    }\n                    if (checkOffset(date, offset, '.')) {\n                        offset += 1;\n                        int endOffset = indexOfNonDigit(date, offset + 1);\n                        int parseEndOffset = Math.min(endOffset, offset + 3);\n                        int fraction = parseInt(date, offset, parseEndOffset);\n                        switch (parseEndOffset - offset) {\n                            case 2:\n                                milliseconds = fraction * 10;\n                                break;\n                            case 1:\n                                milliseconds = fraction * 100;\n                                break;\n                            default:\n                                milliseconds = fraction;\n                        }\n                        offset = endOffset;\n                    }\n                }\n            }\n        }\n\n        // parse timezone\n        if (date.length() <= offset) {\n            throw new IllegalArgumentException(\"No time zone indicator\");\n        }\n        TimeZone timezone;\n        char timezoneIndicator = date.charAt(offset);\n\n        if (timezoneIndicator == 'Z') {\n            timezone = TIMEZONE_UTC;\n            offset += 1;\n        } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n            // grab the rest of the string as the zone offset\n            String tzOffset = date.substring(offset);\n            int rawLen = tzOffset.length();\n            // support \"+01\" (no minutes) by treating it as \"+0100\"\n            if (rawLen == 3) {\n                tzOffset = tzOffset + \"00\";\n            }\n            offset += rawLen;\n\n            if (\"+0000\".equals(tzOffset) || \"+00:00\".equals(tzOffset)) {\n                timezone = TIMEZONE_UTC;\n            } else {\n                String tzId = \"GMT\" + tzOffset;\n                timezone = TimeZone.getTimeZone(tzId);\n                String actual = timezone.getID();\n                if (!actual.equals(tzId)) {\n                    String cleaned = actual.replace(\":\", \"\");\n                    if (!cleaned.equals(tzId)) {\n                        throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \"\n                                + tzId + \" given, resolves to \" + timezone.getID());\n                    }\n                }\n            }\n        } else {\n            throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\");\n        }\n\n        // build the calendar\n        Calendar cal = new GregorianCalendar(timezone);\n        cal.setLenient(false);\n        cal.set(Calendar.YEAR, year);\n        cal.set(Calendar.MONTH, month - 1);\n        cal.set(Calendar.DAY_OF_MONTH, day);\n        cal.set(Calendar.HOUR_OF_DAY, hour);\n        cal.set(Calendar.MINUTE, minutes);\n        cal.set(Calendar.SECOND, seconds);\n        cal.set(Calendar.MILLISECOND, milliseconds);\n\n        pos.setIndex(offset);\n        return cal.getTime();\n\n    } catch (IndexOutOfBoundsException e) {\n        fail = e;\n    } catch (NumberFormatException e) {\n        fail = e;\n    } catch (IllegalArgumentException e) {\n        fail = e;\n    }\n    String input = (date == null) ? null : ('\"' + date + '\"');\n    String msg = fail.getMessage();\n    if (msg == null || msg.isEmpty()) {\n        msg = \"(\" + fail.getClass().getName() + \")\";\n    }\n    ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());\n    ex.initCause(fail);\n    throw ex;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}