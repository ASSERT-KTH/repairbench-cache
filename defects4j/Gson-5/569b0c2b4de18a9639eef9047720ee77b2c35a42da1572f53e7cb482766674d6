{
    "generation": "public static Date parse(String date, ParsePosition pos) throws ParseException {\n    Exception fail = null;\n    try {\n        int offset = pos.getIndex();\n\n        // extract year\n        int year = parseInt(date, offset, offset += 4);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract month\n        int month = parseInt(date, offset, offset += 2);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract day\n        int day = parseInt(date, offset, offset += 2);\n        // default time value\n        int hour = 0;\n        int minutes = 0;\n        int seconds = 0;\n        int milliseconds = 0;\n\n        // if the value has no time component (and no time zone), we are done\n        boolean hasT = checkOffset(date, offset, 'T');\n        \n        if (!hasT && (date.length() <= offset)) {\n            Calendar calendar = new GregorianCalendar(year, month - 1, day);\n\n            pos.setIndex(offset);\n            return calendar.getTime();\n        }\n\n        if (hasT) {\n\n            // extract hours, minutes, seconds and milliseconds\n            offset += 1; // Skip 'T'\n            hour = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n\n            minutes = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n            // second and milliseconds can be optional\n            if (date.length() > offset) {\n                char c = date.charAt(offset);\n                if (c != 'Z' && c != '+' && c != '-') {\n                    seconds = parseInt(date, offset, offset += 2);\n                    if (seconds > 59 && seconds < 63) {\n                        seconds = 59; // truncate up to 3 leap seconds\n                    }\n                    // milliseconds can be optional in the format\n                    if (checkOffset(date, offset, '.')) {\n                        offset += 1;\n                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit\n                        int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits\n                        int fraction = parseInt(date, offset, parseEndOffset);\n                        // compensate for \"missing\" digits\n                        switch (parseEndOffset - offset) { // number of digits parsed\n                        case 2:\n                            milliseconds = fraction * 10;\n                            break;\n                        case 1:\n                            milliseconds = fraction * 100;\n                            break;\n                        default:\n                            milliseconds = fraction;\n                        }\n                        offset = endOffset;\n                    }\n                }\n            }\n        }\n\n        // extract timezone\n        if (offset >= date.length()) {\n            throw new ParseException(\"No time zone indicator\", offset);\n        }\n\n        char timezoneIndicator = date.charAt(offset);\n        TimeZone timezone = null;\n\n        if (timezoneIndicator == 'Z') {\n            timezone = TimeZone.getTimeZone(\"UTC\");\n            offset += 1;\n        } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n            int start = offset;\n            String sign = String.valueOf(timezoneIndicator);\n            offset += 1;\n\n            // Extract hour part\n            int hourPart = parseInt(date, offset, offset += 2);\n\n            // Check if minutes are present\n            boolean hasMinutes = checkOffset(date, offset, ':');\n            if (hasMinutes) {\n                offset += 1;\n                int minutePart = parseInt(date, offset, offset += 2);\n                timezone = TimeZone.getTimeZone(\"GMT\" + sign + String.format(\"%02d\", hourPart) + \":\" + String.format(\"%02d\", minutePart));\n            } else {\n                // No minutes, just hours; parse remaining digits if any\n                int remainingLength = date.length() - offset;\n                if (remainingLength > 0) {\n                    String remaining = date.substring(offset);\n                    minutePart = remaining.isEmpty() ? 0 : parseInt(remaining, 0, remaining.length());\n                    timezone = TimeZone.getTimeZone(\"GMT\" + sign + String.format(\"%02d\", hourPart) + \":\" + String.format(\"%02d\", minutePart));\n                } else {\n                    timezone = TimeZone.getTimeZone(\"GMT\" + sign + String.format(\"%02d\", hourPart) + \":00\");\n                }\n            }\n        } else {\n            throw new ParseException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\", offset);\n        }\n\n        Calendar calendar = new GregorianCalendar(timezone);\n        calendar.setLenient(false);\n        calendar.set(Calendar.YEAR, year);\n        calendar.set(Calendar.MONTH, month - 1);\n        calendar.set(Calendar.DAY_OF_MONTH, day);\n        calendar.set(Calendar.HOUR_OF_DAY, hour);\n        calendar.set(Calendar.MINUTE, minutes);\n        calendar.set(Calendar.SECOND, seconds);\n        calendar.set(Calendar.MILLISECOND, milliseconds);\n\n        pos.setIndex(offset);\n        return calendar.getTime();\n    } catch (IndexOutOfBoundsException e) {\n        fail = e;\n    } catch (NumberFormatException e) {\n        fail = e;\n    } catch (IllegalArgumentException e) {\n        fail = e;\n    } catch (ParseException e) {\n        fail = e;\n    }\n    String input = (date == null) ? null : ('\"' + date + \"'\");\n    String msg = fail.getMessage();\n    if (msg == null || msg.isEmpty()) {\n        msg = \"(\" + fail.getClass().getName() + \")\";\n    }\n    ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());\n    ex.initCause(fail);\n    throw ex;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}