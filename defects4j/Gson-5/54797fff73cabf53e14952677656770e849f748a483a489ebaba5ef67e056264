{
    "generation": "public static Date parse(String date, ParsePosition pos) throws ParseException {\n    Exception fail = null;\n    try {\n        int offset = pos.getIndex();\n\n        // extract year\n        int year = parseInt(date, offset, offset += 4);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract month\n        int month = parseInt(date, offset, offset += 2);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract day\n        int day = parseInt(date, offset, offset += 2);\n        // default time value\n        int hour = 0;\n        int minutes = 0;\n        int seconds = 0;\n        int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n\n        // if the value has no time component (and no time zone), we are done\n        boolean hasT = checkOffset(date, offset, 'T');\n        \n        if (!hasT && (date.length() <= offset)) {\n            Calendar calendar = new GregorianCalendar(year, month - 1, day);\n\n            pos.setIndex(offset);\n            return calendar.getTime();\n        }\n\n        if (hasT) {\n\n            // extract hours, minutes, seconds and milliseconds\n            hour = parseInt(date, offset += 1, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n\n            minutes = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n            // second and milliseconds can be optional\n            if (date.length() > offset) {\n                char c = date.charAt(offset);\n                if (c != 'Z' && c != '+' && c != '-') {\n                    seconds = parseInt(date, offset, offset += 2);\n                    if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds\n                    // milliseconds can be optional in the format\n                    if (checkOffset(date, offset, '.')) {\n                        offset += 1;\n                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit\n                        int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits\n                        int fraction = parseInt(date, offset, parseEndOffset);\n                        // compensate for \"missing\" digits\n                        switch (parseEndOffset - offset) { // number of digits parsed\n                        case 2:\n                            milliseconds = fraction * 10;\n                            break;\n                        case 1:\n                            milliseconds = fraction * 100;\n                            break;\n                        default:\n                            milliseconds = fraction;\n                        }\n                        offset = endOffset;\n                    }\n                }\n            }\n        }\n\n        // extract timezone\n        if (date.length() <= offset) {\n            throw new IllegalArgumentException(\"No time zone indicator\");\n        }\n\n        TimeZone timezone = null;\n        char timezoneIndicator = date.charAt(offset);\n\n        if (timezoneIndicator == 'Z') {\n            timezone = TIMEZONE_UTC;\n            offset += 1;\n        } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n            int tzStart = offset;\n            offset++; // consume '+' or '-'\n            // parse hours\n            int tzhours = 0;\n            int tzminutes = 0;\n            int tzSign = (timezoneIndicator == '+') ? 1 : -1;\n            int length = date.length();\n\n            if ((offset + 2) <= length) {\n                tzhours = parseInt(date, offset, offset + 2);\n                offset += 2;\n            } else {\n                throw new IndexOutOfBoundsException(\"Incomplete time zone hour specifier\");\n            }\n\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n\n            int tzMinuteEnd = offset + 2;\n            if (tzMinuteEnd <= length) {\n                // Parse minutes if present\n                if (Character.isDigit(date.charAt(offset)) && Character.isDigit(date.charAt(offset + 1))) {\n                    tzminutes = parseInt(date, offset, tzMinuteEnd);\n                    offset += 2;\n                }\n            }\n            // valid timezones are: +hh, +hhmm, +hh:mm -- all allowed\n\n            // Compose timezoneId string\n            StringBuilder timezoneId = new StringBuilder();\n            timezoneId.append(\"GMT\");\n            timezoneId.append(timezoneIndicator);\n            if (tzhours < 10)\n                timezoneId.append('0');\n            timezoneId.append(tzhours);\n            timezoneId.append(':');\n            if (tzminutes < 10)\n                timezoneId.append('0');\n            timezoneId.append(tzminutes);\n\n            timezone = TimeZone.getTimeZone(timezoneId.toString());\n\n            String act = timezone.getID();\n            // check ID WITHOUT colons for fallback\n            String expectedId = timezoneId.toString();\n            String cleaned = act.replace(\":\", \"\");\n            String expectedClean = expectedId.replace(\":\", \"\");\n\n            if (!cleaned.equals(expectedClean)) {\n                throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \" + expectedId + \" given, resolves to \"\n                        + timezone.getID());\n            }\n        } else {\n            throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\");\n        }\n\n        Calendar calendar = new GregorianCalendar(timezone);\n        calendar.setLenient(false);\n        calendar.set(Calendar.YEAR, year);\n        calendar.set(Calendar.MONTH, month - 1);\n        calendar.set(Calendar.DAY_OF_MONTH, day);\n        calendar.set(Calendar.HOUR_OF_DAY, hour);\n        calendar.set(Calendar.MINUTE, minutes);\n        calendar.set(Calendar.SECOND, seconds);\n        calendar.set(Calendar.MILLISECOND, milliseconds);\n\n        pos.setIndex(offset);\n        return calendar.getTime();\n        // If we get a ParseException it'll already have the right message/offset.\n        // Other exception types can convert here.\n    } catch (IndexOutOfBoundsException e) {\n        fail = e;\n    } catch (NumberFormatException e) {\n        fail = e;\n    } catch (IllegalArgumentException e) {\n        fail = e;\n    }\n    String input = (date == null) ? null : ('\"' + date + \"'\");\n    String msg = fail.getMessage();\n    if (msg == null || msg.isEmpty()) {\n        msg = \"(\" + fail.getClass().getName() + \")\";\n    }\n    ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());\n    ex.initCause(fail);\n    throw ex;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}