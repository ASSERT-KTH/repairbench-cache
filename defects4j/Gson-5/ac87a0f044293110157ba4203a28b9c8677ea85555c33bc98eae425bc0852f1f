{
    "generation": "public static Date parse(String date, ParsePosition pos) throws ParseException {\n    Exception fail = null;\n    try {\n        int offset = pos.getIndex();\n\n        // extract year\n        int year = parseInt(date, offset, offset += 4);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract month\n        int month = parseInt(date, offset, offset += 2);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract day\n        int day = parseInt(date, offset, offset += 2);\n\n        // default time values\n        int hour = 0, minutes = 0, seconds = 0, milliseconds = 0;\n\n        // time component?\n        boolean hasT = checkOffset(date, offset, 'T');\n        if (!hasT && date.length() <= offset) {\n            Calendar cal = new GregorianCalendar(year, month - 1, day);\n            pos.setIndex(offset);\n            return cal.getTime();\n        }\n\n        if (hasT) {\n            // hours\n            hour = parseInt(date, offset += 1, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n            // minutes\n            minutes = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n            // optional seconds and fraction\n            if (date.length() > offset) {\n                char c = date.charAt(offset);\n                if (c != 'Z' && c != '+' && c != '-') {\n                    seconds = parseInt(date, offset, offset += 2);\n                    if (seconds > 59 && seconds < 63) {\n                        seconds = 59; // truncate leap seconds\n                    }\n                    if (checkOffset(date, offset, '.')) {\n                        offset += 1;\n                        int endOffset = indexOfNonDigit(date, offset + 1);\n                        int parseEnd = Math.min(endOffset, offset + 3);\n                        int fraction = parseInt(date, offset, parseEnd);\n                        switch (parseEnd - offset) {\n                            case 1: milliseconds = fraction * 100; break;\n                            case 2: milliseconds = fraction * 10; break;\n                            default: milliseconds = fraction; break;\n                        }\n                        offset = endOffset;\n                    }\n                }\n            }\n        }\n\n        // parse timezone\n        if (date.length() <= offset) {\n            throw new IllegalArgumentException(\"No time zone indicator\");\n        }\n        TimeZone timezone;\n        char tzIndicator = date.charAt(offset);\n        if (tzIndicator == 'Z') {\n            timezone = TIMEZONE_UTC;\n            offset += 1;\n        } else if (tzIndicator == '+' || tzIndicator == '-') {\n            // grab the rest as the offset\n            String rawOffset = date.substring(offset);\n            int rawLen = rawOffset.length();\n            // normalize \"+HH\" to \"+HH:00\"\n            String normOffset = rawOffset;\n            if (rawOffset.length() == 3) {\n                normOffset = rawOffset + \":00\";\n            }\n            offset += rawLen;\n\n            // treat zero-offset specially\n            if (\"+0000\".equals(normOffset) || \"+00:00\".equals(normOffset)) {\n                timezone = TIMEZONE_UTC;\n            } else {\n                String timezoneId = \"GMT\" + normOffset;\n                timezone = TimeZone.getTimeZone(timezoneId);\n                String actual = timezone.getID();\n                if (!actual.equals(timezoneId)) {\n                    String cleaned = actual.replace(\":\", \"\");\n                    if (!cleaned.equals(timezoneId)) {\n                        throw new IndexOutOfBoundsException(\n                            \"Mismatching time zone indicator: \" + timezoneId +\n                            \" given, resolves to \" + timezone.getID()\n                        );\n                    }\n                }\n            }\n        } else {\n            throw new IndexOutOfBoundsException(\n                \"Invalid time zone indicator '\" + tzIndicator + \"'\"\n            );\n        }\n\n        // build calendar\n        Calendar cal = new GregorianCalendar(timezone);\n        cal.setLenient(false);\n        cal.set(Calendar.YEAR, year);\n        cal.set(Calendar.MONTH, month - 1);\n        cal.set(Calendar.DAY_OF_MONTH, day);\n        cal.set(Calendar.HOUR_OF_DAY, hour);\n        cal.set(Calendar.MINUTE, minutes);\n        cal.set(Calendar.SECOND, seconds);\n        cal.set(Calendar.MILLISECOND, milliseconds);\n\n        pos.setIndex(offset);\n        return cal.getTime();\n    } catch (IndexOutOfBoundsException | NumberFormatException | IllegalArgumentException e) {\n        fail = e;\n    }\n\n    String input = date == null ? null : ('\"' + date + '\"');\n    String msg = fail.getMessage();\n    if (msg == null || msg.isEmpty()) {\n        msg = \"(\" + fail.getClass().getName() + \")\";\n    }\n    ParseException ex = new ParseException(\n        \"Failed to parse date [\" + input + \"]: \" + msg,\n        pos.getIndex()\n    );\n    ex.initCause(fail);\n    throw ex;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}