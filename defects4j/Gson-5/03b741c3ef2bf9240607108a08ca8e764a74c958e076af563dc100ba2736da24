{
    "generation": "public static Date parse(String date, ParsePosition pos) throws ParseException {\n    Exception fail = null;\n    try {\n        int offset = pos.getIndex();\n\n        // extract year\n        int year = parseInt(date, offset, offset += 4);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract month\n        int month = parseInt(date, offset, offset += 2);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract day\n        int day = parseInt(date, offset, offset += 2);\n\n        int hour = 0;\n        int minutes = 0;\n        int seconds = 0;\n        int milliseconds = 0;\n\n        boolean hasT = checkOffset(date, offset, 'T');\n\n        if (!hasT && (date.length() <= offset)) {\n            Calendar calendar = new GregorianCalendar(year, month - 1, day);\n            pos.setIndex(offset);\n            return calendar.getTime();\n        }\n\n        if (hasT) {\n            offset += 1;\n\n            hour = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n\n            minutes = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n\n            if (date.length() > offset) {\n                char c = date.charAt(offset);\n                if (c != 'Z' && c != '+' && c != '-') {\n                    if (offset + 1 < date.length() && (c = date.charAt(offset + 1)) != ':') {\n                        seconds = parseInt(date, offset, Math.min(date.length(), offset + 2));\n                        offset += 2;\n                    } else {\n                        seconds = parseInt(date, offset, offset += 2);\n                    }\n                    if (seconds > 59 && seconds < 63) {\n                        seconds = 59;\n                    }\n\n                    if (checkOffset(date, offset, '.')) {\n                        offset += 1;\n                        int endOffset = indexOfNonDigit(date, offset + 1);\n                        int parseEndOffset = Math.min(endOffset, offset + 3);\n                        int fraction = parseInt(date, offset, parseEndOffset);\n                        switch (parseEndOffset - offset) {\n                            case 2:\n                                milliseconds = fraction * 10;\n                                break;\n                            case 1:\n                                milliseconds = fraction * 100;\n                                break;\n                            default:\n                                milliseconds = fraction;\n                        }\n                        offset = endOffset;\n                    }\n                }\n            }\n        }\n\n        if (date.length() <= offset) {\n            throw new IllegalArgumentException(\"No time zone indicator\");\n        }\n\n        TimeZone timezone = null;\n        char timezoneIndicator = date.charAt(offset);\n\n        if (timezoneIndicator == 'Z') {\n            timezone = TIMEZONE_UTC;\n            offset += 1;\n        } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n            int tzOffsetStart = offset;\n            int plusSign = (timezoneIndicator == '+') ? 0 : 1;\n            offset = tzOffsetStart + 1;\n\n            int hours = 0;\n            if (offset < date.length()) {\n                hours = parseInt(date, offset, offset += 2);\n            }\n\n            if (offset < date.length() && date.charAt(offset) == ':') {\n                offset += 1;\n                int minutes = 0;\n                if (offset < date.length()) {\n                    minutes = parseInt(date, offset, offset += 2);\n                }\n                String timezoneId = String.format(\"%c%02d:%02d\", timezoneIndicator, hours, minutes);\n                timezone = TimeZone.getTimeZone(timezoneId);\n            } else {\n                String timezoneId = String.format(\"%c%02d\", timezoneIndicator, hours);\n                timezone = TimeZone.getTimeZone(timezoneId);\n            }\n\n            String act = timezone.getID();\n            if (!act.equals(timezoneId)) {\n                String cleaned = act.replace(\":\", \"\");\n                if (!cleaned.equals(timezoneId)) {\n                    throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \" + timezoneId + \" given, resolves to \" + timezone.getID());\n                }\n            }\n        } else {\n            throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\");\n        }\n\n        Calendar calendar = new GregorianCalendar(timezone);\n        calendar.setLenient(false);\n        calendar.set(Calendar.YEAR, year);\n        calendar.set(Calendar.MONTH, month - 1);\n        calendar.set(Calendar.DAY_OF_MONTH, day);\n        calendar.set(Calendar.HOUR_OF_DAY, hour);\n        calendar.set(Calendar.MINUTE, minutes);\n        calendar.set(Calendar.SECOND, seconds);\n        calendar.set(Calendar.MILLISECOND, milliseconds);\n\n        pos.setIndex(offset);\n        return calendar.getTime();\n    } catch (IndexOutOfBoundsException e) {\n        fail = e;\n    } catch (NumberFormatException e) {\n        fail = e;\n    } catch (IllegalArgumentException e) {\n        fail = e;\n    }\n    String input = (date == null) ? null : ('\"' + date + \"'\");\n    String msg = fail.getMessage();\n    if (msg == null || msg.isEmpty()) {\n        msg = \"(\" + fail.getClass().getName() + \")\";\n    }\n    int errorOffset = fail instanceof IndexOutOfBoundsException ? ((IndexOutOfBoundsException) fail).getIndex() : pos.getIndex();\n    ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, errorOffset);\n    ex.initCause(fail);\n    throw ex;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}