{
    "generation": "import java.util.Date;\nimport java.text.ParsePosition;\nimport java.text.ParseException;\nimport java.util.TimeZone;\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\n\n/**\n * Contains the fixed parse method.\n * Assumes helper methods parseInt, checkOffset and constant TIMEZONE_UTC exist\n * in the same scope or are accessible.\n * Example definition for TIMEZONE_UTC:\n * private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(\"UTC\");\n */\npublic class DateParserFixed {\n\n    // Assume TIMEZONE_UTC is defined elsewhere, e.g.:\n    private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(\"UTC\");\n\n    // Assume parseInt helper exists, e.g.:\n    private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {\n        if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex || beginIndex == endIndex) {\n            throw new NumberFormatException(\"Invalid range or empty slice for parseInt: [\" + beginIndex + \",\" + endIndex + \") in \\\"\" + value + \"\\\"\");\n        }\n        int result = 0;\n        int i = beginIndex;\n        while (i < endIndex) {\n            char c = value.charAt(i++);\n            if (c < '0' || c > '9') {\n                throw new NumberFormatException(\"For input string: \\\"\" + value.substring(beginIndex, endIndex) + \"\\\"\");\n            }\n            result = result * 10 + (c - '0');\n        }\n        return result;\n    }\n\n    // Assume checkOffset helper exists, e.g.:\n    private static boolean checkOffset(String value, int offset, char expected) {\n        return (offset < value.length()) && (value.charAt(offset) == expected);\n    }\n\n    // indexOfNonDigit helper might not be needed with the current implementation,\n    // but included for completeness if used elsewhere or if millisecond parsing relies on it.\n    private static int indexOfNonDigit(String string, int offset) {\n        for (int i = offset; i < string.length(); i++) {\n            if (!Character.isDigit(string.charAt(i))) {\n                return i;\n            }\n        }\n        return string.length(); // Return length if no non-digit found\n    }\n\n\n    /**\n     * Parse a date from ISO-8601 formatted string. It expects a format\n     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]\n     *\n     * @param date ISO string to parse in the appropriate format.\n     * @param pos The position to start parsing from, updated to where parsing stopped.\n     * @return the parsed date\n     * @throws ParseException if the date is not in the appropriate format\n     */\n    public static Date parse(String date, ParsePosition pos) throws ParseException {\n        Exception fail = null;\n        try {\n            int offset = pos.getIndex();\n\n            // extract year\n            // Need at least 4 chars for year\n            if (date.length() < offset + 4) throw new IndexOutOfBoundsException(\"Insufficient length for year\");\n            int year = parseInt(date, offset, offset + 4);\n            offset += 4;\n            if (checkOffset(date, offset, '-')) {\n                offset += 1; // advance past '-'\n            }\n\n            // extract month\n            // Need at least 2 chars for month\n            if (date.length() < offset + 2) throw new IndexOutOfBoundsException(\"Insufficient length for month\");\n            int month = parseInt(date, offset, offset + 2);\n            offset += 2;\n            if (checkOffset(date, offset, '-')) {\n                offset += 1; // advance past '-'\n            }\n\n            // extract day\n            // Need at least 2 chars for day\n            if (date.length() < offset + 2) throw new IndexOutOfBoundsException(\"Insufficient length for day\");\n            int day = parseInt(date, offset, offset + 2);\n            offset += 2;\n\n            // default time value\n            int hour = 0;\n            int minutes = 0;\n            int seconds = 0;\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n\n            // Check for 'T' separator indicating time component\n            boolean hasT = checkOffset(date, offset, 'T');\n\n            // If no 'T' and we are at the end of the string, it's a date-only format\n            if (!hasT && (date.length() <= offset)) {\n                Calendar calendar = new GregorianCalendar(year, month - 1, day);\n                pos.setIndex(offset);\n                return calendar.getTime();\n            }\n\n            if (hasT) {\n                offset += 1; // Skip 'T'\n\n                 // Determine end of time part (before timezone)\n                 int timePartEnd = date.length();\n                 for(int i=offset; i<date.length(); ++i) {\n                    char c = date.charAt(i);\n                    if(c == 'Z' || c == '+' || c == '-') {\n                        timePartEnd = i;\n                        break;\n                    }\n                 }\n\n                 // Need at least hh (2 chars) for time\n                 if (timePartEnd - offset >= 2) {\n                    hour = parseInt(date, offset, offset + 2);\n                    offset += 2;\n\n                    // Optional separator for extended format hh:mm...\n                    boolean expectingSeparator = checkOffset(date, offset, ':');\n                    if (expectingSeparator) offset++;\n\n                    // Need at least mm (2 chars)\n                    if (timePartEnd - offset >= 2) {\n                         minutes = parseInt(date, offset, offset + 2);\n                         offset += 2;\n\n                         // Check for seconds (optional)\n                         // If we had ':', we expect ':' again for seconds. If not, basic format requires no separator.\n                         boolean hasSeconds = false;\n                         if (expectingSeparator) { // If hh:mm format\n                              if (checkOffset(date, offset, ':')) { // Check for :ss\n                                  offset++;\n                                  hasSeconds = true;\n                              }\n                              // If no ':' here, time is hh:mm, proceed to timezone check.\n                         } else { // If hhmm format, check if there are more digits for ss\n                              if (timePartEnd - offset >= 2) { // Check for ss in hhmmss\n                                  hasSeconds = true;\n                              }\n                         }\n\n                         if (hasSeconds) {\n                              // Need at least ss (2 chars)\n                              if (timePartEnd - offset < 2) throw new IndexOutOfBoundsException(\"Insufficient length for seconds\");\n                              seconds = parseInt(date, offset, offset + 2);\n                              if (seconds > 59 && seconds < 63) seconds = 59; // Leap second adjust\n                              offset += 2;\n\n                              // Check for fractional seconds (milliseconds)\n                              if (checkOffset(date, offset, '.')) {\n                                  offset++; // Skip '.'\n                                  int startFraction = offset;\n                                  int endFraction = offset;\n                                  while (endFraction < timePartEnd && Character.isDigit(date.charAt(endFraction))) {\n                                       endFraction++;\n                                  }\n                                  int digitCount = endFraction - startFraction;\n                                  if (digitCount > 0) {\n                                       int effectiveEndFraction = Math.min(endFraction, startFraction + 3);\n                                       int fraction = parseInt(date, startFraction, effectiveEndFraction);\n                                       if (digitCount == 1) milliseconds = fraction * 100;\n                                       else if (digitCount == 2) milliseconds = fraction * 10;\n                                       else milliseconds = fraction; // handles >= 3 digits\n                                  }\n                                  offset = endFraction; // Advance past all fractional digits\n                              }\n                         }\n                    } else if (expectingSeparator) { // hh: format, missing mm\n                          throw new IndexOutOfBoundsException(\"Missing minutes after ':'\");\n                    } // else: hh format is invalid (need hhmm or hh:mm at least) handled by outer check\n\n                 } else if (timePartEnd - offset > 0) { // Some characters exist but not enough for hh\n                      throw new IllegalArgumentException(\"Time part must include at least hours (hh). Found: \" + date.substring(offset, timePartEnd));\n                 }\n                 // Ensure offset is correctly positioned at the start of the timezone indicator\n                 offset = timePartEnd;\n            }\n\n            // Extract timezone\n            // If we are at the end of the string after parsing date (and optionally time)\n            if (date.length() <= offset) {\n                // If time component was present (hasT=true), timezone is mandatory.\n                if (hasT) {\n                   throw new IllegalArgumentException(\"No time zone indicator found after time component.\");\n                } else {\n                    // Date-only string successfully parsed completely. This was handled by the first return.\n                    // If code reaches here with !hasT, it implies there were unexpected characters after\n                    // the date part, which should be an error based on strict ISO 8601.\n                    // However, the original code seemed to allow this by returning early.\n                    // Let's make it an error if extra chars exist after date-only.\n                    // Reaching here implies date.length() > offset, but no 'T' was found, and no Z/+/-.\n                    throw new IllegalArgumentException(\"Unexpected character(s) found after date part: '\" + date.substring(offset) +\"'\");\n                }\n            }\n\n            TimeZone timezone;\n            char timezoneIndicator = date.charAt(offset);\n\n            if (timezoneIndicator == 'Z') {\n                timezone = TIMEZONE_UTC;\n                offset += 1;\n            } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                // Determine length of the timezone offset string part (e.g., +01, +0100, +01:00)\n                int tzOffsetStart = offset;\n                int currentOffset = offset + 1; // Skip sign\n                // Simple check for expected formats\n                String timezoneOffsetStr;\n                int offsetLenConsumed;\n\n                if (date.length() >= tzOffsetStart + 6 && date.charAt(tzOffsetStart + 3) == ':') { // Check for \u00b1hh:mm\n                    timezoneOffsetStr = date.substring(tzOffsetStart, tzOffsetStart + 6);\n                    offsetLenConsumed = 6;\n                } else if (date.length() >= tzOffsetStart + 5 && Character.isDigit(date.charAt(tzOffsetStart + 3))) { // Check for \u00b1hhmm\n                     timezoneOffsetStr = date.substring(tzOffsetStart, tzOffsetStart + 5);\n                     offsetLenConsumed = 5;\n                } else if (date.length() >= tzOffsetStart + 3 && Character.isDigit(date.charAt(tzOffsetStart + 1))) { // Check for \u00b1hh\n                     timezoneOffsetStr = date.substring(tzOffsetStart, tzOffsetStart + 3);\n                     offsetLenConsumed = 3;\n                } else {\n                     throw new IndexOutOfBoundsException(\"Invalid or incomplete time zone indicator: \" + date.substring(tzOffsetStart));\n                }\n\n                String normalizedOffsetId; // Will store the \"GMT[+|-]hh:mm\" string\n\n                // Check for zero offset first\n                if (\"+00\".equals(timezoneOffsetStr) || \"+0000\".equals(timezoneOffsetStr) || \"+00:00\".equals(timezoneOffsetStr) ||\n                    \"-00\".equals(timezoneOffsetStr) || \"-0000\".equals(timezoneOffsetStr) || \"-00:00\".equals(timezoneOffsetStr)) {\n                    timezone = TIMEZONE_UTC;\n                } else {\n                    // Normalize to \"GMT[+|-]hh:mm\" format for TimeZone.getTimeZone()\n                    if (offsetLenConsumed == 6) { // \u00b1hh:mm format\n                        normalizedOffsetId = \"GMT\" + timezoneOffsetStr;\n                    } else if (offsetLenConsumed == 5) { // \u00b1hhmm format -> insert \":\"\n                         normalizedOffsetId = \"GMT\" + timezoneOffsetStr.substring(0, 3) + \":\" + timezoneOffsetStr.substring(3, 5);\n                    } else { // offsetLenConsumed == 3, \u00b1hh format -> append \":00\"\n                         normalizedOffsetId = \"GMT\" + timezoneOffsetStr + \":00\";\n                    }\n\n                    timezone = TimeZone.getTimeZone(normalizedOffsetId);\n\n                    // Verify that TimeZone.getTimeZone() understood the id.\n                    // It returns GMT if the id is not recognized. Check that it's not GMT unless the offset was actually zero.\n                    if (timezone.getID().equals(\"GMT\")) {\n                         throw new IndexOutOfBoundsException(\"Invalid time zone indicator: Could not parse '\" + timezoneOffsetStr + \"'\");\n                    }\n                }\n                // Advance offset by the consumed length of the timezone string\n                offset += offsetLenConsumed;\n\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\");\n            }\n\n            // Create Calendar and set fields\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1); // Calendar month is 0-based\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            // Check for validity, e.g. February 30th\n            try {\n                 calendar.getTimeInMillis(); // Forces computation and validation\n            } catch (IllegalArgumentException e) {\n                 fail = e; // Store exception to rethrow later as ParseException\n                 throw e; // Throw immediately to be caught by the outer handler\n            }\n\n            pos.setIndex(offset); // Update position to where parsing stopped\n            return calendar.getTime();\n\n        } catch (IndexOutOfBoundsException | NumberFormatException | IllegalArgumentException e) {\n            // Consolidate catch blocks for cleaner code\n            fail = e;\n        }\n\n        // Error handling logic: Create and throw ParseException\n        String input = (date == null) ? null : ('\"' + date + \"'\");\n        // Use the failing exception's message if available and specific\n        String specificMsg = (fail != null) ? fail.getMessage() : \"Unknown error\";\n        if (specificMsg == null || specificMsg.isEmpty()) {\n            specificMsg = \"(\" + (fail != null ? fail.getClass().getName() : \"Unknown\") + \")\";\n        }\n        // Use the index provided in ParsePosition. It reflects where parsing started.\n        // The error message contains details, but the offset in ParseException points to the start.\n        ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + specificMsg, pos.getIndex());\n        if (fail != null) {\n          ex.initCause(fail);\n        }\n        throw ex;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}