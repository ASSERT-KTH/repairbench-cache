{
    "generation": "public static Date parse(String date, ParsePosition pos) throws ParseException {\n    Exception fail = null;\n    try {\n        int offset = pos.getIndex();\n\n        // extract year\n        int year = parseInt(date, offset, offset += 4);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract month\n        int month = parseInt(date, offset, offset += 2);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract day\n        int day = parseInt(date, offset, offset += 2);\n        // default time value\n        int hour = 0;\n        int minutes = 0;\n        int seconds = 0;\n        int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n\n        // if the value has no time component (and no time zone), we are done\n        boolean hasT = checkOffset(date, offset, 'T');\n        \n        if (!hasT && (date.length() <= offset)) {\n            Calendar calendar = new GregorianCalendar(year, month - 1, day);\n\n            pos.setIndex(offset);\n            return calendar.getTime();\n        }\n\n        if (hasT) {\n\n            // extract hours, minutes, seconds and milliseconds\n            hour = parseInt(date, offset += 1, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n\n            minutes = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n            // second and milliseconds can be optional\n            if (date.length() > offset) {\n                char c = date.charAt(offset);\n                if (c != 'Z' && c != '+' && c != '-') {\n                    seconds = parseInt(date, offset, offset += 2);\n                    if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds\n                    // milliseconds can be optional in the format\n                    if (checkOffset(date, offset, '.')) {\n                        offset += 1;\n                        int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit\n                        int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits\n                        int fraction = parseInt(date, offset, parseEndOffset);\n                        // compensate for \"missing\" digits\n                        switch (parseEndOffset - offset) { // number of digits parsed\n                        case 2:\n                            milliseconds = fraction * 10;\n                            break;\n                        case 1:\n                            milliseconds = fraction * 100;\n                            break;\n                        default:\n                            milliseconds = fraction;\n                        }\n                        offset = endOffset;\n                    }\n                }\n            }\n        }\n\n        // extract timezone\n        if (date.length() <= offset) {\n            throw new IllegalArgumentException(\"No time zone indicator\");\n        }\n\n        TimeZone timezone = null;\n        char timezoneIndicator = date.charAt(offset);\n\n        if (timezoneIndicator == 'Z') {\n            timezone = TIMEZONE_UTC;\n            offset += 1;\n        } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n            // from offset, try to read [+-]hh[:mm] or [+-]hhmm or [+-]hh\n            int offStart = offset;\n            offset++; // skip + or -\n\n            // parse hour\n            if (offset + 1 >= date.length())\n                throw new IndexOutOfBoundsException(\"Incomplete time zone offset\");\n\n            char c0 = date.charAt(offset);\n            char c1 = date.charAt(offset + 1);\n            if (!Character.isDigit(c0) || !Character.isDigit(c1)) {\n                throw new IndexOutOfBoundsException(\"Invalid time zone hour: \" + c0 + c1);\n            }\n            String tzHour = \"\" + c0 + c1;\n            offset += 2;\n\n            String tzMin = \"00\";\n            if (offset < date.length()) {\n                char sep = date.charAt(offset);\n                if (sep == ':') {\n                    // [+-]hh:mm\n                    offset += 1;\n                    // must have 2 digits\n                    if (offset + 1 >= date.length())\n                        throw new IndexOutOfBoundsException(\"Invalid time zone minutes after colon\");\n                    char m0 = date.charAt(offset);\n                    char m1 = date.charAt(offset + 1);\n                    if (!Character.isDigit(m0) || !Character.isDigit(m1)) {\n                        throw new IndexOutOfBoundsException(\"Invalid time zone minute: \" + m0 + m1);\n                    }\n                    tzMin = \"\" + m0 + m1;\n                    offset += 2;\n                } else if (Character.isDigit(sep)) {\n                    // [+-]hhmm (no colon)\n                    if (offset + 1 >= date.length())\n                        throw new IndexOutOfBoundsException(\"Invalid time zone minutes\");\n                    char m0 = date.charAt(offset);\n                    char m1 = date.charAt(offset + 1);\n                    if (!Character.isDigit(m0) || !Character.isDigit(m1)) {\n                        throw new IndexOutOfBoundsException(\"Invalid time zone minute: \" + m0 + m1);\n                    }\n                    tzMin = \"\" + m0 + m1;\n                    offset += 2;\n                } else {\n                    // [+-]hh only, tzMin already \"00\"\n                }\n            }\n            // Now build timezone id\n            String timezoneOffset = date.substring(offStart, offset);\n            if (timezoneOffset.length() == 3) { // like +01 or -01\n                timezoneOffset = timezoneOffset + \":00\";\n            }\n            else if (timezoneOffset.length() == 5 && timezoneOffset.indexOf(':') < 0) { // like +0100\n                timezoneOffset = timezoneOffset.substring(0, 3) + \":\" + timezoneOffset.substring(3);\n            }\n            // 18-Jun-2015, tatu: Minor simplification, skip offset of \"+0000\"/\"+00:00\"\n            if (\"+00:00\".equals(timezoneOffset) || \"-00:00\".equals(timezoneOffset)) {\n                timezone = TIMEZONE_UTC;\n            } else {\n                String timezoneId = \"GMT\" + timezoneOffset;\n                timezone = TimeZone.getTimeZone(timezoneId);\n\n                String act = timezone.getID();\n                if (!act.equals(timezoneId)) {\n                    String cleaned = act.replace(\":\", \"\");\n                    if (!cleaned.equals(timezoneId.replace(\":\", \"\"))) {\n                        throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \" + timezoneId + \" given, resolves to \"\n                                + timezone.getID());\n                    }\n                }\n            }\n        } else {\n            throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\");\n        }\n\n        Calendar calendar = new GregorianCalendar(timezone);\n        calendar.setLenient(false);\n        calendar.set(Calendar.YEAR, year);\n        calendar.set(Calendar.MONTH, month - 1);\n        calendar.set(Calendar.DAY_OF_MONTH, day);\n        calendar.set(Calendar.HOUR_OF_DAY, hour);\n        calendar.set(Calendar.MINUTE, minutes);\n        calendar.set(Calendar.SECOND, seconds);\n        calendar.set(Calendar.MILLISECOND, milliseconds);\n\n        pos.setIndex(offset);\n        return calendar.getTime();\n        // If we get a ParseException it'll already have the right message/offset.\n        // Other exception types can convert here.\n    } catch (IndexOutOfBoundsException e) {\n        fail = e;\n    } catch (NumberFormatException e) {\n        fail = e;\n    } catch (IllegalArgumentException e) {\n        fail = e;\n    }\n    String input = (date == null) ? null : ('\"' + date + \"'\");\n    String msg = fail.getMessage();\n    if (msg == null || msg.isEmpty()) {\n        msg = \"(\" + fail.getClass().getName() + \")\";\n    }\n    ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());\n    ex.initCause(fail);\n    throw ex;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}