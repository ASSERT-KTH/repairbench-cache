{
    "generation": "    /**\n     * Parse a date from ISO-8601 formatted string. It expects a format\n     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]\n     *\n     * @param date ISO string to parse in the appropriate format.\n     * @param pos The position to start parsing from, updated to where parsing stopped.\n     * @return the parsed date\n     * @throws ParseException if the date is not in the appropriate format\n     */\n    public static Date parse(String date, ParsePosition pos) throws ParseException {\n        // Define TIMEZONE_UTC if not already available (e.g., via static import)\n        // Assuming it's available in the original class context.\n        // final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(\"UTC\");\n\n        Exception fail = null;\n        try {\n            int offset = pos.getIndex();\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            if (checkOffset(date, offset, '-')) {\n                offset += 1;\n            }\n\n            // extract month\n            int month = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, '-')) {\n                offset += 1;\n            }\n\n            // extract day\n            int day = parseInt(date, offset, offset += 2);\n            // default time value\n            int hour = 0;\n            int minutes = 0;\n            int seconds = 0;\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n\n            // if the value has no time component (and no time zone), we are done\n            boolean hasT = checkOffset(date, offset, 'T');\n\n            if (!hasT && (date.length() <= offset)) {\n                Calendar calendar = new GregorianCalendar(year, month - 1, day);\n\n                pos.setIndex(offset);\n                return calendar.getTime();\n            }\n\n            if (hasT) {\n                // Skip 'T'\n                offset += 1;\n\n                // extract hours, minutes, seconds and milliseconds\n                hour = parseInt(date, offset, offset += 2);\n                if (checkOffset(date, offset, ':')) {\n                    offset += 1;\n                }\n\n                minutes = parseInt(date, offset, offset += 2);\n                if (checkOffset(date, offset, ':')) {\n                    offset += 1;\n                }\n                // second and milliseconds can be optional\n                if (date.length() > offset) {\n                    char c = date.charAt(offset);\n                    if (c != 'Z' && c != '+' && c != '-') {\n                        seconds = parseInt(date, offset, offset += 2);\n                        if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds\n                        // milliseconds can be optional in the format\n                        if (checkOffset(date, offset, '.')) {\n                            offset += 1;\n                            int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit\n                            if (endOffset == -1) { // Handle case where digits are till the end\n                                endOffset = date.length();\n                            }\n                            int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits\n                            int fraction = parseInt(date, offset, parseEndOffset);\n                            // compensate for \"missing\" digits\n                            switch (parseEndOffset - offset) { // number of digits parsed\n                            case 2:\n                                milliseconds = fraction * 10;\n                                break;\n                            case 1:\n                                milliseconds = fraction * 100;\n                                break;\n                            default:\n                                milliseconds = fraction;\n                            }\n                            offset = endOffset;\n                        }\n                    }\n                }\n            }\n\n            // extract timezone\n            if (date.length() <= offset) {\n                throw new IllegalArgumentException(\"No time zone indicator\");\n            }\n\n            TimeZone timezone;\n            char timezoneIndicator = date.charAt(offset);\n\n            if (timezoneIndicator == 'Z') {\n                // Assuming TIMEZONE_UTC is defined elsewhere, e.g., static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(\"UTC\");\n                timezone = Iso8601Utils.TIMEZONE_UTC; // Use the actual constant name from the class context\n                offset += 1;\n            } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                String timezoneOffsetStr = date.substring(offset);\n                String timezoneId;\n\n                // The ISO8601 standard allows for formats +hh:mm, +hhmm, and +hh.\n                // java.util.TimeZone.getTimeZone requires \"GMT[+-]hh:mm\".\n\n                // Ensure minimal length for timezone offset (+hh)\n                if (timezoneOffsetStr.length() < 3) {\n                     throw new IndexOutOfBoundsException(\"Invalid time zone indicator \" + timezoneOffsetStr);\n                }\n\n                // Check for +hh:mm format\n                if (timezoneOffsetStr.length() >= 6 && timezoneOffsetStr.charAt(3) == ':') {\n                   timezoneId = \"GMT\" + timezoneOffsetStr.substring(0, 6);\n                   offset += 6;\n                }\n                // Check for +hhmm format\n                else if (timezoneOffsetStr.length() >= 5) {\n                    timezoneId = \"GMT\" + timezoneOffsetStr.substring(0, 3) + \":\" + timezoneOffsetStr.substring(3, 5);\n                    offset += 5;\n                }\n                // Check for +hh format\n                else {\n                    timezoneId = \"GMT\" + timezoneOffsetStr.substring(0, 3) + \":00\";\n                    offset += 3;\n                }\n\n                timezone = TimeZone.getTimeZone(timezoneId);\n                String act = timezone.getID();\n\n                // Verify that the parsed timezone ID is valid and matches what we constructed.\n                // TimeZone.getTimeZone returns \"GMT\" for invalid IDs or offset 0.\n                if (!act.equals(timezoneId)) {\n                    // Handle the case where GMT+00:00 or GMT-00:00 resolves to just \"GMT\"\n                    boolean isGmtZero = (timezoneId.equals(\"GMT+00:00\") || timezoneId.equals(\"GMT-00:00\")) && act.equals(\"GMT\");\n                    if (!isGmtZero) {\n                        // The original code compared cleaned versions for robustness against minor format differences.\n                        String cleanedId = timezoneId.replace(\":\", \"\");\n                        String cleanedAct = act.replace(\":\", \"\");\n                        if (!cleanedId.equals(cleanedAct)) {\n                             throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \"+timezoneId+\" given, resolves to \"\n                                     +timezone.getID() + \" for input \" + timezoneOffsetStr);\n                        }\n                    }\n                }\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\");\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            pos.setIndex(offset);\n            return calendar.getTime();\n            // If we get a ParseException it'll already have the right message/offset.\n            // Other exception types can convert here.\n        } catch (IndexOutOfBoundsException e) {\n            fail = e;\n        } catch (NumberFormatException e) {\n            fail = e;\n        } catch (IllegalArgumentException e) {\n            fail = e;\n        }\n        String input = (date == null) ? null : ('\"' + date + \"'\");\n        String msg = (fail != null) ? fail.getMessage() : \"Unknown error\";\n        if (msg == null || msg.isEmpty()) {\n            msg = \"(\" + fail.getClass().getName() + \")\";\n        }\n        ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());\n        ex.initCause(fail);\n        throw ex;\n    }\n\n    // Helper methods used by parse (assuming they exist in the original class)\n\n    /**\n     * Check if the expected character exist at the given offset in the value.\n     *\n     * @param value the string to check at the specified offset\n     * @param offset the offset to look for the expected character\n     * @param expected the expected character\n     * @return true if the character is found\n     */\n    private static boolean checkOffset(String value, int offset, char expected) {\n        return (offset < value.length()) && (value.charAt(offset) == expected);\n    }\n\n    /**\n     * Parse an integer located between 2 given offsets in a string\n     *\n     * @param value the string to parse\n     * @param beginIndex the start index for the integer in the string\n     * @param endIndex the end index for the integer in the string\n     * @return the int\n     * @throws NumberFormatException if the value is not a number\n     */\n    private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException {\n        if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {\n            throw new NumberFormatException(value);\n        }\n        // use same logic as in Integer.parseInt() but avoid creating substrings\n        int i = beginIndex;\n        int result = 0;\n        int digit;\n\n        if (i < endIndex) {\n            digit = Character.digit(value.charAt(i++), 10);\n            if (digit < 0) {\n                throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));\n            }\n            result = -digit;\n        }\n\n        while (i < endIndex) {\n            digit = Character.digit(value.charAt(i++), 10);\n            if (digit < 0) {\n                throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));\n            }\n            result *= 10;\n            result -= digit;\n        }\n        return -result;\n    }\n\n     /**\n      * Returns the index of the first character in the string that is not a digit, starting at offset.\n      */\n     private static int indexOfNonDigit(String string, int offset) {\n         for (int i = offset; i < string.length(); i++) {\n             char c = string.charAt(i);\n             if (c < '0' || c > '9') return i;\n         }\n         return string.length();\n     }\n\n     // Assume Iso8601Utils.TIMEZONE_UTC is defined like this:\n     private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(\"UTC\");\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}