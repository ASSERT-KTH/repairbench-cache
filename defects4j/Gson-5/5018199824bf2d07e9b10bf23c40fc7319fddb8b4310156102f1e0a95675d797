{
    "generation": "public static Date parse(String date, ParsePosition pos) throws ParseException {\n    Exception fail = null;\n    try {\n        int offset = pos.getIndex();\n\n        // extract year\n        int year = parseInt(date, offset, offset += 4);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract month\n        int month = parseInt(date, offset, offset += 2);\n        if (checkOffset(date, offset, '-')) {\n            offset += 1;\n        }\n\n        // extract day\n        int day = parseInt(date, offset, offset += 2);\n        // default time value\n        int hour = 0;\n        int minutes = 0;\n        int seconds = 0;\n        int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n\n        // if the value has no time component (and no time zone), we are done\n        boolean hasT = checkOffset(date, offset, 'T');\n        \n        if (!hasT && (date.length() <= offset)) {\n            Calendar calendar = new GregorianCalendar(year, month - 1, day);\n\n            pos.setIndex(offset);\n            return calendar.getTime();\n        }\n\n        if (hasT) {\n\n            // extract hours, minutes, seconds and milliseconds\n            hour = parseInt(date, offset += 1, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n\n            minutes = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, ':')) {\n                offset += 1;\n            }\n            // second and milliseconds can be optional\n            if (date.length() > offset) {\n                char c = date.charAt(offset);\n                if (c != 'Z' && c != '+' && c != '-') {\n                    seconds = parseInt(date, offset, offset += 2);\n                    if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds\n                    // milliseconds can be optional in the format\n                    if (checkOffset(date, offset, '.')) {\n                        offset += 1;\n                        int endOffset = indexOfNonDigit(date, offset); // fixed: do not \"+1\"\n                        int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits\n                        int fraction = parseInt(date, offset, parseEndOffset);\n                        // compensate for \"missing\" digits\n                        switch (parseEndOffset - offset) { // number of digits parsed\n                        case 2:\n                            milliseconds = fraction * 10;\n                            break;\n                        case 1:\n                            milliseconds = fraction * 100;\n                            break;\n                        default:\n                            milliseconds = fraction;\n                        }\n                        offset = endOffset;\n                    }\n                }\n            }\n        }\n\n        // extract timezone\n        if (date.length() <= offset) {\n            throw new IllegalArgumentException(\"No time zone indicator\");\n        }\n\n        TimeZone timezone = null;\n        char timezoneIndicator = date.charAt(offset);\n\n        if (timezoneIndicator == 'Z') {\n            timezone = TIMEZONE_UTC;\n            offset += 1;\n        } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n            String timezoneOffset = date.substring(offset);\n\n            // Handle various cases for time zone: +hh, +hhmm, +hh:mm\n            // If only +hh, interpret as +hh:00 for Java's TimeZone parser\n\n            int tzLen = timezoneOffset.length();\n            String normalized = timezoneOffset;\n\n            // \"+01\", \"-08\" case (length 3), expand to \"+01:00\"\n            if (tzLen == 3 && (timezoneOffset.charAt(2) < '0' || timezoneOffset.charAt(2) > '9')) {\n                // unlikely, but could happen; ignore, fall through\n            }\n            if (tzLen == 3) {\n                char sign = timezoneOffset.charAt(0);\n                char h1 = timezoneOffset.charAt(1);\n                char h2 = timezoneOffset.charAt(2);\n                if (Character.isDigit(h1) && Character.isDigit(h2)) {\n                    normalized = timezoneOffset.substring(0, 3) + \":00\";\n                }\n            } else if ((tzLen == 2) || (tzLen == 3 && !Character.isDigit(timezoneOffset.charAt(2)))) {\n                // Only \"+1\" or \"+01\" or \"-9\" or \"-09\", so add \":00\"\n                normalized = timezoneOffset + \":00\";\n            } else if (tzLen > 3 && timezoneOffset.charAt(3) != ':' && tzLen == 5) {\n                // For \"+hhmm\", convert to \"+hh:mm\"\n                if (Character.isDigit(timezoneOffset.charAt(1)) &&\n                    Character.isDigit(timezoneOffset.charAt(2)) &&\n                    Character.isDigit(timezoneOffset.charAt(3)) &&\n                    Character.isDigit(timezoneOffset.charAt(4))) {\n                    normalized = timezoneOffset.substring(0, 3) + \":\" + timezoneOffset.substring(3, 5);\n                }\n            }\n            // Calculate the length we actually consume.\n            int normalizedLen = normalized.length();\n            // Make sure we don't go past the string.\n            int nextOffset = offset + normalizedLen;\n            if (nextOffset > date.length()) {\n                // If we extended the normalized string, cut it back as much as possible\n                normalized = normalized.substring(0, date.length() - offset);\n                normalizedLen = normalized.length();\n                nextOffset = date.length();\n            }\n            offset += normalizedLen;\n\n            // Handle UTC offset normalization for some known cases\n            if (\"+0000\".equals(normalized) || \"+00:00\".equals(normalized) || \"+00\".equals(normalized) || \"+00:00\".equals(timezoneOffset)) {\n                timezone = TIMEZONE_UTC;\n            } else {\n                String timezoneId = \"GMT\" + normalized;\n\n                timezone = TimeZone.getTimeZone(timezoneId);\n\n                String act = timezone.getID();\n                if (!act.equals(timezoneId)) {\n                    // Try without colons\n                    String cleaned = act.replace(\":\", \"\");\n                    if (!cleaned.equals(timezoneId.replace(\":\", \"\"))) {\n                        throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \" + timezoneId + \" given, resolves to \"\n                                + timezone.getID());\n                    }\n                }\n            }\n        } else {\n            throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator + \"'\");\n        }\n\n        Calendar calendar = new GregorianCalendar(timezone);\n        calendar.setLenient(false);\n        calendar.set(Calendar.YEAR, year);\n        calendar.set(Calendar.MONTH, month - 1);\n        calendar.set(Calendar.DAY_OF_MONTH, day);\n        calendar.set(Calendar.HOUR_OF_DAY, hour);\n        calendar.set(Calendar.MINUTE, minutes);\n        calendar.set(Calendar.SECOND, seconds);\n        calendar.set(Calendar.MILLISECOND, milliseconds);\n\n        pos.setIndex(offset);\n        return calendar.getTime();\n        // If we get a ParseException it'll already have the right message/offset.\n        // Other exception types can convert here.\n    } catch (IndexOutOfBoundsException e) {\n        fail = e;\n    } catch (NumberFormatException e) {\n        fail = e;\n    } catch (IllegalArgumentException e) {\n        fail = e;\n    }\n    String input = (date == null) ? null : ('\"' + date + \"'\");\n    String msg = fail.getMessage();\n    if (msg == null || msg.isEmpty()) {\n        msg = \"(\" + fail.getClass().getName() + \")\";\n    }\n    ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());\n    ex.initCause(fail);\n    throw ex;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}