{
    "generation": "    /**\n     * Parse a date from ISO-8601 formatted string. It expects a format\n     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]\n     *\n     * @param date ISO string to parse in the appropriate format.\n     * @param pos The position to start parsing from, updated to where parsing stopped.\n     * @return the parsed date\n     * @throws ParseException if the date is not in the appropriate format\n     */\n    public static Date parse(String date, ParsePosition pos) throws ParseException {\n        Exception fail = null;\n        try {\n            int offset = pos.getIndex();\n\n            // extract year\n            int year = parseInt(date, offset, offset += 4);\n            if (checkOffset(date, offset, '-')) {\n                offset += 1;\n            }\n\n            // extract month\n            int month = parseInt(date, offset, offset += 2);\n            if (checkOffset(date, offset, '-')) {\n                offset += 1;\n            }\n\n            // extract day\n            int day = parseInt(date, offset, offset += 2);\n            // default time value\n            int hour = 0;\n            int minutes = 0;\n            int seconds = 0;\n            int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time\n\n            // if the value has no time component (and no time zone), we are done\n            boolean hasT = checkOffset(date, offset, 'T');\n\n            if (!hasT && (date.length() <= offset)) {\n                Calendar calendar = new GregorianCalendar(year, month - 1, day);\n\n                pos.setIndex(offset);\n                return calendar.getTime();\n            }\n\n            if (hasT) {\n                // extract hours, minutes, seconds and milliseconds\n                hour = parseInt(date, offset += 1, offset += 2);\n                if (checkOffset(date, offset, ':')) {\n                    offset += 1;\n                }\n\n                minutes = parseInt(date, offset, offset += 2);\n                if (checkOffset(date, offset, ':')) {\n                    offset += 1;\n                }\n                // second and milliseconds can be optional\n                if (date.length() > offset) {\n                    char c = date.charAt(offset);\n                    if (c != 'Z' && c != '+' && c != '-') {\n                        seconds = parseInt(date, offset, offset += 2);\n                        if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds\n                        // milliseconds can be optional in the format\n                        if (checkOffset(date, offset, '.')) {\n                            offset += 1;\n                            int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit\n                            int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits\n                            int fraction = parseInt(date, offset, parseEndOffset);\n                            // compensate for \"missing\" digits\n                            switch (parseEndOffset - offset) { // number of digits parsed\n                            case 2:\n                                milliseconds = fraction * 10;\n                                break;\n                            case 1:\n                                milliseconds = fraction * 100;\n                                break;\n                            default:\n                                milliseconds = fraction;\n                            }\n                            offset = endOffset;\n                        }\n                    }\n                }\n            }\n\n            // extract timezone\n            if (date.length() <= offset) {\n                throw new IllegalArgumentException(\"No time zone indicator\");\n            }\n\n            TimeZone timezone = null;\n            char timezoneIndicator = date.charAt(offset);\n\n            if (timezoneIndicator == 'Z') {\n                timezone = TIMEZONE_UTC;\n                offset += 1;\n            } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {\n                // Start parsing at the '+' or '-' sign\n                int tzStart = offset;\n                offset++; // skip the sign\n\n                // Parse hours part (2 digits)\n                if (offset + 2 > date.length()) {\n                    throw new IllegalArgumentException(\"Invalid timezone format\");\n                }\n                String hourStr = date.substring(offset, offset + 2);\n                offset += 2;\n\n                // Check if there's minutes part (with or without ':')\n                boolean hasMinutes = false;\n                if (offset < date.length()) {\n                    char nextChar = date.charAt(offset);\n                    if (nextChar == ':') {\n                        hasMinutes = true;\n                        offset++; // skip the ':'\n                        if (offset + 2 > date.length()) {\n                            throw new IllegalArgumentException(\"Invalid timezone format\");\n                        }\n                    } else if (Character.isDigit(nextChar)) {\n                        hasMinutes = true;\n                        // For formats like \"+0100\" (no colon)\n                    }\n                }\n\n                String timezoneOffset;\n                if (hasMinutes) {\n                    // Check if we have 2 more digits for minutes\n                    if (offset + 2 <= date.length()) {\n                        // Get the minutes part (next 2 digits)\n                        String minutesStr = date.substring(offset, offset + 2);\n                        offset += 2;\n                        timezoneOffset = timezoneIndicator + hourStr + minutesStr;\n                    } else {\n                        // If we don't have enough digits for minutes, just use hours\n                        timezoneOffset = timezoneIndicator + hourStr;\n                    }\n                } else {\n                    // Just hours, format like \"+01\"\n                    timezoneOffset = timezoneIndicator + hourStr;\n                    // Append \":00\" to make it valid timezone format\n                    timezoneOffset = timezoneOffset + \":00\";\n                }\n\n                // TODO: Figure out why we need GMT instead of UTC\n                // 18-Jun-2015, tatu: Minor simplification, skip offset of \"+0000\"/\"+00:00\"\n                if (\"+0000\".equals(timezoneOffset) || \"+00:00\".equals(timezoneOffset)) {\n                    timezone = TIMEZONE_UTC;\n                } else {\n                    // Ensure proper format for TimeZone\n                    String timezoneId;\n                    if (timezoneOffset.contains(\":\") && timezoneOffset.length() == 6) {\n                        // Format is +hh:mm, which is correct\n                        timezoneId = \"GMT\" + timezoneOffset;\n                    } else if (timezoneOffset.length() == 5 && timezoneOffset.charAt(3) == ':') {\n                        // Format is +h:mm or +hh:mm (but length 5 means h:mm)\n                        timezoneId = \"GMT\" + timezoneOffset.substring(0, 2) + timezoneOffset.substring(2);\n                    } else if (timezoneOffset.length() == 5) {\n                        // Format is +hhmm (like +0100)\n                        timezoneId = \"GMT\" + timezoneOffset.substring(0, 3) + \":\" + timezoneOffset.substring(3);\n                    } else if (timezoneOffset.length() == 4) {\n                        // Format is +h or +hh (with :00 appended above)\n                        timezoneId = \"GMT\" + timezoneOffset.substring(0, timezoneOffset.length() - 2) + timezoneOffset.substring(timezoneOffset.length() - 2);\n                    } else {\n                        // Handle other cases\n                        // If we have something like \"+01\" (now \"+01:00\" after our modification)\n                        // Convert +01:00 to +0100 (which is what TimeZone expects)\n                        String normalized = timezoneOffset.replace(\":\", \"\");\n                        if (normalized.length() == 5) {\n                            normalized = normalized.substring(0, 3) + normalized.substring(3);\n                        }\n                        timezoneId = \"GMT\" + normalized;\n                    }\n\n                    timezone = TimeZone.getTimeZone(timezoneId);\n\n                    String act = timezone.getID();\n                    if (!act.equals(timezoneId)) {\n                        /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given\n                         *    one without. If so, don't sweat.\n                         *   Yes, very inefficient. Hopefully not hit often.\n                         *   If it becomes a perf problem, add 'loose' comparison instead.\n                         */\n                        String cleaned = act.replace(\":\", \"\");\n                        if (!cleaned.equals(timezoneId)) {\n                            throw new IndexOutOfBoundsException(\"Mismatching time zone indicator: \"+timezoneId+\" given, resolves to \"\n                                    +timezone.getID());\n                        }\n                    }\n                }\n            } else {\n                throw new IndexOutOfBoundsException(\"Invalid time zone indicator '\" + timezoneIndicator+\"'\");\n            }\n\n            Calendar calendar = new GregorianCalendar(timezone);\n            calendar.setLenient(false);\n            calendar.set(Calendar.YEAR, year);\n            calendar.set(Calendar.MONTH, month - 1);\n            calendar.set(Calendar.DAY_OF_MONTH, day);\n            calendar.set(Calendar.HOUR_OF_DAY, hour);\n            calendar.set(Calendar.MINUTE, minutes);\n            calendar.set(Calendar.SECOND, seconds);\n            calendar.set(Calendar.MILLISECOND, milliseconds);\n\n            pos.setIndex(offset);\n            return calendar.getTime();\n            // If we get a ParseException it'll already have the right message/offset.\n            // Other exception types can convert here.\n        } catch (IndexOutOfBoundsException e) {\n            fail = e;\n        } catch (NumberFormatException e) {\n            fail = e;\n        } catch (IllegalArgumentException e) {\n            fail = e;\n        }\n        String input = (date == null) ? null : ('\"' + date + \"'\");\n        String msg = fail.getMessage();\n        if (msg == null || msg.isEmpty()) {\n            msg = \"(\"+fail.getClass().getName()+\")\";\n        }\n        ParseException ex = new ParseException(\"Failed to parse date [\" + input + \"]: \" + msg, pos.getIndex());\n        ex.initCause(fail);\n        throw ex;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}