{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          // If the variable is local to this function, it's considered assigned once\n          // for its lifetime within a single call of this function.\n          // Example: function f() { var x = 1; } - 'x' is assigned once per call.\n          if (ref.getVar().getScope() == block.getScope()) {\n            // Variable is local to this function's scope. This is a valid single assignment.\n            break;\n          } else {\n            // The variable is not local to this function (e.g., global, or an outer-scoped variable).\n            // If a non-local variable is assigned inside a function, it means it can be\n            // assigned multiple times if that function is called more than once\n            // (e.g., in a loop, recursively, or just multiple explicit calls).\n            // In such cases, it's not \"assigned once in its lifetime\" in the global sense.\n            // This is a conservative assumption for inlining safety.\n            return false;\n          }\n        } else if (block.isLoop) {\n          // If the assignment is directly within a loop, it can be executed multiple times.\n          return false;\n        }\n      }\n\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}