{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      Var varToTest = ref.getVar();\n      boolean insideFunction = false;\n\n      // Make sure this assignment is not in a loop.\n      // Traverse up the basic block hierarchy from the assignment.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          // We found the enclosing function block.\n          // If the variable being assigned is global (or effectively non-local to this function's scope),\n          // and the assignment happens inside this function, then the assignment can occur\n          // multiple times if the function is called multiple times (e.g., recursively, or in a loop, etc.).\n          // In such cases, the variable is not assigned once in its lifetime.\n          // For local variables, their \"lifetime\" is tied to a single function call,\n          // so this check doesn't apply to them.\n          insideFunction = true;\n          break; // Stop climbing up once we hit the function boundary\n        } else if (block.isLoop) {\n          // The assignment is directly inside a syntactic loop.\n          // This means it can be executed multiple times.\n          return false;\n        }\n      }\n\n      // If the assignment is within a function and the variable is global,\n      // it means a global variable is assigned inside a function.\n      // Such an assignment can happen multiple times if the function is called multiple times.\n      if (insideFunction && varToTest.isGlobal()) {\n        return false;\n      }\n\n      // If we reach here, it means:\n      // 1. There's exactly one syntactic assignment.\n      // 2. That assignment is not within a syntactic loop.\n      // 3. If it's a global variable, its assignment is not inside a function.\n      //    (Or, if it's a local variable, its assignment is once per its function's execution).\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}