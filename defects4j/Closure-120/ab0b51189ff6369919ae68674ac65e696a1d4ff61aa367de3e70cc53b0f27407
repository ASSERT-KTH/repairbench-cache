{
    "generation": "/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime, considering only assignments within the same function scope.\n */\nboolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Ensure the assignment is within the same function scope and not in a loop.\n  BasicBlock assignmentBlock = ref.getBasicBlock();\n  BasicBlock currentFunctionBlock = assignmentBlock;\n  while (currentFunctionBlock != null && !currentFunctionBlock.isFunction) {\n    currentFunctionBlock = currentFunctionBlock.getParent();\n  }\n\n  if (currentFunctionBlock == null) {\n    return false; // Assignment is not within a function scope.\n  }\n\n  for (BasicBlock block = assignmentBlock;\n       block != null && block != currentFunctionBlock; \n       block = block.getParent()) {\n    if (block.isLoop) {\n      return false;\n    }\n  }\n\n  // Check for other assignments within the same function scope.\n  for (Reference otherRef : getReferences()) {\n    if (otherRef != ref && otherRef.isAssignment()) {\n      BasicBlock otherBlock = otherRef.getBasicBlock();\n      BasicBlock otherFunctionBlock = otherBlock;\n      while (otherFunctionBlock != null && !otherFunctionBlock.isFunction) {\n        otherFunctionBlock = otherFunctionBlock.getParent();\n      }\n      if (otherFunctionBlock == currentFunctionBlock) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}