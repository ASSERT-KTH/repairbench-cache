{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      // Additionally, for global variables, ensure the assignment is not inside a function,\n      // as functions can be called multiple times, violating the \"assigned once\" rule.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          // If the variable is global and its only assignment is inside this function,\n          // it's not truly \"assigned once for its lifetime\" as the function might be\n          // called multiple times (e.g., recursively or in a loop that calls the function).\n          // For local variables, it's fine, as each invocation of the function creates\n          // a new instance of the variable, which is assigned only once within its\n          // own specific lifetime.\n          if (this.getScope().isGlobal()) { // 'this' is assumed to be the Var object\n            return false;\n          }\n          // If the variable is not global (i.e., local to this function or an outer non-global scope),\n          // and the assignment is within this function, and we didn't find any lexical loops\n          // up to this point, then it's generally considered fine to inline.\n          break; // Stop at the function boundary, as checks within the function's scope are complete.\n        } else if (block.isLoop) {\n          // The assignment is found to be inside a lexical loop.\n          return false;\n        }\n      }\n\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}