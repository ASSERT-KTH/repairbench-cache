{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      // Assuming this method is called on a Var object (or similar representation\n      // of a variable), so 'this' can access properties like isGlobal().\n      // If not, a 'Var' object would need to be passed in or accessed via 'ref.getVar()'.\n\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        // Variable is either never assigned, or assigned more than once statically.\n        return false;\n      }\n\n      boolean assignmentInFunction = false;\n      // Traverse up the basic block hierarchy from the assignment.\n      // Check if the assignment is inside an explicit loop or inside a function.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          // The assignment is enclosed within a function definition.\n          assignmentInFunction = true;\n          // We found the enclosing function. For the purpose of determining if\n          // the assignment is within *any* function, we can stop climbing.\n          // The `block.isLoop` check handles cases where the function block itself\n          // might be implicitly within a loop (e.g., function defined in a loop).\n          break;\n        } else if (block.isLoop) {\n          // The assignment is directly within an explicit loop construct (e.g., for, while, do-while).\n          // This means it can be executed multiple times within a single scope.\n          return false;\n        }\n      }\n\n      // Special handling for global variables whose only assignment is inside a function.\n      // If a global variable's single static assignment occurs within a function,\n      // it means the assignment executes every time that function is called.\n      // If the function is called multiple times (e.g., recursively, or from a loop),\n      // the global variable is effectively assigned multiple times over the program's lifetime.\n      // This addresses the issue seen in testExternalIssue1053, where 'u' is global\n      // and assigned inside a recursive function 'f()'.\n      if (assignmentInFunction && this.isGlobal()) {\n        return false;\n      }\n\n      // If we reach here, it means:\n      // 1. There is exactly one static assignment for the variable (`getOneAndOnlyAssignment() != null`).\n      // 2. That assignment is not directly within an explicit loop.\n      // 3. If the variable is global, its assignment is not inside a function. (This covers the global recursive function case).\n      // 4. If the variable is local (i.e., `!this.isGlobal()`), its assignment can be inside a function.\n      //    For local variables, \"once in lifetime\" typically refers to within a single invocation\n      //    of their enclosing function, which is handled correctly by the `block.isLoop` check.\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}