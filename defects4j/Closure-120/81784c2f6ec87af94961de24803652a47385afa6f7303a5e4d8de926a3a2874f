{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      // Additionally, if the variable is global, its single assignment should not\n      // be within a function, as that function might be called multiple times,\n      // invalidating the \"assigned once in lifetime\" property for a global variable.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          // If the assignment is within a function:\n          // For local variables, an assignment once within their function's scope is\n          // considered \"once in lifetime\" for that specific function activation.\n          // For global variables, however, if their only assignment occurs inside\n          // a function, and that function can be called multiple times (e.g., recursively,\n          // or in a loop, or simply multiple times from different call sites),\n          // then the global variable is effectively assigned multiple times over\n          // its program lifetime.\n          if (this.isGlobal()) {\n            return false;\n          }\n          // For non-global (i.e., local) variables, reaching a function block means\n          // the assignment is within its defined scope, and the loop check is complete.\n          break;\n        } else if (block.isLoop) {\n          // If the assignment is within a loop, it can be executed multiple times.\n          return false;\n        }\n      }\n\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}