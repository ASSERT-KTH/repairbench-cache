{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          // Check if all uses are within this loop\n          for (Reference use : getReferences()) {\n            if (!isInBlock(use.getBasicBlock(), block)) {\n              return false;\n            }\n          }\n          break;\n        }\n      }\n\n      return true;\n    }\n\n    private boolean isInBlock(BasicBlock block, BasicBlock target) {\n      while (block != null) {\n        if (block == target) {\n          return true;\n        }\n        block = block.getParent();\n      }\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}