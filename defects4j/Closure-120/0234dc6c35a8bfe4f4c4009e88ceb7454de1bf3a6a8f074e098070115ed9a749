{
    "generation": "/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime.\n */\nboolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Do not treat an assignment inside a different (nested) function\n  // as the one-and-only assignment for this variable.\n  // We compare the function that declares the var against\n  // the function that contains the assignment.\n  Node declFn   = NodeUtil.getEnclosingFunction(name);\n  Node assignFn = NodeUtil.getEnclosingFunction(ref.node);\n  if (declFn != assignFn) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop.\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.isFunction) {\n      break;\n    } else if (block.isLoop) {\n      return false;\n    }\n  }\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}