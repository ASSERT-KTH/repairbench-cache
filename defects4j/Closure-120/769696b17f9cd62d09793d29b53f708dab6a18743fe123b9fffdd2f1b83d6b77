{
    "generation": "/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime, excluding assignments inside loops.\n */\nboolean isAssignedOnceInLifetime() {\n    Reference ref = getOneAndOnlyAssignment();\n    if (ref == null) {\n        return false;\n    }\n\n    // Check if the assignment is inside a loop\n    for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n        if (block.isLoop) {\n            // If the assignment is inside a loop, check if there are other assignments outside loops\n            if (hasOtherAssignmentsOutsideLoops()) {\n                return false;\n            }\n            break;\n        }\n    }\n\n    // Ensure no other assignments exist outside loops\n    return !hasOtherAssignmentsOutsideLoops();\n}\n\nprivate boolean hasOtherAssignmentsOutsideLoops() {\n    for (Reference otherRef : getAssignments()) {\n        BasicBlock otherBlock = otherRef.getBasicBlock();\n        boolean insideLoop = false;\n        while (otherBlock != null) {\n            if (otherBlock.isLoop) {\n                insideLoop = true;\n                break;\n            }\n            otherBlock = otherBlock.getParent();\n        }\n        if (!insideLoop && otherRef != getOneAndOnlyAssignment()) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}