{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        // 0 or multiple assignments\n        return false;\n      }\n\n      // Check if the assignment occurs in a scope that can be executed multiple\n      // times.\n\n      // First, check if the assignment is inside a function definition that is\n      // not the global scope. If so, the function might be called multiple times\n      // or recursively, leading to multiple executions of the assignment.\n      Node assignmentNode = ref.getNode();\n      Node enclosingFunction = NodeUtil.getEnclosingFunction(assignmentNode);\n      if (enclosingFunction != null && !NodeUtil.isGlobalFunction(enclosingFunction)) {\n        // Assignment is inside a non-global function; assume it can run multiple times.\n        return false;\n      }\n\n      // Second, check if the assignment is inside a loop structure in the\n      // control flow graph. This handles assignments in loops, even if they\n      // are in the global scope.\n      BasicBlock assignmentBlock = ref.getBasicBlock();\n      // Traverse up the basic block hierarchy from the assignment's block.\n      for (BasicBlock block = assignmentBlock;\n           block != null; block = block.getParent()) {\n        // If we hit the function block (which must be the global block based on\n        // the previous check) before finding a loop, then the assignment is not\n        // in a loop within this scope.\n        if (block.isFunction) {\n          break;\n        }\n        // If we find a loop block, the assignment is inside a loop.\n        if (block.isLoop) {\n          return false;\n        }\n      }\n\n      // If we reach here, there's exactly one assignment, it's not in a\n      // non-global function, and it's not inside a loop structure.\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}