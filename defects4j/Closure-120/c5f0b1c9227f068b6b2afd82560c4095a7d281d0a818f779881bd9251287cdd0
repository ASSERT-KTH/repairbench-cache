{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      // For global variables, also ensure it's not inside a function.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          // If the variable is global and its single assignment is inside a function,\n          // it's not truly assigned once in its lifetime, as the function can be\n          // called multiple times.\n          if (this.scope.isGlobal()) {\n            return false;\n          }\n          // For non-global variables, reaching a function boundary is the end\n          // of the relevant scope for this check.\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }\n      }\n\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}