{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        // No assignment or multiple syntactic assignments\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      // Traverse the basic block graph upwards from the assignment block.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          // Reached the function boundary without finding a loop within the function.\n          break;\n        } else if (block.isLoop) {\n          // Assignment is syntactically inside a loop construct.\n          return false;\n        }\n      }\n\n      // Make sure this assignment is not inside a function scope.\n      // An assignment within a function might be executed multiple times if the\n      // function is called multiple times (e.g., recursion, called in loops,\n      // multiple call sites). This is a conservative check to prevent incorrect\n      // inlining like in the case of recursion (see issue 1053).\n      Scope scope = ref.getScope();\n      if (scope.isFunctionScope()) {\n        // Assignment occurs within a function. Conservatively assume it might\n        // execute more than once in the program's lifetime.\n        return false;\n      }\n\n      // If the assignment is not in a loop and is in the global scope,\n      // it's considered assigned once in its lifetime based on this check.\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}