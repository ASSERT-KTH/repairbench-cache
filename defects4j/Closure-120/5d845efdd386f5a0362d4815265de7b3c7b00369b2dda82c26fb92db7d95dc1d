{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        // Variable is never assigned or assigned multiple times.\n        return false;\n      }\n\n      // Traverse up the basic block graph starting from the assignment's block.\n      // This checks for loops and enclosing functions.\n      BasicBlock assignmentBlock = ref.getBasicBlock();\n      // If the assignment block is null (e.g., CFG analysis skipped), conservatively return false.\n      if (assignmentBlock == null) {\n          return false;\n      }\n      \n      for (BasicBlock block = assignmentBlock;\n           block != null; block = block.getParent()) {\n        // If the assignment is within a loop, it can occur multiple times.\n        if (block.isLoop) {\n          return false;\n        }\n        // If the assignment is within a function, it can occur multiple times\n        // if the function is called multiple times (e.g., recursion, loops,\n        // multiple call sites). Conservatively assume this might happen.\n        if (block.isFunction) {\n          return false;\n        }\n      }\n\n      // If the loop completes without encountering a loop or a function block,\n      // it implies the assignment is in the global scope and not inside any loop construct\n      // traversed by the block parents.\n      // Therefore, it's assigned exactly once in its lifetime.\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}