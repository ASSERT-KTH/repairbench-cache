{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        // If there's no single assignment (e.g., multiple assignments),\n        // it's not assigned once.\n        return false;\n      }\n\n      // Flag to track if the assignment is found within a function's scope.\n      boolean inFunction = false;\n\n      // Make sure this assignment is not in an explicit loop structure.\n      // We traverse up the basic block hierarchy from the assignment node.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          // We've reached a function boundary. Mark that the assignment is within a function.\n          inFunction = true;\n          // Stop traversing further up once a function boundary is found,\n          // as we are concerned about loops or function calls relative to this function.\n          break;\n        } else if (block.isLoop) {\n          // If the assignment is directly inside a loop block, it's not assigned once.\n          return false;\n        }\n      }\n\n      // Additional check:\n      // If the variable is not local to its scope (e.g., a global variable or\n      // a variable from an outer scope), and its only assignment is inside\n      // a function, we cannot guarantee it's assigned only once in its lifetime.\n      // This is because the function might be called multiple times (e.g., recursively\n      // or from multiple call sites), leading to multiple assignments to the same\n      // variable instance. This is a conservative but necessary check for correct inlining.\n      if (!getScope().isLocal() && inFunction) {\n        return false;\n      }\n\n      // If no explicit loop was found and the non-local variable check passes,\n      // then it's considered assigned once in its lifetime.\n      return true;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}