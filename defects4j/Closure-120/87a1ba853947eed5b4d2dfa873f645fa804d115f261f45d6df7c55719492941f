{
    "generation": "    /**\n     * @return Whether the variable is only assigned a value once for its\n     *     lifetime.\n     */\n    boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      // Also, if the assignment is inside a function and the variable is\n      // not local to that function, it's not assigned once in its lifetime\n      // (as the function can be called multiple times).\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isLoop) {\n          return false;\n        } else if (block.isFunction) {\n          // If the variable's declaration scope (this.scope) is different from\n          // the current function's scope (block.getScope()), it means it's a\n          // non-local variable (global or from an outer function's scope).\n          // An assignment to such a variable inside a function does not\n          // guarantee \"once in lifetime\" because the function can be called\n          // multiple times, leading to multiple assignments.\n          // 'this' refers to the Var object for which this method is called.\n          if (this.scope != block.getScope()) {\n            return false;\n          }\n          // If the variable is local to this function (this.scope == block.getScope()),\n          // then the assignment happens once per invocation of this function.\n          // Since the variable's lifetime is tied to this function's invocation,\n          // it is considered assigned once in its lifetime. So we can stop\n          // traversing parent blocks.\n          break;\n        }\n      }\n\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}