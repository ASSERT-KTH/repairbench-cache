{
    "generation": "/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime.\n */\nboolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop.\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.isFunction) {\n      break;\n    } else if (block.isLoop) {\n      return false;\n    }\n  }\n\n  // Also check that the assignment does not occur inside a function that is\n  // recursive or called multiple times, otherwise the assignment may execute\n  // multiple times during lifetime.\n  if (ref.getSymbol() != null && ref.getSymbol().getScope() != null) {\n    Scope scope = ref.getSymbol().getScope();\n    while (scope != null) {\n      if (scope.isFunctionScope() && scope.isLocal()) {\n        // If function scope is local (i.e., user-defined function),\n        // conservatively assume variable can be reassigned if function\n        // executes multiple times.\n        return false;\n      }\n      scope = scope.getParent();\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}