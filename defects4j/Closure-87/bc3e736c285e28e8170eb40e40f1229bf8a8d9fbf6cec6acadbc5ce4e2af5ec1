{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n            // We only have to worry about methods with an implicit 'this'\n            // param, or this doesn't happen.\n\n          // If the single statement is an EXPR_RESULT, we need to check if\n          // it's an event handler call that should not be folded due to the IE bug.\n          if (maybeExpr.getType() == Token.EXPR_RESULT) {\n            Node expr = maybeExpr.getFirstChild();\n            // Check if the expression is a CALL to a property that looks like an event handler.\n            if (expr != null && expr.getType() == Token.CALL) {\n              Node target = expr.getFirstChild(); // The function being called (e.g., GETPROP)\n              if (target != null && target.getType() == Token.GETPROP) {\n                Node propNode = target.getLastChild(); // The property name node (e.g., \"onchange\")\n                // Ensure the property name is a string literal (e.g., not a computed property).\n                if (propNode != null && propNode.isString()) {\n                  String propName = propNode.getString();\n                  // Heuristic: event handler names typically start with \"on\" and are longer than \"on\".\n                  if (propName.length() > 2 && propName.startsWith(\"on\")) {\n                    // This is an EXPR_RESULT wrapping an event handler call.\n                    // According to the comment, we should NOT fold these to prevent behavioral changes.\n                    return false;\n                  }\n                }\n              }\n            }\n          }\n\n          // For all other cases (non-EXPR_RESULT, or EXPR_RESULT not matching the event handler pattern),\n          // return whether it's generally considered an expression node.\n          return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}