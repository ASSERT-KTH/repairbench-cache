{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n\n        // We only have to worry about methods with an implicit 'this'\n        // param, or this doesn't happen.\n\n        // FIX: Prevent folding of EXPR_RESULT nodes that are problematic.\n        // This means assignments and certain method calls where their return\n        // value semantics could change if folded into an expression context\n        // (like being part of a conditional operator).\n        if (maybeExpr.isExprResult()) {\n          Node expressionInExprResult = maybeExpr.getFirstChild();\n\n          // Case 1: Calls that imply a 'this' context (method calls).\n          // This includes event handlers (e.g., 'obj.onclick()') and\n          // method calls via bracket notation (e.g., 'obj['method']()').\n          // These should not be folded into expressions.\n          if (expressionInExprResult.isCall()) {\n            // NodeUtil.isEventhandlerCall checks for 'obj.onxxxx()' patterns.\n            if (NodeUtil.isEventhandlerCall(expressionInExprResult)) {\n              return false;\n            }\n            // Check for method calls using bracket notation, like 'obj['x']()'.\n            // These also have 'this' context and are implied by testIssue291.\n            if (expressionInExprResult.getFirstChild().isGetElem()) {\n              return false;\n            }\n          }\n\n          // Case 2: Assignment expressions (e.g., 'x = y;').\n          // Their return value semantics can also be problematic if used\n          // implicitly in an expression context. NodeUtil.isExprAssign\n          // already confirms that maybeExpr is an EXPR_RESULT wrapping an ASSIGN.\n          if (NodeUtil.isExprAssign(maybeExpr)) {\n            return false;\n          }\n\n          // If it's an EXPR_RESULT but not one of the problematic cases above,\n          // then it is considered foldable. (e.g., '1 + 2;')\n          return true;\n        }\n\n        // For statements that are not EXPR_RESULTs but are expression nodes\n        // (e.g., the expression inside a RETURN node), they are generally foldable.\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}