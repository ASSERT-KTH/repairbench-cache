{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression, and the expression is not a call to a potentially\n *     side-effecting method like event handlers.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n        if (n.hasOneChild()) {\n            Node maybeExpr = n.getFirstChild();\n            if (NodeUtil.isExpressionNode(maybeExpr)) {\n                // Check if the expression is a call to a potentially side-effecting method\n                if (maybeExpr.getType() == Token.CALL) {\n                    Node callee = maybeExpr.getFirstChild();\n                    if (callee.getType() == Token.GETPROP) {\n                        String propName = callee.getLastChild().getString();\n                        // List of known problematic properties, e.g., event handlers\n                        if (propName.equals(\"onchange\") || propName.equals(\"bonchange\")) {\n                            // If the callee is 'this' or a property of 'this', don't fold\n                            Node obj = callee.getFirstChild();\n                            if (obj.getType() == Token.THIS || (obj.getType() == Token.GETPROP && obj.getFirstChild().getType() == Token.THIS)) {\n                                return false;\n                            }\n                        }\n                    }\n                }\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}