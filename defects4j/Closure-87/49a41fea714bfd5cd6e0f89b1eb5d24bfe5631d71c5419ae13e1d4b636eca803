{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n            // We only have to worry about methods with an implicit 'this'\n            // param, or this doesn't happen.\n\n          // If the single statement in the block is an EXPR_RESULT and\n          // the expression it wraps is an event handler call, we should\n          // not consider this block foldable to prevent problematic\n          // IE behavior when the expression's return value might be used.\n          if (maybeExpr.getType() == Token.EXPR_RESULT) {\n              if (NodeUtil.isEventHandlerCall(maybeExpr.getFirstChild())) {\n                  return false;\n              }\n          }\n\n          // For all other cases, check if the child is a general expression node.\n          // This covers non-EXPR_RESULT expressions (if any could be a single statement),\n          // or EXPR_RESULTs that are not event handlers.\n          return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}