{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n            // We only have to worry about methods with an implicit 'this'\n            // param, or this doesn't happen.\n\n          // If the single statement in the block is an EXPR_RESULT, we need to\n          // check if it's a problematic event handler call.\n          if (maybeExpr.getType() == Token.EXPR_RESULT) {\n            Node expr = maybeExpr.getFirstChild();\n            // The problematic case is a CALL or NEW instruction where the target\n            // is a GETPROP whose property name starts with \"on\" (e.g., f.onchange()).\n            // This is specific to implicit 'this' behavior in old IE for event handlers.\n            if (NodeUtil.isCallOrNew(expr)) {\n              Node target = expr.getFirstChild();\n              if (target.getType() == Token.GETPROP) {\n                String propName = target.getLastChild().getString();\n                // Heuristic for event handlers\n                if (propName != null && propName.startsWith(\"on\")) {\n                  // Do not fold this EXPR_RESULT block, as it may lead to IE bug 291.\n                  return false;\n                }\n              }\n            }\n            // If it's an EXPR_RESULT but not a problematic event handler call, it's foldable.\n            return true;\n          } else {\n            // If it's not an EXPR_RESULT (e.g., a function expression/declaration,\n            // or class expression/declaration used as a statement), check if it's\n            // generally considered an expression node. VAR statements are not\n            // expression nodes and would correctly return false.\n            return NodeUtil.isExpressionNode(maybeExpr);\n          }\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}