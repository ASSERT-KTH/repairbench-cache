{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n    // IE has a bug where event handlers behave differently when\n    // their return value is used vs. when their return value is in\n    // an EXPR_RESULT. We try to detect this case, and not fold\n    // EXPR_RESULTs into other expressions.\n    if (maybeExpr.getType() == Token.EXPR_RESULT) {\n      Node expr = maybeExpr.getFirstChild();\n      if (expr.getType() == Token.CALL) {\n        Node callee = expr.getFirstChild();\n        // Don't fold computed property calls (e.g., f['x']()).\n        if (callee.getType() == Token.GETELEM) {\n          return false;\n        }\n        // Don't fold event\u2010handler calls (e.g., f.onchange()).\n        if (callee.getType() == Token.GETPROP) {\n          String propName = callee.getLastChild().getString();\n          if (propName.startsWith(\"on\")) {\n            return false;\n          }\n        }\n      }\n    }\n    return NodeUtil.isExpressionNode(maybeExpr);\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}