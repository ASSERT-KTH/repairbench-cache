{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // Avoid folding EXPR_RESULTs for specific cases with \"onchange\"/event-handlers.\n        // See http://code.google.com/p/closure-compiler/issues/detail?id=291\n        if (NodeUtil.isExprCall(maybeExpr)) {\n          Node callTarget = maybeExpr.getFirstChild();\n          if (callTarget != null &&\n              (callTarget.isGetProp() || callTarget.isGetElem())) {\n            Node propNode = callTarget.getLastChild();\n            if (propNode != null && propNode.isString()) {\n              String propName = propNode.getString();\n              // Avoid folding known event handler property calls, like .onchange\n              if (propName.startsWith(\"on\")) {\n                return false;\n              }\n            }\n          }\n        }\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}