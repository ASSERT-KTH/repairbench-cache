{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      // Avoid folding certain expressions involving property accesses named \"onchange\".\n      if (NodeUtil.isExprCall(maybeExpr)) {\n        Node callTarget = maybeExpr.getFirstChild().getFirstChild();\n        // Check if the call target is a GETPROP node\n        if (callTarget != null && callTarget.getType() == Token.GETPROP) {\n          // If the property is named \"onchange\", do not fold\n          if (\"onchange\".equals(callTarget.getLastChild().getString())) {\n            return false;\n          }\n        }\n      }\n      return NodeUtil.isExpressionNode(maybeExpr);\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}