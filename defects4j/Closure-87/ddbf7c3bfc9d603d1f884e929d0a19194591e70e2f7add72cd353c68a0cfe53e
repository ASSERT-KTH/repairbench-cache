{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // Check if the single child is an EXPR_RESULT node.\n        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n          Node expr = maybeExpr.getFirstChild();\n\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n          // We only have to worry about methods with an implicit 'this'\n          // param, or this doesn't happen. Such methods are represented\n          // by GETPROP or GETELEM calls.\n\n          // Check if the expression is a call.\n          if (expr.getType() == Token.CALL) {\n            Node callTarget = expr.getFirstChild();\n            // Check for GETPROP: obj.method()\n            if (callTarget.getType() == Token.GETPROP) {\n              // Check if the property name looks like an event handler (e.g., \"onchange\").\n              // This is a heuristic based on the issue description and common patterns.\n              String propName = callTarget.getLastChild().getString();\n              if (propName.startsWith(\"on\")) {\n                return false; // Avoid folding due to potential IE bug.\n              }\n            // Check for GETELEM: obj['method']()\n            // Test case testIssue291 suggests these might also be problematic\n            // or folding them is undesirable in this context.\n            } else if (callTarget.getType() == Token.GETELEM) {\n              // Be conservative and prevent folding for GETELEM calls within\n              // single-statement blocks based on the test case.\n              return false; // Avoid folding.\n            }\n          }\n          // If it's not a problematic call (or not a call at all),\n          // the expression block is generally foldable.\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}