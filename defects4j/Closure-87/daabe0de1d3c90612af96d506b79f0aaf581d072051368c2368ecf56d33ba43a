{
    "generation": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\n\n// Assume NodeUtil class is available in the context for NodeUtil.isExpressionNode\n// and provides other utility methods for AST nodes.\n\n// The class containing this method (e.g., PeepholeSubstituteAlternateSyntax)\n// would typically have NodeUtil accessible or defined elsewhere.\n// For this problem, we'll assume NodeUtil.isExpressionNode is implicitly available.\n\n// The 'isEventhandlerCall' helper method should be part of the same class or a utility class like NodeUtil.\n\n  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n          if (maybeExpr.isExprResult()) {\n            Node expr = maybeExpr.getFirstChild();\n            // We only have to worry about methods with an implicit 'this'\n            // param, or this doesn't happen.\n            if (expr != null && expr.isCall() && expr.getFirstChild() != null && expr.getFirstChild().isGetProp() &&\n                isEventhandlerCall(expr)) {\n              return false; // Not foldable due to IE event handler bug.\n            }\n          }\n          // For all other cases, or if the special IE bug case doesn't apply,\n          // check if the statement is generally an expression statement.\n          return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Helper method to determine if a CALL node is an event handler call.\n   * This method typically resides in NodeUtil.\n   *\n   * @param callNode The CALL node to check.\n   * @return true if the call targets a property whose name starts with \"on\".\n   */\n  private boolean isEventhandlerCall(Node callNode) {\n    // The target of the call (e.g., 'obj.onclick' in 'obj.onclick()')\n    Node target = callNode.getFirstChild();\n    if (target == null) {\n      return false;\n    }\n\n    String propertyName = null;\n    if (target.isGetProp()) {\n      // For GETPROP, the property name is the last child (a STRING node).\n      propertyName = target.getLastChild().getString();\n    }\n    // Note: The original Closure Compiler fix for issue 291 specifically\n    // checked for isGetProp(). It did not include GETELEM (e.g., obj['onclick']()).\n    // If GETELEM was to be included, this block would need:\n    // else if (target.isGetElem()) {\n    //   Node indexNode = target.getLastChild();\n    //   if (indexNode != null && indexNode.isStringLit()) {\n    //     propertyName = indexNode.getString();\n    //   }\n    // }\n\n    // Check if the property name starts with \"on\" (a common heuristic for event handlers).\n    return propertyName != null && propertyName.startsWith(\"on\");\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}