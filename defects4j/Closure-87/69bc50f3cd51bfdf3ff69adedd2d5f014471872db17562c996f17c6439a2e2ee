{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression and is safe to fold into another expression\n *     (i.e. not an IE event-handler call).\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n\n    // IE has a bug where event handlers behave differently when\n    // their return value is used vs. when their return value is in\n    // an EXPR_RESULT. It's pretty freaking weird. See:\n    // http://code.google.com/p/closure-compiler/issues/detail?id=291\n    // We try to detect this case, and not fold EXPR_RESULTs\n    // into other expressions.\n    // We only have to worry about methods with an implicit 'this'\n    // param, or this doesn't happen.\n    if (maybeExpr.getType() == Token.EXPR_RESULT) {\n      Node expr = maybeExpr.getFirstChild();\n      if (expr != null && expr.getType() == Token.CALL) {\n        Node target = expr.getFirstChild();\n        if (target != null && target.getType() == Token.GETPROP) {\n          String propName = target.getLastChild().getString();\n          // Skip folding calls whose property name starts with \"on\"\n          // (event handlers) into an expression context.\n          if (propName.startsWith(\"on\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return NodeUtil.isExpressionNode(maybeExpr);\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}