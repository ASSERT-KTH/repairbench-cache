{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // Check if the single child is an EXPR_RESULT node.\n        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n          Node expr = maybeExpr.getFirstChild();\n\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n          // We only have to worry about methods with an implicit 'this'\n          // param, or this doesn't happen.\n          // Specifically, check for calls on properties (obj.prop()) or\n          // elements (obj['prop']()).\n\n          // Check if the expression is a call.\n          if (expr.getType() == Token.CALL) {\n            Node callee = expr.getFirstChild();\n            // Check if the callee is accessed via GETPROP or GETELEM.\n            if (NodeUtil.isGet(callee)) {\n              // Case 1: obj.onchange() - problematic in IE\n              if (callee.getType() == Token.GETPROP) {\n                String propName = callee.getLastChild().getString();\n                // Heuristic based on issue 291: only 'onchange' is problematic.\n                if (\"onchange\".equals(propName)) {\n                  return false; // Don't fold .onchange() calls.\n                }\n              }\n              // Case 2: obj['prop']() - also potentially problematic due to 'this'\n              else if (callee.getType() == Token.GETELEM) {\n                 // Folding obj['...']() can change behavior in IE.\n                 return false; // Don't fold obj['...']() calls.\n              }\n            }\n          }\n          // If the expression is not one of the problematic calls,\n          // it's safe to fold this expression block.\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}