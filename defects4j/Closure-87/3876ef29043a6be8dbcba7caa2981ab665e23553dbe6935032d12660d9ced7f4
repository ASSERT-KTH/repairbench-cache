{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression, and that expression is not an EXPR_RESULT that could be\n   *     affected by the IE bug described in\n   *     http://code.google.com/p/closure-compiler/issues/detail?id=291\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n          Node expr = maybeExpr.getFirstChild();\n          if (expr.getType() == Token.CALL) {\n            Node callee = expr.getFirstChild();\n            if (callee.getType() == Token.GETPROP &&\n                callee.getString().equals(\"onchange\")) {\n              return false;\n            }\n          }\n        }\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}