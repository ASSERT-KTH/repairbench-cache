{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n\n        // We only have to worry about methods with an implicit 'this'\n        // param, or this doesn't happen.\n\n        // Don't fold calls to a .onchange or .onclick property\n        // (which are special in IE, and can have observable effects\n        // if the return value is used).\n        if (NodeUtil.isExprCall(maybeExpr)) {\n          Node call = maybeExpr.getFirstChild();\n          if (call.isGetProp()) {\n            Node prop = call.getLastChild();\n            if (prop.isString()) {\n              String propName = prop.getString();\n              if (\"onchange\".equals(propName) || \"onclick\".equals(propName)) {\n                return false;\n              }\n            }\n          }\n        }\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}