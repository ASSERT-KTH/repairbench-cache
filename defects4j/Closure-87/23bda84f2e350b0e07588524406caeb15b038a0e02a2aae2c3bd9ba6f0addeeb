{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n            // We only have to worry about methods with an implicit 'this'\n            // param, or this doesn't happen.\n\n          // A block is foldable if its single child is an actual expression node\n          // (like CALL, ASSIGN, etc.), OR if it's an EXPR_RESULT statement\n          // (which by definition contains an expression that's evaluated for its side effects).\n          // The check for problematic event handlers in EXPR_RESULTs should be handled\n          // by the consuming peephole pass, not this utility function.\n          return maybeExpr.isExpression() || maybeExpr.getType() == Token.EXPR_RESULT;\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}