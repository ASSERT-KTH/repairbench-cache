{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.isBlock()) { // Use Node methods for readability\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // Check if the single statement is an EXPR_RESULT.\n        if (maybeExpr.isExprResult()) {\n          Node expr = maybeExpr.getFirstChild();\n          // Check for cases that should not be folded due to potential issues.\n          if (expr.isCall()) {\n            Node callee = expr.getFirstChild();\n            // Check calls with implicit 'this' (GETPROP/GETELEM).\n            if (callee.isGetProp() || callee.isGetElem()) {\n              // IE has a bug with event handlers (like \"onchange\") when the\n              // return value is used vs. discarded in an EXPR_RESULT.\n              // See http://code.google.com/p/closure-compiler/issues/detail?id=291\n              // We prevent folding these cases.\n              boolean isPotentialEventHandler = false;\n              Node prop = callee.getLastChild();\n              if (prop.isString()) {\n                  String propName = prop.getString();\n                  // Check if the property name looks like an event handler (starts with \"on\")\n                  if (propName.length() > 2 && propName.startsWith(\"on\")) {\n                      isPotentialEventHandler = true;\n                  }\n              }\n\n              // Also, based on testIssue291, folding calls via GETELEM\n              // (like obj['prop']()) seems unsafe in this context.\n              boolean isGetElem = callee.isGetElem();\n\n              // Do not fold if it's a GETELEM call or a potential \"on...\" event handler call.\n              if (isGetElem || isPotentialEventHandler) {\n                  return false;\n              }\n            }\n          }\n          // It's an EXPR_RESULT, and not an excluded case. Foldable.\n          return true;\n        }\n      }\n    }\n    // Otherwise, it's not a foldable expression block.\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}