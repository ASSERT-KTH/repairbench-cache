{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n        //\n        // We only have to worry about methods with an implicit 'this'\n        // param, or this doesn't happen.\n\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          // Don't fold if it's a method call that might be affected by IE bug\n          if (maybeExpr.isCall() && maybeExpr.getFirstChild().isGetProp()) {\n            String propertyName = maybeExpr.getFirstChild().getLastChild().getString();\n            if (\"onchange\".equals(propertyName) ||\n                \"onclick\".equals(propertyName) ||\n                // Add other event handler names here if needed\n                false) {\n              return false;\n            }\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}