{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n            // We only have to worry about methods with an implicit 'this'\n            // param, or this doesn't happen.\n\n          if (isBadIEEventHandler(maybeExpr)) {\n            return false;\n          }\n          return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n\n    return false;\n  }\n\n  private boolean isBadIEEventHandler(Node maybeExpr) {\n    if (maybeExpr.isCall() && maybeExpr.getFirstChild().getType() == Token.GETPROP) {\n      Node getProp = maybeExpr.getFirstChild();\n      String propName = getProp.getLastChild().getString();\n      // Check for common event handler names\n      if (Arrays.asList(\"onchange\", \"onclick\", \"onload\", \"onBlur\",\n          \"onfocus\", \"onabort\", \"onactivate\").contains(propName)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}