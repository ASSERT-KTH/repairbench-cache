{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression, excluding those expresssions that are problematic\n   *     for IE behavior differences.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.isBlock()) {\n      if (n.hasOneChild()) {\n        Node firstChild = n.getFirstChild();\n        if (firstChild.isExprResult()) {\n          Node expr = firstChild.getFirstChild();\n\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case (and GETELEMs as well, which seem\n          // necessary for tests based on the original fix), and not fold\n          // EXPR_RESULTs containing such calls into other expressions.\n          if (expr.isCall()) {\n            Node target = expr.getFirstChild();\n            // Calls with an implicit 'this' (GETPROP/GETELEM) can be problematic.\n            if (target.isGetProp()) {\n              // Property names starting with 'on' are known event handlers.\n              String propName = target.getLastChild().getString();\n              if (propName.startsWith(\"on\")) {\n                return false; // Don't fold obj.on*().\n              }\n            } else if (target.isGetElem()) {\n              // Empirically, GETELEM calls also need to be prevented from\n              // folding to pass the tests, regardless of the property name.\n              return false; // Don't fold obj['...']().\n            }\n          }\n          // Otherwise, the block is foldable.\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}