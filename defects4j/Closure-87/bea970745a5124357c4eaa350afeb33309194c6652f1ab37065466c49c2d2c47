{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node child = n.getFirstChild();\n    // If the child is an EXPR_RESULT, unwrap it to get at the expression.\n    Node expr = child;\n    if (child.getType() == Token.EXPR_RESULT) {\n      expr = child.getFirstChild();\n    }\n    if (expr != null && NodeUtil.isExpressionNode(expr)) {\n      // If the expression is a call, and its callee is a property access,\n      // then we might be looking at an event handler.  For IE the behavior\n      // differs when the event handler\u2019s return value is incorporated into \n      // another expression (via &&).  To avoid the bug we only allow folding \n      // if the enclosing if-condition is a literal (so no && will be used).\n      if (expr.getType() == Token.CALL) {\n        Node callee = expr.getFirstChild();\n        if (callee != null && callee.getType() == Token.GETPROP) {\n          Node prop = callee.getLastChild();\n          if (prop != null && prop.getType() == Token.STRING) {\n            String propName = prop.getString();\n            if (propName.startsWith(\"on\") && propName.length() > 2 &&\n                Character.isLowerCase(propName.charAt(2))) {\n              Node parent = n.getParent();\n              if (parent != null && parent.getType() == Token.IF) {\n                Node cond = parent.getFirstChild();\n                // When the condition is not a literal, folding would create a &&\n                // expression, which might expose the IE bug. In that case, do not\n                // fold the block.\n                if (cond.getType() != Token.TRUE && cond.getType() != Token.FALSE) {\n                  return false;\n                }\n              }\n            }\n          }\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}