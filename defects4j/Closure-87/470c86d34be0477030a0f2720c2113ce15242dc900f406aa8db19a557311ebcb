{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n            // We only have to worry about methods with an implicit 'this'\n            // param, or this doesn't happen.\n\n          // The original code was returning NodeUtil.isExpressionNode(maybeExpr).\n          // NodeUtil.isExpressionNode returns true for EXPR_RESULT.\n          // This causes blocks like `{ f.onchange(); }` to be considered foldable.\n          // However, due to the IE bug described above, EXPR_RESULTs containing\n          // event dispatch methods should NOT be folded.\n          if (maybeExpr.isExprResult()) {\n            Node actualExpr = maybeExpr.getFirstChild();\n            if (NodeUtil.isEventDispatchMethod(actualExpr)) {\n              return false; // Do not fold EXPR_RESULTs of event dispatch methods\n            }\n            // For other EXPR_RESULTs (not event dispatch), it is foldable.\n            // The original NodeUtil.isExpressionNode would correctly return true here.\n            // So, we let the subsequent return statement handle it.\n          }\n          // For any other type of statement (not an EXPR_RESULT),\n          // NodeUtil.isExpressionNode will return false,\n          // correctly indicating it's not a foldable express block.\n          return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}