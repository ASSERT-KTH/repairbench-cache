{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression, and folding is safe.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n        if (n.hasOneChild()) {\n            Node maybeExpr = n.getFirstChild();\n            // Prevent folding if the parent is an event handler to avoid IE issues.\n            Node parent = n.getParent();\n            if (parent != null && \n                (parent.getType() == Token.EVENT_HANDLER ||\n                 (parent.getType() == Token.EXPR_RESULT && \n                  parent.getParent() != null &&\n                  parent.getParent().getType() == Token.EVENT_HANDLER))) {\n                return false;\n            }\n            return NodeUtil.isExpressionNode(maybeExpr);\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}