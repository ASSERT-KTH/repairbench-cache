{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (maybeExpr.isExprResult()) {\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n          // We only have to worry about methods with an implicit 'this'\n          // param, or this doesn't happen.\n          Node expr = maybeExpr.getFirstChild();\n          if (expr.isCall()) {\n            Node left = expr.getFirstChild();\n            // If the call is on a property, and that property is not a simple\n            // name (i.e. isn't 'foo' in 'foo.bar'), or a simple property access\n            // (i.e. isn't 'bar' in 'foo.bar') then we bail. This is simpler than\n            // trying to track all complex LHS expressions.\n            if (left.isGetProp()) {\n              Node target = left.getFirstChild();\n              if (!target.isName() && !target.isGetProp()) {\n                return false;\n              }\n            } else {\n              return false;\n            }\n          }\n        }\n\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}