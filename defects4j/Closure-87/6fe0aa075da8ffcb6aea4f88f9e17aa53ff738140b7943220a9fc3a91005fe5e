{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // Ensure the single child is an EXPR_RESULT node.\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n          Node expr = maybeExpr.getFirstChild();\n          // Check if the expression is a call to a property starting with \"on\".\n          // We specifically look for GETPROP (like obj.onfoo) as mentioned\n          // in the original comment about implicit 'this'.\n          // GETELEM (like obj['onfoo']) doesn't seem to trigger the IE bug\n          // based on test cases.\n          if (expr.getType() == Token.CALL) {\n            Node fn = expr.getFirstChild();\n            if (fn.getType() == Token.GETPROP) {\n              // Check the property name\n              String propName = fn.getLastChild().getString();\n              if (propName != null && propName.startsWith(\"on\")) {\n                // This looks like an event handler call, don't fold it.\n                return false;\n              }\n            }\n          }\n          // Otherwise, it's safe to fold.\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}