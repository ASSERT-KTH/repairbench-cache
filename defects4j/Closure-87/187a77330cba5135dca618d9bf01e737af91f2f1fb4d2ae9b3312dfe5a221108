{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n        //\n        // We only have to worry about function calls named 'onchange',\n        // 'onblur', etc. Avoid folding EXPR_RESULTs that look like\n        // f.onchange();\n\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          Node expr = maybeExpr.getFirstChild();\n          if (expr != null && expr.isCall()) {\n            Node callee = expr.getFirstChild();\n            if (callee != null && callee.isGetProp()) {\n              Node prop = callee.getLastChild();\n              if (prop != null && prop.isString()) {\n                String propName = prop.getString();\n                if (propName.startsWith(\"on\")) {\n                  return false;\n                }\n              }\n            }\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}