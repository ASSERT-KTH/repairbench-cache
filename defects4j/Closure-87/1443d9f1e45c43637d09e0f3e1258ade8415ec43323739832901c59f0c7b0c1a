{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n  // Must be a BLOCK with exactly one child.\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node child = n.getFirstChild();\n    // Only an expression statement (EXPR_RESULT) is eligible.\n    if (child.getType() != Token.EXPR_RESULT) {\n      return false;\n    }\n    // When an IF\u2010statement\u2019s then\u2013block is being replaced with an expression,\n    // IE can behave differently if the expression\u2019s return value is used.\n    // In particular, if the expression is a call on a property (an implicit \u201cthis\u201d call)\n    // and that property is \"onchange\", then we do not want to \u201cfold\u201d the block\n    // into a larger expression (for example, as the right\u2010hand side of \u201c&&\u201d).\n    //\n    // However, if the IF\u2019s condition is a literal true, then the transformation\n    // does not end up \u201cusing\u201d the call\u2019s return value, so it is safe.\n    Node parent = n.getParent();\n    if (parent != null && parent.getType() == Token.IF) {\n      Node condition = parent.getFirstChild();\n      if (!NodeUtil.isBooleanTrue(condition)) {\n        Node expr = child.getFirstChild();\n        if (expr != null && expr.getType() == Token.CALL) {\n          Node callee = expr.getFirstChild();\n          // Only allow a simple method call via dot access.\n          if (callee == null || callee.getType() != Token.GETPROP || callee.isComputed()) {\n            return false;\n          }\n          String propName = callee.getLastChild().getString();\n          if (\"onchange\".equals(propName)) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}