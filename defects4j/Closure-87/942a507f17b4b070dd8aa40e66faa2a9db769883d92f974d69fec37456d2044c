{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression, and not an event handler method call.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n        if (n.hasOneChild()) {\n            Node maybeExpr = n.getFirstChild();\n            if (NodeUtil.isExpressionNode(maybeExpr)) {\n                // Check if the expression is an event handler method call\n                if (maybeExpr.getType() == Token.CALL &&\n                    maybeExpr.getFirstChild().getType() == Token.GETPROP &&\n                    isEventHandlerMethod(maybeExpr.getFirstChild().getString())) {\n                    return false;\n                }\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate boolean isEventHandlerMethod(String methodName) {\n    // List of common event handler methods\n    String[] eventHandlerMethods = {\n        \"onchange\", \"onclick\", \"onkeydown\", \"onkeyup\", \"onkeypress\",\n        \"onload\", \"onmousedown\", \"onmousemove\", \"onmouseout\", \"onmouseover\",\n        \"onmouseup\", \"onreset\", \"onselect\", \"onsubmit\", \"onunload\"\n    };\n    for (String method : eventHandlerMethods) {\n        if (method.equals(methodName)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}