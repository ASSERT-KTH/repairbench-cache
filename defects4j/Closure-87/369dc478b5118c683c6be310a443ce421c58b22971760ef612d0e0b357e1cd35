{
    "generation": "private boolean isFoldableExpressBlock(Node n) {\n  // Only blocks with exactly one child are of interest.\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node stmt = n.getFirstChild();\n    // We expect a block to contain an expression statement.\n    if (stmt.getType() == Token.EXPR_RESULT) {\n      Node expr = stmt.getFirstChild();\n      // If the single expression is a call, then we want to be extra careful.\n      if (expr != null && expr.getType() == Token.CALL) {\n        Node callee = expr.getFirstChild();\n        if (callee != null) {\n          // Only simple property (dot) calls are safe to inline.\n          if (callee.getType() != Token.GETPROP) {\n            // For example, f['x']() is not safe.\n            return false;\n          }\n          // Get the property name.\n          Node prop = callee.getLastChild();\n          if (prop != null && prop.getType() == Token.STRING) {\n            String propName = prop.getString();\n            // IE bug: methods with an implicit 'this' parameter behave differently\n            // if their return value is used. We want to avoid folding a block that\n            // consists of a call like \"f.onchange()\": unless the if\u2010condition is a literal.\n            if (propName.startsWith(\"on\")) {\n              Node parent = n.getParent();\n              if (parent != null && parent.getType() == Token.IF) {\n                Node cond = parent.getFirstChild();\n                // Only when the condition is a literal (true or false) is it safe to fold.\n                if (cond != null && (cond.isTrue() || cond.isFalse())) {\n                  return true;\n                }\n              }\n              return false;\n            }\n          }\n        }\n      }\n      // For other kinds of expression statements, we can simply ask NodeUtil.\n      return NodeUtil.isExpressionNode(stmt);\n    }\n    // If the only child isn\u2019t an EXPR_RESULT, fall back on the generic test.\n    return NodeUtil.isExpressionNode(stmt);\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}