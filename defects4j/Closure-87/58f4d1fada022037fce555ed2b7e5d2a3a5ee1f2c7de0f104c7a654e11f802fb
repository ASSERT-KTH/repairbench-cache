{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          Node parent = n.getParent();\n          if (parent != null && NodeUtil.isExpressionResultUsed(parent)) {\n            Node exprChild = maybeExpr.getFirstChild();\n            if (exprChild.getType() == Token.CALL) {\n              Node callee = exprChild.getFirstChild();\n              if (callee.getType() == Token.GETPROP) {\n                String propName = callee.getLastChild().getString();\n                if (propName.startsWith(\"on\")) {\n                  return false;\n                }\n              }\n            }\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}