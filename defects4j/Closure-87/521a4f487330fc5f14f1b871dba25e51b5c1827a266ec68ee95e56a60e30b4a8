{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n\n        // We only have to worry about methods with an implicit 'this'\n        // param, or this doesn't happen.\n\n        // Do not fold calls of the form x.onchange() or x['onchange']()\n        // See issue 291.\n        if (NodeUtil.isExprCall(maybeExpr)) {\n          Node callTarget = maybeExpr.getFirstChild();\n          if (callTarget.isGetProp()) {\n            String prop = callTarget.getLastChild().getString();\n            if (\"onchange\".equals(prop)) {\n              return false;\n            }\n          } else if (callTarget.isGetElem()) {\n            Node propNode = callTarget.getLastChild();\n            if (propNode.isString() && \"onchange\".equals(propNode.getString())) {\n              return false;\n            }\n          }\n        }\n\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}