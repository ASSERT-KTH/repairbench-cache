{
    "generation": "  /**\n   * @return Whether the node is a block with a single statement that is\n   *     an expression.\n   */\n  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // Prevent folding if the expression is a method call like f.onchange()\n        // because of IE bug. Only fold if it's not a dotted property access\n        // on 'onchange', 'oninput', etc., which are sensitive.\n        // See: http://code.google.com/p/closure-compiler/issues/detail?id=291\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          if (maybeExpr.getType() == Token.EXPR_RESULT) {\n            Node expr = maybeExpr.getFirstChild();\n            if (expr != null && expr.getType() == Token.CALL) {\n              Node callTarget = expr.getFirstChild();\n              if (callTarget != null && callTarget.getType() == Token.GETPROP) {\n                Node prop = callTarget.getSecondChild();\n                if (prop != null && prop.isString()) {\n                  String propName = prop.getString();\n                  // Only skip folding if property name is 'onchange' or similar sensitive props.\n                  if (\"onchange\".equals(propName) || \"oninput\".equals(propName)) {\n                    return false;\n                  }\n                }\n              }\n            }\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}