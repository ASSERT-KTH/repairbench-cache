{
    "generation": "/**\n * @return Whether the node is a block with a single statement that is\n *     an expression.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // IE has a bug where event handlers behave differently when\n      // their return value is used vs. when their return value is in\n      // an EXPR_RESULT. It's pretty freaking weird. See:\n      // http://code.google.com/p/closure-compiler/issues/detail?id=291\n      // We try to detect this case, and not fold EXPR_RESULTs\n      // into other expressions.\n\n      // We only have to worry about methods with an implicit 'this'\n      // param, or this doesn't happen.\n\n      if (NodeUtil.isExprCall(maybeExpr)) {\n        Node callTarget = maybeExpr.getFirstChild();\n        if (callTarget.isGetProp()) {\n          String propName = callTarget.getLastChild().getString();\n          if (\"onchange\".equals(propName)) {\n            return false;\n          }\n        }\n      }\n\n      return NodeUtil.isExpressionNode(maybeExpr);\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}