{
    "generation": "  /** {@inheritDoc} */\n  @Override\n  public void integrate(final ExpandableStatefulODE equations, final double t)\n      throws MathIllegalStateException, MathIllegalArgumentException {\n\n    sanityChecks(equations, t);\n    setEquations(equations);\n    final boolean forward = t > equations.getTime();\n\n    // create some internal working arrays\n    final double[] y0  = equations.getCompleteState();\n    final double[] y = y0.clone();\n    final int stages = c.length + 1;\n    final double[][] yDotK = new double[stages][y.length];\n    final double[] yTmp    = y0.clone();\n    final double[] yDotTmp = new double[y.length];\n\n    // set up an interpolator sharing the integrator arrays\n    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();\n    interpolator.reinitialize(this, yTmp, yDotK, forward,\n                              equations.getPrimaryMapper(), equations.getSecondaryMappers());\n    interpolator.storeTime(equations.getTime());\n\n    // set up integration control objects\n    stepStart         = equations.getTime();\n    double  hNew      = 0;\n    boolean firstTime = true;\n    initIntegration(equations.getTime(), y0, t);\n\n    // main integration loop\n    isLastStep = false;\n    do {\n\n      interpolator.shift();\n\n      // iterate over step size, ensuring local normalized error is smaller than 1\n      double error = 10;\n      while (error >= 1.0) {\n\n        // Determine the step size guess hNew for this trial\n        if (firstTime) {\n          // first stage\n          computeDerivatives(stepStart, y, yDotK[0]);\n\n          // compute the initial step size\n          final double[] scale = new double[mainSetDimension];\n          if (vecAbsoluteTolerance == null) {\n              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);\n              }\n          } else {\n              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);\n              }\n          }\n          hNew = initializeStep(forward, getOrder(), scale,\n                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n          firstTime = false;\n        } else if (!fsal) {\n           // first stage is needed if not first step and not FSAL\n           computeDerivatives(stepStart, y, yDotK[0]);\n        }\n        // else: first stage (yDotK[0]) is available from previous step if FSAL\n\n        // Set the tentative step size for this trial\n        stepSize = hNew;\n\n        // Adjust step size if it would go beyond the final time t\n        final double stepEnd = stepStart + stepSize;\n        if (forward) {\n            if (stepEnd >= t) { // Use >= for robustness against floating point issues\n                stepSize = t - stepStart;\n            }\n        } else { // backward\n            if (stepEnd <= t) { // Use <= for robustness against floating point issues\n                stepSize = t - stepStart;\n            }\n        }\n        \n        // Check for step size issues, e.g. zero step size\n        // This can happen if t is very close to stepStart, especially after adjustment.\n        // Zero step size might lead to NaN errors in error estimation if not handled properly.\n        if ((forward && stepSize <= 0.0) || (!forward && stepSize >= 0.0)) {\n            // This likely means we are at or very close to the end time 't'.\n            // Force the loop to exit and accept this step (effectively a zero-step).\n            error = 0.0; // Ensure loop termination\n            stepSize = t - stepStart; // Ensure step ends exactly at t\n        }\n\n        // next stages (skip if error is already forced to 0)\n        if (error >= 1.0) { // Only compute stages if step is potentially valid\n            for (int k = 1; k < stages; ++k) {\n\n                for (int j = 0; j < y0.length; ++j) {\n                    double sum = a[k-1][0] * yDotK[0][j];\n                    for (int l = 1; l < k; ++l) {\n                        sum += a[k-1][l] * yDotK[l][j];\n                    }\n                    yTmp[j] = y[j] + stepSize * sum;\n                }\n\n                // Compute derivatives at intermediate time. This time should now be safe\n                // due to the stepSize adjustment above.\n                computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n            }\n\n            // estimate the state at the end of the step\n            for (int j = 0; j < y0.length; ++j) {\n                double sum    = b[0] * yDotK[0][j];\n                for (int l = 1; l < stages; ++l) {\n                    sum    += b[l] * yDotK[l][j];\n                }\n                yTmp[j] = y[j] + stepSize * sum;\n            }\n\n            // estimate the error at the end of the step\n            error = estimateError(yDotK, y, yTmp, stepSize);\n            if (Double.isNaN(error)) {\n                // Prevent infinite loops if stepSize is zero and estimateError returns NaN\n                // A zero step should have zero error.\n                error = 0.0;\n            }\n        } // End of stage computation block\n\n        if (error >= 1.0) {\n          // reject the step and attempt to reduce error by stepsize control\n          final double factor =\n              FastMath.min(maxGrowth,\n                           FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n          // Calculate the next step size guess (hNew) based on the rejected stepSize\n          hNew = filterStep(stepSize * factor, forward, false);\n        }\n\n      } // End of inner step control loop (while error >= 1.0)\n\n      // local error is small enough (or forced): accept the step, trigger events and step handlers\n      interpolator.storeTime(stepStart + stepSize); // Time at end of accepted step\n      System.arraycopy(yTmp, 0, y, 0, y0.length);   // Update main state array y\n      System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length); // Store final derivative\n      stepStart = acceptStep(interpolator, y, yDotTmp, t); // Update stepStart, handle events, check if last step\n      System.arraycopy(y, 0, yTmp, 0, y.length); // Sync yTmp with accepted y for next step/interpolation\n\n      if (!isLastStep) {\n\n          // prepare next step\n          interpolator.storeTime(stepStart); // Store the new step start time\n\n          if (fsal) {\n              // save the last evaluation for the next step\n              System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);\n          }\n\n          // stepsize control for next step\n          final double factor; // Compute factor based on the error of the accepted step\n          if (error == 0.0) {\n              // Avoid issues with error=0 if step was forced; use max growth.\n              factor = maxGrowth;\n          } else {\n              factor = FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n          }\n          final double scaledH = stepSize * factor; // Propose size based on accepted stepSize\n          final double nextT = stepStart + scaledH; // Potential end time of the next step\n          final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t); // Check if next step might be the last\n\n          // Filter the proposed step size (min/max constraints)\n          hNew = filterStep(scaledH, forward, nextIsLast);\n\n          // Adjust the proposed step size if it overshoots t\n          final double filteredNextT = stepStart + hNew;\n          final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);\n          if (filteredNextIsLast) {\n              hNew = t - stepStart; // Ensure the next step hits t exactly if needed\n          }\n          // hNew is now ready for the next iteration's stepSize = hNew;\n      }\n\n    } while (!isLastStep);\n\n    // dispatch results\n    equations.setTime(stepStart);\n    equations.setCompleteState(y);\n\n    resetInternalState();\n\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}