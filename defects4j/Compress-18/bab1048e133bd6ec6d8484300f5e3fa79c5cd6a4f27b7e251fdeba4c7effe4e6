{
    "generation": "    /**\n     * Writes a PAX extended header with the given map as contents.\n     * @since 1.4\n     */\n    void writePaxHeaders(String entryName,\n                         Map<String, String> headers) throws IOException {\n        String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n            // TarEntry's constructor would think this is a directory\n            // and not allow any data to be written\n        if (name.length() >= TarConstants.NAMELEN) {\n            name = name.substring(0, TarConstants.NAMELEN - 1);\n        }\n        TarArchiveEntry pex = new TarArchiveEntry(name,\n                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n        StringWriter w = new StringWriter();\n        for (Map.Entry<String, String> h : headers.entrySet()) {\n            String key = h.getKey();\n            String value = h.getValue();\n            // line length according to PAX specification is \"length content\\n\"\n            // where length is the number of bytes in UTF-8 of \"content\\n\".\n            // The value for \"length\" also has to be included in the total length.\n            // Estimate a value for 'len' that includes the length prefix itself.\n            // The +2 is a guess for the length of \"len\" if it's 1-digit or 2-digits.\n            int len = key.length() + value.length()\n                + 3 /* blank, equals and newline */\n                + 2 /* guess 9 < actual length < 100 */;\n            String line = len + \" \" + key + \"=\" + value + \"\\n\";\n            int actualLength = line.getBytes(CharsetNames.UTF_8).length;\n            while (len != actualLength) {\n                // Adjust for cases where length < 10 or > 100\n                // or where UTF-8 encoding isn't a single octet\n                // per character.\n                // Must be in loop as size may go from 99 to 100 in\n                // first pass so we'd need a second.\n                len = actualLength;\n                line = len + \" \" + key + \"=\" + value + \"\\n\";\n                actualLength = line.getBytes(CharsetNames.UTF_8).length;\n            }\n            w.write(line);\n        }\n        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n        pex.setSize(data.length);\n\n        // Instead of using putArchiveEntry() and closeArchiveEntry(), which can interfere\n        // with the main entry's state in TarArchiveOutputStream (currentArchiveEntry),\n        // manually write the PAX header entry as raw blocks to the underlying stream.\n        // This ensures the PAX entry is correctly written without affecting the outer archive context.\n\n        // Write the header block for the PAX entry (always 512 bytes)\n        byte[] header = pex.getHeader(); // pex.getHeader() computes the 512-byte header with correct size\n        System.arraycopy(header, 0, buffer, recordOffset, recordSize); // Assumes 'buffer', 'recordOffset', 'recordSize' are accessible\n        recordOffset += recordSize;\n        writeRecord(); // Flushes the current buffer as a record\n\n        // Write the data blocks for the PAX entry\n        int dataLen = data.length;\n        int off = 0;\n        while (dataLen > 0) {\n            int num = Math.min(dataLen, recordSize);\n            System.arraycopy(data, off, buffer, recordOffset, num);\n            recordOffset += num;\n            if (recordOffset == recordSize) {\n                writeRecord();\n                recordOffset = 0;\n            }\n            off += num;\n            dataLen -= num;\n        }\n\n        // Pad the last block if it's not full\n        if (recordOffset != 0) {\n            Arrays.fill(buffer, recordOffset, recordSize, (byte) 0);\n            writeRecord();\n            recordOffset = 0;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}