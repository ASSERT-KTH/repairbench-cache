{
    "generation": "    /**\n     * Writes a PAX extended header with the given map as contents.\n     * @since 1.4\n     */\n    void writePaxHeaders(String entryName,\n                         Map<String, String> headers) throws IOException {\n        // POSIX reserves paths that start with ././ for implementation variants\n        // and we use PaxHeaders.X for PAX headers.\n        String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n        // TarArchiveEntry constructor treats names ending with \"/\" as directories\n        // and ignores the typeflag given in the constructor.\n        // Just removing the trailing slash may not be enough, see\n        // https://issues.apache.org/jira/browse/COMPRESS-191\n        //\n        // Clearing the size is not enough, the constructor explicitely\n        // sets it to 0 for directories and archives created by\n        // GNU TAR prior to version 1.26 have problems reading\n        // archives containing PAX headers for directories that have\n        // the size field set.\n\n        // If the original entry name was a directory, we must strip the trailing slash\n        // for the PAX header name. PAX headers are files, not directories.\n        if (entryName.endsWith(\"/\")) {\n            name = name.substring(0, name.length() - 1);\n        }\n\n        // Truncate the name if it's too long.\n        if (name.length() >= TarConstants.NAMELEN) {\n            name = name.substring(0, TarConstants.NAMELEN - 1);\n        }\n        // Rationale for the type flag is unclear. This is what GNU tar uses.\n        // May be potentially-buggy implementations that expect pax headers to be\n        // of type 'x' rather than 'g'. Compromise on 'X'.\n        TarArchiveEntry pex = new TarArchiveEntry(name,\n                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n        StringWriter w = new StringWriter();\n        for (Map.Entry<String, String> h : headers.entrySet()) {\n            String key = h.getKey();\n            String value = h.getValue();\n            int len = key.length() + value.length()\n                + 3 /* blank, equals and newline */\n                + 2 /* guess 9 < actual length < 100 */;\n            String line = len + \" \" + key + \"=\" + value + \"\\n\";\n            int actualLength = line.getBytes(CharsetNames.UTF_8).length;\n            while (len != actualLength) {\n                // Adjust for cases where length < 10 or > 100\n                // or where UTF-8 encoding isn't a single octet\n                // per character.\n                // Must be in loop as size may go from 99 to 100 in\n                // first pass so we'd need a second.\n                len = actualLength;\n                line = len + \" \" + key + \"=\" + value + \"\\n\";\n                actualLength = line.getBytes(CharsetNames.UTF_8).length;\n            }\n            w.write(line);\n        }\n        // Must be constructed using the UTF-8 Charset. PAX headers are UTF-8.\n        // Reference: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_03\n        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n        pex.setSize(data.length); // Correct size must be set BEFORE putArchiveEntry\n        putArchiveEntry(pex);\n        write(data);\n        closeArchiveEntry();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}