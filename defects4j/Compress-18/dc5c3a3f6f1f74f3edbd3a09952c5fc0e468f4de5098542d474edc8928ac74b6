{
    "generation": "/**\n * Writes a PAX extended header with the given map as contents.\n * @since 1.4\n */\nvoid writePaxHeaders(String entryName,\n                     Map<String, String> headers) throws IOException {\n    // Remove any trailing slash from the entry name so that the PAX header\n    // is not mistakenly interpreted as a directory.\n    String baseName = stripTo7Bits(entryName);\n    if (baseName.endsWith(\"/\")) {\n        baseName = baseName.substring(0, baseName.length() - 1);\n    }\n    String name = \"./PaxHeaders.X/\" + baseName;\n    if (name.length() >= TarConstants.NAMELEN) {\n        name = name.substring(0, TarConstants.NAMELEN - 1);\n    }\n    TarArchiveEntry pex = new TarArchiveEntry(name,\n                                              TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n    StringWriter w = new StringWriter();\n    for (Map.Entry<String, String> h : headers.entrySet()) {\n        String key = h.getKey();\n        String value = h.getValue();\n        int len = key.length() + value.length() +\n                  3 /* blank, equals and newline */ +\n                  2 /* guess: the length field is between 9 and 99 */;\n        String line = len + \" \" + key + \"=\" + value + \"\\n\";\n        int actualLength = line.getBytes(CharsetNames.UTF_8).length;\n        while (len != actualLength) {\n            // Adjust for cases where number of digits in len changes or\n            // where UTF-8 encodings aren\u2019t exactly one byte per char.\n            len = actualLength;\n            line = len + \" \" + key + \"=\" + value + \"\\n\";\n            actualLength = line.getBytes(CharsetNames.UTF_8).length;\n        }\n        w.write(line);\n    }\n    byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n    pex.setSize(data.length);\n    putArchiveEntry(pex);\n    write(data);\n    closeArchiveEntry();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}