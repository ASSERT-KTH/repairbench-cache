{
    "generation": "import java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.apache.commons.compress.archivers.ArchiveEntry;\nimport org.apache.commons.compress.archivers.tar.TarArchiveEntry;\nimport org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\nimport org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\nimport org.apache.commons.compress.archivers.tar.TarConstants;\nimport org.apache.commons.compress.utils.CharsetNames;\n\n// Dummy classes and variables needed to make the function compilable standalone\nclass DummyTarArchiveOutputStream extends TarArchiveOutputStream {\n    public DummyTarArchiveOutputStream() { super(new ByteArrayOutputStream()); }\n    @Override\n    public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {}\n    @Override\n    public void closeArchiveEntry() throws IOException {}\n    @Override\n    public void write(byte[] b) throws IOException {}\n}\n\nclass DummyHost {\n    TarArchiveOutputStream stream = new DummyTarArchiveOutputStream();\n\n    // Dummy implementation matching the original class's method signature\n    void putArchiveEntry(ArchiveEntry pex) throws IOException {\n        stream.putArchiveEntry(pex);\n    }\n\n    // Dummy implementation matching the original class's method signature\n    void write(byte[] data) throws IOException {\n        stream.write(data);\n    }\n\n     // Dummy implementation matching the original class's method signature\n    void closeArchiveEntry() throws IOException {\n         stream.closeArchiveEntry();\n    }\n\n    // Dummy implementation for stripTo7Bits for testing\n    private String stripTo7Bits(String name) {\n        final int length = name.length();\n        StringBuilder result = new StringBuilder(length);\n        for (int i = 0; i < length; ++i) {\n            char c = name.charAt(i);\n            if (c <= 127) { // Check if ASCII\n                result.append(c);\n            }\n            // If not ASCII, it's simply omitted.\n        }\n        return result.toString();\n    }\n\n\n    /**\n     * Writes a PAX extended header with the given map as contents.\n     * @since 1.4\n     */\n    void writePaxHeaders(String entryName,\n                         Map<String, String> headers) throws IOException {\n        String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n        // If the original entry was a directory, stripTo7Bits may keep the trailing '/'\n        // This confuses TarArchiveEntry into thinking the PAX header is a directory,\n        // causing problems in putArchiveEntry/write where it expects zero size.\n        // Tar headers are always type 'x' (or 'g') and are regular files, so the\n        // name ending '/' is incorrect for them.\n        if (name.endsWith(\"/\")) {\n            name = name.substring(0, name.length() - 1);\n        }\n            // TarEntry's constructor would think this is a directory\n            // and not allow any data to be written <-- This comment is slightly inaccurate;\n            // the issue arises later when setting expected size based on isDirectory().\n        if (name.length() >= TarConstants.NAMELEN) {\n            name = name.substring(0, TarConstants.NAMELEN - 1);\n        }\n        TarArchiveEntry pex = new TarArchiveEntry(name,\n                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n        StringWriter w = new StringWriter();\n        for (Map.Entry<String, String> h : headers.entrySet()) {\n            String key = h.getKey();\n            String value = h.getValue();\n            int len = key.length() + value.length()\n                + 3 /* blank, equals and newline */\n                + 2 /* guess 9 < actual length < 100 */;\n            // Ensure length refers to the UTF-8 byte count of the record string\n            String record = len + \" \" + key + \"=\" + value + \"\\n\";\n            int actualLength = record.getBytes(CharsetNames.UTF_8).length;\n            // If the byte length differs from the calculated length, recalculate\n            while (len != actualLength) {\n                len = actualLength;\n                record = len + \" \" + key + \"=\" + value + \"\\n\";\n                actualLength = record.getBytes(CharsetNames.UTF_8).length;\n            }\n            w.write(record);\n        }\n        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n        pex.setSize(data.length);\n        putArchiveEntry(pex);\n        write(data);\n        closeArchiveEntry();\n    }\n} // End of DummyHost",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}