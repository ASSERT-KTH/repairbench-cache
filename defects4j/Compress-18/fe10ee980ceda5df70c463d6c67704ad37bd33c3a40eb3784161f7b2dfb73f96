{
    "generation": "/**\n * Writes a PAX extended header with the given map as contents.\n * @since 1.4\n */\nvoid writePaxHeaders(String entryName,\n                     Map<String, String> headers) throws IOException {\n    // Build the PAX header filename.  We strip to 7-bit so it's valid ASCII,\n    // but if it still ends with a slash TarArchiveEntry will treat it as a directory\n    // and refuse any data, so we rtrim any trailing slash.\n    String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n    if (name.endsWith(\"/\")) {\n        name = name.substring(0, name.length() - 1);\n    }\n    // Ensure we don't exceed the POSIX name field\n    if (name.length() >= TarConstants.NAMELEN) {\n        name = name.substring(0, TarConstants.NAMELEN - 1);\n        // after truncation it might again end with '/', so trim again\n        if (name.endsWith(\"/\")) {\n            name = name.substring(0, name.length() - 1);\n        }\n    }\n    TarArchiveEntry pex = new TarArchiveEntry(name,\n                                              TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n    // Build the PAX record(s)\n    StringWriter w = new StringWriter();\n    for (Map.Entry<String, String> h : headers.entrySet()) {\n        String key = h.getKey();\n        String value = h.getValue();\n        // initial length guess: key + \"=\" + value + \"\\n\" + leading length and space\n        int len = key.length() + value.length() + 3 /* space, '=', '\\n' */\n                  + 2 /* rough guess for the digit count */;\n        String line = len + \" \" + key + \"=\" + value + \"\\n\";\n        int actualLength = line.getBytes(CharsetNames.UTF_8).length;\n        // adjust until the byte\u2010length of the line matches the declared length\n        while (len != actualLength) {\n            len = actualLength;\n            line = len + \" \" + key + \"=\" + value + \"\\n\";\n            actualLength = line.getBytes(CharsetNames.UTF_8).length;\n        }\n        w.write(line);\n    }\n\n    // Write out the header entry and its data\n    byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n    pex.setSize(data.length);\n    putArchiveEntry(pex);\n    write(data);\n    closeArchiveEntry();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}