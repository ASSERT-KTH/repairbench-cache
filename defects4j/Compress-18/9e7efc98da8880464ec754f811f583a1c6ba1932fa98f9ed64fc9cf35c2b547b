{
    "generation": "/**\n * Writes a PAX extended header with the given map as contents.\n * @since 1.4\n */\nvoid writePaxHeaders(String entryName,\n                     Map<String, String> headers) throws IOException {\n    String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n        // TarEntry's constructor would think this is a directory\n        // and not allow any data to be written\n    if (name.length() >= TarConstants.NAMELEN) {\n        name = name.substring(0, TarConstants.NAMELEN - 1);\n    }\n    TarArchiveEntry pex = new TarArchiveEntry(name,\n                                              TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n    // Ensure the pax header entry is NOT treated as a directory\n    pex.setMode(pex.getMode() | 0100); // owner execute bit, to avoid mode=0 issues\n    pex.setName(name);\n    pex.setLinkName(\"\");\n    pex.setUserId(0);\n    pex.setGroupId(0);\n    pex.setUserName(\"\");\n    pex.setGroupName(\"\");\n    pex.setModTime(System.currentTimeMillis() / 1000);\n\n    StringWriter w = new StringWriter();\n    for (Map.Entry<String, String> h : headers.entrySet()) {\n        String key = h.getKey();\n        String value = h.getValue();\n        int len = key.length() + value.length()\n            + 3 /* blank, equals and newline */\n            + 2 /* guess 9 < actual length < 100 */;\n        String line = len + \" \" + key + \"=\" + value + \"\\n\";\n        int actualLength = line.getBytes(CharsetNames.UTF_8).length;\n        while (len != actualLength) {\n            // Adjust for cases where length < 10 or > 100\n            // or where UTF-8 encoding isn't a single octet\n            // per character.\n            // Must be in loop as size may go from 99 to 100 in\n            // first pass so we'd need a second.\n            len = actualLength;\n            line = len + \" \" + key + \"=\" + value + \"\\n\";\n            actualLength = line.getBytes(CharsetNames.UTF_8).length;\n        }\n        w.write(line);\n    }\n    byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n    pex.setSize(data.length);\n    // avoid the PAX header to be interpreted as a directory even when the name ends with /\n    pex.setName(pex.getName().replaceAll(\"/+$\", \"\"));\n    putArchiveEntry(pex);\n    write(data);\n    closeArchiveEntry();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}