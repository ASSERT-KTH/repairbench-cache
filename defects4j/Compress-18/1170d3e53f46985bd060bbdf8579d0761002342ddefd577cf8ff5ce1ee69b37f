{
    "generation": "void writePaxHeaders(String entryName,\n                     Map<String, String> headers) throws IOException {\n    // Build an ASCII\u2010only name for the PAX header file,\n    // and strip any trailing slash so it's treated as a file.\n    String asciiName = stripTo7Bits(entryName);\n    if (asciiName.endsWith(\"/\")) {\n        asciiName = asciiName.substring(0, asciiName.length() - 1);\n    }\n    String name = \"./PaxHeaders.X/\" + asciiName;\n    if (name.length() >= TarConstants.NAMELEN) {\n        name = name.substring(0, TarConstants.NAMELEN - 1);\n    }\n\n    TarArchiveEntry pex = new TarArchiveEntry(name,\n                                              TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n    // Create the PAX record(s)\n    StringWriter w = new StringWriter();\n    for (Map.Entry<String, String> h : headers.entrySet()) {\n        String key = h.getKey();\n        String value = h.getValue();\n        // initial length estimate: digits + space + key + '=' + value + '\\n'\n        int len = key.length() + value.length() + 3 /* space, '=', '\\n' */\n                + 2 /* rough digit\u2010count guess */;\n        String line = len + \" \" + key + \"=\" + value + \"\\n\";\n        int actualLength = line.getBytes(CharsetNames.UTF_8).length;\n        while (len != actualLength) {\n            len = actualLength;\n            line = len + \" \" + key + \"=\" + value + \"\\n\";\n            actualLength = line.getBytes(CharsetNames.UTF_8).length;\n        }\n        w.write(line);\n    }\n\n    byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n    pex.setSize(data.length);\n\n    putArchiveEntry(pex);\n    write(data);\n    closeArchiveEntry();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}