{
    "generation": "    /**\n     * Writes a PAX extended header with the given map as contents.\n     * @since 1.4\n     */\n    void writePaxHeaders(String entryName,\n                         Map<String, String> headers) throws IOException {\n        /*\n         * Build the PAX-header entry name under \"./PaxHeaders.X/\".\n         * We must strip non-ASCII and also remove any trailing slash\n         * so that this pseudo\u2010file is not treated as a directory\n         * (directories are forced to size=0 and cannot hold data).\n         */\n        String stripped = stripTo7Bits(entryName);\n        if (stripped.endsWith(\"/\")) {\n            stripped = stripped.substring(0, stripped.length() - 1);\n        }\n        String name = \"./PaxHeaders.X/\" + stripped;\n        if (name.length() >= TarConstants.NAMELEN) {\n            name = name.substring(0, TarConstants.NAMELEN - 1);\n        }\n        TarArchiveEntry pex =\n            new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n        /*\n         * Build the PAX data (key=value records with length prefixes).\n         */\n        StringWriter w = new StringWriter();\n        for (Map.Entry<String, String> h : headers.entrySet()) {\n            String key = h.getKey();\n            String value = h.getValue();\n            // initial guess for the record length\n            int len = key.length() + value.length()\n                + 3 /* space, '=', '\\n' */\n                + 2 /* a small over\u2010estimate for the digit count */;\n            String line = len + \" \" + key + \"=\" + value + \"\\n\";\n            int actualLen = line.getBytes(CharsetNames.UTF_8).length;\n            // adjust until the length prefix is accurate\n            while (len != actualLen) {\n                len = actualLen;\n                line = len + \" \" + key + \"=\" + value + \"\\n\";\n                actualLen = line.getBytes(CharsetNames.UTF_8).length;\n            }\n            w.write(line);\n        }\n\n        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n        pex.setSize(data.length);\n        putArchiveEntry(pex);\n        write(data);\n        closeArchiveEntry();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}