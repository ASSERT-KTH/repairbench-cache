{
    "generation": "void writePaxHeaders(String entryName, Map<String, String> headers) throws IOException {\n    // Remove trailing slash from the entry name so that the Pax extended header entry\n    // isn\u2019t mistaken for a directory.\n    String base = entryName;\n    if (base.endsWith(\"/\")) {\n        base = base.substring(0, base.length() - 1);\n    }\n    String name = \"./PaxHeaders.X/\" + stripTo7Bits(base);\n    if (name.length() >= TarConstants.NAMELEN) {\n        name = name.substring(0, TarConstants.NAMELEN - 1);\n    }\n    TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n    StringWriter w = new StringWriter();\n    for (Map.Entry<String, String> h : headers.entrySet()) {\n        String key = h.getKey();\n        String value = h.getValue();\n        int len = key.length() + value.length() + 3 /* blank, equals and newline */\n            + 2 /* guess 9 < actual length < 100 */;\n        String line = len + \" \" + key + \"=\" + value + \"\\n\";\n        int actualLength = line.getBytes(CharsetNames.UTF_8).length;\n        while (len != actualLength) {\n            // Adjust for cases where length < 10 or > 100\n            // or where UTF-8 encoding isn\u2019t a single octet per character.\n            len = actualLength;\n            line = len + \" \" + key + \"=\" + value + \"\\n\";\n            actualLength = line.getBytes(CharsetNames.UTF_8).length;\n        }\n        w.write(line);\n    }\n    byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n    pex.setSize(data.length);\n    putArchiveEntry(pex);\n    write(data);\n    closeArchiveEntry();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}