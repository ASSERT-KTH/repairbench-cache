{
    "generation": "/**\n * Writes a PAX extended header with the given map as contents.\n * @since 1.4\n */\nvoid writePaxHeaders(String entryName,\n                     Map<String, String> headers) throws IOException {\n    // Convert the entry name to 7\u2010bit ASCII\n    String paxName = stripTo7Bits(entryName);\n    // If the original entry was a directory (ends with '/'), drop the '/'\n    // from the PAX header entry name so it isn't treated as a directory.\n    if (entryName.endsWith(\"/\") && paxName.endsWith(\"/\")) {\n        paxName = paxName.substring(0, paxName.length() - 1);\n    }\n    // Build the PAX header entry name\n    String name = \"./PaxHeaders.X/\" + paxName;\n    // Truncate if it exceeds the TAR name field\n    if (name.length() >= TarConstants.NAMELEN) {\n        name = name.substring(0, TarConstants.NAMELEN - 1);\n    }\n\n    // Create the special PAX header entry (type 'x')\n    TarArchiveEntry pex =\n        new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n    // Build the PAX header body\n    StringWriter w = new StringWriter();\n    for (Map.Entry<String, String> hdr : headers.entrySet()) {\n        String key = hdr.getKey();\n        String value = hdr.getValue();\n        // initial guess: key + \"=\" + value + space + newline + overhead\n        int len = key.length() + value.length() + 3 /* space, '=' and '\\n' */\n                + 2 /* approximate digits */;\n        String line = len + \" \" + key + \"=\" + value + \"\\n\";\n        int actual = line.getBytes(CharsetNames.UTF_8).length;\n        // adjust length until it matches the byte count\n        while (actual != len) {\n            len = actual;\n            line = len + \" \" + key + \"=\" + value + \"\\n\";\n            actual = line.getBytes(CharsetNames.UTF_8).length;\n        }\n        w.write(line);\n    }\n\n    byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n    // Set the correct size so TarArchiveOutputStream will allow writing\n    pex.setSize(data.length);\n\n    putArchiveEntry(pex);\n    write(data);\n    closeArchiveEntry();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}