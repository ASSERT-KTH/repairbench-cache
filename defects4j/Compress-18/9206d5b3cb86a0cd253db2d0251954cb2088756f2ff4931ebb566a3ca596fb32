{
    "generation": "/**\n * Writes a PAX extended header with the given map as contents.\n * @since 1.4\n */\nvoid writePaxHeaders(String entryName,\n                     Map<String, String> headers) throws IOException {\n    // Build a safe, ASCII\u2010only name for the PAX header itself.\n    String safe = stripTo7Bits(entryName);\n    // If the original entry was a directory (ends with '/'),\n    // strip that trailing slash so we don't look like a directory here.\n    if (safe.endsWith(\"/\")) {\n        safe = safe.substring(0, safe.length() - 1);\n    }\n    String name = \"./PaxHeaders.X/\" + safe;\n    // Trim if it would overflow the 100\u2010byte name field.\n    if (name.length() >= TarConstants.NAMELEN) {\n        name = name.substring(0, TarConstants.NAMELEN - 1);\n    }\n    // Create a \u201clocal\u201d PAX header entry (type 'x').\n    TarArchiveEntry pex = new TarArchiveEntry(name,\n                                              TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n    // Build the in\u2010memory PAX payload.\n    StringWriter w = new StringWriter();\n    for (Map.Entry<String, String> h : headers.entrySet()) {\n        String key = h.getKey();\n        String value = h.getValue();\n        // initial guess: key+value+space+equals+newline + a margin for the length digits\n        int len = key.length() + value.length() + 3 /* space, '=', '\\n' */\n                + 2 /* assume two\u2010digit length */;\n        String line = len + \" \" + key + \"=\" + value + \"\\n\";\n        int actual = line.getBytes(CharsetNames.UTF_8).length;\n        // adjust until the leading length field is correct\n        while (actual != len) {\n            len = actual;\n            line = len + \" \" + key + \"=\" + value + \"\\n\";\n            actual = line.getBytes(CharsetNames.UTF_8).length;\n        }\n        w.write(line);\n    }\n    byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n\n    // Now set the size of the PAX entry and write it out.\n    pex.setSize(data.length);\n    putArchiveEntry(pex);\n    write(data);\n    closeArchiveEntry();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}