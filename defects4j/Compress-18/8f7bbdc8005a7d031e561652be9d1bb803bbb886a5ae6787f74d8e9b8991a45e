{
    "generation": "/**\n * Writes a PAX extended header with the given map as contents.\n * @since 1.4\n */\nvoid writePaxHeaders(String entryName,\n                     Map<String, String> headers) throws IOException {\n    // Build a safe 7-bit version of the entry name for the PaxHeaders entry\n    String headerName = stripTo7Bits(entryName);\n    // If the original entry was a directory, strip the trailing slash\n    // so the PAX header entry itself is not mistaken for a directory.\n    if (headerName.endsWith(\"/\")) {\n        headerName = headerName.substring(0, headerName.length() - 1);\n    }\n    // Prepend the PaxHeaders directory\n    String name = \"./PaxHeaders.X/\" + headerName;\n    // Enforce the classic Tar name length limit\n    if (name.length() >= TarConstants.NAMELEN) {\n        name = name.substring(0, TarConstants.NAMELEN - 1);\n        // After truncation we might end up with a trailing slash again\n        if (name.endsWith(\"/\")) {\n            name = name.substring(0, name.length() - 1);\n        }\n    }\n\n    // Create the PAX header entry of type 'x'\n    TarArchiveEntry pex = new TarArchiveEntry(name,\n                                              TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n    // Build the body of the PAX header\n    StringWriter w = new StringWriter();\n    for (Map.Entry<String, String> h : headers.entrySet()) {\n        String key = h.getKey();\n        String value = h.getValue();\n        // initial length guess: key + \"=\" + value + \"\\n\" plus a space and\n        // a couple of extra digits for the length itself\n        int len = key.length() + value.length()\n                + 3  /* space, equals, newline */\n                + 2  /* initial guess for number of digits in len */;\n        String line = len + \" \" + key + \"=\" + value + \"\\n\";\n        int actualLength = line.getBytes(CharsetNames.UTF_8).length;\n        // adjust until the byte-length of the line matches the length prefix\n        while (actualLength != len) {\n            len = actualLength;\n            line = len + \" \" + key + \"=\" + value + \"\\n\";\n            actualLength = line.getBytes(CharsetNames.UTF_8).length;\n        }\n        w.write(line);\n    }\n\n    // Convert to bytes, set the entry size, and write it out\n    byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n    pex.setSize(data.length);\n    putArchiveEntry(pex);\n    write(data);\n    closeArchiveEntry();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}