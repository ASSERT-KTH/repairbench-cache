{
    "generation": "    /**\n     * Writes a PAX extended header with the given map as contents.\n     * @since 1.4\n     */\n    void writePaxHeaders(String entryName,\n                         Map<String, String> headers) throws IOException {\n        String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n        // PAX headers should not contain directory names, and directories\n        // must not contain data.\n        // If the original entry was a directory, the PAX header name derived\n        // from it might also end in \"/\". TarArchiveEntry constructor would\n        // treat this as a directory and force the size to 0, causing issues\n        // when we try to write the actual PAX header data.\n        // So, explicitly remove any trailing slash from the PAX header name.\n        if (name.endsWith(\"/\")) {\n            name = name.substring(0, name.length() - 1);\n        }\n        // TarEntry's constructor would think this is a directory\n        // and not allow any data to be written - This comment is slightly misleading,\n        // the constructor does allow size modification later, but writeEntryHeader\n        // might force size to 0 if isDirectory() is true based on the name/linkflag.\n        // Removing the trailing slash prevents this for PAX headers.\n        if (name.length() >= TarConstants.NAMELEN) {\n            name = name.substring(0, TarConstants.NAMELEN - 1);\n        }\n        TarArchiveEntry pex = new TarArchiveEntry(name,\n                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n\n        StringWriter w = new StringWriter();\n        for (Map.Entry<String, String> h : headers.entrySet()) {\n            String key = h.getKey();\n            String value = h.getValue();\n            int len = key.length() + value.length()\n                + 3 /* blank, equals and newline */\n                + 2 /* guess 9 < actual length < 100 */;\n            // Check for overflow, otherwise the loop might loop infinitely\n            // See https://issues.apache.org/jira/browse/COMPRESS-417\n            if (len < 0) {\n                throw new IOException(\"Paxheader length overflow\");\n            }\n            String line = len + \" \" + key + \"=\" + value + \"\\n\";\n            int actualLength = line.getBytes(CharsetNames.UTF_8).length;\n            while (len != actualLength) {\n                // Adjust for cases where length < 10 or > 100\n                // or where UTF-8 encoding isn't a single octet\n                // per character.\n                // Must be in loop as size may go from 99 to 100 in\n                // first pass so we'd need a second.\n                len = actualLength;\n                // Check for overflow, otherwise the loop might loop infinitely\n                // See https://issues.apache.org/jira/browse/COMPRESS-417\n                if (len < 0) {\n                    throw new IOException(\"Paxheader length overflow\");\n                }\n                line = len + \" \" + key + \"=\" + value + \"\\n\";\n                actualLength = line.getBytes(CharsetNames.UTF_8).length;\n            }\n            w.write(line);\n        }\n        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);\n        pex.setSize(data.length);\n        putArchiveEntry(pex);\n        write(data);\n        closeArchiveEntry();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}