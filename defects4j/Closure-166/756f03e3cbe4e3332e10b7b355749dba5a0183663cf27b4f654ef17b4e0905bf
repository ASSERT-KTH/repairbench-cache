{
    "generation": "  @Override\n  public void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type or\n    // a union type containing record types.\n    //\n    // Example 1: Direct record type\n    // param constraint {{prop: (number|undefined)}}\n    // function f(constraint) {}\n    // f({});\n    //\n    // Example 2: Union containing record types\n    // param constraint {{a: (boolean|undefined)}|{b: (string|undefined)}} x\n    // function f(x) {}\n    // var out = {};\n    // f(out);\n    //\n    // We want to modify the object literal (this) to match the constraint, by\n    // taking each property on the record type(s) and trying to match\n    // properties on this object.\n    if (constraint.isUnionType()) {\n      // If it's a union, check each alternative.\n      for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {\n        if (alternate.isRecordType()) {\n          matchRecordTypeConstraint(alternate.toObjectType());\n        }\n      }\n    } else if (constraint.isRecordType()) {\n      // If it's a direct record type.\n      matchRecordTypeConstraint(constraint.toObjectType());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}