{
    "generation": "  @Override\n  public void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type, or a union\n    // type containing record types.\n    //\n    // param constraint {{prop: (number|undefined)}}\n    // function f(constraint) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n\n    // If the constraint is a union type, iterate through its alternatives\n    // and apply record type constraints from each. This is crucial for cases\n    // like `{{a}|{b}}` where we expect both 'a' and 'b' to be inferred.\n    if (constraint.isUnionType()) {\n      for (JSType alt : constraint.toUnionType().getAlternateTypes()) {\n        if (alt.isRecordType()) {\n          // If alt is a record type, apply its properties to 'this' object.\n          matchRecordTypeConstraint(alt.toObjectType());\n        }\n      }\n    }\n\n    // If the constraint itself is a record type (not necessarily a union),\n    // apply its properties. This covers cases where the constraint is just\n    // a single record type like `{{prop: string}}`.\n    // It's important to keep this separate if-block because a JSType cannot\n    // be both a UnionType and a RecordType simultaneously.\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}