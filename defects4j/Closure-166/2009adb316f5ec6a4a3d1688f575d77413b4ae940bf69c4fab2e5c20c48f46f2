{
    "generation": "  @Override\n  public void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n      return;\n    }\n\n    // Handle the case where the constraint is a union type.\n    // We check each alternative of the union. If it's a record type,\n    // we use it for matching properties.\n    if (constraint.isUnionType()) {\n      UnionType unionType = constraint.toUnionType();\n      for (JSType alternate : unionType.getAlternates()) {\n        if (alternate.isRecordType()) {\n          matchRecordTypeConstraint(alternate.toObjectType());\n        }\n      }\n    } else if (constraint.isRecordType()) {\n      // Handle the case where the constraint object is a record type.\n      //\n      // param constraint {{prop: (number|undefined)}}\n      // function f(constraint) {}\n      // f({});\n      //\n      // We want to modify the object literal to match the constraint, by\n      // taking any each property on the record and trying to match\n      // properties on this object.\n      matchRecordTypeConstraint(constraint.toObjectType());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}