{
    "generation": "  @Override\n  public void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraint {{prop: (number|undefined)}}\n    // function f(constraint) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraint.isRecordType() || constraint.isUnionType()) {\n      ObjectType recordType = null;\n      if (constraint.isRecordType()) {\n        recordType = constraint.toObjectType();\n      } else {\n        // For union types, find the record type component if it exists\n        UnionType union = constraint.toUnionType();\n        for (JSType alternative : union.getAlternates()) {\n          if (alternative.isRecordType()) {\n            if (recordType == null) {\n              recordType = alternative.toObjectType();\n            } else {\n              // Multiple record types in union - can't handle this case\n              return;\n            }\n          }\n        }\n      }\n\n      if (recordType != null) {\n        matchRecordTypeConstraint(recordType);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}