{
    "generation": "  @Override\n  public void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type or contains record types in unions.\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toObjectType());\n    } else if (constraint.isUnionType()) {\n      // Handle union types that contain record types\n      UnionType unionConstraint = constraint.toMaybeUnionType();\n      if (unionConstraint != null) {\n        for (JSType alternative : unionConstraint.getAlternates()) {\n          if (alternative.isRecordType()) {\n            matchRecordTypeConstraint(alternative.toObjectType());\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}