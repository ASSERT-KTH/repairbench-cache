{
    "generation": "@Override\npublic void matchConstraint(JSType constraint) {\n  // We only want to match constraints on anonymous types.\n  if (hasReferenceName()) {\n    return;\n  }\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // param constraint {{prop: (number|undefined)}}\n  // function f(constraint) {}\n  // f({});\n  //\n  // We want to modify the object literal to match the constraint, by\n  // taking any each property on the record and trying to match\n  // properties on this object.\n  if (constraint.isRecordType() || constraint.isUnionType()) {\n    JSType recordType = constraint.isRecordType() ?\n        constraint.toObjectType() :\n        findRecordTypeInUnion(constraint.toMaybeUnionType());\n    if (recordType != null) {\n      matchRecordTypeConstraint(recordType.toObjectType());\n    }\n  }\n}\n\n// Helper method to find record types in union types\nprivate JSType findRecordTypeInUnion(UnionType constraint) {\n  for (JSType alternative : constraint.getAlternates()) {\n    if (alternative.isRecordType()) {\n      return alternative.toObjectType();\n    }\n  }\n  return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}