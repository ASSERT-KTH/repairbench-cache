{
    "generation": "@Override\npublic void matchConstraint(JSType constraint) {\n  // We only want to match constraints on anonymous types.\n  if (hasReferenceName()) {\n    return;\n  }\n\n  // Handle the case where the constraint object is a record type or a union containing record types.\n  // Extract all record types from the constraint and match them.\n  if (constraint.isRecordType()) {\n    matchRecordTypeConstraint(constraint.toObjectType());\n  } else if (constraint.isUnionType()) {\n    UnionType unionType = constraint.toMaybeUnionType();\n    for (JSType alternateType : unionType.getAlternates()) {\n      if (alternateType.isRecordType()) {\n        matchRecordTypeConstraint(alternateType.toObjectType());\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}