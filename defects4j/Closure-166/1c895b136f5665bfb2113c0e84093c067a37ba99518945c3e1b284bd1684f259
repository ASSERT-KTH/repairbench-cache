{
    "generation": "@Override\npublic void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type or a union of record types.\n    if (constraint.isRecordType() || (constraint.isUnionType() && constraint.toMaybeUnionType().getAlternates().stream().allMatch(JSType::isRecordType))) {\n      if (constraint.isRecordType()) {\n        matchRecordTypeConstraint(constraint.toObjectType());\n      } else {\n        constraint.toMaybeUnionType().getAlternates().forEach(alternate -> matchRecordTypeConstraint(alternate.toObjectType()));\n      }\n    } else if (constraint.isUnionType()) {\n      // If the constraint is a union type but not all alternates are record types, we need to handle each alternate separately.\n      constraint.toMaybeUnionType().getAlternates().forEach(this::matchConstraint);\n    }\n}\n\nprivate void matchRecordTypeConstraint(ObjectType constraintType) {\n    constraintType.getOwnPropertyNames().forEach(propertyName -> {\n      JSType propertyType = constraintType.getPropertyType(propertyName);\n      if (propertyType != null && !propertyType.isUnknownType()) {\n        defineInferredProperty(propertyName, propertyType, null, null);\n      }\n    });\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}