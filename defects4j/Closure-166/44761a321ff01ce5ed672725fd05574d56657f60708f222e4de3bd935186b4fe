{
    "generation": "@Override\npublic void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n        return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    if (constraint.isRecordType() || constraint.isUnionType()) {\n        if (constraint.isUnionType()) {\n            for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {\n                if (alternate.isRecordType()) {\n                    matchRecordTypeConstraint(alternate.toMaybeObjectType());\n                }\n            }\n        } else {\n            matchRecordTypeConstraint(constraint.toMaybeObjectType());\n        }\n    }\n}\n\nprivate void matchRecordTypeConstraint(ObjectType constraint) {\n    if (constraint != null) {\n        for (String prop : constraint.getOwnPropertyNames()) {\n            JSType propType = constraint.getPropertyType(prop);\n            if (propType != null) {\n                defineInferredProperty(prop, propType, null, null);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}