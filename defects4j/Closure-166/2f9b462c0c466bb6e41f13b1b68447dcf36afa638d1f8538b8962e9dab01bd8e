{
    "generation": "@Override\npublic void matchConstraint(JSType constraint) {\n  // We only want to match constraints on anonymous types.\n  if (hasReferenceName()) {\n    return;\n  }\n\n  // If the constraint is a union type, check each alternate. This is needed\n  // to handle cases like:\n  //   {a: (boolean|undefined)} | {b: (string|undefined)}\n  // or:\n  //   string | {prop: (string|undefined)}\n  if (constraint.isUnionType()) {\n    for (JSType alternative : constraint.toMaybeUnionType().getAlternates()) {\n      if (alternative.isRecordType()) {\n        matchRecordTypeConstraint(alternative.toObjectType());\n      }\n    }\n  } else if (constraint.isRecordType()) {\n    matchRecordTypeConstraint(constraint.toObjectType());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}