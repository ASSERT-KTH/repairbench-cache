{
    "generation": "@Override\npublic void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n        return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    if (constraint.isRecordType()) {\n        matchRecordTypeConstraint(constraint.toMaybeObjectType());\n        return;\n    }\n\n    // Handle the case where the constraint is a union type.\n    if (constraint.isUnionType()) {\n        for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {\n            if (alternate.isRecordType()) {\n                matchRecordTypeConstraint(alternate.toMaybeObjectType());\n            }\n        }\n        return;\n    }\n\n    // If the constraint is not a record or union type, do nothing.\n}\n\nprivate void matchRecordTypeConstraint(ObjectType constraint) {\n    if (constraint == null) {\n        return;\n    }\n\n    for (String propName : constraint.getOwnPropertyNames()) {\n        JSType propType = constraint.getPropertyType(propName);\n        if (propType != null) {\n            defineInferredProperty(propName, propType, null, null);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}