{
    "generation": "  @Override\n  public void matchConstraint(JSType constraint) {\n    // We only want to match constraints on anonymous types.\n    if (hasReferenceName()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraint {{prop: (number|undefined)}}\n    // function f(constraint) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraint.isRecordType()) {\n      matchRecordTypeConstraint(constraint.toMaybeObjectType());\n    } else if (constraint.isUnionType()) {\n      // Handle union types by trying to match each alternative\n      JSType constr = constraint.restrictByNotNullOrUndefined();\n      if (constr.isUnionType()) {\n        UnionType union = (UnionType) constr;\n        for (JSType alternative : union.getAlternates()) {\n          matchConstraint(alternate);\n        }\n      }\n    }\n  }\n\n  private void matchRecordTypeConstraint(JSType constraint) {\n    if (constraint == null || !constraint.isRecordType()) {\n      return;\n    }\n    matchRecordTypeConstraint(constraint.toObjectType());\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}