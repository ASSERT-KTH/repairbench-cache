{
    "generation": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        // Note: We don't call super.equals(o) here.\n        // Node.equals() is identity comparison by default, and even if implemented\n        // to compare parent/siblingIndex, we want structural equality independent of position.\n\n        Element element = (Element) o;\n\n        // Compare tag\n        if (!tag.equals(element.tag)) return false;\n\n        // Compare attributes\n        // Ensure attributes are initialized for comparison\n        ensureAttributes();\n        element.ensureAttributes();\n        // The attributes field is inherited from Node.\n        if (!attributes.equals(element.attributes)) return false;\n\n        // Compare children recursively\n        // childNodes() returns an unmodifiable view of the children list from Node.\n        List<org.jsoup.nodes.Node> thisChildren = childNodes();\n        List<org.jsoup.nodes.Node> otherChildren = element.childNodes();\n        if (thisChildren.size() != otherChildren.size()) return false;\n\n        for (int i = 0; i < thisChildren.size(); i++) {\n            // This relies on Node subclasses (Element, TextNode, etc.) having correct equals() implementations.\n            if (!thisChildren.get(i).equals(otherChildren.get(i))) {\n                return false;\n            }\n        }\n\n        // If tag, attributes, and children are all equal, the elements are equal.\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}