{
    "generation": "import java.util.Objects;\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        // Note: Cannot rely on super.equals(o) because Node.equals() is not implemented meaningfully (it's Object.equals).\n        // We need to compare the fields that define Element equality: tag, attributes, and children.\n\n        Element element = (Element) o;\n\n        // Compare tag (Element specific), attributes (from Node), and childNodes (from Node)\n        // Use Objects.equals for null-safety.\n        // Use public accessor methods.\n        // List.equals() compares elements recursively, relying on the equals() implementation of child nodes (Element, TextNode, etc.)\n        return Objects.equals(this.tag(), element.tag()) &&\n               Objects.equals(this.attributes(), element.attributes()) &&\n               this.childNodes().equals(element.childNodes());\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}