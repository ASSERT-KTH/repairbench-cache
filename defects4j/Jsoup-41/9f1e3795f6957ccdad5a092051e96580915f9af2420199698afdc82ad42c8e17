{
    "generation": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        // Cannot rely on super.equals() as Node.equals() is identity-based.\n        // Element equality is defined by structural equivalence: same tag, attributes, and children.\n\n        Element that = (Element) o;\n\n        // 1. Compare tag\n        if (!java.util.Objects.equals(this.tag, that.tag)) {\n            return false;\n        }\n\n        // 2. Compare attributes (inherited from Node -> BaseNode)\n        // Attributes class has a content-based equals method.\n        if (!java.util.Objects.equals(this.attributes, that.attributes)) {\n            return false;\n        }\n\n        // 3. Compare child nodes structurally (inherited from Node -> BaseNode)\n        // We must compare children using hasSameValue() as Node.equals() is identity-based,\n        // and List.equals() would use Node.equals().\n        java.util.List<org.jsoup.nodes.Node> thisChildNodes = this.childNodes; // Use field directly for efficiency if possible, or childNodes()\n        java.util.List<org.jsoup.nodes.Node> thatChildNodes = that.childNodes;\n\n        if (thisChildNodes.size() != thatChildNodes.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < thisChildNodes.size(); i++) {\n            org.jsoup.nodes.Node thisChild = thisChildNodes.get(i);\n            org.jsoup.nodes.Node thatChild = thatChildNodes.get(i);\n\n            // Use hasSameValue for structural comparison of children.\n            if (!thisChild.hasSameValue(thatChild)) {\n                 return false;\n            }\n        }\n\n        // If all checks pass, the elements are structurally equal.\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}