{
    "generation": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        // The original `if (!super.equals(o))` line was problematic because\n        // Node's default equals method is Object.equals, which only checks\n        // for reference equality. For Element, we need content-based equality.\n\n        Element other = (Element) o;\n\n        // Compare tags\n        if (!tag.equals(other.tag)) {\n            return false;\n        }\n\n        // Compare attributes\n        // The Attributes class has its own content-based equals implementation.\n        if (!attributes.equals(other.attributes)) {\n            return false;\n        }\n\n        // Compare child nodes recursively.\n        // Order of child nodes matters for Element equality.\n        // This relies on the fact that other Node types (TextNode, Comment, DataNode)\n        // also have proper content-based equals implementations.\n        List<org.jsoup.nodes.Node> thisChildren = childNodes();\n        List<org.jsoup.nodes.Node> otherChildren = other.childNodes();\n\n        if (thisChildren.size() != otherChildren.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < thisChildren.size(); i++) {\n            org.jsoup.nodes.Node thisChild = thisChildren.get(i);\n            org.jsoup.nodes.Node otherChild = otherChildren.get(i);\n            if (!thisChild.equals(otherChild)) {\n                return false;\n            }\n        }\n\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}