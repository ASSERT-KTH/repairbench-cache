{
    "generation": "  /**\n   * Parses the externs and main inputs.\n   *\n   * @return A synthetic root node whose two children are the externs root\n   *     and the main root\n   */\n  Node parseInputs() {\n    boolean devMode = options.devMode != DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot != null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n      jsRoot.detachChildren();\n    }\n\n    // Create new roots.\n    jsRoot = IR.block();\n    jsRoot.setIsSyntheticBlock(true);\n\n    externsRoot = IR.block();\n    externsRoot.setIsSyntheticBlock(true);\n\n    externAndJsRoot = IR.block(externsRoot, jsRoot);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    if (options.tracer.isOn()) {\n      // Initialize the tracker here but don't start the timer yet.\n      tracker = new PerformanceTracker(jsRoot, options.tracer);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(\"parseInputs\");\n\n    try {\n      // Parse externs sources.\n      for (CompilerInput input : externs) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        // Make sure the node is detached before adding it. This is important\n        // if we're re-parsing incrementally.\n        n.detachFromParent();\n        externsRoot.addChildToBack(n);\n      }\n\n      // Modules inferred in ProcessCommonJS pass.\n      if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n        processAMDAndCommonJSModules();\n      }\n\n      hoistExterns(externsRoot);\n\n      // Check if the sources need to be re-ordered.\n      boolean staleInputs = false;\n      if (options.dependencyOptions.needsManagement() && options.closurePass) {\n        // Forward-declare all provided types, so that they are not flagged\n        // even if they are dropped from the compilation process.\n        // Do this before dependency management, because management may\n        // strip unused sources.\n        for (CompilerInput input : inputs) {\n          for (String provide : input.getProvides()) {\n            getTypeRegistry().forwardDeclareType(provide);\n          }\n        }\n\n\n        try {\n          inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);\n          staleInputs = true; // Indicates inputs may have been re-ordered.\n        } catch (CircularDependencyException e) {\n          report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n          if (hasErrors()) { // Check if error reporting is fatal.\n            return null;\n          }\n        } catch (MissingProvideException e) {\n          report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));\n          if (hasErrors()) { // Check if error reporting is fatal.\n             return null;\n          }\n        }\n      }\n\n      hoistNoCompileFiles();\n\n      // If dependency management re-ordered inputs, ensure module assignments are updated.\n      if (staleInputs) {\n        repartitionInputs();\n      }\n\n      // Build the main AST.\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        // input.getAstRoot() may return null if there were parse errors, or if the input\n        // is empty. This is handled by the checks below.\n        if (n == null) {\n          continue; // Skip adding if AST is null.\n        }\n\n        // If we're in development mode, run sanity checks on the AST.\n        if (devMode) {\n          // Note: runSanityCheck may report errors, halting compilation.\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        // Annotate nodes with source information for source maps or reports.\n        if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null) {\n          SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        // Make sure the node is detached before adding it. This is necessary\n        // if inputs were re-ordered and we're reusing cached ASTs that might\n        // have been previously attached elsewhere.\n        n.detachFromParent();\n        jsRoot.addChildToBack(n);\n      }\n\n      // Final error check before returning the combined root.\n      if (hasErrors()) {\n        return null;\n      }\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, \"parseInputs\");\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}