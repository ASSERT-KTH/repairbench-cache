{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            // Found existing item, and duplicates are not allowed, so update\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        else {\n            // Item not found (index < 0) OR duplicates are allowed (allowDuplicateXValues is true).\n            // In either case, we need to add a new item.\n            if (this.autoSort) {\n                // If auto-sorting, we need to find the correct insertion point.\n                if (index < 0) {\n                    // x not found by binarySearch, so 'index' is -(insertion point)-1.\n                    // Convert to actual insertion point and add.\n                    this.data.add(-index - 1, new XYDataItem(x, y));\n                } else {\n                    // x found (index >= 0), and allowDuplicateXValues is true.\n                    // We need to add a new item, but place it after any existing\n                    // items with the same X-value to maintain sorted order for duplicates.\n                    int insertIndex = index;\n                    final XYDataItem newItem = new XYDataItem(x, y);\n\n                    // Determine the comparator based on the series' sort order.\n                    // This comparator is used to find the insertion point for duplicates.\n                    java.util.Comparator comparator = this.sortOrder == SortOrder.ASCENDING\n                            ? XYDataItem.BY_X_ASCENDING_COMPARATOR\n                            : XYDataItem.BY_X_DESCENDING_COMPARATOR;\n\n                    // Iterate forward from the found 'index' to find the first position\n                    // where the current item's X-value is strictly greater than (or\n                    // strictly less than for descending order) the new item's X-value.\n                    // This ensures the new item is placed after all existing duplicates.\n                    while (insertIndex < this.data.size()) {\n                        XYDataItem currentItem = (XYDataItem) this.data.get(insertIndex);\n                        if (comparator.compare(currentItem, newItem) > 0) {\n                            break; // Found the spot: currentItem.x > newItem.x (or < for descending)\n                        }\n                        insertIndex++;\n                    }\n                    this.data.add(insertIndex, newItem);\n                }\n            }\n            else {\n                // Not autoSort, just append the new item to the end of the list.\n                this.data.add(new XYDataItem(x, y));\n            }\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}