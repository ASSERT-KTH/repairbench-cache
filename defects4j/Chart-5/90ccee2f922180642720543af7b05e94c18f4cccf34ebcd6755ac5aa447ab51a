{
    "generation": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    XYDataItem overwritten = null;\n    int index = indexOf(x);\n    if (index >= 0) {\n        if (!this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        } else {\n            // allow duplicate X values - insert new item *after* the last\n            // one with this X value\n            int insertIndex = index + 1;\n            if (this.autoSort) {\n                // find the last item with x and add after it\n                int size = this.data.size();\n                while (insertIndex < size \n                        && getX(insertIndex).equals(x)) {\n                    insertIndex++;\n                }\n                this.data.add(insertIndex, new XYDataItem(x, y));\n            } else {\n                this.data.add(new XYDataItem(x, y));\n            }\n        }\n    } else {\n        // index < 0, no existing x-value, insert at appropriate position\n        int insertIndex;\n        if (this.autoSort) {\n            insertIndex = -index - 1;\n            this.data.add(insertIndex, new XYDataItem(x, y));\n        } else {\n            this.data.add(new XYDataItem(x, y));\n        }\n    }\n\n    if (getItemCount() > this.maximumItemCount) {\n        this.data.remove(0);\n    }\n\n    fireSeriesChanged();\n    return overwritten;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}