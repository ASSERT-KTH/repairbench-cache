{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        // Find the index of x. If autoSort is true, this should use binary search.\n        // Binary search returns index >= 0 if found, or (-(insertion point) - 1) if not found.\n        // Linear search (if autoSort is false) returns index >= 0 if found, or -1 if not found.\n        int index = indexOf(x);\n\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            // Item found at 'index' and duplicates are not allowed: UPDATE\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        else {\n            // Item not found (index < 0) OR duplicates are allowed: ADD a new item.\n            XYDataItem newItem = new XYDataItem(x, y);\n\n            if (this.autoSort) {\n                // If autoSort is true, insert the new item at the correct sorted position.\n                // Calculate the insertion point based on the result of indexOf(x).\n                int insertionPoint;\n                if (index >= 0) {\n                    // Item found at 'index', but duplicates are allowed.\n                    // Insert the new item immediately after the found item's index\n                    // to maintain order and keep duplicates potentially adjacent.\n                    insertionPoint = index + 1;\n                } else {\n                    // Item not found (index < 0).\n                    // The insertion point is derived from the binary search result: -index - 1.\n                    insertionPoint = -index - 1;\n                }\n                // The add method handles insertionPoint == size correctly.\n                this.data.add(insertionPoint, newItem);\n            }\n            else {\n                // If autoSort is false, just append the new item to the end.\n                this.data.add(newItem);\n            }\n\n            // Check if this addition exceeds the maximum item count...\n            // Note: This check should be performed *after* adding the item.\n            if (getItemCount() > this.maximumItemCount) {\n                // Remove the item at index 0. If !autoSort, this is the oldest item.\n                // If autoSort, this is the item with the smallest x-value.\n                this.data.remove(0);\n            }\n        }\n\n        // Notify listeners that the series has changed.\n        fireSeriesChanged();\n        // Return the item that was overwritten (if any).\n        return overwritten;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}