{
    "generation": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n    XYDataItem overwritten = null;\n    \n    if (!this.allowDuplicateXValues) {\n        int index = indexOf(x);\n        if (index >= 0) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        else {\n            int insertionIndex = this.autoSort ? (-index - 1) : this.data.size();\n            this.data.add(insertionIndex, new XYDataItem(x, y));\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n    }\n    else { // allow duplicate x-values\n        XYDataItem newItem = new XYDataItem(x, y);\n        if (this.autoSort) {\n            // Use binarySearch to find the insertion point.\n            // When duplicates are allowed, binarySearch may return a non-negative index (an arbitrary match),\n            // so we insert the new item after all existing items with the same x-value.\n            int insertionIndex = Collections.binarySearch(this.data, newItem);\n            if (insertionIndex < 0) {\n                insertionIndex = -insertionIndex - 1;\n            }\n            else {\n                while (insertionIndex < this.data.size() && \n                       ((XYDataItem) this.data.get(insertionIndex)).getX().equals(x)) {\n                    insertionIndex++;\n                }\n            }\n            this.data.add(insertionIndex, newItem);\n        }\n        else {\n            this.data.add(newItem);\n        }\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n    fireSeriesChanged();\n    return overwritten;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}