{
    "generation": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    XYDataItem overwritten = null;\n    int index = indexOf(x);\n\n    if (index >= 0) {\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n\n        if (!this.allowDuplicateXValues) {\n            existing.setY(y);\n        } else {\n            // allow duplicate X values: insert new item *after* existing\n            if (this.autoSort) {\n                int insertIndex = index + 1;\n                // advance insertIndex until next item with different X or end\n                while (insertIndex < this.data.size() &&\n                        this.data.get(insertIndex).getX().equals(x)) {\n                    insertIndex++;\n                }\n                this.data.add(insertIndex, new XYDataItem(x, y));\n            } else {\n                this.data.add(new XYDataItem(x, y));\n            }\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n    } else {\n        // negative index means new unique X value, insert accordingly\n        if (this.autoSort) {\n            // index returned by indexOf() when not found is negative\n            this.data.add(-index - 1, new XYDataItem(x, y));\n        } else {\n            this.data.add(new XYDataItem(x, y));\n        }\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n\n    fireSeriesChanged();\n    return overwritten;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}