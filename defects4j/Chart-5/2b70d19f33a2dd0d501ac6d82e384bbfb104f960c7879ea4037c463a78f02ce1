{
    "generation": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n    \n    XYDataItem overwritten = null;\n    int index = indexOf(x);\n    \n    if (index >= 0 && !this.allowDuplicateXValues) {\n        // Update the existing item (duplicate x value not allowed)\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n        existing.setY(y);\n    } else {\n        // Add a new item (duplicate x values allowed or x not found)\n        if (this.autoSort) {\n            int insertIndex;\n            if (index >= 0) {\n                // indexOf returned a valid index for a duplicate x value\n                // Find the position after the last element with the same x value.\n                insertIndex = index + 1;\n                while (insertIndex < this.data.size()\n                        && ((XYDataItem) this.data.get(insertIndex)).getX().equals(x)) {\n                    insertIndex++;\n                }\n            } else {\n                // index is negative; use the insertion point from binary search\n                insertIndex = -index - 1;\n            }\n            this.data.add(insertIndex, new XYDataItem(x, y));\n        } else {\n            this.data.add(new XYDataItem(x, y));\n        }\n        // Check if adding this item has exceeded the maximum allowed count\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n    fireSeriesChanged();\n    return overwritten;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}