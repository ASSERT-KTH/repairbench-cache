{
    "generation": "    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n        if (index >= 0) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            if (this.allowDuplicateXValues) {\n                // allow duplicate X values, so add a new data item\n                if (this.autoSort) {\n                    // Insert immediately after the last occurrence of the same X\n                    int insertIndex = index + 1;\n                    while (insertIndex < this.data.size() && \n                           x.equals(getX(insertIndex))) {\n                        insertIndex++;\n                    }\n                    this.data.add(insertIndex, new XYDataItem(x, y));\n                } else {\n                    this.data.add(new XYDataItem(x, y));\n                }\n            } else {\n                // update the y-value for the existing item\n                existing.setY(y);\n            }\n        }\n        else {\n            // if the series is sorted, the negative index is a result from\n            // Collections.binarySearch() and tells us where to insert the\n            // new item...otherwise it will be just -1 and we should just\n            // append the value to the list...\n            if (this.autoSort) {\n                this.data.add(-index - 1, new XYDataItem(x, y));\n            }\n            else {\n                this.data.add(new XYDataItem(x, y));\n            }\n        }\n        // check if this addition will exceed the maximum item count...\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}