{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        int index = indexOf(x); // uses binary search if autoSort\n\n        if (index >= 0 && !this.allowDuplicateXValues) { // Update existing item\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y); // Update the y-value\n        }\n        else { // Add new item (either index < 0 or allowDuplicateXValues is true)\n            // if the series is sorted, the negative index is a result from\n            // Collections.binarySearch() and tells us where to insert the\n            // new item...otherwise it will be just -1 and we should just\n            // append the value to the list...\n            if (this.autoSort) {\n                 int insertionIndex;\n                 if (index < 0) { // Item not found, calculate insertion point from negative index\n                     insertionIndex = -index - 1;\n                 }\n                 else { // Item found (at index >= 0) AND duplicates are allowed.\n                       // We need to insert the new item MAINTAINING SORT ORDER.\n                       // Find the insertion point *after* all existing items with the same x value.\n                       // This ensures that items with duplicate x-values are appended.\n                     insertionIndex = index;\n                     // Note: 'index' is where binary search found *an* item with matching x.\n                     // We iterate forward from this point to find the position *after* the last\n                     // item with the same x-value.\n                     while (insertionIndex < this.data.size() &&\n                            ((XYDataItem) this.data.get(insertionIndex)).getX().equals(x)) {\n                         insertionIndex++;\n                     }\n                     // If the binary search found the *last* item with value x,\n                     // insertionIndex will now be index + 1.\n                     // If it found an earlier item, the loop moves insertionIndex\n                     // to the position after the last item with value x.\n                 }\n                 this.data.add(insertionIndex, new XYDataItem(x, y));\n            }\n            else { // Not autoSort\n                this.data.add(new XYDataItem(x, y));\n            }\n            // check if this addition will exceed the maximum item count...\n            // We should do this *after* adding the item.\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        // fireSeriesChanged only once at the end, regardless of add or update\n        fireSeriesChanged();\n        return overwritten; // null if added, non-null if updated\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}