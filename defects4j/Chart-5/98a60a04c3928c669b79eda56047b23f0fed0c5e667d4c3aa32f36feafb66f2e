{
    "generation": "/**\n * Adds or updates an item in the series and sends a\n * {@link SeriesChangeEvent} to all registered listeners.\n *\n * @param x  the x-value (<code>null</code> not permitted).\n * @param y  the y-value (<code>null</code> permitted).\n *\n * @return A copy of the overwritten data item, or <code>null</code> if no\n *         item was overwritten.\n */\npublic XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    XYDataItem overwritten = null;\n    int index = indexOf(x);\n\n    if (index >= 0 && !this.allowDuplicateXValues) {\n        // update existing item (duplicates not allowed)\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n        existing.setY(y);\n    }\n    else {\n        // add new item (duplicates allowed or x not found)\n        if (this.autoSort) {\n            // determine correct insertion point\n            int insertionIndex = (index < 0 ? -index - 1 : index + 1);\n            this.data.add(insertionIndex, new XYDataItem(x, y));\n        }\n        else {\n            this.data.add(new XYDataItem(x, y));\n        }\n        // enforce maximum item count\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n\n    fireSeriesChanged();\n    return overwritten;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}