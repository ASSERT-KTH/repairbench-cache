{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        int index = indexOf(x); // Find index based on x-value\n\n        // If 'x' is found AND duplicate X-values are NOT allowed, then update the existing item.\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        // Otherwise (either 'x' is not found, OR duplicate X-values are allowed), add a new item.\n        else {\n            XYDataItem newItem = new XYDataItem(x, y);\n            if (this.autoSort) {\n                // If auto-sorting is enabled, determine the correct insertion point.\n                // 'indexOf(x)' returns:\n                //   - A non-negative index if 'x' was found (meaning an item with this x-value exists).\n                //     If duplicates are allowed, we insert the new item *after* the found one.\n                //   - A negative value (-(insertion point) - 1) if 'x' was not found.\n                //     We use this to get the correct insertion point.\n                int insertionPoint = (index < 0) ? (-index - 1) : (index + 1);\n                this.data.add(insertionPoint, newItem);\n            }\n            else {\n                // If not auto-sorting, just append the new item to the end of the list.\n                this.data.add(newItem);\n            }\n            // Check if this addition exceeds the maximum item count and remove the oldest item if so.\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}