{
    "generation": "/**\n * Adds or updates an item in the series and sends a\n * {@link SeriesChangeEvent} to all registered listeners.\n *\n * @param x  the x-value (<code>null</code> not permitted).\n * @param y  the y-value (<code>null</code> permitted).\n *\n * @return A copy of the overwritten data item, or <code>null</code> if no\n *         item was overwritten.\n */\npublic XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    XYDataItem overwritten = null;\n    int index = indexOf(x);\n\n    // update an existing item if duplicates are not allowed\n    if (index >= 0 && !this.allowDuplicateXValues) {\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n        existing.setY(y);\n    }\n    else {\n        // create a new item\n        XYDataItem newItem = new XYDataItem(x, y);\n\n        if (this.autoSort) {\n            // determine insertion point\n            int insertionIndex;\n            if (index < 0) {\n                // not found: binarySearch gives negative insertion point encoding\n                insertionIndex = -index - 1;\n            }\n            else {\n                // found an existing x, but duplicates are allowed:\n                // insert after the last item with the same x\n                insertionIndex = index;\n                int itemCount = this.data.size();\n                while (insertionIndex < itemCount &&\n                       ((XYDataItem) this.data.get(insertionIndex)).getX().equals(x)) {\n                    insertionIndex++;\n                }\n            }\n            this.data.add(insertionIndex, newItem);\n        }\n        else {\n            // no auto-sort: just append\n            this.data.add(newItem);\n        }\n\n        // enforce the maximum item count\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n\n    fireSeriesChanged();\n    return overwritten;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}