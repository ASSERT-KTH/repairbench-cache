{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        // Find the index of the item. This uses binary search.\n        // If not found, it returns -(insertion point) - 1.\n        int index = indexOf(x);\n\n        XYDataItem overwritten = null;\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            // Case 1: Item found, and duplicates are NOT allowed -> Update existing item\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        else {\n            // Case 2: Item not found (index < 0), OR duplicates ARE allowed -> Add new item\n            XYDataItem newItem = new XYDataItem(x, y);\n            if (this.autoSort) {\n                // If auto-sorting, we need to find the correct insertion point.\n                int insertionIndex = index;\n                if (insertionIndex < 0) {\n                    // Item not found, 'index' is -(insertion point) - 1,\n                    // so convert to actual insertion point.\n                    insertionIndex = -(insertionIndex + 1);\n                } else {\n                    // Item found (insertionIndex >= 0).\n                    // This path is taken only if 'this.allowDuplicateXValues' is true\n                    // (because if false, the 'if (index >= 0 && !this.allowDuplicateXValues)'\n                    // branch above would have been taken).\n                    // If duplicates are allowed, we need to insert the new item after\n                    // any existing items with the same x-value to maintain sort order.\n                    while (insertionIndex < this.data.size() && this.data.get(insertionIndex).getX().equals(x)) {\n                        insertionIndex++;\n                    }\n                }\n                this.data.add(insertionIndex, newItem);\n            }\n            else {\n                // Not auto-sorted, just append the new item.\n                this.data.add(newItem);\n            }\n            // Check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}