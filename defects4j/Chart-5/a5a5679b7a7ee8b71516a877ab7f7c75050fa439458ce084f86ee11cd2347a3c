{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        int index = indexOf(x); // Uses binary search if autoSort is true\n\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            // Case 1: Item found and duplicates ARE NOT allowed --> Update existing item\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            } catch (CloneNotSupportedException e) {\n                // This should never happen since XYDataItem implements Cloneable\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n            // Note: An update doesn't change the item count or require re-sorting by X.\n        } else {\n            // Case 2: Item not found (index < 0), OR item found and duplicates ARE allowed --> Add new item\n            if (this.autoSort) {\n                int insertionPoint;\n                if (index >= 0) {\n                    // Item found, duplicates allowed: find insertion point AFTER existing items\n                    // with the same x-value. Because binarySearch doesn't guarantee which duplicate\n                    // is found, we search forward from the found index 'index' to find the position\n                    // after the last item with the same x-value.\n                    insertionPoint = index;\n                    while (insertionPoint < this.data.size() &&\n                           ((XYDataItem) this.data.get(insertionPoint)).getX().equals(x)) {\n                        insertionPoint++;\n                    }\n                    // insertionPoint is now the correct position to insert the new item\n                    // while maintaining the sort order.\n                 } else {\n                    // Item not found: calculate insertion point from binary search result\n                    insertionPoint = -index - 1;\n                }\n                this.data.add(insertionPoint, new XYDataItem(x, y));\n            } else {\n                // Not sorted: just add to the end\n                this.data.add(new XYDataItem(x, y));\n            }\n\n            // After adding, check if the maximum item count has been exceeded\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0); // Remove the oldest item\n            }\n            // When adding, no item is overwritten in the sense of the return value specification\n             overwritten = null;\n        }\n\n        fireSeriesChanged();\n        return overwritten;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}