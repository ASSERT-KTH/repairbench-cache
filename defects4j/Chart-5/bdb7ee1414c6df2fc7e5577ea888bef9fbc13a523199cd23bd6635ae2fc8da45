{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        // Find if an item with this x-value already exists.\n        // This 'index' is used primarily for the update case.\n        int index = indexOf(x); \n\n        // Case 1: Duplicates are NOT allowed AND an item with this x-value exists.\n        // In this scenario, we update the existing item.\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        // Case 2: Either no item with this x-value was found (index < 0),\n        //         OR duplicates ARE allowed (this.allowDuplicateXValues is true).\n        //         In both these scenarios, we ADD a new item.\n        else {\n            XYDataItem newItem = new XYDataItem(x, y);\n\n            if (this.autoSort) {\n                // When auto-sorting, we need to find the correct insertion point\n                // using Collections.binarySearch. This correctly uses XYDataItem's\n                // compareTo method (which considers both x and y) to maintain sort order.\n                int insertionIndex = Collections.binarySearch(this.data, newItem);\n                if (insertionIndex < 0) {\n                    // Item not found, insert at the calculated insertion point.\n                    this.data.add(-insertionIndex - 1, newItem);\n                } else {\n                    // Item with same x-value (and possibly y-value, depending on compareTo)\n                    // was found. Since we are in the 'else' block, it means either:\n                    // 1. original 'index' was < 0 (x not found), which implies this branch won't be taken unless binarySearch\n                    //    found something that indexOf didn't, or more specifically,\n                    //    if an equal item was found, 'insertionIndex' would be >=0.\n                    // 2. this.allowDuplicateXValues is true. In this case, we add the new item.\n                    //    The original XYSeries.add() method inserts at the found 'insertionIndex'.\n                    this.data.add(insertionIndex, newItem);\n                }\n            }\n            else {\n                // Not auto-sorting, just append the new item to the end of the list.\n                this.data.add(newItem);\n            }\n\n            // Check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0); // Remove the oldest item\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}