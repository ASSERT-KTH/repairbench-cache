{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            // Case 1: Overwrite existing item (duplicates not allowed, x found)\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        else {\n            // Case 2: Add new item (x not found OR duplicates allowed)\n            XYDataItem newItem = new XYDataItem(x, y);\n            if (this.autoSort) {\n                int insertPos;\n                if (index < 0) {\n                    // Item not found, calculate standard insertion point\n                    insertPos = -(index + 1);\n                } else {\n                    // Item found, and duplicates are allowed.\n                    // We need to insert the new item after all existing items\n                    // with the same X-value to maintain insertion order for duplicates.\n                    insertPos = index;\n                    while (insertPos < this.data.size()\n                            && this.data.get(insertPos).getX().equals(x)) {\n                        insertPos++;\n                    }\n                }\n                this.data.add(insertPos, newItem);\n            }\n            else {\n                // Not auto-sorted, just append the new item\n                this.data.add(newItem);\n            }\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}