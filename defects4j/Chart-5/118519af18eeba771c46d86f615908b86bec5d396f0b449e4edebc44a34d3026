{
    "generation": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    XYDataItem overwritten = null;\n    int index;\n    if (this.autoSort) {\n        XYDataItem key = new XYDataItem(x, null);\n        index = Collections.binarySearch(this.data, key);\n    } else {\n        index = indexOf(x);\n    }\n\n    if (index >= 0 && !this.allowDuplicateXValues) {\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n        existing.setY(y);\n    } else {\n        if (this.autoSort) {\n            int insertionPoint;\n            if (index >= 0) {\n                insertionPoint = index;\n                // Find the insertion point after all existing items with the same x\n                while (insertionPoint < this.data.size()) {\n                    XYDataItem item = (XYDataItem) this.data.get(insertionPoint);\n                    if (item.getX().compareTo(x) != 0) {\n                        break;\n                    }\n                    insertionPoint++;\n                }\n            } else {\n                insertionPoint = -index - 1;\n            }\n            this.data.add(insertionPoint, new XYDataItem(x, y));\n        } else {\n            this.data.add(new XYDataItem(x, y));\n        }\n        // Check if this addition will exceed the maximum item count...\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n    fireSeriesChanged();\n    return overwritten;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}