{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n\n        // If an item with the same x-value is found AND duplicate x-values are NOT allowed,\n        // then we update the existing item.\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        // Otherwise (either the item was not found, OR duplicate x-values ARE allowed),\n        // we add a new item to the series.\n        else {\n            int insertionIndex;\n            if (this.autoSort) {\n                // If autoSort is true:\n                //   - If index < 0, it means 'x' was not found, and 'index' is -(insertionPoint) - 1.\n                //     So, the insertion point is -index - 1.\n                //   - If index >= 0, it means 'x' was found. Since we are in this 'else' block,\n                //     it implies that 'allowDuplicateXValues' is true. We need to insert the\n                //     new item after all existing items with the same x-value to maintain\n                //     sorted order by x-value.\n                if (index < 0) {\n                    insertionIndex = -index - 1;\n                } else {\n                    // 'x' was found (at 'index'), and duplicates are allowed.\n                    // Find the position *after* all existing items with the same x-value.\n                    insertionIndex = index;\n                    while (insertionIndex < this.data.size() &&\n                           x.equals(((XYDataItem) this.data.get(insertionIndex)).getX())) {\n                        insertionIndex++;\n                    }\n                }\n                this.data.add(insertionIndex, new XYDataItem(x, y));\n            }\n            else {\n                // If autoSort is false, just append the new item.\n                this.data.add(new XYDataItem(x, y));\n            }\n\n            // Check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}