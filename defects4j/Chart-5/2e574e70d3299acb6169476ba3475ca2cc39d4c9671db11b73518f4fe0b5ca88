{
    "generation": "/**\n * Adds or updates an item in the series and sends a\n * {@link SeriesChangeEvent} to all registered listeners.\n *\n * @param x  the x-value (<code>null</code> not permitted).\n * @param y  the y-value (<code>null</code> permitted).\n *\n * @return A copy of the overwritten data item, or <code>null</code> if no\n *         item was overwritten.\n */\npublic XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    XYDataItem overwritten = null;\n    int index = indexOf(x);\n    if (index >= 0 && !this.allowDuplicateXValues) {\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n        existing.setY(y);\n    }\n    else {\n        // Correct handling for allowDuplicateXValues: always append new value if allowed, \n        // even if x already exists. Only use insertion index from binarySearch if autoSort is true.\n        XYDataItem item = new XYDataItem(x, y);\n        if (this.autoSort) {\n            int insertIndex;\n            if (index < 0) {\n                insertIndex = -index - 1;\n            } else {\n                // If index >= 0 and allowDuplicateXValues, must find where to insert to maintain order.\n                // Since indexOf returns an arbitrary duplicate, insert after last occurrence.\n                insertIndex = index + 1;\n                while (insertIndex < this.data.size()\n                       && ((XYDataItem) this.data.get(insertIndex)).getX().equals(x)) {\n                    insertIndex++;\n                }\n            }\n            this.data.add(insertIndex, item);\n        }\n        else {\n            this.data.add(item);\n        }\n        // check if this addition will exceed the maximum item count...\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n    fireSeriesChanged();\n    return overwritten;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}