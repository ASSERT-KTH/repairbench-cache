{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n\n        // Case 1: Update an existing item\n        // This path is taken if an item with 'x' is found AND duplicates are NOT allowed.\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            }\n            catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        }\n        // Case 2: Add a new item\n        // This path is taken if:\n        // a) Duplicates ARE allowed (regardless of whether 'x' exists).\n        // b) Duplicates are NOT allowed AND 'x' is not found (index < 0).\n        else {\n            if (this.autoSort) {\n                int insertionPoint;\n                if (index < 0) {\n                    // Item with 'x' was not found (binarySearch returned negative value).\n                    // The insertion point is derived directly from the negative 'index'.\n                    insertionPoint = -index - 1;\n                } else {\n                    // Item with 'x' was found at 'index' (binarySearch returned non-negative value).\n                    // This implies that 'this.allowDuplicateXValues' must be true for this\n                    // 'else' block to be reached (otherwise, it would have gone to the 'if' block to update).\n                    // When duplicates are allowed and auto-sorting, the new item should be\n                    // inserted AFTER all existing items with the same x-value to maintain order\n                    // and reflect insertion order for duplicates.\n                    insertionPoint = index; // Start checking from where it was found\n                    while (insertionPoint < this.data.size()\n                           && ((XYDataItem) this.data.get(insertionPoint)).getX().equals(x)) {\n                        insertionPoint++;\n                    }\n                }\n                this.data.add(insertionPoint, new XYDataItem(x, y));\n            } else {\n                // If not auto-sorting, just append the new item to the end of the list.\n                this.data.add(new XYDataItem(x, y));\n            }\n            // Check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}