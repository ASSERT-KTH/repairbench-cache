{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n        if (index >= 0 && !this.allowDuplicateXValues) {\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            try {\n                overwritten = (XYDataItem) existing.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n            existing.setY(y);\n        } else {\n            XYDataItem newItem = new XYDataItem(x, y);\n            if (this.autoSort) {\n                int newIndex = Collections.binarySearch(this.data, newItem);\n                int insertionPoint;\n                if (newIndex >= 0) {\n                    // Move to the end of the duplicates\n                    while (newIndex < this.data.size()) {\n                        XYDataItem current = (XYDataItem) this.data.get(newIndex);\n                        if (current.getX().equals(x)) {\n                            newIndex++;\n                        } else {\n                            break;\n                        }\n                    }\n                    insertionPoint = newIndex;\n                } else {\n                    insertionPoint = -newIndex - 1;\n                }\n                this.data.add(insertionPoint, newItem);\n            } else {\n                this.data.add(newItem);\n            }\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}