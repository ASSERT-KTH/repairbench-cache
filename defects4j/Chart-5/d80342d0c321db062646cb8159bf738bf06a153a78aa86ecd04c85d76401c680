{
    "generation": "    /**\n     * Adds or updates an item in the series and sends a\n     * {@link SeriesChangeEvent} to all registered listeners.\n     *\n     * @param x  the x-value (<code>null</code> not permitted).\n     * @param y  the y-value (<code>null</code> permitted).\n     *\n     * @return A copy of the overwritten data item, or <code>null</code> if no\n     *         item was overwritten.\n     */\n    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        // if we get to here, we know that duplicate X values are not permitted\n        XYDataItem overwritten = null;\n        int index = indexOf(x);\n        if (index >= 0) {\n            if (!this.allowDuplicateXValues) {\n                XYDataItem existing = (XYDataItem) this.data.get(index);\n                try {\n                    overwritten = (XYDataItem) existing.clone();\n                }\n                catch (CloneNotSupportedException e) {\n                    throw new SeriesException(\"Couldn't clone XYDataItem!\");\n                }\n                existing.setY(y);\n            } else {\n                // When duplicates are allowed, add a new item instead of updating\n                if (this.autoSort) {\n                    // Find the correct insertion point for the new item\n                    index = Collections.binarySearch(this.data, new XYDataItem(x, y));\n                    if (index < 0) {\n                        index = -index - 1;\n                    }\n                    this.data.add(index, new XYDataItem(x, y));\n                } else {\n                    this.data.add(new XYDataItem(x, y));\n                }\n            }\n        } else {\n            // Adjust the index to be the insertion point\n            index = -index - 1;\n            if (this.autoSort) {\n                this.data.add(index, new XYDataItem(x, y));\n            } else {\n                this.data.add(new XYDataItem(x, y));\n            }\n        }\n        \n        // check if this addition will exceed the maximum item count...\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n        \n        fireSeriesChanged();\n        return overwritten;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}