{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify that the provided interval brackets a root.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Flag to keep track if the roles of the bounds have been swapped.\n    boolean inverted = false;\n    \n    while (true) {\n        // Compute the next approximation using the false position formula.\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        \n        // If we hit the exact root, return it.\n        if (fx == 0.0) {\n            return x;\n        }\n        \n        // Standard regula falsi update:\n        // Given an interval [x0,x1] that brackets the root and assuming f(x0) < 0 and f(x1) > 0,\n        // the linear interpolation (secant) gives an approximation x. Then:\n        //   - If f(x0) and f(x) have opposite signs, the new interval is [x0, x].\n        //   - Otherwise, the new interval is [x, x1].\n        if (f0 * fx < 0) {\n            // The sign change is between x0 and x so the upper bound gets replaced.\n            x1 = x;\n            f1 = fx;\n        } else {\n            // f(x0) and f(x) have the same sign => the root lies in [x, x1].\n            // For methods that accelerate convergence, adjust the function value at the endpoint\n            // that remains fixed.\n            switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    // Scale f0 to force progress.\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // If no progress is made, try a bisection\u2010like step.\n                    if (x == x0) {\n                        // Note: we use + rather than \u201c\u2013\u201d so that the new x1 lies inside [x0, x1].\n                        x1 = 0.5 * (x0 + x1 + FastMath.max(rtol * FastMath.abs(x0), atol));\n                        f1 = computeObjectiveValue(x1);\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n            x0 = x;\n            f0 = fx;\n        }\n        \n        // Maintain the invariant that x0 < x1.\n        if (x0 > x1) {\n            final double tmpX = x0;\n            x0 = x1;\n            x1 = tmpX;\n            final double tmpF = f0;\n            f0 = f1;\n            f1 = tmpF;\n            inverted = !inverted;\n        }\n\n        // Termination criteria based on function value.\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Termination criteria based on the interval.\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}