{
    "generation": "    /** {@inheritDoc} */\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            // Check the signs of the function values to determine which side of x the root lies.\n            if (f1 * fx < 0) {\n                // The root is in the interval [x, x1].\n                // Update the endpoint known not to contain the root:\n                // Set x0 = x1, f0 = f1. The interval becomes [x1, x], which is inverted.\n                x0 = x1;\n                f0 = f1;\n                inverted = !inverted;\n            } else {\n                 // The root is in the interval [x0, x].\n                 // Update the endpoint known not to contain the root:\n                 // Set x1 = x, f1 = fx. The interval remains [x0, x].\n                 // In this case, the endpoint x0 (and f0) remains stationary,\n                 // potentially causing stagnation in the Regula Falsi method.\n                switch (method) {\n                case ILLINOIS:\n                    // Apply the Illinois modification to the stationary endpoint's function value.\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                     // Apply the Pegasus modification to the stationary endpoint's function value.\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // Standard Regula Falsi does not modify the stationary endpoint.\n                    // This branch is intentionally left empty. The previous implementation\n                    // had a problematic check 'if (x == x1)' which attempted to handle\n                    // stagnation but was flawed and incorrect for standard Regula Falsi.\n                    // Removing it restores the standard behavior, which might stagnate\n                    // as expected by some tests (like testIssue631).\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n            // Update the endpoint corresponding to the newly computed approximation x.\n            // This is always the 'x1' endpoint in our representation.\n            x1 = x;\n            f1 = fx;\n\n            // Check convergence based on function value magnitude at the latest estimate x1.\n            if (FastMath.abs(f1) <= ftol) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    // If the interval is inverted, [x0, x1] actually represents [orig_x1, x].\n                    // So, x1 = x is the left endpoint.\n                    if (inverted) {\n                        return x1;\n                    }\n                    // Otherwise, x1 is the right endpoint, which doesn't satisfy LEFT_SIDE.\n                    // Continue to check interval convergence. The other endpoint might satisfy it.\n                    break;\n                case RIGHT_SIDE:\n                    // If the interval is not inverted, [x0, x1] represents [orig_x0, x].\n                    // So, x1 = x is the right endpoint.\n                    if (!inverted) {\n                        return x1;\n                    }\n                     // Otherwise, x1 is the left endpoint, which doesn't satisfy RIGHT_SIDE.\n                    // Continue to check interval convergence. The other endpoint might satisfy it.\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    // Otherwise, f1 > 0, which doesn't satisfy BELOW_SIDE.\n                    // Continue to check interval convergence. The other endpoint might satisfy it.\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                     // Otherwise, f1 < 0, which doesn't satisfy ABOVE_SIDE.\n                    // Continue to check interval convergence. The other endpoint might satisfy it.\n                    break;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n\n            // Check convergence based on the width of the interval [x0, x1].\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                // The interval is small enough. Return the endpoint that satisfies the side requirement.\n                switch (allowed) {\n                case ANY_SIDE:\n                    // Return the latest estimate.\n                    return x1;\n                case LEFT_SIDE:\n                    // Return the endpoint confirmed to be on the left side of the root.\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    // Return the endpoint confirmed to be on the right side of the root.\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    // Return the endpoint with a function value <= 0.\n                    // Assumes f0 and f1 have opposite signs due to bracketing.\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                     // Return the endpoint with a function value >= 0.\n                    // Assumes f0 and f1 have opposite signs due to bracketing.\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}