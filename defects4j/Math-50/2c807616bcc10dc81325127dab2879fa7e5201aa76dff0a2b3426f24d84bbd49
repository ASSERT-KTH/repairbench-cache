{
    "generation": "    /** {@inheritDoc} */\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation.\n            // Regula Falsi formula.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            if (f1 * fx < 0) {\n                // The root is in the interval [x, x1]. We update x0 to x,\n                // but to keep the code structure simple, we swap x0/f0 and x1/f1\n                // and later update x1/f1 to x/fx.\n                x0 = x1;\n                f0 = f1;\n                inverted = !inverted;\n            } else {\n                // The root is in the interval [x0, x]. We update x1 to x.\n                // For faster convergence, in some methods we need to modify the\n                // function value of the endpoint that retains its position.\n                switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // The standard Regula Falsi does not modify function values.\n                    // It can be slow if one endpoint is stagnant.\n                    // The problematic code for stagnation handling was removed here.\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n            // Update the endpoint associated with x. It replaces the old x1.\n            x1 = x;\n            f1 = fx;\n\n            // If the function value of the last approximation is too small,\n            // check if the current estimate meets the desired side criteria.\n            if (FastMath.abs(f1) <= ftol) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) { // Current interval is (x1, x0) with x1 < x0\n                        return x1;  // x1 is the left endpoint\n                    }\n                    // If !inverted, x1 is the right endpoint. Cannot return yet.\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) { // Current interval is (x0, x1) with x0 < x1\n                        return x1;   // x1 is the right endpoint\n                    }\n                    // If inverted, x1 is the left endpoint. Cannot return yet.\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    // If f1 > 0, cannot return yet.\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    // If f1 < 0, cannot return yet.\n                    break;\n                default:\n                    throw new MathInternalError();\n                }\n                // If we didn't return, it means f1 is close to 0 but x1 is not on the desired side.\n                // We proceed to check the interval width convergence.\n            }\n\n            // If the current interval is within the given accuracies, we\n            // are satisfied. Return the endpoint that satisfies the allowed solutions.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1; // Return the latest approximation.\n                case LEFT_SIDE:\n                    // Return the endpoint closer to negative infinity.\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    // Return the endpoint closer to positive infinity.\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    // Return the endpoint with function value <= 0.\n                    // Since f0 * f1 is supposed to be < 0, one of them should satisfy the condition.\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    // Return the endpoint with function value >= 0.\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n        } // End of while loop\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}