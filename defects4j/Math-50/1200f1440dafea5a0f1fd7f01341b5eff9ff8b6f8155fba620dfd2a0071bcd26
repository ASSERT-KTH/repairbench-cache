{
    "generation": "    /** {@inheritDoc} */\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound. This flag is important for the return\n        // conditions, especially when dealing with specific sides (LEFT_SIDE, RIGHT_SIDE).\n        boolean inverted = (x0 > x1);\n\n        // This variable tracks which side (x0 or x1) was the 'fixed' point in the\n        // *previous* iteration. This is crucial for Regula Falsi, Illinois, and\n        // Pegasus methods to detect and handle stagnation.\n        // -1: x0 was fixed (x1 was updated).\n        //  1: x1 was fixed (x0 was updated).\n        //  0: No fixed side yet (first iteration).\n        int fixedSide = 0;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation using the secant method formula.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            // Determine which side of the interval (x0 or x1) to update based on the sign of f(x) * f(x1).\n            // If f(x) and f(x1) have opposite signs, the root is in [x, x1].\n            // This means x0 (and f0) should be updated to x (and fx), and x1 (and f1) are kept.\n            if (f1 * fx < 0) {\n                // x1 is the \"fixed\" point in this iteration (its value is retained).\n                // Apply method-specific modifications to f1 (the function value at the fixed point).\n                switch (method) {\n                case ILLINOIS:\n                    // If x1 was also the fixed side in the previous iteration, halve f1.\n                    if (fixedSide == 1) {\n                        f1 *= 0.5;\n                    }\n                    break;\n                case PEGASUS:\n                    // If x1 was also the fixed side in the previous iteration, apply Pegasus scaling.\n                    // The formula is f_fixed *= f_moving / (f_moving + f_new_fixed).\n                    // Here, x1 is fixed, f1 is f_fixed. x0 is moving, f0 is f_moving. fx is f_new_fixed.\n                    if (fixedSide == 1) {\n                         f1 *= f0 / (f0 + fx);\n                    }\n                    break;\n                case REGULA_FALSI:\n                    // For pure Regula Falsi, if x1 is fixed and we get a stagnation,\n                    // we adjust x1. This is symmetric to the adjustment for x0.\n                    // Stagnation occurs if x (new estimate) is numerically identical to x1 (fixed point).\n                    if (fixedSide == 1) {\n                        // The original `x == x1` check seems to indicate this, but it implies `x` was `x0` or `x1`.\n                        // A more robust check might be `FastMath.abs(x - x1) < FastMath.ulp(x1)`.\n                        // For simplicity, we use the original code's direct comparison `x == x1`.\n                        if (x == x1) {\n                            x1 = 0.5 * (x0 + x1 + FastMath.max(rtol * FastMath.abs(x0), atol));\n                            f1 = computeObjectiveValue(x1);\n                        }\n                    }\n                    break;\n                default:\n                    throw new MathInternalError(); // Should never happen.\n                }\n\n                // Update x0 (and f0) with the new approximation.\n                x0 = x;\n                f0 = fx;\n                fixedSide = 1; // Mark x1 as the fixed side for the next iteration.\n            } else {\n                // f(x) and f(x1) have the same sign. Since f0 * f1 < 0, this implies f0 * fx < 0.\n                // So the root is in [x0, x].\n                // This means x1 (and f1) should be updated to x (and fx), and x0 (and f0) are kept.\n                // x0 is the \"fixed\" point in this iteration (its value is retained).\n                // Apply method-specific modifications to f0 (the function value at the fixed point).\n                switch (method) {\n                case ILLINOIS:\n                    // If x0 was also the fixed side in the previous iteration, halve f0.\n                    if (fixedSide == -1) {\n                        f0 *= 0.5;\n                    }\n                    break;\n                case PEGASUS:\n                    // If x0 was also the fixed side in the previous iteration, apply Pegasus scaling.\n                    // Here, x0 is fixed, f0 is f_fixed. x1 is moving, f1 value. fx is f_new_fixed.\n                    // So, f0 *= f1 / (f1 + fx).\n                    if (fixedSide == -1) {\n                        f0 *= f1 / (f1 + fx);\n                    }\n                    break;\n                case REGULA_FALSI:\n                    // This was the original location for Regula Falsi's stagnation fix.\n                    // Apply if x0 has been fixed in the previous iteration.\n                    if (fixedSide == -1) {\n                        if (x == x1) { // Current x equals old x1, which was the fixed point.\n                            x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                            f0 = computeObjectiveValue(x0);\n                        }\n                    }\n                    break;\n                default:\n                    throw new MathInternalError(); // Should never happen.\n                }\n\n                // Update x1 (and f1) with the new approximation.\n                x1 = x;\n                f1 = fx;\n                fixedSide = -1; // Mark x0 as the fixed side for the next iteration.\n            }\n\n            // The `inverted` flag is initialized once and its state generally\n            // propagates correctly as long as x remains within the interval\n            // and the endpoint updates are consistent. No explicit change to `inverted` is needed here.\n\n            // If the function value of the last approximation is too small,\n            // given the function value accuracy, then we can't get closer to\n            // the root than we already are.\n            if (FastMath.abs(f1) <= ftol) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    // If inverted, x1 is the left bound. Otherwise, x0 is left.\n                    // Since f1 is within ftol, x1 is a good candidate.\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    // If not inverted, x1 is the right bound.\n                    // Since f1 is within ftol, x1 is a good candidate.\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n\n            // If the current interval is within the given accuracies, we\n            // are satisfied with the current approximation.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1; // Returns the last computed approximation.\n                case LEFT_SIDE:\n                    // If inverted, x1 is the value on the \"left\" side (numerically smaller).\n                    // Otherwise, x0 is the value on the \"left\" side.\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    // If inverted, x0 is the value on the \"right\" side (numerically larger).\n                    // Otherwise, x1 is the value on the \"right\" side.\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    // Return the x whose function value is less than or equal to 0.\n                    // Since f0 and f1 bracket the root, one must be <=0 and the other >=0.\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    // Return the x whose function value is greater than or equal to 0.\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}