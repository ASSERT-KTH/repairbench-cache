{
    "generation": "    /** {@inheritDoc} */\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            if (f1 * fx < 0) {\n                // The value of x1 has switched to the other bound, thus inverting\n                // the interval. The new interval is [x, x1], but we assign\n                // x to x1 below, so x0 needs to become the old x1.\n                x0 = x1;\n                f0 = f1;\n                inverted = !inverted;\n            } else {\n                // Root is in [x0, x]. Keep x0 the same endpoint index, but update\n                // its value for guarded methods. The new interval is [x0, x].\n                switch (method) {\n                case ILLINOIS:\n                    // Dampen the function value of the stagnant endpoint\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                     // Dampen the function value of the stagnant endpoint\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // Classic Regula Falsi does not modify the stagnant endpoint.\n                    // It can be very slow if one endpoint is stagnant.\n                    // The original code had a problematic check here:\n                    // if (x == x1) { ... } which is removed as it's unlikely\n                    // to trigger correctly and is not part of the standard\n                    // Regula Falsi algorithm. Its removal allows the expected\n                    // slow convergence / TooManyEvaluationsException for\n                    // cases like testIssue631.\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n            // Update the endpoint currently associated with x1 to the new\n            // approximation x.\n            x1 = x;\n            f1 = fx;\n\n            // Check for convergence based on function value\n            if (FastMath.abs(f1) <= ftol) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) { // Corresponds to original x1 (max) < x0 (min) case? No, checks orientation.\n                        return x1;\n                    }\n                    break; // If not left side, criteria not met. Check interval width.\n                case RIGHT_SIDE:\n                    if (!inverted) { // Corresponds to original x0 (min) < x1 (max)?\n                        return x1;\n                    }\n                    break; // If not right side, criteria not met. Check interval width.\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                     break; // If not below side, criteria not met. Check interval width.\n               case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break; // If not above side, criteria not met. Check interval width.\n                default:\n                    throw new MathInternalError();\n                }\n                // If we reach here, the function value criterion was met, but the allowed side condition was not.\n                // The original code fell through to check the interval width criterion.\n                // However, if ftol is met, we should potentially return the *other* endpoint\n                // if the current endpoint x1 doesn't satisfy the side condition.\n                // This logic seems missing / potentially incorrect in the original code too.\n                // But for fixing the specific test failure, we focus on the REGULA_FALSI case.\n                // Let's keep the original logic here for now.\n            }\n\n\n            // Check for convergence based on interval width\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                // If interval width is met, return the endpoint satisfying the side condition.\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1; // Return the latest approximation\n                case LEFT_SIDE:\n                    // Return the endpoint closer to negative infinity\n                    return inverted ? x1 : x0; // If inverted, x0=old_x1>x1, so x1 is left. If not inverted, x0<x1, so x0 is left.\n                case RIGHT_SIDE:\n                    // Return the endpoint closer to positive infinity\n                     return inverted ? x0 : x1; // If inverted, x0=old_x1>x1, so x0 is right. If not inverted, x0<x1, so x1 is right.\n                case BELOW_SIDE:\n                    // Return the endpoint where f <= 0\n                    return (f1 <= 0) ? x1 : x0; // Check f1 first (latest), then f0. Relies on f0*f1<0\n                case ABOVE_SIDE:\n                    // Return the endpoint where f >= 0\n                    return (f1 >= 0) ? x1 : x0; // Check f1 first (latest), then f0. Relies on f0*f1<0\n                default:\n                    throw new MathInternalError();\n                }\n            }\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}