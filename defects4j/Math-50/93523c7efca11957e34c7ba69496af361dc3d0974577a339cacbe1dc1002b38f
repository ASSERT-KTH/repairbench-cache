{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // The \u201cinverted\u201d flag is used for allowed-solution selection;\n    // with proper updates the interval will remain ordered.\n    boolean inverted = false;\n\n    // Keep finding better approximations.\n    while (true) {\n        // Compute the next approximation using the false position formula.\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n\n        // If an exact root is found, return immediately.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // --- Correct bracket update ---\n        // In a proper false position update the new point \u201cx\u201d should replace\n        // the endpoint whose function value has the same sign as fx.\n        // With a = x0 and b = x1 (where f(a) and f(b) have opposite signs),\n        // the standard update is:\n        //   if f(a)*f(x) < 0 then the root lies in [a,x] so set b = x,\n        //   else the root lies in [x,b] so set a = x.\n        if (f0 * fx < 0) {\n            // Sign change between x0 and x: new interval is [x0, x].\n            x1 = x;\n            f1 = fx;\n        } else {\n            // f0 and fx have the same sign so the change is in [x, x1].\n            // For Illinois and Pegasus modifications (and for plain Regula Falsi)\n            // we adjust the function value at the fixed endpoint to force progress.\n            switch (method) {\n                case ILLINOIS:\n                    f1 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f1 *= f0 / (f0 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // In plain false position stagnation is possible.\n                    // Compare with atol rather than exact equality.\n                    if (FastMath.abs(x - x0) <= atol) {\n                        x1 = 0.5 * (x0 + x1 + FastMath.max(rtol * FastMath.abs(x0), atol));\n                        f1 = computeObjectiveValue(x1);\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n            x0 = x;\n            f0 = fx;\n        }\n        // --- End correct bracket update ---\n\n        // Check if the function value at the newest point is within tolerance.\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Check if the interval is sufficiently small.\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}