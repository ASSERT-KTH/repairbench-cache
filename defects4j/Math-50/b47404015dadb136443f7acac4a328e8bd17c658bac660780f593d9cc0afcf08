{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            incrementEvaluationCount(); // ComputeObjectiveValue already incremented once for f0.\n                                         // But returning early means we didn't account for this eval.\n                                         // This seems off, computeObjectiveValue should handle counts.\n                                         // Let's assume computeObjectiveValue correctly handles counts.\n            return x0;\n        }\n        if (f1 == 0.0) {\n            // Same comment as above regarding counts.\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation using the secant method formula.\n            // This is equivalent to the Regula Falsi formula.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            // If f1 and fx have different signs (f1 * fx < 0), then the root\n            // lies in the interval [x, x1]. The endpoint x0 is replaced.\n            // If f1 and fx have the same sign (f1 * fx >= 0), then the root\n            // lies in the interval [x0, x]. The endpoint x1 is replaced.\n            // The logic below implements this interval update, using the\n            // 'inverted' flag to manage cases where x0 > x1.\n            if (f1 * fx < 0) {\n                // Root is in [x, x1]. Update x0 to x1 (and swap strategy).\n                x0 = x1;\n                f0 = f1;\n                inverted = !inverted;\n            } else {\n                // Root is in [x0, x]. Update x1 to x (standard).\n                // Apply acceleration modifications for Illinois and Pegasus.\n                switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // Pure Regula Falsi: Do nothing. The retained endpoint is not modified.\n                    // This allows the method to exhibit known stalling behavior,\n                    // which is expected by testIssue631.\n                    // The previous version had a stall correction here which was\n                    // non-standard and prevented the expected TooManyEvaluationsException.\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }\n            // In both cases, the new approximation 'x' becomes the new 'x1'.\n            x1 = x;\n            f1 = fx;\n\n            // Check for convergence based on function value closeness to zero.\n            if (FastMath.abs(f1) <= ftol) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) { // If inverted, x1 is the lower bound\n                        return x1;\n                    }\n                    break; // Otherwise x1 is upper bound, check interval width\n                case RIGHT_SIDE:\n                    if (!inverted) { // If not inverted, x1 is the upper bound\n                        return x1;\n                    }\n                    break; // Otherwise x1 is lower bound, check interval width\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break; // Otherwise f1 > 0, check interval width\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break; // Otherwise f1 < 0, check interval width\n                default:\n                    throw new MathInternalError();\n                }\n                // If the allowed side condition is not met by x1, proceed to interval width check.\n            }\n\n            // Check for convergence based on interval width.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                // Interval is small enough, return the bound satisfying the allowed side.\n                switch (allowed) {\n                case ANY_SIDE:\n                    // Return the most recent approximation.\n                    return x1;\n                case LEFT_SIDE:\n                    // Return the lower bound of the interval.\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    // Return the upper bound of the interval.\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    // Return the bound where f(bound) <= 0.\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    // Return the bound where f(bound) >= 0.\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}