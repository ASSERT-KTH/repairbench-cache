{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution.\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify that the initial endpoints bracket the root.\n    verifyBracketing(x0, x1);\n\n    // Get convergence tolerances.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // A flag to record if the roles of the endpoints have been inverted.\n    boolean inverted = false;\n\n    while (true) {\n        // Compute the next approximation using the false position formula.\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n\n        // If we hit the exact root, return it immediately.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Update the bracketing interval.\n        if (f1 * fx < 0) {\n            // A sign change occurred: move the endpoint that had the same sign as fx.\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // In the classical false position method no scaling is applied.\n                    // However, to avoid stagnation when x nearly equals x1 (within atol),\n                    // force a bisection step on the stagnant endpoint.\n                    if (FastMath.abs(x - x1) < atol) {\n                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                        f0 = computeObjectiveValue(x0);\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Update the moving endpoint.\n        x1 = x;\n        f1 = fx;\n\n        /* \n         * NOTE: In many solvers an early termination based on the function value is used if\n         * |f(x)| <= ftol. However, in the pure Regula Falsi (false position) method the\n         * bracketing interval might remain very wide (because one endpoint is not moved)\n         * even though the computed function value is extremely small. This may lead to an\n         * unacceptable non-bracketing solution. Therefore the termination is based solely\n         * on the x-interval width. For pathological functions (like issue 631), the small\n         * change in the abscissa forces the algorithm to run until the allowed number of evaluations\n         * is exceeded.\n         */\n\n        // Terminate only if the interval [x0, x1] is sufficiently small.\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}