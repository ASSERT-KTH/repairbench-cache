{
    "generation": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      // Note: This pattern avoids infinite loops if Nodes are created\n      // with cycles. It's also essential that we call getFirstChild()\n      // and getNext() every time through the loop, as the structure\n      // might change during traversal. See bug 19647768.\n\n      // Fetch the first child before visiting the parent or siblings,\n      // as the traversal may change the structure of the AST.\n      Node c = node.getFirstChild();\n\n      while (c != null) {\n        // It is important to fetch the next sibling node PRIOR to the\n        // recursive call to traverse. This is because the current node c\n        // may be removed or replaced as part of the traversal, which would\n        // invalidate the getNext() call on c.\n        Node next = c.getNext();\n        traverse(c); // Process the child subtree.\n        // Update c to the next sibling that we fetched before the recursive\n        // call.\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}