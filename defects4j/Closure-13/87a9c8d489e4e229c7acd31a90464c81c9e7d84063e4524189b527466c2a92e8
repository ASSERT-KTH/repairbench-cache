{
    "generation": "private void traverse(Node node) {\n  // The goal here is to avoid retraversing\n  // the entire AST to catch newly created opportunities.\n  // So we track whether a \"unit of code\" has changed,\n  // and revisit immediately.\n  if (!shouldVisit(node)) {\n    return;\n  }\n\n  int visits = 0;\n  do {\n    // Preserve the next sibling of node before traversing children,\n    // to handle cases when visit(node) moves/replaces this node.\n    Node next = node.getNext();\n\n    Node c = node.getFirstChild();\n    while (c != null) {\n      // Save the next sibling, because traversal may move/delete nodes.\n      Node nextChild = c.getNext();\n      traverse(c);\n      c = nextChild;\n    }\n\n    visit(node);\n    visits++;\n\n    Preconditions.checkState(visits < 10000, \"too many interations\");\n  } while (shouldRetraverse(node));\n\n  exitNode(node);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}