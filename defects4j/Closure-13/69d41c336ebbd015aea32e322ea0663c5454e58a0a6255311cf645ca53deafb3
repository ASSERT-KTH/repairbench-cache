{
    "generation": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      visits++;\n      // Check for excessive looping, potentially indicating failure to converge.\n      Preconditions.checkState(visits < 10000, \"too many iterations\");\n\n      // Visit the node before traversing the children. This allows the visit\n      // to make changes, and then we decide if children need re-traversal.\n      visit(node);\n\n      // Check if the visit reported changes that require retraversing children.\n      // This assumes shouldRetraverse(node) reflects the state after visit(node)\n      // and potentially after traverse(child). It might indicate structural\n      // changes or other reasons why children need processing again.\n      if (shouldRetraverse(node)) {\n        // If changes occurred (indicated by shouldRetraverse), retraverse the children.\n        Node c = node.getFirstChild();\n        while (c != null) {\n          // Store the next sibling *before* the recursive call,\n          // as the traversal might modify the tree structure (e.g., remove c).\n          Node next = c.getNext();\n          traverse(c);\n          // Move to the *stored* next sibling. Don't re-evaluate c.getNext()\n          // as the tree structure might have changed.\n          c = next;\n        }\n        // After traversing children, the loop condition (shouldRetraverse)\n        // will be checked again to see if another pass over the node (and\n        // potentially its children) is needed.\n      }\n      // Continue looping if the node needs to be revisited. This could be\n      // because the visit() itself indicated it, or because changes during\n      // the child traversal indicated it (and updated the state checked by\n      // shouldRetraverse).\n    } while (shouldRetraverse(node));\n\n    // Exit the node scope after the traversal and visits for this node are complete.\n    exitNode(node);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}