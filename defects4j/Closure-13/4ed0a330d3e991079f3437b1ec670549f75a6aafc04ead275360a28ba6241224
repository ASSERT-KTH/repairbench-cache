{
    "generation": "private void traverse(Node node) {\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    boolean changed = false;\n    do {\n      changed = false;\n      Node c = node.getFirstChild();\n      while (c != null) {\n        Node next = c.getNext();\n        traverse(c);\n        if (c.getParent() != node) {\n          // If the node was replaced or removed, adjust the current child.\n          c = node.getFirstChild();\n        } else {\n          c = next;\n        }\n      }\n\n      if (visit(node)) {\n        changed = true;\n      }\n\n      Preconditions.checkState(!changed || visits < 10000, \"too many iterations\");\n    } while (changed && shouldRetraverse(node));\n\n    exitNode(node);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}