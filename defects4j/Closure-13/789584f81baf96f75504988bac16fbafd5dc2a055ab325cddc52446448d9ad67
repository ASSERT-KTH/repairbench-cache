{
    "generation": "private void traverse(Node node) {\n  // The goal here is to avoid retraversing\n  // the entire AST to catch newly created opportunities.\n  // So we track whether a \"unit of code\" has changed,\n  // and revisit immediately.\n  if (!shouldVisit(node)) {\n    // Even if we're not \"visiting\" this node, we still\n    // need to walk its children so nothing is skipped.\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      traverse(c);\n    }\n    return;\n  }\n\n  int visits = 0;\n  do {\n    Node c = node.getFirstChild();\n    while (c != null) {\n      Node next = c.getNext();\n      traverse(c);\n      c = next;\n    }\n\n    visit(node);\n    visits++;\n    Preconditions.checkState(visits < 10000, \"too many interations\");\n  } while (shouldRetraverse(node));\n\n  exitNode(node);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}