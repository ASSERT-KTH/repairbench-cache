{
    "generation": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      // Fix: Get the next sibling *before* traversing the current child.\n      // If a child node 'c' is removed from its parent during the\n      // recursive call to `traverse(c)`, then `c.getNext()` would\n      // return null, prematurely terminating the child iteration.\n      // By storing `next` beforehand, we ensure the iteration\n      // continues correctly even if `c` is detached.\n      Node c = node.getFirstChild();\n      while(c != null) {\n        Node next = c.getNext(); // Store next sibling before `c` might be modified or detached.\n        traverse(c);\n        c = next; // Move to the stored next sibling.\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many interations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}