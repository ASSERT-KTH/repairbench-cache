{
    "generation": "private void traverse(Node node) {\n  if (!shouldVisit(node)) {\n    return;\n  }\n\n  int visits = 0;\n  do {\n    // First, apply the transformation so that any changes to 'node'\n    // (for example, new children being added) are in place before we\n    // try to traverse the (possibly new) children.\n    visit(node);\n    visits++;\n    Preconditions.checkState(visits < 10000, \"too many iterations\");\n    \n    // Now traverse the children of the current (possibly updated) node.\n    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n      traverse(child);\n    }\n  } while (shouldRetraverse(node));\n  \n  exitNode(node);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}