{
    "generation": "@SuppressWarnings(\"deprecation\")\nprotected BeanPropertyWriter buildWriter(SerializerProvider prov,\n        BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n        TypeSerializer typeSer, TypeSerializer contentTypeSer,\n        AnnotatedMember am, boolean defaultUseStaticTyping)\n    throws JsonMappingException\n{\n    // Existing code remains unchanged until the NON_DEFAULT case.\n\n    switch (inclusion) {\n    case NON_DEFAULT:\n        if (_useRealPropertyDefaults) {\n            if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n                am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n            }\n            valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);\n        } else {\n            Object defaultValue = getDefaultValue(actualType);\n            valueToSuppress = (defaultValue == null) ? null : defaultValue;\n\n            // NEW LOGIC: if default is not null but is the same as the default, suppress it\n            Object propertyValue = null;\n            try {\n                propertyValue = am.getValue(null);\n            } catch (Exception e) {\n                // Ignore exceptions during value access\n            }\n            // Check if the value equals the default; if so, mark to suppress\n            if (valueToSuppress != null && propertyValue != null && valueToSuppress.equals(propertyValue)) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_DEFAULT;\n            }\n            // Ensure nulls are suppressed\n            suppressNulls = true;\n        }\n        if (valueToSuppress == null) {\n            suppressNulls = true;\n        } else {\n            if (valueToSuppress.getClass().isArray()) {\n                valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n            }\n        }\n        break;\n    // Rest of the code remains the same.",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}