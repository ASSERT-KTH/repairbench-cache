{
    "generation": "    /**\n     * @param contentTypeSer Optional explicit type information serializer\n     *    to use for contained values (only used for properties that are\n     *    of container type)\n     */\n    @SuppressWarnings(\"deprecation\")\n    protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException\n    {\n        // do we have annotation that forces type to use (to declared type or its super type)?\n        JavaType serializationType;\n        try {\n            serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n        } catch (JsonMappingException e) {\n            // 05-May-2019, tatu: Is this actually recoverable? Let's try stricter fail handling\n            //return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());\n             prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());\n             return null; // indicate error\n        }\n\n        // Container types can have separate type serializers for content (value / element) type\n        if (contentTypeSer != null) {\n            /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is\n             *    type information for contents. Should work well (for JAXB case); can be\n             *    revisited if this causes problems.\n             */\n            if (serializationType == null) {\n//                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());\n                serializationType = declaredType;\n            }\n            JavaType ct = serializationType.getContentType();\n            // Not exactly sure why, but this used to occur; better check explicitly:\n            if (ct == null) {\n                 prov.reportBadPropertyDefinition(_beanDesc, propDef,\n                        \"serialization type \"+serializationType+\" has no content\");\n                 return null; // indicate error\n            }\n            serializationType = serializationType.withContentTypeHandler(contentTypeSer);\n            ct = serializationType.getContentType();\n        }\n\n        Object valueToSuppress = null;\n        boolean suppressNulls = false;\n\n        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement\n        JavaType actualType = (serializationType == null) ? declaredType : serializationType;\n        \n        // 17-Aug-2016, tatu: Default inclusion covers global default (for all types), as well\n        //   as type-default for enclosing POJO. What we need, then, is per-type default (if any)\n        //   for declared property type... and finally property annotation overrides\n        JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),\n                _defaultInclusion);\n\n        // property annotation override\n        \n        inclV = inclV.withOverrides(propDef.findInclusion());\n        JsonInclude.Include inclusion = inclV.getValueInclusion();\n\n        if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...\n            inclusion = JsonInclude.Include.ALWAYS;\n        }\n        \n        switch (inclusion) {\n        case NON_DEFAULT:\n            // 16-Oct-2016, tatu: Note: if we can not for some reason create \"default instance\",\n            //    or access property value, revert logic to the case of general/per-property handling,\n            //    so both type-default AND null are to be excluded. (as per [databind#1417])\n            Object obtenuDefault; // rename 'valueToSuppress' temporarily to avoid confusion\n            if (_useRealPropertyDefaults) {\n                Object defaultBean = getDefaultBean();\n                if (defaultBean == null) {\n                    // Fallback: could not get default bean instance\n                    obtenuDefault = getDefaultValue(actualType);\n                    suppressNulls = true; // On fallback, suppress nulls\n                } else {\n                    // Got default bean, try accessing property\n                    try {\n                        if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n                            am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n                        }\n                        obtenuDefault = am.getValue(defaultBean);\n                    } catch (Exception e) {\n                        // Fallback: Exception accessing property\n                         prov.reportBadPropertyDefinition(_beanDesc, propDef,\n                                \"Failed to call default value getter for property '%s' (%s): %s\",\n                                    propDef.getName(), am, e.getMessage());\n                         // indicate error? For now, let's just revert back to static handling\n                         obtenuDefault = getDefaultValue(actualType);\n                         suppressNulls = true; // On fallback, suppress nulls\n                    }\n                }\n            } else {\n                // Not using real property defaults\n                obtenuDefault = getDefaultValue(actualType);\n                suppressNulls = true; // Suppress nulls when using static defaults only\n            }\n\n            // Now, set the final valueToSuppress and check null suppression\n            if (obtenuDefault == null) {\n                suppressNulls = true;\n                // valueToSuppress remains null\n            } else {\n                valueToSuppress = obtenuDefault;\n                // But what if default is non-null, but we still want null suppression?\n                // Need to check the original 'suppressNulls' flag determined by fallback logic\n                if (!suppressNulls) { // if not already set by fallback logic...\n                    // suppressNulls = false; // already default\n                }\n                // Also: handle array comparison wrapper?\n                if (obtenuDefault.getClass().isArray()) {\n                    valueToSuppress = ArrayBuilders.getArrayComparator(obtenuDefault);\n                }\n            }\n            break; // End NON_DEFAULT\n\n        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals\n            // always suppress nulls\n            suppressNulls = true;\n            // and for referential types, also \"empty\", which in their case means \"absent\"\n            if (actualType.isReferenceType()) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        case NON_EMPTY:\n            // always suppress nulls\n            suppressNulls = true;\n            // but possibly also 'empty' values:\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            break;\n        case NON_NULL:\n            suppressNulls = true;\n            // fall through\n        case ALWAYS: // default\n        default:\n            // we may still want to suppress empty collections, as per [JACKSON-254]:\n            if (actualType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        }\n        // Error reporting (earlier checks might return null)\n        if (prov.isReportingErrors() && (serializationType == null) && (contentTypeSer != null)) {\n            return null; // something went wrong\n        }\n\n        BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n                am, _beanDesc.getClassAnnotations(), declaredType,\n                ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n\n        // How about custom null serializer?\n        Object serDef = _annotationIntrospector.findNullSerializer(am);\n        if (serDef != null) {\n            bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n        }\n        // And then, handling of unwrapping\n        NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n        if (unwrapper != null) {\n            bpw = bpw.unwrappingWriter(unwrapper);\n        }\n        return bpw;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}