{
    "generation": "@SuppressWarnings(\"deprecation\")\nprotected BeanPropertyWriter buildWriter(SerializerProvider prov,\n        BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n        TypeSerializer typeSer, TypeSerializer contentTypeSer,\n        AnnotatedMember am, boolean defaultUseStaticTyping)\n    throws JsonMappingException\n{\n    // do we have annotation that forces type to use (to declared type or its super type)?\n    JavaType serializationType;\n    try {\n        serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n    } catch (JsonMappingException e) {\n        return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());\n    }\n\n    // Container types can have separate type serializers for content (value / element) type\n    if (contentTypeSer != null) {\n        if (serializationType == null) {\n            serializationType = declaredType;\n        }\n        JavaType ct = serializationType.getContentType();\n        if (ct == null) {\n            prov.reportBadPropertyDefinition(_beanDesc, propDef,\n                    \"serialization type \"+serializationType+\" has no content\");\n        }\n        serializationType = serializationType.withContentTypeHandler(contentTypeSer);\n        ct = serializationType.getContentType();\n    }\n\n    Object valueToSuppress = null;\n    boolean suppressNulls = false;\n\n    // consider type refinements\n    JavaType actualType = (serializationType == null) ? declaredType : serializationType;\n\n    // determine inclusion (global default + per\u2010type default + per\u2010property override)\n    JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),\n            _defaultInclusion);\n    inclV = inclV.withOverrides(propDef.findInclusion());\n    JsonInclude.Include inclusion = inclV.getValueInclusion();\n    if (inclusion == JsonInclude.Include.USE_DEFAULTS) {\n        inclusion = JsonInclude.Include.ALWAYS;\n    }\n\n    switch (inclusion) {\n    case NON_DEFAULT:\n        // try to use real POJO default instance; if that fails, fall back to type\u2010default\n        if (_useRealPropertyDefaults) {\n            if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n                am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n            }\n            Object defaultBeanValue;\n            try {\n                defaultBeanValue = getPropertyDefaultValue(propDef.getName(), am, actualType);\n            } catch (Exception e) {\n                defaultBeanValue = null;\n            }\n            if (defaultBeanValue != null) {\n                valueToSuppress = defaultBeanValue;\n            } else {\n                // fallback: suppress both nulls and the type\u2010default value\n                valueToSuppress = getDefaultValue(actualType);\n                suppressNulls = true;\n            }\n        } else {\n            // legacy: suppress both nulls and the type\u2010default value\n            valueToSuppress = getDefaultValue(actualType);\n            suppressNulls = true;\n        }\n        if (valueToSuppress != null && valueToSuppress.getClass().isArray()) {\n            valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n        }\n        break;\n\n    case NON_ABSENT:\n        suppressNulls = true;\n        if (actualType.isReferenceType()) {\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n        }\n        break;\n\n    case NON_EMPTY:\n        suppressNulls = true;\n        valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n        break;\n\n    case NON_NULL:\n        suppressNulls = true;\n        // fall through\n    case ALWAYS:\n    default:\n        if (actualType.isContainerType()\n                && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n        }\n        break;\n    }\n\n    BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n            am, _beanDesc.getClassAnnotations(), declaredType,\n            ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n\n    // custom null serializer?\n    Object serDef = _annotationIntrospector.findNullSerializer(am);\n    if (serDef != null) {\n        bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n    }\n\n    // unwrapping?\n    NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper != null) {\n        bpw = bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}