{
    "generation": "    /**\n     * @param contentTypeSer Optional explicit type information serializer\n     *    to use for contained values (only used for properties that are\n     *    of container type)\n     */\n    @SuppressWarnings(\"deprecation\")\n    protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException\n    {\n        // do we have annotation that forces type to use (to declared type or its super type)?\n        JavaType serializationType;\n        try {\n            serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n        } catch (JsonMappingException e) {\n            // XXX: maybe specify property name?\n            // 28-May-2018, tatu: As per [databind#2045], need to avoid NPE if `propDef == null`\n            if (propDef == null) {\n                return prov.reportBadDefinition(declaredType, e.getMessage());\n            }\n            return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());\n        }\n\n        // Container types can have separate type serializers for content (value / element) type\n        if (contentTypeSer != null) {\n            /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is\n             *    type information for contents. Should work well (for JAXB case); can be\n             *    revisited if this causes problems.\n             */\n            if (serializationType == null) {\n//                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());\n                serializationType = declaredType;\n            }\n            JavaType ct = serializationType.getContentType();\n            // Not exactly sure why, but this used to occur; better check explicitly:\n            if (ct == null) {\n                // 03-Aug-2016, tatu: Let's allow this for non-container types, needed for cases like\n                //   [databind#1351] where annotation forces use of abstract type. May need to refine?\n                 // 13-Oct-2016, tatu: As per [databind#1417], this is probably too lax an allowal,\n                 //   made stricter.\n//                if (!declaredType.isContainerType()) { // related to [databind#1351] ?\n//                     ; // as per comment above, do accept\n//                } else {\n                    return prov.reportBadPropertyDefinition(_beanDesc, propDef,\n                            \"serialization type \"+serializationType+\" has no content\");\n//                }\n            } else { // only apply on container types, usually(?)\n                 serializationType = serializationType.withContentTypeHandler(contentTypeSer);\n                 ct = serializationType.getContentType();\n            }\n        }\n\n        Object valueToSuppress = null;\n        boolean suppressNulls = false;\n\n        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement\n        JavaType actualType = (serializationType == null) ? declaredType : serializationType;\n        \n        // 17-Aug-2016, tatu: Default inclusion covers global default (for all types), as well\n        //   as type-default for enclosing POJO. What we need, then, is per-type default (if any)\n        //   for declared property type... and finally property annotation overrides\n        JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),\n                _defaultInclusion);\n\n        // property annotation override\n        \n        inclV = inclV.withOverrides(propDef.findInclusion());\n        JsonInclude.Include inclusion = inclV.getValueInclusion();\n\n        if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...\n            inclusion = JsonInclude.Include.ALWAYS;\n        }\n        \n        switch (inclusion) {\n        case NON_DEFAULT:\n            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,\n            //    so that if enclosing class has this, we may need to access values of property,\n            //    whereas for global defaults OR per-property overrides, we have more\n            //    static definition. Sigh.\n            // First: case of class/type specifying it; try to find POJO property defaults\n\n            // 16-Oct-2016, tatu: Note: if we can not for some reason create \"default instance\",\n            //    revert logic to the case of general/per-property handling, so both\n            //    type-default AND null are to be excluded.\n            //    (as per [databind#1417]\n            if (_useRealPropertyDefaults) {\n                 // 07-Sep-2016, tatu: may also need to front-load access forcing now\n                 // 23-Jul-2018, tatu: [databind#1998]: During build phase, CAN_OVERRIDE_ACCESS_MODIFIERS\n                 //    must be forced\n                 final boolean canOverrideAcc = _config.canOverrideAccessModifiers();\n                 final boolean forceAccess = canOverrideAcc\n                         && _config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS);\n                if (canOverrideAcc) {\n                    am.fixAccess(forceAccess);\n                }\n                // NOTE: needs to be called BEFORE determining `valueToSuppress`, to force access\n                // to check exceptions etc\n                Object bean;\n                try {\n                    bean = (_defaultBean == null) ? null : _defaultBean.value;\n                } catch (Exception e) {\n                    return prov.reportBadDefinition(_beanDesc.getType(),\n                            String.format(\"Failed to access default instance of type %s to check for default value of property '%s': %s\",\n                                    _beanDesc.getType(), propDef.getName(), e.getMessage()),\n                            e);\n                }\n                // If we couldn't obtain the default bean, fall back to static default for type\n                // which is what [databind#1417] calls for\n                if (bean == null) {\n                     valueToSuppress = getDefaultValue(actualType);\n                     suppressNulls = true;\n                } else {\n                    valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, bean);\n                }\n            } else {\n                // When not using \"real\" defaults, find statically defined one for type\n                valueToSuppress = getDefaultValue(actualType);\n                // [databind#1351] / [databind#1417]: Should not force null-suppression here\n//                suppressNulls = true; // NO! Let below check handle it\n            }\n\n            // And if default value is null, we assume explicit handling for nulls is needed\n            // (we don't represent null default value with 'valueToSuppress')\n            if (valueToSuppress == null) {\n                suppressNulls = true;\n            } else {\n                if (valueToSuppress.getClass().isArray()) {\n                    valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n                }\n            }\n            break;\n        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals\n            // always suppress nulls\n            suppressNulls = true;\n            // and for referential types, also \"empty\", which in their case means \"absent\"\n            if (actualType.isReferenceType()) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        case NON_EMPTY:\n            // always suppress nulls\n            suppressNulls = true;\n            // but possibly also 'empty' values:\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            break;\n        case NON_NULL:\n            suppressNulls = true;\n            // fall through\n        case ALWAYS: // default\n        default:\n            // we may still want to suppress empty collections, as per [JACKSON-254]:\n            // 08-Nov-2015, tatu: Except if based on concrete type, should apply?\n            // 21-May-2016, tatu: Also, should not block potentially custom check for emptiness\n            //    via `JsonSerializer.isEmpty()`...\n             // Let's do this: only check for empty containers if property type is container OR content type is specified.\n            // 28-Oct-2016, tatu: As per [databind#1402], need to allow underlying serializer\n            //    to indicate emptiness, regardless of declared type. The most straightforward\n            //     way is to simply use marker value...\n            if (actualType.isContainerType() // probably redundant check; contentType check is enough?\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        }\n\n        // 21-Aug-2018, tatu: Crap. Need access to `ConfigOverride` for property...\n        // TODO: Fix me! Probably need to pass from `BasicBeanDescription`?\n        // Needs to be done AFTER inclusion check, but BEFORE BeanPropertyWriter is created.\n        /*\n        Boolean propUseStatic = null;\n        PropertyMetadata md = propDef.getMetadata();\n        if (md != null) {\n             propUseStatic = md.getMergeInfo().useStatic;\n        }\n        if (propUseStatic == null) {\n             ConfigOverride co = _config.findConfigOverride(actualType.getRawClass());\n             propUseStatic = co.getMergeInfo().useStatic;\n        }\n        */\n        \n        BeanPropertyWriter bpw = _constructWriter(prov, propDef, am, declaredType,\n                ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n\n        // How about custom null serializer?\n        Object serDef = _annotationIntrospector.findNullSerializer(am);\n        if (serDef != null) {\n            bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n        }\n        // And then, handling of unwrapping\n        NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n        if (unwrapper != null) {\n            bpw = bpw.unwrappingWriter(unwrapper);\n        }\n        return bpw;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}