{
    "generation": "@SuppressWarnings(\"deprecation\")\nprotected BeanPropertyWriter buildWriter(SerializerProvider prov,\n        BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n        TypeSerializer typeSer, TypeSerializer contentTypeSer,\n        AnnotatedMember am, boolean defaultUseStaticTyping)\n    throws JsonMappingException\n{\n    // do we have annotation that forces type to use (to declared type or its super type)?\n    JavaType serializationType;\n    try {\n        serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n    } catch (JsonMappingException e) {\n        return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());\n    }\n\n    // Container types can have separate type serializers for content (value / element) type\n    if (contentTypeSer != null) {\n        if (serializationType == null) {\n            serializationType = declaredType;\n        }\n        JavaType ct = serializationType.getContentType();\n        if (ct == null) {\n            prov.reportBadPropertyDefinition(_beanDesc, propDef,\n                    \"serialization type \"+serializationType+\" has no content\");\n        }\n        serializationType = serializationType.withContentTypeHandler(contentTypeSer);\n    }\n\n    Object valueToSuppress = null;\n    boolean suppressNulls = false;\n\n    // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement\n    JavaType actualType = (serializationType == null) ? declaredType : serializationType;\n\n    // 17-Aug-2016, tatu: Default inclusion covers global default (for all types), as well\n    //   as type-default for enclosing POJO. What we need, then, is per-type default (if any)\n    //   for declared property type... and finally property annotation overrides\n    JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(),\n            _defaultInclusion);\n\n    // property annotation override\n    inclV = inclV.withOverrides(propDef.findInclusion());\n    JsonInclude.Include inclusion = inclV.getValueInclusion();\n\n    if (inclusion == JsonInclude.Include.USE_DEFAULTS) {\n        inclusion = JsonInclude.Include.ALWAYS;\n    }\n\n    switch (inclusion) {\n    case NON_DEFAULT:\n        // try to determine the \"default instance\" value, if possible\n        if (_useRealPropertyDefaults) {\n            if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n                am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n            }\n            valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);\n        } else {\n            // fallback: use type-default (primitive 0, null for references)\n            valueToSuppress = getDefaultValue(actualType);\n        }\n        // handle arrays by comparator\n        if (valueToSuppress != null && valueToSuppress.getClass().isArray()) {\n            valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);\n        }\n        // always suppress nulls under NON_DEFAULT\n        suppressNulls = true;\n        break;\n    case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals\n        suppressNulls = true;\n        if (actualType.isReferenceType()) {\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n        }\n        break;\n    case NON_EMPTY:\n        suppressNulls = true;\n        valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n        break;\n    case NON_NULL:\n        suppressNulls = true;\n        // fall through to ALWAYS/default for container-empty control\n    case ALWAYS:\n    default:\n        if (actualType.isContainerType()\n                && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n        }\n        break;\n    }\n\n    BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n            am, _beanDesc.getClassAnnotations(), declaredType,\n            ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n\n    // custom null serializer?\n    Object serDef = _annotationIntrospector.findNullSerializer(am);\n    if (serDef != null) {\n        bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n    }\n    // unwrapping?\n    NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper != null) {\n        bpw = bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}