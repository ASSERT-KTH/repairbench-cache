{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        // Reset min/max Y values, they will be recalculated as items are added\n        copy.minY = Double.NaN;\n        copy.maxY = Double.NaN;\n        if (this.data.size() > 0) {\n            // Ensure the index doesn't exceed the bounds of the original data\n            if (start >= this.data.size()) {\n                 // This indicates an issue with the requested start index,\n                 // or the series is smaller than expected. Returning an empty series might be one option,\n                 // but based on typical behavior, throwing might be better if start is invalid.\n                 // However, let's adhere to the original loop structure but prevent IndexOutOfBounds.\n                 // If start is valid but >= size, the loop condition will handle it correctly.\n                 // If end is >= size, we need to adjust it.\n                 end = Math.min(end, this.data.size() - 1); // Adjust end to avoid IndexOutOfBounds\n            }\n\n            // Check if the adjusted range is valid before proceeding\n            if (start <= end) {\n                for (int index = start; index <= end; index++) {\n                    // Check if the index is still valid (e.g., if start >= size initially)\n                    // This check is slightly redundant given the adjustments above but adds safety.\n                    if (index < this.data.size()) {\n                        TimeSeriesDataItem item\n                                = (TimeSeriesDataItem) this.data.get(index);\n                        TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                        try {\n                            copy.add(clone); // add will update minY and maxY correctly\n                        }\n                        catch (SeriesException e) {\n                            // This should not happen normally when copying items\n                            // to a fresh series, but we keep the original error handling.\n                            e.printStackTrace();\n                        }\n                    }\n                }\n            }\n        }\n        return copy;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}