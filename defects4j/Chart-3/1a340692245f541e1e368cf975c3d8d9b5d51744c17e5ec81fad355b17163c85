{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n\n        // FIX: Reset minY and maxY (and potentially other aggregate statistics\n        // like minX, maxX, cached range/domain objects) that were shallow-copied\n        // from the original series. They should reflect the new, empty series\n        // state before new data items are added.\n        // Assuming TimeSeries uses Double.NaN as initial values for an empty series.\n        copy.minY = Double.NaN;\n        copy.maxY = Double.NaN;\n        // Depending on TimeSeries class structure, similar resets might be needed for:\n        // copy.minX = Double.NaN;\n        // copy.maxX = Double.NaN;\n        // copy.range = null;\n        // copy.domain = null;\n\n\n        if (this.data.size() > 0) {\n            // Ensure 'end' index does not exceed the actual bounds of the series.\n            // If 'end' is greater than or equal to this.data.size(), get(index)\n            // would throw IndexOutOfBoundsException. This clamps it to the last valid index.\n            int seriesLastIndex = this.data.size() - 1;\n            int effectiveEnd = Math.min(end, seriesLastIndex);\n\n            // If start is beyond the series last index, no data will be copied.\n            // The loop condition handles this implicitly, as 'index' won't be <= effectiveEnd.\n            if (start <= effectiveEnd) { // Only iterate if there's a valid range to copy\n                for (int index = start; index <= effectiveEnd; index++) {\n                    TimeSeriesDataItem item\n                            = (TimeSeriesDataItem) this.data.get(index);\n                    TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                    try {\n                        copy.add(clone);\n                    }\n                    catch (SeriesException e) {\n                        // The original code prints stack trace. For production,\n                        // it might be better to rethrow or log more formally.\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        return copy;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}