{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n\n        copy.data = new java.util.ArrayList();\n        // Reset min/max Y values so they are recalculated correctly for the subset\n        // The add() method called in the loop will update these values.\n        copy.minY = Double.NaN;\n        copy.maxY = Double.NaN;\n\n        if (this.data.size() > 0) {\n            // Ensure the start index is within the bounds of the data list\n            if (start < this.data.size()) {\n                // Ensure the end index doesn't exceed the list size\n                int endIndex = Math.min(end, this.data.size() - 1);\n                // Check if the calculated range is valid before looping\n                if (start <= endIndex) {\n                    for (int index = start; index <= endIndex; index++) {\n                        TimeSeriesDataItem item\n                                = (TimeSeriesDataItem) this.data.get(index);\n                        TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                        try {\n                            copy.add(clone);\n                        }\n                        catch (SeriesException e) {\n                            // This should not happen, but retain original handling\n                            e.printStackTrace();\n                        }\n                    }\n                }\n            }\n        }\n        return copy;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}