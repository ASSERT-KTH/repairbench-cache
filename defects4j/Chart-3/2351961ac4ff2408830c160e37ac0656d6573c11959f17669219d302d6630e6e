{
    "generation": "/**\n * Creates a new timeseries by copying a subset of the data in this time\n * series.\n *\n * @param start  the index of the first time period to copy.\n * @param end  the index of the last time period to copy.\n *\n * @return A series containing a copy of this times series from start until\n *         end.\n *\n * @throws CloneNotSupportedException if there is a cloning problem.\n */\npublic TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    // shallow\u2010clone the series (copies metadata, etc.)\n    TimeSeries copy = (TimeSeries) super.clone();\n    // replace the data list with a fresh one and clear the cached bounds\n    copy.data = new java.util.ArrayList();\n    copy.minY = Double.NaN;\n    copy.maxY = Double.NaN;\n    copy.minIndex = -1;\n    copy.maxIndex = -1;\n    // now copy the requested items and let add(...) recompute min/max\n    for (int i = start; i <= end && i < this.data.size(); i++) {\n        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);\n        TimeSeriesDataItem cloned = (TimeSeriesDataItem) item.clone();\n        try {\n            copy.add(cloned);\n        }\n        catch (SeriesException e) {\n            // should not happen for freshly\u2010cloned items\n            e.printStackTrace();\n        }\n    }\n    return copy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}