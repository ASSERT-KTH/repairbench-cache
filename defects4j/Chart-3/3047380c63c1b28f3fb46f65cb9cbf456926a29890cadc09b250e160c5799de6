{
    "generation": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    // Recalculate min and max for the new TimeSeries\n    if (!copy.data.isEmpty()) {\n        double min = Double.NaN;\n        double max = Double.NaN;\n        for (TimeSeriesDataItem item : copy.data) {\n            double value = item.getValue();\n            if (Double.isNaN(min)) {\n                min = value;\n            } else {\n                min = Math.min(min, value);\n            }\n            if (Double.isNaN(max)) {\n                max = value;\n            } else {\n                max = Math.max(max, value);\n            }\n        }\n        copy.minY = min;\n        copy.maxY = max;\n    } else {\n        copy.minY = null;\n        copy.maxY = null;\n    }\n    return copy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}