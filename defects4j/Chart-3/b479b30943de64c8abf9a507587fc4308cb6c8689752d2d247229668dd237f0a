{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList<>();\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n                TimeSeriesDataItem item\n                        = (TimeSeriesDataItem) this.data.get(index);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        // Update minY and maxY based on the copied data\n        copy.updateMinMax();\n        return copy;\n    }\n\n    // Assuming there is a method to update minY and maxY in the TimeSeries class\n    private void updateMinMax() {\n        if (this.data.isEmpty()) {\n            this.minY = Double.NaN;\n            this.maxY = Double.NaN;\n        } else {\n            this.minY = Double.MAX_VALUE;\n            this.maxY = Double.MIN_VALUE;\n            for (Object item : this.data) {\n                TimeSeriesDataItem dataItem = (TimeSeriesDataItem) item;\n                double value = dataItem.getValue().doubleValue();\n                if (value < this.minY) {\n                    this.minY = value;\n                }\n                if (value > this.maxY) {\n                    this.maxY = value;\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}