{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     * @throws IllegalArgumentException if {@code start} or {@code end} are\n     *                                  out of bounds or {@code end} < {@code start}.\n     */\n    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        // Ensure that the requested range is within the bounds of the current data.\n        // If the series is empty, and start=0, end=-1 (empty range), this condition\n        // should not prevent copying an empty series. However, the existing logic\n        // for handling start/end implicitly relies on this.\n        // If data.size() is 0, then any start>=0, end>=0 will mean get(index) is out of bounds.\n        // For a new TimeSeries, the loop will simply not run if this.data.size() is 0.\n        // Thus, we check if the requested end index is out of bounds *relative to the existing data*.\n        if (this.data.size() > 0 && end >= this.data.size()) {\n            throw new IllegalArgumentException(\"The 'end' index (\" + end\n                    + \") is out of bounds for a series with \" + this.data.size()\n                    + \" items.\");\n        }\n\n        // The original code used super.clone() which performs a shallow copy,\n        // including copying the min/max Y values from the original series.\n        // While copy.data was reset, the min/max Y fields were not, and the\n        // add method would only expand the range, not shrink it.\n        // To fix this, we create a brand new TimeSeries object. This ensures\n        // that its internal min/max Y bounds are correctly initialized (e.g., to NaN)\n        // and will be re-calculated from scratch as items are added.\n        // Assuming TimeSeries has a constructor that takes the key (name) and\n        // that this constructor initializes internal fields like minY/maxY correctly.\n        TimeSeries copy = new TimeSeries(getKey());\n\n        if (this.data.size() > 0) {\n            for (int index = start; index <= end; index++) {\n                TimeSeriesDataItem item\n                        = (TimeSeriesDataItem) this.data.get(index);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone); // This should now correctly update min/max Y for the new series\n                }\n                catch (SeriesException e) {\n                    // This catch block usually indicates a duplicate time period,\n                    // which shouldn't happen when copying unique items.\n                    // printStackTrace() is usually not good practice in production code,\n                    // but we maintain the original behavior if it's part of the design.\n                    e.printStackTrace();\n                }\n            }\n        }\n        return copy;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}