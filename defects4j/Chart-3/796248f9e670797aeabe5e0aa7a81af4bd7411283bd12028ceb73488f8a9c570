{
    "generation": "/**\n * Creates a new timeseries by copying a subset of the data in this time\n * series.\n *\n * @param start  the index of the first time period to copy.\n * @param end    the index of the last time period to copy.\n *\n * @return A series containing a copy of this time series from start until\n *         end.\n *\n * @throws CloneNotSupportedException if there is a cloning problem.\n */\npublic TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n\n    // clone the series (copies metadata and bounds, but we will reset data and value bounds)\n    TimeSeries copy = (TimeSeries) super.clone();\n\n    // reset the data storage\n    copy.data = new java.util.ArrayList();\n\n    // reset the stored y\u2010bounds so they will be recalculated on add()\n    copy.minimumValue = Double.NaN;\n    copy.maximumValue = Double.NaN;\n\n    // copy the requested items\n    for (int index = start; index <= end; index++) {\n        TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n        TimeSeriesDataItem clonedItem = (TimeSeriesDataItem) item.clone();\n        try {\n            copy.add(clonedItem);\n        }\n        catch (SeriesException e) {\n            // should not happen in a straight copy\n            e.printStackTrace();\n        }\n    }\n    return copy;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}