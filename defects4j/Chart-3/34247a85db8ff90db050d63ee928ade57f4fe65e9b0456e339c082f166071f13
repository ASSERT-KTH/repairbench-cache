{
    "generation": "    /**\n     * Creates a new timeseries by copying a subset of the data in this time\n     * series.\n     *\n     * @param start  the index of the first time period to copy.\n     * @param end  the index of the last time period to copy.\n     *\n     * @return A series containing a copy of this times series from start until\n     *         end.\n     *\n     * @throws CloneNotSupportedException if there is a cloning problem.\n     */\n    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        // Ensure 'end' index is within the bounds of the current data.\n        if (end >= this.data.size()) {\n            throw new IllegalArgumentException(\"The 'end' index specified (\"\n                    + end + \") is greater than or equal to the number of items in the series (\"\n                    + this.data.size() + \").\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n\n        // BUG FIX: Reset the min/max X and Y values.\n        // When super.clone() is called, it performs a shallow copy,\n        // which includes the minX, maxX, minY, and maxY values from\n        // the original TimeSeries. For a subset copy, these values\n        // need to be recalculated based on the new data items.\n        // Resetting them to their initial sentinel values ensures that\n        // the add() method correctly updates them for the copied subset.\n        copy.minX = Double.POSITIVE_INFINITY;\n        copy.maxX = Double.NEGATIVE_INFINITY;\n        copy.minY = Double.POSITIVE_INFINITY;\n        copy.maxY = Double.NEGATIVE_INFINITY;\n\n        // The original `if (this.data.size() > 0)` check can be removed\n        // because the preceding bounds checks on `start` and `end` implicitly\n        // handle cases where `this.data.size()` might be 0 or when the range is invalid.\n        // If data.size() is 0, `end >= this.data.size()` will throw an exception for any non-negative `end`.\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n        return copy;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}