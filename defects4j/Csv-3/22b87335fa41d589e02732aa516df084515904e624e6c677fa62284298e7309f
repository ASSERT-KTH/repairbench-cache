{
    "generation": "int readEscape() throws IOException {\n    // the escape char has just been read (normally a backslash or configured escape)\n    // mark so we can push back the next char on unknown escapes\n    in.mark(1);\n    final int c = in.read();\n    switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case CR:\n        case LF:\n        case FF:\n        case TAB:\n        case BACKSPACE:\n            // escaped a raw control char, return it\n            return c;\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // allow escaping the escape char itself (e.g. \"\\\\\" -> \"\\\")\n            if (c == escape) {\n                return c;\n            }\n            // unknown escape: push back and emit the escape char literally\n            in.reset();\n            return escape;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}