{
    "generation": "/**\n * Handle an escape sequence.\n * The current character must be the escape character.\n * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n * on the input stream.\n *\n * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following\n *         the escape is invalid.\n * @throws IOException if there is a problem reading the stream or the end of stream\n *                     is detected: the escape character is not allowed at end of stream\n */\nint readEscape() throws IOException {\n    // mark so we can \"un-read\" one character if it's not a recognized escape\n    in.mark(1);\n    final int c = in.read();\n    switch (c) {\n        // standard escapes\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        // literal control characters\n        case CR:\n        case LF:\n        case FF:\n        case TAB:\n        case BACKSPACE:\n            return c;\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // meta-characters that we do want to un-escape\n            if (c == delimiter || c == quote || c == escape) {\n                return c;\n            }\n            // unknown escape: push back the character and emit the escape itself\n            in.reset();\n            return escape;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}