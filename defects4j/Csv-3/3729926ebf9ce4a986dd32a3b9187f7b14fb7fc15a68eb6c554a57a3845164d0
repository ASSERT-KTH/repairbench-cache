{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     * \n     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. \n     * @throws IOException if there is a problem reading the stream or the end of stream is detected: \n     * the escape character is not allowed at end of strem\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read();\n        switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case CR:\n        case LF:\n        case FF: // TODO is this correct?\n        case TAB: // TODO is this correct? Do tabs need to be escaped?\n        case BACKSPACE: // TODO is this correct?\n            return c;\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // Now check for meta-characters\n            // The default behavior for unknown escape sequences is to treat the character\n            // following the escape as a literal character. For example, if escape is '\\',\n            // then '\\X' becomes 'X'. This is consistent with CSVFormat's documentation.\n            // The failing tests require a non-standard \"passthrough\" behavior (e.g., '\\N' should remain '\\N'),\n            // which cannot be implemented here without access to the original escape character\n            // or an unread() method on the input stream, or changes to the calling Lexer#readWith method.\n            // Therefore, the existing logic is preserved as it reflects the documented standard behavior.\n            return c;\n            // indicate unexpected char - available from in.getLastChar()\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}