{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     * \n     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. \n     * @throws IOException if there is a problem reading the stream or the end of stream is detected: \n     * the escape character is not allowed at end of strem\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read();\n        switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case CR:\n        case LF:\n        case FF:\n        case TAB:\n        case BACKSPACE:\n            return c;\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // The escape character (format.getEscapeCharacter()) has already been consumed.\n            // 'c' is the character immediately following the escape character.\n\n            // If 'c' is the escape character itself, it means the escape character was escaped.\n            // In this case, we return 'c' as a literal (e.g., \"//\" becomes \"/\").\n            if (c == format.getEscapeCharacter()) {\n                return c;\n            } else {\n                // For any other character 'c' that is not a recognized special escape sequence\n                // (like 'r', 'n', 't', 'b', 'f') and is not the escape character itself,\n                // the escape character is treated as a literal character, and 'c' is also\n                // treated as a literal.\n                // To achieve this, we \"unread\" 'c' so it can be read as a normal character\n                // in the next read operation.\n                in.unread(c);\n                // And we return the escape character itself, which was the character that\n                // triggered this readEscape() call. This ensures the escape character\n                // is preserved in the output.\n                return format.getEscapeCharacter();\n            }\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}