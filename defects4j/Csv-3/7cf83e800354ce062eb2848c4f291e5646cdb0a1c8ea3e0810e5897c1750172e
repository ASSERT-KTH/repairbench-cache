{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     * \n     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. \n     * @throws IOException if there is a problem reading the stream or the end of stream is detected: \n     * the escape character is not allowed at end of strem\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read();\n        switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // Only decode recognized escape chars. All others (e.g. \\N or \\a) should remain escaped!\n            // So, instead of returning the interpreted char, we return the escape char itself,\n            // and let the rest of the code handle literal escapes accordingly.\n            // Essentially, we want to preserve the escape character for unknown escapes.\n            // If using a backslash as escape char, this would append the backslash (already read) and the next char.\n            // To do so, we need to signal to the caller that this char should be treated as normal\n            // (aka: not consumed). But the code expects int return and lastChar unread.\n            // Solution: Return c, but the caller should append both escape char and c to result.\n            return c;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}