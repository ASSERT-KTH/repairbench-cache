{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     * \n     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. \n     * @throws IOException if there is a problem reading the stream or the end of stream is detected: \n     * the escape character is not allowed at end of strem\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read();\n        switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case CR:\n        case LF:\n        case FF: // TODO is this correct?\n        case TAB: // TODO is this correct? Do tabs need to be escaped?\n        case BACKSPACE: // TODO is this correct?\n            return c;\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // Special rules: only escape \"known\" chars, otherwise treat as normal char with escape dropped (i.e., return c)\n            // However, if the escape is followed by N (used in MySQL as \\N -> \\N), preserve the escape (i.e., do NOT unescape).\n            // Likewise for unknown chars: preserve the escape\n            if (c == 'N') { // MySQL null literal, preserve escaped form\n                return -1; // signal to caller to treat as normal char pair ('\\', 'N'), i.e., not unescaped\n            }\n            // If c is not one of special recognized sequences, preserve the escape,\n            // i.e., return -1 so the lexer can append the escape and following char verbatim\n            return -1;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}