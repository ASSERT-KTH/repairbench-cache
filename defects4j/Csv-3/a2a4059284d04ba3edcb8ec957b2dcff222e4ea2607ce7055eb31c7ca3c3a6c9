{
    "generation": "/**\n * Handle an escape sequence.\n * The current character must be the escape character.\n * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n * on the input stream.\n * \n * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. \n * @throws IOException if there is a problem reading the stream or the end of stream is detected: \n * the escape character is not allowed at end of strem\n */\nint readEscape() throws IOException {\n    // the escape char has just been read (normally a backslash)\n    final int c = in.read();\n    switch (c) {\n    case 'r':\n        return CR;\n    case 'n':\n        return LF;\n    case 't':\n        return TAB;\n    case 'b':\n        return BACKSPACE;\n    case 'f':\n        return FF;\n    case CR:\n    case LF:\n    case FF:\n    case TAB:\n    case BACKSPACE:\n        return c;\n    case END_OF_STREAM:\n        throw new IOException(\"EOF whilst processing escape sequence\");\n    default:\n        // For any other character, including unrecognized escape seq,\n        // return the escape char and then the char itself.\n        // This allows things like \\N and \\a to be treated as literal (e.g., backslash + N/a).\n        // This is according to CSVFormat.\n        // So, put back c as last char and return the escape character itself.\n        if (c != -1) {\n            in.setLastChar(c); // Push c back to be read next time\n        }\n        // Return the escape char as the literal char that was just escaped\n        // (e.g. '\\' if escape character is '\\'), so first the escape char\n        // then on next read, the actual char (N, a, etc).\n        return escape;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}