{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     * \n     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. \n     * @throws IOException if there is a problem reading the stream or the end of stream is detected: \n     * the escape character is not allowed at end of strem\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read();\n        switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case CR:\n        case LF:\n        case FF: // TODO is this correct? (Kept as is, as it's consistent with escaping literal special characters)\n        case TAB: // TODO is this correct? Do tabs need to be escaped? (Kept as is)\n        case BACKSPACE: // TODO is this correct? (Kept as is)\n            return c; // If the char after escape is a control char, return the char itself.\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // Check if the character is the escape character itself, the quote character, or the delimiter.\n            // If so, return it literally (e.g., \\\\ -> \\, \\\" -> \", \\, -> ,)\n            if (c == format.getEscapeCharacter()) {\n                return c;\n            }\n            if (format.isQuoteSet() && c == format.getQuoteCharacter()) {\n                return c;\n            }\n            if (format.isDelimiterSet() && c == format.getDelimiter()) {\n                return c;\n            }\n            \n            // For any other character (e.g., \\N, \\a), the tests imply that the escape character\n            // should *not* have been consumed. To achieve this, push the character 'c' back\n            // into the stream and return the escape character itself. The lexer will then\n            // process the escape character, and 'c' will be processed in the next read.\n            in.unread(c);\n            return format.getEscapeCharacter();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}