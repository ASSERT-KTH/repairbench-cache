{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     * \n     * @return the unescaped character (as an int) or the original escape sequence if not a recognized escape sequence.\n     * @throws IOException if there is a problem reading the stream or the end of stream is detected: \n     * the escape character is not allowed at end of stream\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read();\n        switch (c) {\n            case 'r':\n                return CR;\n            case 'n':\n                return LF;\n            case 't':\n                return TAB;\n            case 'b':\n                return BACKSPACE;\n            case 'f':\n                return FF;\n            case 'N': // MySQL null value escape sequence\n                return '\\\\'; // return the escape character and let the caller handle the 'N'\n            default:\n                // If not a recognized escape sequence, return the original escape character followed by the current character\n                in.getLastChar(); // peek at the last character\n                return '\\\\'; // return the escape character\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}