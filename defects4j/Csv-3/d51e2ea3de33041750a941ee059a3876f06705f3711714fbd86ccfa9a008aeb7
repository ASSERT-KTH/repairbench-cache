{
    "generation": "/**\n * Handle an escape sequence.\n * The current character must be the escape character.\n * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n * on the input stream.\n * \n * @return the unescaped character (as an int) or throws {@link IOException} if\n *         the escape is at end of stream.\n * @throws IOException if there is a problem reading the stream or the escape\n *         character appears at end of stream.\n */\nint readEscape() throws IOException {\n    // the escape char has just been read (normally a backslash)\n    final int c = in.read();\n    // not allowed at end of stream\n    if (c == END_OF_STREAM) {\n        throw new IOException(\"EOF whilst processing escape sequence\");\n    }\n    // escaped escape, delimiter or quote \u2192 literal output\n    if (c == escapeChar || c == delimiter || c == quoteChar) {\n        return c;\n    }\n    // standard Java-like escapes\n    switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        // escaped control\u2010characters (e.g. \"\\\\\\n\" \u2192 '\\n')\n        case CR:\n        case LF:\n        case FF:\n        case TAB:\n        case BACKSPACE:\n            return c;\n        default:\n            // unknown escape \u2192 output the escape char literally,\n            // and push back this char so it will be re-read normally\n            in.unread(c);\n            return escapeChar;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}