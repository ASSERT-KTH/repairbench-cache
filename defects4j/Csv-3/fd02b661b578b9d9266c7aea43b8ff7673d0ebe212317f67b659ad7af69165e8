{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     *\n     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid.\n     * @throws IOException if there is a problem reading the stream or the end of stream is detected:\n     * the escape character is not allowed at end of strem\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read(); // Read the character following the escape character\n\n        switch (c) {\n        // Standard C-style escapes\n        case 'r':\n            return CR; // Carriage return\n        case 'n':\n            return LF; // Line feed\n        case 't':\n            return TAB; // Tab\n        case 'b':\n            return BACKSPACE; // Backspace\n        case 'f':\n            return FF; // Form feed\n\n        // Handling EOF after escape character\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n\n        // Default case: treat the character literally.\n        // This handles escaping of meta-characters (like the escape char itself, delimiter, quote)\n        // and any other character. E.g., '\\\\' -> '\\', '\\,' -> ',', '\\\"' -> '\"', '\\a' -> 'a', '\\N' -> 'N'.\n        // It also handles escaped control characters if they are not explicitly mapped above,\n        // e.g., an input like \\<LF> would return LF.\n        default:\n            return c;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}