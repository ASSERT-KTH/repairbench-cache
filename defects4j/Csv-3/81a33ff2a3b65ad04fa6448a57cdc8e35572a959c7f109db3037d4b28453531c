{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     * \n     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. \n     * @throws IOException if there is a problem reading the stream or the end of stream is detected: \n     * the escape character is not allowed at end of strem\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read();\n        switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case CR:\n        case LF:\n        case FF: // TODO is this correct?\n        case TAB: // TODO is this correct? Do tabs need to be escaped?\n        case BACKSPACE: // TODO is this correct?\n            return c;\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // Now check for meta-characters\n            // If the character is the escape character itself, it should be treated as escaped\n            // e.g., if escape is '\\', then '\\\\' should yield '\\'\n            if (c == this.format.getEscapeCharacter()) {\n                return c;\n            } else {\n                // If it's not a special escape sequence (r,n,t,b,f) or the escape char itself,\n                // then it means the escape char was effectively literal.\n                // For example, in MySQL, \\N is a null value, which should be preserved as \\N.\n                // Or \\a should be preserved as \\a.\n                // To achieve this, push the character 'c' back to the stream,\n                // and return the escape character itself so it gets appended.\n                in.unread(c);\n                return this.format.getEscapeCharacter();\n            }\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}