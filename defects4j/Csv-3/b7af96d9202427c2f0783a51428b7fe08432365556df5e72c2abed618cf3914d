{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     * \n     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. \n     * @throws IOException if there is a problem reading the stream or the end of stream is detected: \n     * the escape character is not allowed at end of strem\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read();\n        switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case CR:\n        case LF:\n        case FF:\n        case TAB:\n        case BACKSPACE:\n            return c; // Escaped control characters unescape to themselves.\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // Check if 'c' is the escape character itself (e.g., in '\\\\' or '//').\n            // This is a common CSV behavior for escaping the escape character.\n            // 'format' is assumed to be an accessible field of the class (CSVLexer).\n            if (format != null && format.isEscapeCharacterSet() && c == format.getEscapeCharacter().charValue()) {\n                return c;\n            }\n            // For any other character (e.g., 'N' in '\\N', or 'a' in '\\a'),\n            // it's not a recognized special escape sequence.\n            // According to the Javadoc: \"return END_OF_STREAM if char following the escape is invalid\".\n            // This assumes the caller (nextToken) will interpret END_OF_STREAM in this context\n            // as \"this is not a predefined escape sequence, treat the original escape char and 'c' as literals\".\n            return END_OF_STREAM;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}