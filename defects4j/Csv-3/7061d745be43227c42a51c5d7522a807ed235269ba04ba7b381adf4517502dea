{
    "generation": "    /**\n     * Handle an escape sequence.\n     * The current character must be the escape character.\n     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}\n     * on the input stream.\n     * \n     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. \n     * @throws IOException if there is a problem reading the stream or the end of stream is detected: \n     * the escape character is not allowed at end of strem\n     */\n    int readEscape() throws IOException {\n        // the escape char has just been read (normally a backslash)\n        final int c = in.read();\n        switch (c) {\n        case 'r':\n            return CR;\n        case 'n':\n            return LF;\n        case 't':\n            return TAB;\n        case 'b':\n            return BACKSPACE;\n        case 'f':\n            return FF;\n        case CR:\n        case LF:\n        case FF:\n        case TAB:\n        case BACKSPACE:\n            return c;\n        case END_OF_STREAM:\n            throw new IOException(\"EOF whilst processing escape sequence\");\n        default:\n            // If the character following the escape is the escape character itself,\n            // then it should be treated as an escaped literal.\n            // E.g., for CSVFormat with escape='/', \"//\" should yield \"/\".\n            if (c == format.getEscapeChar()) {\n                return c;\n            }\n            // For other unknown escape sequences (e.g., \"\\N\", \"\\a\" if '\\' is escape),\n            // treat the escape character as a literal, and make the current char 'c' available for literal reading.\n            // This effectively makes \"\\X\" parse as \"\\\" followed by \"X\".\n            in.unread(c); // Put 'c' back onto the stream so it can be read as a literal.\n            return in.getLastChar(); // Return the original escape character itself, which was just consumed by the lexer.\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}