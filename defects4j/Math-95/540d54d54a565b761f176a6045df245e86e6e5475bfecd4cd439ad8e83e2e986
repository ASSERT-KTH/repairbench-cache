{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        // The mean of the F-distribution is d / (d - 2.0) for d > 2.0.\n        // If d <= 2.0, the mean is undefined (for d < 2) or infinite (for d = 2).\n        // In such cases, a different initial value is needed for the root-finding\n        // algorithm, as a negative or infinite value would be invalid.\n        // A value of 1.0 is often a good heuristic, especially since the median\n        // of F(1,1) is 1.0 and many F-distributions are centered around 1.0.\n        if (d <= 2.0) {\n            ret = 1.0;\n        } else {\n            // use mean\n            ret = d / (d - 2.0);\n        }\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}