{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     *\n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double d = getDenominatorDegreesOfFreedom();\n        // for d>2 the mean exists, otherwise the mean is undefined or negative\n        double ret = d / (d - 2.0);\n        // if the mean is not a valid positive finite number, fall back to 1.0\n        if (ret <= 0.0 || Double.isInfinite(ret) || Double.isNaN(ret)) {\n            ret = 1.0;\n        }\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}