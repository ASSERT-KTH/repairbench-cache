{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        // The mean is only defined for d > 2. Handle d <= 2 separately.\n        if (d > 2.0) {\n            // Use mean for d > 2\n            ret = d / (d - 2.0);\n        } else {\n            // Use 1.0 as a default starting point for d <= 2, as the mean is undefined or infinite.\n            // 1.0 is a reasonable value within the domain [0, +inf).\n            ret = 1.0;\n        }\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}