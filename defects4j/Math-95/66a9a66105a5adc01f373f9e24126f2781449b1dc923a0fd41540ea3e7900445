{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        \n        // The mean of the F-distribution is d / (d - 2.0), but it is only defined\n        // for d > 2.0. If d <= 2.0, the mean is not defined or infinite/negative.\n        // The inverseCumulativeProbability method expects a positive initial guess\n        // for the F-distribution, which is defined on [0, +infinity).\n        // The current implementation returns a negative value (-1.0) when d=1.0,\n        // which causes an IllegalArgumentException.\n        // For d <= 2.0, we need a fallback positive initial value.\n        if (d > 2.0) {\n            // Use the mean when it is well-defined and positive.\n            ret = d / (d - 2.0);\n        } else {\n            // When d <= 2.0, the mean is not a suitable initial guess.\n            // Provide a common positive initial value. 1.0 is a reasonable default.\n            ret = 1.0;\n        }\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}