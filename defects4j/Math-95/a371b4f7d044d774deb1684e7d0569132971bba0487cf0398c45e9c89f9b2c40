{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        // The mean of an F-distribution is d / (d - 2) for d > 2.\n        // For d <= 2, the mean is undefined or leads to division by zero/negative values.\n        // The inverseCumulativeProbability method requires a positive initial guess\n        // within the domain [0, +infinity).\n        if (d > 2.0) {\n            // Use mean if it's well-defined and positive\n            ret = d / (d - 2.0);\n        } else {\n            // For d <= 2.0, the mean is undefined or non-positive.\n            // Provide a small, sensible positive initial guess to allow the solver to proceed.\n            // A value like 1.0 or 0.5 is a common robust choice for an initial positive guess.\n            ret = 1.0; \n        }\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}