{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        // The mean of the F-distribution, d / (d - 2.0), is only defined for d > 2.0.\n        // For d <= 2.0, the mean is undefined or infinite.\n        // In these cases, using the mean formula can lead to negative values (e.g., d=1)\n        // or division by zero (e.g., d=2), causing IllegalArgumentException in the solver.\n        // A safe initial guess within the domain [0, +infinity) is 0.0,\n        // which is the lower bound of the F-distribution's domain.\n        // This is consistent with how some other distributions (e.g., TDistribution)\n        // handle cases where their characteristic values are undefined for small degrees of freedom.\n        if (d > 2.0) {\n            // Use the mean when it is well-defined\n            ret = d / (d - 2.0);\n        } else {\n            // For d <= 2.0, return the lower bound of the domain as a safe initial guess.\n            ret = 0.0;\n        }\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}