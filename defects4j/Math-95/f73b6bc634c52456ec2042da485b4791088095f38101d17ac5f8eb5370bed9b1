{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        \n        // The mean of the F-distribution is d / (d - 2.0), but this is only\n        // defined and finite if the denominator degrees of freedom (d) is greater than 2.0.\n        // For d <= 2.0, the mean is undefined or infinite, and using this formula\n        // would lead to negative or infinite initial values, causing the\n        // inverseCumulativeProbability method to fail with an IllegalArgumentException.\n        if (d > 2.0) {\n            // Use the mean as an initial guess when it's well-defined and finite.\n            ret = d / (d - 2.0);\n        } else {\n            // For small degrees of freedom (d <= 2.0), the mean is not a valid\n            // initial guess. Provide a robust, small positive value as a fallback.\n            // The F-distribution is defined on (0, infinity), so the initial guess\n            // must be positive. Heuristic values like 0.5 or 1.0 are often used\n            // as starting points for numerical root-finding algorithms in such cases.\n            if (p < 0.5) {\n                ret = 0.5;\n            } else {\n                ret = 1.0;\n            }\n        }\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}