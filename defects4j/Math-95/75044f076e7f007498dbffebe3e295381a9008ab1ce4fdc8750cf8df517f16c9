{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     *\n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        // The mean of the F-distribution is d / (d - 2) for d > 2\n        // Use the mean as the initial guess if defined; otherwise, use 1.0\n        if (d > 2.0) {\n            ret = d / (d - 2.0);\n        } else {\n            ret = 1.0; // Default value when mean is undefined or infinite (d <= 2)\n        }\n        // Ensure the initial guess is strictly positive, as F-distribution is defined for x > 0.\n        // Although the F-distribution pdf approaches 0 as x approaches 0 for some parameter combinations,\n        // the inverse CDF solver expects a starting point within the open interval (0, infinity).\n        // A value of 1.0 is generally safe. If the calculated mean is very close to 0,\n        // it might still cause issues depending on the solver implementation, but 1.0 is robust.\n        // Note: The original code failed for d=1, returning -1.0 which is outside the domain [0, inf).\n        // The check d > 2 prevents division by zero or negative results.\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}