{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        \n        // The mean of the F-distribution is d / (d - 2.0) for d > 2.0.\n        // If d <= 2.0, the mean is undefined or problematic (negative or infinite).\n        // Since the F-distribution is defined for positive values (x > 0),\n        // the initial domain value must also be positive.\n        // For small degrees of freedom (d <= 2.0), a fixed positive value\n        // like 1.0 is a common and safe initial guess.\n        if (d > 2.0) {\n            ret = d / (d - 2.0);\n        } else {\n            ret = 1.0; // Fallback for d <= 2.0, ensuring a positive initial guess\n        }\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}