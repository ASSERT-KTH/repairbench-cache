{
    "generation": "    /**\n     * Access the initial domain value, based on <code>p</code>, used to\n     * bracket a CDF root.  This method is used by\n     * {@link #inverseCumulativeProbability(double)} to find critical values.\n     * \n     * @param p the desired probability for the critical value\n     * @return initial domain value\n     */\n    protected double getInitialDomain(double p) {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        if (d > 2.0) {\n            // use mean (valid only for d > 2)\n            ret = d / (d - 2.0);\n        } else {\n            // For d <= 2, the mean is undefined or negative.\n            // Use a heuristic based on p, similar to what's found in\n            // Apache Commons Math's FDistribution implementation for robustness.\n            if (p < 0.5) {\n                ret = 1.0 / (1.0 + (1.0 / d));\n            } else {\n                ret = d + 1.0;\n            }\n        }\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}