{
    "generation": "/**\n * Access the initial domain value, based on <code>p</code>, used to\n * bracket a CDF root.  This method is used by\n * {@link #inverseCumulativeProbability(double)} to find critical values.\n * \n * <p>The mean of the F distribution is given by d/(d - 2) only when the denominator\n * degrees of freedom (d) is greater than 2. For small degrees of freedom the mean does not exist,\n * so we must use a safe default positive value (here, 1.0) to ensure that the initial guess is in\n * the valid domain (0, infinity).</p>\n * \n * @param p the desired probability for the critical value\n * @return initial domain value\n */\nprotected double getInitialDomain(double p) {\n    double d = getDenominatorDegreesOfFreedom();\n    if (d > 2.0) {\n        return d / (d - 2.0);\n    }\n    return 1.0; // safe fallback for small degrees of freedom\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}