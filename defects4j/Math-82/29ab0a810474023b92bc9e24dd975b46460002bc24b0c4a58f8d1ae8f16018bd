{
    "generation": "/**\n * Returns the row with the minimum ratio as given by the minimum ratio test (MRT),\n * but prefers a strictly positive ratio over a zero\u2010ratio pivot (to avoid degeneracy)\n * and only falls back to a zero ratio if no positive ratio is available.\n * @param tableau simple tableau for the problem\n * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n * @return row with the minimum (positive) ratio, or if none positive, a zero\u2010ratio row, or null if unbounded\n */\nprivate Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minPositiveRatio = Double.POSITIVE_INFINITY;\n    Integer positiveRow = null;\n    Integer zeroRatioRow = null;\n    // scan constraint rows\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double entry = tableau.getEntry(i, col);\n        // only strictly positive entries are eligible\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n            final double rhs   = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double ratio = rhs / entry;\n            if (MathUtils.compareTo(ratio, 0, epsilon) > 0) {\n                // strictly positive ratio: track the minimum\n                if (MathUtils.compareTo(ratio, minPositiveRatio, epsilon) < 0) {\n                    minPositiveRatio = ratio;\n                    positiveRow = i;\n                }\n            } else {\n                // zero ratio: remember the first such row\n                if (zeroRatioRow == null) {\n                    zeroRatioRow = i;\n                }\n            }\n        }\n    }\n    // if we found any positive ratio, use it; otherwise fall back to a zero\u2010ratio row\n    return (positiveRow != null) ? positiveRow : zeroRatioRow;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}