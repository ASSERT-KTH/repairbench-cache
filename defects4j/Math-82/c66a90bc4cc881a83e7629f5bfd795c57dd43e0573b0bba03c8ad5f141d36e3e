{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n        double minRatio = Double.MAX_VALUE;\n        Integer minRatioPos = null;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n\n            // The standard Minimum Ratio Test requires the entry in the pivot column\n            // to be strictly positive. We use compareTo with epsilon tolerance.\n            // Check if entry > 0 considering tolerance (entry > epsilon)\n            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                final double ratio = rhs / entry;\n                // Compare the ratio with the current minimum ratio using tolerance.\n                // We are looking for the minimum positive ratio.\n                final int comparison = MathUtils.compareTo(ratio, minRatio, epsilon);\n                if (comparison < 0) {\n                    // This ratio is strictly smaller than the current minimum\n                    minRatio = ratio;\n                    minRatioPos = i;\n                } else if (comparison == 0) {\n                    // Tie-breaking rule: The original code implicitly selects the row\n                    // that appears first in the iteration. A common alternative is\n                    // Bland's rule or choosing the smallest index i. To minimize\n                    // potential side effects, we keep the original behavior:\n                    // the first row encountered with the minimum ratio is chosen.\n                    // Thus, no explicit action is needed here for the tie-breaking case\n                    // unless a different strategy (like smallest index) is desired.\n                    // If smallest index 'i' was desired:\n                    // if (minRatioPos == null || i < minRatioPos) {\n                    //     minRatioPos = i;\n                    // }\n                }\n            }\n        }\n        return minRatioPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}