{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n        double minRatio = Double.MAX_VALUE;\n        Integer minRatioPos = null;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n\n            // Check if the entry in the pivot column is strictly positive\n            // The original check MathUtils.compareTo(entry, 0, epsilon) >= 0 allowed\n            // entries that are zero or slightly negative (within epsilon), violating\n            // the requirement of the Minimum Ratio Test that the divisor must be strictly positive.\n            // Changing to MathUtils.compareTo(entry, 0, epsilon) > 0 ensures entry > epsilon.\n            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                final double ratio = rhs / entry;\n                // check if the new ratio is smaller than the current minimum\n                // Use \"<\" comparison for finding the minimum ratio.\n                // Using MathUtils.compareTo(ratio, minRatio, epsilon) < 0 could be more robust\n                // against floating point issues but might require handling Double.MAX_VALUE carefully.\n                // Sticking to \"<\" preserves original behavior regarding ties (first row found wins).\n                if (ratio < minRatio) {\n                    minRatio = ratio;\n                    minRatioPos = i;\n                }\n                // TODO: Consider adding explicit tie-breaking logic (e.g. Bland's rule)\n                // if cycling or numerical instability becomes an issue.\n                // For example:\n                // else if (MathUtils.compareTo(ratio, minRatio, epsilon) == 0) {\n                //     // Apply tie-breaking rule, e.g., choose the row with the smaller index\n                //     // or the row corresponding to the basic variable with the smallest index.\n                //     if (minRatioPos != null && tableau.getBasicRow(minRatioPos) > tableau.getBasicRow(i)) {\n                //         minRatioPos = i;\n                //     }\n                // }\n            }\n        }\n        return minRatioPos;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}