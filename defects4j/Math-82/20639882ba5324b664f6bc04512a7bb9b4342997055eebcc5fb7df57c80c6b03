{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n        double minRatio = Double.MAX_VALUE;\n        Integer minRatioPos = null;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n\n            // The Minimum Ratio Test requires the denominator (entry) to be strictly positive.\n            // The original code used >= 0, which included zero or near-zero values,\n            // violating the MRT rule and potentially causing division by zero or numerical instability.\n            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n                final double ratio = rhs / entry;\n                // check if the new ratio is smaller than the current minimum\n                // using compareTo to handle floating point comparisons robustly might be even better,\n                // but sticking to the original comparison logic for minimal change.\n                // E.g., if (MathUtils.compareTo(ratio, minRatio, epsilon) < 0)\n                if (ratio < minRatio) {\n                    minRatio = ratio;\n                    minRatioPos = i;\n                }\n            }\n        }\n        return minRatioPos;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}