{
    "generation": "    /**\n     * Variant called when creation of the POJO involves buffering of creator properties\n     * as well as property-based creator.\n     */\n    public Object complete(JsonParser p, DeserializationContext ctxt,\n            PropertyValueBuffer buffer, PropertyBasedCreator creator)\n        throws IOException\n    {\n        // first things first: deserialize all data buffered:\n        final int len = _properties.length;\n        Object[] values = new Object[len];\n        for (int i = 0; i < len; ++i) {\n            String typeId = _typeIds[i];\n            final ExtTypedProperty extProp = _properties[i];\n            if (typeId == null) {\n                // let's allow missing both type and property (may already have been set, too)\n                if (_tokens[i] == null) {\n                    continue;\n                }\n                // but not just one\n                // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'\n                if (!extProp.hasDefaultType()) {\n                    // 13-Dec-2015, tatu: Hmmh. Not sure if this should be an error, or\n                    //   just be ignored? For now, considered an error.\n                    ctxt.reportInputMismatch(_beanType,\n                            \"Missing external type id property '%s'\",\n                            extProp.getTypePropertyName());\n                    // NOTE: Original code continues execution, possibly leading to downstream errors.\n                } else {\n                    typeId = extProp.getDefaultTypeId();\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = extProp.getProperty();\n                // 13-Dec-2015, tatu: This seems like a problem scenario; maybe should\n                //    allow propagating null? Or should have been buffered? For now,\n                //    let's err out\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n                 // NOTE: Original code continues execution.\n            }\n\n            // It is possible that we have already seen property (from explicit type id)\n            // OR default type impl (compatible type); if so, do not deserialize\n            // 17-Jan-2019, tatu: ... logic related to this removed / handled in _deserialize ...\n            values[i] = _deserialize(p, ctxt, i, typeId);\n\n            final SettableBeanProperty prop = extProp.getProperty();\n            // also: if it's creator prop, fill in\n            if (prop.getCreatorIndex() >= 0) {\n                buffer.assignParameter(prop, values[i]);\n\n                // [databind#999] And maybe there's creator property for type id too?\n                SettableBeanProperty typeProp = extProp.getTypeProperty();\n                // for now, should only be needed for creator properties, too\n                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to\n                    //    apply deserializer... fun fun.\n                    \n                    Object typeValue;\n                    // Use TokenBuffer to feed the String value to the deserializer:\n                    // (p is used as codec source, ctxt has config)\n                    TokenBuffer tb = new TokenBuffer(p, ctxt);\n                    tb.writeString(typeId);\n\n                    // important: need a parser based on buffer to read value\n                    JsonParser p2 = tb.asParser(p);\n                    // and position parser at the value token:\n                    p2.nextToken();\n\n                    JsonDeserializer<Object> deser = typeProp.getValueDeserializer();\n                    // 19-Dec-2018, tatu: MUST handle null deser, find default one if need be\n                    if (deser == null) {\n                         deser = ctxt.findContextualValueDeserializer(typeProp.getType(), typeProp);\n                    }\n                    if (deser != null) { // usually should exist\n                        typeValue = deser.deserialize(p2, ctxt);\n                    } else {\n                         // 13-Jan-2019, tatu: Let's assume this is only possible if type is `Object`,\n                         //    in which case String is fine? Or if plain String. Assign raw string.\n                         typeValue = typeId;\n                    }\n                    p2.close(); // ensure related buffers/readers released\n                    tb.close();\n\n                    buffer.assignParameter(typeProp, typeValue);\n                }\n            }\n        }\n        Object bean = creator.build(ctxt, buffer);\n        // third: assign non-creator properties\n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (prop.getCreatorIndex() < 0) {\n                prop.set(bean, values[i]);\n            }\n        }\n        return bean;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}