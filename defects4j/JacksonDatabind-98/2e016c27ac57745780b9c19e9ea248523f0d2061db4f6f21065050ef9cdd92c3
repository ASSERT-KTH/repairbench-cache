{
    "generation": "    /**\n     * Variant called when creation of the POJO involves buffering of creator properties\n     * as well as property-based creator.\n     */\n    public Object complete(JsonParser p, DeserializationContext ctxt,\n            PropertyValueBuffer buffer, PropertyBasedCreator creator)\n        throws IOException\n    {\n        // first things first: deserialize all data buffered:\n        final int len = _properties.length;\n        Object[] values = new Object[len];\n        for (int i = 0; i < len; ++i) {\n            String typeId = _typeIds[i];\n            final ExtTypedProperty extProp = _properties[i];\n            final SettableBeanProperty prop = extProp.getProperty();\n\n            if (typeId == null) {\n                // let's allow missing both type and property (may already have been set, too)\n                if (_tokens[i] == null) {\n                    continue;\n                }\n                // but not just one\n                // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'\n                if (!extProp.hasDefaultType()) {\n                    // 13-Dec-2015, tatu: Let's pass property name, initially missing\n                    ctxt.reportInputMismatch(prop, // first blamed it on bean type, but more accurate to report property\n                            \"Missing external type id property '%s' (and no 'defaultImpl' specified)\",\n                            extProp.getTypePropertyName());\n                } else {\n                    typeId = extProp.getDefaultTypeId();\n                }\n            } else if (_tokens[i] == null) {\n                ctxt.reportInputMismatch(prop, // same as above, blame property\n                        \"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), extProp.getTypePropertyName());\n            }\n            // 05-Mar-2017, tatu: Minor optimization; must check for null only so that we can\n            //    avoid errors if value was already seen.\n            if (_tokens[i] != null) {\n                 values[i] = _deserialize(p, ctxt, i, typeId);\n            } // otherwise fine, got delegate or null value\n\n            // also: if it's creator prop, fill in\n            if (prop.getCreatorIndex() >= 0) {\n                buffer.assignParameter(prop, values[i]);\n\n                // [databind#999] And maybe there's creator property for type id too?\n                SettableBeanProperty typeProp = extProp.getTypeProperty();\n                // for now, should only be needed for creator properties, too\n                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to\n                    //    apply deserializer... fun fun.\n                    // 19-Jun-2018, tatu: Related to #1328, need to use TokenBuffer, JsonParser;\n                    //    otherwise cannot deserialize non-String type ids\n                    Object typeIdValue;\n                    // We must use a separate parser/token buffer, cannot simple feed String.\n                    // Behaviour changed in 2.9 (specifically for #1328); was problematic in edge cases\n                    TokenBuffer tb = new TokenBuffer(p, ctxt);\n                    tb.writeString(typeId);\n\n                    // 11-Jan-2019, tatu: as per [databind#2240], Type Id is a regular\n                    //   value, needs to be parsed as such.\n                    JsonDeserializer<Object> deser = ctxt.findContextualValueDeserializer(typeProp.getType(), typeProp);\n                    JsonParser p2 = tb.asParser(p); // important: share Settings, Codec\n                    p2.nextToken(); // advances to VALUE_STRING token\n                    typeIdValue = deser.deserialize(p2, ctxt);\n                    // should be ok; but verify there isn't anything else\n                     if (p2.nextToken() != null) {\n                        ctxt.reportWrongTokenException(typeProp.getType(), JsonToken.FIELD_NAME /*bogus*/,\n                                \"Unexpected token after external type id value: \"+p2.currentToken());\n                    }\n                    tb.close(); // important: release resources\n                    buffer.assignParameter(typeProp, typeIdValue);\n                }\n            }\n        }\n        Object bean = creator.build(ctxt, buffer);\n        // third: assign non-creator properties\n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (prop.getCreatorIndex() < 0) {\n                 // 05-Mar-2017, tatu: Important constraint: only set if value to set was seen/buffered.\n                 //   Value may be null.\n                 if (_tokens[i] != null) {\n                    prop.set(bean, values[i]);\n                 } else { // Although... if Type Id was specified, maybe should assign null?\n                     //  Need to think about that more; for now, don't assign if value missing\n                 }\n            }\n        }\n        return bean;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}