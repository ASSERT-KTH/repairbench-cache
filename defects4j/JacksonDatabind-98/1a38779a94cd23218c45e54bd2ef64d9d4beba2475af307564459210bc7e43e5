{
    "generation": "/**\n * Variant called when creation of the POJO involves buffering of creator properties\n * as well as property-based creator.\n */\npublic Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    // first things first: deserialize all data buffered:\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    Object[] typeIds = new Object[len]; // FIX: store type id objects for potential assignment\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            // let's allow missing both type and property (may already have been set, too)\n            if (_tokens[i] == null) {\n                continue;\n            }\n            // but not just one\n            // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n\n        final SettableBeanProperty prop = extProp.getProperty();\n        // also: if it's creator prop, fill in\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n\n            // [databind#999] And maybe there's creator property for type id too?\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            // for now, should only be needed for creator properties, too\n            if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to\n                //    apply deserializer... fun fun.\n                Object typeIdToAssign = typeId;\n                if (typeProp.getType().getRawClass() != String.class) {\n                    // try to deserialize type id as typeProp's value type using its deserializer\n                    JsonDeserializer<Object> deser = typeProp.getValueDeserializer();\n                    if (deser != null) {\n                        typeIdToAssign = deser.deserialize(\n                                ctxt.getParser().getCodec().treeAsTokens(ctxt.getNodeFactory().textNode(typeId)),\n                                ctxt\n                        );\n                    }\n                }\n                buffer.assignParameter(typeProp, typeIdToAssign);\n                typeIds[i] = typeIdToAssign; // Save for later set()\n            } else {\n                typeIds[i] = typeId;\n            }\n        } else {\n            typeIds[i] = typeId;\n        }\n    }\n    Object bean = creator.build(ctxt, buffer);\n    // third: assign non-creator properties\n    for (int i = 0; i < len; ++i) {\n        SettableBeanProperty prop = _properties[i].getProperty();\n        if (prop.getCreatorIndex() < 0) {\n            prop.set(bean, values[i]);\n        }\n        // Also assign type property (for non-creator properties and for type id properties with non-String type)\n        SettableBeanProperty typeProp = _properties[i].getTypeProperty();\n        if ((typeProp != null) && (typeProp.getCreatorIndex() < 0)) {\n            Object typeIdValue = typeIds[i];\n            if (typeIdValue != null) {\n                if (typeProp.getType().getRawClass() != String.class) {\n                    // Try to deserialize non-String type id\n                    JsonDeserializer<Object> deser = typeProp.getValueDeserializer();\n                    if (deser != null && !(typeIdValue instanceof String)) {\n                        typeProp.set(bean, typeIdValue);\n                    } else if (deser != null) {\n                        typeProp.set(bean, deser.deserialize(\n                                ctxt.getParser().getCodec().treeAsTokens(ctxt.getNodeFactory().textNode(typeIdValue.toString())),\n                                ctxt\n                        ));\n                    } else {\n                        typeProp.set(bean, typeIdValue);\n                    }\n                } else {\n                    typeProp.set(bean, typeIdValue.toString());\n                }\n            }\n        }\n    }\n    return bean;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}