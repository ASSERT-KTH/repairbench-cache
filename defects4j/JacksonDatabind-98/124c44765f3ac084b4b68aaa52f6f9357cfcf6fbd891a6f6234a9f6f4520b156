{
    "generation": "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    // first things first: deserialize all data buffered:\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            // Allow missing both type and property; may already have been set\n            if (_tokens[i] == null) {\n                continue;\n            }\n            // But not just one: if no type id, check defaultImpl handling\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            // Found a type id but not the associated property: error!\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), extProp.getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n\n        final SettableBeanProperty prop = extProp.getProperty();\n        // If the main property is a creator parameter, assign it directly...\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n\n            // And if there is also an external type id property for this creator parameter:\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if (typeProp != null && typeProp.getCreatorIndex() >= 0) {\n                Object typeValue;\n                // If the creator expects a String, we can use the type id as is.\n                if (typeProp.getType().getRawClass() == String.class) {\n                    typeValue = typeId;\n                } else {\n                    // Otherwise, we must deserialize the type id so that it has the expected type.\n                    // Create a temporary parser for a JSON String value of typeId.\n                    JsonParser typeParser = p.getCodec().getFactory()\n                        .createParser(\"\\\"\" + typeId + \"\\\"\");\n                    typeParser.nextToken();\n                    typeValue = typeProp.getValueDeserializer().deserialize(typeParser, ctxt);\n                    typeParser.close();\n                }\n                buffer.assignParameter(typeProp, typeValue);\n            }\n        }\n    }\n    Object bean = creator.build(ctxt, buffer);\n    // assign any non-creator (regular) properties:\n    for (int i = 0; i < len; ++i) {\n        SettableBeanProperty prop = _properties[i].getProperty();\n        if (prop.getCreatorIndex() < 0) {\n            prop.set(bean, values[i]);\n        }\n    }\n    return bean;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}