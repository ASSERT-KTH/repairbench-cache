{
    "generation": "    /**\n     * Variant called when creation of the POJO involves buffering of creator properties\n     * as well as property-based creator.\n     */\n    public Object complete(JsonParser p, DeserializationContext ctxt,\n            PropertyValueBuffer buffer, PropertyBasedCreator creator)\n        throws IOException\n    {\n        // first things first: deserialize all data buffered:\n        final int len = _properties.length;\n        Object[] values = new Object[len];\n        for (int i = 0; i < len; ++i) {\n            String typeId = _typeIds[i];\n            final ExtTypedProperty extProp = _properties[i];\n            if (typeId == null) {\n                // let's allow missing both type and property (may already have been set, too)\n                if (_tokens[i] == null) {\n                    continue;\n                }\n                // but not just one\n                // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'\n                if (!extProp.hasDefaultType()) {\n                    ctxt.reportInputMismatch(_beanType,\n                            \"Missing external type id property '%s'\",\n                            extProp.getTypePropertyName());\n                } else {\n                    typeId = extProp.getDefaultTypeId();\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = extProp.getProperty();\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n            }\n            // [databind#1328]: Need to handle Enum type ids properly\n            if (extProp.getTypeProperty() != null && extProp.getTypeProperty().getType().isEnumType()) {\n                JavaType type = extProp.getTypeProperty().getType();\n                values[i] = _deserializeWithEnumTypeId(p, ctxt, i, typeId, type);\n            } else {\n                values[i] = _deserialize(p, ctxt, i, typeId);\n            }\n\n            final SettableBeanProperty prop = extProp.getProperty();\n            // also: if it's creator prop, fill in\n            if (prop.getCreatorIndex() >= 0) {\n                buffer.assignParameter(prop, values[i]);\n\n                // [databind#999] And maybe there's creator property for type id too?\n                SettableBeanProperty typeProp = extProp.getTypeProperty();\n                // for now, should only be needed for creator properties, too\n                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to\n                    //    apply deserializer... fun fun.\n                    if (typeProp.getType().isEnumType()) {\n                        JavaType enumType = typeProp.getType();\n                        Object enumValue = ctxt.findValueInstantiator(enumType).createUsingDefault(ctxt);\n                        buffer.assignParameter(typeProp, enumValue);\n                    } else {\n                        buffer.assignParameter(typeProp, typeId);\n                    }\n                }\n            }\n        }\n        Object bean = creator.build(ctxt, buffer);\n        // third: assign non-creator properties\n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (prop.getCreatorIndex() < 0) {\n                prop.set(bean, values[i]);\n            }\n        }\n        return bean;\n    }\n\n    private Object _deserializeWithEnumTypeId(JsonParser p, DeserializationContext ctxt, int index, String typeId, JavaType enumType) throws IOException {\n        // Find the enum value corresponding to the typeId\n        Enum<?> enumValue = null;\n        for (Enum<?> e : (Enum<?>[]) enumType.getRawClass().getEnumConstants()) {\n            if (e.name().equals(typeId)) {\n                enumValue = e;\n                break;\n            }\n        }\n        if (enumValue == null) {\n            ctxt.reportInputMismatch(_beanType,\n                    \"Invalid external type id '%s' for property '%s'\",\n                    typeId, _properties[index].getProperty().getName());\n        }\n        // Deserialize the property value using the enum value\n        JsonToken token = _tokens[index];\n        if (token == null) {\n            return enumValue;\n        }\n        p.setCurrentValue(enumValue);\n        return _valueDeserializers[index].deserialize(p, ctxt);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}