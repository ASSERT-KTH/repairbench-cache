{
    "generation": "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    // first things first: deserialize all data buffered:\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            // allow missing both type and property (may already have been set)\n            if (_tokens[i] == null) {\n                continue;\n            }\n            // but not just one\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), extProp.getTypePropertyName());\n        }\n\n        // deserialize the \"value\" part\n        values[i] = _deserialize(p, ctxt, i, typeId);\n\n        // if this is a creator property, buffer it\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n\n            // and if the type\u2010id itself is a creator property, buffer it too,\n            // but must convert it if target type is not String\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if (typeProp != null && typeProp.getCreatorIndex() >= 0) {\n                Object idValue = typeId;\n                // convert from String to the actual target type (e.g. enum)\n                if (!typeProp.getType().getRawClass().equals(String.class)) {\n                    JsonDeserializer<Object> deser = ctxt.findContextualValueDeserializer(\n                        typeProp.getType(), typeProp);\n                    // re-play the typeId as a JSON string for the deserializer\n                    TokenBuffer tb = new TokenBuffer(p.getCodec(), false);\n                    tb.writeString(typeId);\n                    JsonParser tbParser = tb.asParserOnFirstToken();\n                    try {\n                        idValue = deser.deserialize(tbParser, ctxt);\n                    } finally {\n                        tbParser.close();\n                    }\n                }\n                buffer.assignParameter(typeProp, idValue);\n            }\n        }\n    }\n\n    // build the bean with creator-based properties\n    Object bean = creator.build(ctxt, buffer);\n\n    // finally assign non-creator properties\n    for (int i = 0; i < len; ++i) {\n        SettableBeanProperty prop = _properties[i].getProperty();\n        if (prop.getCreatorIndex() < 0) {\n            prop.set(bean, values[i]);\n        }\n    }\n    return bean;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}