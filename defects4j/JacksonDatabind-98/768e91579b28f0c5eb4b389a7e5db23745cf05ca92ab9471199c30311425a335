{
    "generation": "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if (typeProp != null && typeProp.getCreatorIndex() >= 0) {\n                // Check if typeId is an Enum\n                if (ctxt.getDeserializationFeatures().disable(DeserializationFeature.FAIL_ON_UNexpected_OBJECT_PROPERTY_TYPES)) {\n                    for (JavaType t : ctxt.getBaseTypes(ctxt.constructType(typeId), null)) {\n                        if (t.isEnumType()) {\n                            Enum<?>[] enums = (Enum<?>) ctxt.findInjectableValueId(null, t, null);\n                            if (enums != null) {\n                                typeId = enums[0].name();\n                                break;\n                            }\n                        }\n                    }\n                }\n                // If it's an enum, get its name for creator parameter\n                if (typeProp.getType().isEnumType()) {\n                    Enum<?> enumValue = (Enum<?>) _deserializeEnum(p, ctxt, typeProp.getType(), typeId);\n                    buffer.assignParameter(typeProp, enumValue.name());\n                } else {\n                    buffer.assignParameter(typeProp, typeId);\n                }\n            }\n        }\n    }\n    Object bean = creator.build(ctxt, buffer);\n    for (int i = 0; i < len; ++i) {\n        SettableBeanProperty prop = _properties[i].getProperty();\n        if (prop.getCreatorIndex() < 0) {\n            prop.set(bean, values[i]);\n        }\n    }\n    return bean;\n}\n\nprivate Enum<?> _deserializeEnum(JsonParser p, DeserializationContext ctxt, JavaType type, String value)\n    throws IOException\n{\n    JavaType enumType = ctxt.resolveType(type);\n    if (!enumType.isEnumType()) {\n        ctxt.reportInputMismatch(enumType,\n                \"Expected an enum type but found %s\", enumType);\n    }\n    return ctxt.findEnumType(enumType, value);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}