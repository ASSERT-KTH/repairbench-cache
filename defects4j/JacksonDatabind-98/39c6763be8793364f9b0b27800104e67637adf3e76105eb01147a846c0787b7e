{
    "generation": "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    // first things first: deserialize all data buffered:\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            // let's allow missing both type and property (may already have been set, too)\n            if (_tokens[i] == null) {\n                continue;\n            }\n            // but not just one\n            // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), extProp.getTypePropertyName());\n        }\n        // deserialize the main value\n        values[i] = _deserialize(p, ctxt, i, typeId);\n\n        // if this is a creator property, buffer it\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n\n            // and also buffer the external type\u2010id, converting if necessary\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if (typeProp != null && typeProp.getCreatorIndex() >= 0) {\n                Object idValue;\n                // if the target type is plain String, just use the id; otherwise\n                // deserialize the textual id into the expected type (e.g. an enum)\n                Class<?> raw = typeProp.getType().getRawClass();\n                if (raw == String.class) {\n                    idValue = typeId;\n                } else {\n                    JsonDeserializer<Object> deser = typeProp.getValueDeserializer();\n                    // wrap the raw type\u2010id String in a TokenBuffer so we can feed it\n                    // through the standard deserializer\n                    TokenBuffer tb = new TokenBuffer(p, ctxt);\n                    tb.writeString(typeId);\n                    JsonParser idParser = tb.asParser(p);\n                    idParser.nextToken();\n                    idValue = deser.deserialize(idParser, ctxt);\n                    idParser.close();\n                }\n                buffer.assignParameter(typeProp, idValue);\n            }\n        }\n    }\n\n    // build the bean\n    Object bean = creator.build(ctxt, buffer);\n\n    // finally, assign remaining (non-creator) properties\n    for (int i = 0; i < len; ++i) {\n        SettableBeanProperty prop = _properties[i].getProperty();\n        if (prop.getCreatorIndex() < 0) {\n            prop.set(bean, values[i]);\n        }\n    }\n    return bean;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}