{
    "generation": "    /**\n     * Variant called when creation of the POJO involves buffering of creator properties\n     * as well as property-based creator.\n     */\n    public Object complete(JsonParser p, DeserializationContext ctxt,\n            PropertyValueBuffer buffer, PropertyBasedCreator creator)\n        throws IOException\n    {\n        // first things first: deserialize all data buffered:\n        final int len = _properties.length;\n        Object[] values = new Object[len];\n        for (int i = 0; i < len; ++i) {\n            String typeId = _typeIds[i];\n            final ExtTypedProperty extProp = _properties[i];\n            if (typeId == null) {\n                // let's allow missing both type and property (may already have been set, too)\n                if (_tokens[i] == null) {\n                    continue;\n                }\n                // but not just one\n                // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'\n                if (!extProp.hasDefaultType()) {\n                    ctxt.reportInputMismatch(_beanType,\n                            \"Missing external type id property '%s'\",\n                            extProp.getTypePropertyName());\n                } else {\n                    typeId = extProp.getDefaultTypeId();\n                }\n            } else if (_tokens[i] == null) {\n                SettableBeanProperty prop = extProp.getProperty();\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing property '%s' for external type id '%s'\",\n                        prop.getName(), _properties[i].getTypePropertyName());\n            }\n            values[i] = _deserialize(p, ctxt, i, typeId);\n\n            final SettableBeanProperty prop = extProp.getProperty();\n            // also: if it's creator prop, fill in\n            if (prop.getCreatorIndex() >= 0) {\n                buffer.assignParameter(prop, values[i]);\n\n                // [databind#999] And maybe there's creator property for type id too?\n                SettableBeanProperty typeProp = extProp.getTypeProperty();\n                // for now, should only be needed for creator properties, too\n                if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to\n                    //    apply deserializer... fun fun.\n                    Object actualTypeIdValue;\n                    JsonDeserializer<Object> typeIdDeserializer = typeProp.getValueDeserializer();\n\n                    // If a specific deserializer exists for the type id property and its handled type\n                    // is not String (e.g., Enum), we need to deserialize the typeId string into\n                    // the expected type using a temporary parser.\n                    if (typeIdDeserializer != null && typeIdDeserializer.handledType() != String.class) {\n                        // Need to parse the String `typeId` using the property's deserializer.\n                        // Create a temporary parser for the typeId string.\n                        JsonParser tempParser = ctxt.getFactory().createParser(typeId);\n                        // Move the temporary parser to the first token (e.g., VALUE_STRING for \"Dog\",\n                        // or other tokens if the typeId string represents more complex JSON).\n                        tempParser.nextToken();\n                        actualTypeIdValue = typeIdDeserializer.deserialize(tempParser, ctxt);\n                        tempParser.close();\n                    } else {\n                        // Otherwise, the typeId string can be used directly. This covers cases\n                        // where typeProp expects a String, or for simple types (like int/boolean)\n                        // where default conversions from String usually apply.\n                        actualTypeIdValue = typeId;\n                    }\n                    buffer.assignParameter(typeProp, actualTypeIdValue);\n                }\n            }\n        }\n        Object bean = creator.build(ctxt, buffer);\n        // third: assign non-creator properties\n        for (int i = 0; i < len; ++i) {\n            SettableBeanProperty prop = _properties[i].getProperty();\n            if (prop.getCreatorIndex() < 0) {\n                prop.set(bean, values[i]);\n            }\n        }\n        return bean;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}