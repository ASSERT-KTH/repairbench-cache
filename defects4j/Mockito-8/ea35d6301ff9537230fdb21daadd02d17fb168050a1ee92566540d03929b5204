{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    Class<?> rawType = (Class<?>) parameterizedType.getRawType();\n    TypeVariable<?>[] typeParameters = rawType.getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        // if it's a wildcard, use its bound, otherwise use the argument itself\n        Type toRegister = (actualTypeArgument instanceof WildcardType)\n            ? boundsOf((WildcardType) actualTypeArgument)\n            : actualTypeArgument;\n        // skip the trivial self\u2010mapping (T -> T) to avoid infinite recursion\n        if (toRegister.equals(typeParameter)) {\n            continue;\n        }\n        contextualActualTypeParameters.put(typeParameter, toRegister);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}