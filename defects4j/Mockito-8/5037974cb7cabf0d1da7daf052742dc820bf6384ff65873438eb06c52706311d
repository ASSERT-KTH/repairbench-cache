{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    Class<?> rawType = (Class<?>) parameterizedType.getRawType();\n    TypeVariable<?>[] typeParameters = rawType.getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else if (actualTypeArgument instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) actualTypeArgument;\n            // If the actual type argument is a parameterized type whose raw type is the same as the declaring raw type,\n            // then use the raw type to break a potential self\u2010referential cycle.\n            if (pt.getRawType().equals(rawType)) {\n                contextualActualTypeParameters.put(typeParameter, rawType);\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n        } else if (actualTypeArgument instanceof TypeVariable) {\n            TypeVariable<?> tv = (TypeVariable<?>) actualTypeArgument;\n            // If the actual type argument is a type variable declared by the same raw type,\n            // map it to the raw type to avoid self-reference.\n            if (tv.getGenericDeclaration().equals(rawType)) {\n                contextualActualTypeParameters.put(typeParameter, rawType);\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}