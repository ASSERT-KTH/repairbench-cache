{
    "generation": "    protected void registerTypeVariablesOn(Type classType) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        // Using TypeVariable<?> is cleaner\n        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\n        // Add defensiveness against potentially invalid generic signatures (e.g. F-bounds, raw types)\n        // that might lead to arrays of different sizes. See Mockito issue #1795.\n        if (typeParameters.length != actualTypeArguments.length) {\n            // Mismatch indicates an unusual type definition; logging could be useful here.\n            // Return early to prevent potential ArrayIndexOutOfBoundsException.\n            return;\n        }\n\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable<?> typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            // Prevent mapping a type variable to itself (e.g., T -> T in the context of Class<T>).\n            // This scenario arises with self-referential generic types (like Enum<E extends Enum<E>>)\n            // and causes StackOverflowError if T is resolved by looking up itself in the map.\n            // If typeParameter equals actualTypeArgument, it means we are resolving T in the context of T itself,\n            // providing no new information. We skip adding this mapping.\n            if (typeParameter.equals(actualTypeArgument)) {\n                continue;\n            }\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}