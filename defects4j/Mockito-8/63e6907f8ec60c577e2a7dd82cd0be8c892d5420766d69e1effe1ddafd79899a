{
    "generation": "    protected void registerTypeVariablesOn(Type classType) {\n        // This 'typesCurrentlyBeingRegistered' set should be an instance field of the enclosing class\n        // (e.g., GenericMetadataSupport) to track types being processed in the current resolution cycle.\n        // For example: `private final Set<Type> typesCurrentlyBeingRegistered = new HashSet<>();`\n\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n\n        // Prevent infinite recursion for cyclic type definitions (e.g., T extends MyClass<T>)\n        // If this type is already being processed on the current call stack,\n        // adding it to the set will return false, indicating a cycle.\n        if (!typesCurrentlyBeingRegistered.add(classType)) {\n            return; // Break the recursion\n        }\n\n        try {\n            ParameterizedType parameterizedType = (ParameterizedType) classType;\n            TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n            for (int i = 0; i < actualTypeArguments.length; i++) {\n                TypeVariable typeParameter = typeParameters[i];\n                Type actualTypeArgument = actualTypeArguments[i];\n\n                if (actualTypeArgument instanceof WildcardType) {\n                    contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n                } else {\n                    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n                }\n                // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n            }\n        } finally {\n            // Always remove the type from the set when exiting this method call,\n            // whether it completes successfully or throws an exception.\n            typesCurrentlyBeingRegistered.remove(classType);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}