{
    "generation": "    protected void registerTypeVariablesOn(Type classType) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        Type rawType = parameterizedType.getRawType();\n\n        // Type parameters are defined on classes/interfaces\n        if (!(rawType instanceof Class<?>)) {\n            // If the raw type is not a Class (e.g., a TypeVariable), it cannot declare type parameters.\n             return;\n        }\n        Class<?> rawClass = (Class<?>) rawType;\n\n        TypeVariable<?>[] typeParameters = rawClass.getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\n        // According to the ParameterizedType contract, the number of actual type arguments\n        // must match the number of formal type parameters. We rely on this contract here.\n        // An explicit check could be added for robustness if needed:\n        // if (typeParameters.length != actualTypeArguments.length) { /* handle error */ }\n\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            // Check index bounds defensively, although lengths should match by contract.\n            if (i >= typeParameters.length) {\n                // This case should technically not happen for valid ParameterizedTypes.\n                break; \n            }\n            \n            TypeVariable<?> typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            // FIX: Prevent recursive mapping like T -> T for the same TypeVariable.\n            // This occurs when resolving types involving self-references (e.g., bounds like\n            // <T extends Comparable<T>> or types like Enum<E extends Enum<E>>).\n            // Registering T -> T in the context map can lead to infinite recursion\n            // during subsequent type resolution lookups, causing StackOverflowError.\n            if (typeParameter.equals(actualTypeArgument)) {\n                continue; // Skip registration if type variable maps to itself.\n            }\n\n            if (actualTypeArgument instanceof WildcardType) {\n                // Assuming boundsOf method correctly resolves the bounds of the wildcard.\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}