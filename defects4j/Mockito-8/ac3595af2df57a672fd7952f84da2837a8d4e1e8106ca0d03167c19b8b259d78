{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n\n    // Check if we've already processed this type to prevent infinite recursion\n    if (contextualActualTypeParameters.containsKey(parameterizedType.getRawType())) {\n        return;\n    }\n\n    TypeVariable<?>[] typeParameters;\n    try {\n        typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    } catch (ClassCastException e) {\n        // Handle case where getRawType() doesn't return a Class<?> (rare cases)\n        return;\n    }\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        if (i >= typeParameters.length) {\n            break;  // Safety check in case parameters and arguments don't match\n        }\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}