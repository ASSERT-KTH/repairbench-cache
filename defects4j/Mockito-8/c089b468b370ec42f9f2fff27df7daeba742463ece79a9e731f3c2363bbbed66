{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    Class<?> rawType = (Class<?>) parameterizedType.getRawType();\n    if (processedTypes.contains(rawType)) {\n        return;\n    }\n    processedTypes.add(rawType);\n    TypeVariable[] typeParameters = rawType.getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n        // Recursive handling of nested parameterized types\n        if (actualTypeArgument instanceof ParameterizedType) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n        // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(actualTypeArgument) + \")\" + \"' }\");\n    }\n}\n\n// Field to track processed type parameters to prevent infinite recursion\nprivate final Set<Class<?>> processedTypes = new HashSet<>();",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}