{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    Type rawType = parameterizedType.getRawType();\n    if (!(rawType instanceof Class)) {\n        return;\n    }\n    TypeVariable[] typeParameters = ((Class<?>) rawType).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\n    // Prevent infinite recursion by checking if we've already processed this type\n    if (contextualActualTypeParameters.containsKey(parameterizedType)) {\n        return;\n    }\n    contextualActualTypeParameters.put(parameterizedType, parameterizedType); // Mark as processed\n\n    for (int i = 0; i < typeParameters.length && i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}