{
    "generation": "    protected void registerTypeVariablesOn(Type classType) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        Type rawType = parameterizedType.getRawType();\n        if (!(rawType instanceof Class)) {\n            return;\n        }\n        Class<?> rawClass = (Class<?>) rawType;\n        TypeVariable[] typeParameters = rawClass.getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else if (actualTypeArgument instanceof TypeVariable) {\n                // Handle recursive type variables to prevent StackOverflowError\n                TypeVariable<?> tv = (TypeVariable<?>) actualTypeArgument;\n                if (contextualActualTypeParameters.containsKey(tv)) {\n                    contextualActualTypeParameters.put(typeParameter, contextualActualTypeParameters.get(tv));\n                } else {\n                    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n                }\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}