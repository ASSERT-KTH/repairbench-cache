{
    "generation": "    protected void registerTypeVariablesOn(Type classType) {\n        // This method is part of GenericMetadataSupport, which likely has a Set<Type>\n        // field (e.g., 'typesBeingRegistered') to keep track of types currently\n        // being processed to prevent infinite recursion in self-referential generics.\n\n        // Add guard to prevent infinite recursion for self-referential types or cyclic dependencies\n        // If classType is already in the set, it means we are in a recursive call\n        // for the same type, so we return to break the cycle.\n        // Assuming 'typesBeingRegistered' is an instance field of the enclosing class.\n        if (!typesBeingRegistered.add(classType)) {\n            return;\n        }\n\n        try {\n            if (!(classType instanceof ParameterizedType)) {\n                return;\n            }\n            ParameterizedType parameterizedType = (ParameterizedType) classType;\n            TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n            for (int i = 0; i < actualTypeArguments.length; i++) {\n                TypeVariable typeParameter = typeParameters[i];\n                Type actualTypeArgument = actualTypeArguments[i];\n\n                if (actualTypeArgument instanceof WildcardType) {\n                    contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n                } else {\n                    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n                }\n            }\n        } finally {\n            // Ensure the type is removed from the set when processing is complete\n            // This is crucial to allow subsequent, distinct processing of the same type\n            // if it appears in different contexts (e.g., as a parameter type and a return type),\n            // or if a different instance of GenericMetadataSupport processes it.\n            typesBeingRegistered.remove(classType);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}