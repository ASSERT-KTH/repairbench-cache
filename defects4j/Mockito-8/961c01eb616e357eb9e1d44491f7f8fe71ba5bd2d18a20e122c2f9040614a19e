{
    "generation": "    protected void registerTypeVariablesOn(Type classType) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        // Using TypeVariable<?> is cleaner and avoids raw type warnings if applicable elsewhere.\n        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\n        // Basic check for argument length mismatch. While ParameterizedType should guarantee this,\n        // adding a check might prevent potential ArrayOutOfBoundsException in edge cases or malformed types.\n        if (typeParameters.length != actualTypeArguments.length) {\n            // Consider logging a warning or throwing an exception for unexpected state\n            // For now, just return to avoid potential errors.\n            return;\n        }\n\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable<?> typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            // THE FIX: Avoid registering a mapping from a TypeVariable to itself,\n            // as this can cause infinite recursion (StackOverflowError) during type resolution,\n            // especially with recursive type bounds like <T extends\u81ea\u8eab\u306e\u578b<T>>.\n            if (!actualTypeArgument.equals(typeParameter)) {\n                if (actualTypeArgument instanceof WildcardType) {\n                    // Existing logic for WildcardType\n                    contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n                } else {\n                    // Existing logic for other types\n                    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n                }\n                // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(actualTypeArgument) + \")\" + \"' }\");\n            }\n            // If actualTypeArgument.equals(typeParameter), we skip the put operation to prevent recursion.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}