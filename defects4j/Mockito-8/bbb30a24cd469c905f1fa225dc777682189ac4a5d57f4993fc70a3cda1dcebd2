{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    Type rawType = parameterizedType.getRawType();\n\n    // Check if the raw type is already in the process of being resolved to prevent stack overflow\n    if (!(rawType instanceof Class) || resolvedClassTypes.contains(rawType)) {\n        return;\n    }\n\n    // Mark this class as being resolved\n    if (rawType instanceof Class) {\n        resolvedClassTypes.add(rawType);\n    }\n\n    try {\n        TypeVariable[] typeParameters = ((Class<?>) rawType).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else if (actualTypeArgument instanceof TypeVariable) {\n                // Handle case where actual type argument is another type variable\n                // This prevents infinite recursion in self-referential cases\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            } else if (actualTypeArgument instanceof ParameterizedType) {\n                // Recursively process nested parameterized types\n                registerTypeVariablesOn(actualTypeArgument);\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n        }\n    } finally {\n        // Remove the class from being resolved when done\n        if (rawType instanceof Class) {\n            resolvedClassTypes.remove(rawType);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}