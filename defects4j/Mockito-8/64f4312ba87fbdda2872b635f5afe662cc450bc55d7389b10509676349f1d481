{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    registerTypeVariablesOn(classType, new HashSet<>());\n}\n\nprivate void registerTypeVariablesOn(Type classType, Set<ParameterizedType> processedTypes) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    if (processedTypes.contains(parameterizedType)) {\n        return;\n    }\n    processedTypes.add(parameterizedType);\n\n    Type rawType = parameterizedType.getRawType();\n    if (!(rawType instanceof Class)) {\n        return;\n    }\n    Class<?> rawClass = (Class<?>) rawType;\n    TypeVariable[] typeParameters = rawClass.getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        Type actualTypeArgument = actualTypeArguments[i];\n        TypeVariable typeParameter = typeParameters[i];\n\n        if (actualTypeArgument instanceof ParameterizedType) {\n            // Recursively register nested type variables\n            registerTypeVariablesOn(actualTypeArgument, processedTypes);\n        }\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}