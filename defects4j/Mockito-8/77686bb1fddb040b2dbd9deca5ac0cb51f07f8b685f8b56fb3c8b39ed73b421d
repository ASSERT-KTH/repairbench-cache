{
    "generation": "    protected void registerTypeVariablesOn(Type classType) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        Type rawType = parameterizedType.getRawType();\n\n        // The raw type of a ParameterizedType is expected to be Class<?>.\n        // If it's not a Class, it cannot have type parameters in the way Class.getTypeParameters() expects.\n        if (!(rawType instanceof Class<?>)) {\n            return;\n        }\n\n        TypeVariable<?>[] typeParameters = ((Class<?>) rawType).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\n        // Basic sanity check, though ParameterizedType should ensure this.\n        if (typeParameters.length != actualTypeArguments.length) {\n           // Inconsistent state, return to avoid potential errors.\n           return;\n        }\n\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable<?> typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            // Fix for StackOverflowError:\n            // Avoid mapping a type variable to itself (e.g., T -> T).\n            // This occurs in recursive type definitions like class X<T extends X<T>>\n            // when processing the bound X<T>. Such a mapping is unhelpful for resolution\n            // and can lead to infinite recursion if the resolution algorithm follows the mapping.\n            if (actualTypeArgument.equals(typeParameter)) {\n                continue; // Skip self-mapping\n            }\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else {\n                // Register the mapping from the type variable (e.g., T in List<T>)\n                // to the actual type argument (e.g., String in List<String>).\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}