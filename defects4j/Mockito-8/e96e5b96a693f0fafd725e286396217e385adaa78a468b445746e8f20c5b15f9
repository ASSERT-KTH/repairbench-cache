{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    Type rawType = parameterizedType.getRawType();\n    TypeVariable[] typeParameters;\n    if (rawType instanceof Class) {\n        typeParameters = ((Class<?>) rawType).getTypeParameters();\n    } else if (rawType instanceof ParameterizedType) {\n        // Handle recursive case where raw type is itself a parameterized type\n        registerTypeVariablesOn(rawType);\n        return;\n    } else {\n        return;\n    }\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        if (i >= typeParameters.length) {\n            break; // prevent array index out of bounds if typeParameters is shorter\n        }\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else if (actualTypeArgument instanceof TypeVariable) {\n            // Handle case where actual type argument is another type variable\n            registerTypeVariablesOn(actualTypeArgument);\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}