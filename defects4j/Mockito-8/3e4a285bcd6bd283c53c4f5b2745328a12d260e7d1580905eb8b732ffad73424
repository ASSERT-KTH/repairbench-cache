{
    "generation": "    protected void registerTypeVariablesOn(Type classType) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        Type rawType = parameterizedType.getRawType();\n        // Ensure the raw type is a Class before getting type parameters\n        if (!(rawType instanceof Class)) {\n            return;\n        }\n        TypeVariable<?>[] typeParameters = ((Class<?>) rawType).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\n        // Add basic sanity check for length mismatch, although this shouldn't happen with valid types\n        if (actualTypeArguments.length != typeParameters.length) {\n             // This might indicate an inconsistent type structure. Silently returning might be\n             // reasonable if the caller handles missing type information gracefully.\n             // Alternatively, logging a warning or throwing an exception could be considered.\n            return;\n        }\n\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable<?> typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            // Prevent mapping a type variable to itself (e.g., T -> T in class Foo<T extends Foo<T>>)\n            // Such mappings don't provide new resolution information and can lead to\n            // infinite recursion when resolving types like T in the example.\n            if (actualTypeArgument.equals(typeParameter)) {\n                continue;\n            }\n\n            if (actualTypeArgument instanceof WildcardType) {\n                // Assuming boundsOf correctly extracts the bound(s) of the wildcard\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}