{
    "generation": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable<?>[] typeParameters =\n        ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        // avoid mapping a type\u2010variable to itself (self-referential generics)\n        if (actualTypeArgument instanceof TypeVariable\n                && actualTypeArgument.equals(typeParameter)) {\n            continue;\n        }\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(\n                typeParameter,\n                boundsOf((WildcardType) actualTypeArgument)\n            );\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}