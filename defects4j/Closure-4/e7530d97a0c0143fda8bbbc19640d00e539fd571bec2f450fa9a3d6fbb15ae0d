{
    "generation": "/**\n * Resolve the referenced type within the enclosing scope.\n */\n@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // TODO(user): Investigate whether it is really necessary to keep two\n  // different mechanisms for resolving named types, and if so, which order\n  // makes more sense. Now, resolution via registry is first in order to\n  // avoid triggering the warnings built into the resolution via properties.\n\n  // Detect cycles before doing anything, to prevent infinite recursion.\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n    // Once a cycle is detected and handled, do not continue resolution.\n    // Return the \"this\" type (the unresolved type) to prevent further processing.\n    return this;\n  }\n\n  boolean resolved = resolveViaRegistry(t, enclosing);\n  if (resolved) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  resolveViaProperties(t, enclosing);\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n    // Same as above: do not continue if a cycle is detected.\n    return this;\n  }\n\n  super.resolveInternal(t, enclosing);\n  if (isResolved()) {\n    finishPropertyContinuations();\n  }\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}