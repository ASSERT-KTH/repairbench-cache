{
    "generation": "  /**\n   * Resolve the referenced type within the enclosing scope.\n   */\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // If a cycle is detected at this point, it means this type is already\n    // being resolved further up the call stack, and we have encountered it again.\n    // Handling the cycle and immediately returning prevents StackOverflowError.\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      // Once the cycle is handled, further deep resolution for this type\n      // should be prevented. Return 'this' or the already established\n      // referenced type (if set up by handleTypeCycle) to break the recursion.\n      // Maintaining consistency with the original return structure.\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    boolean resolved = resolveViaRegistry(t, enclosing);\n\n    // The cycle detection has been moved to the beginning of the function.\n    // The checks after resolveViaRegistry/resolveViaProperties are no longer\n    // necessary as the initial check handles the recursive cycle detection\n    // by immediately returning upon re-entry for a cyclic type.\n\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    // If not resolved via registry, try via properties.\n    resolveViaProperties(t, enclosing);\n\n    // No need for a second cycle check here. If a cycle exists, the initial\n    // check upon re-entry into resolveInternal (for a cyclic type) would have caught it.\n\n    // Common post-resolution steps.\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}