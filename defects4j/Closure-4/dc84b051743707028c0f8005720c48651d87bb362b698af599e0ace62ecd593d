{
    "generation": "  /**\n   * Resolve the referenced type within the enclosing scope.\n   */\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Check for cycles first to prevent infinite recursion\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      return this;\n    }\n\n    // Try resolution via registry first\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    // If not resolved via registry, try via properties\n    if (!isResolved()) {\n      resolveViaProperties(t, enclosing);\n      \n      // Check for cycles again after property resolution\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n        return this;\n      }\n\n      super.resolveInternal(t, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n      }\n    }\n    \n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}