{
    "generation": "  /**\n   * Resolve the referenced type within the enclosing scope.\n   */\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Early exit for detected cycles to prevent StackOverflowError.\n    // If detectImplicitPrototypeCycle() returns true, it means this type\n    // is already on the resolution stack, indicating a circular dependency.\n    // In this case, we report the cycle error and return to break the recursion.\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      // Returning 'this' indicates that the resolution failed due to a cycle,\n      // preventing further recursive calls and allowing the system to\n      // proceed with the reported error.\n      return this;\n    }\n\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    boolean resolved = resolveViaRegistry(t, enclosing);\n\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    resolveViaProperties(t, enclosing);\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}