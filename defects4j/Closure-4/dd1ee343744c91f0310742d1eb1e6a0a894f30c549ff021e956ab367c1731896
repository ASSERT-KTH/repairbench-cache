{
    "generation": "  /**\n   * Resolve the referenced type within the enclosing scope.\n   */\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Prevent infinite recursion by checking for cycles early.\n    // If a cycle is detected, handle it and mark the type as resolved\n    // to avoid further resolution attempts.\n    // This is potentially expensive, so we should investigate optimizations later.\n    // See https://github.com/google/closure-compiler/issues/1441\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      // Mark this proxy as resolved, possibly to an error type or UnknownType,\n      // depending on how handleTypeCycle works. We must still call\n      // super.resolveInternal to ensure the resolution machinery knows\n      // we're \"done\" with this type for now.\n      super.resolveInternal(t, enclosing);\n      // Return the resolved type if possible, otherwise 'this' proxy.\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n\n    // Attempt 1: Resolve via registry.\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    // Note: Don't check for cycles again here. We checked at the beginning.\n\n    if (resolved) {\n      // If resolved via registry, finalize and return.\n      super.resolveInternal(t, enclosing);\n      // Ensure properties defined AFTER the type definition are resolved.\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    // Attempt 2: Resolve via properties in the scope.\n    resolveViaProperties(t, enclosing);\n    // Note: Don't check for cycles again here. We checked at the beginning.\n\n    // Finalize the resolution process. This runs regardless of whether\n    // resolution succeeded, so that we can try again later.\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      // Ensure properties defined AFTER the type definition are resolved.\n      finishPropertyContinuations();\n    }\n\n    // Return the resolved type or 'this' if resolution failed/deferred.\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}