{
    "generation": "  /**\n   * Resolve the referenced type within the enclosing scope.\n   */\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Call super.resolveInternal first. This ensures the base JSType's cycle\n    // detection (marking as 'resolving' via setResolvedType(this)) and\n    // initial resolution are handled. This is crucial to prevent StackOverflowError\n    // in cases of recursive type definitions.\n    JSType resolvedBySuper = super.resolveInternal(t, enclosing);\n\n    // If super.resolveInternal has already finished resolving this type to something\n    // other than itself, or if it detected a cycle and returned 'this' (meaning\n    // it's now marked as resolved and handled the cycle at its level), we can return its result.\n    // The `isResolved()` check on `this` will tell us if it's considered resolved.\n    // If resolvedBySuper is not 'this', super already found a complete resolution.\n    // If resolvedBySuper is 'this' and `isResolved()` is true, it means super\n    // identified it as cyclic or couldn't resolve further and marked it.\n    if (resolvedBySuper != this || (isResolved() && getResolvedType() == this)) {\n      // If super resolved it (or indicated a cycle by returning 'this' when resolved),\n      // finish TemplatizedType-specific continuations.\n      finishPropertyContinuations();\n      return resolvedBySuper;\n    }\n\n    // At this point, `this` is marked as 'resolving' (by `super.resolveInternal`),\n    // but it's not fully resolved by the superclass yet.\n    // Proceed with TemplatizedType-specific resolution mechanisms.\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n\n    // Check for implicit prototype cycle after registry resolution.\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      // If a cycle is detected and handled (reported), finalize properties\n      // and return 'this' to represent the cyclic type.\n      finishPropertyContinuations();\n      return this;\n    }\n\n    if (!resolvedViaRegistry) {\n      // If registry resolution didn't succeed, try properties resolution.\n      resolveViaProperties(t, enclosing);\n      // Check for cycles again after properties resolution.\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n        finishPropertyContinuations();\n        return this;\n      }\n    }\n\n    // Determine the final resolved type based on TemplatizedType's specific logic.\n    JSType finalTemplatizedResolution = registry.isLastGeneration() ?\n        getReferencedType() : this;\n\n    // If the TemplatizedType's logic found a different final resolution than `this`\n    // (which is the temporary state), update the `resolvedType` field of `this`.\n    // This ensures `this.isResolved()` reflects the true resolved state.\n    if (finalTemplatizedResolution != this) {\n      setResolvedType(finalTemplatizedResolution);\n    }\n\n    // Finish property continuations if this type is now considered fully resolved.\n    // The `isResolved()` check here confirms that `setResolvedType` was called\n    // with a final type (or 'this' for a cycle, which is also a final state for resolution).\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n\n    return finalTemplatizedResolution;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}