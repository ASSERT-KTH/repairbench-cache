{
    "generation": "  /**\n   * Resolve the referenced type within the enclosing scope.\n   */\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Check for cyclic resolution attempts at the very beginning.\n    // If this type is currently being resolved (i.e., it's on the resolution stack),\n    // we've detected a cycle. Handle it and return immediately to prevent StackOverflowError.\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      // Return the resolved type (likely an error type indicating the cycle)\n      // to break the recursion for this path.\n      return getReferencedType();\n    }\n\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    boolean resolved = resolveViaRegistry(t, enclosing);\n\n    // If a cycle was detected during or after registry resolution, handle and return.\n    // This handles cases where `resolveViaRegistry` completed but detected a cycle\n    // that wasn't caught by the initial `detectImplicitPrototypeCycle()` check\n    // (e.g., a cycle involving *other* types that only became apparent now).\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      return getReferencedType();\n    }\n\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    // If not resolved via registry (and no cycle was detected that broke the path),\n    // try resolving via properties.\n    resolveViaProperties(t, enclosing);\n\n    // Check for cycles again after property resolution, as it might expose new ones.\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      return getReferencedType();\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}