{
    "generation": "  /**\n   * Resolve the referenced type within the enclosing scope.\n   */\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n\n    // APR Fix: Detect implicit prototype cycle at the very beginning of the\n    // resolution process for this type. If a cycle is detected (meaning this\n    // type is already being resolved further up the call stack), it indicates\n    // an infinite recursion. Report the cycle error and return immediately\n    // to prevent StackOverflowError.\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      // Return 'this' to break the recursion and indicate an unresolved/erroneous state.\n      // Further attempts to resolve this type should respect its errored state.\n      return this;\n    }\n\n    boolean resolved = resolveViaRegistry(t, enclosing);\n\n    // The original code had additional `detectImplicitPrototypeCycle()` checks\n    // after `resolveViaRegistry` and `resolveViaProperties`. If the initial\n    // check at the method entry correctly prevents re-entry for this type\n    // while it's being resolved, these subsequent checks are not needed to\n    // prevent StackOverflowError. They might have been intended for other\n    // cycle detection semantics, but for addressing the StackOverflowError,\n    // the early return is crucial.\n\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    resolveViaProperties(t, enclosing);\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}