{
    "generation": "  /**\n   * Resolve the referenced type within the enclosing scope.\n   */\n  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // Early cycle detection: If this type is already being resolved upstream,\n    // it implies a cycle in the dependency graph. Report the error and\n    // return 'this' to break the recursion and allow subsequent analysis\n    // to proceed, albeit with an incomplete type.\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      return this;\n    }\n\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    boolean resolved = resolveViaRegistry(t, enclosing);\n\n    if (!resolved) {\n      // If not resolved by registry, try resolving via properties.\n      resolveViaProperties(t, enclosing);\n    }\n\n    // Resolve internal properties of *this* type and finalize its state.\n    // This must be called only once after all attempts to resolve the referenced\n    // type's external dependencies (registry/properties) have been made.\n    // This call might also mark the type as 'resolved'.\n    super.resolveInternal(t, enclosing);\n\n    // Perform post-resolution cleanup/finalization if the type is now resolved.\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n\n    // Return the final resolved type.\n    // If registry.isLastGeneration(), it means the type itself was a reference\n    // to another type which has now been fully resolved.\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}