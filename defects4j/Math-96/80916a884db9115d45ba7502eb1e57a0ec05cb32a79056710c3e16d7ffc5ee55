{
    "generation": "    /**\n     * Test for the equality of two Complex objects.\n     * <p>\n     * If both the real and imaginary parts of two Complex numbers\n     * are exactly the same, and neither is <code>Double.NaN</code>, the two\n     * Complex objects are considered to be equal.</p>\n     * <p>\n     * All <code>NaN</code> values are considered to be equal - i.e, if either\n     * (or both) real and imaginary parts of the complex number are equal\n     * to <code>Double.NaN</code>, the complex number is equal to\n     * <code>Complex.NaN</code>.</p>\n     *\n     * @param other Object to test for equality to this\n     * @return true if two Complex objects are equal, false if\n     *         object is null, not an instance of Complex, or\n     *         not equal to this Complex instance\n     *\n     */\n    public boolean equals(Object other) {\n        if (this == other) { // Check for identity.\n            return true;\n        }\n        if (other instanceof Complex) { // Check type and non-null.\n            Complex rhs = (Complex) other;\n            if (this.isNaN()) {\n                // If this is NaN, it is equal to rhs iff rhs is also NaN.\n                return rhs.isNaN();\n            } else if (rhs.isNaN()) {\n                // If rhs is NaN (and this is not), they are not equal.\n                return false;\n            } else {\n                // Neither this nor rhs is NaN.\n                // Compare real and imaginary parts using standard double comparison '=='.\n                // This treats +0.0 and -0.0 as equal.\n                // It also handles infinities correctly (Infinity == Infinity).\n                return (real == rhs.real) && (imaginary == rhs.imaginary);\n            }\n        }\n        // other is null or not an instance of Complex.\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}