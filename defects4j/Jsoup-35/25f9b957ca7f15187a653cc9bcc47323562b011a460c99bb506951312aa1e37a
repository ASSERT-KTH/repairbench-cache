{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                // todo confirm that check\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                // merge attributes onto real html\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {\n                return tb.process(t, InHead);\n            } else if (name.equals(\"body\")) {\n                tb.error(this);\n                LinkedList<Element> stack = tb.getStack();\n                if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                    // only in fragment case\n                    return false; // ignore\n                } else {\n                    tb.framesetOk(false);\n                    Element body = stack.get(1);\n                    for (Attribute attribute : startTag.getAttributes()) {\n                        if (!body.hasAttr(attribute.getKey()))\n                            body.attributes().put(attribute);\n                    }\n                }\n            } else if (name.equals(\"frameset\")) {\n                tb.error(this);\n                LinkedList<Element> stack = tb.getStack();\n                if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                    // only in fragment case\n                    return false; // ignore\n                } else if (!tb.framesetOk()) {\n                    return false; // ignore frameset\n                } else {\n                    Element second = stack.get(1);\n                    if (second.parent() != null)\n                        second.remove();\n                    // pop up to html element\n                    while (stack.size() > 1)\n                        stack.removeLast();\n                    tb.insert(startTag);\n                    tb.transition(InFrameset);\n                }\n            } else if (StringUtil.in(name,\n                    \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                    \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                    \"p\", \"section\", \"summary\", \"ul\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n            } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                    tb.error(this);\n                    tb.pop();\n                }\n                tb.insert(startTag);\n            } else if (StringUtil.in(name, \"pre\", \"listing\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n                // todo: ignore LF if next token\n                tb.framesetOk(false);\n            } else if (name.equals(\"form\")) {\n                if (tb.getFormElement() != null) {\n                    tb.error(this);\n                    return false;\n                }\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insertForm(startTag, true);\n            } else if (name.equals(\"li\")) {\n                tb.framesetOk(false);\n                LinkedList<Element> stack = tb.getStack();\n                for (int i = stack.size() - 1; i > 0; i--) {\n                    Element el = stack.get(i);\n                    if (el.nodeName().equals(\"li\")) {\n                        tb.process(new Token.EndTag(\"li\"));\n                        break;\n                    }\n                    if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                        break;\n                }\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n            } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                tb.framesetOk(false);\n                LinkedList<Element> stack = tb.getStack();\n                for (int i = stack.size() - 1; i > 0; i--) {\n                    Element el = stack.get(i);\n                    if (StringUtil.in(el.nodeName(), \"dd\", \"dt\")) {\n                        tb.process(new Token.EndTag(el.nodeName()));\n                        break;\n                    }\n                    if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                        break;\n                }\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n            } else if (name.equals(\"plaintext\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n                tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n            } else if (name.equals(\"button\")) {\n                if (tb.inButtonScope(\"button\")) {\n                    // close and reprocess\n                    tb.error(this);\n                    tb.process(new Token.EndTag(\"button\"));\n                    tb.process(startTag);\n                } else {\n                    tb.reconstructFormattingElements();\n                    tb.insert(startTag);\n                    tb.framesetOk(false);\n                }\n            } else if (name.equals(\"a\")) {\n                if (tb.getActiveFormattingElement(\"a\") != null) {\n                    tb.error(this);\n                    tb.process(new Token.EndTag(\"a\"));\n                    Element remainingA = tb.getFromStack(\"a\");\n                    if (remainingA != null) {\n                        tb.removeFromActiveFormattingElements(remainingA);\n                        tb.removeFromStack(remainingA);\n                    }\n                }\n                tb.reconstructFormattingElements();\n                Element a = tb.insert(startTag);\n                tb.pushActiveFormattingElements(a);\n            } else if (StringUtil.in(name,\n                    \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                tb.reconstructFormattingElements();\n                Element el = tb.insert(startTag);\n                tb.pushActiveFormattingElements(el);\n            } else if (name.equals(\"nobr\")) {\n                tb.reconstructFormattingElements();\n                if (tb.inScope(\"nobr\")) {\n                    tb.error(this);\n                    tb.process(new Token.EndTag(\"nobr\"));\n                    tb.reconstructFormattingElements();\n                }\n                Element el = tb.insert(startTag);\n                tb.pushActiveFormattingElements(el);\n            } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.insertMarkerToFormattingElements();\n                tb.framesetOk(false);\n            } else if (name.equals(\"table\")) {\n                if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n                tb.framesetOk(false);\n                tb.transition(InTable);\n            } else if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\")) {\n                tb.reconstructFormattingElements();\n                tb.insertEmpty(startTag);\n                tb.framesetOk(false);\n            } else if (name.equals(\"input\")) {\n                tb.reconstructFormattingElements();\n                Element el = tb.insertEmpty(startTag);\n                if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                    tb.framesetOk(false);\n            } else if (StringUtil.in(name, \"param\", \"source\", \"track\")) {\n                tb.insertEmpty(startTag);\n            } else if (name.equals(\"hr\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insertEmpty(startTag);\n                tb.framesetOk(false);\n            } else if (name.equals(\"image\")) {\n                startTag.name(\"img\");\n                return tb.process(startTag);\n            } else if (name.equals(\"isindex\")) {\n                tb.error(this);\n                if (tb.getFormElement() != null)\n                    return false;\n                tb.tokeniser.acknowledgeSelfClosingFlag();\n                tb.process(new Token.StartTag(\"form\"));\n                if (startTag.attributes.hasKey(\"action\")) {\n                    Element form = tb.getFormElement();\n                    form.attr(\"action\", startTag.attributes.get(\"action\"));\n                }\n                tb.process(new Token.StartTag(\"hr\"));\n                tb.process(new Token.StartTag(\"label\"));\n                String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                        startTag.attributes.get(\"prompt\") :\n                        \"This is a searchable index. Enter search keywords: \";\n                tb.process(new Token.Character(prompt));\n                Attributes inputAttribs = new Attributes();\n                for (Attribute attr : startTag.attributes) {\n                    if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))\n                        inputAttribs.put(attr);\n                }\n                inputAttribs.put(\"name\", \"isindex\");\n                tb.process(new Token.StartTag(\"input\", inputAttribs));\n                tb.process(new Token.EndTag(\"label\"));\n                tb.process(new Token.StartTag(\"hr\"));\n                tb.process(new Token.EndTag(\"form\"));\n            } else if (name.equals(\"textarea\")) {\n                tb.insert(startTag);\n                tb.tokeniser.transition(TokeniserState.Rcdata);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(Text);\n            } else if (name.equals(\"xmp\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.reconstructFormattingElements();\n                tb.framesetOk(false);\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"iframe\")) {\n                tb.framesetOk(false);\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"noembed\")) {\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"select\")) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.framesetOk(false);\n                HtmlTreeBuilderState state = tb.state();\n                if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                    tb.transition(InSelectInTable);\n                else\n                    tb.transition(InSelect);\n            } else if (StringUtil.in(\"optgroup\", \"option\")) {\n                if (tb.currentElement().nodeName().equals(\"option\"))\n                    tb.process(new Token.EndTag(\"option\"));\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n            } else if (StringUtil.in(\"rp\", \"rt\")) {\n                if (tb.inScope(\"ruby\")) {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                        tb.error(this);\n                        tb.popStackToBefore(\"ruby\");\n                    }\n                    tb.insert(startTag);\n                }\n            } else if (name.equals(\"math\")) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.tokeniser.acknowledgeSelfClosingFlag();\n            } else if (name.equals(\"svg\")) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.tokeniser.acknowledgeSelfClosingFlag();\n            } else if (StringUtil.in(name,\n                    \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n            }\n            break;\n\n        case EndTag:\n            Token.EndTag endTag2 = t.asEndTag();\n            name = endTag2.name();\n            if (name.equals(\"body\")) {\n                if (!tb.inScope(\"body\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.transition(AfterBody);\n                }\n            } else if (name.equals(\"html\")) {\n                boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                if (notIgnored)\n                    return tb.process(endTag2);\n            } else if (StringUtil.in(name,\n                    \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                    \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                    \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\")) {\n                if (!tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (name.equals(\"form\")) {\n                Element currentForm = tb.getFormElement();\n                tb.setFormElement(null);\n                if (currentForm == null || !tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.removeFromStack(currentForm);\n                }\n            } else if (name.equals(\"p\")) {\n                if (!tb.inButtonScope(name)) {\n                    tb.error(this);\n                    tb.process(new Token.StartTag(name));\n                    return tb.process(endTag2);\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (name.equals(\"li\")) {\n                if (!tb.inListItemScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                if (!tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"})) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");\n                }\n            } else if (name.equals(\"sarcasm\")) {\n                return anyOtherEndTag(t, tb);\n            } else if (StringUtil.in(name,\n                    \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                // Adoption Agency Algorithm.\n                OUTER:\n                for (int i = 0; i < 8; i++) {\n                    Element formatEl3 = tb.getActiveFormattingElement(name);\n                    if (formatEl3 == null)\n                        return anyOtherEndTag(t, tb);\n                    else if (!tb.onStack(formatEl3)) {\n                        tb.error(this);\n                        tb.removeFromActiveFormattingElements(formatEl3);\n                        return true;\n                    } else if (!tb.inScope(formatEl3.nodeName())) {\n                        tb.error(this);\n                        return false;\n                    } else if (tb.currentElement() != formatEl3)\n                        tb.error(this);\n\n                    Element furthestBlock3 = null;\n                    Element commonAncestor3 = null;\n                    boolean seenFormattingElement3 = false;\n                    LinkedList<Element> stack3 = tb.getStack();\n                    for (int si = 0; si < stack3.size() && si < 64; si++) {\n                        Element el3 = stack3.get(si);\n                        if (el3 == formatEl3) {\n                            commonAncestor3 = stack3.get(si - 1);\n                            seenFormattingElement3 = true;\n                        } else if (seenFormattingElement3 && tb.isSpecial(el3)) {\n                            furthestBlock3 = el3;\n                            break;\n                        }\n                    }\n                    if (furthestBlock3 == null) {\n                        tb.popStackToClose(formatEl3.nodeName());\n                        tb.removeFromActiveFormattingElements(formatEl3);\n                        return true;\n                    }\n\n                    Element node3 = furthestBlock3;\n                    Element lastNode3 = furthestBlock3;\n                    INNER:\n                    for (int j = 0; j < 3; j++) {\n                        if (tb.onStack(node3))\n                            node3 = tb.aboveOnStack(node3);\n                        if (!tb.isInActiveFormattingElements(node3)) {\n                            tb.removeFromStack(node3);\n                            continue INNER;\n                        } else if (node3 == formatEl3)\n                            break INNER;\n\n                        // create replacement clone with attributes\n                        Element replacement3 = new Element(Tag.valueOf(node3.nodeName()), tb.getBaseUri());\n                        for (Attribute attr : node3.attributes()) {\n                            replacement3.attributes().put(attr);\n                        }\n                        tb.replaceActiveFormattingElement(node3, replacement3);\n                        tb.replaceOnStack(node3, replacement3);\n                        node3 = replacement3;\n\n                        if (lastNode3 == furthestBlock3) {\n                            // bookmark logic\n                        }\n                        if (lastNode3.parent() != null)\n                            lastNode3.remove();\n                        node3.appendChild(lastNode3);\n                        lastNode3 = node3;\n                    }\n\n                    if (StringUtil.in(commonAncestor3.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                        if (lastNode3.parent() != null)\n                            lastNode3.remove();\n                        tb.insertInFosterParent(lastNode3);\n                    } else {\n                        if (lastNode3.parent() != null)\n                            lastNode3.remove();\n                        commonAncestor3.appendChild(lastNode3);\n                    }\n\n                    // create adopter clone with attributes\n                    Element adopter3 = new Element(formatEl3.tag(), tb.getBaseUri());\n                    for (Attribute attr : formatEl3.attributes()) {\n                        adopter3.attributes().put(attr);\n                    }\n                    Node[] childNodes3 = furthestBlock3.childNodes().toArray(new Node[furthestBlock3.childNodeSize()]);\n                    for (Node childNode3 : childNodes3) {\n                        adopter3.appendChild(childNode3);\n                    }\n                    furthestBlock3.appendChild(adopter3);\n\n                    tb.removeFromActiveFormattingElements(formatEl3);\n                    tb.removeFromStack(formatEl3);\n                    tb.insertOnStackAfter(furthestBlock3, adopter3);\n                }\n            } else if (StringUtil.in(name,\n                    \"applet\", \"marquee\", \"object\")) {\n                if (!tb.inScope(\"name\")) {\n                    if (!tb.inScope(name)) {\n                        tb.error(this);\n                        return false;\n                    }\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                    tb.clearFormattingElementsToLastMarker();\n                }\n            } else if (name.equals(\"br\")) {\n                tb.error(this);\n                tb.process(new Token.StartTag(\"br\"));\n                return false;\n            } else {\n                return anyOtherEndTag(t, tb);\n            }\n            break;\n        case EOF:\n            // stop parsing\n            break;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}