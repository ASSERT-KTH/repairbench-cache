{
    "generation": "  /**\n   * Determines whether the given property is visible in the current context.\n   * @param t The current traversal.\n   * @param getprop The getprop node.\n   */\n  private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      boolean isOverride = t.inGlobalScope() &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      // If we are overriding, we check the visibility of the property\n      // on the superclass, not the current class's implicit prototype,\n      // as the current class's definition is the one being created/modified.\n      // So, we find the inherited property's visibility.\n      ObjectType checkType = objectType;\n      if (isOverride) {\n        checkType = objectType.getImplicitPrototype();\n      }\n\n      JSDocInfo docInfo = null;\n      for (; checkType != null;\n           checkType = checkType.getImplicitPrototype()) {\n        docInfo = checkType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null &&\n            docInfo.getVisibility() != Visibility.INHERITED) {\n          break;\n        }\n      }\n\n      if (docInfo == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      boolean sameInput =\n          t.getInput().getName().equals(docInfo.getSourceName());\n      Visibility visibility = docInfo.getVisibility();\n      JSType ownerType = normalizeClassType(checkType);\n\n      // Handle general access control (private/protected).\n      // This applies to both read and write access, including attempts to override.\n      if (visibility == Visibility.PRIVATE) {\n        if (!sameInput) { // Private access from a different file.\n          if (isOverride) {\n            JSDocInfo overridingInfo = parent.getJSDocInfo();\n            Visibility overridingVisibility = overridingInfo == null ?\n                Visibility.INHERITED : overridingInfo.getVisibility();\n\n            if (overridingVisibility == Visibility.INHERITED) {\n              // If the overriding property has no explicit visibility, it's an\n              // illegal access of the private property (as in testNoPrivateAccessForProperties6).\n              compiler.report(\n                  t.makeError(getprop,\n                      BAD_PRIVATE_PROPERTY_ACCESS,\n                      propertyName,\n                      validator.getReadableJSTypeName(\n                          getprop.getFirstChild(), true)));\n              return;\n            }\n            // If overridingVisibility is not INHERITED, it means the override\n            // explicitly declares a visibility. This case falls through to the\n            // PRIVATE_OVERRIDE check below (as in testNoPrivateAccessForProperties8).\n          } else { // Not an override, normal read access of private property.\n            if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {\n              return;\n            }\n            if (currentClass == null || ownerType.differsFrom(currentClass)) {\n              compiler.report(\n                  t.makeError(getprop,\n                      BAD_PRIVATE_PROPERTY_ACCESS,\n                      propertyName,\n                      validator.getReadableJSTypeName(\n                          getprop.getFirstChild(), true)));\n              return;\n            }\n          }\n        }\n      } else if (visibility == Visibility.PROTECTED) {\n        // Protected access from a different file.\n        if (!sameInput) {\n          // Protected access is allowed if 'currentClass' is a subclass of 'ownerType'.\n          // Otherwise, it's a BAD_PROTECTED_PROPERTY_ACCESS.\n          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n            compiler.report(\n                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(\n                        getprop.getFirstChild(), true)));\n            return;\n          }\n        }\n      }\n      // If sameInput is true, or visibility is Public, or private/protected access\n      // passed the checks above, then we proceed to check override specifics.\n\n      // Now, check override-specific rules (e.g., visibility mismatch).\n      if (isOverride) {\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = overridingInfo == null ?\n            Visibility.INHERITED : overridingInfo.getVisibility();\n\n        // If the original property was private and accessed from a different file,\n        // AND the override *itself* explicitly declares a visibility, then it's\n        // an illegal override of a private property (as in testNoPrivateAccessForProperties8).\n        // This path is reached because the BAD_PRIVATE_PROPERTY_ACCESS check above\n        // returned only if overridingVisibility was INHERITED.\n        if (visibility == Visibility.PRIVATE && !sameInput) {\n          compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  ownerType.toString()));\n        } else if (overridingVisibility != Visibility.INHERITED &&\n            overridingVisibility != visibility) {\n          // Visibility mismatch, e.g., protected becomes public, or public becomes private.\n          compiler.report(\n              t.makeError(getprop, VISIBILITY_MISMATCH,\n                  visibility.name(), ownerType.toString(),\n                  overridingVisibility.name()));\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}