{
    "generation": "/**\n * Determines whether the given property is visible in the current context.\n * @param t The current traversal.\n * @param getprop The getprop node.\n * @param parent The parent node.\n */\nprivate void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n\n  // For prototype assignments in global scope, adjust the object type to the superclass.\n  boolean prototypeOverride = t.inGlobalScope() &&\n                              parent.getType() == Token.ASSIGN &&\n                              parent.getFirstChild() == getprop;\n  if (prototypeOverride && objectType != null) {\n    objectType = objectType.getImplicitPrototype();\n  }\n\n  if (objectType != null) {\n    // Find the lowest property defined on a class with visibility information.\n    JSDocInfo docInfo = null;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n\n    if (objectType == null) {\n      // We couldn't find a visibility modifier; assume it's public.\n      return;\n    }\n\n    boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n\n    // Determine whether this assignment is acting as an override. We consider it\n    // an override if it is an assignment (its getprop is the left-hand side) AND\n    // either we are in global scope (typical for prototype assignments) or the\n    // current class is present and differs from the owner of the property.\n    boolean isOverrideAssignment = (parent.getType() == Token.ASSIGN &&\n                                    parent.getFirstChild() == getprop &&\n                                    (t.inGlobalScope() ||\n                                     (currentClass != null && ownerType.differsFrom(currentClass))));\n\n    if (isOverrideAssignment) {\n      // Overriding a property from a superclass.\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = overridingInfo == null ?\n          Visibility.INHERITED : overridingInfo.getVisibility();\n\n      // For private properties, if the original property is private and the access is from a\n      // different file, then if the overriding property is itself explicitly marked as @private,\n      // report PRIVATE_OVERRIDE; otherwise, report BAD_PRIVATE_PROPERTY_ACCESS.\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        if (overridingVisibility == Visibility.PRIVATE) {\n          compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n        } else {\n          compiler.report(\n              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                          propertyName,\n                          validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n        }\n      } else if (overridingVisibility != Visibility.INHERITED &&\n                 overridingVisibility != visibility) {\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                        visibility.name(), objectType.toString(),\n                        overridingVisibility.name()));\n      }\n    } else {\n      // A normal property access.\n      if (sameInput) {\n        // Private access is always allowed in the same file.\n        return;\n      } else if (visibility == Visibility.PRIVATE &&\n                 (currentClass == null || ownerType.differsFrom(currentClass))) {\n        // If this is a constructor property assignment and we have a special allowance, then bail.\n        if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n        // Otherwise, report an error.\n        compiler.report(\n            t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                        propertyName,\n                        validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        // Legal protected accesses include:\n        //  1) Access in the same file.\n        //  2) Overriding in a subclass.\n        //  3) Access from inside a subclass.\n        // The first two cases have been handled above.\n        if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                          propertyName,\n                          validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}