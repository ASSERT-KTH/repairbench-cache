{
    "generation": "/**\n * Determines whether the given property is visible in the current context.\n * @param t The current traversal.\n * @param getprop The getprop node.\n * @param parent The parent node.\n */\nprivate void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n\n  if (objectType != null) {\n    // Are we performing an override (an assignment to an existing property),\n    // or just a normal access?\n    boolean isOverride =\n        parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop;\n\n    // If it's an override, skip the current class and look on the prototype chain.\n    if (isOverride) {\n      objectType = objectType.getImplicitPrototype();\n    }\n\n    // Find the lowest property on the prototype chain with visibility info.\n    JSDocInfo docInfo = null;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n\n    if (objectType == null) {\n      // No visibility annotation \u2192 public by default.\n      return;\n    }\n\n    boolean sameInput =\n        t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n\n    if (isOverride) {\n      // We're overriding a property on a superclass.\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = overridingInfo == null\n          ? Visibility.INHERITED\n          : overridingInfo.getVisibility();\n\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        // Original is @private in another file.\n        if (overridingVisibility == Visibility.PRIVATE) {\n          // The override is also marked @private.\n          compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        } else {\n          // Override lacks @private \u2192 treat as illegal private access.\n          compiler.report(\n              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      } else if (overridingVisibility != Visibility.INHERITED\n          && overridingVisibility != visibility) {\n        // The override has a visibility annotation that doesn't match.\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), objectType.toString(),\n                overridingVisibility.name()));\n      }\n\n    } else {\n      // A normal access (not defining/overriding a property).\n      if (sameInput) {\n        // Private access is always allowed within the same file.\n        return;\n      } else if (visibility == Visibility.PRIVATE\n          && (currentClass == null\n              || ownerType.differsFrom(currentClass))) {\n        // Check for the special \"private constructor\" pattern.\n        if (docInfo.isConstructor()\n            && isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n        // Illegal @private access from another file/different class.\n        compiler.report(\n            t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        // Protected: must be same file, an override, or inside a subclass.\n        if (currentClass == null\n            || !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}