{
    "generation": "  /**\n   * Determines whether the given property is visible in the current context.\n   * @param t The current traversal.\n   * @param getprop The getprop node.\n   * @param parent The parent of the getprop node.\n   */\n  private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Determine if this access is an override attempt in a different file\n      boolean isOverride = t.inGlobalScope() &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n      String currentInput = t.getInput().getName();\n\n      // Traverse to the lowest relevant class with visibility info\n      if (isOverride) {\n        // Move up the prototype chain\n        objectType = objectType.getImplicitPrototype();\n      }\n\n      JSDocInfo docInfo = null;\n      for (; objectType != null;\n           objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null &&\n            docInfo.getVisibility() != Visibility.INHERITED) {\n          break;\n        }\n      }\n\n      if (objectType == null) {\n        // No visibility found; default to public\n        return;\n      }\n\n      boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n      Visibility visibility = docInfo.getVisibility();\n      JSType ownerType = normalizeClassType(objectType);\n\n      if (isOverride) {\n        // Check for overriding visibility rules\n        if (visibility == Visibility.PRIVATE && !sameInput) {\n          compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        } else {\n          JSDocInfo overridingInfo = parent.getJSDocInfo();\n          Visibility overridingVisibility = overridingInfo == null\n              ? Visibility.INHERITED\n              : overridingInfo.getVisibility();\n\n          if (overridingVisibility != Visibility.INHERITED &&\n              overridingVisibility != visibility) {\n            compiler.report(\n                t.makeError(getprop, VISIBILITY_MISMATCH,\n                    visibility.name(), objectType.toString(),\n                    overridingVisibility.name()));\n          }\n        }\n      } else {\n        if (sameInput) {\n          // Same input allows private access\n          return;\n        } else if (visibility == Visibility.PRIVATE) {\n          if (docInfo.isConstructor() &&\n              isValidPrivateConstructorAccess(parent, currentInput)) {\n            return;\n          }\n          if (!isOverride && currentClass != null &&\n              !currentClass.isSubtype(ownerType)) {\n            compiler.report(\n                t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n          }\n        } else if (visibility == Visibility.PROTECTED) {\n          // Ensure protected access is within the same class hierarchy\n          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n            compiler.report(\n                t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n          }\n        }\n      }\n    }\n  }\n\n  private boolean isValidPrivateConstructorAccess(Node parent, String currentInput) {\n    // Check if we're accessing a private constructor within the same file\n    JSDocInfo parentDoc = parent.getJSDocInfo();\n    return parentDoc != null && parentDoc.getVisibility() == Visibility.PRIVATE &&\n           currentInput.equals(parentDoc.getSourceName());\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}