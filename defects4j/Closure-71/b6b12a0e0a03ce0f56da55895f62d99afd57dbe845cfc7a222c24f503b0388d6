{
    "generation": "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n\n  if (objectType != null) {\n    // Is this a normal property access, or are we trying to override\n    // an existing property?\n    boolean isOverride =\n        parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop &&\n        (t.inGlobalScope()\n         || (getprop.getFirstChild().isThis() && currentClass != null));\n\n    // If we're overriding, skip the current type only for prototype\n    // overrides; keep 'this' for instance-property overrides.\n    if (isOverride && !getprop.getFirstChild().isThis()) {\n      objectType = objectType.getImplicitPrototype();\n    }\n\n    // Find the lowest property defined on a class with visibility\n    // information.\n    JSDocInfo docInfo = null;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n\n    if (objectType == null) {\n      // No visibility info \u21d2 public.\n      return;\n    }\n\n    boolean sameInput =\n        t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n\n    if (isOverride) {\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = overridingInfo == null\n          ? Visibility.INHERITED\n          : overridingInfo.getVisibility();\n\n      // If the original is private and we're in a different file,\n      // we disallow overriding.  If there's no @private on the override\n      // we treat it as a bad access; if there is, we give the override\n      // error.\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        if (overridingVisibility == Visibility.INHERITED) {\n          compiler.report(\n              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        } else {\n          compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        }\n      } else if (overridingVisibility != Visibility.INHERITED &&\n          overridingVisibility != visibility) {\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), objectType.toString(),\n                overridingVisibility.name()));\n      }\n    } else {\n      if (sameInput) {\n        // private access is always allowed in the same file.\n        return;\n      } else if (visibility == Visibility.PRIVATE &&\n          (currentClass == null || ownerType.differsFrom(currentClass))) {\n        if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n        compiler.report(\n            t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        if (currentClass == null ||\n            !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}