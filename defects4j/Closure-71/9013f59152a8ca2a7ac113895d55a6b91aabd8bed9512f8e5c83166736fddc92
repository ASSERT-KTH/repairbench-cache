{
    "generation": "  /**\n   * Determines whether the given property is visible in the current context.\n   * @param t The current traversal.\n   * @param getprop The getprop node.\n   */\n  private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      boolean isOverride = t.inGlobalScope() &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      ObjectType lookupType = objectType;\n      if (isOverride) {\n        lookupType = lookupType.getImplicitPrototype();\n      }\n      JSDocInfo docInfo = null;\n      ObjectType foundType = lookupType;\n      for (; foundType != null;\n           foundType = foundType.getImplicitPrototype()) {\n        docInfo = foundType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null &&\n            docInfo.getVisibility() != Visibility.INHERITED) {\n          break;\n        }\n      }\n\n      if (foundType == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      boolean sameInput =\n          t.getInput().getName().equals(docInfo.getSourceName());\n      Visibility visibility = docInfo.getVisibility();\n      JSType ownerType = normalizeClassType(foundType);\n\n      if (isOverride) {\n        // Check an ASSIGN statement that's trying to override a property\n        // on a superclass.\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = overridingInfo == null ?\n            Visibility.INHERITED : overridingInfo.getVisibility();\n\n        // Check that (a) the property *can* be overridden, and\n        // (b) that the visibility of the override is the same as the\n        // visibility of the original property.\n\n        // The following check is not sufficient:\n        //   if (visibility == Visibility.PRIVATE && !sameInput)\n        // Instead, always check if the parent is overriding a private property\n        // defined in another file, and disallow it. This must be reported as\n        // BAD_PRIVATE_PROPERTY_ACCESS, not just PRIVATE_OVERRIDE.\n        //\n        // If overriding private property from different file, always error.\n        if (visibility == Visibility.PRIVATE && !sameInput) {\n          compiler.report(\n              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        } else if (overridingVisibility != Visibility.INHERITED &&\n            overridingVisibility != visibility) {\n          compiler.report(\n              t.makeError(getprop, VISIBILITY_MISMATCH,\n                  visibility.name(), foundType.toString(),\n                  overridingVisibility.name()));\n        } else if (visibility == Visibility.PRIVATE && sameInput) {\n          // In this case, check that the visibility on the override is also private.\n          if (overridingVisibility != Visibility.INHERITED &&\n              overridingVisibility != Visibility.PRIVATE) {\n            compiler.report(\n                t.makeError(getprop, VISIBILITY_MISMATCH,\n                    visibility.name(), foundType.toString(),\n                    overridingVisibility.name()));\n          }\n        }\n        // Regardless, for any override of a private property, if the\n        // parent is not in the same file as the docInfo, report PRIVATE_OVERRIDE.\n        // This is a separate error from BAD_PRIVATE_PROPERTY_ACCESS.\n        // For legacy reasons, report PRIVATE_OVERRIDE if the file is same,\n        // but the class is different.\n        if (visibility == Visibility.PRIVATE && !sameInput) {\n          // Already reported BAD_PRIVATE_PROPERTY_ACCESS above, so do not additionally report PRIVATE_OVERRIDE.\n        } else if (visibility == Visibility.PRIVATE) {\n          // Test if the owner type of the found original is different from the current class\n          // (or we're not in a class context).\n          if (currentClass == null || ownerType.differsFrom(currentClass)) {\n            compiler.report(\n                t.makeError(getprop, PRIVATE_OVERRIDE,\n                    foundType.toString()));\n          }\n        }\n      } else {\n        if (sameInput) {\n          // private access is always allowed in the same file.\n          return;\n        } else if (visibility == Visibility.PRIVATE &&\n            (currentClass == null || ownerType.differsFrom(currentClass))) {\n          if (docInfo.isConstructor() &&\n              isValidPrivateConstructorAccess(parent)) {\n            return;\n          }\n\n          // private access is not allowed outside the file from a different\n          // enclosing class.\n          compiler.report(\n              t.makeError(getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        } else if (visibility == Visibility.PROTECTED) {\n          // There are 3 types of legal accesses of a protected property:\n          // 1) Accesses in the same file\n          // 2) Overriding the property in a subclass\n          // 3) Accessing the property from inside a subclass\n          // The first two have already been checked for.\n          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n            compiler.report(\n                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(\n                        getprop.getFirstChild(), true)));\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}