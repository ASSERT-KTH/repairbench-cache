{
    "generation": "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n\n  if (objectType != null) {\n    // Determine if this assignment is overriding an existing property:\n    Node lhs = getprop.getFirstChild();\n    boolean isPrototypeOverride =\n        t.inGlobalScope()\n        && parent.getType() == Token.ASSIGN\n        && parent.getFirstChild() == getprop\n        && lhs.isGetProp();\n    boolean isInstanceOverride =\n        currentClass != null\n        && parent.getType() == Token.ASSIGN\n        && parent.getFirstChild() == getprop\n        && lhs.getType() == Token.THIS;\n    boolean isOverride = isPrototypeOverride || isInstanceOverride;\n\n    // If it's a prototype override, skip the first level\n    if (isPrototypeOverride) {\n      objectType = objectType.getImplicitPrototype();\n    }\n    JSDocInfo docInfo = null;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n\n    if (objectType == null) {\n      // No visibility info \u2192 assume public.\n      return;\n    }\n\n    boolean sameInput =\n        t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n\n    if (isOverride) {\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = overridingInfo == null\n          ? Visibility.INHERITED\n          : overridingInfo.getVisibility();\n\n      // (a) Private properties cannot be overridden across files.\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        if (isInstanceOverride) {\n          // Overriding a private instance property in a subclass\n          compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        } else {\n          // Overriding a private prototype property\n          compiler.report(\n              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(lhs, true)));\n        }\n      }\n      // (b) If the override carries its own visibility, it must match.\n      else if (overridingVisibility != Visibility.INHERITED &&\n               overridingVisibility != visibility) {\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), objectType.toString(),\n                overridingVisibility.name()));\n      }\n    } else {\n      // Normal property access checks.\n      if (sameInput) {\n        // Private access is always allowed in the same file.\n        return;\n      } else if (visibility == Visibility.PRIVATE &&\n          (currentClass == null || ownerType.differsFrom(currentClass))) {\n        if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n        compiler.report(\n            t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    lhs, true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        // Protected: allowed in same file or inside a subclass.\n        if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      lhs, true)));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}