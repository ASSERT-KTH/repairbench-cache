{
    "generation": "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n\n  if (objectType != null) {\n    // Detect prototype\u2010based overrides vs. instance\u2010based overrides.\n    boolean isAssign = parent.getType() == Token.ASSIGN\n        && parent.getFirstChild() == getprop;\n    boolean isProtoGet = getprop.getFirstChild().isGetProp()\n        && \"prototype\".equals(\n            getprop.getFirstChild().getLastChild().getString());\n    boolean isProtoOverride = isAssign && t.inGlobalScope() && isProtoGet;\n    boolean isInstanceOverride = isAssign\n        && getprop.getFirstChild().getType() == Token.THIS\n        && currentClass != null;\n    boolean isOverride = isProtoOverride || isInstanceOverride;\n\n    // Find the lowest property on the prototype chain with a visibility\n    // annotation.\n    ObjectType scanType = objectType;\n    if (isProtoOverride) {\n      // Skip the subclass prototype when overriding a prototype property.\n      scanType = scanType.getImplicitPrototype();\n    }\n    JSDocInfo docInfo = null;\n    ObjectType docOwnerType = null;\n    for (ObjectType cur = scanType; cur != null;\n         cur = cur.getImplicitPrototype()) {\n      docInfo = cur.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        docOwnerType = cur;\n        break;\n      }\n    }\n    if (docOwnerType == null) {\n      // No @private/@protected annotation found \u21d2 public.\n      return;\n    }\n\n    boolean sameInput =\n        t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(docOwnerType);\n\n    if (isOverride) {\n      // We're in an ASSIGN that's trying to override a superclass property.\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = overridingInfo == null\n          ? Visibility.INHERITED\n          : overridingInfo.getVisibility();\n\n      // (a) Private properties cannot be overridden across files.\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        if (overridingVisibility == Visibility.INHERITED) {\n          // No @private on the override \u21d2 treat as illegal access.\n          compiler.report(\n              t.makeError(getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        } else {\n          // @private was specified on the override \u21d2 wrong override.\n          compiler.report(\n              t.makeError(getprop,\n                  PRIVATE_OVERRIDE,\n                  docOwnerType.toString()));\n        }\n      }\n      // (b) If the override declares a visibility, it must match.\n      else if (overridingVisibility != Visibility.INHERITED\n          && overridingVisibility != visibility) {\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), docOwnerType.toString(),\n                overridingVisibility.name()));\n      }\n    } else {\n      // Normal property access.\n      if (sameInput) {\n        // private access is always allowed in the same file.\n        return;\n      } else if (visibility == Visibility.PRIVATE\n          && (currentClass == null\n              || ownerType.differsFrom(currentClass))) {\n        if (docInfo.isConstructor()\n            && isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n        compiler.report(\n            t.makeError(getprop,\n                BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        // Protected is allowed: (1) same file, (2) override, (3) inside subclass.\n        if (currentClass == null\n            || !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop,\n                  BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}