{
    "generation": "/**\n * Determines whether the given property is visible in the current context.\n * @param t The current traversal.\n * @param getprop The getprop node.\n */\nprivate void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n\n  if (objectType != null) {\n    // Determine if this is an override:\n    boolean isOverride = false;\n    if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop) {\n      // (1) prototype override at top level\n      if (t.inGlobalScope()) {\n        isOverride = true;\n      }\n      // (2) instance-property override in a subclass constructor\n      else if (getprop.getFirstChild().isThis() && currentClass != null) {\n        isOverride = true;\n      }\n    }\n\n    // If we're overriding, start the search on the superclass type.\n    if (isOverride) {\n      objectType = objectType.getImplicitPrototype();\n    }\n\n    // Find the lowest property defined on a class with visibility info.\n    JSDocInfo docInfo = null;\n    for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n\n    if (objectType == null) {\n      // No visibility modifier found; assume public.\n      return;\n    }\n\n    boolean sameInput =\n        t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n\n    if (isOverride) {\n      // We're overriding a property on a superclass.\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = (overridingInfo == null)\n          ? Visibility.INHERITED\n          : overridingInfo.getVisibility();\n\n      // (a) Overriding a private property:\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        if (overridingVisibility == Visibility.INHERITED) {\n          // Non-annotated override \u21d2 illegal private access\n          compiler.report(\n              t.makeError(getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        } else {\n          // Annotated override \u21d2 illegal private override\n          compiler.report(\n              t.makeError(getprop,\n                  PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        }\n      }\n      // (b) Override visibility mismatch\n      else if (overridingVisibility != Visibility.INHERITED &&\n               overridingVisibility != visibility) {\n        compiler.report(\n            t.makeError(getprop,\n                VISIBILITY_MISMATCH,\n                visibility.name(),\n                objectType.toString(),\n                overridingVisibility.name()));\n      }\n    } else {\n      // Non-override access checks.\n      if (sameInput) {\n        // private access is always allowed in the same file.\n        return;\n      } else if (visibility == Visibility.PRIVATE &&\n                 (currentClass == null || ownerType.differsFrom(currentClass))) {\n        if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n        compiler.report(\n            t.makeError(getprop,\n                BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        // Allowed only in same file, or from within a subclass.\n        if (currentClass == null ||\n            !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop,\n                  BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}