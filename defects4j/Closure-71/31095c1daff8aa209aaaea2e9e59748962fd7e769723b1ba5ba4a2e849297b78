{
    "generation": "/**\n * Determines whether the given property is visible in the current context.\n * @param t The current traversal.\n * @param getprop The getprop node.\n * @param parent The parent node of the getprop.\n */\nprivate void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n\n  if (objectType != null) {\n    // See if this is an override definition (either a prototype override\n    // at the top level or a JSDoc\u2010annotated assignment, e.g. in a constructor).\n    JSDocInfo overridingInfo = parent.getJSDocInfo();\n    boolean isOverride = parent.getType() == Token.ASSIGN\n        && parent.getFirstChild() == getprop\n        && (t.inGlobalScope() || overridingInfo != null);\n\n    // If it's a prototype override (foo.prototype.bar = ...), skip to the super.\n    if (isOverride && getprop.getFirstChild().isGetProp()) {\n      objectType = objectType.getImplicitPrototype();\n    }\n\n    // Find the nearest JSDocInfo with a non\u2010INHERITED visibility.\n    JSDocInfo docInfo = null;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n\n    if (objectType == null) {\n      // No explicit visibility found => public.\n      return;\n    }\n\n    boolean sameInput =\n        t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n\n    if (isOverride) {\n      // What visibility did the override declare?\n      Visibility overridingVisibility =\n          overridingInfo == null\n          ? Visibility.INHERITED\n          : overridingInfo.getVisibility();\n\n      // Overriding a private property?\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        if (overridingVisibility == Visibility.INHERITED) {\n          // No @private on the override => bad private access.\n          compiler.report(\n              t.makeError(getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        } else if (overridingVisibility == Visibility.PRIVATE) {\n          // @private override in a different file => private\u2010override.\n          compiler.report(\n              t.makeError(getprop,\n                  PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        } else {\n          // Declared with a wrong visibility.\n          compiler.report(\n              t.makeError(getprop,\n                  VISIBILITY_MISMATCH,\n                  visibility.name(),\n                  objectType.toString(),\n                  overridingVisibility.name()));\n        }\n      } else {\n        // Other visibility mismatch on override.\n        if (overridingVisibility != Visibility.INHERITED\n            && overridingVisibility != visibility) {\n          compiler.report(\n              t.makeError(getprop,\n                  VISIBILITY_MISMATCH,\n                  visibility.name(),\n                  objectType.toString(),\n                  overridingVisibility.name()));\n        }\n      }\n    } else {\n      // Normal access (not an override definition).\n      if (sameInput) {\n        // Private access in the same file is always allowed.\n        return;\n      } else if (visibility == Visibility.PRIVATE\n          && (currentClass == null\n              || ownerType.differsFrom(currentClass))) {\n        if (docInfo.isConstructor()\n            && isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n        compiler.report(\n            t.makeError(getprop,\n                BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        // Protected access checks...\n        if (currentClass == null\n            || !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop,\n                  BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}