{
    "generation": "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n\n  if (objectType != null) {\n    // Determine whether this is an override of an existing property.\n    // We only treat it as an override if it's an assignment to a property\n    // and the assignment node has JSDoc (so pure reads or un-annotated\n    // prototype assignments still count as normal access).\n    boolean isOverride =\n        parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop &&\n        parent.getJSDocInfo() != null &&\n        (t.inGlobalScope() || getprop.getFirstChild().isThis());\n\n    // Find the lowest property defined on a class with visibility info.\n    if (isOverride) {\n      objectType = objectType.getImplicitPrototype();\n    }\n    JSDocInfo docInfo = null;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n\n    if (objectType == null) {\n      // No visibility modifier found; assume public.\n      return;\n    }\n\n    boolean sameInput =\n        t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n\n    if (isOverride) {\n      // We're overriding a superclass property.\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility =\n          (overridingInfo == null)\n          ? Visibility.INHERITED\n          : overridingInfo.getVisibility();\n\n      // (a) Can't override a private property from another file.\n      // (b) If you declare a visibility on the override, it must match.\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        compiler.report(\n            t.makeError(getprop, PRIVATE_OVERRIDE,\n                objectType.toString()));\n      } else if (overridingVisibility != Visibility.INHERITED &&\n                 overridingVisibility != visibility) {\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), objectType.toString(),\n                overridingVisibility.name()));\n      }\n    } else {\n      // Normal access.\n      if (sameInput) {\n        // Private access always allowed within the same file.\n        return;\n      } else if (visibility == Visibility.PRIVATE &&\n                 (currentClass == null ||\n                  ownerType.differsFrom(currentClass))) {\n        // Allow private constructor calls in valid contexts.\n        if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n        // Otherwise it's a bad private access.\n        compiler.report(\n            t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        // Protected: same-file access or inside a subclass is OK.\n        // (Overrides already handled above.)\n        if (currentClass == null ||\n            !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}