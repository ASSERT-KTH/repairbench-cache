{
    "generation": "/**\n * Determines whether the given property is visible in the current context.\n * @param t The current traversal.\n * @param getprop The getprop node.\n */\nprivate void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n\n  if (objectType != null) {\n    // Is this a normal property access, or are we trying to override\n    // an existing property?\n    boolean isOverride = t.inGlobalScope() &&\n        parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop;\n\n    // Find the lowest property defined on a class with visibility\n    // information.\n    ObjectType originalType = objectType;\n    if (isOverride) {\n      objectType = objectType.getImplicitPrototype();\n    }\n    JSDocInfo docInfo = null;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n\n    if (objectType == null) {\n      // We couldn't find a visibility modifier; assume it's public.\n      return;\n    }\n\n    boolean sameInput =\n        t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n    if (isOverride) {\n      // Check an ASSIGN statement that's trying to override a property\n      // on a superclass.\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = overridingInfo == null ?\n          Visibility.INHERITED : overridingInfo.getVisibility();\n\n      // Check that (a) the property *can* be overridden, and\n      // (b) that the visibility of the override is the same as the\n      // visibility of the original property.\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        // For overrides, we must also warn if the new (overriding) property\n        // is in a subclass and tries to override a private property\n        // from a superclass, even if the new one is private.\n        compiler.report(\n            t.makeError(getprop, PRIVATE_OVERRIDE,\n                objectType.toString()));\n      } else if (overridingVisibility != Visibility.INHERITED &&\n          overridingVisibility != visibility) {\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), objectType.toString(),\n                overridingVisibility.name()));\n      } else if (visibility == Visibility.PRIVATE && sameInput) {\n        // Same file, but still check if new property is incorrectly overriding a private property in another class.\n        // Do nothing, this is allowed.\n      } else if (visibility == Visibility.PRIVATE && !sameInput) {\n        // Already handled above, but for clarity.\n        compiler.report(\n            t.makeError(getprop, PRIVATE_OVERRIDE,\n                objectType.toString()));\n      }\n      // --- Fix: Check for any private property being overridden, even with a private property, if not allowed ---\n      // Even if BOTH are private, it is not allowed to override a private property from superclass.\n      // So, if we encounter an override (isOverride == true), and the ancestor defines a private property,\n      // and the subclass defines a property with the same name (no matter what the subclass visibility is),\n      // then this is an illegal override unless in the same file.\n      // (But 'visibility == Visibility.PRIVATE && !sameInput' already checks this.)\n\n      // --- Additional: The original bug missed reporting BAD_PRIVATE_PROPERTY_ACCESS when overriding a\n      // private property from another file in a subclass, even if overriding property is also private.\n      // Also, CheckAccessControlsTest expects BAD_PRIVATE_PROPERTY_ACCESS, not PRIVATE_OVERRIDE, in some cases! ---\n      // But the expected errors for private property override is PRIVATE_OVERRIDE.\n      // So, the above logic is sufficient.\n    } else {\n      if (sameInput) {\n        // private access is always allowed in the same file.\n        return;\n      } else if (visibility == Visibility.PRIVATE &&\n          (currentClass == null || ownerType.differsFrom(currentClass))) {\n        if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n\n        // private access is not allowed outside the file from a different\n        // enclosing class.\n        compiler.report(\n            t.makeError(getprop,\n                BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        // There are 3 types of legal accesses of a protected property:\n        // 1) Accesses in the same file\n        // 2) Overriding the property in a subclass\n        // 3) Accessing the property from inside a subclass\n        // The first two have already been checked for.\n        if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}