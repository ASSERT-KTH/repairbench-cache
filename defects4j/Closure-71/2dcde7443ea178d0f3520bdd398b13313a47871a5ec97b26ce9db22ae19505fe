{
    "generation": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n  ObjectType receiverType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (receiverType == null) {\n    return;\n  }\n\n  // Determine if this is an assignment.\n  boolean isAssignment = parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;\n  boolean isOverride = false;\n  JSDocInfo docInfo = null;\n  ObjectType overrideOwner = null;\n\n  // Look for an inherited property (on the implicit prototype chain)\n  // that was defined with an explicit visibility.\n  for (ObjectType type = receiverType.getImplicitPrototype();\n       type != null;\n       type = type.getImplicitPrototype()) {\n    docInfo = type.getOwnPropertyJSDocInfo(propertyName);\n    if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n      // Only treat it as an override when this is an assignment.\n      if (isAssignment) {\n        isOverride = true;\n        overrideOwner = type;\n        break;\n      }\n    }\n  }\n\n  if (!isOverride) {\n    // Not an override \u2013 check for illegal access on the property defined on the receiver itself.\n    ObjectType foundType = null;\n    for (ObjectType type = receiverType; type != null; type = type.getImplicitPrototype()) {\n      docInfo = type.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n        foundType = type;\n        break;\n      }\n    }\n    if (foundType == null) {\n      // No visibility modifier was found; assume the property is public.\n      return;\n    }\n    boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(foundType);\n    if (sameInput) {\n      // Private access is allowed within the same file.\n      return;\n    } else if (visibility == Visibility.PRIVATE &&\n               (currentClass == null || ownerType.differsFrom(currentClass))) {\n      if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {\n        return;\n      }\n      // Illegal private access.\n      compiler.report(\n          t.makeError(getprop,\n              BAD_PRIVATE_PROPERTY_ACCESS,\n              propertyName,\n              validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n    } else if (visibility == Visibility.PROTECTED) {\n      // Illegal protected access.\n      if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n        compiler.report(\n            t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n      }\n    }\n  } else {\n    // This is an override of an inherited property.\n    boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(overrideOwner);\n    JSDocInfo overridingInfo = parent.getJSDocInfo();\n    Visibility overridingVisibility = (overridingInfo == null)\n        ? Visibility.INHERITED : overridingInfo.getVisibility();\n\n    // When overriding a private property,\n    // the overriding property must explicitly declare (i.e. not be INHERITED)\n    // a visibility that matches.\n    if (visibility == Visibility.PRIVATE && !sameInput) {\n      if (overridingVisibility == Visibility.INHERITED) {\n        // Overriding a private property without an explicit visibility is illegal.\n        compiler.report(\n            t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n      } else if (overridingVisibility != visibility) {\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), ownerType.toString(),\n                overridingVisibility.name()));\n      } else {\n        // Overriding a private property with an explicit visibility.\n        compiler.report(\n            t.makeError(getprop, PRIVATE_OVERRIDE,\n                ownerType.toString()));\n      }\n    } else if (overridingVisibility != Visibility.INHERITED &&\n               overridingVisibility != visibility) {\n      // Any other visibility mismatch on an override.\n      compiler.report(\n          t.makeError(getprop, VISIBILITY_MISMATCH,\n              visibility.name(), ownerType.toString(),\n              overridingVisibility.name()));\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}