{
    "generation": "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n\n  if (objectType != null) {\n    // Determine if we are attempting to override an existing property.\n    // (Note: removed the global scope check so that assignments in constructors\n    //  are also handled as overrides.)\n    boolean isOverride =\n        parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;\n\n    // When overriding, check the property on the superclass, not the subtype.\n    if (isOverride) {\n      objectType = objectType.getImplicitPrototype();\n    }\n    // Find the lowest property defined on a class with visibility information.\n    JSDocInfo docInfo = null;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n\n    if (objectType == null) {\n      // We couldn't find a visibility modifier; assume it's public.\n      return;\n    }\n\n    boolean sameInput =\n        t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n\n    if (isOverride) {\n      // Check an ASSIGN statement that's trying to override a property on a superclass.\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility =\n          overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();\n\n      // For private properties, determine the proper error type.\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        // If the overriding property is not explicitly marked private,\n        // then report a BAD_PRIVATE_PROPERTY_ACCESS error.\n        if (overridingVisibility != Visibility.PRIVATE) {\n          compiler.report(\n              t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        } else {\n          // Otherwise, report a PRIVATE_OVERRIDE error.\n          compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        }\n      } else if (overridingVisibility != Visibility.INHERITED &&\n                 overridingVisibility != visibility) {\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), objectType.toString(),\n                overridingVisibility.name()));\n      }\n    } else {\n      if (sameInput) {\n        // Private access is always allowed within the same file.\n        return;\n      } else if (visibility == Visibility.PRIVATE &&\n                 (currentClass == null || ownerType.differsFrom(currentClass))) {\n        if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n\n        // Private access is not allowed outside the file or in an unrelated class.\n        compiler.report(\n            t.makeError(getprop,\n                BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        // Legal accesses for a protected property are:\n        // 1) within the same file,\n        // 2) overriding the property in a subclass, or\n        // 3) accessing it from inside a subclass.\n        // The first two cases have already been checked.\n        if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}