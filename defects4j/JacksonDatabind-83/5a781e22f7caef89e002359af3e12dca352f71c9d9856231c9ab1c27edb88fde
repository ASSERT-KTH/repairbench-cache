{
    "generation": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n        String text = p.getValueAsString();\n        if (text != null) { // has String representation\n            if (text.length() == 0 || (text = text.trim()).length() == 0) {\n                // 04-Feb-2013, tatu: Usually should become null; but not always\n                return _deserializeFromEmptyString();\n            }\n\n            T result;\n            try {\n                // 19-May-2017, tatu: Used to require non-null result (assuming `null`\n                //    indicated error; but that seems wrong. Should be able to return\n                //    `null` as value.\n                result = _deserialize(text, ctxt);\n            } catch (IllegalArgumentException e) {\n                // If _deserialize throws IllegalArgumentException, try the problem handler\n                // The problem handler may return a replacement value (including null)\n                // or throw an exception if it cannot resolve the issue.\n                Object ob = ctxt.handleWeirdStringValue(_valueClass, text,\n                        \"not a valid textual representation: \" + e.getMessage());\n                // If handler resolved it (even to null), return the resolved value\n                return (T) ob;\n            } catch (MalformedURLException e) {\n                // Similar handling for MalformedURLException\n                Object ob = ctxt.handleWeirdStringValue(_valueClass, text,\n                        \"not a valid textual representation (malformed URL): \" + e.getMessage());\n                // If handler resolved it (even to null), return the resolved value\n                return (T) ob;\n            }\n\n            // If _deserialize completed without throwing an exception,\n            // its result (which can be null) is the deserialized value.\n            return result;\n        }\n        JsonToken t = p.getCurrentToken();\n        // [databind#381]\n        if (t == JsonToken.START_ARRAY) {\n            return _deserializeFromArray(p, ctxt);\n        }\n        if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n            // Trivial cases; null to null, instance of type itself returned as is\n            Object ob = p.getEmbeddedObject();\n            if (ob == null) {\n                return null;\n            }\n            if (_valueClass.isAssignableFrom(ob.getClass())) {\n                return (T) ob;\n            }\n            return _deserializeEmbedded(ob, ctxt);\n        }\n        return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}