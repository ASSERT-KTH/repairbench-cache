{
    "generation": "@SuppressWarnings(\"unchecked\")\n@Override\npublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    String text = p.getValueAsString();\n    if (text != null) { // has String representation\n        text = text.trim();\n        if (text.length() == 0) {\n            // empty String: delegate to the empty-string deserializer\n            return _deserializeFromEmptyString();\n        }\n        Exception cause = null;\n        try {\n            // Try to deserialize and return the result (even if it is null)\n            T result = _deserialize(text, ctxt);\n            return result;\n        } catch (IllegalArgumentException iae) {\n            cause = iae;\n        } catch (MalformedURLException me) {\n            cause = me;\n        }\n        // Allow a ProblemHandler a chance to handle the problem:\n        T fallback = (T) ctxt.handleWeirdStringValue(_valueClass, text, \"not a valid textual representation\", cause);\n        if (fallback != null) {\n            return fallback;\n        }\n        String msg = \"not a valid textual representation\";\n        if (cause != null && cause.getMessage() != null) {\n            msg += \", problem: \" + cause.getMessage();\n        }\n        JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);\n        if (cause != null) {\n            e.initCause(cause);\n        }\n        throw e;\n    }\n    JsonToken t = p.getCurrentToken();\n    if (t == JsonToken.START_ARRAY) {\n        return _deserializeFromArray(p, ctxt);\n    }\n    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n        Object ob = p.getEmbeddedObject();\n        if (ob == null) {\n            return null;\n        }\n        if (_valueClass.isAssignableFrom(ob.getClass())) {\n            return (T) ob;\n        }\n        return _deserializeEmbedded(ob, ctxt);\n    }\n    return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}