{
    "generation": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n        String text = p.getValueAsString();\n        if (text != null) { // has String representation\n            if (text.length() == 0 || (text = text.trim()).length() == 0) {\n                // 04-Feb-2013, tatu: Usually should become null; but not always\n                return _deserializeFromEmptyString();\n            }\n            \n            Exception actualCause = null;\n            T value = null;\n            try {\n                // 19-May-2017, tatu: Used to require non-null result (assuming `null`\n                //    indicated error; but that seems wrong. Should be able to return\n                //    `null` as value.\n                // Call _deserialize once and store the result.\n                value = _deserialize(text, ctxt);\n            } catch (IllegalArgumentException iae) {\n                actualCause = iae;\n            } catch (MalformedURLException me) {\n                actualCause = me;\n            }\n\n            // If _deserialize succeeded and returned a non-null value, return it directly.\n            if (value != null) {\n                return value;\n            }\n\n            // If _deserialize failed (threw exception, `actualCause` is set)\n            // or returned `null` (which for most scalar types indicates a problem\n            // unless explicitly handled, or needs ProblemHandler intervention),\n            // then we proceed to consult ProblemHandlers.\n\n            String msg = \"not a valid textual representation\";\n            if (actualCause != null) {\n                String m2 = actualCause.getMessage();\n                if (m2 != null) {\n                    msg = msg + \", problem: \"+m2;\n                }\n            }\n            \n            // 05-May-2016, tatu: [databind#1629]: Need to check ProblemHandler for null/default\n            // before throwing an exception directly.\n            // ctxt.handleWeirdStringValue will either return a resolved value (including null)\n            // or throw an appropriate JsonMappingException if no handler resolves it.\n            try {\n                Object ob = ctxt.handleWeirdStringValue(_valueClass, text, msg);\n                // If ProblemHandler resolved it (returned a value or null), return that.\n                return (T) ob;\n            } catch (JsonMappingException e) {\n                // If handleWeirdStringValue (or a ProblemHandler within it) threw a JsonMappingException, re-throw it.\n                throw e;\n            } catch (Exception e) {\n                // Catch any other exceptions that might be thrown by a ProblemHandler\n                // and wrap them in a JsonMappingException.\n                JsonMappingException e2 = ctxt.weirdStringException(text, _valueClass, msg);\n                e2.initCause(e);\n                throw e2;\n            }\n        }\n        JsonToken t = p.getCurrentToken();\n        // [databind#381]\n        if (t == JsonToken.START_ARRAY) {\n            return _deserializeFromArray(p, ctxt);\n        }\n        if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n            // Trivial cases; null to null, instance of type itself returned as is\n            Object ob = p.getEmbeddedObject();\n            if (ob == null) {\n                return null;\n            }\n            if (_valueClass.isAssignableFrom(ob.getClass())) {\n                return (T) ob;\n            }\n            return _deserializeEmbedded(ob, ctxt);\n        }\n        return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}