{
    "generation": "@SuppressWarnings(\"unchecked\")\n@Override\npublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n    String text = p.getValueAsString();\n    if (text != null) { // has String representation\n        if (text.length() == 0 || (text = text.trim()).length() == 0) {\n            // 04-Feb-2013, tatu: Usually should become null; but not always\n            return _deserializeFromEmptyString();\n        }\n        Exception cause = null;\n        try {\n            // 19-May-2017, tatu: Used to require non-null result (assuming `null`\n            //    indicated error; but that seems wrong. Should be able to return\n            //    `null` as value.\n            T result = _deserialize(text, ctxt);\n            if (result != null) {\n                return result;\n            }\n        } catch (IllegalArgumentException iae) {\n            cause = iae;\n        } catch (MalformedURLException me) {\n            cause = me;\n        }\n        // -------------- PATCH: Handle possible value returned by problem handler --------------\n        Object problemValue = ctxt.handleWeirdStringValue(_valueClass, text, \"not a valid textual representation\"\n                + ((cause != null && cause.getMessage() != null)\n                   ? (\", problem: \" + cause.getMessage())\n                   : \"\"));\n        if (problemValue == null) {\n            return null;\n        }\n        // accept if type is assignable\n        if (_valueClass.isInstance(problemValue)) {\n            return (T) problemValue;\n        }\n        // -------------- END PATCH --------------\n        // [Old code path, used only if problem handler did not resolve]\n        String msg = \"not a valid textual representation\";\n        if (cause != null) {\n            String m2 = cause.getMessage();\n            if (m2 != null) {\n                msg = msg + \", problem: \"+m2;\n            }\n        }\n        // 05-May-2016, tatu: Unlike most usage, this seems legit, so...\n        JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);\n        if (cause != null) {\n            e.initCause(cause);\n        }\n        throw e;\n        // nothing to do here, yet? We'll fail anyway\n    }\n    JsonToken t = p.getCurrentToken();\n    // [databind#381]\n    if (t == JsonToken.START_ARRAY) {\n        return _deserializeFromArray(p, ctxt);\n    }\n    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n        // Trivial cases; null to null, instance of type itself returned as is\n        Object ob = p.getEmbeddedObject();\n        if (ob == null) {\n            return null;\n        }\n        if (_valueClass.isAssignableFrom(ob.getClass())) {\n            return (T) ob;\n        }\n        return _deserializeEmbedded(ob, ctxt);\n    }\n    return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}