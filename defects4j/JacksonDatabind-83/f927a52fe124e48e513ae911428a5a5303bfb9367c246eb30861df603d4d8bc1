{
    "generation": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n        String text = p.getValueAsString();\n        if (text != null) { // has String representation\n            if (text.length() == 0 || (text = text.trim()).length() == 0) {\n                // 04-Feb-2013, tatu: Usually should become null; but not always\n                return _deserializeFromEmptyString();\n            }\n\n            Throwable cause = null;\n            T result = null;\n            try {\n                // 1. Attempt deserialization. This should be done only once.\n                result = _deserialize(text, ctxt);\n            } catch (Exception e) {\n                // 2. If an exception occurs, store it as 'cause'.\n                cause = e;\n            }\n\n            // 3. If deserialization succeeded (returned a value, even null)\n            // and no exception was caught, return the result directly.\n            // This covers the case where _deserialize returns a valid `null` value.\n            if (cause == null) {\n                return result;\n            }\n\n            // 4. If we are here, 'cause' is not null, meaning an exception occurred during _deserialize.\n            // Construct an error message and then allow ProblemHandler to intervene.\n            String msg = \"not a valid textual representation\";\n            String m2 = cause.getMessage();\n            if (m2 != null) {\n                msg = msg + \", problem: \"+m2;\n            }\n\n            // 5. Try to handle the problem using ProblemHandlers.\n            // ctxt.handleWeirdStringValue will return a value if a handler resolves it,\n            // or throw InvalidFormatException if no handler resolves it.\n            try {\n                return (T) ctxt.handleWeirdStringValue(_valueClass, text, msg);\n            } catch (InvalidFormatException e) {\n                // 6. If a handler was not successful and ctxt.handleWeirdStringValue threw an InvalidFormatException,\n                // re-throw it, optionally linking the original cause.\n                e.initCause(cause);\n                throw e;\n            }\n        }\n\n        JsonToken t = p.getCurrentToken();\n        // [databind#381]\n        if (t == JsonToken.START_ARRAY) {\n            return _deserializeFromArray(p, ctxt);\n        }\n        if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n            // Trivial cases; null to null, instance of type itself returned as is\n            Object ob = p.getEmbeddedObject();\n            if (ob == null) {\n                return null;\n            }\n            if (_valueClass.isAssignableFrom(ob.getClass())) {\n                return (T) ob;\n            }\n            return _deserializeEmbedded(ob, ctxt);\n        }\n        return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}