{
    "generation": "@SuppressWarnings(\"unchecked\")\n@Override\npublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    String text = p.getValueAsString();\n    if (text != null) { // has String representation\n        if (text.length() == 0 || (text = text.trim()).length() == 0) {\n            // empty -> delegate to empty-string handler\n            return _deserializeFromEmptyString();\n        }\n        Exception cause = null;\n        try {\n            // single call: even a null result is legitimate\n            return _deserialize(text, ctxt);\n        } catch (IllegalArgumentException iae) {\n            cause = iae;\n        } catch (MalformedURLException me) {\n            cause = me;\n        }\n        String msg = \"not a valid textual representation\";\n        String m2 = cause.getMessage();\n        if (m2 != null) {\n            msg += \", problem: \" + m2;\n        }\n        // give any registered ProblemHandler a chance;\n        // handleWeirdStringValue will either return a (possibly null) value,\n        // or throw if unhandled\n        try {\n            return ctxt.handleWeirdStringValue(_valueClass, text, msg);\n        } catch (JsonMappingException e) {\n            e.initCause(cause);\n            throw e;\n        }\n    }\n\n    JsonToken t = p.getCurrentToken();\n    // [databind#381]\n    if (t == JsonToken.START_ARRAY) {\n        return _deserializeFromArray(p, ctxt);\n    }\n    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n        Object ob = p.getEmbeddedObject();\n        if (ob == null) {\n            return null;\n        }\n        if (_valueClass.isAssignableFrom(ob.getClass())) {\n            return (T) ob;\n        }\n        return _deserializeEmbedded(ob, ctxt);\n    }\n    return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}