{
    "generation": "@SuppressWarnings(\"unchecked\")\n@Override\npublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // try to get a textual representation\n    String text = p.getValueAsString();\n    if (text != null) {\n        // empty or blank String may be handled specially:\n        if (text.length() == 0 || (text = text.trim()).length() == 0) {\n            return _deserializeFromEmptyString();\n        }\n        // now try normal conversion\n        Exception cause = null;\n        T result = null;\n        try {\n            result = _deserialize(text, ctxt);\n        } catch (IllegalArgumentException iae) {\n            cause = iae;\n        } catch (MalformedURLException me) {\n            cause = me;\n        }\n        // if no exception was thrown, return whatever result we got\n        if (cause == null) {\n            return result;\n        }\n        // otherwise allow any registered ProblemHandler to handle the bad value\n        String msg = \"not a valid textual representation\";\n        String m2 = cause.getMessage();\n        if (m2 != null) {\n            msg += \", problem: \" + m2;\n        }\n        try {\n            // this will either return a substitute (possibly null), or\n            // throw as a JsonMappingException if not handled\n            return (T) ctxt.handleWeirdStringValue(_valueClass, text, msg);\n        } catch (JsonMappingException e) {\n            // if default handling rethrows, attach original cause for diagnostics\n            if (e.getCause() == null) {\n                e.initCause(cause);\n            }\n            throw e;\n        }\n    }\n    // non-textual case:\n    JsonToken t = p.getCurrentToken();\n    if (t == JsonToken.START_ARRAY) {\n        return _deserializeFromArray(p, ctxt);\n    }\n    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n        Object ob = p.getEmbeddedObject();\n        if (ob == null) {\n            return null;\n        }\n        if (_valueClass.isAssignableFrom(ob.getClass())) {\n            return (T) ob;\n        }\n        return _deserializeEmbedded(ob, ctxt);\n    }\n    // anything else is unexpected\n    return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}