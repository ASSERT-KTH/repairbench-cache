{
    "generation": "@SuppressWarnings(\"unchecked\")\n@Override\npublic T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    // try coercion to String (covers String, numbers, booleans)\n    String text = p.getValueAsString();\n    if (text != null) {\n        if (text.length() == 0 || (text = text.trim()).length() == 0) {\n            // empty or all-whitespace\n            return _deserializeFromEmptyString();\n        }\n        Exception cause = null;\n        T value;\n        try {\n            // delegate real parsing; may legitimately return null\n            value = _deserialize(text, ctxt);\n            return value;\n        } catch (IllegalArgumentException iae) {\n            cause = iae;\n        } catch (MalformedURLException me) {\n            cause = me;\n        }\n        // did not parse cleanly, build a failure message\n        String msg = \"not a valid textual representation\";\n        if (cause != null && cause.getMessage() != null) {\n            msg += \", problem: \" + cause.getMessage();\n        }\n        // allow user-registered ProblemHandler to handle this \"weird\" string\n        try {\n            return (T) ctxt.handleWeirdStringValue(_valueClass, text, msg);\n        } catch (JsonMappingException e) {\n            // if handler did not handle and threw, attach original cause\n            if (cause != null) {\n                e.initCause(cause);\n            }\n            throw e;\n        }\n    }\n    // no String representation: handle arrays or embedded object, or error out\n    JsonToken t = p.getCurrentToken();\n    if (t == JsonToken.START_ARRAY) {\n        return _deserializeFromArray(p, ctxt);\n    }\n    if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n        Object ob = p.getEmbeddedObject();\n        if (ob == null) {\n            return null;\n        }\n        if (_valueClass.isAssignableFrom(ob.getClass())) {\n            return (T) ob;\n        }\n        return _deserializeEmbedded(ob, ctxt);\n    }\n    return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}