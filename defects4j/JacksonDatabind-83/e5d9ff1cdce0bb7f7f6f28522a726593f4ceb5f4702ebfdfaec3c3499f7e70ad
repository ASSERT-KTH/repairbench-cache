{
    "generation": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n        String text = p.getValueAsString();\n        if (text != null) { // has String representation\n            if (text.length() == 0 || (text = text.trim()).length() == 0) {\n                // 04-Feb-2013, tatu: Usually should become null; but not always\n                return _deserializeFromEmptyString();\n            }\n            // Otherwise, let's see if we can convert\n            try {\n                // 19-May-2017, tatu: Used to require non-null result (assuming `null`\n                //    indicated error; but that seems wrong. Should be able to return\n                //    `null` as value.\n                T result = _deserialize(text, ctxt); // Call only once\n                return result; // null is fine\n            } catch (IllegalArgumentException | MalformedURLException e) { // Combine catches for brevity\n                // If we get exception, try to let handler deal with it\n                String msg = \"not a valid textual representation\";\n                String m2 = e.getMessage();\n                if (m2 != null) {\n                    msg = msg + \", problem: \"+m2;\n                }\n                // Call method that checks handler(s), returns value if handled,\n                // or throws exception if not handled (or if handler tells it to)\n                // NOTE: null return value IS possible and needs to be handled by caller.\n                return (T) ctxt.handleWeirdStringValue(_valueClass, text, msg);\n            }\n            // Other exceptions (IOExceptions other than JsonMappingException, which are caught) will propagate\n        }\n\n        // If not string, maybe array or embedded object?\n        JsonToken t = p.getCurrentToken();\n        // [databind#381]\n        if (t == JsonToken.START_ARRAY) {\n            return _deserializeFromArray(p, ctxt);\n        }\n        if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n            // Trivial cases; null to null, instance of type itself returned as is\n            Object ob = p.getEmbeddedObject();\n            if (ob == null) {\n                return null;\n            }\n            if (_valueClass.isAssignableFrom(ob.getClass())) {\n                return (T) ob;\n            }\n            return _deserializeEmbedded(ob, ctxt);\n        }\n        // Wups, what is it then?\n        return (T) ctxt.handleUnexpectedToken(_valueClass, p);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}