{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n\n  // Record global variable and function declarations\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, n); // Fix: Record the function node, not the name node\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n\n  // Record assignments and call sites\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null && ns.onlyAffectsClassDef) {\n      JsName name = getName(ns.name, false);\n      if (name != null && nameNode.isGetProp() && nameNode.getString().equals(\"inherits\")) {\n        // Handle goog.inherits specifically\n        Node arg1 = n.getSecondChild();\n        if (arg1 != null && arg1.isQualifiedName()) {\n          String className = arg1.getString();\n          JsName classInfo = getName(className, false);\n          if (classInfo != null) {\n            refNodes.add(new ClassDefiningFunctionNode(classInfo, n, parent, parent.getParent()));\n          }\n        }\n      } else if (name != null) {\n        refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}