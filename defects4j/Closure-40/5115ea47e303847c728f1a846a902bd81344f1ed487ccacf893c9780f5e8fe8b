{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null) {\n            JsName nameInfo = getName(nameNode.getString(), true);\n            recordSet(nameInfo.name, nameNode);\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall()) {\n        Node callTarget = n.getFirstChild(); // The function being called (e.g., goog.inherits)\n        NameInformation callTargetInfo = createNameInformation(t, callTarget, n);\n        if (callTargetInfo != null && callTargetInfo.onlyAffectsClassDef) {\n          // If this call affects a class definition, the first argument is typically the class being defined.\n          Node classBeingDefinedNode = n.getChildAtIndex(1); // Get the first argument\n          if (classBeingDefinedNode != null) {\n            NameInformation classInfo = createNameInformation(t, classBeingDefinedNode, n);\n            if (classInfo != null && classInfo.name != null) {\n              // Get the JsName for the class being defined. Use 'false' to only get existing names.\n              // If the class is not recognized (e.g., not declared with @constructor), 'name' will be null.\n              JsName name = getName(classInfo.name, false);\n              if (name != null) {\n                refNodes.add(new ClassDefiningFunctionNode(\n                    name, n, parent, parent.getParent()));\n              }\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}