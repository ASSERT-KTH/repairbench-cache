{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          // Function declarations are always namespace defining.\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, nameNode);\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        // Determining if the call target is a class defining function like\n        // goog.inherits is potentially expensive, so we short circuit the\n        // ClassDefiningFunctionNode creation if we know that the name is\n        // not potentially referring to such a function.\n        if (ns != null && ns.onlyAffectsClassDef) {\n          JsName name = getName(ns.name, false);\n          if (name != null) {\n            refNodes.add(new ClassDefiningFunctionNode(\n                name, n, parent, parent.getParent()));\n\n            // If this call defines a class relationship (like goog.inherits),\n            // we need to ensure that the names of the classes involved\n            // (passed as arguments) are created in our map. This is necessary\n            // because the classes might not be defined anywhere else,\n            // especially in the case of interfaces or forward declarations.\n            // The later stages of analysis need to find these names.\n            Node firstArg = nameNode.getNext();\n            if (firstArg != null) {\n              NameInformation firstArgNs = createNameInformation(t, firstArg, n);\n              if (firstArgNs != null) {\n                getName(firstArgNs.name, true); // Ensure child class name exists\n              }\n\n              Node secondArg = firstArg.getNext();\n              if (secondArg != null) {\n                NameInformation secondArgNs = createNameInformation(t, secondArg, n);\n                if (secondArgNs != null) {\n                  getName(secondArgNs.name, true); // Ensure parent class name exists\n                }\n              }\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}