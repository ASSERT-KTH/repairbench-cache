{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // Record global variable and function declarations\n    if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n            NameInformation ns = createNameInformation(t, n, parent);\n            Preconditions.checkNotNull(ns);\n            recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n            Node nameNode = n.getFirstChild();\n            NameInformation ns = createNameInformation(t, nameNode, n);\n            if (ns != null) {\n                JsName nameInfo = getName(nameNode.getString(), true);\n                recordSet(nameInfo.name, nameNode);\n            }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n            Node \u0444\u043e\u0442utherland = n.getNext();\n            if (\u0444\u043e\u0442utherland.isFunction()) {\n                // There is a function as a property in an object literal\n                NameInformation ns = createNameInformation(t, n, parent);\n                if (ns != null) {\n                    // Special handling for 'goog.inherits' calls\n                    if (ns.name.startsWith(\"goog.inherits\")) {\n                        // Extract the correct function names from the arguments\n                        // Ensure proper recording considering inheritance\n                        recordFunctionInheritance(ns, n, parent);\n                    } else {\n                        JsName name = getName(ns.name, true);\n                        recordSet(name.name, n);\n                    }\n                }\n            }\n        }\n    }\n\n    // Record assignments and call sites\n    if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n            if (ns.isPrototype) {\n                recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n            } else {\n                recordSet(ns.name, nameNode);\n            }\n        }\n    } else if (n.isCall()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.onlyAffectsClassDef) {\n            JsName name = getName(ns.name, false);\n            if (name != null) {\n                refNodes.add(new ClassDefiningFunctionNode(\n                        name, n, parent, parent.getParent()));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}