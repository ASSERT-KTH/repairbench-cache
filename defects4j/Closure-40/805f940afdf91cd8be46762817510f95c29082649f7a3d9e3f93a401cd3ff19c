{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          // Iterate over each variable declared in the VAR statement\n          // e.g., var a = 1, b = 2;\n          for (Node nameNode = n.getFirstChild(); nameNode != null; nameNode = nameNode.getNext()) {\n             // We are interested in the NAME node representing the variable\n             if (nameNode.isName()) {\n                 NameInformation ns = createNameInformation(t, nameNode, n);\n                 // A NAME node in a VAR declaration should always yield name info\n                 Preconditions.checkNotNull(ns);\n                 // Record the declaration/set associated with the NAME node\n                 recordSet(ns.name, nameNode);\n             }\n             // Note: This assumes simple variables, not destructuring patterns.\n          }\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          // e.g., function foo() {}\n          Node nameNode = n.getFirstChild();\n          // A function declaration should always have a NAME node\n          Preconditions.checkState(nameNode.isName());\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          // Function declaration name should always yield name info\n          Preconditions.checkNotNull(ns);\n          // Record the declaration/set associated with the NAME node\n          recordSet(ns.name, nameNode);\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          // e.g., var obj = { key: value }; visits the STRING_KEY node 'key'\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            // Record the object property declaration/set\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node lhs = n.getFirstChild(); // The L-Value node (NAME, GETPROP)\n\n        NameInformation ns = createNameInformation(t, lhs, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            // e.g., Foo.prototype.bar = function() {};\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            // e.g., x = 1; or a.b.c = 2;\n            // Record the set associated with the L-Value node\n            recordSet(ns.name, lhs);\n          }\n        }\n      } else if (n.isCall()) {\n        Node callee = n.getFirstChild(); // The node representing the function being called\n\n        // Analyze the function being called (the callee)\n        NameInformation ns = createNameInformation(t, callee, n);\n        if (ns != null && ns.onlyAffectsClassDef) {\n          // Handle special calls that define classes or modify prototypes,\n          // like goog.inherits, goog.addSingletonGetter\n          JsName name = getName(ns.name, false); // Check if the JsName exists\n          if (name != null) {\n            refNodes.add(new ClassDefiningFunctionNode(\n                name, n, parent, parent.getParent()));\n          }\n        }\n\n        // Analyze the arguments of the call. This is crucial for understanding\n        // dependencies created by calls like goog.inherits(Child, Parent),\n        // where the arguments themselves represent names that need to be tracked.\n        Node currentArgument = callee.getNext();\n        while (currentArgument != null) {\n          // Ensure name information is created for the argument node.\n          // This call has the side effect of potentially creating JsName objects\n          // for qualified names encountered as arguments (like 'ns.PageSelectionModel.ChangeEvent')\n          // ensuring they are known to the NameAnalyzer.\n          createNameInformation(t, currentArgument, n);\n          currentArgument = currentArgument.getNext();\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}