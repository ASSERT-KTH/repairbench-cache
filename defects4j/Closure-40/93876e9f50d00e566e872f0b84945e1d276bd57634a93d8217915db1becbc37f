{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          // Assumes VAR node has a single NAME child for simplicity, like 'var x;' or 'var x = ...;'\n          // More complex patterns (like destructuring) might require more handling.\n          Node nameNode = n.getFirstChild();\n          if (nameNode.isName()) {\n             NameInformation ns = createNameInformation(t, nameNode, n);\n             // ns could be null if the name is invalid or complex pattern? Be safe.\n             if (ns != null) {\n               recordSet(ns.name, nameNode);\n             }\n          }\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          // FUNCTION Name Node\n          Node nameNode = n.getFirstChild();\n          Preconditions.checkState(nameNode.isName(), \"Function declaration must have a name\");\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          // createNameInformation should succeed for a valid function name\n          Preconditions.checkNotNull(ns, \"NameInformation should not be null for a function name\");\n          recordSet(ns.name, nameNode); // Use the name determined by createNameInformation\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n           // n is the STRING_KEY node\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments, calls, and reads (gets)\n      if (n.isAssign()) {\n        // Assignment: LHS = RHS\n        Node nameNode = n.getFirstChild(); // LHS (NAME or GETPROP)\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            // Record set at the LHS node\n            recordSet(ns.name, nameNode);\n          }\n        }\n        // Note: The RHS is handled by the traversal visiting its nodes.\n\n      } else if (n.isCall()) {\n        // Function Call: target(arg1, arg2, ...)\n        Node nameNode = n.getFirstChild(); // Target (e.g., NAME, GETPROP)\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n            // Record the call itself if it affects class definition (e.g., goog.inherits)\n            if (ns.onlyAffectsClassDef) {\n                JsName name = getName(ns.name, false); // Check if name is known\n                if (name != null) {\n                    refNodes.add(new ClassDefiningFunctionNode(\n                        name, n, parent, parent.getParent()));\n                }\n            }\n            // Always record a 'get' reference for the function being called.\n            recordGetter(ns.name, nameNode);\n        }\n        // Note: Arguments are handled by the traversal visiting their nodes.\n\n      } else if ((n.isName() || n.isGetProp()) && parent != null && !NodeUtil.isLValue(n)) {\n          // Handles simple reads of variables (NAME) or properties (GETPROP).\n          // Ensures the node is not the target of an assignment, increment/decrement,\n          // or delete operation (checked by !NodeUtil.isLValue).\n          // Also ensures the node has a parent to avoid processing top-level nodes incorrectly.\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n             recordGetter(ns.name, n);\n          }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}