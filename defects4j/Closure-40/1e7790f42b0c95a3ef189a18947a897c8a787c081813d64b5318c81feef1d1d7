{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null) {\n            JsName nameInfo = getName(nameNode.getString(), true);\n            recordSet(nameInfo.name, nameNode);\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall()) {\n        Node nameNode = n.getFirstChild(); // The function being called (e.g., 'goog.inherits')\n\n        // Original logic: handle if the *function itself* is a class-defining entity\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null && ns.onlyAffectsClassDef) {\n          JsName name = getName(ns.name, false);\n          if (name != null) {\n          refNodes.add(new ClassDefiningFunctionNode(\n              name, n, parent, parent.getParent()));\n          }\n        }\n\n        // NEW LOGIC: Handle class definitions made by arguments of certain calls.\n        // This is for functions like goog.inherits, goog.defineClass, etc.\n        String qualifiedName = nameNode.getQualifiedName(); // Get the full name like \"goog.inherits\"\n        if (qualifiedName != null) {\n          // Check if this qualified name is in the map of functions that define classes\n          // through their arguments. 'classDefiningFunctions' is a field of NameAnalyzer,\n          // mapping function names to the 0-indexed argument that represents the class being defined.\n          // For 'goog.inherits', the argument index is 0.\n          Integer classArgIndex = classDefiningFunctions.get(qualifiedName);\n          if (classArgIndex != null) {\n            // Arguments start from index 1 in the Node children list, as index 0 is the function name.\n            Node classNode = n.getChildAtIndex(classArgIndex + 1);\n            if (classNode != null) {\n              // Create NameInformation for the class node (e.g., 'ns.PageSelectionModel.ChangeEvent')\n              NameInformation classNs = createNameInformation(t, classNode, n);\n              if (classNs != null) {\n                // Get or create JsName for the class, ensuring it's marked as a class later.\n                JsName className = getName(classNs.name, true);\n                if (className != null) {\n                  // Add a ClassDefiningFunctionNode for this class, linking it to the call node.\n                  // This will eventually mark 'className' as a class.\n                  refNodes.add(new ClassDefiningFunctionNode(\n                      className, n, parent, parent.getParent()));\n                }\n              }\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}