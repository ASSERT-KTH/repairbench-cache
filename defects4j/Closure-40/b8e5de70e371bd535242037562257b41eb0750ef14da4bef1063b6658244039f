{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null) {\n            JsName nameInfo = getName(nameNode.getString(), true);\n            if (nameInfo != null) {\n              recordSet(nameInfo.name, nameNode);\n            }\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall() && NodeUtil.isName(n.getFirstChild())) {\n        Node nameNode = n.getFirstChild();\n        String callName = nameNode.getString();\n        if (\"goog.inherits\".equals(callName)) {\n          // Handle goog.inherits specifically\n          Node subclassNode = n.getSecondChild();\n          Node superclassNode = n.getLastChild();\n          if (subclassNode != null && superclassNode != null) {\n            NameInformation subclassNs = createNameInformation(t, subclassNode, n);\n            NameInformation superclassNs = createNameInformation(t, superclassNode, n);\n            if (subclassNs != null && superclassNs != null) {\n              recordInheritance(subclassNs.name, superclassNs.name);\n            }\n          }\n        } else {\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null && ns.onlyAffectsClassDef) {\n            JsName name = getName(ns.name, false);\n            if (name != null) {\n              refNodes.add(new ClassDefiningFunctionNode(\n                  name, n, parent, parent.getParent()));\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}