{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null) {\n            JsName nameInfo = getName(nameNode.getString(), true);\n            recordSet(nameInfo.name, nameNode);\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall()) {\n        Node callTarget = n.getFirstChild(); // The function being called (e.g., 'goog.inherits')\n        NameInformation callTargetNs = createNameInformation(t, callTarget, n);\n\n        // Check if this is a class-defining call (e.g., goog.inherits)\n        if (callTargetNs != null && callTargetNs.onlyAffectsClassDef) {\n          Node classNode = n.getChildAtIndex(1); // The first argument, which is the class being defined/extended.\n\n          NameInformation classNs = createNameInformation(t, classNode, n);\n          if (classNs != null) {\n            // Get the JsName for the class that is supposedly being defined/extended.\n            // We use 'false' here because we are looking for an existing definition.\n            // If it doesn't exist, this call is not defining a real class.\n            JsName className = getName(classNs.name, false);\n\n            if (className != null) {\n              // If the class name actually exists (i.e., it was defined elsewhere),\n              // then this call affects its definition.\n              // Add the call node to 'removableCalls'. If 'className' later\n              // becomes unreferenced, this call node 'n' can be removed.\n              removableCalls.put(n, className);\n              // Add a ClassDefiningFunctionNode to mark 'className' as being\n              // defined/referenced by a class-defining function.\n              refNodes.add(new ClassDefiningFunctionNode(\n                  className, n, parent, parent.getParent()));\n            } else {\n              // If the class name (the first argument) does NOT exist as a JsName\n              // (e.g., ns.PageSelectionModel.ChangeEvent in the test case, which is never defined),\n              // then this 'inherits' call is targeting a non-existent or invalid class.\n              // In this scenario, the call itself has no meaningful side effect on actual class definitions\n              // and should be considered dead code.\n              // By putting 'null' as the JsName, we signal that this call can be removed\n              // regardless of whether any JsName is actually being \"defined\" by it.\n              removableCalls.put(n, null);\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}