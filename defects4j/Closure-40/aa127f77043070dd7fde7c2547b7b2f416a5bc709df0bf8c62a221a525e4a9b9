{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null) {\n            // Use the fully qualified name from NameInformation.\n            // The original `nameNode.getString()` might not return the full qualified name\n            // if nameNode is a GETPROP (e.g., `ns.PageSelectionModel`).\n            JsName nameInfo = getName(ns.name, true);\n            recordSet(nameInfo.name, nameNode);\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall()) {\n        // Handle calls to functions that define or extend classes\n        // (e.g., goog.inherits, goog.defineClass, BaseClass.call(this)).\n        if (NodeUtil.isClassDefiningFunctionCall(n)) {\n          Node classDefiningNameNode = null;\n          String classNameString = null; // For goog.defineClass with string literal\n\n          Node functionName = n.getFirstChild(); // The function being called (e.g., goog.inherits)\n\n          if (functionName.isGetProp() && functionName.matchesQualifiedName(\"goog.inherits\")) {\n            // Case: goog.inherits(SubClass, SuperClass)\n            // The class being defined/extended is SubClass (the first argument to inherits).\n            classDefiningNameNode = n.getSecondChild();\n          } else if (functionName.isGetProp() && functionName.matchesQualifiedName(\"goog.defineClass\")) {\n            // Case: goog.defineClass('className', constructor)\n            // The class name is the first argument, which is a string literal.\n            Node firstArg = n.getSecondChild();\n            if (firstArg != null && firstArg.isString()) {\n              classNameString = firstArg.getString();\n            }\n          } else if (functionName.isGetProp() && functionName.getLastChild().getString().equals(\"call\") &&\n                     n.getChildCount() >= 2 && n.getSecondChild().isThis()) {\n            // Case: BaseClass.call(this, ...) inside a constructor.\n            // The class being referenced is BaseClass (the target of the `call` method).\n            classDefiningNameNode = functionName.getFirstChild();\n          }\n\n          if (classDefiningNameNode != null) {\n            NameInformation ns = createNameInformation(t, classDefiningNameNode, n);\n            if (ns != null) {\n              // Ensure the JsName for the class exists and mark it as a class-defining function's effect.\n              JsName name = getName(ns.name, true);\n              refNodes.add(new ClassDefiningFunctionNode(\n                  name, n, parent, parent.getParent()));\n            }\n          } else if (classNameString != null) {\n            // For goog.defineClass where the class name is a string literal.\n            JsName name = getName(classNameString, true);\n            refNodes.add(new ClassDefiningFunctionNode(\n                name, n, parent, parent.getParent()));\n          }\n        }\n        // The previous logic within this `else if (n.isCall())` block that used\n        // `ns.onlyAffectsClassDef` with `getName(ns.name, false)` was problematic\n        // because `ns.name` would refer to the function being called (e.g., \"goog.inherits\")\n        // rather than the class being defined. The explicit checks above replace that generic,\n        // incorrect handling with precise extraction of the class name.\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}