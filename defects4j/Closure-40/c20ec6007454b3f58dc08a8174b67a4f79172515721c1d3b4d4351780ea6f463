{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null) {\n            JsName nameInfo = getName(nameNode.getString(), true);\n            recordSet(nameInfo.name, nameNode);\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall()) {\n        // When a CALL node is encountered, we need to check if it's a special call\n        // (like goog.inherits) that implicitly defines a class.\n        CodingConvention convention = t.getCompiler().getCodingConvention();\n        Collection<Node> classesDefined = convention.getClassesDefinedByCall(n);\n\n        if (classesDefined != null && !classesDefined.isEmpty()) {\n            // If the coding convention identifies any classes defined by this call,\n            // record them as ClassDefiningFunctionNodes.\n            for (Node classDefNode : classesDefined) {\n                NameInformation nsClass = createNameInformation(t, classDefNode, n);\n                if (nsClass != null) {\n                    JsName name = getName(nsClass.name, false);\n                    if (name != null) {\n                        // The 'classDefNode' is the actual name node for the class (e.g., 'ns.PageSelectionModel.ChangeEvent').\n                        // 'n' is the CALL node (parent of classDefNode).\n                        // 'parent' is the parent of the CALL node (grandparent of classDefNode).\n                        refNodes.add(new ClassDefiningFunctionNode(\n                            name, classDefNode, n, parent));\n                    }\n                }\n            }\n        } else {\n          // Original logic: If the call target itself is marked as 'onlyAffectsClassDef',\n          // which is generally not the case for functions like 'goog.inherits'\n          // that define *other* classes. This branch might be for other specific\n          // function calls or could be a remnant.\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null && ns.onlyAffectsClassDef) {\n            JsName name = getName(ns.name, false);\n            if (name != null) {\n            refNodes.add(new ClassDefiningFunctionNode(\n                name, n, parent, parent.getParent()));\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}