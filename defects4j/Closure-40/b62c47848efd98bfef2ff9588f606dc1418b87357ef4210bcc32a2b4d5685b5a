{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null) {\n            JsName nameInfo = getName(nameNode.getString(), true);\n            recordSet(nameInfo.name, nameNode);\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall()) {\n        Node nameNode = n.getFirstChild(); // 'nameNode' is the function being called (e.g., 'goog.inherits')\n\n        // Handle class-defining calls (e.g., goog.inherits, goog.defineClass).\n        // For these calls, the first argument typically represents the class name\n        // that is being defined or modified.\n        CodingConvention convention = t.getCompiler().getCodingConvention();\n        if (convention.isClassDefiningCall(n)) {\n          Node targetClassNode = n.getSecondChild(); // The first argument of the call\n          if (targetClassNode != null) {\n            NameInformation nsTarget = createNameInformation(t, targetClassNode, n);\n            if (nsTarget != null) {\n              // Mark this name as a definition/set.\n              // This ensures that implicitly defined classes (like the child class\n              // in goog.inherits) are correctly tracked by NameAnalyzer.\n              recordSet(nsTarget.name, targetClassNode);\n            }\n          }\n        }\n\n        // Original logic: Handle calls where the function being called itself\n        // is marked as affecting a class definition (e.g., goog.addSingletonGetter).\n        // This handles cases where the function name itself (nameNode) has the\n        // 'onlyAffectsClassDef' property.\n        NameInformation nsCall = createNameInformation(t, nameNode, n);\n        if (nsCall != null && nsCall.onlyAffectsClassDef) {\n          JsName name = getName(nsCall.name, false);\n          if (name != null) {\n          refNodes.add(new ClassDefiningFunctionNode(\n              name, n, parent, parent.getParent()));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}