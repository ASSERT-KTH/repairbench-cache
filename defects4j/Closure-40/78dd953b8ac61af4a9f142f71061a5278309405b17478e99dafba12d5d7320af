{
    "generation": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n\n      // Record global variable and function declarations\n      if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          Preconditions.checkNotNull(ns);\n          recordSet(ns.name, n);\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n          Node nameNode = n.getFirstChild();\n          NameInformation ns = createNameInformation(t, nameNode, n);\n          if (ns != null) {\n            // For function declarations, nameNode.getString() gets the simple name.\n            JsName nameInfo = getName(nameNode.getString(), true);\n            recordSet(nameInfo.name, nameNode);\n          }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n          NameInformation ns = createNameInformation(t, n, parent);\n          if (ns != null) {\n            recordSet(ns.name, n);\n          }\n        }\n      }\n\n      // Record assignments and call sites\n      if (n.isAssign()) {\n        Node nameNode = n.getFirstChild();\n\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n          } else {\n            recordSet(ns.name, nameNode);\n          }\n        }\n      } else if (n.isCall()) {\n        // For call nodes, the first child is the function being called.\n        Node callTarget = n.getFirstChild();\n\n        NameInformation targetNs = createNameInformation(t, callTarget, n);\n        if (targetNs != null && targetNs.onlyAffectsClassDef) {\n          // If the target of the call is a function that affects class definitions\n          // (e.g., goog.inherits), the name being defined is typically the first argument\n          // of the call.\n          Node nameNodeToDefine = n.getChildAtIndex(1);\n          if (nameNodeToDefine != null) {\n            NameInformation definedClassNs = createNameInformation(t, nameNodeToDefine, n);\n            if (definedClassNs != null) {\n              JsName name = getName(definedClassNs.name, false);\n              if (name != null) {\n                // This records the first argument as a class-defining entity.\n                refNodes.add(new ClassDefiningFunctionNode(\n                    name, n, parent, parent.getParent()));\n              }\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}