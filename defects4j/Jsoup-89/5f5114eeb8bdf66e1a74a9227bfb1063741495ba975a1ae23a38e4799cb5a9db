{
    "generation": "    /**\n     Set the attribute value.\n     @param val the new attribute value; must not be null\n     */\n    public String setValue(String val) {\n        String oldVal;\n\n        // Check if this attribute is part of a parent Attributes collection.\n        if (parent != null) {\n            // If a parent exists, retrieve the old value from the parent's collection.\n            // The `parent.get(this.key)` method in Jsoup's Attributes class is guaranteed\n            // to return a non-null String (either the actual value or an empty string \"\" if not found).\n            oldVal = parent.get(this.key);\n\n            // Find the index of this attribute's key within the parent's internal array.\n            int i = parent.indexOfKey(this.key);\n            // If the key is found in the parent, update its corresponding value in the parent's array.\n            if (i != Attributes.NotFound) {\n                parent.vals[i] = val;\n            }\n        } else {\n            // If there is no parent (this is an orphan attribute), the old value\n            // is simply the current value stored within this Attribute object.\n            oldVal = this.val;\n            // Jsoup's `Attributes.checkNotNull` (used in the return statement) performs a `Validate.notNull` check.\n            // This means the returned old value must not be null.\n            // To ensure consistency with how `parent.get()` behaves (always returning non-null)\n            // and to prevent an IllegalArgumentException if `this.val` was null,\n            // we convert a null old value to an empty string.\n            if (oldVal == null) {\n                oldVal = \"\";\n            }\n        }\n\n        // Update the value of this Attribute object itself.\n        this.val = val;\n\n        // Return the captured old value. Attributes.checkNotNull ensures it's non-null.\n        return Attributes.checkNotNull(oldVal);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}