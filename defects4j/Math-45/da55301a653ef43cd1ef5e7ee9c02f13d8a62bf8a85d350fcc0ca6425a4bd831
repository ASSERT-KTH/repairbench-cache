{
    "generation": "import org.apache.commons.math.exception.NumberIsTooLargeException;\nimport org.apache.commons.math.exception.NotStrictlyPositiveException; // for super()\nimport org.apache.commons.math.util.OpenIntToDoubleHashMap;\n\n    /**\n     * Build a sparse matrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension Number of rows of the matrix.\n     * @param columnDimension Number of columns of the matrix.\n     * @throws NotStrictlyPositiveException if row or column dimension is not\n     * positive.\n     * @throws NumberIsTooLargeException if the total number of entries exceeds\n     * Integer.MAX_VALUE.\n     */\n    public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n        // The super constructor checks for rowDimension > 0 and columnDimension > 0\n        super(rowDimension, columnDimension);\n\n        // Check if the total number of elements exceeds Integer.MAX_VALUE.\n        // The indices are computed by row * columns + column, which must fit in an int.\n        // Cast to long is necessary to prevent overflow during multiplication.\n        long theoreticalSize = (long) rowDimension * (long) columnDimension;\n        if (theoreticalSize > Integer.MAX_VALUE) {\n            // The number of elements is too large to be indexed by an int.\n            // Pass arguments as Number (or double for older versions compatibility).\n            // The third argument 'true' indicates that Integer.MAX_VALUE is the upper bound (inclusive).\n            throw new NumberIsTooLargeException(theoreticalSize, Integer.MAX_VALUE, true);\n        }\n\n        // Initialize instance variables\n        this.rows = rowDimension;\n        this.columns = columnDimension;\n        // Initialize the map to store non-zero entries. Use 0.0 as the default value.\n        this.entries = new OpenIntToDoubleHashMap(0.0);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}