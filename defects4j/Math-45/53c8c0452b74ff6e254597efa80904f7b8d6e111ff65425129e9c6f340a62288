{
    "generation": "    /**\n     * Build a sparse matrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension Number of rows of the matrix.\n     * @param columnDimension Number of columns of the matrix.\n     * @throws org.apache.commons.math.exception.NumberIsTooLargeException if the product of row and column dimensions\n     *  exceeds {@link Integer#MAX_VALUE}, which would lead to an overflow in internal index calculations.\n     */\n    public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n        // Validate dimensions. The super constructor handles non-positive dimensions by throwing\n        // NotPositiveException. This constructor adds a check for dimensions that are\n        // positive but so large that their product (used for internal flat indexing)\n        // would overflow an int.\n        // For instance, a common internal implementation might use row * columns + col as a key,\n        // which must fit within an int.\n        long product = (long) rowDimension * columnDimension;\n        if (product > Integer.MAX_VALUE) {\n            throw new NumberIsTooLargeException(product, Integer.MAX_VALUE, false);\n        }\n\n        super(rowDimension, columnDimension);\n        this.rows = rowDimension;\n        this.columns = columnDimension;\n        this.entries = new OpenIntToDoubleHashMap(0.0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}