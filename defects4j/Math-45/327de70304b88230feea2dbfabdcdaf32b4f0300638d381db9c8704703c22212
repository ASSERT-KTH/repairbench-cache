{
    "generation": "    /**\n     * Build a sparse matrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension Number of rows of the matrix.\n     * @param columnDimension Number of columns of the matrix.\n     * @throws org.apache.commons.math.exception.NotPositiveException if the row or column dimension is not positive.\n     * @throws org.apache.commons.math.exception.NumberIsTooLargeException if the product of row and column dimensions\n     *  exceeds {@link Integer#MAX_VALUE}, which is the maximum capacity for the internal linear index.\n     */\n    public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n        super(rowDimension, columnDimension);\n\n        // The internal storage (OpenIntToDoubleHashMap) uses int keys for linear indices.\n        // A linear index is typically calculated as `row * columnDimension + column`.\n        // Therefore, the maximum possible linear index `(rowDimension - 1) * columnDimension + (columnDimension - 1)`\n        // must fit within an int. This implies that the total number of potential elements\n        // (rowDimension * columnDimension) must not exceed Integer.MAX_VALUE.\n        // If rowDimension * columnDimension exceeds Integer.MAX_VALUE, then accessing elements\n        // via linear indexing will lead to an integer overflow.\n        if ((long) rowDimension * columnDimension > Integer.MAX_VALUE) {\n            throw new org.apache.commons.math.exception.NumberIsTooLargeException(\n                    (long) rowDimension * columnDimension,\n                    (long) Integer.MAX_VALUE,\n                    true); // true means Integer.MAX_VALUE itself is allowed, but anything strictly greater is not.\n        }\n\n        this.rows = rowDimension;\n        this.columns = columnDimension;\n        this.entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(0.0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}