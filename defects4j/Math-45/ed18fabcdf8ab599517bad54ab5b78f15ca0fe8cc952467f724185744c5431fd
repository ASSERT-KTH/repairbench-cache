{
    "generation": "    /**\n     * Build a sparse matrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension Number of rows of the matrix.\n     * @param columnDimension Number of columns of the matrix.\n     * @throws org.apache.commons.math.exception.NumberIsTooLargeException if the product of row and column dimensions\n     *  exceeds {@link Integer#MAX_VALUE} + 1, which means the internal storage index would overflow.\n     */\n    public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n        super(rowDimension, columnDimension); // This calls AbstractRealMatrix constructor, which validates positive dimensions.\n\n        // The internal storage uses an int key for each entry, calculated as row * columns + column.\n        // The maximum possible key value for a matrix of (rows, columns) is (rows - 1) * columns + (columns - 1).\n        // If rows > 0 and columns > 0, this simplifies to (long)rows * columns - 1.\n        // For this maximum index to fit within an int, it must be less than or equal to Integer.MAX_VALUE.\n        // So, we need (long)rowDimension * columnDimension - 1 <= Integer.MAX_VALUE.\n        // This is equivalent to (long)rowDimension * columnDimension <= (long)Integer.MAX_VALUE + 1L.\n        // If this condition is violated, it means the dimensions are too large for the internal indexing scheme.\n        if ((long) rowDimension * columnDimension > ((long) Integer.MAX_VALUE + 1L)) {\n            // The \"wrong\" number is the conceptual total number of entries that would be needed if dense,\n            // which determines the range of potential internal indices.\n            // The \"maximal\" allowed number of such entries is (Integer.MAX_VALUE + 1)\n            // because the highest index is Integer.MAX_VALUE.\n            throw new org.apache.commons.math.exception.NumberIsTooLargeException(\n                    (long) rowDimension * columnDimension, // The actual product of dimensions\n                    (long) Integer.MAX_VALUE + 1L,       // The maximal allowed product such that indices fit int\n                    false // 'inclusive' is false because (wrong > maximal) indicates the error\n            );\n        }\n\n        this.rows = rowDimension;\n        this.columns = columnDimension;\n        this.entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(0.0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}