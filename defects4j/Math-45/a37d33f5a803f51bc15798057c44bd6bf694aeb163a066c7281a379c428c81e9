{
    "generation": "    /**\n     * Build a sparse matrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension Number of rows of the matrix.\n     * @param columnDimension Number of columns of the matrix.\n     */\n    public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n        super(rowDimension, columnDimension);\n        this.rows = rowDimension;\n        this.columns = columnDimension;\n\n        // Check if the total number of theoretical entries (rowDimension * columnDimension)\n        // exceeds the maximum value that can be represented by an int for indexing.\n        // The internal storage (OpenIntToDoubleHashMap) uses int keys, where the key\n        // is typically computed as row * columnDimension + column.\n        // The maximum possible linear index would be (rowDimension * columnDimension) - 1.\n        // This maximum index must fit within an int, meaning (rowDimension * columnDimension) - 1 <= Integer.MAX_VALUE.\n        // This implies that rowDimension * columnDimension must be <= Integer.MAX_VALUE + 1.\n        // We cast to long before multiplication to prevent overflow when calculating\n        // totalEntries, allowing us to correctly check against Integer.MAX_VALUE.\n        long totalEntries = (long) rowDimension * columnDimension;\n        if (totalEntries > (long)Integer.MAX_VALUE + 1L) {\n            throw new org.apache.commons.math.exception.NumberIsTooLargeException(\n                totalEntries, (long)Integer.MAX_VALUE + 1L, true);\n        }\n\n        this.entries = new OpenIntToDoubleHashMap(0.0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}