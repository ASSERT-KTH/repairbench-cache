{
    "generation": "    /**\n     * Build a sparse matrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension Number of rows of the matrix.\n     * @param columnDimension Number of columns of the matrix.\n     * @throws org.apache.commons.math.exception.NotPositiveException if row or column dimension is not positive.\n     * @throws org.apache.commons.math.exception.NumberIsTooLargeException if the product of row and column dimensions\n     *                                                                     exceeds {@link Integer#MAX_VALUE}, which\n     *                                                                     is the maximum possible number of keys in the\n     *                                                                     internal hash map.\n     */\n    public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n        super(rowDimension, columnDimension);\n        // The super constructor handles non-positive dimensions.\n        // We need to ensure that the total number of potential cells (row * column)\n        // does not exceed Integer.MAX_VALUE, as the internal mapping uses int keys\n        // derived from a linear index (row * columnDimension + col).\n        long overallSize = (long) rowDimension * columnDimension;\n        if (overallSize > Integer.MAX_VALUE) {\n            throw new org.apache.commons.math.exception.NumberIsTooLargeException(overallSize, Integer.MAX_VALUE, true);\n        }\n\n        this.rows = rowDimension;\n        this.columns = columnDimension;\n        this.entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(0.0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}