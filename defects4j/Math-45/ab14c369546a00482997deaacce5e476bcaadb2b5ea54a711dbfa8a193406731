{
    "generation": "import org.apache.commons.math.exception.NotStrictlyPositiveException;\nimport org.apache.commons.math.exception.NumberIsTooLargeException;\nimport org.apache.commons.math.util.OpenIntToDoubleHashMap;\n\n// Add imports for clarity, although they might not be strictly needed for the provided context.\n// Note: The original code likely belongs to a class extending AbstractRealMatrix.\n\n    /**\n     * Build a sparse matrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension Number of rows of the matrix.\n     * @param columnDimension Number of columns of the matrix.\n     * @throws NotStrictlyPositiveException if row or column dimension is not\n     * positive.\n     * @throws NumberIsTooLargeException if the total number of entries of the\n     * matrix is larger than {@code Integer.MAX_VALUE}.\n     */\n    public OpenMapRealMatrix(int rowDimension, int columnDimension)\n        throws NotStrictlyPositiveException, NumberIsTooLargeException {\n        super(rowDimension, columnDimension); // Checks for rowDimension > 0 and columnDimension > 0\n        this.rows = rowDimension;\n        this.columns = columnDimension;\n\n        // Check that the total number of elements won't overflow integer capacity\n        long L_rowDimension = rowDimension;\n        long L_columnDimension = columnDimension;\n        long totalSize = L_rowDimension * L_columnDimension;\n        if (totalSize > Integer.MAX_VALUE) {\n            throw new NumberIsTooLargeException(totalSize, Integer.MAX_VALUE, false);\n        }\n\n        this.entries = new OpenIntToDoubleHashMap(0.0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}