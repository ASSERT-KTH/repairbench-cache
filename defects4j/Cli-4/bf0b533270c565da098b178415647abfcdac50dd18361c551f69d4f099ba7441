{
    "generation": "    /**\n     * <p>Throws a {@link MissingOptionException} if all of the\n     * required options are no present.</p>\n     *\n     * @throws MissingOptionException if any of the required Options\n     * are not present.\n     */\n    private void checkRequiredOptions()\n        throws MissingOptionException\n    {\n        // if there are required options that have not been\n        // processsed\n        if (!requiredOptions.isEmpty())\n        {\n            Iterator<String> iter = requiredOptions.iterator(); // Use generics for type safety\n            StringBuffer buff = new StringBuffer();\n\n            // Add the correct prefix based on the number of missing options\n            if (requiredOptions.size() == 1)\n            {\n                buff.append(\"Missing required option: \");\n            }\n            else\n            {\n                buff.append(\"Missing required options: \");\n            }\n\n            // loop through the required options and append their names\n            while (iter.hasNext())\n            {\n                buff.append(iter.next());\n                // Note: The original test expected concatenated names like \"fx\",\n                // so no separator is added here. If a separator like \", \" was\n                // desired, it would be added conditionally within the loop.\n            }\n\n            throw new MissingOptionException(buff.toString());\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}