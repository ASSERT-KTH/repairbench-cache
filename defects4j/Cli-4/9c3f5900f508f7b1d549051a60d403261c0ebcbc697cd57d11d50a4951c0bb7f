{
    "generation": "    /**\n     * <p>Throws a {@link MissingOptionException} if all of the\n     * required options are no present.</p>\n     *\n     * @throws MissingOptionException if any of the required Options\n     * are not present.\n     */\n    private void checkRequiredOptions()\n        throws MissingOptionException\n    {\n        // if there are required options that have not been\n        // processsed\n        if (requiredOptions.size() > 0)\n        {\n            // Build the message string as expected by the tests.\n            // The tests expect a prefix \"Missing required option(s): \"\n            // and then the concatenated option characters without commas.\n            StringBuffer buff = new StringBuffer(\"Missing required option\");\n\n            // Add 's' if there's more than one missing option\n            if (requiredOptions.size() > 1)\n            {\n                buff.append(\"s\");\n            }\n            buff.append(\": \");\n\n            // Iterate through the missing options and append their string representation.\n            // Assuming Option.toString() provides the short option character (e.g., \"f\").\n            Iterator iter = requiredOptions.iterator();\n            while (iter.hasNext())\n            {\n                buff.append(iter.next());\n            }\n\n            // Throw the exception with the custom-built message.\n            throw new MissingOptionException(buff.toString());\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}