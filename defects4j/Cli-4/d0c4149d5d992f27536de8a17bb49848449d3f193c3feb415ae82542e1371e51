{
    "generation": "    /**\n     * <p>Throws a {@link MissingOptionException} if all of the\n     * required options are no present.</p>\n     *\n     * @throws MissingOptionException if any of the required Options\n     * are not present.\n     */\n    private void checkRequiredOptions()\n        throws MissingOptionException\n    {\n        // if there are required options that have not been\n        // processed\n        if (requiredOptions.size() > 0)\n        {\n            // requiredOptions is expected to contain String (option names) based on test failures.\n            // Collect the missing option names to construct the message.\n            // Using a List and sorting ensures consistent message ordering for multiple missing options.\n            java.util.List<String> missingOptionNames = new java.util.ArrayList<>(requiredOptions);\n            java.util.Collections.sort(missingOptionNames);\n\n            StringBuffer buff = new StringBuffer();\n\n            // Determine the appropriate message prefix based on the number of missing options.\n            if (missingOptionNames.size() == 1)\n            {\n                buff.append(\"Missing required option: \");\n                buff.append(missingOptionNames.get(0));\n            }\n            else // requiredOptions.size() > 1\n            {\n                buff.append(\"Missing required options: \");\n                // Concatenate all missing option names directly as per expected test output (e.g., \"fx\").\n                for (String optionName : missingOptionNames)\n                {\n                    buff.append(optionName);\n                }\n            }\n\n            throw new MissingOptionException(buff.toString());\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}