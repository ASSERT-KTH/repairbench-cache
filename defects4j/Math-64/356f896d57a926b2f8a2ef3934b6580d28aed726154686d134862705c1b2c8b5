{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected VectorialPointValuePair doOptimize()\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // arrays shared with the other private methods\n        solvedCols  = Math.min(rows, cols);\n        diagR       = new double[cols];\n        jacNorm     = new double[cols];\n        beta        = new double[cols];\n        permutation = new int[cols];\n        lmDir       = new double[cols];\n\n        // local point\n        double   delta   = 0;\n        double   xNorm   = 0;\n        double[] diag    = new double[cols];\n        double[] oldX    = new double[cols];\n        double[] oldRes  = new double[rows];\n        double[] work1   = new double[cols];\n        double[] work2   = new double[cols];\n        double[] work3   = new double[cols];\n\n        // evaluate the function at the starting point and calculate its norm\n        updateResidualsAndCost(); // Sets objective, residuals, cost = 0.5*||residuals||^2\n\n        // outer loop\n        lmPar = 0;\n        boolean firstIteration = true;\n        // current holds the current best state (point, objective function value)\n        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n        while (true) {\n            incrementIterationsCounter();\n\n            // compute the Q.R. decomposition of the jacobian matrix\n            VectorialPointValuePair previous = current; // State at the beginning of the iteration\n            updateJacobian(); // Compute jacobian at point\n            qrDecomposition(); // Decompose jacobian -> R, Q implicitly, permutation, diagR, jacNorm\n\n            // compute Qt.res (Q^T * residuals)\n            // qTy modifies 'residuals' in-place to store Q^T * f(x_k).\n            // 'objective' still holds the original residual vector f(x_k).\n            qTy(residuals);\n\n            // now we don't need Q anymore,\n            // so let jacobian contain the R matrix with its diagonal elements\n            for (int k = 0; k < solvedCols; ++k) {\n                int pk = permutation[k];\n                jacobian[k][pk] = diagR[pk];\n            }\n\n            if (firstIteration) {\n                // scale the point according to the norms of the columns\n                // of the initial jacobian\n                xNorm = 0;\n                for (int k = 0; k < cols; ++k) {\n                    double dk = jacNorm[k];\n                    if (dk == 0) {\n                        dk = 1.0;\n                    }\n                    double xk = dk * point[k];\n                    xNorm  += xk * xk;\n                    diag[k] = dk;\n                }\n                xNorm = Math.sqrt(xNorm);\n                // initialize the step bound delta\n                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n            }\n\n            // check orthogonality between function vector f(x_k) and jacobian columns J_k\n            // We want max_j | J_j^T * f | / (|| J_j || * || f || )\n            // J^T * f = (QR)^T * f = R^T * Q^T * f = R^T * residuals (where residuals = Q^T*f)\n            // The j-th component of J^T*f is dot(column_j(J^T), f) = dot(row_j(J), f).\n            // Alternatively, the dot product of the j-th column of J with f is (J_j)^T * f.\n            // Using R: J_j = Q*R_j. So (J_j)^T * f = (Q*R_j)^T * f = R_j^T * Q^T * f = R_j^T * residuals\n            double maxCosine = 0;\n            // cost = 0.5 * ||f||^2 => ||f|| = sqrt(2*cost)\n            if (cost != 0) { // Check if ||f|| is non-zero\n                double fNorm = Math.sqrt(2 * cost);\n                for (int j = 0; j < solvedCols; ++j) {\n                    int    pj = permutation[j];\n                    double s  = jacNorm[pj]; // || J_pj ||\n                    if (s != 0) {\n                        double sum = 0;\n                        // R is upper triangular, stored in jacobian. R_j has non-zeros R_i,pj for i<=j.\n                        // We need dot product of R's pj-th column and residuals (Q^T*f)\n                        for (int i = 0; i <= j; ++i) {\n                            sum += jacobian[i][pj] * residuals[i]; // R_{i,pj} * (Q^T*f)_i\n                        }\n                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * fNorm)); // | R_pj^T * (Q^T*f) | / (|| J_pj || * || f ||)\n                    }\n                }\n            }\n            if (maxCosine <= orthoTolerance) {\n                // convergence has been reached\n                return current;\n            }\n\n            // rescale if necessary\n            for (int j = 0; j < cols; ++j) {\n                diag[j] = Math.max(diag[j], jacNorm[j]);\n            }\n\n            // inner loop to find acceptance ratio > 1e-4\n            double ratio = 0;\n            while (ratio < 1.0e-4) {\n\n                // save the state\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    oldX[pj] = point[pj];\n                }\n                double previousCost = cost; // cost = 0.5 * ||f_k||^2\n\n                // Manage residual vectors for LM parameter determination\n                // 'residuals' currently holds Q^T*f_k. 'oldRes' is scratch space.\n                double[] qTyVec = residuals; // Reference to Q^T*f_k\n                residuals = oldRes;          // 'residuals' becomes scratch space\n                oldRes = qTyVec;             // 'oldRes' now holds Q^T*f_k for LM function\n\n                // determine the Levenberg-Marquardt parameter\n                determineLMParameter(oldRes, delta, diag, work1, work2, work3); // uses qTyVec (in oldRes)\n\n                // compute the new point (trial point) and the norm of the step\n                double lmNorm = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    lmDir[pj] = -lmDir[pj]; // lmDir is the step p\n                    point[pj] = oldX[pj] + lmDir[pj]; // trial point = x_k + p\n                    double s = diag[pj] * lmDir[pj];\n                    lmNorm  += s * s; // || D*p ||^2\n                }\n                lmNorm = Math.sqrt(lmNorm);\n                // on the first iteration, adjust the initial step bound.\n                if (firstIteration) {\n                    delta = Math.min(delta, lmNorm);\n                }\n\n                // evaluate the function at the trial point x + p\n                // updateResidualsAndCost sets 'objective' = f(x+p), 'residuals' = f(x+p), 'cost' = 0.5*||f(x+p)||^2\n                updateResidualsAndCost();\n                VectorialPointValuePair trial = new VectorialPointValuePair(point, objective); // State at trial point\n\n                // compute the scaled actual reduction\n                // actRed = (cost_k - cost_{k+p}) / cost_k = 1 - cost_{k+p} / cost_k\n                // Guard against division by zero for previousCost\n                double actRed = 0;\n                if (Math.abs(previousCost) > 1e-30) { // Check if previousCost is effectively zero\n                     actRed = 1.0 - cost / previousCost; // FIXED: Use simple ratio, not square of ratio\n                }\n\n\n                // compute the scaled predicted reduction\n                // preRed = (|| R*p ||^2 + 2 * lmPar * || D*p ||^2) / (previousCost * previousCost)\n                // This scaling seems unusual but we keep it for now.\n                // work1 = R * p (where p = lmDir)\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    double dirJ = lmDir[pj];\n                    work1[j] = 0;\n                    for (int i = 0; i <= j; ++i) {\n                        work1[i] += jacobian[i][pj] * dirJ;\n                    }\n                }\n                double coeff1 = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    coeff1 += work1[j] * work1[j]; // coeff1 = || R*p ||^2\n                }\n                double pc2 = previousCost * previousCost;\n                coeff1 = coeff1 / pc2;\n                double coeff2 = lmPar * lmNorm * lmNorm / pc2; // lmNorm = || D*p ||\n                double preRed = coeff1 + 2 * coeff2;\n                double dirDer = -(coeff1 + coeff2);\n\n                // ratio of the actual to the predicted reduction\n                ratio = (preRed == 0) ? 0 : (actRed / preRed);\n\n                // update the step bound delta and lmPar based on the ratio\n                if (ratio <= 0.25) {\n                    double tmp =\n                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n                    if ((cost / previousCost >= 10.0) || (tmp < 0.1)) { // Check if cost increased significantly or tmp is too small\n                        tmp = 0.1;\n                    }\n                    delta = tmp * Math.min(delta, 10.0 * lmNorm);\n                    lmPar /= tmp;\n                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n                    delta = 2 * lmNorm;\n                    lmPar *= 0.5;\n                }\n\n                // test for successful iteration.\n                if (ratio >= 1.0e-4) {\n                    // Successful step: Accept the trial point. Update current state.\n                    current = trial;\n                    firstIteration = false;\n                    // update the norm diagnostic calculation based on accepted point\n                    xNorm = 0;\n                    for (int k = 0; k < cols; ++k) {\n                        double xK = diag[k] * point[k]; // Use the accepted point\n                        xNorm    += xK * xK;\n                    }\n                    xNorm = Math.sqrt(xNorm);\n\n                    // tests for convergence (FIXED: Moved inside successful step block)\n                    if (checker == null) { // Use default checker\n                        if (((Math.abs(actRed) <= costRelativeTolerance) &&\n                             (preRed <= costRelativeTolerance) &&\n                             (ratio <= 2.0)) ||\n                            (delta <= parRelativeTolerance * xNorm)) {\n                            return current; // Convergence met\n                        }\n                    } else { // Use custom checker\n                        if (checker.converged(getIterations(), previous, current)) {\n                            return current; // Convergence met\n                        }\n                    }\n\n                    // tests for termination conditions due to small tolerances (FIXED: Moved inside successful step block)\n                    if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n                        throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,\n                                costRelativeTolerance);\n                    } else if (delta <= 2.2204e-16 * xNorm) {\n                        throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,\n                                parRelativeTolerance);\n                    } else if (maxCosine <= 2.2204e-16) {\n                        throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,\n                                orthoTolerance);\n                    }\n                    // If converged or terminated, we returned/threw. Otherwise, the successful step\n                    // breaks the inner loop (ratio >= 1.0e-4) and continues to the next outer iteration.\n\n                } else {\n                    // Failed iteration: Restore the state to before the trial step.\n                    cost = previousCost;\n                    for (int j = 0; j < solvedCols; ++j) {\n                        int pj = permutation[j];\n                        point[pj] = oldX[pj];\n                    }\n                    // Manage the array pointers for the next inner loop iteration.\n                    // Before failure: residuals=f(x+p), oldRes=qTyVec.\n                    // We need oldRes to hold qTyVec again for the next call to determineLMParameter.\n                    // And residuals to be the scratch array.\n                    qTyVec = oldRes;    // qTyVec now points to where Q^T*f_k is stored\n                    oldRes = residuals; // oldRes now points to f(x+p) (becomes scratch)\n                    residuals = qTyVec; // residuals points to Q^T*f_k (ready for swap at top of next inner loop)\n                    // Inner loop continues (ratio < 1.0e-4 is true).\n                }\n            } // end inner loop (while ratio < 1.0e-4)\n        } // end outer loop (while true)\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}