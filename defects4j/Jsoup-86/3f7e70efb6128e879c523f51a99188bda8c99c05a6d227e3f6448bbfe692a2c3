{
    "generation": "/**\n * Attempt to cast this comment to an XML Declaration note.\n * @return an XML declaration if it could be parsed as one, null otherwise.\n */\npublic XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    if (data.length() < 2) // avoid IndexOutOfBoundsException\n        return null;\n    // Remove only leading/trailing spaces or check for boundaries\n    int start = 0;\n    int end = data.length();\n    // find the first non-whitespace character\n    while (start < end && Character.isWhitespace(data.charAt(start))) start++;\n    // find the last non-whitespace character\n    while (end > start && Character.isWhitespace(data.charAt(end - 1))) end--;\n    if (end - start < 2)\n        return null;\n    // Now, check if it really looks like a potential xmldecl (eg \"<?xml ...?>\")\n    // Fallback for when data does not have expected markup\n    String innerData = data.substring(start, end);\n    if (!(innerData.startsWith(\"!\") || innerData.startsWith(\"?\")))\n        return null;\n    // Defensive: innerData must be at least 2 chars to avoid substring errors\n    String parseData = \"<\" + innerData.substring(1, innerData.length() - 1) + \">\";\n    Document doc = Jsoup.parse(parseData, baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n    if (doc.childNodeSize() > 0 && doc.child(0) instanceof Element) {\n        Element el = doc.child(0);\n        decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));\n        decl.attributes().addAll(el.attributes());\n    }\n    return decl;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}