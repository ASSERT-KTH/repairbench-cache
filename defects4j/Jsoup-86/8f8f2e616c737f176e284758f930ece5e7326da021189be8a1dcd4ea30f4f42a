{
    "generation": "    /**\n     * Attempt to cast this comment to an XML Declaration note.\n     * @return an XML declaration if it could be parsed as one, null otherwise.\n     */\n    public XmlDeclaration asXmlDeclaration() {\n        String data = getData(); // This is the content inside <!--...-->\n\n        // Determine if it's a Processing Instruction (PI) or a DOCTYPE Declaration\n        // PIs start with '?' (e.g., <?xml version=\"1.0\"?>)\n        // DOCTYPEs start with '!' (e.g., <!DOCTYPE html>)\n        boolean isProcessingInstruction = data.startsWith(\"?\");\n        boolean isDocType = data.startsWith(\"!\");\n\n        // If it doesn't start with either expected prefix, it's not a valid XML Declaration or PI.\n        if (!isProcessingInstruction && !isDocType) {\n            return null;\n        }\n\n        // A valid declaration/PI must have at least a prefix ('?' or '!') and a name (e.g., '?a' or '!b').\n        // If data is just '?' or '!', its length is 1, and substring(1) or substring(1, data.length() - 1)\n        // would result in an IndexOutOfBoundsException or empty content.\n        if (data.length() < 2) {\n            return null;\n        }\n\n        String declName = null;\n        Attributes declAttributes = new Attributes();\n        \n        // Use the parser settings from the owner document for tag normalization\n        Parser parser = NodeUtils.parser(ownerDocument());\n        if (parser == null) { // Fallback if ownerDocument is null or has no parser\n            parser = Parser.xmlParser(); // Use default XML parser\n        }\n\n        if (isProcessingInstruction) {\n            // For PIs, the data is typically like \"?xml version='1.0'?\" or \"?target instruction\".\n            // We need to extract \"xml version='1.0'\" or \"target instruction\".\n            String contentToParse = data.substring(1); // Remove leading '?'\n            if (contentToParse.endsWith(\"?\")) { // Remove optional trailing '?' if present\n                contentToParse = contentToParse.substring(0, contentToParse.length() - 1);\n            }\n\n            if (contentToParse.isEmpty()) { // e.g., `<??>` (data was `?` after stripping) or `<? >`\n                return null;\n            }\n\n            // Parse the extracted content as a dummy HTML element to get the tag name and attributes.\n            // Example: \"<xml version='1.0'>\" -> tagName \"xml\", attributes {version=\"1.0\"}\n            Document doc = Jsoup.parse(\"<\" + contentToParse + \">\", baseUri(), parser);\n            if (doc.childNodeSize() > 0) {\n                Element el = doc.child(0);\n                declName = parser.settings().normalizeTag(el.tagName());\n                declAttributes.addAll(el.attributes());\n            } else {\n                return null; // Malformed PI content, could not parse as an element\n            }\n\n        } else { // isDocType (starts with '!')\n            // For DOCTYPE Declarations: data is like \"!DOCTYPE html PUBLIC '...' '...'\".\n            // We need to parse \"html PUBLIC '...' '...'\".\n            String contentToParse = data.substring(1).trim(); // Remove leading '!' and trim whitespace\n\n            // The content should start with \"DOCTYPE\" followed by the actual document type name.\n            int firstSpace = contentToParse.indexOf(' ');\n\n            if (firstSpace == -1) { // e.g., \"!DOCTYPE\" (data is '!DOCTYPE')\n                return null; // Not a valid DOCTYPE declaration (missing name)\n            }\n\n            String docTypeKeyword = contentToParse.substring(0, firstSpace);\n            if (!docTypeKeyword.equalsIgnoreCase(\"DOCTYPE\")) {\n                return null; // Unexpected content after '!'\n            }\n\n            String remainder = contentToParse.substring(firstSpace).trim(); // e.g., \"html PUBLIC '...' '...'\"\n            if (remainder.isEmpty()) { // e.g., \"<!DOCTYPE>\" (data was '!DOCTYPE')\n                return null; // Missing actual document type name\n            }\n\n            // Parse the remainder (e.g., \"html PUBLIC '...' SYSTEM '...'\") as if it were an element's content.\n            // This allows Jsoup's parser to extract the actual document type name (\"html\") as the tag name,\n            // and Public/System IDs as attributes.\n            // Example: \"<html PUBLIC '...' SYSTEM '...'>\" -> tagName \"html\", attributes {PUBLIC='...', SYSTEM='...'}\n            Document doc = Jsoup.parse(\"<\" + remainder + \">\", baseUri(), parser);\n            if (doc.childNodeSize() > 0) {\n                Element el = doc.child(0);\n                declName = parser.settings().normalizeTag(el.tagName());\n                declAttributes.addAll(el.attributes());\n            } else {\n                return null; // Malformed DOCTYPE content, could not parse main part\n            }\n        }\n\n        // If a name couldn't be extracted, return null (e.g., malformed content).\n        if (declName == null) {\n            return null;\n        }\n\n        // Create the XmlDeclaration using the extracted name and attributes.\n        // The `isProcessingInstruction` flag is critical to differentiate between PIs and DOCTYPEs.\n        XmlDeclaration decl = new XmlDeclaration(declName, isProcessingInstruction);\n        decl.attributes().addAll(declAttributes);\n        return decl;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}