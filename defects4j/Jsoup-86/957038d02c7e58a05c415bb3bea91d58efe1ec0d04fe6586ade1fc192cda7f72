{
    "generation": "/**\n * Attempt to cast this comment to an XML Declaration note.\n * @return an XML declaration if it could be parsed as one, null otherwise.\n */\npublic XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    // Validate that the data is at least 2 chars long (e.g., \"!-\" or \"?x\")\n    if (data == null || data.length() < 2) {\n        return null;\n    }\n    String inner;\n    try {\n        inner = data.substring(1, data.length() - 1);\n    } catch (Exception e) {\n        // Defensive against malformed data\n        return null;\n    }\n    Document doc = Jsoup.parse(\"<\" + inner + \">\", baseUri(), Parser.xmlParser());\n    if (doc.childNodeSize() == 0) {\n        return null;\n    }\n\n    Node firstChild = doc.childNode(0);\n    // Defensive: check if firstChild is a Element and also an XmlDeclaration\n    if (!(firstChild instanceof Element)) {\n        return null;\n    }\n    Element el = (Element) firstChild;\n\n    // Only generate XmlDeclaration if the parsed element is an XML declaration, which looks like <?xml ... ?> or similar\n    // So tagName usually starts with '?'\n    // When parsing an actual <? declaration parse, the tag name will be e.g., \"?xml\"\n    // Disallow other tags/comments that might masquerade\n    String tagName = el.tagName();\n    if (!tagName.startsWith(\"?\") && !tagName.startsWith(\"!\")) {\n        return null;\n    }\n\n    XmlDeclaration decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(tagName), data.startsWith(\"!\"));\n    decl.attributes().addAll(el.attributes());\n    return decl;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}