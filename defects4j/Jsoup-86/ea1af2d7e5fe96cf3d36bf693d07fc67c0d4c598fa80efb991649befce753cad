{
    "generation": "/**\n * Attempt to cast this comment to an XML Declaration note.\n * @return an XML declaration if it could be parsed as one, null otherwise.\n */\npublic XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    String inner;\n    if (data.length() > 2) { // Check length to avoid substring errors\n        inner = data.substring(1, data.length() -1);\n    } else {\n        return null;\n    }\n    Document doc;\n    try {\n        doc = Jsoup.parse(\"<\" + inner + \">\", baseUri(), Parser.xmlParser());\n    } catch (Exception e) {\n        return null; // fail gracefully if parse fails\n    }\n    if (doc.childNodeSize() == 0) {\n        return null;\n    }\n    Node first = doc.childNode(0);\n    // Ensure first is an Element node representing the declaration\n    if (!(first instanceof Element))\n        return null;\n\n    Element el = (Element) first;\n\n    // sanity check: if it's a script or style or other unexpected pseudo element, don't treat as declaration\n    String tagName = NodeUtils.parser(doc).settings().normalizeTag(el.tagName());\n    if (tagName.equals(\"script\") || tagName.equals(\"style\")) {\n        return null;\n    }\n\n    XmlDeclaration decl = new XmlDeclaration(tagName, data.startsWith(\"!\"));\n    decl.attributes().addAll(el.attributes());\n    return decl;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}