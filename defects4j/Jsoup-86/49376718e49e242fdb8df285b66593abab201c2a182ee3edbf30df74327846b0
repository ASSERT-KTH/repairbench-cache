{
    "generation": "/**\n * Attempt to cast this comment to an XML Declaration note.\n * @return an XML declaration if it could be parsed as one, null otherwise.\n */\npublic XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    // Guard against empty or too-short data\n    if (data == null || data.length() < 3) return null;\n\n    // The data should start with '!' or '?' and end with '?'\n    char first = data.charAt(0);\n    char last = data.charAt(data.length() - 1);\n\n    // Only consider if it's likely a declaration\n    if (!((first == '!' || first == '?') && last == '?')) return null;\n\n    // The substring - remove leading and trailing markers, be defensive\n    String declData = data.substring(1, data.length() - 1).trim();\n    if (declData.isEmpty()) return null;\n\n    // Try to parse as a declaration node (e.g. \"?xml version=\"1.0\" encoding=\"UTF-8\"?\")\n    Document doc = Jsoup.parse(\"<\" + declData + \">\", baseUri(), Parser.xmlParser());\n    if (doc.childNodeSize() == 0 || !(doc.child(0) instanceof Element)) return null;\n\n    Element el = doc.child(0);\n    String tag = NodeUtils.parser(doc).settings().normalizeTag(el.tagName());\n\n    XmlDeclaration decl = new XmlDeclaration(tag, first == '!');\n    decl.attributes().addAll(el.attributes());\n    return decl;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}