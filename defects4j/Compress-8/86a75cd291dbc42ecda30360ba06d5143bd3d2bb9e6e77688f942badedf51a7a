{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing\n *                                  or if an invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // must have at least one digit + a trailer\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Invalid length, must be at least 2\");\n    }\n    // bounds check\n    if (offset < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Buffer overflow\");\n    }\n    // if the entire field is NULs, that's allowed \u2192 value 0\n    boolean allNuls = true;\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n    long result = 0L;\n    boolean seenDigit = false;\n    int end = offset + length;\n    int i = offset;\n    // parse until first space or NUL\n    for (; i < end; i++) {\n        byte b = buffer[i];\n        if (b == 0) {\n            // NUL terminator\n            break;\n        }\n        if (b == ' ') {\n            if (!seenDigit) {\n                // skip leading spaces\n                continue;\n            } else {\n                // space after digits \u2192 end of number\n                break;\n            }\n        }\n        // must be octal digit\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(\"Invalid octal digit: \" + b);\n        }\n        seenDigit = true;\n        result = (result << 3) + (b - '0');\n    }\n    // we must have consumed at least one digit\n    if (!seenDigit) {\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n    // we must have seen a terminator before running out\n    if (i >= end) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n    // any bytes after the first terminator must be only space or NUL\n    for (int j = i; j < end; j++) {\n        byte b = buffer[j];\n        if (b != 0 && b != ' ') {\n            throw new IllegalArgumentException(\"Invalid trailing character: \" + b);\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}