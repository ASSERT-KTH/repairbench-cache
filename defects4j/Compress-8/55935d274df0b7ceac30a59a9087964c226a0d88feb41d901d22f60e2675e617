{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes, got \" + length);\n    }\n    final int end = offset + length;\n\n    // Check if all bytes are NUL, if so return 0L\n    boolean allNulls = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNulls = false;\n            break;\n        }\n    }\n    if (allNulls) {\n        return 0L;\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int trailerCount = 0;\n    Integer trailerPos = null;\n\n    for (int i = offset; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            if (stillPadding) {\n                continue; // skip leading space or leading zero padding\n            } else {\n                if (trailerCount == 0) {\n                    trailerPos = i;\n                }\n                trailerCount++;\n                continue;\n            }\n        }\n\n        if (trailerCount > 0) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, trailerPos, currentByte));\n        }\n\n        stillPadding = false;\n\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    if (trailerCount == 0) {\n        // missing mandatory trailer space or NUL\n        throw new IllegalArgumentException(\n                \"Invalid octal byte sequence: no trailing space or NUL found\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}