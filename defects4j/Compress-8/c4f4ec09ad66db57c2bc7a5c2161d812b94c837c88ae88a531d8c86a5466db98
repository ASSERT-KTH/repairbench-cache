{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2\");\n        }\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n        boolean terminatedByNul = false;\n        int i;\n\n        for (i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte == 0) {\n                terminatedByNul = true;\n                break;\n            }\n\n            // Skip leading spaces\n            if (stillPadding) {\n                if (currentByte == (byte) ' ') {\n                    continue;\n                } else {\n                    stillPadding = false;\n                }\n            }\n\n            if (currentByte == (byte) ' ') {\n                break;\n            }\n\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0');\n        }\n\n        // Check if we processed all bytes without finding a valid terminator\n        if (i == end) {\n            // The entire buffer was parsed; last byte must be a terminator\n            if (buffer[end - 1] != 0 && buffer[end - 1] != ' ') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, buffer[end - 1]));\n            }\n        }\n\n        // Validate remaining bytes after terminator\n        if (terminatedByNul) {\n            for (int j = i + 1; j < end; j++) {\n                if (buffer[j] != 0) {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, buffer[j]));\n                }\n            }\n        } else {\n            for (int j = i + 1; j < end; j++) {\n                byte b = buffer[j];\n                if (b != 0 && b != ' ') {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, b));\n                }\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}