{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n        }\n\n        long    result = 0;\n        boolean stillPadding = true;\n        int     end = offset + length;\n        int     start = offset;\n        boolean foundNonZero = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            // Handle all NULs case\n            if (i == start && length >= 2) {\n                boolean allNulls = true;\n                for (int j = start; j < end; j++) {\n                    if (buffer[j] != 0) {\n                        allNulls = false;\n                        break;\n                    }\n                }\n                if (allNulls) {\n                    return 0L;\n                }\n            }\n\n            if (currentByte == 0) {\n                if (foundNonZero) {\n                    // We've seen non-NULL bytes before, so this is an embedded NUL\n                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n                // If we're still in padding, treat this as end of string\n                if (stillPadding) {\n                    continue;\n                }\n                // If we've seen non-padding, break (trailing NUL)\n                break;\n            }\n\n            // Skip leading spaces\n            if (stillPadding) {\n                if (currentByte == (byte) ' ') {\n                    continue;\n                }\n                stillPadding = false;\n            }\n\n            if (stillPadding && currentByte == '0') {\n                continue;\n            }\n\n            // Check for trailing space/NUL requirement (but allow for leading spaces)\n            if (i == end - 1) {\n                if (currentByte != (byte) ' ' && currentByte != 0) {\n                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n                break;\n            }\n\n            // Must have trailing NUL or space\n            if (i == end - 2) {\n                final byte nextByte = buffer[i+1];\n                if (nextByte != (byte) ' ' && nextByte != 0) {\n                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, nextByte));\n                }\n            }\n\n            // Check for invalid characters\n            if (currentByte != (byte) ' ' && currentByte != 0) {\n                if (currentByte < '0' || currentByte > '7') {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n                foundNonZero = true;\n                result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            } else if (!stillPadding) {\n                // Found a space or NUL in the middle of the number\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}