{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n\n        // Check if all bytes are NUL (0)\n        boolean allNulls = true;\n        for (int i = start; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNulls = false;\n                break;\n            }\n        }\n        if (allNulls) {\n            return 0L;\n        }\n\n        boolean hasTrailingSpaceOrNull = false;\n        int lastNonSpaceOrNullIndex = -1;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            // Skip leading spaces\n            if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {\n                if (currentByte != ' ') {\n                    stillPadding = false;\n                }\n                continue;\n            }\n\n            stillPadding = false;\n\n            if (currentByte == 0 || currentByte == (byte)' ') {\n                hasTrailingSpaceOrNull = true;\n                // We hit a trailing space or NUL, now check if it's the end or if there's more\n                for (int j = i + 1; j < end; j++) {\n                    if (buffer[j] != 0 && buffer[j] != (byte)' ') {\n                        throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, buffer[j]));\n                    }\n                }\n                break;\n            }\n\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n\n            if (lastNonSpaceOrNullIndex != -1 && i - lastNonSpaceOrNullIndex > 1) {\n                // There was more than one non-space/non-NUL byte between spaces or NULs\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0');\n            lastNonSpaceOrNullIndex = i;\n        }\n\n        if (!hasTrailingSpaceOrNull && !allNulls) {\n            throw new IllegalArgumentException(\n                \"Input must contain a trailing space or NUL\");\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}