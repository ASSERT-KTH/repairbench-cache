{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"length must be at least 2\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        final int end = offset + length;\n        int start = offset;\n\n        // Skip leading spaces\n        while (start < end && buffer[start] == ' ') {\n            start++;\n        }\n\n        // Check if all remaining are NULs or spaces\n        boolean allNulsOrSpaces = true;\n        for (int j = start; j < end; j++) {\n            final byte b = buffer[j];\n            if (b != 0 && b != ' ') {\n                allNulsOrSpaces = false;\n                break;\n            }\n        }\n        if (allNulsOrSpaces) {\n            return 0L;\n        }\n\n        int i;\n        for (i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte == 0) {\n                break;\n            }\n            if (currentByte == ' ') {\n                break;\n            }\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            stillPadding = false;\n            result = (result << 3) + (currentByte - '0');\n        }\n\n        // Check if no digits were processed\n        if (stillPadding) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, (byte) 0));\n        }\n\n        // Check trailing bytes\n        for (int j = i; j < end; j++) {\n            final byte b = buffer[j];\n            if (b != 0 && b != ' ') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, j, b));\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}