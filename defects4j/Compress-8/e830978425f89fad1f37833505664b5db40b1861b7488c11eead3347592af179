{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n\n    long    result = 0;\n    boolean stillPadding = true;\n    int     end = offset + length;\n    int     start = offset;\n    boolean hasNonZero = false;\n\n    // Check if all bytes are NULs\n    boolean allNulls = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNulls = false;\n            break;\n        }\n    }\n    if (allNulls) {\n        return 0L;\n    }\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        if (stillPadding) {\n            if (currentByte == 0) {\n                break;\n            }\n            if (currentByte == ' ') {\n                continue;\n            }\n            if (currentByte >= '0' && currentByte <= '7') {\n                stillPadding = false;\n                hasNonZero = true;\n            } else {\n                break;\n            }\n        }\n\n        if (stillPadding) {\n            continue;\n        }\n\n        if (currentByte == 0 || currentByte == ' ') {\n            // We've found the trailing space/NUL\n            // Check if we've actually parsed something\n            if (i == start && currentByte == ' ') {\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            // Look ahead to see if there's another space/NUL\n            if (i + 1 < end) {\n                byte nextByte = buffer[i+1];\n                if (nextByte != 0 && nextByte != ' ') {\n                    continue; // not actually trailing\n                }\n            }\n            break;\n        }\n\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // Check for missing trailing space/NUL if we processed any digits\n    if (hasNonZero) {\n        boolean hasTrailer = false;\n        for (int i = end - 1; i >= offset; i--) {\n            if (buffer[i] == 0 || buffer[i] == ' ') {\n                hasTrailer = true;\n                break;\n            }\n        }\n        if (!hasTrailer) {\n            throw new IllegalArgumentException(\"Missing trailing space/NUL\");\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}