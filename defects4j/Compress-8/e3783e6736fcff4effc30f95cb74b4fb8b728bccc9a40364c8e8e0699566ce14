{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Check length requirement\n    if (length < 2) {\n        throw new IllegalArgumentException(\n            \"The length must be at least 2 bytes.\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    boolean hasDigits = false;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == 0) {\n            // Check if we've seen any digits before NUL\n            if (hasDigits && i < end - 1) {\n                // Check if remaining bytes are all NUL or space\n                for (int j = i + 1; j < end; j++) {\n                    if (buffer[j] != 0 && buffer[j] != ' ') {\n                        throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                    }\n                }\n            }\n            break;\n        }\n\n        // Skip leading spaces\n        if (stillPadding) {\n            if (currentByte == ' ') {\n                continue;\n            } else if (currentByte == '0') {\n                hasDigits = true;\n                continue;\n            } else {\n                stillPadding = false;\n            }\n        }\n\n        // Must have trailing NUL or space\n        if (currentByte == ' ') {\n            if (i >= end - 1) { // Last character can be space\n                break;\n            } else {\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n        }\n\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        stillPadding = false;\n        hasDigits = true;\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        // CheckStyle:MagicNumber ON\n    }\n\n    // Check if we had any digits (unless all NULs)\n    boolean allNulls = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNulls = false;\n            break;\n        }\n    }\n    if (!allNulls && !hasDigits) {\n        throw new IllegalArgumentException(\n            \"The input must contain at least one digit or all NULs\");\n    }\n\n    // Check trailing space/NUL requirement\n    if (!allNulls) {\n        boolean hasTrailer = false;\n        for (int i = Math.max(start, offset); i < end; i++) {\n            if (buffer[i] == 0 || buffer[i] == ' ') {\n                hasTrailer = true;\n                break;\n            }\n        }\n        if (!hasTrailer) {\n            throw new IllegalArgumentException(\n                \"The input must contain a trailing space or NUL\");\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}