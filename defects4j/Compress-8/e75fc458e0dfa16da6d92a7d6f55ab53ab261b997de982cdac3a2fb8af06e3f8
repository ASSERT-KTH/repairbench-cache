{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2, got: \" + length);\n    }\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    int i = start;\n    boolean foundDigit = false;\n    boolean allNuls = true;\n\n    for (; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte != 0) {\n            allNuls = false;\n        }\n        if (currentByte == 0) { // NUL stops parsing\n            break;\n        }\n        // Skip leading spaces\n        if (currentByte == (byte) ' ' || currentByte == '0') {\n            if (stillPadding) {\n                continue;\n            }\n            if (currentByte == (byte) ' ') {\n                break;\n            }\n        }\n        stillPadding = false;\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        foundDigit = true;\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // If the whole buffer is NULs, accept as zero\n    if (allNuls) {\n        return 0L;\n    }\n\n    // Otherwise buffer must contain at least one digit and a valid trailer\n    if (!foundDigit) {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, start, (byte)0));\n    }\n    // At this point, i points to either end or trailer (space or NUL)\n    // The buffer must contain a trailing space or NUL, and may contain one additional space or NUL\n    // e.g., the last 1 or 2 bytes must be space or NUL\n\n    // For this, we check that the remaining bytes are either NUL or space\n    // and there are not more than 2 trailer bytes\n    int trailers = end - i;\n    if (trailers == 0) {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, start, (byte)0));\n    }\n    if (trailers > 2) {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, start, (byte)0));\n    }\n    for (int j = i; j < end; j++) {\n        byte c = buffer[j];\n        if (c != 0 && c != (byte)' ') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, c));\n        }\n    }\n    // Invalid if there are non-trailer NUL/space in between digits\n    // (i.e. the parsing loop stops early when it encounters an embedded NUL/space, so this is already covered)\n    // Additional test: If embedded NUL/space is found before trailer, then the loop would have stopped and all non-trailer bytes after first non-padding NUL/space in digits are forbidden\n    if (i < end - trailers) {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, start, buffer[i]));\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}