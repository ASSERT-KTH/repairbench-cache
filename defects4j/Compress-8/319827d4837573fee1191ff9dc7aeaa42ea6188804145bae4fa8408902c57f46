{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes, got \" + length);\n    }\n\n    final int end = offset + length;\n    int i = offset;\n\n    // Check all zeros special case (permits missing fields)\n    boolean allNuls = true;\n    for (; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // Reset index to parse content\n    i = offset;\n    long result = 0;\n    boolean stillPadding = true;\n    boolean foundTrailer = false;\n\n    while (i < end) {\n        final byte currentByte = buffer[i];\n\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            foundTrailer = true;\n            break;\n        }\n\n        if (stillPadding && (currentByte == (byte) '0' || currentByte == (byte) ' ')) {\n            // skip leading zeroes or spaces\n            i++;\n            continue;\n        }\n\n        stillPadding = false;\n\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n        i++;\n    }\n\n    if (!foundTrailer) {\n        throw new IllegalArgumentException(\"Invalid octal string: missing trailing space or NUL\");\n    }\n\n    // After trailer, check that the remaining bytes are either spaces or NULs\n    for (int j = i; j < end; j++) {\n        byte b = buffer[j];\n        if (b != 0 && b != (byte) ' ') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, j, b));\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}