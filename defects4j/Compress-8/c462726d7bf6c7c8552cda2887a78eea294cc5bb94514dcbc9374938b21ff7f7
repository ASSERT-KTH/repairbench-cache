{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes, but was \" + length);\n    }\n    if (buffer == null || buffer.length < offset + length) {\n        throw new IllegalArgumentException(\"Buffer too small for parseOctal\");\n    }\n\n    int end = offset + length;\n    int start = offset;\n\n    // Check for all NULs special case\n    boolean allNuls = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // Otherwise, not all NULs: must have trailing space or NUL\n    if (buffer[end - 1] != 0 && buffer[end - 1] != (byte) ' ') {\n        throw new IllegalArgumentException(\"Trailing space or NUL missing in buffer\");\n    }\n\n    // Accept an optional extra trailing space/NUL\n    int trailerPos = end - 1;\n    int preTrailerPos = trailerPos - 1;\n    if (preTrailerPos < start) {\n        throw new IllegalArgumentException(\"Not enough length for parseOctal field\");\n    }\n\n    // If the last two bytes are both trailing chars, skip the last one\n    // as the spec allows one or two\n    if (buffer[trailerPos] == 0 || buffer[trailerPos] == (byte) ' ') {\n        if (buffer[preTrailerPos] == 0 || buffer[preTrailerPos] == (byte) ' ') {\n            trailerPos = preTrailerPos;\n        }\n    }\n    // Now trailerPos is at the real trailer (must be ' ' or 0)\n\n    // Parse\n    long result = 0;\n    boolean stillPadding = true;\n    int i = start;\n    while (i < trailerPos) {\n        byte currentByte = buffer[i];\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            if (stillPadding) {\n                i++;\n                continue;\n            } else {\n                // Embedded space/NUL is not allowed\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n        }\n        stillPadding = false;\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n        i++;\n    }\n\n    // If no digits were parsed, that's invalid\n    if (stillPadding) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, buffer[start]));\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}