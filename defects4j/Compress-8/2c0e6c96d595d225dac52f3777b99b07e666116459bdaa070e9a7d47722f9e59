{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"length must be at least 2 bytes\");\n        }\n\n        long    result = 0;\n        boolean stillPadding = true;\n        int     end = offset + length;\n        int     start = offset;\n        boolean hasNonNul = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            // Check for NUL or space at start (all NULs case)\n            if (i == start && currentByte == 0) {\n                // Check if all bytes are NUL\n                boolean allNuls = true;\n                for (int j = start + 1; j < end; j++) {\n                    if (buffer[j] != 0) {\n                        allNuls = false;\n                        break;\n                    }\n                }\n                if (allNuls) {\n                    return 0L;\n                }\n            }\n\n            if (currentByte == 0) {\n                break;\n            }\n\n            // Skip leading spaces\n            if (currentByte == (byte) ' ' || currentByte == '0') {\n                if (stillPadding) {\n                    continue;\n                }\n                if (currentByte == (byte) ' ') {\n                    break;\n                }\n            }\n\n            stillPadding = false;\n            hasNonNul = true;\n\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        // Check if we had any non-NUL bytes and didn't find a proper trailer\n        if (hasNonNul) {\n            // Verify we have a proper trailer (space or NUL)\n            boolean hasTrailer = false;\n            for (int i = start; i < end; i++) {\n                if (buffer[i] == ' ' || buffer[i] == 0) {\n                    hasTrailer = true;\n                    break;\n                }\n            }\n            if (!hasTrailer) {\n                throw new IllegalArgumentException(\n                        \"Missing trailing space or NUL\");\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}