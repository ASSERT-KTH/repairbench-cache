{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2\");\n    }\n    long result = 0;\n    boolean stillPadding = true;\n    int start = offset;\n    int end = offset + length;\n\n    // Check that the input buffer is within bounds\n    if (offset < 0 || length < 0 || end > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid offset/length for buffer size\");\n    }\n\n    // Special case: all NULs is interpreted as zero\n    boolean allNuls = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    boolean foundTrailer = false;\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        // Accept first embedded trailer (' ' or NUL)\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            foundTrailer = true;\n\n            // Any further bytes must only be trailer bytes\n            for (int j = i + 1; j < end; j++) {\n                byte b = buffer[j];\n                if (b != 0 && b != (byte) ' ') {\n                    throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, b));\n                }\n            }\n            break; // done parsing\n        }\n\n        if (stillPadding && (currentByte == (byte) ' ' || currentByte == (byte) '0')) {\n            continue;\n        }\n\n        stillPadding = false;\n\n        // Must be an octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    if (!foundTrailer) {\n        throw new IllegalArgumentException(\n            \"Invalid octal byte sequence: does not end with space or NUL\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}