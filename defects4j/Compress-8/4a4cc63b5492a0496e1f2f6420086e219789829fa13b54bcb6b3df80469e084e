{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    boolean foundTrailer = false;\n\n    // Check for all NULs\n    boolean allNuls = true;\n    for (int i = offset; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    int i = start;\n    // Skip leading spaces\n    while (i < end && (buffer[i] == (byte) ' ')) {\n        i++;\n    }\n    // Now, buffer[i] is first non-space, or i==end\n\n    // All NULs case has already been handled\n\n    boolean seenDigit = false;\n    for (; i < end; i++) {\n        final byte currentByte = buffer[i];\n        // Detect trailer\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            foundTrailer = true;\n            // make sure remaining bytes are all NUL or space (may be up to 1 more NUL/space allowed)\n            for (int j = i; j < end; j++) {\n                if (buffer[j] != 0 && buffer[j] != (byte)' ') {\n                    throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, buffer[j]));\n                }\n            }\n            break;\n        }\n        if (currentByte >= '0' && currentByte <= '7') {\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            stillPadding = false;\n            seenDigit = true;\n            continue;\n        }\n        // Only allow '0' as padding when stillPadding is true\n        if (currentByte == '0' && stillPadding) {\n            continue;\n        }\n        // Otherwise, invalid character (including embedded space or NUL)\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));\n    }\n    if (!foundTrailer) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL in the buffer\");\n    }\n    if (!seenDigit && !stillPadding) {\n        throw new IllegalArgumentException(\"No digits found in buffer\");\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}