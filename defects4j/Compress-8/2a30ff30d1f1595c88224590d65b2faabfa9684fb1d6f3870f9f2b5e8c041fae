{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"length must be at least 2\");\n    }\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    int i = start;\n\n    // Check if all NULs\n    boolean allNuls = true;\n    for (int j = start; j < end; j++) {\n        if (buffer[j] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // The buffer must end in a space or NUL (or have the next after that as space/NUL)\n    if (buffer[end - 1] != 0 && buffer[end - 1] != (byte) ' ') {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n    }\n\n    // Second last allowed to be space/nul, but not required.\n    // Now parse\n    for (; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            // Only trailing NULs or spaces allowed. Rest must be digits\n            // Any embedded NUL or space (i.e., not at trailing position) is invalid\n            for (int j = i; j < end; j++) {\n                if (buffer[j] != 0 && buffer[j] != (byte) ' ') {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, j, buffer[j]));\n                }\n            }\n            break;\n        }\n        if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {\n            continue;\n        }\n        stillPadding = false;\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // If we never saw a non-padding character, check if trailing space/NULs are valid for all NUL case above\n    if (stillPadding) {\n        return 0L;\n    }\n\n    // There must be at least one trailing space or NUL, which the logic above ensures\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}