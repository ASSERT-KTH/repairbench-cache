{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) { // Must be at least 2 bytes long\n        throw new IllegalArgumentException(\n            \"Length is less than minimum required 2 bytes: \" + length);\n    }\n    final int end = offset + length;\n    if (end > buffer.length || offset < 0 || length < 0) {\n        throw new IllegalArgumentException(\"Invalid offset or length\");\n    }\n\n    boolean allNuls = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // Check last byte(s) for valid trailer: should be 0 or space\n    int lastIdx = end - 1;\n    if (!(buffer[lastIdx] == 0 || buffer[lastIdx] == (byte) ' ')) {\n        throw new IllegalArgumentException(\"Invalid trailer in buffer: expected space or NUL\");\n    }\n    // Optional second trailing NUL or space\n    int trailerCount = 1;\n    if (length >= 2 && lastIdx - 1 >= offset && (buffer[lastIdx - 1] == 0 || buffer[lastIdx - 1] == (byte) ' ')) {\n        trailerCount++;\n    }\n\n    int digitEnd = end - trailerCount;\n\n    boolean stillPadding = true;\n    long result = 0;\n    int start = offset;\n    for (int i = start; i < digitEnd; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            if (stillPadding) {\n                continue;\n            }\n            // Embedded NUL or space terminates digits early => INVALID\n            throw new IllegalArgumentException(\n                \"Invalid embedded NUL or space in buffer at position \" + i);\n        } else {\n            stillPadding = false;\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0');\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}