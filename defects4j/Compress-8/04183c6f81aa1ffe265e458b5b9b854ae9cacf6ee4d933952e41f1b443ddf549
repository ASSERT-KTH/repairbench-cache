{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2\");\n        }\n\n        final int end = offset + length;\n\n        // Check if all bytes are NULs\n        boolean allNuls = true;\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNuls = false;\n                break;\n            }\n        }\n        if (allNuls) {\n            return 0L;\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        boolean terminatorFound = false;\n        boolean digitsProcessed = false;\n\n        for (int i = offset; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            // Skip leading spaces\n            if (stillPadding) {\n                if (currentByte == (byte) ' ') {\n                    continue;\n                } else {\n                    stillPadding = false;\n                }\n            }\n\n            if (currentByte == 0 || currentByte == (byte) ' ') {\n                terminatorFound = true;\n                // Check remaining bytes are spaces or NULs\n                for (int j = i + 1; j < end; j++) {\n                    byte b = buffer[j];\n                    if (b != 0 && b != (byte) ' ') {\n                        throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, j, b));\n                    }\n                }\n                break;\n            }\n\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n\n            result = (result << 3) + (currentByte - '0');\n            digitsProcessed = true;\n        }\n\n        if (stillPadding) {\n            throw new IllegalArgumentException(\"No digits found\");\n        }\n\n        if (!digitsProcessed) {\n            throw new IllegalArgumentException(\"No digits parsed\");\n        }\n\n        if (!terminatorFound) {\n            throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}