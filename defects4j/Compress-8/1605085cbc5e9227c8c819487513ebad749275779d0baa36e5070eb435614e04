{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // The field must be at least 2 bytes long.\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Octal field length must be at least 2 bytes\");\n    }\n    int end = offset + length;\n    \n    // If the entire field is NULs then return 0.\n    boolean allNull = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNull = false;\n            break;\n        }\n    }\n    if (allNull) {\n        return 0;\n    }\n    \n    // Skip any leading spaces. Note: do not skip digit '0'.\n    int idx = offset;\n    while (idx < end && buffer[idx] == (byte) ' ') {\n        idx++;\n    }\n    \n    long result = 0;\n    boolean foundDigit = false;\n    // Parse octal digits until a delimiter (NUL or space) is reached.\n    while (idx < end) {\n        byte currentByte = buffer[idx];\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            break;\n        }\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, idx, currentByte));\n        }\n        foundDigit = true;\n        result = (result << 3) + (currentByte - '0');\n        idx++;\n    }\n    \n    // There must be at least one octal digit.\n    if (!foundDigit) {\n        throw new IllegalArgumentException(\"No octal digits found in field\");\n    }\n    \n    // At this point, we must have encountered a trailing delimiter.\n    if (idx >= end) {\n        throw new IllegalArgumentException(\"Missing null terminator or space at end of octal field\");\n    }\n    \n    // The remainder of the field (if any) must consist solely of NULs and/or spaces.\n    for (; idx < end; idx++) {\n        byte currentByte = buffer[idx];\n        if (currentByte != 0 && currentByte != (byte) ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, idx, currentByte));\n        }\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}