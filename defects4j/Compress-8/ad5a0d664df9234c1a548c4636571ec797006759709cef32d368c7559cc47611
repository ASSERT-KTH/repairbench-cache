{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2\");\n    }\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    // Special-case: input buffer contains all NULs\n    boolean allNuls = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // All fields must contain a trailing space or NUL (may have additional)\n    // Both last two bytes must be spaces or NULs; or,\n    // must have at least one NUL or space at end, and not multiple NULs/trailers after content chars\n    // Accept both patterns: NUL,space or space,NUL or both NUL (checked above), or both space\n    // Stricter: at least one NUL or space at buffer[end-1] and possibly [end-2], allow both\n    \n    // Check for trailer (at least last byte must be space or NUL)\n    if ((buffer[end - 1] != (byte) ' ') && (buffer[end - 1] != 0)) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n    // If length > 2: possible to have both\n    if (length > 2 && (buffer[end - 2] != (byte) ' ') && (buffer[end - 2] != 0)\n            && !(buffer[end - 1] == (byte) ' ' || buffer[end - 1] == 0)) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n\n    int i = start;\n    // Skip leading spaces\n    while (i < end && (buffer[i] == (byte) ' ')) {\n        i++;\n    }\n\n    // Octal digits: must be '0'..'7'\n    int octalStart = i;\n    while (i < end) {\n        byte currentByte = buffer[i];\n\n        // Stop at the first trailer\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            break;\n        }\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        stillPadding = false;\n        i++;\n    }\n\n    // We must now be at trailing chars: all remaining must be space/NUL\n    for (; i < end; i++) {\n        byte b = buffer[i];\n        if (b != 0 && b != (byte) ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, b));\n        }\n    }\n\n    // All strict: not allowed to have embedded spaces/NULs in digits\n    // (i.e., \"07 1\" or \"07\\0001\" should be rejected)\n\n    // If no octal digits, treat as zero (but if only padding already filtered above)\n    // (ie, \"   \\0\" is legal and yields 0L)\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}