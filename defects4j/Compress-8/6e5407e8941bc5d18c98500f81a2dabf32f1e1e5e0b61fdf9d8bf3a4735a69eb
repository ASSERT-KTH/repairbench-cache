{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length of octal field must be at least 2 bytes\");\n    }\n\n    final int end = offset + length;\n    // Check for all NULs: allow and return 0L\n    boolean allNuls = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int i = offset;\n    int trailerPos = -1;\n\n    // Strip leading spaces and zeros\n    for (; i < end; i++) {\n        byte b = buffer[i];\n        if (b == (byte)' ' || b == (byte)'0') {\n            if (stillPadding) {\n                continue;\n            }\n        }\n        stillPadding = false;\n        break;\n    }\n\n    // No digits present after padding\n    if (i >= end) {\n        throw new IllegalArgumentException(\"No valid octal digits found\");\n    }\n\n    boolean digitRead = false;\n    // Parse digits. Must be only '0'..'7'\n    for (; i < end; i++) {\n        byte b = buffer[i];\n\n        if (b >= '0' && b <= '7') {\n            result = (result << 3) + (b - '0');\n            digitRead = true;\n        } else if (b == (byte)' ' || b == 0) {\n            trailerPos = i;\n            break;\n        } else {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, b));\n        }\n    }\n\n    if (!digitRead) {\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n\n    // Must have at least one trailing space or NUL (i.e., trailerPos >= 0)\n    if (trailerPos == -1) {\n        throw new IllegalArgumentException(\"Octal value missing trailing space or NUL\");\n    }\n\n    // After the first trailer byte, only allow more trailing spaces or NULs\n    for (int j = trailerPos; j < end; j++) {\n        byte b = buffer[j];\n        if (b != (byte)' ' && b != 0) {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, j, b));\n        }\n    }\n\n    // Check for embedded trailer inside the digits\n    for (int k = i - 1; k >= offset; k--) {\n        byte b = buffer[k];\n        if (b == (byte)' ' || b == 0) {\n            // Embedded trailer found before the digit block ends\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, k, b));\n        } else if (b >= '0' && b <= '7') {\n            break; // Last digit found, OK\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}