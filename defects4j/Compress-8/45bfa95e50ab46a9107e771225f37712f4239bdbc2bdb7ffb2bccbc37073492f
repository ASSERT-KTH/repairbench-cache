{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // The field length must be at least 2 bytes.\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes.\");\n    }\n    int end = offset + length;\n    \n    // The very last byte must be either a NUL or a space.\n    byte trailer = buffer[end - 1];\n    if (trailer != 0 && trailer != (byte) ' ') {\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, trailer));\n    }\n    \n    // If the entire field consists solely of NULs, return 0 (this is allowed).\n    boolean allNull = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNull = false;\n            break;\n        }\n    }\n    if (allNull) {\n        return 0L;\n    }\n    \n    // Skip any leading spaces.\n    int i = offset;\n    while (i < end && buffer[i] == (byte) ' ') {\n        i++;\n    }\n    // At this point, there must be at least one digit;\n    // if we've reached a NUL right away, that means non-NUL data exists elsewhere so that's an error.\n    if (i >= end || buffer[i] == 0) {\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, buffer[i < end ? i : end - 1]));\n    }\n    \n    long result = 0;\n    boolean foundDigit = false;\n    // Process the octal digits.\n    for (; i < end; i++) {\n        byte b = buffer[i];\n        // A delimiter (space or NUL) signals the end of the number.\n        if (b == (byte) ' ' || b == 0) {\n            // All remaining bytes (if any) must be either space or NUL.\n            for (int j = i; j < end; j++) {\n                if (buffer[j] != (byte) ' ' && buffer[j] != 0) {\n                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, j, buffer[j]));\n                }\n            }\n            break;\n        }\n        // Only digits '0' to '7' are valid.\n        if (b < (byte) '0' || b > (byte) '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, b));\n        }\n        foundDigit = true;\n        result = (result << 3) + (b - (byte) '0');\n    }\n    \n    if (!foundDigit) {\n        // If no digit was found in a field that isn\u2019t all NULs, this is considered an error.\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, offset, buffer[offset]));\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}