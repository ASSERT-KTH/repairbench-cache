{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // The field must be at least 2 bytes long.\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Octal field length must be at least 2 bytes: \" + length);\n    }\n    final int end = offset + length;\n    \n    // If every byte in the field is NUL then this is a missing field.\n    boolean allNull = true;\n    for (int idx = offset; idx < end; idx++) {\n        if (buffer[idx] != 0) {\n            allNull = false;\n            break;\n        }\n    }\n    if (allNull) {\n        return 0L;\n    }\n    \n    int i = offset;\n    // Skip only leading spaces.\n    while (i < end && buffer[i] == (byte) ' ') {\n        i++;\n    }\n    if (i >= end) {\n        // Should not happen since we already ruled out all-NUL fields.\n        throw new IllegalArgumentException(\"Invalid octal field: no digits after leading spaces.\");\n    }\n    \n    // Parse octal digits.\n    int digitStart = i;\n    long result = 0;\n    while (i < end && buffer[i] >= '0' && buffer[i] <= '7') {\n        result = (result << 3) + (buffer[i] - '0');\n        i++;\n    }\n    if (i == digitStart) {\n        // No valid octal digit was found.\n        throw new IllegalArgumentException(\"Invalid octal field: no octal digits found.\");\n    }\n    \n    // There MUST be a trailer byte (space or NUL) immediately following the digits.\n    if (i >= end) {\n        throw new IllegalArgumentException(\"Invalid octal field: missing trailing space or NUL.\");\n    }\n    if (buffer[i] != (byte) ' ' && buffer[i] != 0) {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, i, buffer[i])\n        );\n    }\n    \n    // All remaining bytes MUST be trailer bytes.\n    for (int j = i; j < end; j++) {\n        if (buffer[j] != (byte) ' ' && buffer[j] != 0) {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, j, buffer[j])\n            );\n        }\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}