{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        // Fix 1: Initial length check as per Javadoc.\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n        }\n\n        // Fix 2: Check for all NULs first.\n        // This handles cases like new byte[]{0,0,0} returning 0L without\n        // being caught as an invalid NUL later.\n        boolean allNuls = true;\n        for (int i = offset; i < offset + length; i++) {\n            if (buffer[i] != 0) {\n                allNuls = false;\n                break;\n            }\n        }\n        if (allNuls) {\n            return 0L;\n        }\n\n        long    result = 0;\n        boolean stillPadding = true; // True if we are still skipping leading spaces/zeros\n        int     end = offset + length;\n        boolean foundTerminator = false; // Fix 5: Flag to track if a valid terminator was found\n\n        for (int i = offset; i < end; i++){\n            final byte currentByte = buffer[i];\n\n            // Fix 3: Handle NUL bytes (0x00)\n            if (currentByte == 0) {\n                if (stillPadding) {\n                    // NUL byte encountered before any meaningful characters.\n                    // Since allNuls is already checked, this is an invalid leading NUL.\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, i, currentByte));\n                } else {\n                    // NUL byte encountered after digits have been parsed. This is a valid terminator.\n                    foundTerminator = true;\n                    break;\n                }\n            }\n\n            // Handle spaces and '0' characters (which can be padding or digits)\n            if (currentByte == (byte) ' ' || currentByte == '0') {\n                if (stillPadding) {\n                   continue; // Skip current character as leading padding\n                }\n                // If not stillPadding, and it's a space, it's an embedded space.\n                // Fix 4: Embedded spaces are invalid.\n                if (currentByte == (byte) ' ') {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, i, currentByte));\n                }\n                // If it's '0' and not stillPadding, it's an actual '0' digit.\n                // Fall through to parse it.\n            }\n\n            // If we reach here, currentByte is not 0x00, not leading ' ', not leading '0'.\n            // It must be an octal digit or an invalid character.\n            stillPadding = false; // We've moved past the padding phase.\n\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        // Fix 5: Check for missing trailing space/NUL.\n        // If the loop completed without hitting a valid 'break' (i.e., no terminator found),\n        // and we actually parsed some digits (i.e., not all padding), then it's an error.\n        if (!foundTerminator && !stillPadding) {\n            // Using a generic message or a dummy byte for the exceptionMessage utility.\n            // The test checks for IllegalArgumentException, so the message content is less critical here.\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end, (byte) ' '));\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}