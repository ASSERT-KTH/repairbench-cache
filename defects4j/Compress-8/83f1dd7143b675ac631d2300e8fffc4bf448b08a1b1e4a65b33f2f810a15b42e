{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2\");\n    }\n    // Check for all NULs\n    boolean allNuls = true;\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    int i = start;\n    // Skip leading spaces\n    for (; i < end; i++) {\n        if (buffer[i] == (byte) ' ' || buffer[i] == 0) {\n            // still leading padding\n        } else {\n            break;\n        }\n    }\n    // Now i points at first non-space/non-NUL char or end\n\n    int digitsStart = i;\n    int digitsEnd = end;\n    boolean foundTrailer = false;\n    // Parse octal digits\n    for (; i < end; i++) {\n        byte currentByte = buffer[i];\n        if (currentByte >= '0' && currentByte <= '7') {\n            result = (result << 3) + (currentByte - '0');\n            stillPadding = false;\n        } else if (currentByte == (byte) ' ' || currentByte == 0) {\n            foundTrailer = true;\n            digitsEnd = i;\n            // There may be at most one more trailing space or NUL\n            i++;\n            if (i < end && (buffer[i] == (byte) ' ' || buffer[i] == 0)) {\n                i++;\n            }\n            // Any remaining chars must also be only NULs or spaces\n            while (i < end) {\n                if (buffer[i] != (byte) ' ' && buffer[i] != 0) {\n                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, buffer[i]));\n                }\n                i++;\n            }\n            break;\n        } else {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n    }\n    // Check for mandatory trailer (space or NUL)\n    if (!foundTrailer) {\n        throw new IllegalArgumentException(\"Invalid octal byte at offset \" + (end - 1) + \", no trailing space or NUL\");\n    }\n    // There must be at least one octal digit\n    if (digitsStart == digitsEnd) {\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}