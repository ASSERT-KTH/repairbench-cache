{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the length is less than 2, trailing space/NUL is missing or if a invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    boolean hasTrailingSpaceOrNull = false;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        if (i == end - 1) {\n            if (currentByte != ' ' && currentByte != 0) {\n                throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n            }\n            hasTrailingSpaceOrNull = true;\n        }\n\n        if (currentByte == 0) {\n            if (i == end - 1) {\n                hasTrailingSpaceOrNull = true;\n            }\n            if (stillPadding && i != end - 1) {\n                continue;\n            }\n            break;\n        }\n\n        if (currentByte == ' ') {\n            if (stillPadding) {\n                continue;\n            }\n            if (i == end - 1) {\n                hasTrailingSpaceOrNull = true;\n            }\n            break;\n        }\n\n        stillPadding = false;\n\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    if (!hasTrailingSpaceOrNull && result != 0) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n\n    if (result == 0 && !allNuls(buffer, offset, length)) {\n        throw new IllegalArgumentException(\"Input is not all NULs and not a valid octal number\");\n    }\n\n    return result;\n}\n\nprivate static boolean allNuls(final byte[] buffer, final int offset, final int length) {\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int start, final byte currentByte) {\n    return \"Invalid octal byte: \" + currentByte + \" at position \" + (start - offset) + \" in buffer of length \" + length;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}