{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the field length is less than 2, if the trailing space/NUL is missing,\n *         if no octal digits are found in a non\u2010all\u2010NUL field, or if an invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Octal field length must be at least 2 bytes.\");\n    }\n    int end = offset + length;\n\n    // Check if the field is composed entirely of NULs.\n    boolean allNul = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNul = false;\n            break;\n        }\n    }\n    if (allNul) {\n        return 0L;\n    }\n    \n    // The last byte must be either NUL or space.\n    if (buffer[end - 1] != 0 && buffer[end - 1] != (byte)' ') {\n        throw new IllegalArgumentException(\"Octal field does not end with a trailing space or NUL.\");\n    }\n    \n    // Skip leading spaces.\n    int i = offset;\n    while (i < end && buffer[i] == (byte)' ') {\n        i++;\n    }\n    \n    // There should be at least one octal digit.\n    long result = 0L;\n    boolean foundDigit = false;\n    while (i < end && buffer[i] >= (byte)'0' && buffer[i] <= (byte)'7') {\n        foundDigit = true;\n        result = (result << 3) + (buffer[i] - (byte)'0');\n        i++;\n    }\n    if (!foundDigit) {\n        throw new IllegalArgumentException(\"No octal digits found in field.\");\n    }\n    \n    // The first non-digit (if any) must be a valid terminator (either space or NUL).\n    if (i < end && buffer[i] != 0 && buffer[i] != (byte)' ') {\n        throw new IllegalArgumentException(\"Invalid character in octal field: \" + buffer[i]);\n    }\n    \n    // The remainder of the field, if any, must be either spaces or NULs.\n    while (i < end) {\n        if (buffer[i] != 0 && buffer[i] != (byte)' ') {\n            throw new IllegalArgumentException(\"Invalid trailing character in octal field: \" + buffer[i]);\n        }\n        i++;\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}