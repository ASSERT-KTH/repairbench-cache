{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2 || buffer == null || offset < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid buffer range or length < 2\");\n    }\n\n    int end = offset + length;\n    int start = offset;\n\n    // Check for all NULs\n    boolean allNuls = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // check for a valid trailer: must be space or NUL in last 1 or 2 bytes\n    boolean hasTrailer = false;\n    if (length >= 2) {\n        byte last = buffer[end - 1];\n        byte secondLast = buffer[end - 2];\n        if ((last == 0 || last == (byte) ' ')) {\n            hasTrailer = true;\n        } else if ((secondLast == 0 || secondLast == (byte) ' ') &&\n                   (last == 0 || last == (byte) ' ')) {\n            hasTrailer = true;\n        }\n    }\n    if (!hasTrailer) {\n        throw new IllegalArgumentException(\"Invalid octal: missing trailing space or NUL\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    boolean seenDigit = false;\n\n    for (int i = start; i < end; i++) {\n        byte b = buffer[i];\n        if (b == 0 || b == (byte) ' ') {\n            // If still in padding, skip\n            if (stillPadding) {\n                continue;\n            } else {\n                // trailing space or NUL, parsing stops here\n                // check if there are only additional trailing spaces or NULs\n                for (int j = i; j < end; j++) {\n                    byte c = buffer[j];\n                    if (c != 0 && c != (byte) ' ') {\n                        throw new IllegalArgumentException(\n                                exceptionMessage(buffer, offset, length, i, c));\n                    }\n                }\n                break;\n            }\n        } else if (b == '0' && stillPadding) {\n            continue;\n        } else {\n            stillPadding = false;\n            seenDigit = true;\n            if (b < '0' || b > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, b));\n            }\n            result = (result << 3) + (b - '0');\n        }\n    }\n\n    if (!seenDigit) {\n        // Did not see any digit\n        return 0L;\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}