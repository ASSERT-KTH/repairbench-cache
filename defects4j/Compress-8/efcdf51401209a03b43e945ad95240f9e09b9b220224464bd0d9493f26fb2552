{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // length must be at least 2 bytes\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes long\");\n    }\n    // bounds check\n    if (buffer == null || offset < 0 || length < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Buffer too small for parseOctal\");\n    }\n    final int end = offset + length;\n    // if all bytes are NUL, that's allowed and returns 0\n    boolean allNulls = true;\n    for (int j = offset; j < end; j++) {\n        if (buffer[j] != 0) {\n            allNulls = false;\n            break;\n        }\n    }\n    if (allNulls) {\n        return 0L;\n    }\n    int i = offset;\n    // skip leading spaces\n    while (i < end && buffer[i] == (byte) ' ') {\n        i++;\n    }\n    // parse octal digits until we hit a space or NUL\n    final int digitStart = i;\n    long result = 0L;\n    while (i < end) {\n        byte b = buffer[i];\n        if (b == (byte) ' ' || b == 0) {\n            break;\n        }\n        if (b < (byte) '0' || b > (byte) '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, b));\n        }\n        result = (result << 3) + (b - (byte) '0');\n        i++;\n    }\n    // must have seen at least one digit\n    if (i == digitStart) {\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n    // must have at least one terminator (space or NUL)\n    if (i >= end) {\n        throw new IllegalArgumentException(\"Missing octal terminator\");\n    }\n    // consume first terminator\n    byte term = buffer[i++];\n    if (term != (byte) ' ' && term != 0) {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, i - 1, term));\n    }\n    // optionally consume a second terminator\n    if (i < end) {\n        term = buffer[i];\n        if (term == (byte) ' ' || term == 0) {\n            i++;\n        }\n    }\n    // any remaining non-pad bytes are invalid\n    if (i != end) {\n        byte b = buffer[i];\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, i, b));\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}