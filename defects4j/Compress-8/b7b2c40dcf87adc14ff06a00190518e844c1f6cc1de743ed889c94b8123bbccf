{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Must be at least 2 bytes long\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 but was \" + length);\n    }\n\n    if (buffer == null || buffer.length < offset + length) {\n        throw new IllegalArgumentException(\"Buffer too small for offset + length\");\n    }\n\n    // Check for all NULs: if so, return 0L\n    boolean allNuls = true;\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // There must be a trailing NUL or space at the end or second-to-last position\n    int last = offset + length - 1;\n    int trailIdx = last;\n    if (buffer[trailIdx] != 0 && buffer[trailIdx] != (byte) ' ') {\n        trailIdx--;\n        if (trailIdx < offset || (buffer[trailIdx] != 0 && buffer[trailIdx] != (byte) ' ')) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, trailIdx, buffer[trailIdx < offset ? offset : trailIdx]));\n        }\n    }\n\n    // The parse region is offset to trailIdx (exclusive)\n    int start = offset;\n    int end = trailIdx;\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == (byte) ' ') {\n        start++;\n    }\n\n    long result = 0L;\n    boolean digitSeen = false;\n    for (int i = start; i < end; i++) {\n        byte b = buffer[i];\n        if (b < '0' || b > '7') {\n            // Embedded space or NUL or invalid char, error\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, b));\n        }\n        digitSeen = true;\n        result = (result << 3) + (b - (byte) '0');\n    }\n    // No digits found - treat as zero (like in traditional tar behavior)\n    // But usually length >= 2 and at least trailing NUL/space exists; test-case driven.\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}