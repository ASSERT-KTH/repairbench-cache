{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        // According to Javadoc, length must be at least 2 bytes.\n        // This handles cases like empty array or single-byte array.\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2 bytes.\");\n        }\n\n        // Special handling for the \"all NULs\" case as specified in the Javadoc.\n        // This must be checked explicitly to distinguish \"000\" from e.g. \"00\\0 \".\n        boolean allNuls = true;\n        for (int i = offset; i < offset + length; i++) {\n            if (buffer[i] != 0) {\n                allNuls = false;\n                break;\n            }\n        }\n        if (allNuls) {\n            return 0L;\n        }\n\n        long result = 0;\n        boolean stillPadding = true; // True while skipping leading spaces or leading zeroes\n        int end = offset + length;\n\n        for (int i = offset; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            // If a NUL or space is encountered:\n            // 1. If it's a leading NUL and not an \"all NULs\" string, it's an error.\n            // 2. If it's a leading space, continue skipping.\n            // 3. If it's a NUL or space after digits, it's a terminator. All subsequent bytes must also be terminators.\n            if (currentByte == 0 || currentByte == (byte) ' ') {\n                // If we are still in padding mode:\n                if (stillPadding) {\n                    // Leading NULs are only allowed if the entire buffer is NULs (handled by `allNuls` check).\n                    // If we reach here and `currentByte == 0`, it means it's a leading NUL but not \"all NULs\", which is an error.\n                    if (currentByte == 0) {\n                        throw new IllegalArgumentException(\n                                exceptionMessage(buffer, offset, length, i, currentByte));\n                    }\n                    // Leading spaces are skipped.\n                    continue;\n                }\n\n                // If we are NOT still padding (i.e., we've seen digits),\n                // then this NUL or space indicates the end of the number.\n                // All remaining characters in the specified length must also be NULs or spaces.\n                for (int j = i; j < end; j++) {\n                    if (buffer[j] != 0 && buffer[j] != (byte) ' ') {\n                        throw new IllegalArgumentException(\n                                exceptionMessage(buffer, offset, length, j, buffer[j]));\n                    }\n                }\n                return result; // All remaining bytes are valid terminators.\n            }\n\n            // If we are here, currentByte is not a NUL or space. It must be an octal digit or an invalid character.\n            stillPadding = false; // We are no longer skipping padding.\n\n            // Check for valid octal digit ('0' through '7').\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        // If the loop completes without returning, it means we reached the `end`\n        // of the specified length without encountering a NUL or space terminator.\n        // According to the Javadoc: \"The buffer must contain a trailing space or NUL\".\n        // Therefore, if this point is reached, the trailing terminator is missing.\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, (byte)0)); // Point to the last byte as the \"missing terminator\" location\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}