{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Basic sanity checks\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Octal field must be at least 2 bytes long\");\n    }\n    if (offset < 0 || length < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid offset/length\");\n    }\n    // Special\u2010case: all NULs \u21d2 missing field \u21d2 zero\n    boolean allNul = true;\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allNul = false;\n            break;\n        }\n    }\n    if (allNul) {\n        return 0L;\n    }\n    int end = offset + length;\n    int idx = offset;\n    // Skip only leading spaces\n    while (idx < end && buffer[idx] == (byte)' ') {\n        idx++;\n    }\n    // We must now see at least one octal digit\n    if (idx >= end) {\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n    long result = 0L;\n    boolean digitFound = false;\n    // Parse octal digits\n    while (idx < end) {\n        byte b = buffer[idx];\n        if (b >= '0' && b <= '7') {\n            digitFound = true;\n            result = (result << 3) + (b - '0');\n            idx++;\n        } else if (b == (byte)' ' || b == 0) {\n            // trailing delimiter\n            break;\n        } else {\n            throw new IllegalArgumentException(\"Invalid octal digit '\" + (char)b + \"'\");\n        }\n    }\n    if (!digitFound) {\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n    // Must have seen a trailing space or NUL\n    if (idx >= end) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n    // Any remaining bytes must be space or NUL\n    for (; idx < end; idx++) {\n        byte b = buffer[idx];\n        if (b != (byte)' ' && b != 0) {\n            throw new IllegalArgumentException(\"Invalid trailing byte '\" + (char)b + \"'\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}