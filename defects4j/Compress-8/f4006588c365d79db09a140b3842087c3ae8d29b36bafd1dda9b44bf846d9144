{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"length must be at least 2 bytes\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n        boolean hasNonNul = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            if (currentByte == 0) {\n                if (hasNonNul && i < end - 1) {\n                    // Check if there's non-NUL after this NUL\n                    for (int j = i + 1; j < end; j++) {\n                        if (buffer[j] != 0 && buffer[j] != ' ') {\n                            throw new IllegalArgumentException(\n                                exceptionMessage(buffer, offset, length, start, currentByte));\n                        }\n                    }\n                }\n                break;\n            }\n\n            // Skip leading spaces\n            if (currentByte == (byte) ' ' || currentByte == '0') {\n                if (stillPadding) {\n                    if (currentByte != ' ') {\n                        hasNonNul = true;\n                    }\n                    continue;\n                }\n                if (currentByte == (byte) ' ') {\n                    break;\n                }\n            }\n\n            stillPadding = false;\n            hasNonNul = true;\n\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        // Check if we have trailing space/NUL\n        if (!hasNonNul) {\n            return 0L;\n        }\n\n        boolean hasTrailer = false;\n        for (int i = start; i < end; i++) {\n            if (buffer[i] == 0 || buffer[i] == ' ') {\n                hasTrailer = true;\n                break;\n            }\n        }\n\n        if (!hasTrailer) {\n            throw new IllegalArgumentException(\n                \"Trailing space or NUL is missing\");\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}