{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (buffer == null) {\n        throw new IllegalArgumentException(\"Buffer is null\");\n    }\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2\");\n    }\n    if (offset < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid offset or length\");\n    }\n    // Check for the special case: all NULs \u2192 missing field \u2192 0\n    boolean allNulls = true;\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allNulls = false;\n            break;\n        }\n    }\n    if (allNulls) {\n        return 0L;\n    }\n    int idx = offset;\n    final int end = offset + length;\n    // Skip leading spaces\n    while (idx < end && buffer[idx] == (byte) ' ') {\n        idx++;\n    }\n    long result = 0L;\n    boolean foundDigit = false;\n    // Parse octal digits until we hit a space or NUL\n    while (idx < end) {\n        byte b = buffer[idx];\n        if (b == 0 || b == (byte) ' ') {\n            break;\n        }\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, idx, b));\n        }\n        foundDigit = true;\n        result = (result << 3) + (b - '0');\n        idx++;\n    }\n    if (!foundDigit) {\n        // No digits found before terminator\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n    if (idx >= end) {\n        // Ran out of buffer without finding a terminating space or NUL\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n    // The first terminator must be a space or NUL\n    byte term = buffer[idx++];\n    if (term != 0 && term != (byte) ' ') {\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, idx - 1, term));\n    }\n    // Any remaining bytes must be spaces or NULs\n    while (idx < end) {\n        byte b = buffer[idx++];\n        if (b != 0 && b != (byte) ' ') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, idx - 1, b));\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}