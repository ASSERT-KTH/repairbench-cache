{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        // According to Javadoc, length must be at least 2 bytes.\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2 bytes\");\n        }\n\n        // Check if the entire buffer segment consists of NULs.\n        // As per Javadoc: \"The input buffer is allowed to contain all NULs,\n        // in which case the method returns 0L\".\n        boolean allNULs = true;\n        for (int i = offset; i < offset + length; i++) {\n            if (buffer[i] != 0) {\n                allNULs = false;\n                break;\n            }\n        }\n        if (allNULs) {\n            return 0L;\n        }\n\n        // The buffer must contain a trailing space or NUL. This means the last byte must be ' ' or 0.\n        // This check is performed only if it's not an \"all NULs\" string.\n        final int end = offset + length;\n        final byte trailingByte = buffer[end - 1];\n        if (trailingByte != (byte) ' ' && trailingByte != 0) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end - 1, trailingByte));\n        }\n\n        long    result = 0;\n        boolean stillPadding = true; // True if we are still skipping leading spaces or ASCII '0's.\n\n        // Iterate up to, but not including, the trailing byte (end - 1).\n        // The last byte is already checked as the trailer.\n        for (int i = offset; i < end - 1; i++){\n            final byte currentByte = buffer[i];\n\n            if (stillPadding) {\n                if (currentByte == (byte) ' ') {\n                    // Skip leading spaces\n                    continue;\n                } else if (currentByte == '0') {\n                    // Skip leading ASCII '0's. These are part of padding.\n                    // This explicitly distinguishes ASCII '0' (0x30) from NUL (0x00).\n                    continue;\n                } else {\n                    // First non-padding character found, it must be an octal digit.\n                    stillPadding = false;\n                }\n            }\n\n            // If not stillPadding (meaning we've found non-space/non-ASCII '0' characters)\n            // or if `currentByte` is not a leading space/ASCII '0', it must be an octal digit.\n            // Any NUL (0x00), space (0x20, if not leading), or other non-octal character\n            // will fall into this check and throw an IllegalArgumentException.\n            if (currentByte < '0' || currentByte > '7'){\n                 throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        return result;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}