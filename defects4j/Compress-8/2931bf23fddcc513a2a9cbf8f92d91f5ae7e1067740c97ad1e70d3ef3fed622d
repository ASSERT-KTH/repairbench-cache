{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Length must be at least 2 bytes\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes, but was: \" + length);\n    }\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    int i = start;\n\n    // Check for all NULs case\n    boolean allNuls = true;\n    for (int j = start; j < end; j++) {\n        if (buffer[j] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // Main parse loop\n    int digits = 0;\n    for (; i < end; i++) {\n        final byte currentByte = buffer[i];\n        // NUL encountered\n        if (currentByte == 0) {\n            break;\n        }\n        // Skip leading spaces and zeros (padding)\n        if (currentByte == (byte) ' ' || currentByte == (byte) '0') {\n            if (stillPadding) {\n                continue;\n            }\n            if (currentByte == (byte) ' ') {\n                break;\n            }\n        }\n        stillPadding = false;\n        // Only octal digits allowed\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        digits++;\n    }\n\n    // There must be at least one octal digit parsed, and\n    // at least one trailing space or NUL\n    // Check for invalid embedded NULs or spaces after first octal digit\n    if (digits == 0) {\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, (byte) 0));\n    }\n\n    // After digits, must end with space or NUL (trailing characters)\n    boolean foundTrailer = false;\n    // i is the index directly after the last parsed byte\n    if (i < end) {\n        byte trailingByte = buffer[i];\n        if (trailingByte == 0 || trailingByte == (byte) ' ') {\n            foundTrailer = true;\n            // Check for only one extra padding (valid: one or two trailer space/NULs)\n            if (i + 1 < end) {\n                byte t2 = buffer[i + 1];\n                if (!((t2 == 0) || (t2 == (byte) ' '))) {\n                    // Any other content after two trailer padding bytes is illegal\n                    for (int k = i + 1; k < end; ++k) {\n                        if (buffer[k] != 0 && buffer[k] != (byte)' ') {\n                            throw new IllegalArgumentException(\n                                    exceptionMessage(buffer, offset, length, start, buffer[k]));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // The buffer cannot contain further non-space/non-NULs after digit sequence\n    if (!foundTrailer) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, buffer[Math.min(i, end - 1)]));\n    }\n\n    // Remaining bytes after two trailers must be all space or NUL (else embedded end-of-field)\n    for (int k = i + 2; k < end; ++k) {\n        if (buffer[k] != 0 && buffer[k] != (byte) ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, buffer[k]));\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}