{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        // Check length requirement\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n        }\n\n        long    result = 0;\n        int     start = offset;\n        int     end = offset + length;\n        int     pos = start;\n\n        // Handle \"all NULs\" case separately.\n        // This avoids conflicts with NUL behavior during parsing if not all NULs.\n        boolean allNuls = true;\n        for (int i = start; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNuls = false;\n                break;\n            }\n        }\n        if (allNuls) {\n            return 0L;\n        }\n\n        // If not all NULs, then NUL bytes are restricted.\n\n        // Skip leading spaces\n        while (pos < end && buffer[pos] == (byte) ' ') {\n            pos++;\n        }\n\n        // Process digits until SPACE or END.\n        // NUL is only allowed as the final character.\n        int     terminatorPos = -1; // Position of a valid terminator (space or final NUL)\n        boolean nulTerminated = false; // Flag if termination was by NUL at the end\n\n        while (pos < end) {\n            final byte currentByte = buffer[pos];\n\n            // Check for space terminator\n            if (currentByte == (byte) ' ') {\n                terminatorPos = pos;\n                break;\n            }\n\n            // Check for NUL terminator (only valid if it's the last byte)\n            if (currentByte == 0) {\n                 if (pos == end - 1) { // Allow NUL only as the final char\n                     nulTerminated = true;\n                     terminatorPos = pos; // Mark NUL position\n                     break;\n                 }\n                 // NUL encountered before the allowed end position is invalid if not all NULs\n                 throw new IllegalArgumentException(\n                     exceptionMessage(buffer, offset, length, pos, currentByte)\n                     + \" (NUL byte encountered before end of region)\");\n            }\n\n            // Check for non-octal digit\n            if (currentByte < (byte) '0' || currentByte > (byte) '7') {\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, pos, currentByte));\n            }\n\n            // Accumulate octal value\n            result = (result << 3) + (currentByte - (byte) '0'); // convert from ASCII\n            pos++;\n        }\n\n\n        // Validation after the loop\n\n        // Case 1: Loop finished by finding space terminator\n        if (terminatorPos != -1 && !nulTerminated) {\n             // Check remaining chars after the space must be space or NUL\n             for (int i = terminatorPos + 1; i < end; i++) {\n                 final byte trailByte = buffer[i];\n                 if (trailByte != (byte) ' ' && trailByte != 0) {\n                      throw new IllegalArgumentException(\n                         exceptionMessage(buffer, offset, length, i, trailByte)\n                         + \" (found after space terminator)\");\n                 }\n             }\n        }\n        // Case 2: Loop finished by finding NUL at the very end\n        else if (nulTerminated) {\n            // This is valid termination by NUL. 'pos' should be end - 1.\n            // No characters should follow the final NUL within the length.\n        }\n        // Case 3: Loop finished because pos == end (no NUL or space found)\n        else if (terminatorPos == -1) { // Ensure no terminator was marked\n             // This means the segment ended with an octal digit, not a required terminator.\n              throw new IllegalArgumentException(\"Parse error: Octal segment doesn't end with null byte or space\");\n        }\n         // Other cases (e.g., invalid char) would have thrown inside the loop.\n\n        return result;\n    }\n\n    // Assume this helper method exists elsewhere in the class or is accessible.\n    // It's needed for the exception messages in the fixed code.\n    private static String exceptionMessage(byte[] buffer, final int offset, final int length, int idx, final byte b) {\n        return \"Invalid byte \" + (b & 0xFF) + \" at offset \" + (idx - offset) + \" in '{\"+ new String(buffer, offset, length) +\"}' len \" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}