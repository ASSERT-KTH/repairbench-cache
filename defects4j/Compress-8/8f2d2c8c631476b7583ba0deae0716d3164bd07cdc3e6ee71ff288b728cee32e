{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\n                \"Length of octal field must be at least 2, got \" + length);\n    }\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    // Check if all bytes are NULs; if so, return 0L\n    boolean allNuls = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // Identify last non-padding (space/NUL) byte for the trailer\n    int last = end - 1;\n    // Allow up to two trailers (last + penultimate)\n    int foundTrailer = 0;\n    while (last >= start && (buffer[last] == 0 || buffer[last] == (byte) ' ')) {\n        foundTrailer++;\n        last--;\n        if (foundTrailer == 2) {\n            break;\n        }\n    }\n    // After removing up to 2 trailers,\n    // the next byte must be a non-padding and the number of trailers must be >=1\n    if (foundTrailer == 0) {\n        throw new IllegalArgumentException(\n            \"Missing trailing space or NUL in the octal field\");\n    }\n    int parseEnd = last + 1; // exclusive\n\n    int i = start;\n    // Skip leading spaces\n    while (i < parseEnd && (buffer[i] == (byte) ' ' || buffer[i] == 0)) {\n        i++;\n    }\n    // Now parse the octal digits\n    for (; i < parseEnd; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n    // Make sure there are no embedded spaces or NULs.\n    // Already checked by structure above (since we Skipped leading and checked trailers),\n    // but double-check that parseEnd...end (the trailers) are all valid padding bytes.\n    for (int j = parseEnd; j < end; j++) {\n        if (buffer[j] != 0 && buffer[j] != (byte) ' ') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, j, buffer[j]));\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}