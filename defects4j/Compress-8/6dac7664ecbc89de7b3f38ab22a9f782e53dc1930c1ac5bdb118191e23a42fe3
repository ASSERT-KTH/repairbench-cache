{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Buffer must be at least 2 bytes long\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n        boolean hasNonNul = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            if (currentByte == 0) {\n                if (i == start) {\n                    // All NULs case - return 0\n                    return 0L;\n                }\n                break;\n            }\n\n            hasNonNul = true;\n\n            // Skip leading spaces\n            if (stillPadding) {\n                if (currentByte == (byte) ' ') {\n                    continue;\n                }\n                stillPadding = false;\n            }\n\n            // Check for trailing space\n            if (currentByte == (byte) ' ') {\n                // Must have at least one digit before space\n                if (i == start || buffer[i-1] == ' ') {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n                break;\n            }\n\n            // Check for invalid bytes\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        // Check if we have trailing space/NUL\n        if (hasNonNul && (buffer[end-1] != 0 && buffer[end-1] != ' ')) {\n            throw new IllegalArgumentException(\n                    \"Buffer must contain a trailing space or NUL\");\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}