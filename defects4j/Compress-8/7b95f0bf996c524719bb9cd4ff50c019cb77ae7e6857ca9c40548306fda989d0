{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2\");\n        }\n\n        boolean allNul = true;\n        for (int i = offset; i < offset + length; i++) {\n            if (buffer[i] != 0) {\n                allNul = false;\n                break;\n            }\n        }\n        if (allNul) {\n            return 0L;\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n        int i;\n\n        for (i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte == 0) {\n                break;\n            }\n\n            if (stillPadding) {\n                if (currentByte == (byte) ' ') {\n                    continue;\n                } else {\n                    stillPadding = false;\n                }\n            }\n\n            if (currentByte == (byte) ' ') {\n                break;\n            }\n\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n\n            result = (result << 3) + (currentByte - '0');\n        }\n\n        if (result == 0 && (i == start || (stillPadding && i > start))) {\n            throw new IllegalArgumentException(\"No digits parsed\");\n        }\n\n        if (i < end) {\n            final byte trailer = buffer[i];\n            if (trailer != 0 && trailer != (byte) ' ') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, trailer));\n            }\n\n            for (int j = i + 1; j < end; j++) {\n                final byte b = buffer[j];\n                if (b != 0 && b != (byte) ' ') {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, j, b));\n                }\n            }\n        } else {\n            final byte lastByte = buffer[end - 1];\n            if (lastByte != 0 && lastByte != (byte) ' ') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, end - 1, lastByte));\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}