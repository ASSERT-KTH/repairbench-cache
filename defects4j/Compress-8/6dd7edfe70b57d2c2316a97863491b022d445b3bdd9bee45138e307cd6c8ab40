{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Must have at least 2 bytes (one for digits and one for the trailing NUL/space)\n    if (length < 2 || offset < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid buffer length for octal parsing\");\n    }\n    // Check for all NULs \u2013 allowed; represents a missing field\n    boolean allNulls = true;\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allNulls = false;\n            break;\n        }\n    }\n    if (allNulls) {\n        return 0L;\n    }\n\n    final int start = offset;\n    final int end = offset + length;\n    int idx = offset;\n\n    // Skip leading spaces\n    while (idx < end && buffer[idx] == ' ') {\n        idx++;\n    }\n\n    long result = 0L;\n    boolean gotDigit = false;\n    boolean sawTerminator = false;\n\n    // Parse octal digits until we hit a NUL or space\n    while (idx < end) {\n        byte b = buffer[idx++];\n        if (b == 0 || b == ' ') {\n            sawTerminator = true;\n            break;\n        }\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, b));\n        }\n        gotDigit = true;\n        result = (result << 3) + (b - '0');\n    }\n\n    // Must have seen at least one digit and then a terminator\n    if (!gotDigit) {\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n    if (!sawTerminator) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL after octal digits\");\n    }\n\n    // Any remaining bytes must be only spaces or NULs\n    for (int i = idx; i < end; i++) {\n        byte b = buffer[i];\n        if (b != 0 && b != ' ') {\n            throw new IllegalArgumentException(\"Invalid byte in octal padding\");\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}