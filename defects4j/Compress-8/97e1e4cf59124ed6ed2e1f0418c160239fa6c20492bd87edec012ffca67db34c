{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        // Javadoc: \"length ... must be at least 2 bytes.\"\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n\n        // Handle \"all NULs\" case explicitly first, as it's a special return value for missing fields.\n        boolean allNULs = true;\n        for (int k = offset; k < end; k++) {\n            if (buffer[k] != 0) {\n                allNULs = false;\n                break;\n            }\n        }\n        if (allNULs) {\n            return 0L;\n        }\n\n        // The last byte (at `end - 1`) must be the trailer (space or NUL).\n        // Check this condition before parsing digits to ensure a valid format.\n        final byte trailer = buffer[end - 1];\n        if (trailer != 0 && trailer != (byte) ' ') {\n            // If the last byte is neither NUL nor space, it's an invalid trailer.\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n\n        // Loop through the potential digit characters (excluding the trailer).\n        for (int i = offset; i < end - 1; i++){\n            final byte currentByte = buffer[i];\n\n            // Handle NUL characters within the potential digits area.\n            // Since \"all NULs\" case is handled, any NUL found here (before the trailer)\n            // is an invalid embedded NUL.\n            if (currentByte == 0) {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n\n            // Handle spaces within the potential digits area.\n            if (currentByte == (byte) ' ') {\n                if (stillPadding) { // Leading space, ignore\n                    continue;\n                } else { // Embedded space (after digits started), and not the trailer. Invalid.\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, i, currentByte));\n                }\n            }\n\n            // If we reach here, `currentByte` is not NUL and not space, and not the trailer.\n            // It must be a digit or an invalid non-octal character.\n            stillPadding = false; // We've encountered a non-padding character.\n\n            // Check for valid octal digits.\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}