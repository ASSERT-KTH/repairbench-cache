{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        // Check length requirement first\n        if (length < 2) {\n            // Using a message consistent with the failing test's expectation\n            throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n        }\n\n        long result = 0;\n        int start = offset;\n        int end = offset + length;\n        int pos = start;\n\n        // Check for all NULs special case\n        boolean allNuls = true;\n        for (int i = pos; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNuls = false;\n                break;\n            }\n        }\n        if (allNuls) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (pos < end && buffer[pos] == ' ') {\n            pos++;\n        }\n\n        // Find end of octal digits (first NUL or space) and validate digits\n        int digitEnd = pos;\n        while (digitEnd < end && buffer[digitEnd] != 0 && buffer[digitEnd] != ' ') {\n            final byte currentByte = buffer[digitEnd];\n            // Check for non-octal characters (including NUL)\n            if (currentByte < '0' || currentByte > '7') {\n                 // Assuming exceptionMessage helper exists as in the original context\n                 throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, digitEnd, currentByte));\n            }\n            digitEnd++;\n        }\n\n        // Check if a NUL or space trailer exists within the specified length\n        if (digitEnd == end) {\n            throw new IllegalArgumentException(\"Parse octal requires a trailing NUL or space\");\n        }\n\n        // Check characters *after* the mandatory NUL/space trailer\n        // They must also be NUL or space according to Javadoc (\"may contain an additional...\")\n        for (int i = digitEnd + 1; i < end; i++) {\n            if (buffer[i] != 0 && buffer[i] != ' ') {\n                 // Assuming exceptionMessage helper exists as in the original context\n                 throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, buffer[i]));\n            }\n        }\n\n        // Parse the validated digits (between pos and digitEnd)\n        while (pos < digitEnd) {\n            final byte currentByte = buffer[pos];\n            // CheckStyle:MagicNumber OFF - Already validated as '0'-'7'\n            result = (result << 3) + (currentByte - '0');\n            // CheckStyle:MagicNumber ON\n            pos++;\n        }\n\n        return result;\n    }\n\n    // Assume this helper method exists elsewhere in the class as it was used by the original buggy code\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {\n        String T;\n        try {\n            T = new String(buffer, offset, length, java.nio.charset.StandardCharsets.ISO_8859_1); // Or UTF-8\n        } catch(Throwable e) { // NOSONAR\n             T=\"Could not decode byte array\"; // fallback\n        }\n        T = T.replaceAll(\"\\0\", \"{NUL}\"); // Replace NULs to make string printable\n        return \"Invalid byte \"+currentByte+\" at offset \"+(idx-offset)+\" in '\"+T+\"' len \"+length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}