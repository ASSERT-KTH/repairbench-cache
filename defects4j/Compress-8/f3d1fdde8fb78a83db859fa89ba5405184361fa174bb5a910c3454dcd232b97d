{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        boolean stillPadding = true; // True if only leading spaces have been seen\n        final int end = offset + length;\n        int parseEnd = -1; // Index of the trailer character (NUL or space) found, -1 if not found\n\n        // 1. Check minimum length requirement\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n\n        for (int i = offset; i < end; i++){\n            final byte currentByte = buffer[i];\n\n            // Handle terminators NUL or Space\n            if (currentByte == 0 || currentByte == ' ') {\n                if (stillPadding) {\n                    // If we are still in padding mode (only spaces seen so far),\n                    // only spaces should be skipped. A NUL encountered here\n                    // signifies the end of the segment, and the value is zero.\n                    if (currentByte == ' ') {\n                        // Skip leading space\n                        continue;\n                    }\n                    // If NUL is encountered during padding phase (first non-space is NUL)\n                    parseEnd = i;\n                    break; // Found terminator, result is 0\n                }\n                // If we are not in padding mode (digits have been seen),\n                // NUL or Space are valid terminators.\n                parseEnd = i;\n                break; // Found terminator\n            }\n\n            // If it's not a terminator (NUL or space), it must be an octal digit.\n            // Check for invalid characters (non-octal digits) before processing.\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n\n            // We've found a valid octal digit, so we are no longer in the padding phase.\n            stillPadding = false;\n\n            // Accumulate the octal value. Note: Overflow is not checked.\n            // CheckStyle:MagicNumber OFF\n            result = (result << 3) + (currentByte - '0'); // convert character to numeric value\n            // CheckStyle:MagicNumber ON\n        }\n\n        // 2. Check if a valid terminator (NUL or space) was found within the specified length.\n        if (parseEnd == -1) {\n            // Loop finished without hitting NUL or space. This means the buffer segment\n            // ended with an octal digit or consisted only of spaces. Both are invalid.\n            throw new IllegalArgumentException(\"Trailing byte not NUL or space found in buffer\");\n        }\n\n        // 3. Check for invalid characters after the first terminator.\n        // The specification allows for \"an additional trailing space or NUL\".\n        // This means all bytes from parseEnd + 1 up to the end must be space or NUL.\n        for (int i = parseEnd + 1; i < end; i++) {\n            if (buffer[i] != ' ' && buffer[i] != 0) {\n                 // Found an invalid character after the main terminator.\n                throw new IllegalArgumentException(\n                       exceptionMessage(buffer, offset, length, i, buffer[i]));\n            }\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist from the original code context to generate exception messages.\n    // It's not part of the fix itself but needed for the thrown exceptions.\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) {\n         // This replicates the likely function of the original helper for context.\n         String S;\n         try {\n             S = new String(buffer, offset, length, \"UTF-8\"); // Be cautious with encoding assumptions\n         } catch (Exception e) {\n             S = new String(buffer, offset, length); // Fallback\n         }\n         // Clamp offset for safety in message\n         int displayOffset = Math.max(0, Math.min(currentOffset - offset, length -1));\n         return \"Invalid byte \" + currentByte + \" at offset \" + displayOffset + \" in '\" + S + \"'\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}