{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Octal field must be at least 2 bytes long\");\n    }\n\n    // Check if the entire field is NUL bytes.\n    boolean allNull = true;\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allNull = false;\n            break;\n        }\n    }\n    if (allNull) {\n        return 0;\n    }\n\n    // The very last byte must be either a NUL or a space.\n    final int bufEnd = offset + length;\n    if (buffer[bufEnd - 1] != 0 && buffer[bufEnd - 1] != (byte)' ') {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, offset, buffer[bufEnd - 1]));\n    }\n\n    // Trim off any trailing NULs or spaces.\n    int end = bufEnd;\n    while (end > offset && (buffer[end - 1] == 0 || buffer[end - 1] == (byte)' ')) {\n        end--;\n    }\n\n    // Skip leading spaces.\n    int start = offset;\n    while (start < end && buffer[start] == (byte)' ') {\n        start++;\n    }\n\n    // There should be at least one digit.\n    if (start >= end) {\n        throw new IllegalArgumentException(\"No octal digits found in field\");\n    }\n\n    long result = 0;\n    // Process each digit. All characters must be between '0' and '7'.\n    for (int i = start; i < end; i++) {\n        byte b = buffer[i];\n        if (b < (byte)'0' || b > (byte)'7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, b));\n        }\n        result = (result << 3) + (b - (byte)'0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}