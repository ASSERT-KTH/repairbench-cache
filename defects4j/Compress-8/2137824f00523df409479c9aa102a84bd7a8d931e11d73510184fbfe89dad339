{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Must be at least 2 bytes (room for value + trailer) per javadoc/test\n    if (buffer == null || length < 2 || offset < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Buffer too small for parseOctal\");\n    }\n\n    boolean allNuls = true;\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // Must have trailing space or NUL at buffer[offset+length-1]\n    final byte trailer = buffer[offset + length - 1];\n    if (trailer != (byte)' ' && trailer != 0) {\n        throw new IllegalArgumentException(\"Trailer is not space or NUL\");\n    }\n\n    // If length >= 3, allow an additional trailing space/NUL, which means that\n    // the actual value is up to length-2, trailer at length-2 or length-1\n    int end = offset + length;\n    int last = offset + length - 1;\n\n    // skip possible _additional_ trailing space/NUL\n    if (length >= 3 && (buffer[last] == (byte)' ' || buffer[last] == 0) &&\n        (buffer[last - 1] == (byte)' ' || buffer[last - 1] == 0)) {\n        last = last - 1;\n    }\n\n    // Now last points at the trailer (space/NUL), so parse up to last-1 (inclusive)\n    long result = 0;\n    boolean stillPadding = true;\n    int i = offset;\n    // skip leading spaces\n    while (i < last && (buffer[i] == (byte)' ' || buffer[i] == 0)) {\n        i++;\n    }\n    for (; i < last; i++) {\n        final byte currentByte = buffer[i];\n        // Check for embedded space/NUL in value (invalid)\n        if (currentByte == (byte)' ' || currentByte == 0) {\n            throw new IllegalArgumentException(\"Embedded space or NUL in value\");\n        }\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    // No value parsed? Only trailing padding? That is ok only if value was all NULs, which is already handled above.\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}