{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Input buffer must be at least 2 bytes long\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        // Skip leading spaces\n        if (currentByte == (byte) ' ') {\n            if (stillPadding) {\n                continue;\n            }\n            break;\n        }\n\n        // Handle leading zeros\n        if (currentByte == '0' && stillPadding) {\n            continue;\n        }\n\n        // Must have trailing NUL or space\n        // May have additional NUL or space\n        stillPadding = false;\n\n        // Check if the byte is a valid octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // Ensure there is a trailing space or NUL\n    if (buffer[end - 1] != 0 && buffer[end - 1] != ' ') {\n        throw new IllegalArgumentException(\"Trailing space or NUL is missing\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}