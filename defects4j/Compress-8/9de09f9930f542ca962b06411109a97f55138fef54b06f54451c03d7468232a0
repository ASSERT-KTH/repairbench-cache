{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Must have at least two bytes (one digit and one terminator)\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Octal field length must be at least 2\");\n    }\n    // Bounds check\n    if (offset < 0 || length < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid offset/length for parseOctal\");\n    }\n    // If the entire field is NUL, interpret as zero\n    boolean allZeros = true;\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allZeros = false;\n            break;\n        }\n    }\n    if (allZeros) {\n        return 0L;\n    }\n    long result = 0L;\n    boolean seenDigit = false;\n    int end = offset + length;\n    int i = offset;\n    // skip leading spaces\n    while (i < end && buffer[i] == ' ') {\n        i++;\n    }\n    // parse octal digits until a space or NUL\n    for (; i < end; i++) {\n        byte b = buffer[i];\n        if (b == 0 || b == ' ') {\n            // terminator found\n            break;\n        }\n        if (b < '0' || b > '7') {\n            // invalid byte in the middle of the number\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, offset, b));\n        }\n        seenDigit = true;\n        result = (result << 3) + (b - '0');\n    }\n    // must have seen at least one digit\n    if (!seenDigit) {\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n    // must have stopped because of a terminator, not by running off the end\n    if (i == end) {\n        throw new IllegalArgumentException(\"Missing space or NUL terminator\");\n    }\n    // ensure that everything after the first terminator is only NUL or space\n    for (; i < end; i++) {\n        byte b = buffer[i];\n        if (b != 0 && b != ' ') {\n            throw new IllegalArgumentException(\"Invalid trailing character\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}