{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n        }\n\n        long    result = 0;\n        boolean stillPadding = true;\n        int     end = offset + length;\n        int     start = offset;\n        boolean foundNonZero = false;\n\n        // Check if all bytes are NUL\n        boolean allNul = true;\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNul = false;\n                break;\n            }\n        }\n        if (allNul) {\n            return 0L;\n        }\n\n        // Check if buffer ends with at least one space or NUL\n        boolean hasTrailingSpaceOrNul = false;\n        for (int i = end - 1; i >= offset; i--) {\n            if (buffer[i] == ' ' || buffer[i] == 0) {\n                hasTrailingSpaceOrNul = true;\n                break;\n            }\n        }\n        if (!hasTrailingSpaceOrNul) {\n            throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n        }\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte == 0) {\n                // If we encounter a NUL and haven't seen any non-padding chars yet,\n                // it's valid if the rest are NULs (return 0)\n                if (stillPadding) {\n                    boolean allRemainingNul = true;\n                    for (int j = i; j < end; j++) {\n                        if (buffer[j] != 0) {\n                            allRemainingNul = false;\n                            break;\n                        }\n                    }\n                    if (allRemainingNul) {\n                        return 0L;\n                    }\n                }\n                // Otherwise, treat NUL as end of string\n                stillPadding = false;\n                break;\n            }\n\n            // Skip leading spaces\n            if (stillPadding) {\n                if (currentByte == ' ' || currentByte == '0') {\n                    if (currentByte != ' ') {\n                        foundNonZero = true;\n                    }\n                    continue;\n                } else if (currentByte >= '0' && currentByte <= '7') {\n                    stillPadding = false;\n                    foundNonZero = true;\n                } else {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n            }\n\n            if (currentByte == ' ') {\n                // Check if this is a trailing space (allowed) or embedded (invalid)\n                boolean isTrailing = true;\n                for (int j = i + 1; j < end; j++) {\n                    if (buffer[j] != ' ' && buffer[j] != 0) {\n                        isTrailing = false;\n                        break;\n                    }\n                }\n                if (isTrailing) {\n                    break; // valid trailing space\n                } else {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n            }\n\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            // CheckStyle:MagicNumber ON\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}