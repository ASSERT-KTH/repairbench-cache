{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"The length must be at least 2 bytes\");\n        }\n        long    result = 0;\n        boolean stillPadding = true;\n        int     end = offset + length;\n        int     start = offset;\n        boolean foundNonZero = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte == 0) {\n                // Check if we've seen non-zero digits before NUL\n                if (!stillPadding && foundNonZero) {\n                    break;\n                }\n                if (stillPadding) {\n                    continue;\n                }\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n\n            // Skip leading spaces\n            if (stillPadding) {\n                if (currentByte == (byte) ' ') {\n                    continue;\n                }\n                // First non-space character\n                if (currentByte == '0' || (currentByte >= '0' && currentByte <= '7')) {\n                    stillPadding = false;\n                    foundNonZero = true;\n                    // Treat leading zeros as start of number\n                    i--; // re-process this character as non-padding\n                    continue;\n                } else {\n                    // Invalid character in padding area\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n            } else {\n                // Check for trailing space/NUL\n                if (currentByte == (byte) ' ' || currentByte == 0) {\n                    // Check if we've processed at least one digit\n                    if (!foundNonZero) {\n                        throw new IllegalArgumentException(\n                                exceptionMessage(buffer, offset, length, start, currentByte));\n                    }\n                    // After finding the first trailing space/NUL, everything else must be space/NUL\n                    for (int j = i; j < end; j++) {\n                        if (buffer[j] != (byte) ' ' && buffer[j] != 0) {\n                            throw new IllegalArgumentException(\n                                    exceptionMessage(buffer, offset, length, start, buffer[j]));\n                        }\n                    }\n                    break;\n                }\n\n                // Check if current byte is a valid octal digit\n                if (currentByte < '0' || currentByte > '7') {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n                foundNonZero = true;\n                result = (result << 3) + (currentByte - '0');\n            }\n        }\n\n        // Check if we have at least one digit and valid trailing space/NUL\n        boolean hasTrailingMarker = false;\n        if (foundNonZero) {\n            for (int i = start; i < end; i++) {\n                if (buffer[i] == (byte) ' ' || buffer[i] == 0) {\n                    hasTrailingMarker = true;\n                    break;\n                }\n            }\n        } else {\n            // All NULs case\n            return 0L;\n        }\n\n        if (!hasTrailingMarker && foundNonZero) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, (byte)0));\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}