{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2\");\n    }\n    if (buffer == null || buffer.length < offset + length) {\n        throw new IllegalArgumentException(\"Buffer too small for given offset and length\");\n    }\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    // Check if all bytes are NUL\n    boolean allNuls = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // Must have valid trailer (last or second to last char must be space or NUL, and after content only padding allowed)\n    int trailerIdx = end - 1;\n    // Skip trailing padding (NUL/space)\n    while (trailerIdx >= start && (buffer[trailerIdx] == 0 || buffer[trailerIdx] == (byte) ' ')) {\n        trailerIdx--;\n    }\n    // trailerIdx now at last non-padding byte; the next must be the trailer\n    int trailerPos = trailerIdx + 1;\n    if (trailerPos >= end || \n        !((buffer[trailerPos] == 0) || (buffer[trailerPos] == (byte) ' '))) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL in octal header\");\n    }\n\n    for (int i = start; i < trailerPos; i++) {\n        final byte currentByte = buffer[i];\n        // Skip leading spaces and leading zeros\n        if (stillPadding) {\n            if (currentByte == (byte) ' ' || currentByte == (byte) '0') {\n                continue;\n            }\n            stillPadding = false;\n        }\n        // After padding, only octal digits permitted\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // After first non-padding digit processed, all rest till trailer must be digits, and no embedded space or NUL\n    // (already checked by loop, as we break on seeing trailer)\n    // (trailer may be more than one char; that's fine)\n\n    // After trailer, only NUL or space may follow (trailing NULs/spaces already skipped in the check above)\n\n    // If embedded space or NUL found before trailer, the loop would skip digits, causing malformed parse,\n    // which is already caught.\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}