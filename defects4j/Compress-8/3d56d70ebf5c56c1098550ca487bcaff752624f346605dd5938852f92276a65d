{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes, got \" + length);\n    }\n    long result = 0;\n    boolean stillPadding = true;\n    int start = offset;\n    int end = offset + length;\n\n    // Check all zeros: if all bytes are zero, return 0L\n    boolean allNuls = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    int trailerIndex = end - 1;\n    // Allow for a trailing extra space or NUL\n    if (buffer[trailerIndex] == 0 || buffer[trailerIndex] == (byte)' ') {\n        // good, trailer is at end\n    } else if (length > 2 && (buffer[trailerIndex - 1] == 0 || buffer[trailerIndex - 1] == (byte)' ')) {\n        trailerIndex--;\n        if (!(buffer[trailerIndex] == 0 || buffer[trailerIndex] == (byte)' ')) {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, buffer[trailerIndex]));\n        }\n    } else {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n\n    // Now parse from offset to one before trailerIndex\n    int i = start;\n    // skip leading spaces\n    while (i < trailerIndex && (buffer[i] == (byte)' ' || buffer[i] == 0)) {\n        i++;\n    }\n\n    for (; i < trailerIndex; i++) {\n        byte currentByte = buffer[i];\n        if (currentByte == (byte)' ' || currentByte == 0) {\n            // if we haven't reached the trailer, but hit a space or NUL, it's invalid\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}