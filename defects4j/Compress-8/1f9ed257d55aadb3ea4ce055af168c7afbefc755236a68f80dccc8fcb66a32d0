{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        // According to Javadoc, length must be at least 2 bytes.\n        if (length < 2) {\n            throw new IllegalArgumentException(\"length must be at least 2 bytes\");\n        }\n\n        // Special case: The input buffer is allowed to contain all NULs,\n        // in which case the method returns 0L. Handle this upfront.\n        boolean allNULs = true;\n        for (int i = offset; i < offset + length; i++) {\n            if (buffer[i] != 0) {\n                allNULs = false;\n                break;\n            }\n        }\n        if (allNULs) {\n            return 0L;\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n        \n        int i; // Declare i outside the loop to use its final value for post-loop validation\n\n        for (i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            if (currentByte == 0) { // NUL byte encountered\n                // If a NUL byte is found and the buffer is not entirely NULs,\n                // and we are still in the leading padding phase, it's an invalid format.\n                // This covers cases like \" 0...\" or \"00...\" where a NUL appears before digits.\n                // Or \"[0,0,' ']\" which is not all NULs and has a non-NUL after a NUL.\n                if (stillPadding) {\n                    throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n                // If not stillPadding (i.e. digits were processed), then this NUL is a valid terminator.\n                // All remaining characters after this NUL must be NULs to be valid.\n                for (int j = i + 1; j < end; j++) {\n                    if (buffer[j] != 0) {\n                        throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, buffer[j]));\n                    }\n                }\n                break; // Valid NUL termination, exit parsing loop\n            }\n\n            // Skip leading spaces or '0's (padding)\n            if (currentByte == (byte) ' ' || currentByte == '0') {\n                if (stillPadding) {\n                    continue; // Still skipping leading padding\n                }\n                // If not stillPadding, currentByte is not a leading character.\n                // If it's a space, it must be the trailing space.\n                if (currentByte == (byte) ' ') {\n                    // All remaining characters after this trailing space must be NULs.\n                    for (int j = i + 1; j < end; j++) {\n                        if (buffer[j] != 0) { // Only NULs are allowed after the first trailing space.\n                            throw new IllegalArgumentException(\n                                exceptionMessage(buffer, offset, length, start, buffer[j]));\n                        }\n                    }\n                    break; // Valid space termination, exit parsing loop\n                }\n                // If currentByte is '0' here and not stillPadding, it means it's an octal digit.\n                // Fall through to process it.\n            }\n\n            // If we reach here, it must be an octal digit from '1' to '7' or a '0' that's part of the number.\n            stillPadding = false; // No longer in padding phase\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        // After the loop, validate if a trailing space or NUL was present as required by Javadoc.\n        // This check is for cases where the loop completed `i == end`,\n        // meaning no terminator (0 or ' ') was hit that caused a `break`.\n        // In such a case, the last byte `buffer[end - 1]` should have been a terminator.\n        if (i == end) { // The loop finished by reaching `end` without an explicit `break` (due to terminator)\n            // This means the last character was processed as a digit or ignored as padding.\n            // According to the Javadoc \"The buffer must contain a trailing space or NUL\",\n            // the last byte within the 'length' region must be one of these terminators.\n            if (buffer[end - 1] != 0 && buffer[end - 1] != (byte) ' ') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, buffer[end-1]));\n            }\n        }\n        // If the loop broke (i < end), then a terminator was found and its trailing NULs were already validated.\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}