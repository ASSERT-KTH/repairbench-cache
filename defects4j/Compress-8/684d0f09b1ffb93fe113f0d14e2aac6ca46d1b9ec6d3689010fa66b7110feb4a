{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2\");\n    }\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    boolean foundTrailer = false;\n    boolean allNuls = true;\n\n    // Check for all NULs\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        // End if we hit a trailer\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            foundTrailer = true;\n\n            // Possible extra trailer allowed; just validate\n            // There should be no more data after the first trailer except more trailers\n            for (int j = i + 1; j < end; j++) {\n                if (buffer[j] != 0 && buffer[j] != (byte) ' ') {\n                    throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, j, buffer[j]));\n                }\n            }\n            break;\n        }\n\n        // Skip leading space and zero (' ', '0')\n        if (stillPadding && (currentByte == (byte) ' ' || currentByte == (byte) '0')) {\n            continue;\n        }\n        stillPadding = false;\n\n        // Must be octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    if (!foundTrailer) {\n        throw new IllegalArgumentException(\"Missing trailing NUL or space\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}