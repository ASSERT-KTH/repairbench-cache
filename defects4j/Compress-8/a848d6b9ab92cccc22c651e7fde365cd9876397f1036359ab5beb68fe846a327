{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2\");\n        }\n\n        boolean allNuls = true;\n        for (int i = offset; i < offset + length; i++) {\n            if (buffer[i] != 0) {\n                allNuls = false;\n                break;\n            }\n        }\n        if (allNuls) {\n            return 0L;\n        }\n\n        long result = 0L;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n\n        int i;\n        for (i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte == 0) {\n                break;\n            }\n\n            // Skip leading spaces\n            if (currentByte == (byte) ' ') {\n                if (stillPadding) {\n                    continue;\n                } else {\n                    break;\n                }\n            }\n\n            stillPadding = false;\n\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0');\n        }\n\n        if (stillPadding) {\n            throw new IllegalArgumentException(\"No digits found\");\n        }\n\n        if (i < end) {\n            // Check remaining bytes after terminator are NUL or space\n            for (int j = i; j < end; j++) {\n                byte b = buffer[j];\n                if (b != 0 && b != ' ') {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, b));\n                }\n            }\n        } else {\n            throw new IllegalArgumentException(\"No terminator found\");\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}