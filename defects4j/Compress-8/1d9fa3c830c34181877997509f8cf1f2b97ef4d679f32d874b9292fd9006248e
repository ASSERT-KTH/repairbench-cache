{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Buffer must be at least 2 bytes long\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n        boolean hasNonZero = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            if (currentByte == 0) {\n                // If we encounter a NUL, check if we've seen non-zero bytes\n                if (hasNonZero) {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n                break;\n            }\n\n            // Skip leading spaces\n            if (currentByte == (byte) ' ') {\n                if (stillPadding) {\n                    continue;\n                }\n                // If we encounter a space after digits, it must be the trailer\n                break;\n            }\n\n            stillPadding = false;\n            hasNonZero = true;\n\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            // CheckStyle:MagicNumber ON\n\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        // Check if we have a valid trailer (space or NUL)\n        if (start < end && buffer[end-1] != ' ' && buffer[end-1] != 0) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, buffer[end-1]));\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}