{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length should be at least 2 bytes long\");\n        }\n\n        long    result = 0;\n        boolean stillPadding = true;\n        int     end = offset + length;\n        int     start = offset;\n        boolean trailingSpaceOrNullFound = false;\n\n        // Check if all bytes are NUL (0)\n        boolean allNulls = true;\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNulls = false;\n                break;\n            }\n        }\n        if (allNulls) {\n            return 0L;\n        }\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            if (currentByte == 0) {\n                trailingSpaceOrNullFound = true;\n                break;\n            }\n\n            // Skip leading spaces\n            if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {\n                continue;\n            }\n\n            stillPadding = false;\n\n            // Check for trailing space or NUL\n            if ((currentByte == (byte) ' ' || currentByte == 0) && i < end - 1) {\n                // Check if it's a trailing space/NUL (allowed) or an embedded one (not allowed)\n                boolean isTrailing = true;\n                for (int j = i + 1; j < end; j++) {\n                    if (buffer[j] != 0 && buffer[j] != ' ') {\n                        isTrailing = false;\n                        break;\n                    }\n                }\n                if (isTrailing) {\n                    trailingSpaceOrNullFound = true;\n                    break;\n                } else {\n                    throw new IllegalArgumentException(\n                        \"Embedded space or NUL detected\");\n                }\n            }\n\n            if (currentByte == (byte) ' ' || currentByte == 0) {\n                if (i == end - 1 || buffer[i+1] == 0 || buffer[i+1] == (byte) ' ') {\n                    trailingSpaceOrNullFound = true;\n                    break;\n                } else {\n                    throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n            }\n\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            // CheckStyle:MagicNumber ON\n            result = (result << 3) + (currentByte - '0');\n        }\n\n        if (!trailingSpaceOrNullFound) {\n            throw new IllegalArgumentException(\n                \"Missing trailing space or NUL character\");\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}