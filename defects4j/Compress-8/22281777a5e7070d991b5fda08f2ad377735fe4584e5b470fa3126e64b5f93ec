{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2 || buffer == null || buffer.length < offset + length) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes and buffer must be sufficient\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    boolean foundNonNul = false;\n\n    // Check if all bytes are NUL\n    boolean allNul = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNul = false;\n            break;\n        }\n    }\n    if (allNul) {\n        return 0L;\n    }\n\n    int i = start;\n    // Skip leading spaces\n    while (i < end && (buffer[i] == (byte) ' ')) {\n        i++;\n    }\n\n    int digitsStart = i;\n    // Now read octal digits\n    for (; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte >= '0' && currentByte <= '7') {\n            foundNonNul = true;\n            result = (result << 3) + (currentByte - '0');\n            stillPadding = false;\n        } else if (currentByte == (byte) ' ' || currentByte == 0) {\n            // Trailer or possible padding -- break and check\n            break;\n        } else {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n    }\n\n    int trailerLen = end - i;\n    // Must have at least 1 and at most 2 trailing chars in the remaining range\n    // (Either [SPACE|NUL][SPACE|NUL], but not more than 2)\n    if (i == start) { // nothing parsed at all\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n    // Only allow trailing [SPACE|NUL]{1,2}\n    int trailerCount = 0;\n    for (; i < end; i++) {\n        final byte c = buffer[i];\n        if (c != (byte) ' ' && c != 0) {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, c));\n        }\n        trailerCount++;\n    }\n    if (trailerCount < 1 || trailerCount > 2) {\n        throw new IllegalArgumentException(\n            \"Missing or invalid trailing space/NUL\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}