{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int int_length) { // Renamed length to int_length to avoid conflict with local variable \"length\" in comment. Original method signature used \"length\".\n        // The original method signature is `public static long parseOctal(final byte[] buffer, final int offset, final int length)`.\n        // Let's use `length` directly and ensure no local variables conflict with the parameter name if possible, or rename internally.\n        // Stick to the original parameter name `length`.\n\n        // Fix: Add check for minimum length as per Javadoc.\n        if (int_length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2 bytes, actual: \" + int_length);\n        }\n\n        long result = 0;\n        int i = offset;\n        final int end = offset + int_length; // exclusive end\n\n        // Skip leading spaces\n        while (i < end && buffer[i] == (byte) ' ') {\n            i++;\n        }\n\n        // Find the effective end of the number (exclusive limit)\n        // This is the first position from the end that is NOT a NUL or space.\n        // So, 'limit' will point to the character *after* the last digit.\n        // Characters from 'limit' to 'end' must be NULs or spaces (the trailing padding).\n        int limit = end;\n        while (limit > i && (buffer[limit - 1] == 0 || buffer[limit - 1] == (byte) ' ')) {\n            limit--;\n        }\n\n        // Special case: All NULs in the original range.\n        // This must be checked on the original buffer segment, not after trimming.\n        // E.g., {0,0,0} should return 0L.\n        // E.g., {' ',0,0} should throw error.\n        boolean allNulsInOriginalRange = true;\n        for (int j = offset; j < end; j++) {\n            if (buffer[j] != 0) {\n                allNulsInOriginalRange = false;\n                break;\n            }\n        }\n        if (allNulsInOriginalRange) {\n            return 0L;\n        }\n\n        // If after trimming leading spaces and trailing NULs/spaces, `i == limit`,\n        // it means the effective content of the segment is empty.\n        // This implies the segment contained only spaces or spaces/NULs, but not all NULs\n        // (which was handled above). This is an invalid format.\n        // Example: \"   \" or \" \\0 \\0\"\n        if (i == limit) {\n             // Points to the start of the invalid sequence\n             throw new IllegalArgumentException(exceptionMessage(buffer, offset, int_length, offset, buffer[offset]));\n        }\n\n        // Parse octal digits between i (inclusive) and limit (exclusive)\n        for (; i < limit; i++) {\n            final byte currentByte = buffer[i];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, int_length, i, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        // Validate trailing characters: The buffer must contain a trailing space or NUL.\n        // If 'limit' is still equal to 'end' after the trimming loop, it means no trailing\n        // NUL or space was found in the portion of the buffer specified by 'length'.\n        // This implies the last character was a digit, and no terminator was present.\n        // This is an error, as per the Javadoc (\"trailing space/NUL is missing\").\n        if (limit == end) {\n            // Error: No trailing space/NUL found.\n            // The exception message should point to the last byte of the number as the error source,\n            // as that byte should have been a terminator.\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, int_length, end - 1, buffer[end - 1]));\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}