{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"The buffer must contain at least 2 bytes.\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        // Skip leading spaces\n        if (stillPadding && currentByte == (byte) ' ') {\n            continue;\n        }\n\n        // Break if we encounter a NUL or space after the digits\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            break;\n        }\n\n        // Check if we are still in the padding phase\n        if (stillPadding) {\n            if (currentByte == '0') {\n                stillPadding = false;\n                continue;\n            } else {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n        }\n\n        // Validate the octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // Ensure there is a trailing space or NUL\n    if (end - 1 < start || (buffer[end - 1] != 0 && buffer[end - 1] != (byte) ' ')) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL.\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}