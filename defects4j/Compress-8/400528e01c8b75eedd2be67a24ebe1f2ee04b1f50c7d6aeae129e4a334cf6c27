{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Must have at least one digit and one trailer byte\n    if (length < 2 || offset < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid offset/length \u2013 must be at least 2 bytes\");\n    }\n    int end = offset + length;\n\n    // Special case: all NULs \u2192 value 0\n    boolean allNulls = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNulls = false;\n            break;\n        }\n    }\n    if (allNulls) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    int idx = offset;\n    while (idx < end && buffer[idx] == (byte)' ') {\n        idx++;\n    }\n    if (idx >= end) {\n        // Only spaces (and not all NULs) is invalid\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n\n    // Parse octal digits\n    long result = 0L;\n    int startDigits = idx;\n    while (idx < end && buffer[idx] >= (byte)'0' && buffer[idx] <= (byte)'7') {\n        result = (result << 3) + (buffer[idx] - (byte)'0');\n        idx++;\n    }\n    if (idx == startDigits) {\n        // First non-space was not a valid octal digit\n        throw new IllegalArgumentException(\"Invalid octal digit at index \" + idx);\n    }\n\n    // Next byte must be a trailer: space or NUL\n    if (idx >= end || (buffer[idx] != (byte)' ' && buffer[idx] != 0)) {\n        throw new IllegalArgumentException(\"Missing or invalid trailer at index \" + idx);\n    }\n    // Any remaining bytes in the field must also be space or NUL\n    for (int i = idx; i < end; i++) {\n        if (buffer[i] != (byte)' ' && buffer[i] != 0) {\n            throw new IllegalArgumentException(\"Invalid byte in trailer at index \" + i);\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}