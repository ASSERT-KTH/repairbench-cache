{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Check that we have at least 2 bytes.\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Buffer length must be at least 2 bytes\");\n    }\n    final int fieldEnd = offset + length;\n    // If all bytes in the field are NUL then return 0L.\n    boolean allNull = true;\n    for (int i = offset; i < fieldEnd; i++) {\n        if (buffer[i] != 0) {\n            allNull = false;\n            break;\n        }\n    }\n    if (allNull) {\n        return 0L;\n    }\n\n    // Skip leading spaces.\n    int startIndex = offset;\n    while (startIndex < fieldEnd && buffer[startIndex] == (byte) ' ') {\n        startIndex++;\n    }\n    \n    // Identify the contiguous sequence of octal digits.\n    int digitEnd = startIndex;\n    while (digitEnd < fieldEnd && buffer[digitEnd] >= '0' && buffer[digitEnd] <= '7') {\n        digitEnd++;\n    }\n    \n    // There must be at least one digit.\n    if (digitEnd == startIndex) {\n        // Use the next byte (if any) in the error message.\n        byte errByte = startIndex < fieldEnd ? buffer[startIndex] : 0;\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, startIndex, errByte));\n    }\n    \n    // There must be a trailing delimiter right after the digits.\n    if (digitEnd >= fieldEnd) {\n        throw new IllegalArgumentException(\"Missing trailing null or space in octal number\");\n    }\n    byte term = buffer[digitEnd];\n    if (term != (byte) ' ' && term != 0) {\n        throw new IllegalArgumentException(\"Invalid trailing delimiter in octal number: \" + (char) term);\n    }\n    // Any remaining bytes must be either NUL or space.\n    for (int j = digitEnd + 1; j < fieldEnd; j++) {\n        byte b = buffer[j];\n        if (b != 0 && b != (byte) ' ') {\n            throw new IllegalArgumentException(\"Invalid character after octal number: \" + (char) b);\n        }\n    }\n    \n    // Parse the octal number.\n    long result = 0;\n    for (int j = startIndex; j < digitEnd; j++) {\n        // Each byte is between '0' and '7' so this is safe.\n        result = (result << 3) + (buffer[j] - '0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}