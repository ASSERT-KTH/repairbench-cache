{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"length must be at least 2\");\n        }\n\n        final int end = offset + length;\n        boolean allNuls = true;\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNuls = false;\n                break;\n            }\n        }\n        if (allNuls) {\n            return 0L;\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        boolean digitsParsed = false;\n        int i;\n\n        for (i = offset; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (stillPadding) {\n                if (currentByte == (byte) ' ' || currentByte == '0') {\n                    continue;\n                }\n                stillPadding = false;\n            }\n\n            if (currentByte == (byte) ' ' || currentByte == 0) {\n                break;\n            }\n\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n\n            result = (result << 3) + (currentByte - '0');\n            digitsParsed = true;\n        }\n\n        if (stillPadding) {\n            throw new IllegalArgumentException(\n                    \"Invalid octal digits (all leading spaces or zeros)\");\n        }\n\n        if (!digitsParsed) {\n            throw new IllegalArgumentException(\"No octal digits parsed\");\n        }\n\n        if (i == end) {\n            throw new IllegalArgumentException(\"No terminator found\");\n        }\n\n        for (int j = i; j < end; j++) {\n            final byte currentByte = buffer[j];\n            if (currentByte != 0 && currentByte != (byte) ' ') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, j, currentByte));\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}