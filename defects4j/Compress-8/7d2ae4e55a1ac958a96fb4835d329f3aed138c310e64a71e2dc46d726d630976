{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the input length is less than 2, \n *         the trailing space/NUL is missing, or if an invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    int end = offset + length;\n    int start = offset;\n    boolean hasTrailingTerminator = false;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        // Check for trailing terminator (space or NUL)\n        if (i == end - 1 || i == end - 2) {\n            if (currentByte == (byte) ' ' || currentByte == 0) {\n                hasTrailingTerminator = true;\n                break;\n            }\n        }\n\n        // Skip leading spaces\n        if (stillPadding && (currentByte == (byte) ' ' || currentByte == 0)) {\n            continue;\n        }\n\n        stillPadding = false;\n\n        // Check for invalid characters\n        if (currentByte < '0' || currentByte > '7') {\n            if (currentByte != (byte) ' ' && currentByte != 0) {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            break;\n        }\n\n        // Convert from ASCII\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    // Ensure there's a trailing terminator\n    if (!hasTrailingTerminator && !isAllNULs(buffer, offset, length)) {\n        throw new IllegalArgumentException(\"Missing trailing terminator\");\n    }\n\n    return result;\n}\n\nprivate static boolean isAllNULs(final byte[] buffer, final int offset, final int length) {\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static String exceptionMessage(final byte[] buffer, final int offset, final int length, \n                                       final int start, final byte currentByte) {\n    return \"Invalid octal byte detected: \" + currentByte + \" at position \" + (start - offset);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}