{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"length must be at least 2 bytes\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n\n        boolean hasNonZeroContent = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte == 0) {\n                if (!stillPadding && hasNonZeroContent) {\n                    // If we've seen non-zero content, we expect a trailing NUL or space\n                    i++; // skip the trailing NUL (if there's space left, there might be another)\n                    while (i < end && buffer[i] == 0) {\n                        i++;\n                    }\n                    if (i >= end) {\n                        return result;\n                    }\n                    if (buffer[i] == ' ') {\n                        return result;\n                    }\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n                continue;\n            }\n\n            // Skip leading spaces\n            if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {\n                if (currentByte != '0') {\n                    continue; // continue only if space, not zero\n                }\n                // If it's '0', we might have content\n                stillPadding = false;\n                hasNonZeroContent = true;\n            } else {\n                stillPadding = false;\n            }\n\n            if (currentByte == (byte) ' ') {\n                if (stillPadding) {\n                    continue; // leading space\n                } else {\n                    // Check if this is a trailing space (We need to make sure there's nothing after it)\n                    for (int j = i + 1; j < end; j++) {\n                        if (buffer[j] != 0 && buffer[j] != ' ') {\n                            throw new IllegalArgumentException(\n                                    exceptionMessage(buffer, offset, length, start, currentByte));\n                        }\n                    }\n                    return result;\n                }\n            }\n\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n\n            if (currentByte != '0') {\n                hasNonZeroContent = true;\n            }\n\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}