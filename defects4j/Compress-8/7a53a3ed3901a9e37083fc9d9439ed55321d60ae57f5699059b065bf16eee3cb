{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2\");\n    }\n    long result = 0;\n    int start = offset;\n    int end = offset + length;\n\n    // Check if all bytes are NULs; if so, return 0\n    boolean allNuls = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    boolean stillPadding = true;\n    int lastNonPadIndex = -1;\n    int firstDigit = -1;\n\n    // Find position of trailer char\n    int trailerPos = -1;\n    for (int i = end - 1; i >= start; i--) {\n        byte b = buffer[i];\n        if (b == 0 || b == (byte) ' ') {\n            trailerPos = i;\n        } else {\n            break;\n        }\n    }\n    if (trailerPos == -1 || trailerPos < start + 1) { // need at least 1 digit before trailer\n        throw new IllegalArgumentException(\"Invalid octal byte sequence: missing or insufficient trailer at offset \" + offset);\n    }\n\n    for (int i = start; i < trailerPos; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == ' ' || currentByte == '0') {\n            if (stillPadding) {\n                continue;\n            }\n            // embedded space or zero not allowed after digits started\n            if (currentByte == ' ') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n        }\n        stillPadding = false;\n        // embedded NULs not allowed\n        if (currentByte == 0) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    // After trailerPos, the bytes (if any) are padding, all must be NUL or space\n    for (int i = trailerPos; i < end; i++) {\n        byte b = buffer[i];\n        if (b != 0 && b != (byte) ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, b));\n        }\n    }\n\n    // There must be at least one digit parsed (i.e., no all-padding before trailer)\n    if (stillPadding) {\n        throw new IllegalArgumentException(\"No digits found\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}