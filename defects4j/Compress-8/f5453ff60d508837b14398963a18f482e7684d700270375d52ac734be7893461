{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Must have at least one digit and one terminator\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Octal field too short\");\n    }\n    if (offset < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid offset/length\");\n    }\n    // If all bytes are NUL, return 0\n    boolean allNul = true;\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allNul = false;\n            break;\n        }\n    }\n    if (allNul) {\n        return 0L;\n    }\n    int end = offset + length;\n    // The last byte must be a space or NUL\n    byte last = buffer[end - 1];\n    if (last != (byte)' ' && last != (byte)0) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n    // Skip leading spaces\n    int idx = offset;\n    while (idx < end && buffer[idx] == (byte)' ') {\n        idx++;\n    }\n    // Must have at least one digit before the terminator\n    if (idx >= end || buffer[idx] == (byte)0) {\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n    // Parse octal digits\n    long result = 0L;\n    while (idx < end) {\n        byte b = buffer[idx];\n        if (b >= (byte)'0' && b <= (byte)'7') {\n            result = (result << 3) + (b - '0');\n            idx++;\n        } else {\n            break;\n        }\n    }\n    // After digits, all remaining bytes must be space or NUL\n    for (int i = idx; i < end; i++) {\n        byte b = buffer[i];\n        if (b != (byte)' ' && b != (byte)0) {\n            throw new IllegalArgumentException(\"Invalid byte in padding\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}