{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        // Check minimum length requirement\n        if (length < 2) {\n            throw new IllegalArgumentException(\"buffer must contain at least 2 bytes\");\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int end = offset + length;\n        int start = offset;\n        boolean sawDigit = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte == 0) {\n                break;\n            }\n\n            // Skip leading spaces\n            if (stillPadding) {\n                if (currentByte == ' ') {\n                    continue;\n                }\n                stillPadding = false;\n            }\n\n            // Check for trailing space or NUL\n            if (currentByte == ' ' || currentByte == 0) {\n                // If we've seen digits before, this is valid trailer\n                if (sawDigit) {\n                    break;\n                }\n                // Otherwise continue processing (leading spaces)\n                continue;\n            }\n\n            // Validate digit\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n\n            sawDigit = true;\n            result = (result << 3) + (currentByte - '0');\n        }\n\n        // Check if we had any digits at all (other than leading zeros)\n        // If buffer was all NULs, treat as 0\n        boolean allNuls = true;\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNuls = false;\n                break;\n            }\n        }\n        if (allNuls) {\n            return 0;\n        }\n\n        // Check if we saw a valid trailer (space or NUL) after digits\n        if (sawDigit) {\n            boolean foundTrailer = false;\n            for (int i = offset; i < end; i++) {\n                if (buffer[i] == ' ' || buffer[i] == 0) {\n                    foundTrailer = true;\n                    break;\n                }\n            }\n            if (!foundTrailer) {\n                throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}