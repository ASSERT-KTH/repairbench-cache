{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2\");\n        }\n\n        final int end = offset + length;\n\n        // Check if all bytes are NULs\n        boolean allNuls = true;\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNuls = false;\n                break;\n            }\n        }\n        if (allNuls) {\n            return 0L;\n        }\n\n        long result = 0;\n        boolean stillPadding = true;\n        int i;\n\n        // Skip leading spaces\n        for (i = offset; i < end; i++) {\n            if (buffer[i] != (byte) ' ') {\n                break;\n            }\n        }\n\n        // Parse digits until terminator\n        boolean digitsFound = false;\n        for (; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte == 0 || currentByte == (byte) ' ') {\n                // Terminator found\n                break;\n            }\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            stillPadding = false;\n            digitsFound = true;\n            result = (result << 3) + (currentByte - '0');\n        }\n\n        // Check if terminator was found\n        if (i >= end) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n        }\n\n        // Check remaining bytes after terminator are spaces or NULs\n        for (int j = i + 1; j < end; j++) {\n            final byte b = buffer[j];\n            if (b != 0 && b != (byte) ' ') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, j, b));\n            }\n        }\n\n        // Ensure at least one digit was parsed\n        if (!digitsFound) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, buffer[i]));\n        }\n\n        return result;\n    }\n\n    // Helper method to generate exception message (assumed to exist)\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int pos, byte currentByte) {\n        return \"Invalid byte at position \" + pos + \": \" + currentByte;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}