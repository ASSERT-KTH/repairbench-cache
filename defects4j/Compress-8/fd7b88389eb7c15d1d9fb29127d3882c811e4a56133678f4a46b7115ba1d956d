{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2\");\n    }\n    int end = offset + length;\n    int start = offset;\n\n    // Check for all NULs case\n    boolean allNuls = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // Find actual last meaningful byte (trailer)\n    int trailerIndex = end - 1;\n    if (buffer[trailerIndex] == 0 || buffer[trailerIndex] == (byte) ' ') {\n        // ok, trailer found\n    } else if (length >= 2 && (buffer[trailerIndex - 1] == 0 || buffer[trailerIndex - 1] == (byte) ' ')) {\n        trailerIndex--;\n    } else {\n        throw new IllegalArgumentException(\"Invalid octal: no valid trailer found\");\n    }\n\n    // Parse core bytes upto trailerIndex (exclude trailer itself)\n    long result = 0;\n    boolean stillPadding = true;\n    for (int i = start; i < trailerIndex; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            if (stillPadding) {\n                continue; // skip leading spaces/NULs\n            } else {\n                // embedded space/NUL; terminate parse, must be padding, so invalid (embedded)\n                throw new IllegalArgumentException(\n                        \"Invalid octal: embedded NUL or space at index \" + i);\n            }\n        }\n\n        stillPadding = false;\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    \"Invalid octal digit at index \" + i + \": \" + currentByte);\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    // After parsing digits confirm at least one digit was parsed, i.e., not only padding\n    if (stillPadding) {\n        // no digits found\n        return 0L;\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}