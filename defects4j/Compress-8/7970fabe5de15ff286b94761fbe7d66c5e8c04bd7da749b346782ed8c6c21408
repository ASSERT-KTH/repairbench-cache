{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2\");\n    }\n    if (offset < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid offset and/or length\");\n    }\n\n    boolean allNuls = true;\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    int start = offset;\n    int end = offset + length;\n\n    // Skip leading spaces and zeros (padding)\n    while (start < end && (buffer[start] == (byte) ' ' || buffer[start] == (byte) '0')) {\n        start++;\n    }\n\n    if (start >= end) {\n        throw new IllegalArgumentException(\"No valid octal digits found\");\n    }\n\n    long result = 0;\n    boolean digitSeen = false;\n    boolean trailerFound = false;\n\n    for (int i = start; i < end; i++) {\n        byte currentByte = buffer[i];\n        if (currentByte == 0 || currentByte == (byte) ' ') {\n            trailerFound = true;\n            // Check remaining buffer: must be only space or NUL\n            for (int j = i + 1; j < end; j++) {\n                byte b = buffer[j];\n                if (b != 0 && b != (byte) ' ') {\n                    throw new IllegalArgumentException(\"Invalid trailer in header: non-space/non-NUL after terminator\");\n                }\n            }\n            break;\n        }\n        if (trailerFound) {\n            throw new IllegalArgumentException(\"Invalid data after terminator in header\");\n        }\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        digitSeen = true;\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    if (!trailerFound) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n    if (!digitSeen) {\n        throw new IllegalArgumentException(\"No octal digits found\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}