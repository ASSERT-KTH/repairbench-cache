{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Must have at least a digit and a terminator\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Octal field length must be at least 2\");\n    }\n    // Bounds check\n    if (offset < 0 || length < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid offset/length for parseOctal\");\n    }\n\n    long result = 0;\n    int end = offset + length;\n    int idx = offset;\n\n    // Skip leading spaces\n    while (idx < end && buffer[idx] == (byte) ' ') {\n        idx++;\n    }\n\n    boolean seenDigit = false;\n    // Parse octal digits until we hit NUL or space\n    while (idx < end) {\n        byte b = buffer[idx];\n        if (b == 0 || b == (byte) ' ') {\n            break;\n        }\n        if (b < (byte) '0' || b > (byte) '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, offset, b));\n        }\n        seenDigit = true;\n        result = (result << 3) + (b - (byte) '0');\n        idx++;\n    }\n\n    // We must have stopped because of a terminator\n    if (idx >= end) {\n        throw new IllegalArgumentException(\"Missing trailing NUL or space in octal field\");\n    }\n    // Skip the first terminator\n    idx++;\n    // Any remaining bytes must be NUL or space\n    while (idx < end) {\n        byte b = buffer[idx++];\n        if (b != 0 && b != (byte) ' ') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, offset, b));\n        }\n    }\n\n    // If we never saw any digit, only an all-NUL field is allowed\n    if (!seenDigit) {\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0) {\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, offset, buffer[i]));\n            }\n        }\n        return 0L;\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}