{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n    if (buffer == null || buffer.length < offset + length) {\n        throw new IllegalArgumentException(\"Buffer is too small for the requested offset and length\");\n    }\n\n    int start = offset;\n    int end = offset + length;\n\n    // Check if buffer consists only of NULs (per spec, this means zero)\n    boolean allNuls = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // If not all NULs, must have exactly one or two trailing NULs or spaces, rest valid\n    // Find last non space/NUL character: to validate trailing space/NUL\n    int trailerIdx = end - 1;\n    while (trailerIdx >= start && (buffer[trailerIdx] == 0 || buffer[trailerIdx] == (byte)' ')) {\n        trailerIdx--;\n    }\n    int octalEnd = trailerIdx + 1; // exclusive\n\n    // The last character *must* be a space or NUL, or (second last must if last char is another trailer)\n    // Must be at least one trailing space or NUL\n    if (octalEnd >= end || octalEnd < start + 1) {\n        // No data before all trailers, or no octal digits\n        throw new IllegalArgumentException(\"No octal digits found in buffer\");\n    }\n    int trailersCount = end - octalEnd;\n    if (trailersCount < 1 || trailersCount > 2) {\n        throw new IllegalArgumentException(\"Buffer must have one or two trailing space or NUL\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    for (int i = start; i < octalEnd; i++) {\n        final byte currentByte = buffer[i];\n\n        if (stillPadding) {\n            // Skip leading spaces\n            if (currentByte == (byte) ' ') {\n                continue;\n            }\n            stillPadding = false;\n        }\n\n        if (currentByte >= '0' && currentByte <= '7') {\n            result = (result << 3) + (currentByte - '0');\n        } else {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n    }\n    // If we never got a non-padding digit, that's a parse error (no digits)\n    if (stillPadding) {\n        throw new IllegalArgumentException(\"No octal digits found in buffer\");\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}