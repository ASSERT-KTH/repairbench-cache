{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Check minimal length\n    if (length < 2 || buffer == null || buffer.length < offset + length) {\n        throw new IllegalArgumentException(\"Buffer too small for parseOctal\");\n    }\n    long    result = 0;\n    boolean stillPadding = true;\n    int     end = offset + length;\n    int     start = offset;\n    int     i = start;\n\n    // Check if buffer is all NULs: allowed\n    boolean allNuls = true;\n    for (int j = start; j < end; j++) {\n        if (buffer[j] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // Find the position of the first trailing space or NUL\n    int trailerIdx = end - 1;\n    while (trailerIdx >= start && (buffer[trailerIdx] == 0 || buffer[trailerIdx] == (byte) ' ')) {\n        trailerIdx--;\n    }\n    trailerIdx++; // at first trailing space or NUL\n\n    // There must be at least one trailing NUL or space, and trailerIdx > start\n    if (trailerIdx >= end || trailerIdx == start) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL for parseOctal\");\n    }\n\n    // Now check if there are any non-final NULs or spaces in the digits\n    for (i = start; i < trailerIdx; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == (byte) ' ' || currentByte == '0') {\n            if (stillPadding) {\n                continue;\n            }\n        }\n        stillPadding = false;\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // After any digits, from trailerIdx to end, only spaces or NULs allowed\n    for (int j = trailerIdx; j < end; j++) {\n        if (buffer[j] != 0 && buffer[j] != (byte) ' ') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, buffer[j]));\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}