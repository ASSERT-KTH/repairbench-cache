{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n        }\n\n        long    result = 0;\n        boolean stillPadding = true;\n        int     end = offset + length;\n        int     start = offset;\n        boolean hasNonNul = false;\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n\n            if (currentByte == 0) {\n                break;\n            }\n\n            // Skip leading spaces\n            if (currentByte == (byte) ' ') {\n                if (stillPadding) {\n                    continue;\n                }\n                break;\n            }\n\n            if (currentByte == '0' && stillPadding) {\n                continue;\n            }\n\n            stillPadding = false;\n            hasNonNul = true;\n\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        // Check for trailing space or NUL\n        if (end > offset && buffer[end - 1] != 0 && buffer[end - 1] != ' ') {\n            throw new IllegalArgumentException(\n                    \"Input must contain a trailing space or NUL\");\n        }\n\n        // If all bytes are NULs, return 0\n        if (!hasNonNul) {\n            return 0L;\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}