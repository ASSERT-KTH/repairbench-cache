{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Must have at least one digit and one terminator\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2\");\n    }\n    if (offset < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid offset/length\");\n    }\n    int end = offset + length;\n\n    // If the entire field is NUL, that's allowed and means \"missing field\" \u2192 0\n    boolean allNulls = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNulls = false;\n            break;\n        }\n    }\n    if (allNulls) {\n        return 0L;\n    }\n\n    int idx = offset;\n    // Skip leading spaces\n    while (idx < end && buffer[idx] == (byte) ' ') {\n        idx++;\n    }\n\n    // Parse octal digits\n    long result = 0L;\n    int digitCount = 0;\n    while (idx < end) {\n        byte b = buffer[idx];\n        if (b < (byte) '0' || b > (byte) '7') {\n            break;\n        }\n        result = (result << 3) + (b - (byte) '0');\n        digitCount++;\n        idx++;\n    }\n    // Must have seen at least one octal digit\n    if (digitCount == 0) {\n        throw new IllegalArgumentException(\"Invalid octal value\");\n    }\n    // Must have at least one trailing pad character\n    if (idx >= end) {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n    // The rest of the field must be only spaces or NULs\n    for (int i = idx; i < end; i++) {\n        byte b = buffer[i];\n        if (b != (byte) ' ' && b != (byte) 0) {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, b));\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}