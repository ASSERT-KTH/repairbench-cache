{
    "generation": "/**\n * Parse an octal string from a buffer.\n * Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.\n *\n * The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the length is less than 2, trailing space/NUL is missing, or if an invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n\n    long result = 0;\n    boolean stillPadding = true;\n    boolean hasValue = false;\n    int end = offset + length;\n    int start = offset;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n\n        // Check for trailing NUL or space\n        if (i == end - 1 || i == end - 2) {\n            if (currentByte != 0 && currentByte != (byte) ' ') {\n                throw new IllegalArgumentException(\"Missing trailing NUL or space\");\n            }\n            break;\n        }\n\n        // Skip leading spaces\n        if (stillPadding && (currentByte == (byte) ' ' || currentByte == (byte) '0')) {\n            if (currentByte == (byte) '0') {\n                hasValue = true;\n            }\n            continue;\n        }\n\n        stillPadding = false;\n\n        // Check for embedded spaces or NULs\n        if (currentByte == (byte) ' ' || currentByte == 0) {\n            throw new IllegalArgumentException(\"Embedded space or NUL detected\");\n        }\n\n        // Validate octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\"Invalid octal digit: \" + currentByte);\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        hasValue = true;\n    }\n\n    // If no valid octal digits were found and the buffer is not all NULs, throw an exception\n    if (!hasValue && buffer.length > 0 && Arrays.stream(buffer).anyMatch(b -> b != 0)) {\n        throw new IllegalArgumentException(\"Buffer contains non-NUL bytes but no valid octal digits\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}