{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     * Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.\n     *\n     * The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        // As per Javadoc: \"length ... must be at least 2 bytes.\"\n        if (length < 2) {\n            throw new IllegalArgumentException(\"length must be at least 2 bytes\");\n        }\n\n        long result = 0;\n        final int limit = offset + length;\n        int currentByteIdx = offset; // Current position in the buffer\n        int firstDigitOffset = offset; // Tracks the offset of the first actual digit (for error messages)\n        boolean hasParsedDigits = false; // Becomes true once a valid octal digit has been processed\n\n        // Phase 1: Skip leading spaces\n        while (currentByteIdx < limit && buffer[currentByteIdx] == (byte) ' ') {\n            currentByteIdx++;\n            firstDigitOffset++; // Update firstDigitOffset to reflect skipped leading spaces\n        }\n\n        // Phase 2: Process digits and trailers\n        for (int i = currentByteIdx; i < limit; i++){\n            final byte currentByte = buffer[i];\n\n            if (currentByte == (byte) ' ' || currentByte == 0) {\n                // This character is either a space or a NUL.\n                // It can be a valid trailer, or part of an \"all NULs\" field, or an embedded invalid character.\n\n                if (!hasParsedDigits) {\n                    // We are still in the \"leading\" part of the field (after initial spaces, but before digits).\n                    // If it's a space, it's an embedded space before any digits, which is invalid.\n                    if (currentByte == (byte) ' ') {\n                        throw new IllegalArgumentException(\n                                exceptionMessage(buffer, offset, length, firstDigitOffset, currentByte));\n                    }\n                    // If currentByte is NUL and no digits have been seen yet, check if the *entire remaining field*\n                    // (from this NUL onwards) consists only of NULs. If so, it's an \"all NULs\" field.\n                    // Otherwise, it's an embedded NUL which is invalid because there are non-NULs/spaces after it.\n                    boolean allTrailingNuls = true;\n                    for (int j = i; j < limit; j++) {\n                        if (buffer[j] != 0 && buffer[j] != (byte) ' ') {\n                            allTrailingNuls = false;\n                            break;\n                        }\n                    }\n                    if (allTrailingNuls) {\n                        return 0L; // Field is all NULs (or NULs with trailing spaces), as per Javadoc\n                    } else {\n                        // Embedded NUL before digits (e.g. \" 0 123 \") or mixed field. Invalid.\n                        throw new IllegalArgumentException(\n                                exceptionMessage(buffer, offset, length, firstDigitOffset, currentByte));\n                    }\n                } else {\n                    // hasParsedDigits is true. This NUL or space is a potential trailer character.\n                    // All *remaining* bytes (from the character after this one to the end of the field)\n                    // must also be NULs or spaces.\n                    for (int j = i + 1; j < limit; j++) {\n                        if (buffer[j] != (byte) ' ' && buffer[j] != 0) {\n                            throw new IllegalArgumentException(\n                                    exceptionMessage(buffer, offset, length, firstDigitOffset, buffer[j]));\n                        }\n                    }\n                    // Valid trailer(s) found, so we have finished parsing the number.\n                    return result;\n                }\n            }\n\n            // If we reach here, currentByte is neither a space nor a NUL.\n            // It must be an octal digit ('0'-'7') or an invalid character.\n            // Check if it's within the valid octal digit range.\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, firstDigitOffset, currentByte));\n            }\n            // CheckStyle:MagicNumber ON\n\n            // Valid octal digit found. Update result.\n            hasParsedDigits = true; // Mark that we've processed at least one digit\n            result = (result << 3) + (currentByte - '0'); // Convert from ASCII and add to result\n        }\n\n        // If the loop completes without returning, it means we iterated through all `length` bytes.\n        // This implies that no proper trailing NUL or space was found, or the last character was a digit.\n        // As per Javadoc: \"The buffer must contain a trailing space or NUL\".\n        // This condition is violated if `hasParsedDigits` is true (meaning we parsed a number)\n        // but didn't encounter a valid trailer that caused an early return.\n        if (hasParsedDigits) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, firstDigitOffset, (byte)0)); // Use 0 to signify missing trailer\n        }\n\n        // If hasParsedDigits is false, it means the field was entirely composed of leading spaces\n        // (and no NULs were encountered to trigger the \"all NULs\" return).\n        // In this case, `result` will be 0, which is the correct interpretation for an empty numeric field.\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}