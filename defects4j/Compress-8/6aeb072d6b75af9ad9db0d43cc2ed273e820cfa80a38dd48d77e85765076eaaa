{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // Length must be at least 2 bytes\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length must be at least 2 bytes\");\n    }\n    if (buffer == null) {\n        throw new IllegalArgumentException(\"Buffer is null\");\n    }\n    if (offset < 0 || length < 0 || offset + length > buffer.length) {\n        throw new IllegalArgumentException(\"Invalid offset/length for buffer\");\n    }\n    // Check for all-NULs early for auto-missing field case\n    boolean allNuls = true;\n    for (int i = offset; i < offset + length; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n    // Otherwise, trailing character must be space or NUL, possibly an additional one as well\n    int trailerCount = 0;\n    int end = offset + length;\n    // Last byte\n    int trailer1 = buffer[end - 1] & 0xFF;\n    if (trailer1 == 0 || trailer1 == (byte) ' ') {\n        trailerCount++;\n    }\n    // Check for one more if possible\n    if (length >= 2) {\n        int trailer2 = buffer[end - 2] & 0xFF;\n        if ((trailer2 == 0 || trailer2 == (byte) ' ') && trailer2 != trailer1) {\n            trailerCount++;\n        }\n    }\n    // Valid trailer must be at least one space/NUL at the end\n    int numericEnd = end;\n    if (trailer1 == 0 || trailer1 == (byte) ' ') {\n        numericEnd--;\n        if (numericEnd > offset && (buffer[numericEnd - 1] == 0 || buffer[numericEnd - 1] == (byte) ' ')) {\n            numericEnd--;\n        }\n    } else {\n        // no trailing NUL/space - error\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, offset, (byte)trailer1));\n    }\n    long result = 0;\n    boolean stillPadding = true;\n    for (int i = offset; i < numericEnd; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == (byte) ' ' || currentByte == (byte) '0') {\n            if (stillPadding) {\n                continue;\n            }\n            if (currentByte == (byte) ' ') {\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n        }\n        stillPadding = false;\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    // If there are no digits, that's invalid (only allowed to be all NULs case)\n    if (stillPadding) {\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, offset, (byte) 0));\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}