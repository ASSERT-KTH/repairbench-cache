{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // If the very first byte is 0 the field is considered as not set.\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip any leading spaces.\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // Only trim trailing NULs or spaces if they are present.\n    // In many tar implementations the field is completely filled with digits,\n    // so we only remove trailing terminators if they actually exist.\n    if (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n            end--;\n        }\n    }\n    // Otherwise, if the last byte is not a terminator,\n    // it must be a valid digit (i.e. between '0' and '7'),\n    // otherwise we throw an error.\n    else if (end > start && (buffer[end - 1] < '0' || buffer[end - 1] > '7')) {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n    }\n\n    // Process each byte as an octal digit.\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}