{
    "generation": "/**\n * Parse an octal string from a buffer.\n *\n * <p>Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.</p>\n *\n * <p>The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).</p>\n *\n * <p>To work-around some tar implementations that insert a\n * leading NUL this method returns 0 if it detects a leading NUL\n * since Commons Compress 1.4.</p>\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing\n *         (unless the field is pure octal digits for overflow) or if an invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int start = offset;\n    int end = offset + length;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n    // Leading NUL means \"missing\" \u2192 zero\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    // skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n    // trim trailing NULs/spaces, or accept full field if last byte is a valid octal digit (overflow case)\n    if (end > start) {\n        byte trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            // trim one, then any additional\n            end--;\n            while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n                end--;\n            }\n        } else if (trailer >= '0' && trailer <= '7') {\n            // no trailer but valid octal digit: allow overflow representation\n        } else {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n    }\n    // if nothing left, treat as zero\n    if (end <= start) {\n        return 0L;\n    }\n    // parse the remaining octal digits\n    for (int i = start; i < end; i++) {\n        byte b = buffer[i];\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, b));\n        }\n        result = (result << 3) + (b - '0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}