{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     *         Note: The \"trailing space/NUL is missing\" condition is incorrect in the documentation\n     *         starting with Commons Compress 1.12, as the implementation allows the final character\n     *         to be a digit.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle cases of starting with NUL bytes, as this indicates a missing field\n        // or is used as a workaround for certain tar implementations.\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim trailing NULs and spaces. Stops at the first non-NUL/space character.\n        // This is contrary to the TAR specification, which requires a trailing NUL or space,\n        // but accommodates implementations that omit it for large numbers.\n        while (end > start) {\n            final byte currentByte = buffer[end - 1];\n            if (currentByte == 0 || currentByte == ' ') {\n                end--;\n            } else {\n                break; // Found the end of the actual octal number\n            }\n        }\n\n        // If, after skipping leading spaces and trimming trailing NULs/spaces,\n        // we are left with an empty string, return 0. This handles inputs like \" \" or \" \\0\".\n        if (start == end) {\n             return 0L;\n        }\n\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                // Generate a more informative exception message if possible\n                // (The exceptionMessage helper function is not provided in the original snippet)\n                // For now, stick to a basic message.\n                 throw new IllegalArgumentException(\n //                        exceptionMessage(buffer, offset, length, start, currentByte));\n                         \"Invalid byte \"+ currentByte + \" at offset \" + start + \" in '\"\n                          + new String(buffer, offset, length) // Assuming default charset is okay for message\n                          + \"' len=\" + length);\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    /*\n    // Helper method likely used in original context, kept here for reference if needed\n    private static String exceptionMessage(byte[] buffer, final int offset,\n                                           final int length, int currentOffset, final byte currentByte) {\n        String PFX = \"Invalid byte \" + currentByte + \" at offset \" + (currentOffset - offset) + \" in '\";\n        String SFX = \"' len=\" + length;\n        try {\n            // Show the portion of the buffer containing the potential octal string\n            int errorStart = Math.max(0, currentOffset - 20); // Show some context before\n            int errorEnd = Math.min(buffer.length, currentOffset + 20); // Show some context after\n             if (errorStart > offset + length) { // Error is past the section we are parsing? Should not happen.\n                 errorStart = offset;\n                 errorEnd = offset+length;\n             } else {\n                 errorStart = Math.max(errorStart, offset); // Ensure start is not before offset\n                 errorEnd = Math.min(errorEnd, offset + length); // Ensure end is not after end of section\n             }\n             String badString = new String(buffer, errorStart, errorEnd - errorStart, \"US-ASCII\"); // Tar headers are ASCII\n             if (errorStart > offset) badString = \"...\"+badString;\n             if (errorEnd < offset+length) badString = badString + \"...\";\n\n            return PFX + badString + SFX;\n        } catch (java.io.UnsupportedEncodingException e) {\n             // Should not happen with US-ASCII\n             return PFX + new String(buffer, offset, length) + SFX; // Fallback\n        }\n    }\n    */",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}