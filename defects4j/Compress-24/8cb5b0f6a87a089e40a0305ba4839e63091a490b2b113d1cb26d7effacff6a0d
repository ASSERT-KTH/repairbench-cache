{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // If buffer is all NUL or a leading NUL, return 0L.\n    boolean allNul = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0 && buffer[i] != ' ') {\n            allNul = false;\n            break;\n        }\n    }\n    if (allNul) {\n        return 0L;\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces, but allow an extra digit when all digits are valid octal.\n    int last = end - 1;\n    while (last >= start && (buffer[last] == 0 || buffer[last] == ' ')) {\n        last--;\n    }\n    int contentEnd = last + 1; // first index after last digit\n\n    // Now, if the buffer is fully filled with digits (no trailing NUL/space), allow\n    // the last digit to be parsed even if the field is \"full\" (as per old implementations).\n    // So, unlike the old code, do not require a trailing NUL/space unless the digit(s) are invalid.\n\n    for (; start < contentEnd; start++) {\n        final byte currentByte = buffer[start];\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        // CheckStyle:MagicNumber ON\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}