{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids ...\n        while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n            end--;\n        }\n        end++; // adjust for the while loop stopping one before\n\n        if (end < start) {\n            return 0L; // all NULs or spaces\n        }\n\n        boolean foundTerminator = false;\n        // Check if the last character is a valid terminator\n        if (buffer[end - 1] == 0 || buffer[end - 1] == ' ') {\n            foundTerminator = true;\n        }\n\n        if (!foundTerminator) {\n            // Look for the first trailing space or NUL\n            int lastValid = start;\n            for (int i = start; i < end; i++) {\n                final byte b = buffer[i];\n                if (b == 0 || b == ' ') {\n                    end = i;\n                    foundTerminator = true;\n                    break;\n                }\n                if (b >= '0' && b <= '7') {\n                    lastValid = i + 1;\n                }\n            }\n            if (!foundTerminator && lastValid < end) {\n                end = lastValid;\n            }\n        }\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte == 0 || currentByte == ' ') {\n                continue; // skip internal spaces/NULs if any\n            }\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0');\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}