{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // Check for all NULs or leading NUL/SPACE field == 0\n    boolean allNuls = true;\n    for (int i = 0; i < length; i++) {\n        byte b = buffer[offset + i];\n        if (b != 0 && b != ' ') {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n    if (buffer[start] == 0 || buffer[start] == ' ') {\n        // Leading NUL -> field value 0\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Save length before trimming\n    int contentLength = end - start;\n\n    // Trim one required trailing NUL or space, more as permitted\n    if (contentLength > 0 && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end-1, buffer[end-1]));\n    }\n    while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}