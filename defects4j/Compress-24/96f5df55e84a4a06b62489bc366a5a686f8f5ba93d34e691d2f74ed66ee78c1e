{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // skip leading NUL as well as the spec allows field to be all NULs\n    if (buffer[start] == 0) {\n        // make sure all the remainder are NUL or space\n        for (int i = start + 1; i < end; i++) {\n            if (buffer[i] != 0 && buffer[i] != ' ') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, buffer[i]));\n            }\n        }\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Instead of requiring a trailing NUL or space, accept up to one such terminator,\n    // and treat it as non-numeric, truncating the octal parsing there for POSIX compatibility\n    int numericEnd = end;\n    if (numericEnd > start && (buffer[numericEnd - 1] == 0 || buffer[numericEnd - 1] == ' ')) {\n        numericEnd--;\n        // Eat second trailing NUL or space\n        if (numericEnd > start && (buffer[numericEnd - 1] == 0 || buffer[numericEnd - 1] == ' ')) {\n            numericEnd--;\n        }\n    }\n\n    // If after stripping we are empty (all spaces/NULs), return 0\n    if (start == numericEnd) {\n        return 0L;\n    }\n\n    for (; start < numericEnd; start++) {\n        final byte currentByte = buffer[start];\n        // Check if valid octal digit\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}