{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // All NULs or all spaces: treat as zero (skip spaces too)\n    boolean allNulOrSpace = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0 && buffer[i] != ' ') {\n            allNulOrSpace = false;\n            break;\n        }\n    }\n    if (allNulOrSpace) {\n        return 0L;\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // For 11-digit octal fields in tar, the trailing ' ' or NUL is the end-of-field marker\n    // If the field is 12 bytes long, treat the last byte (buffer[end-1]) as the \"trailer leeway\" (per spec)\n    // If it's present, don't parse it as a digit; if not, include all\n    boolean skipFinalByte = false;\n    if (end > start && (buffer[end-1] == 0 || buffer[end-1] == ' ')) {\n        skipFinalByte = true;\n        end--;\n        // now remove additional trailing NUL/space\n        while (start < end && (buffer[end-1] == 0 || buffer[end-1] == ' ')) {\n            end--;\n        }\n    }\n\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}