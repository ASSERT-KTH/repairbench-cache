{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // If the very first byte is NUL, treat it as a missing field => 0\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    /*\n     * Trim trailing NULs and spaces if present.\n     * If the last byte is a valid octal digit, assume there is no trailer\n     * (some implementations use the full buffer for big values).\n     */\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' ') {\n        // remove one trailer byte\n        end--;\n        // remove any additional trailing NULs/spaces, but leave at least one byte\n        while (start < end - 1) {\n            byte b = buffer[end - 1];\n            if (b == 0 || b == ' ') {\n                end--;\n            } else {\n                break;\n            }\n        }\n    } else if (trailer >= '0' && trailer <= '7') {\n        // no trailer, parse the entire field as octal digits\n    } else {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, end - 1, trailer));\n    }\n\n    // Parse octal digits\n    for (; start < end; start++) {\n        byte current = buffer[start];\n        if (current < '0' || current > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, current));\n        }\n        result = (result << 3) + (current - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}