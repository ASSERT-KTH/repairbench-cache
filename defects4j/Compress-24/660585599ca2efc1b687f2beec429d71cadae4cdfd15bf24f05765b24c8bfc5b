{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Leading NUL means missing field => 0\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // Trim one trailing NUL or space if present, or accept full\u2010field octal digits\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' ') {\n        end--;\n    } else if (trailer >= '0' && trailer <= '7') {\n        // No terminator but a digit => some tar implementations use all bytes for octal\n    } else {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, end - 1, trailer));\n    }\n\n    // Trim any additional trailing NULs or spaces\n    while (start < end - 1 && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    // Parse the remaining bytes as octal digits\n    for (; start < end; start++) {\n        byte b = buffer[start];\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, b));\n        }\n        result = (result << 3) + (b - '0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}