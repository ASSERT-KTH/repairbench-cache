{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n    int start = offset;\n    int end = offset + length;\n    // If the very first byte is NUL, treat it as missing field => zero\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n    // Find the end of the octal digits (first NUL or space or end)\n    int idx = start;\n    while (idx < end && buffer[idx] != 0 && buffer[idx] != ' ') {\n        idx++;\n    }\n    int digitEnd = idx;\n    // Check that any remaining bytes up to 'end' are only NULs or spaces\n    for (int i = idx; i < end; i++) {\n        byte b = buffer[i];\n        if (b != 0 && b != ' ') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, b));\n        }\n    }\n    // Parse the octal digits\n    long result = 0L;\n    for (int i = start; i < digitEnd; i++) {\n        byte b = buffer[i];\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, b));\n        }\n        result = (result << 3) + (b - '0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}