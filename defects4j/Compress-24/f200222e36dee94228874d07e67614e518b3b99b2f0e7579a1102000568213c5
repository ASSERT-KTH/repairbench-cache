{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // If all bytes are NUL or spaces, return 0 (handle missing/empty fields)\n    boolean allNulOrSpaces = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0 && buffer[i] != ' ') {\n            allNulOrSpaces = false;\n            break;\n        }\n    }\n    if (allNulOrSpaces) {\n        return 0L;\n    }\n\n    // Find the last digit for parsing.\n    int lastDigit = end - 1;\n    // Skip trailing spaces and NULs to find the last non-[space|NUL] octal digit\n    while (lastDigit >= start && (buffer[lastDigit] == 0 || buffer[lastDigit] == ' ')) {\n        lastDigit--;\n    }\n    // If no digits found, it's 0\n    if (lastDigit < start) {\n        return 0L;\n    }\n    // The spec requires that the buffer contains a trailing NUL or space (even if it's also a digit)\n    if (end - 1 == lastDigit) {\n        if (buffer[end - 1] != 0 && buffer[end - 1] != ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end-1, buffer[end - 1]));\n        }\n    }\n\n    for (int i = start; i <= lastDigit; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}