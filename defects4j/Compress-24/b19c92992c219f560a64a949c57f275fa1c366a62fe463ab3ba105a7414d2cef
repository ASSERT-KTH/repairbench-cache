{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // Accept all NUL or all NUL+spaces as zero\n    boolean allNulOrSpace = true;\n    for (int i = start; i < end; i++) {\n        byte b = buffer[i];\n        if (b != 0 && b != ' ') {\n            allNulOrSpace = false;\n            break;\n        }\n    }\n\n    if (allNulOrSpace) {\n        return 0L;\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Accept a trailing space or NUL, but don't require it to exclude last octal digit\n    if (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    // Remove multiple trailing spaces/NULs\n    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        // Only allow '0'..'7' in the core digits\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}