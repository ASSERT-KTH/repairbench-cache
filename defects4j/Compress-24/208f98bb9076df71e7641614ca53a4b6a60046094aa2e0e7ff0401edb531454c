{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Check trailing space/NUL or all octal digits\n        if (start < end) {\n            byte trailer = buffer[end - 1];\n            if (trailer == 0 || trailer == ' ') {\n                end--;\n                if (start < end) { // Check if there's still data after trimming\n                    trailer = buffer[end - 1];\n                    while (start < end - 1 && (trailer == 0 || trailer == ' ')) {\n                        end--;\n                        trailer = buffer[end - 1];\n                    }\n                }\n            } else {\n                // Verify all remaining characters are octal digits\n                boolean allOctal = true;\n                for (int i = start; i < end; i++) {\n                    final byte b = buffer[i];\n                    if (b < '0' || b > '7') {\n                        allOctal = false;\n                        break;\n                    }\n                }\n                if (!allOctal) {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, end - 1, trailer));\n                }\n            }\n        }\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}