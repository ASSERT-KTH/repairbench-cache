{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // (1) Find the end index (exclusive): skip trailing NULL and spaces for more than one\n    int last = end - 1;\n    while (last >= start && (buffer[last] == 0 || buffer[last] == ' ')) {\n        last--;\n    }\n    // Now, valid digits are buffer[start] to buffer[last] (inclusive)\n    // if last < start then it's empty digits, treat as zero\n    if (last < start) {\n        return 0L;\n    }\n\n    for (int i = start; i <= last; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}