{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n    int start = offset;\n    int end = offset + length;\n    \n    // If the first byte is a NUL, return 0 (allows for missing fields)\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    \n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n    \n    // Only trim trailing delimiters if present.\n    if (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n            end--;\n        }\n    }\n    \n    long result = 0;\n    for (int i = start; i < end; i++) {\n        byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // Convert from ASCII octal digit.\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}