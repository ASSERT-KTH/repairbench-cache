{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // Accept all-NUL and all-space as 0\n    boolean allNulOrSpace = true;\n    for (int i = offset; i < end; i++) {\n        byte b = buffer[i];\n        if (b != 0 && b != ' ') {\n            allNulOrSpace = false;\n            break;\n        }\n    }\n    if (allNulOrSpace) {\n        return 0L;\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Find and handle trailing NULs and spaces.\n    // USTAR/POSIX spec requires *one* trailing NUL or space, but some implementations use all digits.\n    // If last byte is space/NUL, treat as classic spec: ignore digit at end.\n    boolean hasTrailingSpaceOrNul = (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' '));\n    int validEnd = end;\n    if (hasTrailingSpaceOrNul) {\n        validEnd = end - 1;\n        // Trim further trailing spaces/NULs\n        while (validEnd > start && (buffer[validEnd - 1] == 0 || buffer[validEnd - 1] == ' ')) {\n            validEnd--;\n        }\n    }\n\n    // If after trimming validEnd == start, treat as 0-length = 0.\n    if (validEnd <= start) {\n        return 0L;\n    }\n\n    for (int i = start; i < validEnd; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}