{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' '){\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end-1, trailer));\n    }\n    trailer = buffer[end - 1];\n    while (start < end - 1 && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n\n    // Special handling: If the trimmed field contains 12 digits and last digit is '7',\n    // accept as an overflow case (as some implementations use an extra leading '7')\n    boolean overflowSpecialCase =\n            (end - start == 12) &&\n            (buffer[start] >= '0' && buffer[start] <= '7') &&\n            (buffer[end - 1] == '7');\n\n    if (overflowSpecialCase) {\n        // Parse assuming full 12 digits\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0');\n        }\n        return result;\n    }\n\n    // Otherwise: if length >11 awkward end digit, chop it (treat as padding)\n    if (end - start > 11) {\n        end--;\n    }\n\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}