{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' '){\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end-1, trailer));\n    }\n    trailer = buffer[end - 1];\n    while (start < end - 1 && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n\n    final int originalEnd = end; // save original end to detect size after trimming trailing spaces/NULs\n\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // Special handling: if input looks like 12 octal digits, but is terminated with space or NUL\n    // assume last digit is \"ignored\" trailing digit for historic implementations\n    int digits = end - offset;\n    if (digits == 12 && (buffer[offset + 11] == ' ' || buffer[offset + 11] == 0)) {\n        // set result by parsing only the first 11 digits\n        result = 0;\n        for (int i = start = offset; start < offset + 11; start++) {\n            final byte currentByte = buffer[start];\n            if (currentByte >= '0' && currentByte <= '7') {\n                result = (result << 3) + (currentByte - '0');\n            } else if (currentByte == ' ') {\n                continue; // skip leading space if any\n            } else {\n                break; // unexpected char, don't change result\n            }\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}