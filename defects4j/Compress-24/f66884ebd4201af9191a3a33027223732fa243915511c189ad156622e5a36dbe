{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0L;\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n    int start = offset;\n    int end = offset + length;\n    // A leading NUL means \"missing field\" \u2192 return 0\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n    // Determine where the octal digits end\n    int last = end - 1;\n    if (buffer[last] == 0 || buffer[last] == ' ') {\n        // Trim all trailing NULs and spaces\n        while (last >= start && (buffer[last] == 0 || buffer[last] == ' ')) {\n            last--;\n        }\n    } else {\n        // No trailing NUL/space, only allow [0..7]\n        if (buffer[last] < '0' || buffer[last] > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, last, buffer[last]));\n        }\n    }\n    // Parse the digits between start and last (inclusive)\n    for (int i = start; i <= last; i++) {\n        byte b = buffer[i];\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, b));\n        }\n        result = (result << 3) + (b - '0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}