{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer is potentially terminated with NULs or spaces.\n     * NULs or spaces anywhere else are invalid.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle leading NUL or cases like {0, 0}\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids, so we trimming from the end simplifies the logic.\n        // Ensure we don't trim everything if the field is potentially all NULs/spaces\n        // (although the leading NUL check catches some of this).\n        int realEnd = end; // Store original end for exception message context if needed\n        while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n            end--;\n        }\n\n        // If all characters were spaces or NULs, start >= end.\n        // The loop below won't execute and we return 0, which is correct.\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                // Use realEnd for the original length in the message\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist for the exception message generation\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) {\n        String S;\n        try {\n            // Attempt to decode assuming UTF-8 or a relevant charset\n            S = new String(buffer, offset, length, java.nio.charset.StandardCharsets.UTF_8);\n        } catch (Exception e) {\n            // Fallback if decoding fails or charset not available\n             try {\n                S = new String(buffer, offset, length, \"US-ASCII\");\n             } catch (Exception e2) {\n                // Absolute fallback\n                S = new String(buffer, offset, length);\n             }\n        }\n        // Make the buffer content printable, replacing NULs\n        S = S.replace(\"\\0\", \"{NUL}\");\n        return \"Invalid byte \" + currentByte + \" at offset \" + (idx - offset) +\n               \" in '\" + S + \"' len=\" + length;\n   }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}