{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // Skip leading spaces and NULs\n    while (start < end && (buffer[start] == ' ' || buffer[start] == 0)){\n        start++;\n    }\n\n    // If after skipping, we're at the end, treat as 0\n    if (start == end) {\n        return 0L;\n    }\n\n    // Find first trailing NUL or space within the region [start, end)\n    int trailerIdx = end;\n    for (int i = end - 1; i >= start; i--) {\n        if (buffer[i] == 0 || buffer[i] == ' ') {\n            trailerIdx = i;\n        } else {\n            break;\n        }\n    }\n\n    if (trailerIdx == end) {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1])\n        );\n    }\n\n    if (trailerIdx == start) { // only trailing NULs/spaces, so must be zero\n        return 0L;\n    }\n\n    // Now parse from start (inclusive) to trailerIdx (exclusive)\n    for (int i = start; i < trailerIdx; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}