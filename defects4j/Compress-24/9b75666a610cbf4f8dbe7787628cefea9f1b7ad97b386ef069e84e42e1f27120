{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // leading NUL workaround: accept all NUL or 0 <bytes> with one or two trailing spaces/NULs\n    boolean allNul = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0 && buffer[i] != (byte) ' ') {\n            allNul = false;\n            break;\n        }\n    }\n    if (allNul) {\n        return 0L;\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    // The ustar and POSIX tar specs require a trailing NUL or\n    // space but some implementations use the extra digit for big\n    // sizes/uids/gids ...\n    // -- FIX: don't require a trailing space or NUL if field is fully used (no pad)\n    //         (i.e. accept field of pure digits)\n    // First, trim trailing spaces/NULs only for pad\n    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n    // If there's a pad, remove at least one and permit at most one as trailing pad required by specs\n    if (end < offset + length - 1) {\n        // pad found and trimmed, ok\n    } else if (end == offset + length - 1) {\n        // check if last byte is allowed (trailing space or NUL or digit)\n        byte trailer = buffer[end];\n        if (trailer == 0 || trailer == ' ') {\n            end--; // remove trailing pad\n        }\n        // else: digit - full field, no pad, that's valid\n    }\n    // else: full field\n\n    // For the pure-digit (no trailing pad) case: don't require trailing pad\n    // Parse from start to end (non-inclusive)\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}