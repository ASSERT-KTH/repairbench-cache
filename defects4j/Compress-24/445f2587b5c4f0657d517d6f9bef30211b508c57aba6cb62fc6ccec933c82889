{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // Skip leading NULs\n    if (buffer[start] == 0) {\n        // Check the rest of the buffer to see if all are NULs or spaces\n        for (int i = start; i < end; i++) {\n            if (buffer[i] != 0 && buffer[i] != ' ') {\n                break;\n            }\n            if (i == end - 1) {\n                return 0L;\n            }\n        }\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Determine actual end (trailing NULs or spaces are allowed but not required)\n    int actualEnd = end;\n    while (actualEnd > start && (buffer[actualEnd - 1] == 0 || buffer[actualEnd - 1] == ' ')) {\n        actualEnd--;\n    }\n\n    // Must leave at least one byte for a trailing NUL or SPACE\n    if (actualEnd < offset + 1) {\n        return 0L;\n    }\n\n    for (; start < actualEnd; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}