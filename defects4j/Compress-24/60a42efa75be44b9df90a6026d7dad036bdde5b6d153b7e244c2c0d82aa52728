{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces, but allow for the case where the last digit is followed by a space or NUL\n    byte trailer = buffer[end - 1];\n    if (trailer != ' ' && trailer != 0) {\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, trailer));\n    }\n\n    int actualEnd = end;\n    while (actualEnd > start && (buffer[actualEnd - 1] == ' ' || buffer[actualEnd - 1] == 0)) {\n        actualEnd--;\n    }\n\n    for (; start < actualEnd; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // Convert from ASCII\n    }\n\n    // Handle the case where the last digit is followed by a space or NUL\n    if (actualEnd < end && (buffer[actualEnd] == ' ' || buffer[actualEnd] == 0)) {\n        if (result > 077777777777L) {\n            result = 077777777777L; // Cap at the maximum allowed octal value\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}