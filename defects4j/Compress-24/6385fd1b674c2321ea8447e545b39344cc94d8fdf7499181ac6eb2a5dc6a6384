{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' '){\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end-1, trailer));\n    }\n    trailer = buffer[end - 1];\n    while (start < end - 1 && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n\n    // Special handling for 12-digit overflowed octal\n    final boolean possibleLarge = (end - start == 12);\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    // If length ==12 digits, some implementations overflow by setting last digit to 7 and discarding highest bit of result.\n    if (possibleLarge) {\n        result |= (1L << 33); // overflowed bit from 12th digit (>11digits), make compatible with GNU\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}