{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Accept field if all NUL or all NUL+spaces\n    boolean allNulsOrSpaces = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0 && buffer[i] != ' ') {\n            allNulsOrSpaces = false;\n            break;\n        }\n    }\n    if (allNulsOrSpaces) {\n        return 0L;\n    }\n\n    // tar: treat field as 0 if first byte is NUL\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Find last non-space, non-NUL\n    int last = end - 1;\n    while (last >= start && (buffer[last] == 0 || buffer[last] == ' ')) {\n        last--;\n    }\n    if (last < start) { // only NULs/spaces remain\n        return 0L;\n    }\n\n    for (int i = start; i <= last; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}