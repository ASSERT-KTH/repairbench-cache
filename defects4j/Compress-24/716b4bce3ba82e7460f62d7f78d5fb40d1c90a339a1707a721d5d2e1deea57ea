{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n    int finish = offset + length;\n    int start = offset;\n\n    // Skip leading spaces\n    while (start < finish && buffer[start] == ' ') {\n        start++;\n    }\n    // Work-around for a leading NUL byte: it signals a missing field.\n    if (start < finish && buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Determine the end of the digits.\n    // If the field ends with a NUL or space, then it is a terminated number and we trim the termination.\n    int end = finish;\n    if (buffer[end - 1] == 0 || buffer[end - 1] == ' ') {\n        while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n            end--;\n        }\n    }\n\n    // Parse the octal value.\n    long result = 0;\n    for (int i = start; i < end; i++) {\n        byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}