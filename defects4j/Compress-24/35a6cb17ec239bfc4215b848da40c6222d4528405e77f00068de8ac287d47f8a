{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // All NULs or leading NUL - treat as 0\n    boolean allNulsOrSpaces = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0 && buffer[i] != ' ') {\n            allNulsOrSpaces = false;\n            break;\n        }\n    }\n    if (allNulsOrSpaces || buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // Now, find actual end: trim trailing spaces/NULs, keeping at least one digit\n    // (We need to always keep at least one digit for valid parse)\n    int realEnd = end;\n    while (realEnd > start && (buffer[realEnd - 1] == 0 || buffer[realEnd - 1] == ' ')) {\n        realEnd--;\n    }\n    // Check: there must be at least one trailing space/NUL in the field\n    if (realEnd == end) {\n        if (buffer[end - 1] != 0 && buffer[end - 1] != ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n        }\n    }\n\n    // All digits must be valid octal in [start, realEnd)\n    for (int i = start; i < realEnd; i++) {\n        byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}