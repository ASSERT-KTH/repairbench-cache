{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // Allow buffers that are all NUL (and NUL and space)\n    boolean allNulOrSpace = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0 && buffer[i] != ' ') {\n            allNulOrSpace = false;\n            break;\n        }\n    }\n    if (allNulOrSpace) {\n        return 0L;\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    int realEnd = end;\n    while (realEnd > start && (buffer[realEnd - 1] == 0 || buffer[realEnd - 1] == ' ')) {\n        realEnd--;\n    }\n\n    if (realEnd == start) {\n        // no digits found, buffer was only spaces or NULs (covered above), or no numeric field\n        return 0L;\n    }\n\n    for ( ;start < realEnd; start++) {\n        final byte currentByte = buffer[start];\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        // CheckStyle:MagicNumber ON\n    }\n\n    // The field must end with a space or NUL, unless we've already consumed all trailing spaces/NUL\n    // We only throw if there's a non-Space, non-NUL after the parsed part within the original length\n    // (already handled by checks above on non-octal chars)\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}