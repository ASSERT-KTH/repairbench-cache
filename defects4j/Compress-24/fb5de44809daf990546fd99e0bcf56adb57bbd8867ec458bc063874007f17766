{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // Ensure there's at least one trailing space or NUL\n    if (end - start < 1) {\n        throw new IllegalArgumentException(\"No trailing space or NUL found\");\n    }\n\n    // Trim all trailing NULs and spaces while ensuring there's at least one valid character\n    trailerLoop:\n    while (end > start) {\n        byte trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--;\n        } else {\n            break trailerLoop;\n        }\n    }\n\n    // Validate start position\n    if (start >= end) {\n        return 0L;\n    }\n\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        // Check for overflow\n        if (result > (Long.MAX_VALUE - (currentByte - '0')) / 8) {\n            throw new IllegalArgumentException(\"Octal number overflow\");\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}