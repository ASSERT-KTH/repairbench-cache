{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Handle didactic trailing space or NUL, but this implementation and some TAR implementations can use\n    // the last digit for a value. So we process the entire buffer first,\n    // then if after the parsing the last character is ' ' or 0, we drop that digit.\n    // So essentially - allow one trailing ' ' or 0 after digits and ignore it.\n\n    byte lastByte = buffer[end - 1];\n    boolean hasTrailingPadding = (lastByte == 0 || lastByte == ' ');\n    int limit = end;\n\n    if (hasTrailingPadding) {\n        limit = end - 1;\n    }\n\n    // See if digits fill the entire field up to limit inclusive (ignoring leading spaces skipped above).\n    // Also, some tar implementations actually use all bytes as digits (12 digits), so if the last byte is a digit, too, accept it.\n\n    boolean allZeros = true;\n    for (int i = start; i < limit; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        if (currentByte != '0') {\n            allZeros = false;\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    // check last digit (trailing byte)\n    if (hasTrailingPadding && limit < end) {\n        // skip padding, done\n    } else if (limit < end) { // full length, last byte not ' ' or NUL\n        byte trailingByte = buffer[end - 1];\n        if (trailingByte >= '0' && trailingByte <= '7') {\n            result = (result << 3) + (trailingByte - '0');\n        } else {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end - 1, trailingByte));\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}