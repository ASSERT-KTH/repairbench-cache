{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Special case: field is all NUL or spaces, treat as 0\n    boolean allBlank = true;\n    for (int i = start; i < end; ++i) {\n        if (buffer[i] != 0 && buffer[i] != ' ') {\n            allBlank = false;\n            break;\n        }\n    }\n    if (allBlank) {\n        return 0L;\n    }\n\n    // Ustar and POSIX tar specs require a trailing NUL or space\n    // but some implementations use extra digit for big sizes/uids/gids\n    byte trailer = buffer[end - 1];\n    boolean hasTrailer = (trailer == 0 || trailer == ' ');\n    if (hasTrailer) {\n        end--;\n    }\n\n    // Remove any trailing NULs and spaces except the \"extra digit\" case (no trailer)\n    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    // If there was no trailer, allow one extra digit (like GNU tar etc)\n    if (!hasTrailer && end < offset + length) {\n        // Accept \"overlength\" octal\n    }\n\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}