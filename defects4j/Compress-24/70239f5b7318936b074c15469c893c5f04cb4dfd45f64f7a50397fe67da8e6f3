{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Find the end of octal digits, before trailing NULs and spaces\n    int limit = end;\n    while (limit > start && (buffer[limit - 1] == 0 || buffer[limit - 1] == ' ')) {\n        limit--;\n    }\n\n    // If all bytes are NULs or spaces (i.e., we skipped everything), return 0\n    if (start == limit) {\n        return 0L;\n    }\n\n    // Check trailing byte\n    if (end - limit > 2) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n    }\n    if (end - limit > 0) {\n        byte trailer = buffer[limit];\n        if (trailer != 0 && trailer != ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, limit, trailer));\n        }\n    }\n\n    for (; start < limit; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}