{
    "generation": "--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n@@ -52,16 +52,24 @@\n         // The ustar and POSIX tar specs require a trailing NUL or\n         // space but some implementations use the extra digit for big\n         // sizes/uids/gids ...\n-        byte trailer = buffer[end - 1];\n-        if (trailer == 0 || trailer == ' '){\n-            end--;\n-        } else {\n-            throw new IllegalArgumentException(\n-                    exceptionMessage(buffer, offset, length, end-1, trailer));\n+        // If the last character is NOT a NUL or space, then this number should\n+        // not be trimmed.\n+        // This is a common implementation detail that conflicts with the\n+        // POSIX standard for fields that are not NUL/space terminated.\n+        \n+        // Corrected trimming logic:\n+        int currentEnd = end;\n+        while (start < currentEnd) { // Iterate from right to left\n+            final byte currentByte = buffer[currentEnd - 1];\n+            if (currentByte == 0 || currentByte == ' ') {\n+                currentEnd--;\n+            } else {\n+                break; // Found a non-terminator, stop trimming\n+            }\n         }\n-        trailer = buffer[end - 1];\n-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {\n-            end--;\n-            trailer = buffer[end - 1];\n-        }\n+        end = currentEnd; // Update the 'end' for the parsing loop.\n \n         for ( ;start < end; start++) {\n             final byte currentByte = buffer[start];\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}