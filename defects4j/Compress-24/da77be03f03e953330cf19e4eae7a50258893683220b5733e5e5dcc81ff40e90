{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    int start = offset;\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // If buffer is all spaces, return 0\n    if (start >= end) {\n        return 0L;\n    }\n\n    // Process each byte until end or a non-octal character is found\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte >= '0' && currentByte <= '7') {\n            result = (result << 3) + (currentByte - '0');\n        } else if (currentByte == ' ' || currentByte == 0) {\n            break;\n        } else {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}