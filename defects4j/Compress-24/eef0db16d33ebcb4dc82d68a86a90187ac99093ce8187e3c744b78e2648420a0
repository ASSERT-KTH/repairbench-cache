{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' '){\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end-1, trailer));\n    }\n    trailer = buffer[end - 1];\n    while (start < end - 1 && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n\n    // Special case: if string is all zeros (NULLs + optional spaces)\n    if (start == end) {\n        return 0L;\n    }\n\n    // Exception to the rules for detecting illegal trailing content:\n    // Accept an unsigned extra digit if it fits, i.e., if the two\n    // trailing \"illegal\" characters are '7' (ASCII 55) followed by a trailing NUL or space.\n    // This is to accommodate certain TAR implementations for large values.\n    // So, if the digit before trailer is between 0 and 7, accept it as well.\n    // But the check is handled naturally by above code; \n    // instead, we need to tolerate an extra digit beyond the last space/NUL.\n    if (end == offset + length -1) { // There was only one trailing space/NUL trimmed\n        int possibleExtraDigitPos = end;\n        if (possibleExtraDigitPos < offset + length) {\n            byte possibleExtraDigit = buffer[possibleExtraDigitPos];\n            if (possibleExtraDigit >= '0' && possibleExtraDigit <= '7') {\n                end++;\n            }\n        }\n    }\n\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}