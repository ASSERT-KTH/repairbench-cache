{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n    \tint totalRead = 0;\n\n        // If we've already hit the end of the current entry or the overall stream,\n        // return -1 to signal EOF for the current entry.\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        // If there's no current entry being processed, this is an invalid state.\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // Limit the number of bytes to read to avoid reading beyond the current entry's boundaries\n        // or what the underlying stream can provide (approx).\n        numToRead = Math.min(numToRead, available());\n        \n        // Read bytes from the underlying input stream.\n        totalRead = is.read(buf, offset, numToRead);\n        \n        // Update the total bytes read across the entire tar archive stream.\n        count(totalRead);\n        \n        if (totalRead == -1) {\n            // If the underlying stream returned -1, it means EOF was reached on the physical stream.\n            // We need to check if this EOF was expected for the current entry.\n            if (entryOffset < entrySize) {\n                // We hit EOF on the underlying stream, but we still expected more bytes\n                // for the current tar entry (entryOffset < entrySize).\n                // This indicates that the tar archive entry is truncated.\n                throw new IOException(\"Truncated TAR archive\");\n            }\n            // If entryOffset >= entrySize, it means we finished reading the current entry\n            // either exactly at the stream's end or we were already past the entry's logical end.\n            // In this case, it's a normal end-of-stream condition for the entire archive.\n            hasHitEOF = true; // Mark the global stream EOF.\n        } else {\n            // Bytes were successfully read, so update the current offset within the entry.\n            entryOffset += totalRead;\n        }\n\n        return totalRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}