{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n        // 1. Handle request for 0 bytes according to InputStream spec\n        if (numToRead <= 0) {\n            return 0;\n        }\n\n        // 2. Check if we are already logically at the end of the current entry\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        // 3. Sanity check for current entry\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // 4. Determine actual number of bytes to read for this entry\n        //    available() returns (int) (entrySize - entryOffset).\n        //    Since we passed the check in step 2, entryOffset < entrySize, so available() > 0.\n        int bytesToRead = Math.min(numToRead, available());\n\n        // 5. Read from the underlying stream\n        //    We expect bytesToRead > 0 here.\n        int totalRead = is.read(buf, offset, bytesToRead);\n\n        // 6. Check for premature EOF from the underlying stream\n        if (totalRead == -1) {\n            // If the underlying stream returns EOF (-1) but we expected more bytes\n            // for the current entry (bytesToRead > 0), it signifies a truncated archive.\n            // Note: bytesToRead is guaranteed > 0 if we reach this point due to checks above.\n            throw new IOException(\"Truncated TAR archive: Expected \" + entrySize\n                                  + \" bytes, but received EOF indicator after \" + entryOffset\n                                  + \" bytes in entry '\" + currEntry.getName() + \"'\");\n        }\n\n        // 7. Update state for successfully read bytes\n        count(totalRead); // Update ArchiveInputStream's byte count\n        entryOffset += totalRead;\n\n        // 8. Return bytes read in this call\n        return totalRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}