{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n        // Check 1: If stream previously hit premature EOF\n        if (hasHitEOF) {\n            return -1;\n        }\n\n        // Check 2: If current entry is already fully read or no current entry\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n        if (entryOffset >= entrySize) {\n            return -1;\n        }\n\n        // Calculate max bytes to read for this call, limited by available entry size\n        // N.B. available() ensures we don't read past the end of the entry.\n        numToRead = Math.min(numToRead, available());\n\n        // If available() returned 0, it means entryOffset equals entrySize.\n        // The check at the beginning handles this, so numToRead should be > 0\n        // if we expect to read anything. However, a read of 0 bytes is valid.\n\n        // Read from the underlying stream\n        int bytesRead = is.read(buf, offset, numToRead);\n\n        if (bytesRead == -1) {\n            // Underlying stream hit EOF.\n            // Check if we expected more data for the current entry.\n            if (entryOffset < entrySize) {\n                 // Premature EOF -> Truncated entry\n                 throw new IOException(\"Truncated TAR archive: Expected \" + entrySize\n                                      + \" bytes, but only received \" + entryOffset\n                                      + \" bytes for entry \" + currEntry.getName());\n            }\n            // If EOF occurred exactly at or after the end of the entry, mark stream EOF\n            hasHitEOF = true;\n            // Return -1 to signal EOF to the caller\n        } else {\n            // Successfully read some bytes\n            count(bytesRead); // Update statistics only for successful reads\n            entryOffset += bytesRead; // Update entry progress\n        }\n\n        // Return the result of the read operation (-1 for EOF, or number of bytes read)\n        return bytesRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}