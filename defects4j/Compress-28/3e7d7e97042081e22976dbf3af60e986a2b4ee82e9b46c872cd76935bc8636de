{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n    \tint totalRead = 0;\n\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // Determine how many bytes we can actually read for the current entry.\n        // This is the minimum of what the user requested and what's remaining in the entry.\n        numToRead = Math.min(numToRead, available());\n        \n        // If numToRead becomes 0, it means either the caller requested 0 bytes,\n        // or there are no more bytes available for the current entry (i.e., entryOffset >= entrySize).\n        // In the latter case, the first 'if' block should ideally catch it, but returning 0 for a 0-length read is standard.\n        if (numToRead == 0) {\n            return 0;\n        }\n\n        totalRead = is.read(buf, offset, numToRead);\n        count(totalRead);\n        \n        if (totalRead == -1) {\n            // The underlying stream returned -1 (EOF).\n            // If we still expected more bytes for the current entry (i.e., entryOffset < entrySize),\n            // it means the TAR entry is truncated. Throw an IOException.\n            if (entryOffset < entrySize) {\n                throw new IOException(\"Truncated TAR entry '\" + currEntry.getName()\n                                      + \"'. Expected \" + currEntry.getSize() + \" bytes, read \"\n                                      + entryOffset + \" bytes.\");\n            }\n            // If totalRead is -1 but entryOffset is already >= entrySize, it means the\n            // current entry happened to end exactly at the EOF of the underlying stream, which is fine.\n            // Mark the global EOF for the archive.\n            hasHitEOF = true;\n        } else {\n            // Successfully read some bytes. Update the offset for the current entry.\n            entryOffset += totalRead;\n        }\n\n        return totalRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}