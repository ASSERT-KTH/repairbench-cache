{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n        // Check for EOF or invalid state first\n        if (hasHitEOF) { // Check if the archive stream itself has hit EOF (e.g., past the end-of-archive markers)\n            return -1;\n        }\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n        // Check if we are already at the end of the current entry\n        if (entryOffset >= entrySize) {\n            return -1;\n        }\n\n        // Calculate the number of bytes to read for this specific call,\n        // ensuring we don't read beyond the current entry's boundary.\n        int numToReadThisCall = numToRead;\n        if (numToReadThisCall + entryOffset > entrySize) {\n            numToReadThisCall = (int) (entrySize - entryOffset);\n        }\n\n        // If the calculated number of bytes to read is 0 or less,\n        // it means we are exactly at the end of the entry.\n        if (numToReadThisCall <= 0) {\n            return -1;\n        }\n\n        // Read bytes from the underlying input stream\n        int bytesRead = is.read(buf, offset, numToReadThisCall);\n\n        // Process the result of the read operation\n        if (bytesRead == -1) {\n            // The underlying stream reached EOF.\n            // Check if this happened before we reached the expected end of the entry.\n            if (entryOffset < entrySize) {\n                // This indicates a truncated archive entry.\n                throw new IOException(\"Truncated TAR archive: Expected \" + entrySize\n                                      + \" bytes, but encountered EOF at \" + entryOffset + \" bytes.\");\n            }\n            // If entryOffset >= entrySize, reaching EOF is expected.\n            // The initial check should ideally catch this, but we handle it here too.\n            // Do NOT set hasHitEOF here; that flag is for the overall stream state.\n            // Returning -1 signals EOF for the current entry's data stream.\n            return -1;\n        }\n        \n        // If bytes were successfully read:\n        if (bytesRead > 0) {\n             count(bytesRead); // Update the count of bytes processed.\n             entryOffset += bytesRead; // Update the offset within the current entry.\n        }\n        // Note: is.read might return 0, which is valid. We update offset and count only if bytesRead > 0.\n\n        return bytesRead; // Return the actual number of bytes read.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}