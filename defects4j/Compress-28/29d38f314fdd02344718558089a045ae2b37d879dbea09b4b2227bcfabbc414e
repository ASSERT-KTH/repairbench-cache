{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n        // If we have already hit EOF for the entire stream, or we have read all bytes\n        // for the current entry (entryOffset >= entrySize), signal EOF for this entry.\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // Determine the actual number of bytes to read, respecting the requested amount\n        // and the remaining bytes for the current entry according to its declared size.\n        // The available() method for TarArchiveInputStream typically returns entrySize - entryOffset.\n        int bytesToReadForEntry = (int) Math.min(numToRead, entrySize - entryOffset);\n\n        // If the calculated bytesToReadForEntry is 0, it means either:\n        // 1. The caller requested to read 0 bytes (numToRead == 0).\n        // 2. We are exactly at the end of the declared entry size (entryOffset == entrySize).\n        //    However, case 2 is handled by the initial 'if (entryOffset >= entrySize)' check\n        //    which returns -1, indicating EOF for the current entry.\n        // So, this block is primarily for when numToRead == 0.\n        if (bytesToReadForEntry == 0) {\n            return 0;\n        }\n\n        // Read bytes from the underlying input stream.\n        int bytesRead = is.read(buf, offset, bytesToReadForEntry);\n\n        if (bytesRead == -1) {\n            // If the underlying stream returns -1 (EOF) *before* we have read\n            // all bytes up to the declared entrySize, it means the entry is truncated.\n            // Since bytesToReadForEntry was > 0, it implies entryOffset < entrySize.\n            // Therefore, hitting EOF on the underlying stream at this point is always a truncation error.\n            throw new IOException(\"Truncated TAR entry\");\n        } else {\n            // Successfully read bytes. Update the offset within the current entry.\n            entryOffset += bytesRead;\n            // Update the overall stream byte count (assuming 'count' is a method like in FilterInputStream).\n            count(bytesRead);\n        }\n\n        return bytesRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}