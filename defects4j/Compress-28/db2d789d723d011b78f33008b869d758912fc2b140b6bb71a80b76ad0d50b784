{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n        // If we've hit a global EOF for the stream or reached the end of the current entry\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        // Ensure there's a current tar entry selected\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // Limit the number of bytes to read to what's available within the current entry's boundaries\n        // and what the caller requested.\n        int bytesToRead = Math.min(numToRead, available());\n        \n        // If nothing more to read within the entry (or numToRead was 0 initially),\n        // return 0 according to InputStream contract for read(byte[], int, 0).\n        if (bytesToRead == 0) {\n            return 0;\n        }\n\n        // Read from the underlying stream\n        int bytesReadFromStream = is.read(buf, offset, bytesToRead);\n        \n        if (bytesReadFromStream == -1) {\n            // The underlying stream hit EOF.\n            // Since bytesToRead was > 0, it means we expected more data for the current entry\n            // (as entryOffset < entrySize). Therefore, the entry is truncated.\n            // Mark the global stream as having hit EOF as well.\n            hasHitEOF = true; \n            throw new IOException(\"Truncated TAR entry '\" + currEntry.getName()\n                                  + \"' - expected \" + entrySize + \" but got \" + entryOffset + \" bytes\");\n        } else {\n            // Successfully read some bytes. Update the offset within the current entry.\n            entryOffset += bytesReadFromStream;\n            // Update the total bytes read by the stream (for the CountingInputStream functionality).\n            // Only positive reads should increment the counter.\n            count(bytesReadFromStream);\n            return bytesReadFromStream;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}