{
    "generation": "/**\n * Reads bytes from the current tar archive entry.\n *\n * This method is aware of the boundaries of the current\n * entry in the archive and will deal with them as if they\n * were this stream's start and EOF.\n *\n * @param buf The buffer into which to place bytes read.\n * @param offset The offset at which to place bytes read.\n * @param numToRead The number of bytes to read.\n * @return The number of bytes read, or -1 at EOF.\n * @throws IOException on error or if the entry is truncated\n */\n@Override\npublic int read(byte[] buf, int offset, int numToRead) throws IOException {\n    if (hasHitEOF || entryOffset >= entrySize) {\n        return -1;\n    }\n    if (currEntry == null) {\n        throw new IllegalStateException(\"No current tar entry\");\n    }\n    // don't read past this entry's declared size\n    numToRead = Math.min(numToRead, available());\n    int totalRead = is.read(buf, offset, numToRead);\n    count(totalRead);\n    if (totalRead == -1) {\n        hasHitEOF = true;\n        // underlying stream ended before we read all of the entry\n        if (entryOffset < entrySize) {\n            throw new IOException(\"Truncated TAR archive entry: expected \"\n                                  + entrySize + \" bytes, read \" + entryOffset + \" bytes\");\n        }\n    } else {\n        entryOffset += totalRead;\n    }\n    return totalRead;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}