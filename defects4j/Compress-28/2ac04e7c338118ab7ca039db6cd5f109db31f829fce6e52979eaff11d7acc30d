{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error, including Physical EOF detected before logical EOF\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n\n        // Check if the logical end of the current entry has been reached\n        if (entryOffset >= entrySize) {\n            return -1;\n        }\n\n        // Check if there is a current entry defined\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // Clamp the number of bytes to read to the remaining size of the current entry\n        numToRead = Math.min(numToRead, available());\n\n        // Read bytes from the underlying input stream\n        int bytesRead = is.read(buf, offset, numToRead);\n        \n        // Check if the underlying stream reached EOF prematurely\n        if (bytesRead == -1) {\n            // We should not hit EOF before entryOffset >= entrySize\n            if (entrySize > entryOffset) {\n                throw new IOException(\"Truncated TAR archive: Expected \" + entrySize\n                                     + \" bytes, but only found \" + entryOffset\n                                     + \" bytes in entry \" + currEntry.getName());\n            }\n            // If entrySize == entryOffset, it means we just reached the logical end,\n            // which should have been caught by the initial check.\n            // However, if we somehow read exactly up to the end and the underlying stream\n            // also ends, we signal the logical EOF.\n            // Note: The initial check (entryOffset >= entrySize) handles the normal EOF case.\n            // Getting -1 here strongly implies truncation.\n            // Let's be strict and always throw if is.read returns -1 unexpectedly.\n             throw new IOException(\"Truncated TAR archive: Expected \" + entrySize\n                                  + \" bytes, but only found \" + entryOffset\n                                  + \" bytes in entry \" + currEntry.getName());\n            // The hasHitEOF flag becomes largely unnecessary with this exception logic.\n        }\n        // else bytesRead >= 0\n\n        // Update the count of bytes read from the underlying stream\n        count(bytesRead);\n\n        // Update the offset within the current entry\n        entryOffset += bytesRead;\n\n        // Return the number of bytes actually read in this call\n        return bytesRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}