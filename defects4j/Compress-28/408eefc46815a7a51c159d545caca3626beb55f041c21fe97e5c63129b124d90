{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n\n        // Check 1: Entry already finished or underlying EOF hit previously?\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        // Check 2: Valid state?\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // Determine max bytes to read for this call (limited by entry size)\n        // Make sure we do not read beyond the entry size\n        int numToReadNow = Math.min(numToRead, available());\n\n        // Perform the read from the underlying stream\n        int bytesRead = is.read(buf, offset, numToReadNow);\n\n        if (bytesRead == -1) { // Underlying stream hit EOF\n            hasHitEOF = true;\n            // Check for truncation: Did EOF happen before entry was fully read?\n            // If numToReadNow > 0, it implies available() > 0, meaning entryOffset < entrySize.\n            if (numToReadNow > 0) {\n                 // We requested bytes (numToReadNow > 0), but got EOF (-1).\n                 // This means the underlying stream ended prematurely before the entry's content was fully read.\n                 throw new IOException(\"Truncated TAR archive: Entry '\" + currEntry.getName()\n                         + \"' reached EOF before reading \" + entrySize + \" bytes.\");\n            }\n            // If numToReadNow was 0, it means available() was 0 (entryOffset >= entrySize).\n            // Getting -1 from is.read() is acceptable in this case, it just confirms EOF.\n            // Return -1 to signal end of entry data stream.\n            // The initial check (entryOffset >= entrySize) handles subsequent calls.\n            return -1;\n        }\n\n        // Successfully read bytes (bytesRead >= 0)\n        if (bytesRead > 0) {\n            count(bytesRead); // Update statistics from CompressedInputStream\n            entryOffset += bytesRead; // Update position within the current entry data\n        }\n        // else if bytesRead == 0: Nothing was read (e.g., numToReadNow was 0). Correctly return 0.\n\n        return bytesRead; // Return the number of bytes actually read in this call\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}