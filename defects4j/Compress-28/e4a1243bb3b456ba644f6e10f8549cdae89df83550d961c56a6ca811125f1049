{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n        // Check if the entry is finished or we already hit EOF on the underlying stream\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // Clamp the number of bytes to read to the remaining size of the current entry\n        numToRead = Math.min(numToRead, available());\n\n        // If available() returned 0, it means entryOffset == entrySize.\n        // The check at the beginning should have caught this, but return -1 to be safe.\n        if (numToRead == 0) {\n            return -1;\n        }\n\n        // Read from the underlying input stream\n        int bytesRead = is.read(buf, offset, numToRead);\n        \n        // Check the result of the read operation\n        if (bytesRead == -1) {\n            // The underlying stream returned EOF.\n            // Check if we expected more bytes for the current entry.\n            if (available() > 0) {\n                // Unexpected EOF: Throw an exception indicating truncation.\n                throw new IOException(\"Truncated TAR archive: Expected \" + entrySize\n                                      + \" bytes, but underlying stream returned EOF at \" + entryOffset\n                                      + \" bytes for entry \" + currEntry.getName());\n            }\n            // EOF occurred exactly at the end of the entry (or when 0 bytes requested).\n            // Mark that the underlying stream has hit EOF.\n            hasHitEOF = true;\n            // Return -1 to signal EOF for this read operation on the current entry.\n        } else {\n            // Successfully read some bytes (bytesRead >= 0).\n            // Update the count of bytes read from the stream (for limiting, etc.).\n            count(bytesRead);\n            // Update the offset within the current entry.\n            entryOffset += bytesRead;\n        }\n\n        return bytesRead; // Return the number of bytes actually read, or -1 if EOF was reached expectedly.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}