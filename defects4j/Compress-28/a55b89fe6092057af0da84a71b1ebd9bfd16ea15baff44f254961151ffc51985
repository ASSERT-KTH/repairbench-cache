{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n    \tint totalRead = 0;\n\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // Limit numToRead to the remaining bytes in the current entry.\n        // available() method returns (entrySize - entryOffset) for the current entry.\n        final int bytesToReadInThisCall = Math.min(numToRead, available());\n        \n        // If there are no bytes left to read for this entry, or numToRead was 0,\n        // return 0 as per InputStream contract for read(..., 0)\n        if (bytesToReadInThisCall == 0) {\n            return 0;\n        }\n\n        totalRead = is.read(buf, offset, bytesToReadInThisCall);\n        \n        if (totalRead == -1) {\n            // The underlying stream hit EOF.\n            // If the current entry is not yet complete according to its declared size,\n            // then it's a truncated entry and we should throw an IOException.\n            if (entryOffset < entrySize) {\n                throw new IOException(\"Truncated TAR entry '\" + currEntry.getName()\n                                      + \"'. Expected \" + entrySize\n                                      + \" bytes, got \" + entryOffset + \" before EOF.\");\n            }\n            hasHitEOF = true; // Mark the underlying stream as EOFed.\n        } else {\n            // We read some bytes.\n            // If 'totalRead' is less than 'bytesToReadInThisCall', it means the underlying stream\n            // provided fewer bytes than requested, even though 'bytesToReadInThisCall' was already\n            // capped by the remaining size of the current entry. This indicates truncation.\n            if (totalRead < bytesToReadInThisCall) {\n                // This condition implicitly means entryOffset + totalRead < entrySize\n                // because bytesToReadInThisCall was Math.min(numToRead, entrySize - entryOffset).\n                throw new IOException(\"Truncated TAR entry '\" + currEntry.getName()\n                                      + \"'. Expected \" + entrySize\n                                      + \" bytes, got \" + (entryOffset + totalRead)\n                                      + \" after partial read.\");\n            }\n            entryOffset += totalRead;\n        }\n\n        count(totalRead); // This method counts total bytes read from the underlying stream\n        \n        return totalRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}