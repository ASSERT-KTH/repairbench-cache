{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n    \tint totalRead = 0;\n\n        // If overall stream has hit EOF or current entry is completely read, return -1.\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        // If no current entry is set, it's an illegal state.\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // Determine the actual number of bytes to read for this call,\n        // limited by the caller's request and the remaining bytes in the current entry.\n        // entrySize is long, so cast (entrySize - entryOffset) to int as numToRead is int.\n        // It's safe because numToRead (and thus the result of Math.min) cannot exceed Integer.MAX_VALUE.\n        final int bytesToReadInThisCall = (int) Math.min(numToRead, entrySize - entryOffset);\n\n        // If no bytes are expected to be read (e.g., caller asked for 0, or entry is technically finished), return 0.\n        if (bytesToReadInThisCall == 0) {\n            return 0;\n        }\n\n        // Read bytes from the underlying input stream.\n        totalRead = is.read(buf, offset, bytesToReadInThisCall);\n        \n        // Handle the result of the read operation.\n        if (totalRead == -1) {\n            // The underlying stream returned EOF.\n            // This indicates a truncated entry if we still expected more bytes for the current entry.\n            if (entryOffset < entrySize) {\n                throw new IOException(\"Truncated TAR entry '\" + currEntry.getName() + \"' - expected \" + entrySize + \" bytes, got \" + entryOffset + \" bytes\");\n            }\n            // If totalRead is -1 but the entry was conceptually complete (entryOffset >= entrySize),\n            // it means the overall stream has reached its end.\n            hasHitEOF = true;\n        } else {\n            // Successfully read some bytes. Update the offset within the current entry.\n            entryOffset += totalRead;\n        }\n\n        // Update the total bytes read from the underlying archive.\n        // The 'count' method typically handles -1 by not adding to the count.\n        count(totalRead);\n        \n        return totalRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}