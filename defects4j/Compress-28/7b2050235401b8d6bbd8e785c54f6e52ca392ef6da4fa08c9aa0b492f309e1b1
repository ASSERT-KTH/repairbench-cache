{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error, includingpremature termination of the stream\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n\n        // Check if we are already at the end of the entry or the stream\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // Determine actual number of bytes to read (limited by entry size)\n        numToRead = Math.min(numToRead, available());\n\n        // Read from the underlying stream\n        int bytesRead = is.read(buf, offset, numToRead);\n\n        if (bytesRead == -1) {\n            // Underlying stream reached EOF.\n            hasHitEOF = true; // Mark stream EOF\n\n            // Check if the entry was fully read. Since we passed the initial check (entryOffset < entrySize),\n            // if available() > 0 here, it means EOF was unexpected.\n            if (available() > 0) { // Check if more bytes were expected for this entry\n                 throw new IOException(\"Truncated TAR archive: Entry '\" + currEntry.getName()\n                                     + \"' resulted in EOF before full entry size of \"\n                                     + entrySize + \" bytes was read.\");\n            }\n            // If available() is 0, it means EOF occurred exactly at the entry boundary.\n            // Return -1 to signal end of this entry's stream.\n        } else {\n            // Successfully read some bytes\n            count(bytesRead); // Update statistics\n            entryOffset += bytesRead; // Update position within entry\n        }\n\n        // Return the number of bytes read, or -1 if EOF was reached (either cleanly or detected above)\n        return bytesRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}