{
    "generation": "    /**\n     * Reads bytes from the current tar archive entry.\n     *\n     * This method is aware of the boundaries of the current\n     * entry in the archive and will deal with them as if they\n     * were this stream's start and EOF.\n     *\n     * @param buf The buffer into which to place bytes read.\n     * @param offset The offset at which to place bytes read.\n     * @param numToRead The number of bytes to read.\n     * @return The number of bytes read, or -1 at EOF.\n     * @throws IOException on error\n     */\n    @Override\n    public int read(byte[] buf, int offset, int numToRead) throws IOException {\n    \tint totalRead = 0;\n\n        // If EOF has been hit or the current entry has been fully read, return -1.\n        if (hasHitEOF || entryOffset >= entrySize) {\n            return -1;\n        }\n\n        if (currEntry == null) {\n            throw new IllegalStateException(\"No current tar entry\");\n        }\n\n        // Limit the number of bytes to read to the remaining bytes in the current entry.\n        // `available()` typically returns `entrySize - entryOffset`.\n        // This ensures `numToRead` is 0 if `entryOffset == entrySize` (handled by the first `if`)\n        // or positive if `entryOffset < entrySize`.\n        numToRead = Math.min(numToRead, available());\n        \n        // Read from the underlying stream.\n        totalRead = is.read(buf, offset, numToRead);\n        count(totalRead);\n        \n        if (totalRead == -1) {\n            // The underlying stream has indicated EOF.\n            // Since we ensured `numToRead` was > 0 (because `entryOffset < entrySize`\n            // when `is.read` was called), if `is.read` returns -1, it means the\n            // tar entry is truncated because the underlying data ended prematurely.\n            throw new IOException(\"Truncated TAR entry '\"\n                                  + currEntry.getName()\n                                  + \"': expected \" + entrySize\n                                  + \" bytes, got \" + entryOffset);\n        } else {\n            // Update the offset within the current entry.\n            entryOffset += totalRead;\n        }\n\n        return totalRead;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}