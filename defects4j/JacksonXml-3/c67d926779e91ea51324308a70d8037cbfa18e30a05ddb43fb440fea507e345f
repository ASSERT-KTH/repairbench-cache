{
    "generation": "    /**\n     * Method overridden to support more reliable deserialization of\n     * String collections.\n     */\n    @Override\n    public String nextTextValue() throws IOException\n    {\n        _binaryValue = null;\n        if (_nextToken != null) {\n            JsonToken t = _nextToken;\n            _currToken = t;\n            _nextToken = null;\n\n            // expected case; yes, got a String\n            if (t == JsonToken.VALUE_STRING) {\n                // 29-Jun-2020, tatu: Need to ensure `getText()` would also work\n                _currText = _xmlTokens.getText();\n                return _currText;\n            }\n            _updateState(t);\n            return null;\n        }\n\n        int token = _xmlTokens.next();\n\n        // mostly copied from 'nextToken()'\n        while (token == XmlTokenStream.XML_START_ELEMENT) {\n            // If we thought it might be leaf, it wasn't\n            if (_mayBeLeaf) {\n                 // If we thought it might be leaf, but wasn't, need to change type\n                 // to START_OBJECT first\n                 // For structured type, need to generate START_OBJECT first\n                _nextToken = JsonToken.FIELD_NAME;\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                _currToken = JsonToken.START_OBJECT;\n                 // Should not return anything, indicate start of structure:\n                return null;\n            }\n            if (_parsingContext.inArray()) {\n                // Ok: just need to skip the surrounding element, if any\n                token = _xmlTokens.next();\n                _mayBeLeaf = true; // yup, could be leaf now\n                continue;\n            }\n\n            // Otherwise, regular FIELD_NAME case\n            String name = _xmlTokens.getLocalName();\n            _parsingContext.setCurrentName(name);\n\n            // Ok: is it potentially wrapped?\n            if (_namesToWrap != null && _namesToWrap.contains(name)) {\n                // Yup: need to repeat the START_ELEMENT\n                _xmlTokens.repeatStartElement();\n            }\n\n            _mayBeLeaf = true;\n            _currToken = JsonToken.FIELD_NAME;\n            // Even if it's FIELD_NAME, still not returning text value\n            return null;\n        }\n\n        // Ok; beyond start element, what do we get?\n        switch (token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            // If we encounter END_ELEMENT, we may have missing (\"empty\") text value;\n            // Nastiest part here is that of possibly needing implicitly START_OBJECT,\n            // mostly to make Lists of structured types work. Specifically, need to\n            // generate implicit START_OBJECT for <Foos><Foos> type structuress\n            if (_mayBeLeaf) {\n                // NOTE: this is different from nextToken() -- produce \"\", NOT null\n                _mayBeLeaf = false;\n                _currToken = JsonToken.VALUE_STRING;\n                // 29-Jun-2020, tatu: Need to ensure `getText()` would also work\n                _currText = \"\";\n                return \"\";\n            }\n            _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext = _parsingContext.getParent();\n            _namesToWrap = _parsingContext.getNamesToWrap();\n            break;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            // If there was a chance of leaf node, no more...\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                _nextToken = JsonToken.FIELD_NAME;\n                // We don't really have location for START_OBJECT, use current point\n                // 29-Jun-2020, tatu: Need to ensure `getText()` would also work\n                _currText = _xmlTokens.getText();\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n                _currToken = JsonToken.START_OBJECT;\n            } else {\n                // otherwise just a FIELD_NAME\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                _currToken = JsonToken.FIELD_NAME;\n            }\n            break;\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText = _xmlTokens.getText();\n            _currToken = JsonToken.VALUE_STRING;\n            // This is the case we are hoping for! Return the value\n            return _currText;\n        case XmlTokenStream.XML_TEXT:\n            _currText = _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf = false;\n                // Also: must skip following END_ELEMENT\n                _xmlTokens.skipEndElement();\n\n                // NOTE: this is different from nextToken() -- NO work-around\n                // for otherwise empty List/array\n                _currToken = JsonToken.VALUE_STRING;\n                return _currText;\n            }\n            // If not a leaf, need to transform into property...\n            // unless we are skipping expected empty text:\n            if (_currText.trim().isEmpty()) {\n                 _nextToken = null; // to indicate we are NOT returning FIELD_NAME, just VALUE_STRING\n                 _currToken = JsonToken.VALUE_STRING;\n                 return _currText;\n            }\n\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken = JsonToken.VALUE_STRING;\n            _currToken = JsonToken.FIELD_NAME;\n            break;\n        case XmlTokenStream.XML_END: // virtual token\n            _currToken = null;\n            close();\n        }\n        // Should not get here really... ?\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}