{
    "generation": "    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // Check for native type id first\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        // Check if _typeId is visible and current token is START_OBJECT\n        if (_typeIdVisible) {\n            if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n                throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                        \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \" + baseTypeName());\n            }\n        } else {\n            // Skip checking for START_OBJECT if _typeId is not visible\n            p.nextToken();\n        }\n\n        if (_typeIdVisible) {\n            // Ensure next token is FIELD_NAME\n            if (p.nextToken() != JsonToken.FIELD_NAME) {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"need JSON String containing type id for subtype of \" + baseTypeName());\n            }\n            final String typeId = p.getText();\n            JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n            p.nextToken();\n\n            // Process type information if necessary\n            if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n                TokenBuffer tb = new TokenBuffer(null, false);\n                tb.writeStartObject();\n                tb.writeFieldName(_typePropertyName);\n                tb.writeString(typeId);\n                p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n                p.nextToken();\n            }\n            return deser.deserialize(p, ctxt);\n        }\n\n        // Handle case where no type information is expected\n        final String typeId = p.getValueAsString();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        return deser.deserialize(p, ctxt);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}