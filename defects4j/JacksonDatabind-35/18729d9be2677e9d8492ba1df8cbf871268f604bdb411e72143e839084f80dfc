{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        // Problem may be JsonParser positioning: let's verify that we are seeing\n        // START_OBJECT or FIELD_NAME\n        JsonToken t = p.currentToken();\n        if (t == JsonToken.START_OBJECT) {\n            // If START_OBJECT, next token must be FIELD_NAME\n            t = p.nextToken();\n        } else if (t != JsonToken.FIELD_NAME) {\n            // Report error if not START_OBJECT or FIELD_NAME\n            // Note: Stronger check would be to require START_OBJECT only. But for now\n            // let's be more lenient, works reported problem.\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT, // Still conceptually START_OBJECT is wrapper token\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName()\n                    +\" (but got \"+t+\")\");\n        }\n        // If we get this far, token is FIELD_NAME, no problems yet\n        \n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        // And then need to advance parser to point to the value:\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        // 10-Jun-2015, tatu: As per [databind#826], should allow merging\n        //   type id even if value is not OBJECT.\n        if (_typeIdVisible && p.currentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            // Simple case first: value is OBJECT\n            TokenBuffer tb = new TokenBuffer(p, ctxt); // Pass p, ctxt; needed for context actually\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            \n            // Ok, then, merge buffer sequence with parser\n            // 13-Sep-2020, tatu: Needed to pass `false` to prevent auto-closing problems\n            p = JsonParserSequence.createFlattened(false, tb.asParser(p), p);\n            // and move past START_OBJECT from buffer\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        \n        // And then need the closing END_OBJECT\n        JsonToken endToken = p.nextToken();\n        if (endToken != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value (got \"+endToken+\")\");\n        }\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}