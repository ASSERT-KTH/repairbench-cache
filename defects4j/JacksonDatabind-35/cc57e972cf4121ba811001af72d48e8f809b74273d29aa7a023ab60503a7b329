{
    "generation": "@SuppressWarnings(\"resource\")\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n\n    JsonToken t = p.getCurrentToken();\n\n    // Accept FIELD_NAME (possible if reading into existing POJO w/ object id)\n    if (t == JsonToken.START_OBJECT) {\n        t = p.nextToken();\n    }\n    if (t != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n    }\n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n\n    p.nextToken();\n\n    // Minor complication: we may need to merge type id in?\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject();\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n    \n    Object value = deser.deserialize(p, ctxt);\n\n    // 09-Oct-2023, tatu: When we skipped original START_OBJECT, must consume matching END_OBJECT\n    if (p.getCurrentToken() == JsonToken.END_OBJECT) {\n        p.nextToken();\n    } else if (p.nextToken() != JsonToken.END_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                \"expected closing END_OBJECT after type information and deserialized value\");\n    }\n    return value;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}