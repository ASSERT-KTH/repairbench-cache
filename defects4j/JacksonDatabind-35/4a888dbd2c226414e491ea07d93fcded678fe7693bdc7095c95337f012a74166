{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n        // first, sanity checks\n        if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n            // should always get field name, but just in case...\n            if (p.nextToken() != JsonToken.FIELD_NAME) {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n            }\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        \n        // Save the original parser state before advancing it,\n        // as 'p' might be reassigned to a new parser in the _typeIdVisible block,\n        // but the final END_OBJECT check refers to the original wrapper structure.\n        JsonParser originalParser = p; \n\n        p.nextToken(); // p is now at START_OBJECT of the actual value\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // 'p' is currently at the START_OBJECT of the actual value (e.g., {\"id\":\"computer-1\", ...}).\n            // We need to inject the type ID field (e.g., \"type\":\"DesktopComputer\") into this object.\n            \n            // Create a TokenBuffer to build the modified object's JSON stream.\n            TokenBuffer outputBuffer = new TokenBuffer(p, ctxt);\n            \n            // Write the START_OBJECT for the combined object\n            outputBuffer.writeStartObject(); \n            // Write the injected type property\n            outputBuffer.writeFieldName(_typePropertyName);\n            outputBuffer.writeString(typeId);\n            \n            // Now, copy the contents of the original object (excluding its START_OBJECT and END_OBJECT).\n            // This consumes tokens from the original parser 'p'.\n            p.nextToken(); // Move past the original START_OBJECT token.\n            while (p.getCurrentToken() != null && p.getCurrentToken() != JsonToken.END_OBJECT) {\n                outputBuffer.copyCurrentEvent(p); // Copy current event (field name or value)\n                p.nextToken(); // Move to the next token\n            }\n            // At this point, 'p' (original parser) is at the END_OBJECT of the actual value.\n\n            // Write the END_OBJECT for the combined object.\n            outputBuffer.writeEndObject(); \n            \n            // Replace 'p' with a new parser that reads from the TokenBuffer.\n            // This new 'p' will be positioned at START_OBJECT.\n            p = outputBuffer.asParser();\n            // Do NOT call p.nextToken() here; 'deser.deserialize' expects 'p' to be at START_OBJECT.\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n\n        // And then need the closing END_OBJECT of the original wrapper.\n        // The originalParser now points to the END_OBJECT of the wrapped value,\n        // and needs to advance one more time to reach the END_OBJECT of the outer wrapper.\n        if (originalParser.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(originalParser, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}