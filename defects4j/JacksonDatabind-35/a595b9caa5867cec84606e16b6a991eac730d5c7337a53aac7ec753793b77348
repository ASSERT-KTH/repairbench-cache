{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n        // first, sanity checks\n        if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n\n        String typeId = null;\n        JsonDeserializer<Object> deser = null;\n\n        while (true) {\n            JsonToken t = p.nextToken();\n            if (t == JsonToken.FIELD_NAME) {\n                String currentName = p.getText();\n                try {\n                    deser = _findDeserializer(ctxt, currentName);\n                    typeId = currentName;\n                    break;\n                } catch (IllegalArgumentException e) {\n                    // Not a valid typeId, skip this field and its value\n                    p.nextToken();\n                    p.skipChildren();\n                }\n            } else if (t == JsonToken.END_OBJECT) {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"Could not find type id (as FIELD_NAME) in wrapper object for class \"+baseTypeName());\n            } else {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"Unexpected token (\" + t + \"), expected FIELD_NAME or END_OBJECT in wrapper object\");\n            }\n        }\n\n        p.nextToken(); // Move to the value of the typeId field\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}