{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        // first, sanity checks\n        if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n            p.nextToken();\n        }\n\n        if (p.getCurrentToken() != JsonToken.FIELD_NAME) {\n            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                    \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n        }\n\n        final String typeId = p.getText();\n        p.nextToken(); // Move to the value associated with the field name\n\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n\n        Object value = deser.deserialize(p, ctxt);\n\n        // If we are not at the end of the object, consume the rest of the tokens\n        while (p.nextToken() != JsonToken.END_OBJECT) {\n            // Do nothing, just consume the tokens\n        }\n\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}