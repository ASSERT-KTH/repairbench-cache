{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        // Before strict START_OBJECT check, handle potential ObjectId as FIELD_NAME\n        // This addresses cases where the TypeDeserializer might be invoked on a FIELD_NAME\n        // that's recognized as an ObjectId reference (e.g. from an outer context).\n        // This is necessary because As.WRAPPER_OBJECT expects START_OBJECT, but ObjectId\n        // can sometimes lead to different initial tokens.\n        if (_objectIdReader != null) {\n            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {\n                if (_objectIdReader.propertyName.getSimpleName().equals(p.getCurrentName())) {\n                    return _deserializeWithObjectId(p, ctxt);\n                }\n            }\n        }\n\n        // first, sanity checks\n        if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n\n        // Advance to the next token, which should be the FIELD_NAME (type id or object id property)\n        JsonToken t = p.nextToken();\n\n        // Check if the current token is a FIELD_NAME and if it's the ObjectId property\n        if (t == JsonToken.FIELD_NAME) {\n            String propName = p.getCurrentName();\n            if (_objectIdReader != null && propName.equals(_objectIdReader.propertyName.getSimpleName())) {\n                // It's an ObjectId reference: handle it!\n                // The parser is currently at the FIELD_NAME for the ObjectId property.\n                return _deserializeWithObjectId(p, ctxt);\n            }\n            // If not an ObjectId property, it must be the type property name\n            final String typeId = propName;\n            JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n            p.nextToken(); // Advance to the actual value token (START_OBJECT for the value)\n\n            // Minor complication: we may need to merge type id in?\n            if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n                TokenBuffer tb = new TokenBuffer(p, ctxt); // Use p for context\n                tb.writeStartObject(); // recreate START_OBJECT\n                tb.writeFieldName(_typePropertyName);\n                tb.writeString(typeId);\n                p.getCurrentToken(); // should still be START_OBJECT of the inner object\n                p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n                p.nextToken(); // Move to the first field of the original inner object\n            }\n            \n            Object value = deser.deserialize(p, ctxt);\n\n            // And then need the closing END_OBJECT of the type wrapper\n            if (p.nextToken() != JsonToken.END_OBJECT) {\n                throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                        \"expected closing END_OBJECT after type information and deserialized value\");\n            }\n            return value;\n        }\n\n        // If after START_OBJECT, the next token is not FIELD_NAME, it's an error.\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}