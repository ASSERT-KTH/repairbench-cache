{
    "generation": "    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        // 1) native type-id?\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n        // 2) if we're at a FIELD_NAME, assume we are already inside the wrapper\n        //    (e.g. @JsonIdentityInfo may have moved us here), so fall through\n        //    to subtype lookup\n        if (p.getCurrentToken() != JsonToken.START_OBJECT\n            && p.getCurrentToken() != JsonToken.FIELD_NAME)\n        {\n            // none of the above: must have a wrapper-object\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"\n                    +baseTypeName());\n        }\n        // if we really saw START_OBJECT, advance into it\n        if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n            if (p.nextToken() != JsonToken.FIELD_NAME) {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"need JSON String that contains type id (for subtype of \"\n                        +baseTypeName()+\")\");\n            }\n        }\n        // now CURRENT is FIELD_NAME (the type id)\n        String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        // move to the value (either start of object or next field)\n        JsonToken t = p.nextToken();\n\n        // if we are to expose the type id as a property and we see a START_OBJECT,\n        // insert the type field first\n        if (_typeIdVisible && t == JsonToken.START_OBJECT) {\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject();\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            // stitch our buffer ahead of the real parser\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken(); // to get into the actual bean\n        }\n\n        // delegate to actual deserializer\n        Object value = deser.deserialize(p, ctxt);\n\n        // after consuming the bean, expect to close the wrapper if we opened one\n        if (p.getCurrentToken() == JsonToken.END_OBJECT) {\n            // we're still inside the bean's own END_OBJECT => consume one more\n            p.nextToken();\n        }\n        if (p.getCurrentToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}