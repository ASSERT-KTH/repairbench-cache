{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        // As per [databind#445], possible type ids are JsonToken.START_OBJECT (standard)\n        // and JsonToken.FIELD_NAME (when called from certain places, like TypeDeserializerBase._deserializeWithNativeTypeId)\n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.START_OBJECT) {\n            // If START_OBJECT, move to FIELD_NAME\n            t = p.nextToken();\n        } else if (t != JsonToken.FIELD_NAME) {\n            // If not START_OBJECT or FIELD_NAME, it's an error\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n        // We must be pointing to FIELD_NAME now\n        if (t != JsonToken.FIELD_NAME) {\n             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n        }\n\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        p.nextToken(); // consume FIELD_NAME, move to value\n\n        // Minor complication: we may need to merge type id in? And merge works\n        // for START_OBJECT based values only...\n        // 17-Jan-2018, tatu: As per [databind#1832], need bit more sophisticated handling\n        //    in case of merging. Specific problem is that the existing value might be\n        //    JSON Array or scalar, inside of JSON Object wrapper\n        if (_typeIdVisible && t == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            // NOTE: relying on existence of this feature on JsonParser implementation\n            // (Jackson core specifically supports it)\n            // 13-Aug-2018, tatu: [databind#2140] Need ObjectCodec context\n            TokenBuffer tb = new TokenBuffer(p, ctxt);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n\n            // 01-Jul-2016, tatu: Unfortunate complication; we could be using a\n            //   BufferingJsonParser instance... Also: must NOT skip START_OBJECT...\n            // related to [databind#1241], [databind#1256]\n            p.clearCurrentToken();\n            p = JsonParserSequence.createFlattened(false, tb.asParser(p), p);\n\n            // And then advance to the actual value\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        \n        // And then need the closing END_OBJECT\n        // 17-Jan-2018, tatu: As per [databind#1832], need to allow for possibility of merge,\n        //    in which case we don't get closing END_OBJECT. Rather, verify that there's no more\n        //    content within wrapper OBJECT. Leave actual verification up to caller.\n        //    Need to just verify we are now outside of structure:\n        JsonToken T2 = p.nextToken();\n        if (T2 != JsonToken.END_OBJECT) {\n            // BUT, let's consider possibility of trailing merge data? Or should we require exactly END_OBJECT?\n            // For now, require END_OBJECT\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}