{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // Check for native type ids first\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n        // Ensure we're starting at the correct token\n        if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \" + baseTypeName());\n        }\n\n        String typeId = null;\n        JsonDeserializer<Object> deser = null;\n\n        // Iterate through fields to find the valid type id\n        while (p.nextToken() == JsonToken.FIELD_NAME) {\n            String currentName = p.getText();\n            // Check if the current field name corresponds to a known deserializer\n            deser = _findDeserializer(ctxt, currentName);\n            if (deser != null) {\n                typeId = currentName;\n                p.nextToken(); // Move to the value token\n                break;\n            }\n            // Skip the value if it's not the type id field\n            p.nextToken();\n            p.skipChildren();\n        }\n\n        if (typeId == null) {\n            throw ctxt.mappingException(\"Could not find a valid type id field in the wrapper object for \" + baseTypeName());\n        }\n\n        // Merge type id if necessary\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject();\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n\n        Object value = deser.deserialize(p, ctxt);\n\n        // Ensure we consume the remaining tokens to reach END_OBJECT\n        while (p.nextToken() != JsonToken.END_OBJECT) {\n            p.skipChildren();\n        }\n\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}