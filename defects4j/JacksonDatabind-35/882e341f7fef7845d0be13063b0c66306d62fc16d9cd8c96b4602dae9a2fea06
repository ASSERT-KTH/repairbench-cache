{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        // Handle As.WRAPPER_OBJECT. Expected structure: { typeId: value }\n        // Or, potentially, FIELD_NAME(typeId) if START_OBJECT was consumed externally (e.g. by ObjectIdReader)\n        JsonToken t = p.currentToken();\n        String typeId = null;\n\n        // If START_OBJECT, consume it and expect FIELD_NAME\n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n\n        // We must now be pointing to FIELD_NAME\n        if (t != JsonToken.FIELD_NAME) {\n             // If not START_OBJECT or FIELD_NAME, report error pointing to the expected START_OBJECT for wrapper\n             if (t == JsonToken.START_ARRAY) { // More specific error for common mistake\n                 throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                         \"Cannot deserialize Class \"+baseTypeName()+\" from JSON Array as it uses 'As.WRAPPER_OBJECT' structure\");\n             }\n             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT, // Or FIELD_NAME, but START_OBJECT is the wrapper entry\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n        // Now we know it's FIELD_NAME; use it as type id\n        typeId = p.getCurrentName();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n\n        // Advance past the type id field name to the value\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        // Check if type-id needs to be visible AND value is an object\n        if (_typeIdVisible && p.currentToken() == JsonToken.START_OBJECT) {\n            // Ok, value is OBJECT, need to prepend injected type id:\n            // 1. Create buffer with type id property { \"property\" : \"typeId\" }\n            TokenBuffer tb = new TokenBuffer(p, ctxt); // Pass p, ctxt for settings/features\n            tb.writeStartObject();                  // {\n            tb.writeFieldName(_typePropertyName);   //   \"typeIdFieldName\" :\n            tb.writeString(typeId);                 //   \"typeIdValue\"\n            // tb implicitly finishes with END_OBJECT when tb.asParser() is called.\n\n            // 2. Create a parser for the buffer:\n            JsonParser bufferedParser = tb.asParser(p); // Pass original parser for context\n            // Need to prime the buffered parser\n            bufferedParser.nextToken(); // Consume START_OBJECT from buffer\n\n            // 3. Create sequence using the original 'flatten' logic if appropriate.\n            //    Pass `true` to enable flattening of START_OBJECT from buffer and START_OBJECT from original 'p'.\n            p = JsonParserSequence.createFlattened(true, bufferedParser, p);\n\n            // 4. Advance the combined parser past the START_OBJECT to the first token (injected field name)\n            p.nextToken(); // Move to the injected FIELD_NAME\n        }\n\n        // Deserialize the value using the (potentially sequenced) parser\n        Object value = deser.deserialize(p, ctxt);\n\n        // And then need the closing END_OBJECT of the wrapper object\n        JsonToken endToken = p.nextToken();\n        if (endToken != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value (for \"+baseTypeName()+\")\");\n        }\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}