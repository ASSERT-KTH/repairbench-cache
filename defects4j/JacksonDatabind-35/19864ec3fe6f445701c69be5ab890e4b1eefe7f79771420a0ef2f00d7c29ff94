{
    "generation": "@SuppressWarnings(\"resource\")\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    // Check for native type id first\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    \n    // Check for START_OBJECT\n    if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \" + baseTypeName());\n    }\n    \n    // Move to the next token which should be FIELD_NAME (type id)\n    if (p.nextToken() != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n    }\n    \n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    \n    // Move to the next token which should be the value\n    p.nextToken();\n    \n    // If type id is visible, wrap type info into the structure\n    if (_typeIdVisible) {\n        if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject();\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n    }\n    \n    // Deserialize the value\n    Object value = deser.deserialize(p, ctxt);\n    \n    // Ensure the closing END_OBJECT is next\n    if (p.nextToken() != JsonToken.END_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                \"expected closing END_OBJECT after type information and deserialized value\");\n    }\n    \n    return value;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}