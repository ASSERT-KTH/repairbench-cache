{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n        \n        JsonToken t = p.getCurrentToken();\n        final String typeId;\n        boolean consumedOuterObjectStart; // Flag to indicate if outer START_OBJECT was consumed by THIS method\n\n        // Standard As.WRAPPER_OBJECT expects START_OBJECT.\n        // However, in some cases (e.g., interaction with ObjectId), the START_OBJECT\n        // might already have been consumed, and the parser is at FIELD_NAME (type ID).\n        if (t == JsonToken.START_OBJECT) {\n            consumedOuterObjectStart = true;\n            // For WRAPPER_OBJECT, after START_OBJECT, we expect a FIELD_NAME which is the type id.\n            if (p.nextToken() != JsonToken.FIELD_NAME) {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n            }\n            typeId = p.getText();\n        } else if (t == JsonToken.FIELD_NAME) {\n            // This path indicates the outer START_OBJECT was consumed before this method call.\n            // This method should then not consume the corresponding END_OBJECT.\n            consumedOuterObjectStart = false;\n            typeId = p.getText();\n        } else {\n            // For As.WRAPPER_OBJECT, we must always start with START_OBJECT or FIELD_NAME (if START_OBJECT was consumed).\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n        \n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        \n        // Advance past the type id field name (if we just read it) to the actual object content.\n        // This token should be the START_OBJECT of the actual value.\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        \n        // And then need the closing END_OBJECT\n        // This check is only valid if this method consumed the initial START_OBJECT of the wrapper.\n        if (consumedOuterObjectStart) {\n            if (p.nextToken() != JsonToken.END_OBJECT) {\n                throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                        \"expected closing END_OBJECT after type information and deserialized value\");\n            }\n        }\n        return value;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}