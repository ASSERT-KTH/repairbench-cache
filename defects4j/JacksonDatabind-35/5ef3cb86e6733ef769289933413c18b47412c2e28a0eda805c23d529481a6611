{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        String typeId;\n        JsonToken t = p.getCurrentToken();\n\n        // [databind#1492]: May sometimes start with FIELD_NAME, not START_OBJECT\n        if (t == JsonToken.START_OBJECT) { // Normal expected case for WRAPPER_OBJECT\n            // After START_OBJECT, next token must be FIELD_NAME (type ID)\n            t = p.nextToken();\n            if (t != JsonToken.FIELD_NAME) {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n            }\n            typeId = p.getText();\n        } else if (t == JsonToken.FIELD_NAME) { // Case for [databind#1492]: type id already seen\n            typeId = p.getText(); // Current token is already FIELD_NAME, get text directly\n        } else if (t == JsonToken.START_ARRAY) { // 29-May-2020, tatu: [databind#2726] if array, defer\n            return _deserializeIfNatural(p, ctxt, t); // This method should handle advancing the parser\n        } else { // Some other token, e.g., scalar for \"natural\" types\n            return _deserializeIfNatural(p, ctxt, t);\n        }\n        \n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        \n        // After getting the typeId from FIELD_NAME, advance the parser to the actual content (START_OBJECT or scalar)\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        // This is only relevant if the wrapped value is an object itself AND _typeIdVisible is true.\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            TokenBuffer tb = new TokenBuffer(null, false); // Use null, false as codec/stream capabilities not strictly needed for this buffer\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken(); // Advance to first token inside the merged object\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT of the wrapper\n        // The deserializer consumed the content and left the parser at the END_OBJECT of the content.\n        // We need to consume that END_OBJECT and ensure the *next* token is the wrapper's END_OBJECT.\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}