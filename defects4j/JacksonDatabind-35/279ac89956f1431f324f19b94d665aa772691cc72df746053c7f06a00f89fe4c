{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        // first, sanity checks\n        // For WRAPPER_OBJECT, expected structure is: { \"typeId\" : { actual_value } }\n        // The initial token should be START_OBJECT.\n        // However, in some cases (e.g., with ObjectId handling),\n        // the parser might already be at FIELD_NAME, meaning the START_OBJECT has been consumed.\n        final String typeId;\n        JsonToken t = p.getCurrentToken();\n\n        if (t == JsonToken.START_OBJECT) {\n            // Normal case: expect START_OBJECT, then FIELD_NAME (typeId)\n            t = p.nextToken(); // Advance from START_OBJECT to FIELD_NAME\n            if (t != JsonToken.FIELD_NAME) {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n            }\n            typeId = p.getText();\n            p.nextToken(); // Advance from FIELD_NAME to START_OBJECT of actual value\n        } else if (t == JsonToken.FIELD_NAME) {\n            // This case occurs when the START_OBJECT of the wrapper has already been consumed\n            // (e.g., by some ObjectId logic which peeks or consumes it).\n            // The current token is already the FIELD_NAME acting as type ID.\n            typeId = p.getText();\n            p.nextToken(); // Advance from FIELD_NAME to START_OBJECT of actual value\n        } else {\n            // Any other token type is unexpected for a WRAPPER_OBJECT\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n\n        // Minor complication: we may need to merge type id in?\n        // At this point, p.getCurrentToken() should be JsonToken.START_OBJECT (the actual value's start)\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            // This nextToken() consumes the START_OBJECT from the TokenBuffer,\n            // positioning the parser at the inserted FIELD_NAME (_typePropertyName).\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n\n        // And then need the closing END_OBJECT\n        // After deser.deserialize(p, ctxt), the parser should be positioned after the deserialized value,\n        // specifically at the END_OBJECT token that closes the outer wrapper.\n        // The p.nextToken() call here consumes that END_OBJECT and checks if it's correct.\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}