{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n        \n        // Check if we are at the start of the JSON object\n        if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n\n        // If we are at a FIELD_NAME, it might be the type id or the start of the object\n        if (p.getCurrentToken() == JsonToken.FIELD_NAME) {\n            // Check if the field name matches the type property name\n            if (!p.getText().equals(_typePropertyName)) {\n                // If not, assume we are at the start of the object and proceed\n                p.nextToken();\n            }\n        }\n\n        // Now, we should be at the type id field or the start of the object\n        if (p.getCurrentToken() == JsonToken.FIELD_NAME && p.getText().equals(_typePropertyName)) {\n            p.nextToken(); // Move to the type id value\n            final String typeId = p.getText();\n            JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n            p.nextToken(); // Move to the start of the object\n\n            // Handle type id visibility\n            if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n                TokenBuffer tb = new TokenBuffer(null, false);\n                tb.writeStartObject();\n                tb.writeFieldName(_typePropertyName);\n                tb.writeString(typeId);\n                p.nextToken(); // Move to the first field of the object\n                tb.copyCurrentStructure(p);\n                p = tb.asParser(p);\n                p.nextToken();\n            }\n\n            Object value = deser.deserialize(p, ctxt);\n            // Check for the closing END_OBJECT\n            if (p.nextToken() != JsonToken.END_OBJECT) {\n                throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                        \"expected closing END_OBJECT after type information and deserialized value\");\n            }\n            return value;\n        } else {\n            // If we didn't find the type id field, assume the type is the base type\n            JsonDeserializer<Object> deser = _findDeserializer(ctxt, baseTypeName());\n            Object value = deser.deserialize(p, ctxt);\n            return value;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}