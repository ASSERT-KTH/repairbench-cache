{
    "generation": "@SuppressWarnings(\"resource\")\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // In some cases (typically with Object Ids) the parser may already be positioned\n    // at the FIELD_NAME, having had the START_OBJECT token consumed.\n    boolean hadStartObject = false;\n    JsonToken curr = p.getCurrentToken();\n    if (curr == JsonToken.START_OBJECT) {\n        hadStartObject = true;\n        // Advance to the first token within the wrapper object:\n        p.nextToken();\n        curr = p.getCurrentToken();\n    }\n    if (curr != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n    }\n    // Retrieve type id from the current field name\n    final String typeId = p.getCurrentName();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    // Move from FIELD_NAME to the value (i.e. the actual content for the type)\n    p.nextToken();\n\n    // Minor complication: if type id must be merged into the JSON,\n    // and if the value structure is a JSON Object, then do so.\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject(); // re-create START_OBJECT\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n    \n    Object value = deser.deserialize(p, ctxt);\n    // If we consumed a START_OBJECT (i.e. the complete type wrapper),\n    // we now need to ensure it is properly closed.\n    if (hadStartObject) {\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n    }\n    return value;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}