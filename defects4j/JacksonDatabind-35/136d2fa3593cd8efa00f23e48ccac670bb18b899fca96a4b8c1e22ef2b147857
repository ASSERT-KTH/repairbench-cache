{
    "generation": "@SuppressWarnings(\"resource\")\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n        // Check for native type ID\n        Object typeId = null;\n        if (p.canReadTypeId()) {\n            typeId = p.getTypeId();\n        }\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n\n        // Assume we need to look for wrapper type info\n        if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n            // Attempt to see if the next token is FIELD_NAME\n            if (p.nextToken() == JsonToken.FIELD_NAME) {\n                String fieldName = p.getText();\n                if (_typePropertyName.equals(fieldName)) {\n                    p.nextToken();\n                    typeId = p.getText();\n                    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n                    p.nextToken();\n                    Object value = deser.deserialize(p, ctxt);\n                    if (p.nextToken() != JsonToken.END_OBJECT) {\n                        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                                \"expected closing END_OBJECT after type information and deserialized value\");\n                    }\n                    return value;\n                }\n            }\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \" + baseTypeName());\n        }\n\n        // Existing logic for when START_OBJECT is present\n        if (p.nextToken() != JsonToken.FIELD_NAME) {\n            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                    \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n        }\n        final String extractedTypeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, extractedTypeId);\n        p.nextToken();\n\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject();\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(extractedTypeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n\n        Object value = deser.deserialize(p, ctxt);\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}