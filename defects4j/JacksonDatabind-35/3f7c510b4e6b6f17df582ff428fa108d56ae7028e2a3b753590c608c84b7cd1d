{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        // first, sanity checks\n        // Check for START_OBJECT or FIELD_NAME:\n        // Scenario 1: Normal case, starts with START_OBJECT.\n        // Scenario 2: [databind#2342] Allow starting from FIELD_NAME too.\n        JsonToken t = p.getCurrentToken();\n        if (t == JsonToken.START_OBJECT) {\n            // consume START_OBJECT, move to FIELD_NAME\n             t = p.nextToken();\n        } else if (t != JsonToken.FIELD_NAME) {\n            // If not START_OBJECT or FIELD_NAME, it's an error\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n        // Must be FIELD_NAME at this point\n        if (t != JsonToken.FIELD_NAME) {\n             // Should not happen based on checks above, but safeguard.\n             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                    \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n        }\n\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        \n        // And then the value itself; should be START_OBJECT\n        if (p.nextToken() != JsonToken.START_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"expected START_OBJECT after type id '\"+typeId+\"' (for subtype of \"+baseTypeName()+\")\");\n        }\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible /* && p.getCurrentToken() == JsonToken.START_OBJECT -- already checked */) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT? No, injection uses field/value\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            // p is at START_OBJECT of value-object. Create sequence that injects buffer before p's contents\n            // Note: tb.asParser(p) might be problematic; should use codec? Let's keep original logic for now.\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken(); // consume the injected START_OBJECT so parser points to injected FIELD_NAME\n                           // This seems wrong, sequence should yield field/value pairs.\n                           // Original code had p.nextToken() after sequence creation, let's keep it.\n                           // It advances the JsonParserSequence wrapper.\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        \n        // And then need the closing END_OBJECT\n        JsonToken closing = p.nextToken();\n        if (closing != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value (got \"+closing+\")\");\n        }\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}