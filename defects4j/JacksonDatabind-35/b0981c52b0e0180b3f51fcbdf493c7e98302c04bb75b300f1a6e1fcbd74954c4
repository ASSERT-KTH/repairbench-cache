{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n        \n        JsonToken t = p.getCurrentToken();\n        String typeId;\n\n        // As.WRAPPER_OBJECT type information expects:\n        // START_OBJECT (wrapper) -> FIELD_NAME (typeId) -> START_OBJECT (actual value)\n        // However, with ObjectId or complex interactions, the initial START_OBJECT\n        // might have been consumed, leaving the parser at FIELD_NAME.\n        if (t == JsonToken.START_OBJECT) {\n            // Normal path: parser at START_OBJECT of the wrapper object\n            // should always get field name, but just in case...\n            if (p.nextToken() != JsonToken.FIELD_NAME) {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n            }\n            typeId = p.getText();\n            p.nextToken(); // Move to START_OBJECT of the actual value content\n        } else if (t == JsonToken.FIELD_NAME) {\n            // Special case: parser is already at FIELD_NAME, meaning the START_OBJECT\n            // of the wrapper was already consumed (e.g., by ObjectId reader).\n            // This FIELD_NAME is assumed to be the type id.\n            typeId = p.getText();\n            p.nextToken(); // Move to START_OBJECT of the actual value content\n            // Sanity check: after typeId FIELD_NAME, we must see START_OBJECT for the value\n            if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n                throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                        \"expected JSON Object to contain As.WRAPPER_OBJECT value for class \"+baseTypeName());\n            }\n        } else {\n            // Neither START_OBJECT nor FIELD_NAME, which is unexpected for WRAPPER_OBJECT\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}