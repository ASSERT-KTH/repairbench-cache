{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     * Assumes that START_OBJECT wrapper has been consumed and parser is pointing at the\n     * FIELD_NAME that contains type id.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                // Delegate to native handling if possible\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        // Sanity check: verify we have FIELD_NAME, which indicates the type id\n        // This is the token stream state as expected when called via\n        // TypeDeserializer.deserializeTypedFromAny -> deserializeTypedFromObject\n        if (p.getCurrentToken() != JsonToken.FIELD_NAME) {\n            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                    \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n        }\n\n        // Read the type id from the field name\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n\n        // Advance to the value token; for WRAPPER_OBJECT this should be START_OBJECT\n        if (p.nextToken() != JsonToken.START_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT, String.format(\n                    \"need JSON Object to contain the value for subtype `%s` (of base type %s)\",\n                    typeId, baseTypeName()));\n        }\n\n        // Minor complication: we may need to merge type id in?\n        // (mostly for JAXB tooling compatibility features)\n        if (_typeIdVisible) {\n             // Need to create TokenBuffer that contains the type id as property,\n             // merge with the actual value object stream.\n             TokenBuffer tb = new TokenBuffer(p, ctxt); // Using 'p' for context\n             tb.writeStartObject(); // {\n             tb.writeFieldName(_typePropertyName); // \"typeIdFieldName\" :\n             tb.writeString(typeId); // \"actualTypeId\"\n\n             // Logic from original code: combine buffer with original parser using sequence.\n             // 'p' is currently at START_OBJECT of the value.\n             p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n\n             // And advance past the START_OBJECT simulated by the buffer\n             // The JsonParserSequence starts with the buffer's START_OBJECT.\n             p.nextToken(); // Now p points to the FIELD_NAME from the buffer\n        }\n        \n        // Deserialize the actual value object using the concrete deserializer found\n        // The parser 'p' is either the original parser pointing to START_OBJECT of the value,\n        // or the sequence parser pointing to the injected FIELD_NAME (_typePropertyName).\n        Object value = deser.deserialize(p, ctxt);\n\n        // Crucial: We should NOT consume the closing END_OBJECT of the wrapper object.\n        // The caller, typically looping (like CollectionDeserializer), is responsible\n        // for advancing the parser state after this method returns. This method's scope\n        // ends after processing the value associated with the type id field name.\n        // `deser.deserialize()` consumes the value object stream (e.g. { ... }), leaving\n        // 'p' positioned AFTER the value's closing token (e.g. END_OBJECT).\n        \n        return value;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}