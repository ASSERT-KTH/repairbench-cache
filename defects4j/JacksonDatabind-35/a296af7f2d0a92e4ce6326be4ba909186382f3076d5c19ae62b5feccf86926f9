{
    "generation": "@SuppressWarnings(\"resource\")\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // Accept both START_OBJECT and FIELD_NAME (for unwrapped case with Object Id)\n    JsonToken t = p.getCurrentToken();\n    if (t == JsonToken.START_OBJECT) {\n        // normal WRAPPER_OBJECT case\n        t = p.nextToken();\n    }\n    // After START_OBJECT (or if already at FIELD_NAME), expecting FIELD_NAME for type id\n    if (t != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n    }\n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    p.nextToken();\n\n    // Minor complication: we may need to merge type id in?\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject(); // recreate START_OBJECT\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n    \n    Object value = deser.deserialize(p, ctxt);\n    // If we started with START_OBJECT, need END_OBJECT; otherwise, don't expect END_OBJECT\n    if (t == JsonToken.FIELD_NAME) {\n        // if the original token was START_OBJECT, nextToken should be END_OBJECT\n        // If not, just return.\n        JsonToken curr = p.getCurrentToken();\n        if (curr != JsonToken.END_OBJECT) {\n            // Try to move to end object, but only throw if present\n            curr = p.nextToken();\n            if (curr != JsonToken.END_OBJECT) {\n                throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                        \"expected closing END_OBJECT after type information and deserialized value\");\n            }\n        }\n    }\n    // else, no wrapping, so nothing to consume\n    return value;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}