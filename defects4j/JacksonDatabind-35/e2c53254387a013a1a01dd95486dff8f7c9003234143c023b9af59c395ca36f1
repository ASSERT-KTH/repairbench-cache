{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n        // first, sanity checks\n        if (p.getCurrentToken() != JsonToken.START_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n            // should always get field name, but just in case...\n            if (p.nextToken() != JsonToken.FIELD_NAME) {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n            }\n        final String typeId = p.getText();\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        p.nextToken();\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible) {\n            // Handle case where we need to add type information\n            if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n                // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n                TokenBuffer tb = new TokenBuffer(null, false);\n                tb.writeStartObject(); // recreate START_OBJECT\n                tb.writeFieldName(_typePropertyName);\n                tb.writeString(typeId);\n                p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n                p.nextToken();\n            } else if (p.getCurrentToken() == JsonToken.FIELD_NAME) {\n                // If we have a field name, we might be in a case where type info is embedded differently\n                // In this case, we might need to read the field name first\n                String fieldName = p.getCurrentText();\n                p.nextToken(); // move to the value\n                Object value = deser.deserialize(p, ctxt);\n                // We might need to advance to find END_OBJECT\n                while (p.nextToken() != JsonToken.END_OBJECT) {\n                    p.skipChildren();\n                }\n                return value;\n            }\n        } else {\n            // Skip the type info handling if type isn't visible\n            if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n                p.nextToken(); // move past START_OBJECT if we didn't process it above\n            }\n        }\n\n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}