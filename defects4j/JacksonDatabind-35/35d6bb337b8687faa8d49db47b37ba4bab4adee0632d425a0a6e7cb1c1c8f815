{
    "generation": "@SuppressWarnings(\"resource\")\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    // May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object nativeTypeId = p.getTypeId();\n        if (nativeTypeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, nativeTypeId);\n        }\n    }\n    // The wrapper is expected either as a full Object, or the parser may already be at the type id\n    JsonToken current = p.getCurrentToken();\n    if (current == JsonToken.START_OBJECT) {\n        // Move to the field name which should contain the type id\n        if (p.nextToken() != JsonToken.FIELD_NAME) {\n            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n        }\n    } else if (current != JsonToken.FIELD_NAME) {\n        // If not START_OBJECT and not FIELD_NAME, then it's an unexpected token.\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n            \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \" + baseTypeName());\n    }\n    // At this point, we're at the FIELD_NAME that contains the type id:\n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    // Advance to the actual value (contents of the type wrapper)\n    p.nextToken();\n\n    // If type id should be visible inside the value, merge it in.\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject();\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n    \n    Object value = deser.deserialize(p, ctxt);\n    // Expect the closing END_OBJECT of the type wrapper\n    if (p.nextToken() != JsonToken.END_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n            \"expected closing END_OBJECT after type information and deserialized value\");\n    }\n    return value;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}