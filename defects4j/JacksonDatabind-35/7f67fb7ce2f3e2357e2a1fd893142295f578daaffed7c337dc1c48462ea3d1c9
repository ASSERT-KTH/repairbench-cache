{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n\n        // --- FIX START ---\n        // The current token can be either START_OBJECT (if this deserializer is\n        // responsible for consuming the outer wrapper) or FIELD_NAME (if a parent\n        // deserializer has already consumed the START_OBJECT of the wrapper).\n        JsonToken t = p.getCurrentToken();\n        String typeId;\n        boolean consumedOuterStartObject;\n\n        if (t == JsonToken.START_OBJECT) {\n            consumedOuterStartObject = true;\n            // should always get field name, but just in case...\n            if (p.nextToken() != JsonToken.FIELD_NAME) {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n            }\n            typeId = p.getText();\n            p.nextToken(); // move past type id value to START_OBJECT of actual value\n        } else if (t == JsonToken.FIELD_NAME) { // Case where parent consumed START_OBJECT\n            consumedOuterStartObject = false;\n            typeId = p.getText();\n            p.nextToken(); // move past type id value to START_OBJECT of actual value\n        } else {\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n        // --- FIX END ---\n        \n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        // Original `p.nextToken();` here is removed as parser is already correctly positioned\n        // after the type id and before the actual value's START_OBJECT.\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken(); // Must move past the recreated START_OBJECT for the actual deserializer\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n\n        // And then need the closing END_OBJECT\n        // This check should only happen if this method was responsible for consuming\n        // the initial START_OBJECT of the wrapper.\n        if (consumedOuterStartObject) {\n            if (p.nextToken() != JsonToken.END_OBJECT) {\n                throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                        \"expected closing END_OBJECT after type information and deserialized value\");\n            }\n        }\n        return value;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}