{
    "generation": "@SuppressWarnings(\"resource\")\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // first, native type\u2010id handling (rare in JSON)\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // may be at START_OBJECT (wrapper) or already at FIELD_NAME (wrapper was entered)\n    JsonToken curr = p.getCurrentToken();\n    if (curr != JsonToken.START_OBJECT && curr != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n            \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    // if we saw the START_OBJECT, advance to the FIELD_NAME with the type id\n    if (curr == JsonToken.START_OBJECT) {\n        if (p.nextToken() != JsonToken.FIELD_NAME) {\n            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n        }\n    }\n    // now p is at FIELD_NAME of the type id\n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    // advance to the value (usually START_OBJECT for the actual Bean)\n    p.nextToken();\n\n    // if type-id needs to be exposed as a property, inject it\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject();\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n\n    // delegate to the real deserializer\n    Object value = deser.deserialize(p, ctxt);\n    // then expect closing END_OBJECT of the wrapper\n    if (p.nextToken() != JsonToken.END_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n            \"expected closing END_OBJECT after type information and deserialized value\");\n    }\n    return value;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}