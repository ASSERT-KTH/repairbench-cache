{
    "generation": "    /**\n     * Method that handles type information wrapper, locates actual\n     * subtype deserializer to use, and calls it to do actual\n     * deserialization.\n     */\n    @SuppressWarnings(\"resource\")\n    private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n    {\n        // 02-Aug-2013, tatu: May need to use native type ids\n        if (p.canReadTypeId()) {\n            Object typeId = p.getTypeId();\n            if (typeId != null) {\n                return _deserializeWithNativeTypeId(p, ctxt, typeId);\n            }\n        }\n        // first, sanity checks\n        // 06-Dec-2016, tatu: It is possible that for some odd reason (like object id)\n        //    we have already advanced to FIELD_NAME. This is problematic, but\n        //    if so, let's just proceed assuming that FIELD_NAME is the type id.\n        JsonToken t = p.getCurrentToken();\n        String typeId;\n\n        if (t == JsonToken.START_OBJECT) { // Normal WRAPPER_OBJECT case: {\"typeId\": { ... }}\n            t = p.nextToken(); // Advance to FIELD_NAME (which is the type id)\n            if (t != JsonToken.FIELD_NAME) {\n                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                        \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n            }\n        } else if (t == JsonToken.FIELD_NAME) { // Special case: START_OBJECT already consumed; FIELD_NAME is typeId\n            // The parser is already at the FIELD_NAME representing the type ID. No need to call nextToken() yet.\n        } else { // Neither START_OBJECT nor FIELD_NAME, which is an error for WRAPPER_OBJECT\n            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                    \"need JSON Object or FIELD_NAME to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n        }\n\n        typeId = p.getText(); // Get the type ID from the FIELD_NAME\n        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n        p.nextToken(); // Advance past FIELD_NAME to START_OBJECT of the actual value\n\n        // Minor complication: we may need to merge type id in?\n        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n            TokenBuffer tb = new TokenBuffer(null, false);\n            tb.writeStartObject(); // recreate START_OBJECT\n            tb.writeFieldName(_typePropertyName);\n            tb.writeString(typeId);\n            p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n            p.nextToken();\n        }\n        \n        Object value = deser.deserialize(p, ctxt);\n        // And then need the closing END_OBJECT\n        if (p.nextToken() != JsonToken.END_OBJECT) {\n            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                    \"expected closing END_OBJECT after type information and deserialized value\");\n        }\n        return value;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}