{
    "generation": "@SuppressWarnings(\"resource\")\nprivate final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n{\n    // 02-Aug-2013, tatu: May need to use native type ids\n    if (p.canReadTypeId()) {\n        Object typeId = p.getTypeId();\n        if (typeId != null) {\n            return _deserializeWithNativeTypeId(p, ctxt, typeId);\n        }\n    }\n    // might already be at the TYPE_NAME field (wrapper start consumed),\n    // or at START_OBJECT (need to advance)\n    JsonToken curr = p.getCurrentToken();\n    if (curr == JsonToken.START_OBJECT) {\n        // move to the field name that contains the type id\n        if (p.nextToken() != JsonToken.FIELD_NAME) {\n            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,\n                    \"need JSON String that contains type id (for subtype of \"+baseTypeName()+\")\");\n        }\n    } else if (curr != JsonToken.FIELD_NAME) {\n        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,\n                \"need JSON Object to contain As.WRAPPER_OBJECT type information for class \"+baseTypeName());\n    }\n    // now p.getCurrentToken() == FIELD_NAME, text is the type id\n    final String typeId = p.getText();\n    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);\n    // advance to the value (usually START_OBJECT for the actual POJO)\n    p.nextToken();\n\n    // if configured to merge type id into value, inject it\n    if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {\n        TokenBuffer tb = new TokenBuffer(null, false);\n        tb.writeStartObject();\n        tb.writeFieldName(_typePropertyName);\n        tb.writeString(typeId);\n        p = JsonParserSequence.createFlattened(tb.asParser(p), p);\n        p.nextToken();\n    }\n\n    // do the actual deserialization\n    Object value = deser.deserialize(p, ctxt);\n\n    // and then expect the closing of the wrapper object\n    if (p.nextToken() != JsonToken.END_OBJECT) {\n        throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,\n                \"expected closing END_OBJECT after type information and deserialized value\");\n    }\n    return value;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}