{
    "generation": "  /**\n   * Checks name referenced in node to determine if it might have\n   * changed.\n   * @return Whether the replacement can be made.\n   */\n  private boolean isSafeReplacement(Node node, Node replacement) {\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    Node child = node.getFirstChild();\n    if (child.isName() && isNameAssignedTo(child.getString(), replacement)) {\n      return false;\n    }\n\n    // Handle nested property accesses (like in Issue1017)\n    while (child.isGetProp()) {\n      Node nextChild = child.getFirstChild();\n      if (nextChild.isName() && isNameAssignedTo(nextChild.getString(), replacement)) {\n        return false;\n      }\n      child = nextChild;\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}