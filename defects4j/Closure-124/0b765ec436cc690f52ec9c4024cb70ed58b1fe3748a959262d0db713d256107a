{
    "generation": "  /**\n   * Checks name referenced in node to determine if it might have\n   * changed.\n   * @return Whether the replacement can be made.\n   */\n  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    Node obj = node.getFirstChild();\n    Node prop = node.getSecondChild();\n\n    // If the object of the property access is assigned to in the replacement,\n    // it's not safe to replace.\n    if (obj.isName()\n        && isNameAssignedTo(obj.getString(), replacement)) {\n      return false;\n    }\n\n    // Additionally, if replacement assigns to the same property, it's not safe.\n    if (replacement.isAssign()) {\n      Node lhs = replacement.getFirstChild();\n      if (lhs.isGetProp()) {\n        Node lhsObj = lhs.getFirstChild();\n        Node lhsProp = lhs.getSecondChild();\n        if (obj.isEquivalentTo(lhsObj) && prop.getString().equals(lhsProp.getString())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}