{
    "generation": "/**\n * Checks name referenced in node to determine if it might have\n * changed.\n * @return Whether the replacement can be made.\n */\nprivate boolean isSafeReplacement(Node node, Node replacement) {\n  // No checks are needed for simple names.\n  if (node.isName()) {\n    return true;\n  }\n  Preconditions.checkArgument(node.isGetProp());\n\n  Node objNode = node.getFirstChild();\n  // It's unsafe if the replacement assigns to the *same* getprop chain (i.e., x.parentNode)\n  if (objNode.isName() && isNameAssignedTo(objNode.getString(), replacement)) {\n    return false;\n  }\n  // Also, if replacement references the same property chain as 'node' (e.g. x.parentNode)\n  if (isPropertyChainAssignedTo(node, replacement)) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Checks whether the given replacement assigns to the same\n * property chain represented by 'pattern' node.\n */\nprivate boolean isPropertyChainAssignedTo(Node pattern, Node replacement) {\n  if (replacement.isAssign()) {\n    Node lhs = replacement.getFirstChild();\n    if (lhs != null && lhs.isGetProp() && comparePropertyChains(pattern, lhs)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Compares two property chains for structural equality.\n */\nprivate boolean comparePropertyChains(Node a, Node b) {\n  if (a == null || b == null || !a.getToken().equals(b.getToken())) {\n    return false;\n  }\n  if (a.isName() && b.isName()) {\n    return a.getString().equals(b.getString());\n  }\n  if (a.isGetProp() && b.isGetProp()) {\n    return comparePropertyChains(a.getFirstChild(), b.getFirstChild()) &&\n        a.getSecondChild().getString().equals(b.getSecondChild().getString());\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}