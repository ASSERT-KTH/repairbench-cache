{
    "generation": "/**\n * Checks name referenced in node to determine if it might have\n * changed.\n * @return Whether the replacement can be made.\n */\nprivate boolean isSafeReplacement(Node node, Node replacement) {\n  // No checks are needed for simple names.\n  if (node.isName()) {\n    return true;\n  }\n  Preconditions.checkArgument(node.isGetProp());\n\n  Node obj = node.getFirstChild();\n  // Bug fix: Check if the *object* of the property access is being assigned to something new.\n  if (obj.isName() &&\n      isNameAssignedTo(obj.getString(), replacement)) {\n    return false;\n  }\n  // Also, be conservative: If the property chain starts with a getProp, check recursively.\n  if (obj.isGetProp() && !isSafeReplacement(obj, replacement)) {\n    return false;\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}