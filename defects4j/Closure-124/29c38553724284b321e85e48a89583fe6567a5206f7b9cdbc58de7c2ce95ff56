{
    "generation": "  /**\n   * Checks name referenced in node to determine if it might have\n   * changed.\n   * @return Whether the replacement can be made.\n   */\n  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    // Traverse down the GETPROP chain to find the root object.\n    // For a.b.c, this will eventually make 'current' be 'a'.\n    Node current = node;\n    while (current.isGetProp()) {\n      current = current.getFirstChild();\n    }\n\n    // Now 'current' is the root of the property access (e.g., 'x' in 'x.y.z').\n    // If 'current' is a name, check if that name is assigned to within the replacement.\n    // If the name referenced in the original node (e.g., 'x' in 'x.parentNode.parentNode')\n    // is assigned to within the proposed 'replacement' expression, then it's unsafe.\n    // This is because changing 'x' would change the meaning of 'x.parentNode.parentNode'.\n    if (current.isName()\n        && isNameAssignedTo(current.getString(), replacement)) {\n      return false;\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}