{
    "generation": "  /**\n   * Checks name referenced in node to determine if it might have\n   * changed.\n   * @return Whether the replacement can be made.\n   */\n  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    // If replacement has any getProp chain with same root as node, it's unsafe\n    Node getPropRoot = node.getFirstChild();\n    if (getPropRoot.isName() && referencesName(replacement, getPropRoot.getString())) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Helper: Checks if n references a name node with the given name\n  private static boolean referencesName(Node n, String name) {\n    if (n.isName() && n.getString().equals(name)) {\n      return true;\n    }\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (referencesName(c, name)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}