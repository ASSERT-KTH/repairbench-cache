{
    "generation": "  /**\n   * Checks name referenced in node to determine if it might have\n   * changed.\n   * @return Whether the replacement can be made.\n   */\n  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    // Bug fix: Check the whole chain of GETPROP to ensure replaced value has not changed.\n    Node nodeObj = node.getFirstChild();\n    Node propObj = replacement;\n    while (nodeObj != null && propObj != null) {\n      if (!nodeObj.isName() && !nodeObj.isGetProp()) {\n        // don't know how to analyze this, so bail out\n        return false;\n      }\n      if (nodeObj.isName() && isNameAssignedTo(nodeObj.getString(), propObj)) {\n        return false;\n      }\n      if (!propObj.isGetProp()) {\n        break;\n      }\n      nodeObj = nodeObj.isGetProp() ? nodeObj.getFirstChild() : null;\n      propObj = propObj.getFirstChild();\n    }\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}