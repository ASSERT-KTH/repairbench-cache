{
    "generation": "  /**\n   * Checks name referenced in node to determine if it might have\n   * changed.\n   * @return Whether the replacement can be made.\n   */\n  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    // Check the full chain of GETPROPs e.g. x.y.z\n    // We are looking for a potential alias of the replacement.\n    // Example:\n    //   x = x.parentNode.parentNode;\n    //   x = x.parentNode.parentNode; // Cannot be replaced by 'x'.\n    // node is the second \"x.parentNode.parentNode\"\n    // replacement is the first \"x\"\n    // Check \"x.parentNode.parentNode\", then \"x.parentNode\", then \"x\"\n    // When we get down to \"x\", we see that replacement \"x\" is assigned to \"x\",\n    // so it is not safe.\n    if (node.isGetProp()) {\n      Node query = node;\n      while (query.isGetProp()) {\n          Node lhs = query.getFirstChild();\n          if (lhs.isName()) {\n              // Check the name component. If it's reassigned, it's not safe.\n              if (isNameAssignedTo(lhs.getString(), replacement)) {\n                  return false;\n              }\n              // If the name is not reassigned, this part of the chain is stable\n              // with respect to the replacement node. Further checks aren't needed.\n              break;\n          } else if (lhs.isGetProp()) {\n               // Continue checking down the chain.\n              query = lhs;\n          } else {\n              // If the base is not a name or GETPROP (e.g., a function call or\n              // array access), we assume it's safe as the aliasing check based on\n              // name assignment doesn't apply directly in the same way.\n               break;\n          }\n      }\n      // If the loop completes without finding an unsafe name reassignment,\n      // it's considered safe.\n      return true;\n    }\n\n    // For other node types, assume it's safe for now.\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}