{
    "generation": "/**\n * Checks name referenced in node to determine if it might have\n * changed.\n * @return Whether the replacement can be made.\n */\nprivate boolean isSafeReplacement(Node node, Node replacement) {\n  // No checks are needed for simple names.\n  if (node.isName()) {\n    return true;\n  }\n  Preconditions.checkArgument(node.isGetProp());\n\n  // Walk down a chain of GETPROP nodes to find the base object.\n  Node object = node;\n  while (object.isGetProp()) {\n    object = object.getFirstChild();\n  }\n  // If the base is a name that gets assigned to in the replacement,\n  // we cannot safely reuse it.\n  if (object.isName() && isNameAssignedTo(object.getString(), replacement)) {\n    return false;\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}