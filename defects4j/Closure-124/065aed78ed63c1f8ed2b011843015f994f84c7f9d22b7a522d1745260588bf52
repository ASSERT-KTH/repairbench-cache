{
    "generation": "  /**\n   * Checks name referenced in node to determine if it might have\n   * changed.\n   * @return Whether the replacement can be made.\n   */\n  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    // The original code `node = node.getFirstChild();` only checked the immediate\n    // object of a GETPROP. For deeply nested property accesses like `a.b.c`,\n    // it would check `a.b`, but not the root name `a`. If `a.b` is not a simple\n    // name (e.g., it's another GETPROP), the `isName()` check would fail,\n    // leading to `isSafeReplacement` always returning true, even if the root\n    // name `a` was assigned to by the replacement.\n    //\n    // To correctly determine if the \"name referenced in node\" might have changed,\n    // we must traverse down the GETPROP chain until we reach the actual root\n    // object, which could be a simple NAME node.\n    Node current = node;\n    while (current.isGetProp()) {\n      current = current.getFirstChild();\n    }\n\n    // Now 'current' should be the root object of the property access chain.\n    // If this root object is a NAME node, we check if that name is assigned to\n    // within the 'replacement' expression's subtree. If it is, then the\n    // replacement is not safe because its execution might change the value\n    // of the root name, thus invalidating the original node's meaning.\n    if (current.isName()\n        && isNameAssignedTo(current.getString(), replacement)) {\n      return false;\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}