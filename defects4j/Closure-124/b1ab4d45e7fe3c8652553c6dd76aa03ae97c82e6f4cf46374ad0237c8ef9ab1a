{
    "generation": "  /**\n   * Checks name referenced in node to determine if it might have\n   * changed.\n   * @return Whether the replacement can be made.\n   */\n  private boolean isSafeReplacement(Node node, Node replacement) {\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n    Node baseNode = node.getFirstChild();\n    String baseName = baseNode.getString();\n    if (isNameAssigned(replacement, baseName)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Checks whether the specified name is assigned anywhere in the subtree rooted at node.\n   * @return True if the name is assigned, false otherwise.\n   */\n  private boolean isNameAssigned(Node node, String name) {\n    if (node.isAssignment()) {\n      Node leftChild = node.getFirstChild();\n      if (leftChild != null && leftChild.isName() && leftChild.getString().equals(name)) {\n        return true;\n      }\n    }\n    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n      if (isNameAssigned(child, name)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}