{
    "generation": "  /**\n   * Checks name referenced in node to determine if it might have\n   * changed.\n   * @return Whether the replacement can be made.\n   */\n  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    Node current = node;\n    while (current.isGetProp()) {\n      Node child = current.getFirstChild();\n      if (!child.isGetProp() &&\n          child.isName() &&\n          isNameAssignedTo(child.getString(), replacement)) {\n        return false;\n      }\n      current = child;\n    }\n\n    // Check the base name if we reached the end\n    if (current.isName() && isNameAssignedTo(current.getString(), replacement)) {\n      return false;\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}