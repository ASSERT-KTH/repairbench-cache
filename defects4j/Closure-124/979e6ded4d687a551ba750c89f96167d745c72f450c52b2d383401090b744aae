{
    "generation": "  /**\n   * Checks name referenced in node to determine if it might have\n   * changed.\n   * @return Whether the replacement can be made.\n   */\n  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    // Ensure both node and replacement must access the same property of the same base.\n    // If the bases are not identical, unsafe to replace.\n    Node nodeBase = node.getFirstChild();\n    Node replacementBase = replacement.isGetProp() ? replacement.getFirstChild() : null;\n\n    // Check bases: both must be simple names, and match\n    if (nodeBase == null \n        || !nodeBase.isName() \n        || replacementBase == null \n        || !replacementBase.isName() \n        || !nodeBase.getString().equals(replacementBase.getString())) {\n      return false;\n    }\n\n    // Additionally, check properties must match\n    String nodeProp = node.getLastChild().getString();\n    String replacementProp = replacement.isGetProp() ? replacement.getLastChild().getString() : null;\n    if (replacementProp == null || !nodeProp.equals(replacementProp)) {\n      return false;\n    }\n\n    if (isNameAssignedTo(nodeBase.getString(), replacement)) {\n      return false;\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}