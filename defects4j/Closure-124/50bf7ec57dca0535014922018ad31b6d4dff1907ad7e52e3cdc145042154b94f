{
    "generation": "/**\n * Checks name referenced in node to determine if it might have\n * changed.\n * @return Whether the replacement can be made.\n */\nprivate boolean isSafeReplacement(Node node, Node replacement) {\n  // No checks are needed for simple names.\n  if (node.isName()) {\n    return true;\n  }\n  Preconditions.checkArgument(node.isGetProp());\n\n  Node child = node.getFirstChild();\n  if (child.isName()\n      && isNameAssignedTo(child.getString(), replacement)) {\n    // Disallow replacement if the root object is the same as the replaced value,\n    // e.g., x = x.parentNode.parentNode; replacing x.parentNode with x would be unsafe.\n    return false;\n  }\n\n  // Additional check: Disallow replacement if the replacement is a property access\n  // rooted at the same object as node (to avoid cascading unsafe replacements).\n  if (replacement.isGetProp()) {\n    Node replacementRoot = replacement.getFirstChild();\n    Node nodeRoot = node.getFirstChild();\n    if (replacementRoot.isName() && nodeRoot.isName()\n        && replacementRoot.getString().equals(nodeRoot.getString())) {\n      return false;\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}