{
    "generation": "  /**\n   * Checks name referenced in node to determine if it might have\n   * changed.\n   * @return Whether the replacement can be made.\n   */\n  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n    Preconditions.checkArgument(node.isGetProp());\n\n    Node objNode = node.getFirstChild();\n    // If we're accessing a property of the same name as the replacement,\n    // it isn't safe if the replacement itself is the same property.\n    if (objNode.isName()\n        && isNameAssignedTo(objNode.getString(), replacement)) {\n      // But only if the property being accessed is the same as the property\n      // in the replacement. Prevents x = x.parentNode; x = x.parentNode;\n      // from being incorrectly replaced.\n      String prop1 = node.getLastChild().getString();\n      if (replacement.isGetProp() &&\n          prop1.equals(replacement.getLastChild().getString())) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}