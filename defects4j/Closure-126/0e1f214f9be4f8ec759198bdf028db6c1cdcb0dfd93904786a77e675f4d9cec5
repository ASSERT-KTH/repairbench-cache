{
    "generation": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  // Do not optimize any code that is nested inside a finally block.\n  // This loop checks whether any ancestor of n is the finally block\n  // of a try statement. If so, bail out.\n  for (Node curr = n; curr != null; curr = curr.getParent()) {\n    Node p = curr.getParent();\n    if (p != null && p.isTry() && NodeUtil.hasFinally(p) && p.getLastChild() == curr) {\n      return;\n    }\n  }\n\n  // Just an 'exit'.\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n\n  // Just an 'if'.\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock != null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n\n  // Just a 'try/catch/finally'.\n  if (n.isTry()) {\n    // Process the try block.\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    // Process the catch block, if one exists.\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n    // Do NOT optimize the finally block; leaving it untouched\n    // avoids changing its completion type (ECMA 262 Sections 8.9 & 12.14).\n    return;\n  }\n\n  // Just a 'label'.\n  if (n.isLabel()) {\n    Node labelBlock = n.getLastChild();\n    tryMinimizeExits(labelBlock, exitType, labelName);\n  }\n\n  // TODO: Handle SWITCH statements?\n\n  // The remainder of the function is intended for blocks.\n  if (!n.isBlock() || n.getLastChild() == null) {\n    return;\n  }\n\n  // Process any sequences of if-exit statements within the block.\n  // For example:\n  //   if (blah) break;\n  //   if (blah2) break;\n  //   other_stmt;\n  // becomes a nested if/else that merges the conditions.\n  for (Node c : n.children()) {\n    if (c.isIf()) {\n      Node ifTree = c;\n      Node trueBlock, falseBlock;\n\n      // Process the \"true\" branch.\n      trueBlock = ifTree.getFirstChild().getNext();\n      falseBlock = trueBlock.getNext();\n      tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);\n\n      // Process the \"else\" branch.\n      trueBlock = ifTree.getFirstChild().getNext();\n      falseBlock = trueBlock.getNext();\n      if (falseBlock != null) {\n        tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);\n      }\n    }\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n\n  // Then, try again on the last child in case it was removed\n  // (which might expose a new \"last child\") until no further changes occur.\n  for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n    tryMinimizeExits(c, exitType, labelName);\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}