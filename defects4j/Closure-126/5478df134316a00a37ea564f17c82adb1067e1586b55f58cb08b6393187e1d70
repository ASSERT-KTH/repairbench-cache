{
    "generation": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  // Do not optimize any code inside a finally block.\n  // (We check each ancestor: if any is a try with a finally,\n  //  and n is part of that finally block, then we leave n alone.)\n  for (Node parent = n.getParent(); parent != null; parent = parent.getParent()) {\n    if (parent.isTry() && NodeUtil.hasFinally(parent)) {\n      Node finallyBlock = parent.getLastChild();\n      if (n == finallyBlock || NodeUtil.isAncestor(finallyBlock, n)) {\n        return;\n      }\n    }\n  }\n\n  // Just an 'exit'.\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n\n  // Just an 'if'.\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock != null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n\n  // Just a 'try/catch/finally'.\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n    // IMPORTANT: Do not try to optimize the finally block,\n    // because altering its exit (completion) type can break semantics.\n    return;\n  }\n\n  // Just a 'label'.\n  if (n.isLabel()) {\n    Node labelBlock = n.getLastChild();\n    tryMinimizeExits(labelBlock, exitType, labelName);\n    return;\n  }\n\n  // The rest assumes a block with at least one child; bail on anything else.\n  if (!n.isBlock() || n.getLastChild() == null) {\n    return;\n  }\n\n  // Multiple if\u2010exits can be converted in a single pass.\n  // Convert \"if (blah) exit; if (blah2) exit; other_stmt;\" to\n  // \"if (blah); else { if (blah2); else { other_stmt; } }\"\n  for (Node c : n.children()) {\n    if (c.isIf()) {\n      Node ifTree = c;\n      Node trueBlock = ifTree.getFirstChild().getNext();\n      Node falseBlock = trueBlock.getNext();\n      tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);\n\n      // Now process the else-block after any transformation.\n      trueBlock = ifTree.getFirstChild().getNext();\n      falseBlock = trueBlock.getNext();\n      if (falseBlock != null) {\n        tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);\n      }\n    }\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n\n  // Now try to minimize the exits of the last child.\n  // If the last child is removed, look at what has become the new last child.\n  for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n    tryMinimizeExits(c, exitType, labelName);\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}