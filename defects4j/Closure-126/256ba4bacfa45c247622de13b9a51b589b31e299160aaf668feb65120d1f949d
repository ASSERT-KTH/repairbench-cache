{
    "generation": "  /**\n   * Attempts to minimize the number of explicit exit points in a control\n   * structure to take advantage of the implied exit at the end of the\n   * structure.  This is accomplished by removing redundant statements, and\n   * moving statements following a qualifying IF node into that node.\n   * For example:\n   *\n   * function () {\n   *   if (x) return;\n   *   else blah();\n   *   foo();\n   * }\n   *\n   * becomes:\n   *\n   * function () {\n   *  if (x) ;\n   *  else {\n   *    blah();\n   *    foo();\n   *  }\n   *\n   * @param n The execution node of a parent to inspect.\n   * @param exitType The type of exit to look for.\n   * @param labelName If parent is a label the name of the label to look for,\n   *   null otherwise.\n   * @nullable labelName non-null only for breaks within labels.\n   */\n  void tryMinimizeExits(Node n, int exitType, String labelName) {\n\n    // Just an 'exit'.\n    if (matchingExitNode(n, exitType, labelName)) {\n      NodeUtil.removeChild(n.getParent(), n);\n      compiler.reportCodeChange();\n      return;\n    }\n\n    // Just an 'if'.\n    if (n.isIf()) {\n      Node ifBlock = n.getFirstChild().getNext();\n      tryMinimizeExits(ifBlock, exitType, labelName);\n      Node elseBlock = ifBlock.getNext();\n      if (elseBlock != null) {\n        tryMinimizeExits(elseBlock, exitType, labelName);\n      }\n      return;\n    }\n\n    // Just a 'try/catch/finally'.\n    if (n.isTry()) {\n      Node tryBlock = n.getFirstChild();\n      tryMinimizeExits(tryBlock, exitType, labelName);\n      Node allCatchNodes = NodeUtil.getCatchBlock(n);\n      if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n        Preconditions.checkState(allCatchNodes.hasOneChild());\n        Node catchNode = allCatchNodes.getFirstChild();\n        Node catchCodeBlock = catchNode.getLastChild();\n        tryMinimizeExits(catchCodeBlock, exitType, labelName);\n      }\n      /* Don't try to minimize the exits of finally blocks, as this\n       * can cause problems if it changes the completion type of the finally\n       * block. See ECMA 262 Sections 8.9 & 12.14\n       * The recursive call below was removed as per this comment.\n       */\n      // if (NodeUtil.hasFinally(n)) {\n      //   Node finallyBlock = n.getLastChild();\n      //   tryMinimizeExits(finallyBlock, exitType, labelName);\n      // }\n      return; // Added return here to match other top-level type handlers.\n    }\n\n    // Just a 'label'.\n    if (n.isLabel()) {\n      Node labelBlock = n.getLastChild();\n      tryMinimizeExits(labelBlock, exitType, labelName);\n      return; // Added return here to match other top-level type handlers.\n    }\n\n    // TODO(johnlenz): The last case of SWITCH statement?\n\n    // The rest assumes a block with at least one child, bail on anything else.\n    if (!n.isBlock() || n.getLastChild() == null) {\n      return;\n    }\n\n    // Multiple if-exits can be converted in a single pass.\n    // Convert \"if (blah) break;  if (blah2) break; other_stmt;\" to\n    // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n    // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n    // Replaced original 'for-each' loop with a 'while' loop to handle\n    // modifications to the child list during iteration.\n    Node child = n.getFirstChild();\n    while (child != null) {\n      // The original loop had this check at the end, causing the loop to break\n      // before processing the last child with this logic.\n      // The last child is handled in the separate loop below.\n      if (child == n.getLastChild()) {\n          break;\n      }\n\n      Node nextChild = child.getNext(); // Store next before potential modification\n\n      // An 'if' block to process below.\n      if (child.isIf()) {\n        Node ifTree = child;\n        Node trueBlock = ifTree.getFirstChild().getNext();\n        Node falseBlock = trueBlock.getNext();\n\n        // First, the true condition block.\n        tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);\n\n        // Re-get blocks because they might have been changed by tryMinimizeIfBlockExits\n        trueBlock = ifTree.getFirstChild().getNext();\n        falseBlock = trueBlock.getNext();\n\n        // Now the else block.\n        if (falseBlock != null) {\n          tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);\n        }\n        // After processing the IF node, its siblings might have been moved into it.\n        // Re-evaluate what the actual next sibling of the IF node is.\n        nextChild = ifTree.getNext();\n      }\n      child = nextChild; // Move to the (potentially new) next child\n    }\n\n    // Now try to minimize the exits of the last child, if it is removed\n    // look at what has become the last child.\n    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n      tryMinimizeExits(c, exitType, labelName);\n      // If the node is still the last child, we are done.\n      if (c == n.getLastChild()) {\n        break;\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}