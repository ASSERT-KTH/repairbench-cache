{
    "generation": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  // Do not optimize the exits in a finally block.\n  // A finally block is identified as the last child of a try node.\n  if (n.getParent() != null &&\n      n.getParent().isTry() &&\n      NodeUtil.hasFinally(n.getParent()) &&\n      n == n.getParent().getLastChild()) {\n    return;\n  }\n\n  // Just an 'exit'.\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n\n  // Just an 'if'.\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock != null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n\n  // Just a 'try/catch/finally'.\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n    // Do NOT optimize the exits of finally blocks.\n    // The finally block must remain untouched to preserve its completion type.\n    return;\n  }\n\n  // Just a 'label'.\n  if (n.isLabel()) {\n    Node labelBlock = n.getLastChild();\n    tryMinimizeExits(labelBlock, exitType, labelName);\n    return;\n  }\n\n  // TODO(johnlenz): The last case of SWITCH statement?\n\n  // The rest assumes a block with at least one child.\n  if (!n.isBlock() || n.getLastChild() == null) {\n    return;\n  }\n\n  // Process inner if statements that might be optimized by merging exit points.\n  for (Node c : n.children()) {\n    // An 'if' block to process below.\n    if (c.isIf()) {\n      Node ifTree = c;\n      Node trueBlock, falseBlock;\n\n      // First, the true condition block.\n      trueBlock = ifTree.getFirstChild().getNext();\n      falseBlock = trueBlock.getNext();\n      tryMinimizeIfBlockExits(trueBlock, falseBlock, ifTree, exitType, labelName);\n\n      // Now process the else block.\n      trueBlock = ifTree.getFirstChild().getNext();\n      falseBlock = trueBlock.getNext();\n      if (falseBlock != null) {\n        tryMinimizeIfBlockExits(falseBlock, trueBlock, ifTree, exitType, labelName);\n      }\n    }\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n\n  // Process the last child repeatedly in case it was removed.\n  for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n    tryMinimizeExits(c, exitType, labelName);\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}