{
    "generation": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n\n  // Just an 'exit'.\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n\n  // Just an 'if'.\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock != null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n\n  // Just a 'try/catch/finally'.\n  if (n.isTry()) {\n    // Process the 'try' block.\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n\n    // Process any 'catch' block.\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n\n    // DO NOT process the finally block to avoid changing its completion type.\n    return;\n  }\n\n  // Just a 'label'.\n  if (n.isLabel()) {\n    Node labelBlock = n.getLastChild();\n    tryMinimizeExits(labelBlock, exitType, labelName);\n    return;\n  }\n\n  // TODO(johnlenz): The last case of SWITCH statement?\n\n  // The rest assumes a block with at least one child, bail on anything else.\n  if (!n.isBlock() || n.getLastChild() == null) {\n    return;\n  }\n\n  // Multiple if-exits can be converted in a single pass.\n  for (Node c : n.children()) {\n    if (c.isIf()) {\n      Node ifTree = c;\n      // True branch\n      Node trueBlock = ifTree.getFirstChild().getNext();\n      Node falseBlock = trueBlock.getNext();\n      tryMinimizeIfBlockExits(trueBlock, falseBlock,\n          ifTree, exitType, labelName);\n      // False branch (if present)\n      trueBlock = ifTree.getFirstChild().getNext();\n      falseBlock = trueBlock.getNext();\n      if (falseBlock != null) {\n        tryMinimizeIfBlockExits(falseBlock, trueBlock,\n            ifTree, exitType, labelName);\n      }\n    }\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n\n  // If we're optimizing returns (no labelName), and this block\n  // has at least one try-with-finally barrier, do not remove\n  // the final return in this block.\n  if (exitType == Token.RETURN && labelName == null) {\n    boolean hasTryFinally = false;\n    for (Node c : n.children()) {\n      if (c.isTry() && NodeUtil.hasFinally(c)) {\n        hasTryFinally = true;\n        break;\n      }\n      if (c.isLabel()) {\n        Node child = c.getLastChild();\n        if (child.isTry() && NodeUtil.hasFinally(child)) {\n          hasTryFinally = true;\n          break;\n        }\n      }\n    }\n    if (hasTryFinally) {\n      return;\n    }\n  }\n\n  // Now try to minimize the exits of the last child.\n  // If it is removed, look at what has become the last child.\n  for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n    tryMinimizeExits(c, exitType, labelName);\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}