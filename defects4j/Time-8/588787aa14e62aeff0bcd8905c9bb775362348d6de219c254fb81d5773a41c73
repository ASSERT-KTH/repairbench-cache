{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    // hours must be in -23..23\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    // minutes must be in -59..59\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    // positive hours cannot have negative minutes\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\n            \"Positive hours must not have negative minutes: hours=\" + hoursOffset +\n            \" minutes=\" + minutesOffset);\n    }\n    // compute total offset in minutes\n    int absHours = Math.abs(hoursOffset);\n    int absMinutes = Math.abs(minutesOffset);\n    int totalAbsMinutes = absHours * 60 + absMinutes;\n    int totalMinutes;\n    if (hoursOffset > 0) {\n        totalMinutes = totalAbsMinutes;\n    } else if (hoursOffset < 0) {\n        totalMinutes = -totalAbsMinutes;\n    } else {\n        // hoursOffset == 0\n        totalMinutes = (minutesOffset >= 0 ? totalAbsMinutes : -totalAbsMinutes);\n    }\n    // convert to millis\n    final int offset;\n    try {\n        offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}