{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + hoursOffset + \":\" + minutesOffset);\n    }\n    if (hoursOffset < 0 && minutesOffset > 0) {\n        // Allowed, but need to treat as negative (e.g. -2, 15 -> -2*60-15=-135min)\n        // Actually, the docs say this means -02:15 is expected\n        minutesOffset = -minutesOffset;\n    }\n\n    int offset;\n    try {\n        int totalMinutes = hoursOffset * 60 + minutesOffset;\n        // Check that offset does not exceed +/- 23:59:59.000\n        if (totalMinutes > 23 * 60 + 59 || totalMinutes < - (23 * 60 + 59)) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}