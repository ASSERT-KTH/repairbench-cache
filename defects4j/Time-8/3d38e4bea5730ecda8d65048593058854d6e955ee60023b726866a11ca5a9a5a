{
    "generation": "import org.joda.time.DateTimeConstants;\nimport org.joda.time.tz.ZoneInfoCompiler; // Assuming FieldUtils is in this package or a common utility.\nimport org.joda.time.field.FieldUtils;\n\n// This import is needed for FieldUtils.safeAdd and safeMultiply.\n// In a real project, this would be part of the existing imports.\n// For this standalone function, assuming they are accessible.\n\n\npublic class DateTimeZone {\n    // Assuming DateTimeZone.UTC and forOffsetMillis are defined elsewhere in the class\n    // and are accessible. This is a common pattern in Joda Time classes.\n\n    // Placeholder for actual DateTimeZone methods/constants if not provided.\n    // In a real Joda-Time context, these would exist.\n    public static final DateTimeZone UTC = new DateTimeZone(\"UTC\") {\n        @Override\n        public String getNameKey(long instant) {\n            return \"UTC\";\n        }\n        @Override\n        public long getOffsetFromLocal(long instantLocal) {\n            return 0;\n        }\n        @Override\n        public int getOffset(long instant) {\n            return 0;\n        }\n        @Override\n        public boolean isFixed() {\n            return true;\n        }\n        @Override\n        public long previousTransition(long instant) {\n            return instant;\n        }\n        @Override\n        public long nextTransition(long instant) {\n            return instant;\n        }\n    }; // Simplified placeholder\n    public static DateTimeZone forOffsetMillis(int offset) {\n        // This is a placeholder for the actual implementation in Joda Time.\n        // It would typically cache common offsets and create FixedDateTimeZone for others.\n        if (offset == 0) return UTC;\n        String id = ZoneInfoCompiler.formatMillis(offset);\n        return new DateTimeZone(id) {\n            @Override\n            public String getNameKey(long instant) {\n                return id;\n            }\n            @Override\n            public long getOffsetFromLocal(long instantLocal) {\n                return offset;\n            }\n            @Override\n            public int getOffset(long instant) {\n                return offset;\n            }\n            @Override\n            public boolean isFixed() {\n                return true;\n            }\n            @Override\n            public long previousTransition(long instant) {\n                return instant;\n            }\n            @Override\n            public long nextTransition(long instant) {\n                return instant;\n            }\n        };\n    }\n\n    protected DateTimeZone(String id) {\n        // Simplified constructor for placeholder\n    }\n\n    // Methods for placeholder DateTimeZone\n    public String getID() { return null; }\n    public String getNameKey(long instant) { return null; }\n    public long getOffsetFromLocal(long instantLocal) { return 0; }\n    public int getOffset(long instant) { return 0; }\n    public boolean isFixed() { return true; }\n    public long previousTransition(long instant) { return instant; }\n    public long nextTransition(long instant) { return instant; }\n    // End of placeholder for DateTimeZone internal class/methods\n\n\n    /**\n     * Gets a time zone instance for the specified offset to UTC in hours and minutes.\n     * This method assumes 60 minutes in an hour, and standard length minutes.\n     * <p>\n     * This factory is a convenient way of constructing zones with a fixed offset.\n     * The hours value must be in the range -23 to +23.\n     * The minutes value must be in the range -59 to +59.\n     * The following combinations of sign for the hour and minute are possible:\n     * <pre>\n     *  Hour    Minute    Example    Result\n     *\n     *  +ve     +ve       (2, 15)    +02:15\n     *  +ve     zero      (2, 0)     +02:00\n     *  +ve     -ve       (2, -15)   IllegalArgumentException\n     *\n     *  zero    +ve       (0, 15)    +00:15\n     *  zero    zero      (0, 0)     +00:00\n     *  zero    -ve       (0, -15)   -00:15\n     *\n     *  -ve     +ve       (-2, 15)   -02:15\n     *  -ve     zero      (-2, 0)    -02:00\n     *  -ve     -ve       (-2, -15)  -02:15\n     * </pre>\n     * Note that in versions before 2.3, the minutes had to be zero or positive.\n     *\n     * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n     * @param minutesOffset  the offset in minutes from UTC, from -59 to +59\n     * @return the DateTimeZone object for the offset\n     * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n     *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n     */\n    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        // FIX 1: Allow minutesOffset from -59 to 59 as per Javadoc\n        if (minutesOffset < -59 || minutesOffset > 59) {\n            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n        }\n        // FIX 3: Add explicit check for positive hours with negative minutes\n        if (hoursOffset > 0 && minutesOffset < 0) {\n            throw new IllegalArgumentException(\"Minutes negative in positive hours: \" + minutesOffset);\n        }\n\n        int totalMinutes;\n        // FIX 2: Correct calculation logic based on sign of hoursOffset\n        // For negative hours, minutes contribute to the magnitude of the negative offset.\n        // E.g., -2 hours and +15 minutes becomes -2h 15m.\n        // E.g., -2 hours and -15 minutes becomes -2h 15m.\n        // This means the minutes component's absolute value is added to the absolute hours in minutes,\n        // and the result takes the negative sign.\n        if (hoursOffset < 0) {\n            totalMinutes = FieldUtils.safeAdd(hoursOffset * 60, -Math.abs(minutesOffset));\n        } else { // hoursOffset is zero or positive\n            totalMinutes = FieldUtils.safeAdd(hoursOffset * 60, minutesOffset);\n        }\n\n        int offsetMillis;\n        try {\n            offsetMillis = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n        } catch (ArithmeticException ex) {\n            // This catch handles potential overflow during multiplication, though with the\n            // given input constraints, `totalMinutes` should be within `int` limits\n            // and thus multiplication by `MILLIS_PER_MINUTE` should also be safe within `int`.\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        return forOffsetMillis(offsetMillis);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}