{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    // Disallow positive hours with negative minutes.\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Positive hours must not have negative minutes\");\n    }\n    // For -ve hours, allow both -ve and +ve minutes.\n    // For zero hours, sign of minutes determines sign of offset.\n    int offsetMinutes;\n    if (hoursOffset < 0) {\n        offsetMinutes = hoursOffset * 60 - Math.abs(minutesOffset);\n    } else if (hoursOffset > 0) {\n        offsetMinutes = hoursOffset * 60 + minutesOffset;\n    } else { // hoursOffset == 0\n        offsetMinutes = minutesOffset;\n    }\n    // Check that offset does not exceed range +- 23:59:59.000\n    int absOffsetMinutes = Math.abs(offsetMinutes);\n    if (absOffsetMinutes > (23 * 60 + 59)) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    int offset;\n    try {\n        offset = FieldUtils.safeMultiply(offsetMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}