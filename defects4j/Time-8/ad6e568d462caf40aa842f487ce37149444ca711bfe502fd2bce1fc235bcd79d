{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    // Disallow positive hours with negative minutes\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + hoursOffset + \":\" + minutesOffset);\n    }\n    int offset = 0;\n    try {\n        int totalMinutes;\n        if (hoursOffset < 0) {\n            // negative hour: minutes sign is ignored, both minute values are subtracted from zero\n            totalMinutes = hoursOffset * 60 - Math.abs(minutesOffset);\n        } else if (hoursOffset == 0 && minutesOffset < 0) {\n            // zero hour and negative minutes: negative offset\n            totalMinutes = minutesOffset;\n        } else {\n            // positive hour (with positive or zero minutes)\n            totalMinutes = hoursOffset * 60 + minutesOffset;\n        }\n        // The maximum allowed offset is 23:59 (1439 min), minimum -23:59 (-1439 min)\n        if (totalMinutes > 23 * 60 + 59 || totalMinutes < -(23 * 60 + 59)) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}