{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    // Validate combinations: positive hour cannot have negative minutes\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + hoursOffset + \", \" + minutesOffset);\n    }\n    int totalMinutes;\n    if (hoursOffset < 0) {\n        // -ve hours, minutes sign does not matter as per table - both -ve and +ve minutes mean offset further away from zero\n        totalMinutes = hoursOffset * 60 - Math.abs(minutesOffset);\n    } else if (hoursOffset > 0) {\n        // +ve hours, +ve minutes only (already checked not -ve)\n        totalMinutes = hoursOffset * 60 + minutesOffset;\n    } else {\n        // zero hours, can have +ve or -ve minutes\n        totalMinutes = minutesOffset;\n    }\n    // Now range check the total offset is within +/- 23:59:59.000 (that is, +/- 1439 minutes)\n    if (totalMinutes < -1439 || totalMinutes > 1439) {\n        throw new IllegalArgumentException(\"Offset is too large: \" + hoursOffset + \":\" + minutesOffset);\n    }\n    int offset;\n    try {\n        offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}