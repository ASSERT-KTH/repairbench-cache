{
    "generation": "    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        // Check minutes range differently based on hour sign\n        if (hoursOffset >= 0) {\n            if (minutesOffset < 0 || minutesOffset > 59) {\n                throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n            }\n        } else {\n            // For negative hours, minutes can be negative (but will be treated as positive offset)\n            if (minutesOffset < -59 || minutesOffset > 59) {\n                throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n            }\n        }\n        // Calculate total offset in minutes\n        int totalMinutes = hoursOffset * 60 + minutesOffset;\n        // Check if resulting offset would be outside bounds (\u00b123:59)\n        if (totalMinutes < -23 * 60 - 59 || totalMinutes > 23 * 60 + 59) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        try {\n            int offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n            return forOffsetMillis(offset);\n        } catch (ArithmeticException ex) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}