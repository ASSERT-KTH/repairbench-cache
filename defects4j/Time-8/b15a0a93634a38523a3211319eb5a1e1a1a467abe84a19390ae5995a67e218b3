{
    "generation": "import org.joda.time.DateTimeConstants;\nimport org.joda.time.DateTimeZone;\nimport org.joda.time.field.FieldUtils;\n\npublic class DateTimeZone { // Assuming this is part of the DateTimeZone class\n\n    /**\n     * Gets a time zone instance for the specified offset to UTC in hours and minutes.\n     * This method assumes 60 minutes in an hour, and standard length minutes.\n     * <p>\n     * This factory is a convenient way of constructing zones with a fixed offset.\n     * The hours value must be in the range -23 to +23.\n     * The minutes value must be in the range -59 to +59.\n     * The following combinations of sign for the hour and minute are possible:\n     * <pre>\n     *  Hour    Minute    Example    Result\n     *\n     *  +ve     +ve       (2, 15)    +02:15\n     *  +ve     zero      (2, 0)     +02:00\n     *  +ve     -ve       (2, -15)   IllegalArgumentException\n     *\n     *  zero    +ve       (0, 15)    +00:15\n     *  zero    zero      (0, 0)     +00:00\n     *  zero    -ve       (0, -15)   -00:15\n     *\n     *  -ve     +ve       (-2, 15)   -02:15\n     *  -ve     zero      (-2, 0)    -02:00\n     *  -ve     -ve       (-2, -15)  -02:15\n     * </pre>\n     * Note that in versions before 2.3, the minutes had to be zero or positive.\n     *\n     * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n     * @param minutesOffset  the offset in minutes from UTC, from -59 to +59\n     * @return the DateTimeZone object for the offset\n     * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n     *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n     */\n    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        // MODIFIED: Updated minutesOffset validation based on Javadoc requirements\n        // General range for minutesOffset is -59 to +59\n        if (minutesOffset < -59 || minutesOffset > 59) {\n            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n        }\n        // Specific rule: minutes must be non-negative if hours are positive\n        // This handles the (2, -15) case, which should throw an IllegalArgumentException\n        if (hoursOffset > 0 && minutesOffset < 0) {\n            throw new IllegalArgumentException(\"Minutes must be positive if hours are positive: \" + minutesOffset);\n        }\n\n        int totalMinutesOffset;\n        try {\n            // MODIFIED: Corrected offset calculation based on Javadoc examples for sign combinations\n            if (hoursOffset < 0) {\n                // For negative hours, the minutes component's magnitude is added to the hours' magnitude,\n                // and the total offset is negative.\n                // Examples: (-2, 15) -> -2*60 - 15 = -135\n                //           (-2, -15) -> -2*60 - |-15| = -135\n                totalMinutesOffset = FieldUtils.safeAdd(hoursOffset * 60, -Math.abs(minutesOffset));\n            } else { // hoursOffset >= 0\n                // For positive or zero hours, minutes are added directly.\n                // Examples: (2, 15) -> 2*60 + 15 = 135\n                //           (0, -15) -> 0*60 + (-15) = -15\n                totalMinutesOffset = FieldUtils.safeAdd(hoursOffset * 60, minutesOffset);\n            }\n            \n            int offsetMillis = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n            return forOffsetMillis(offsetMillis);\n        } catch (ArithmeticException ex) {\n            // Catch potential overflow during offset calculation if result exceeds int range\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}