{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    // The following combinations of sign for the hour and minute are possible:\n    // (+ hours, - minutes): not allowed\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + hoursOffset + \",\" + minutesOffset);\n    }\n    int offsetMinutes;\n    if (hoursOffset < 0) {\n        // (-ve hours, any minutes). If minutes is positive, total is more negative.\n        offsetMinutes = hoursOffset * 60 - Math.abs(minutesOffset);\n    } else if (hoursOffset > 0) {\n        // (+ve hours, +ve minutes or zero)\n        offsetMinutes = hoursOffset * 60 + minutesOffset;\n    } else { // hoursOffset == 0\n        // (0, +ve): +ve\n        // (0, -ve): -ve\n        offsetMinutes = minutesOffset;\n    }\n    int offsetMillis;\n    try {\n        offsetMillis = FieldUtils.safeMultiply(offsetMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    // the resulting offset must not exceed +/- 23:59:59.000\n    if (offsetMillis < -DateTimeConstants.MILLIS_PER_DAY + DateTimeConstants.MILLIS_PER_MINUTE ||\n        offsetMillis >  DateTimeConstants.MILLIS_PER_DAY - DateTimeConstants.MILLIS_PER_MINUTE) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offsetMillis);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}