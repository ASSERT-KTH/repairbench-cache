{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    // Special case for UTC\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    // Validate hours are in range\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    // Validate minutes are in the allowed range (-59 to 59)\n    if (Math.abs(minutesOffset) > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    // For positive hours, minutes must not be negative.\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Positive hours cannot be combined with negative minutes: \" + hoursOffset + \", \" + minutesOffset);\n    }\n\n    int totalMinutes;\n    if (hoursOffset == 0) {\n        // When hours is zero, use minutes as provided.\n        totalMinutes = minutesOffset;\n    } else if (hoursOffset > 0) {\n        // For positive hours, add the minutes.\n        totalMinutes = hoursOffset * 60 + minutesOffset;\n    } else { // hoursOffset < 0\n        // For negative hours, the offset is always negative.\n        // We subtract the absolute value of minutesOffset whether it's positive or negative.\n        totalMinutes = hoursOffset * 60 - Math.abs(minutesOffset);\n    }\n\n    int offsetMillis;\n    try {\n        offsetMillis = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offsetMillis);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}