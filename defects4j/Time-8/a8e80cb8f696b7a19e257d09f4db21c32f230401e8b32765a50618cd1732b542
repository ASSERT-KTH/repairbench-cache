{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    // The minutes must not be negative when hours is positive\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);\n    }\n    // The minutes must not be positive when hours is negative\n    if (hoursOffset < 0 && minutesOffset > 0) {\n        // Legal: (-2, 15) --> -2*60 - 15 == -135, i.e., minus 2:15, so it's legal\n        // But according to table, -2, 15 => -02:15 (so should be treated as -2 hours minus 15 min)\n        // So leave as legal\n        minutesOffset = -minutesOffset;\n    }\n    int totalMinutes;\n    if (hoursOffset < 0 || (hoursOffset == 0 && minutesOffset < 0)) {\n        totalMinutes = hoursOffset * 60 - Math.abs(minutesOffset);\n    } else {\n        totalMinutes = hoursOffset * 60 + Math.abs(minutesOffset);\n    }\n    // Check range: only allow offsets between -23:59 and +23:59\n    if (totalMinutes < -((23 * 60) + 59) || totalMinutes > (23 * 60) + 59) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    int offset;\n    try {\n        offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}