{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    // Illegal combinations: positive hour and negative minutes, per documentation\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Positive hours must not be paired with negative minutes\");\n    }\n    int totalMinutes;\n    if (hoursOffset < 0) {\n        // For negative hours, the sign of the minutes follows the documentation:\n        // (-2, 15) => -2:15; (-2, -15) => -2:15, i.e. always subtract abs(minutes)\n        totalMinutes = hoursOffset * 60 - Math.abs(minutesOffset);\n    } else if (hoursOffset == 0 && minutesOffset < 0) {\n        // For (0, -15) => -00:15\n        totalMinutes = minutesOffset;\n    } else {\n        // For positive hours, and (0, pos)\n        totalMinutes = hoursOffset * 60 + minutesOffset;\n    }\n    int offset;\n    try {\n        offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    // Must not exceed maximum allowed offset\n    if (offset < -DateTimeConstants.MILLIS_PER_DAY + DateTimeConstants.MILLIS_PER_MINUTE ||\n        offset > DateTimeConstants.MILLIS_PER_DAY - DateTimeConstants.MILLIS_PER_MINUTE) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}