{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    // zero offset is always UTC\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    // hours must be in -23..+23\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    // minutes must be in -59..+59\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    // minutes negative when hours positive is illegal\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Minutes must be positive when hours is positive\");\n    }\n    // compute total offset in minutes\n    int totalMinutes;\n    if (hoursOffset < 0) {\n        // negative hours: subtract the absolute minutes\n        totalMinutes = hoursOffset * 60 - Math.abs(minutesOffset);\n    } else {\n        // zero or positive hours: add minutes\n        totalMinutes = hoursOffset * 60 + minutesOffset;\n    }\n    // convert to milliseconds, checking overflow\n    final int offsetMillis;\n    try {\n        offsetMillis = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offsetMillis);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}