{
    "generation": "    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        // Check minutes range separately for positive and negative hours (based on rules in doc)\n        if (hoursOffset >= 0) {\n            if (minutesOffset < 0 || minutesOffset > 59) {\n                throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n            }\n        } else {\n            if (minutesOffset < -59 || minutesOffset > 59) {\n                throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n            }\n        }\n        int offset = 0;\n        try {\n            int totalMinutesOffset = hoursOffset * 60 + minutesOffset;\n            if (totalMinutesOffset < -1439 || totalMinutesOffset > 1439) {\n                throw new IllegalArgumentException(\"Offset is too large\");\n            }\n            offset = FieldUtils.safeMultiply(totalMinutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n        } catch (ArithmeticException ex) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        return forOffsetMillis(offset);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}