{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n\n    // Check for illegal combination: positive hour and negative minute\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Positive hours must not have negative minutes\");\n    }\n    // For 0 hours, negative minutes is allowed (treated as negative offset)\n    // For negative hours, minutes offset must be treated as negative if negative, or negative if positive (always more negative)\n    int totalMinutes;\n    if (hoursOffset < 0) {\n        totalMinutes = hoursOffset * 60 - Math.abs(minutesOffset);\n    } else if (hoursOffset == 0 && minutesOffset < 0) {\n        totalMinutes = minutesOffset;\n    } else {\n        totalMinutes = hoursOffset * 60 + minutesOffset;\n    }\n\n    // Limit resulting offset to +/- 23:59:59.000 (but we only reach max/min at 23:59 or -23:59)\n    if (totalMinutes < -23 * 60 - 59 || totalMinutes > 23 * 60 + 59) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    int offset;\n    try {\n        offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}