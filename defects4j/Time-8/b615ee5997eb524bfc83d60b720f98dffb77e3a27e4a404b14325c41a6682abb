{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    \n    // Enforce invalid combinations\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Positive hours must not have negative minutes\");\n    }\n    // -ve hour, -ve minutes is okay (produces -HH:MM)\n    // zero hours, negative minutes is okay (produces -00:MM)\n\n    int offsetMinutes;\n    if (hoursOffset < 0 || (hoursOffset == 0 && minutesOffset < 0)) {\n        // negative timezone\n        offsetMinutes = hoursOffset * 60 - Math.abs(minutesOffset);\n    } else {\n        // positive timezone or zero + positive minutes\n        offsetMinutes = hoursOffset * 60 + minutesOffset;\n    }\n    // Check that the offset does not exceed the bounds (+/-23:59:59.000)\n    int maxOffset = 23 * 60 + 59; // 23:59 in minutes\n    if (offsetMinutes > maxOffset || offsetMinutes < -maxOffset) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    int offsetMillis;\n    try {\n        offsetMillis = FieldUtils.safeMultiply(offsetMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offsetMillis);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}