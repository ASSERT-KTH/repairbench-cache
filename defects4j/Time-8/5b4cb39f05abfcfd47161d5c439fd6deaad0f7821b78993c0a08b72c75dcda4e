{
    "generation": "    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        if (minutesOffset < -59 || minutesOffset > 59) {\n            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n        }\n        if (hoursOffset > 0 && minutesOffset < 0) {\n            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n        }\n        if (hoursOffset < 0 && minutesOffset < 0) {\n            // For negative hours and minutes, we need to adjust both to negative\n            minutesOffset = -minutesOffset;\n        }\n        int offset = 0;\n        try {\n            int hoursInMinutes = hoursOffset * 60;\n            if (hoursInMinutes < 0 && minutesOffset > 0) {\n                // Both hours and minutes are negative (but minutes was made positive in previous step)\n                offset = (hoursInMinutes - minutesOffset) * DateTimeConstants.MILLIS_PER_MINUTE;\n            } else {\n                offset = (hoursInMinutes + minutesOffset) * DateTimeConstants.MILLIS_PER_MINUTE;\n            }\n        } catch (ArithmeticException ex) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        return forOffsetMillis(offset);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}