{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    // Disallow positive hour with negative minute (e.g., (2, -15))\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Positive hours must not have negative minutes\");\n    }\n\n    int offsetMinutes;\n    try {\n        if (hoursOffset < 0) {\n            if (minutesOffset > 0) {\n                // normalize, e.g., (-2,15) -> -2*60 -15 = -135 minutes\n                offsetMinutes = hoursOffset * 60 - minutesOffset;\n            } else {\n                offsetMinutes = hoursOffset * 60 + minutesOffset; // note both negative\n            }\n        } else if (hoursOffset == 0) {\n            offsetMinutes = minutesOffset;\n        } else {\n            // hoursOffset > 0\n            offsetMinutes = hoursOffset * 60 + minutesOffset;\n        }\n        int offset = FieldUtils.safeMultiply(offsetMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n        return forOffsetMillis(offset);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}