{
    "generation": "    /**\n     * Gets a time zone instance for the specified offset to UTC in hours and minutes.\n     * This method assumes 60 minutes in an hour, and standard length minutes.\n     * <p>\n     * This factory is a convenient way of constructing zones with a fixed offset.\n     * The hours value must be in the range -23 to +23.\n     * The minutes value must be in the range -59 to +59.\n     * The following combinations of sign for the hour and minute are possible:\n     * <pre>\n     *  Hour    Minute    Example    Result\n     *\n     *  +ve     +ve       (2, 15)    +02:15\n     *  +ve     zero      (2, 0)     +02:00\n     *  +ve     -ve       (2, -15)   IllegalArgumentException\n     *\n     *  zero    +ve       (0, 15)    +00:15\n     *  zero    zero      (0, 0)     +00:00\n     *  zero    -ve       (0, -15)   -00:15\n     *\n     *  -ve     +ve       (-2, 15)   -02:15\n     *  -ve     zero      (-2, 0)    -02:00\n     *  -ve     -ve       (-2, -15)  -02:15\n     * </pre>\n     * Note that in versions before 2.3, the minutes had to be zero or positive.\n     *\n     * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n     * @param minutesOffset  the offset in minutes from UTC, from -59 to +59\n     * @return the DateTimeZone object for the offset\n     * @throws IllegalArgumentException if any value is out of range, the minutes are negative\n     *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000\n     */\n    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        // Corrected minutesOffset range check: minutes can be between -59 and 59\n        if (minutesOffset < -59 || minutesOffset > 59) {\n            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n        }\n\n        // According to Javadoc, if hoursOffset is positive, minutesOffset cannot be negative.\n        // Example: (2, -15) should throw IllegalArgumentException.\n        if (hoursOffset > 0 && minutesOffset < 0) {\n            throw new IllegalArgumentException(\"Minutes must be positive or zero if hours are positive\");\n        }\n\n        int totalOffsetMinutes;\n        // Calculate the total offset in minutes based on the sign combinations\n        if (hoursOffset < 0) {\n            // For negative hours, the minutes (regardless of their sign) contribute to the\n            // overall magnitude of the negative offset. For example, -2 hours and +15 minutes\n            // should result in -02:15, which is -120 - 15 = -135 minutes.\n            // Similarly, -2 hours and -15 minutes should also result in -02:15.\n            totalOffsetMinutes = hoursOffset * 60 - Math.abs(minutesOffset);\n        } else { // hoursOffset >= 0 (positive or zero)\n            // For positive or zero hours, minutes are simply added.\n            // The case where hoursOffset > 0 and minutesOffset < 0 is handled above.\n            totalOffsetMinutes = hoursOffset * 60 + minutesOffset;\n        }\n\n        int offset = 0;\n        try {\n            offset = FieldUtils.safeMultiply(totalOffsetMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n        } catch (ArithmeticException ex) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        return forOffsetMillis(offset);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}