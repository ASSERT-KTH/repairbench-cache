{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (minutesOffset < -59 || minutesOffset > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    // Disallow +ve hours with -ve minutes.\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + hoursOffset + \":\" + minutesOffset);\n    }\n    int offsetMinutes;\n    if (hoursOffset < 0) {\n        // For negative hours, add signed minutes (sign follows hour, even if minute is +)\n        offsetMinutes = hoursOffset * 60 - Math.abs(minutesOffset);\n    } else if (hoursOffset == 0 && minutesOffset < 0) {\n        // For (-00:XX)\n        offsetMinutes = -Math.abs(minutesOffset);\n    } else {\n        // Positive or zero hours, non-negative minutes\n        offsetMinutes = hoursOffset * 60 + minutesOffset;\n    }\n    // Check absolute range (must not exceed +/- 23:59:59.000)\n    if (offsetMinutes < -((23 * 60) + 59) || offsetMinutes > ((23 * 60) + 59)) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    int offsetMillis = FieldUtils.safeMultiply(offsetMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    return forOffsetMillis(offsetMillis);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}