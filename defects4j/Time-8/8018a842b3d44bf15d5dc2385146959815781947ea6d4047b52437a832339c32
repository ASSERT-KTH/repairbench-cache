{
    "generation": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n    if (hoursOffset == 0 && minutesOffset == 0) {\n        return DateTimeZone.UTC;\n    }\n    if (hoursOffset < -23 || hoursOffset > 23) {\n        throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n    }\n    if (Math.abs(minutesOffset) > 59) {\n        throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n    }\n    if (hoursOffset > 0 && minutesOffset < 0) {\n        throw new IllegalArgumentException(\"Minutes must be non-negative when hours are positive: \" + minutesOffset);\n    }\n\n    int totalMinutes;\n    if (hoursOffset > 0) {\n        // For positive hour offsets, minutes must be non-negative.\n        totalMinutes = hoursOffset * 60 + minutesOffset;\n    } else if (hoursOffset < 0) {\n        // For negative hour offsets, regardless of the sign of minutes,\n        // the offset is always negative.\n        totalMinutes = - (Math.abs(hoursOffset) * 60 + Math.abs(minutesOffset));\n    } else { // hoursOffset == 0\n        // When hours are zero, we take the sign of the minutes.\n        totalMinutes = minutesOffset;\n    }\n\n    int offset;\n    try {\n        offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n    } catch (ArithmeticException ex) {\n        throw new IllegalArgumentException(\"Offset is too large\");\n    }\n    return forOffsetMillis(offset);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}