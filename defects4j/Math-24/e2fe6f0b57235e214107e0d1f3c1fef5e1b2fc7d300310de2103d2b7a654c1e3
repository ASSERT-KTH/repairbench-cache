{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected UnivariatePointValuePair doOptimize() {\n        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n        final double lo = getMin();\n        final double mid = getStartValue();\n        final double hi = getMax();\n\n        // Optional additional convergence criteria.\n        final ConvergenceChecker<UnivariatePointValuePair> checker\n            = getConvergenceChecker();\n\n        double a;\n        double b;\n        if (lo < hi) {\n            a = lo;\n            b = hi;\n        } else {\n            a = hi;\n            b = lo;\n        }\n\n        double x = mid; // x is the point with the currently lowest function value\n        double v = x;   // v is the second lowest\n        double w = x;   // w is the previous value of v\n        double d = 0;\n        double e = 0;\n        double fx = computeObjectiveValue(x); // fx is the function value at x\n        if (!isMinim) {\n            fx = -fx; // For minimization, internal logic works with negative values for maximization\n        }\n        double fv = fx; // fv is the function value at v\n        double fw = fx; // fw is the function value at w\n\n        // 'previous' and 'current' variables are primarily for the convergence checker.\n        // 'current' will hold the point (u, fu) of the most recent evaluation.\n        // 'previous' will hold the (u, fu) from the iteration before that.\n        // The algorithm itself consistently tracks the best point found so far in (x, fx).\n        UnivariatePointValuePair previous = null;\n        UnivariatePointValuePair current\n            = new UnivariatePointValuePair(x, isMinim ? fx : -fx); // Initialize with the starting point (x, fx)\n\n        int iter = 0;\n        while (true) {\n            final double m = 0.5 * (a + b);\n            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\n            final double tol2 = 2 * tol1;\n\n            // Default stopping criterion (Brent's criterion).\n            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\n            if (!stop) {\n                double p = 0;\n                double q = 0;\n                double r = 0;\n                double u = 0; // u is the trial point for the next evaluation\n\n                if (FastMath.abs(e) > tol1) { // Fit parabola.\n                    r = (x - w) * (fx - fv);\n                    q = (x - v) * (fx - fw);\n                    p = (x - v) * q - (x - w) * r;\n                    q = 2 * (q - r);\n\n                    if (q > 0) {\n                        p = -p;\n                    } else {\n                        q = -q;\n                    }\n\n                    r = e;\n                    e = d;\n\n                    if (p > q * (a - x) &&\n                        p < q * (b - x) &&\n                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {\n                        // Parabolic interpolation step.\n                        d = p / q;\n                        u = x + d;\n\n                        // f must not be evaluated too close to a or b.\n                        if (u - a < tol2 || b - u < tol2) {\n                            if (x <= m) {\n                                d = tol1;\n                            } else {\n                                d = -tol1;\n                            }\n                        }\n                    } else {\n                        // Golden section step.\n                        if (x < m) {\n                            e = b - x;\n                        } else {\n                            e = a - x;\n                        }\n                        d = GOLDEN_SECTION * e;\n                    }\n                } else {\n                    // Golden section step.\n                    if (x < m) {\n                        e = b - x;\n                    } else {\n                        e = a - x;\n                    }\n                    d = GOLDEN_SECTION * e;\n                }\n\n                // Update by at least \"tol1\".\n                if (FastMath.abs(d) < tol1) {\n                    if (d >= 0) {\n                        u = x + tol1;\n                    } else {\n                        u = x - tol1;\n                    }\n                } else {\n                    u = x + d;\n                }\n\n                double fu = computeObjectiveValue(u);\n                if (!isMinim) {\n                    fu = -fu;\n                }\n\n                // User-defined convergence checker.\n                // Update 'previous' to the 'current' point from the last iteration\n                // Update 'current' to the newly evaluated point (u, fu)\n                previous = current;\n                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\n\n                if (checker != null) {\n                    if (checker.converged(iter, previous, current)) {\n                        // If the checker signals convergence, return the best point found so far (x, fx).\n                        // Do not return 'current' (u, fu) if it's worse than (x, fx).\n                        return new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n                    }\n                }\n\n                // Update a, b, v, w and x based on the new point 'u'.\n                // If fu is better or equal to fx, u becomes the new best point.\n                if (fu <= fx) {\n                    if (u < x) {\n                        b = x;\n                    } else {\n                        a = x;\n                    }\n                    v = w;\n                    fv = fw;\n                    w = x;\n                    fw = fx;\n                    x = u; // u is the new best point\n                    fx = fu; // fu is the new best function value\n                } else { // fu is worse than fx\n                    if (u < x) {\n                        a = u;\n                    } else {\n                        b = u;\n                    }\n                    // Update v, w, fv, fw but x and fx remain the overall best.\n                    if (fu <= fw ||\n                        Precision.equals(w, x)) {\n                        v = w;\n                        fv = fw;\n                        w = u;\n                        fw = fu;\n                    } else if (fu <= fv ||\n                               Precision.equals(v, x) ||\n                               Precision.equals(v, w)) {\n                        v = u;\n                        fv = fu;\n                    }\n                }\n            } else { // Default termination (Brent's criterion).\n                // When terminating by Brent's criterion, return the best point found so far (x, fx).\n                // The 'current' variable holds (u, fu) which might be worse than (x, fx).\n                return new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n            }\n            ++iter;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}