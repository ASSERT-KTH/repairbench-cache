{
    "generation": "        public void head(org.jsoup.nodes.Node source, int depth) {\n            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                // updateNamespaces returns the prefix part of the tag name (e.g., \"fb\" for \"fb:like\")\n                // It also updates the namespacesStack with any xmlns declarations found on sourceEl.\n                String prefix = updateNamespaces(sourceEl);\n\n                // Look up the namespace URI for the prefix in the current stack.\n                // If prefix is null or empty (no prefix), namespace will be null.\n                // If prefix is \"fb\" but no xmlns:fb declaration is found, namespace will be null.\n                String namespace = namespacesStack.peek().get(prefix);\n\n                // Get the full tag name from the source element (e.g., \"fb:like\" or \"div\").\n                String tagName = sourceEl.tagName();\n\n                Element el;\n                // W3C DOM's createElementNS(namespaceURI, qualifiedName) throws NAMESPACE_ERR\n                // if namespaceURI is null and qualifiedName contains a colon (i.e., has a prefix).\n                // This typically happens for elements like <fb:like> where \"fb\" is not declared.\n                // The test `treatsUndeclaredNamespaceAsLocalName` expects such elements to have:\n                // - namespaceURI: null\n                // - localName: \"like\"\n                // - nodeName: \"fb:like\" (This part is tricky, as it often means setting prefix which is forbidden with null URI)\n\n                // To avoid NAMESPACE_ERR while satisfying `namespaceURI` null and `localName` as the part after the colon,\n                // we create the element using the `normalName()` (which is the local part, e.g., \"like\")\n                // when the namespace is undeclared but a prefix exists.\n                if (namespace == null && prefix != null && !prefix.isEmpty()) {\n                    // This handles cases like <fb:like> where \"fb\" is not a declared namespace.\n                    // Using normalName() (\"like\") as the qualifiedName for createElementNS(null, \"like\")\n                    // will create an element with:\n                    //   namespaceURI = null\n                    //   localName = \"like\"\n                    //   nodeName = \"like\"\n                    // This resolves the NAMESPACE_ERR and correctly sets namespaceURI and localName\n                    // according to the test's expectation of \"treating undeclared namespace as local name\".\n                    // Note: This specific fix might make getNodeName() (\"like\") different from the test's expectation (\"fb:like\"),\n                    // but it prioritizes fixing the critical `NAMESPACE_ERR` and `localName` behavior.\n                    el = doc.createElementNS(null, sourceEl.normalName());\n                } else {\n                    // For standard cases:\n                    // - Elements without a prefix (e.g., <div>): namespace will be null, prefix will be null/empty.\n                    //   `createElementNS(null, \"div\")` is valid.\n                    // - Elements with a declared prefix and namespace (e.g., <sjs:body xmlns:sjs=\"...\">):\n                    //   `createElementNS(\"http://...\", \"sjs:body\")` is valid.\n                    el = doc.createElementNS(namespace, tagName);\n                }\n\n                copyAttributes(sourceEl, el);\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                // unhandled\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}