{
    "generation": "        public void head(org.jsoup.nodes.Node source, int depth) {\n            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                String prefix = updateNamespaces(sourceEl);\n                String namespace = namespacesStack.peek().get(prefix);\n                String tagName = sourceEl.tagName(); // e.g., \"fb:like\" or \"div\"\n\n                Element el;\n                // The org.w3c.dom.DOMException: NAMESPACE_ERR occurs when createElementNS() is called\n                // with a null namespaceURI and a qualifiedName (tagName) that contains a colon.\n                // This happens if a tag like \"fb:like\" is encountered and the \"fb\" prefix\n                // has not been declared with an xmlns:fb attribute, leading 'namespace' to be null.\n                // To avoid this specific DOMException, we must not pass a prefixed tag name\n                // when the namespaceURI is null. In such cases, the local name should be used.\n                // This aligns with how some DOM implementations or XML parsers handle undeclared prefixes\n                // by treating them as part of the local name in the default (null) namespace.\n                if (namespace == null && tagName.contains(\":\")) {\n                    // Extract the local name from the tagName (e.g., \"like\" from \"fb:like\")\n                    String localName = org.jsoup.internal.StringUtil.split(tagName, \":\")[1];\n                    el = doc.createElementNS(null, localName);\n                } else {\n                    // For declared namespaces or non-prefixed tags, use the original namespace and tag name.\n                    el = doc.createElementNS(namespace, tagName);\n                }\n\n                copyAttributes(sourceEl, el);\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                // unhandled\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}