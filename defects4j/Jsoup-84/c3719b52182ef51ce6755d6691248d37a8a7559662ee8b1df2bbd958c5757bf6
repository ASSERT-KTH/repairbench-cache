{
    "generation": "        public void head(org.jsoup.nodes.Node source, int depth) {\n            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                // Update namespaces defined ON this element first - modifies stack top\n                updateNamespaces(sourceEl);\n\n                final String tagName = sourceEl.tagName(); // e.g., \"fb:like\" or \"div\"\n                // Get prefix *from the tag name* (\"fb\" or null/empty string)\n                // Jsoup normalizes tag names to lower case, regardless of input case.\n                final String prefix = sourceEl.tag().prefix();\n                // Look up the namespace for the tag's prefix in the current scope (including any new xmlns on this node)\n                final String namespace = namespacesStack.peek().get(prefix);\n\n                Element el;\n                // If a namespace is defined for the prefix (or the default namespace for an empty prefix), use createElementNS\n                if (namespace != null) {\n                    el = doc.createElementNS(namespace, tagName);\n                } else {\n                    // If no namespace is defined for the prefix (e.g., an undeclared prefix like \"fb:like\"),\n                    // or there's no prefix and no default namespace defined.\n                    // Use the basic createElement. This avoids a NAMESPACE_ERR for element creation\n                    // like <fb:like> where fb is not declared. It creates an element with\n                    // namespaceURI=null, nodeName=tagName (e.g., \"fb:like\"), and localName=null per DOM Core spec.\n                    el = doc.createElement(tagName);\n                }\n\n                copyAttributes(sourceEl, el); // copy attributes (needs to be namespace aware too)\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                // Note: DataNodes are not valid in DOM Core level 3 where CDATA nodes inherit from Text.\n                // Treat as Text for compatibility with the original code's behavior.\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                // unhandled node types (e.g., DocumentType, EntityReference)\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}