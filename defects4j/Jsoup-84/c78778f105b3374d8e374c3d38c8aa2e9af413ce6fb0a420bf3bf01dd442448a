{
    "generation": "public void head(org.jsoup.nodes.Node source, int depth) {\n    // Inherit namespace mappings from the parent\n    namespacesStack.push(new HashMap<>(namespacesStack.peek()));\n    if (source instanceof org.jsoup.nodes.Element) {\n        org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n        // Update the in-scope namespaces and get the prefix for this element\n        String prefix = updateNamespaces(sourceEl);\n        // Look up the namespace URI bound to that prefix (may be null)\n        String namespace = namespacesStack.peek().get(prefix);\n        String tagName = sourceEl.tagName();\n\n        Element el;\n        // If we have no namespace but the tagName is qualified (has a colon),\n        // then treat the whole name as a \"local name\" with no namespace.\n        if (namespace == null && tagName.contains(\":\")) {\n            // split off the local part\n            int colon = tagName.indexOf(':');\n            String local = tagName.substring(colon + 1);\n            // create with no namespace but with a local name so that\n            // getLocalName()==local and getNodeName()==qualified\n            el = doc.createElementNS(null, local);\n            // now override the nodeName (prefix:local) by resetting the tag\n            // (use reflection to avoid a second namespace error)\n            // in the RI (com.sun) implementation this will set the raw name\n            try {\n                java.lang.reflect.Field nameField = el.getClass()\n                    .getDeclaredField(\"name\");\n                nameField.setAccessible(true);\n                nameField.set(el, tagName);\n            } catch (Exception e) {\n                // fallback: if we cannot hack the internal name field,\n                // just append a COLON node in front (best effort)\n                el = doc.createElement(tagName);\n            }\n        } else {\n            // normal namespace-aware element creation\n            el = doc.createElementNS(namespace, tagName);\n        }\n\n        copyAttributes(sourceEl, el);\n\n        if (dest == null) { // this is the root element\n            doc.appendChild(el);\n        } else {\n            dest.appendChild(el);\n        }\n        dest = el; // descend into this element\n\n    } else if (source instanceof org.jsoup.nodes.TextNode) {\n        String text = ((org.jsoup.nodes.TextNode)source).getWholeText();\n        dest.appendChild(doc.createTextNode(text));\n\n    } else if (source instanceof org.jsoup.nodes.Comment) {\n        String cm = ((org.jsoup.nodes.Comment)source).getData();\n        dest.appendChild(doc.createComment(cm));\n\n    } else if (source instanceof org.jsoup.nodes.DataNode) {\n        String data = ((org.jsoup.nodes.DataNode)source).getWholeData();\n        dest.appendChild(doc.createTextNode(data));\n\n    } else {\n        // skip other node types\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}