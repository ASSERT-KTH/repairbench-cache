{
    "generation": "        public void head(org.jsoup.nodes.Node source, int depth) {\n            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                // updateNamespaces updates the current namespace stack based on xmlns attributes\n                // and returns the prefix of sourceEl's tag name.\n                String prefix = updateNamespaces(sourceEl);\n                // Get the resolved namespace URI for the element's prefix from the current stack.\n                // This will be null if the prefix is not declared in the current scope.\n                String namespace = namespacesStack.peek().get(prefix);\n                \n                String tagName = sourceEl.tagName(); // Jsoup's tag name, e.g., \"fb:like\" or \"div\"\n\n                Element el;\n                // The W3C DOM's createElementNS method throws a NAMESPACE_ERR if the\n                // namespaceURI is null or empty, and the qualifiedName (tagName) contains a colon.\n                // This occurs when a prefix is used without being declared (e.g., <fb:like> without xmlns:fb).\n                // In such cases, the element should be created without a namespace URI,\n                // and the qualifiedName should serve as the nodeName, with the localName derived from it.\n                // doc.createElement(tagName) handles this correctly by treating the entire tagName\n                // as the qualified name for an element without a namespace.\n                if (namespace == null || namespace.isEmpty()) {\n                    el = doc.createElement(tagName);\n                } else {\n                    el = doc.createElementNS(namespace, tagName);\n                }\n\n                copyAttributes(sourceEl, el);\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                // unhandled\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}