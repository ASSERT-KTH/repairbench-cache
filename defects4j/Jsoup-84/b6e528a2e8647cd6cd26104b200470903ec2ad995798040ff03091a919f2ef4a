{
    "generation": "        public void head(org.jsoup.nodes.Node source, int depth) {\n            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                // retrieve namespace and tag name\n                final String prefix = updateNamespaces(sourceEl); // updates stack based on xmlns attributes, returns prefix from tag name\n                final String namespace = namespacesStack.peek().get(prefix); // get namespace URI for prefix\n                final String tagName = sourceEl.tagName(); // includes prefix if present (e.g., \"fb:like\")\n\n                Element el;\n                // DOM strictly enforces namespaces. If a prefix is present in the tag name, a namespace must be supplied.\n                // If the prefix is undeclared (namespace==null), Jsoup treats it as part of the tag name,\n                // whereas DOM would throw a NAMESPACE_ERR. To achieve Jsoup's behavior, we create the element\n                // without a namespace using the full tag name when the namespace URI is null *and* a prefix exists.\n                if (namespace == null && tagName.contains(\":\")) {\n                    // prefix is undeclared - treat as simple element name\n                    el = doc.createElement(tagName);\n                } else {\n                    // prefix is declared, or tag is unprefixed - use namespace (which might be null for unprefixed tags in no namespace)\n                    el = doc.createElementNS(namespace, tagName);\n                }\n\n                copyAttributes(sourceEl, el);\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                // Even DataNodes should be text nodes in XML/HTML DOM? Who uses DataNodes for XML? Only Jsoup.\n                // See https://www.w3.org/TR/REC-xml/#dt-cdsection - CDATA sections are text nodes.\n                // Let's output as TextNode, like TextNode above.\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                // unhandled node types (like DocumentType)\n                // TODO: Support other node types if required\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}