{
    "generation": "        public void head(org.jsoup.nodes.Node source, int depth) {\n            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                // 1. Update namespaces based on xmlns attributes on this element\n                updateNamespaces(sourceEl); // Assume this updates namespacesStack.peek()\n\n                // 2. Determine tag name, prefix, and namespace URI\n                String tagName = sourceEl.tagName(); // The potentially prefixed name (e.g., \"fb:like\", \"div\")\n                String prefix = null;\n                final int colon = tagName.indexOf(':');\n                if (colon > 0) {\n                    prefix = tagName.substring(0, colon);\n                }\n\n                String namespaceUri = null;\n                // Use the map specific to this element's scope (the top of the stack)\n                Map<String, String> currentNamespaces = namespacesStack.peek();\n                if (prefix != null) {\n                    // Lookup the namespace URI for the extracted prefix.\n                    namespaceUri = currentNamespaces.get(prefix);\n                } else {\n                    // If no prefix, check for a default namespace definition (xmlns=\"...\")\n                    namespaceUri = currentNamespaces.get(\"\"); // \"\" is the key for the default namespace\n                }\n\n                // 3. Create the W3C Element\n                Element el;\n                // If a prefix is present BUT its namespace URI is null (meaning prefix is undeclared),\n                // using createElementNS(null, \"prefix:local\") throws NAMESPACE_ERR.\n                // So, we must use createElement(tagName) instead. This creates an element with\n                // namespaceURI=null and nodeName=tagName (e.g., \"fb:like\").\n                // Note: W3C DOM standard states localName should be null for createElement,\n                // which might differ from the test's expectation depending on the underlying impl.\n                // However, this approach avoids the NAMESPACE_ERR exception.\n                if (prefix != null && namespaceUri == null) {\n                    el = doc.createElement(tagName);\n                } else {\n                    // Includes cases:\n                    // - Declared prefix (prefix != null, namespaceUri != null)\n                    // - No prefix, default namespace declared (prefix == null, namespaceUri != null)\n                    // - No prefix, no default namespace (prefix == null, namespaceUri == null -> createElementNS passes null URI)\n                    // In these cases, createElementNS is the appropriate method.\n                    // It expects the qualified name (which might include the prefix) as the second argument.\n                    el = doc.createElementNS(namespaceUri, tagName);\n                }\n\n                // 4. Copy attributes (ensure copyAttributes is namespace-aware if necessary)\n                copyAttributes(sourceEl, el);\n\n                // 5. Append the new element to the tree\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                // unhandled\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}