{
    "generation": "        public void head(org.jsoup.nodes.Node source, int depth) {\n            namespacesStack.push(new HashMap<>(namespacesStack.peek())); // inherit from above on the stack\n            if (source instanceof org.jsoup.nodes.Element) {\n                org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;\n\n                String prefix = updateNamespaces(sourceEl);\n                String namespace = namespacesStack.peek().get(prefix);\n                String tagName = sourceEl.tagName(); // This is the full qualified name, e.g., \"fb:like\"\n\n                Element el;\n                // According to W3C DOM spec, if namespaceURI is null, the qualifiedName passed to createElementNS\n                // must not contain a colon. If it does, a NAMESPACE_ERR is thrown.\n                // This typically happens when an element like <fb:like> has no declared XML namespace for the 'fb' prefix.\n                if (namespace == null && tagName.contains(\":\")) {\n                    // For elements with an undeclared prefix (e.g., \"fb:like\"), where 'fb' has no associated\n                    // namespace URI, creating it with createElementNS(null, \"fb:like\") would throw NAMESPACE_ERR.\n                    // In such cases, we create the element using createElement(), treating the entire\n                    // tag name as a local name without a namespace.\n                    // Note: This approach typically results in the W3C DOM Element's getLocalName()\n                    // returning null, which might differ from a test's expectation of a parsed local name\n                    // (e.g., \"like\"). However, it's the standard compliant way to avoid NAMESPACE_ERR.\n                    el = doc.createElement(tagName);\n                } else {\n                    // For elements with a declared namespace, or elements without a prefix\n                    // (e.g., \"div\", \"html\") even if they don't have a default namespace,\n                    // createElementNS is appropriate.\n                    el = doc.createElementNS(namespace, tagName);\n                }\n                \n                copyAttributes(sourceEl, el);\n                if (dest == null) { // sets up the root\n                    doc.appendChild(el);\n                } else {\n                    dest.appendChild(el);\n                }\n                dest = el; // descend\n            } else if (source instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;\n                Text text = doc.createTextNode(sourceText.getWholeText());\n                dest.appendChild(text);\n            } else if (source instanceof org.jsoup.nodes.Comment) {\n                org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;\n                Comment comment = doc.createComment(sourceComment.getData());\n                dest.appendChild(comment);\n            } else if (source instanceof org.jsoup.nodes.DataNode) {\n                org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;\n                Text node = doc.createTextNode(sourceData.getWholeData());\n                dest.appendChild(node);\n            } else {\n                // unhandled\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}