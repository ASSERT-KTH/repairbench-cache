{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read based on evaluation order.\n   * It returns KILL, if the first reference of that variable is an assignment to that\n   * variable name. It returns MAYBE_LIVE otherwise (variable not found, or\n   * complex case like function call).\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n\n    // Handle NAME node base case: encounter of the variable name.\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n        // If a NAME node is the direct LHS of an assignment, its KILL effect\n        // happens *after* the RHS is evaluated. So, encountering the NAME\n        // node itself during traversal doesn't represent the KILL time.\n        // We return MAYBE_LIVE and let the ASSIGN node handler determine the order.\n        // Any other occurrence of the NAME is a READ.\n        // Note: NodeUtil.isLhs checks if the parent is ASSIGN, INC, DEC, or\n        // FOR_IN/FOR_OF loop variable. Only ASSIGN matters for the kill-after-rhs logic.\n        // Other LHS cases (like x++ or for(x in ...)) are typically reads or read/writes\n        // where the timing isn't the same as simple assignment.\n        // We refine the check to specifically look for ASSIGN parent.\n        if (n.getParent() != null && n.getParent().isAssign() && n.getParent().getFirstChild() == n) {\n             // This is the NAME on the LHS of an ASSIGN. Defer to ASSIGN handler.\n             return VariableLiveness.MAYBE_LIVE;\n        } else {\n            // Any other reference (RHS, condition, non-assign LHS like x++) is a READ first.\n            return VariableLiveness.READ;\n        }\n    }\n\n    // Special handling for ASSIGN to implement evaluation order:\n    // 1. Evaluate LHS expression (for reads/kills inside it, e.g., array index)\n    // 2. Evaluate RHS expression\n    // 3. Perform assignment (KILL effect)\n    if (n.isAssign()) {\n        Node lhs = n.getFirstChild();\n        Node rhs = n.getLastChild();\n\n        // Check LHS expression first (for reads/kills that happen during its evaluation)\n        // Example: a[x++] = y; -- the read/write of x happens before RHS eval.\n        VariableLiveness lhsState = isVariableReadBeforeKill(lhs, variable);\n        if (lhsState != VariableLiveness.MAYBE_LIVE) {\n             return lhsState; // Found READ/KILL within LHS evaluation.\n        }\n\n        // Check RHS expression next.\n        // Example: x = f(x); -- the read of x in f(x) happens before the KILL.\n        VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);\n        if (rhsState != VariableLiveness.MAYBE_LIVE) {\n            return rhsState; // Found READ/KILL within RHS evaluation.\n        }\n\n        // If no READ/KILL found so far, check if the assignment target IS the variable.\n        // This represents the KILL effect, happening after LHS/RHS evaluation.\n        if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {\n            return VariableLiveness.KILL;\n        }\n\n        // Otherwise, variable not involved or LHS is complex (e.g., obj.prop).\n        // The recursive call on LHS already checked for reads/kills within its structure.\n        return VariableLiveness.MAYBE_LIVE;\n    }\n\n    // Standard recursive traversal for other node types.\n    // Assumes left-to-right, depth-first evaluation for children, which is\n    // an approximation (doesn't handle short-circuiting, etc.).\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      // Skip nodes that represent new scopes or control flow graphs if necessary.\n      // The original code had this check, retaining it. It skips FUNCTION nodes.\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          // Return the first definitive state found during traversal.\n          return state;\n        }\n      }\n    }\n\n    // No read or kill of the variable found within this subtree.\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}