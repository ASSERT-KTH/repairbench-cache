{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        // If the variable is read on the RHS of this assignment, that read\n        // happens before the KILL of the LHS.\n        Node parent = n.getParent();\n        if (parent != null && parent.isAssign()) {\n          Node rhs = parent.getLastChild();\n          // Recursively check the RHS. If the variable is read here,\n          // that read happens before the assignment to 'n' (the LHS) completes.\n          VariableLiveness stateInRhs = isVariableReadBeforeKill(rhs, variable);\n          if (stateInRhs == VariableLiveness.READ) {\n            return VariableLiveness.READ; // Variable is read on RHS before this LHS is killed.\n          }\n        }\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}