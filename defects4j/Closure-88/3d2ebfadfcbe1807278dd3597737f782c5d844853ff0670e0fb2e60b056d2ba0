{
    "generation": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n  class Finder {\n    // Flag to track if kill has already been seen in the current tree.\n    boolean hasKill = false;\n    // Flag to track if the variable was read before a kill in the same tree.\n    boolean hasReadBeforeKill = false;\n\n    VariableLiveness find(Node n) {\n      if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n        if (hasKill) {\n          // If kill has been seen before this read in the current tree, this is a read\n          // after a kill, so it's a possible live read.\n          return VariableLiveness.MAYBE_LIVE;\n        } else if (NodeUtil.isLhs(n, n.getParent())) {\n          // Mark as kill first, then check if a read occurs before in the same tree.\n          hasKill = true;\n          // The first occurrence is a kill, but there could be a read before in the tree\n          return VariableLiveness.MAYBE_LIVE;\n        } else {\n          // This read is before any kill in the current tree.\n          hasReadBeforeKill = true;\n          return VariableLiveness.READ;\n        }\n      }\n\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (ControlFlowGraph.isEnteringNewCfgNode(child)) {\n          // Don't traverse into new CFG nodes (e.g., functions)\n          continue;\n        }\n        VariableLiveness state = find(child);\n        if (state == VariableLiveness.READ) {\n          return state;\n        } else if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n      if (hasKill && hasReadBeforeKill) {\n        // There's a read before a kill in this subtree\n        return VariableLiveness.MAYBE_LIVE;\n      } else if (hasKill) {\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n  }\n  return new Finder().find(n);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}