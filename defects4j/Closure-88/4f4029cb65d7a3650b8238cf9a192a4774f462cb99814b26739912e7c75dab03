{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    if (NodeUtil.isAssignmentOp(n)) {\n      // For assignment nodes, process RHS first since it's evaluated before LHS.\n      Node rhs = n.getLastChild();\n      if (rhs != null && !ControlFlowGraph.isEnteringNewCfgNode(rhs)) {\n        VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);\n        if (rhsState != VariableLiveness.MAYBE_LIVE) {\n          return rhsState;\n        }\n      }\n      Node lhs = n.getFirstChild();\n      if (lhs != null && !ControlFlowGraph.isEnteringNewCfgNode(lhs)) {\n        VariableLiveness lhsState = isVariableReadBeforeKill(lhs, variable);\n        if (lhsState != VariableLiveness.MAYBE_LIVE) {\n          return lhsState;\n        }\n      }\n    } else {\n      // Process children in their natural order for non-assignment nodes.\n      for (Node child = n.getFirstChild();\n          child != null; child = child.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}