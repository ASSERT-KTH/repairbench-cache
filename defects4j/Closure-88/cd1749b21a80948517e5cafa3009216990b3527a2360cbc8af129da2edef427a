{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    VariableLiveness result = VariableLiveness.MAYBE_LIVE;\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness childResult = isVariableReadBeforeKill(child, variable);\n        if (childResult == VariableLiveness.READ) {\n          // If any child has a READ, we want to keep that as the result\n          return VariableLiveness.READ;\n        } else if (childResult == VariableLiveness.KILL && result != VariableLiveness.READ) {\n          // Keep track of KILL if we haven't seen a READ yet\n          result = VariableLiveness.KILL;\n        }\n      }\n    }\n    return result;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}