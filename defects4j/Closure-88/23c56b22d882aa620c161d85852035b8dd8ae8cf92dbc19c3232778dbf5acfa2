{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   * NOTE: This function does not deal with functions specially, though it is\n   * used in DataFlowAnalysis. OPTIMIZE_ARGUMENTS relies on this functions\n   * behavior with respect to functions.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    // Base case: If it's the variable name.\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n        Node parent = n.getParent();\n        if (NodeUtil.isLhs(n, parent)) {\n            // It's the LHS of an assignment or update.\n            // e.g., x = ..., x += ..., ++x, x--\n\n            // Simple assignment (x = ...). The KILL occurs after the RHS is evaluated.\n            // Let the recursive traversal find any READs in the RHS first.\n            // Return MAYBE_LIVE here, and the post-recursion check below will\n            // handle the KILL if no READ was found earlier.\n            if (parent.isAssign()) {\n                 return VariableLiveness.MAYBE_LIVE;\n            }\n            // Prefix inc/dec (++x, --x). KILL occurs first logically.\n            // NodeUtil.isPostfixIncDec check parent node type and structure.\n            else if ((parent.isInc() || parent.isDec()) && !NodeUtil.isPostfixIncDec(parent)) {\n                 return VariableLiveness.KILL;\n            }\n            // Compound assignment (x += ...) or postfix inc/dec (x++). READ occurs first.\n            else { // NodeUtil.isAssignmentOp(parent) or NodeUtil.isPostfixIncDec(parent)\n                 return VariableLiveness.READ;\n            }\n        } else {\n            // Not LHS, must be a read. e.g. f(x), y = x\n            return VariableLiveness.READ;\n        }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      // Don't traverse into functions, as they have their own scope and CFG.\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state; // Found the first READ or KILL in a child.\n        }\n      }\n    }\n\n    // If no READ or KILL was found in the children, check if the node itself\n    // represents a KILL operation that happens after children evaluation.\n    // This applies specifically to simple assignments (x = ...).\n    if (n.isAssign()) {\n        Node lhs = n.getFirstChild();\n        // Check if the variable is the direct LHS of this assignment.\n        if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {\n             // We returned MAYBE_LIVE for the 'lhs' node in the base case.\n             // Since no earlier READ was found (in RHS or other children),\n             // the KILL action of this assignment is the first relevant event\n             // within this subtree, occurring after child evaluation.\n             return VariableLiveness.KILL;\n        }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}