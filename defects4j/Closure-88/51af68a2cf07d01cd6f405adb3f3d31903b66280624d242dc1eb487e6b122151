{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node parent = n.getParent();\n        // Only consider true \"kills\" for assignment ops (=, +=, etc), not for parameter declarations\n        if (parent != null &&\n            (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)) {\n          // The LHS of an assignment.\n          return VariableLiveness.KILL;\n        } else {\n          // Just a read (e.g. in a var declaration).\n          return VariableLiveness.READ;\n        }\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    // For short-circuiting operators (&&, ||), we must stop\n    // after the first child if the first reference was found there.\n    for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n      // For short-circuiting operators (&&, ||) and the comma operator,\n      // only evaluate subsequent children if the first did not cause an early return.\n      if ((n.isAnd() || n.isOr() || n.isComma()) && child == n.getFirstChild()) {\n        // Only the left child; process right child only if left is MAYBE_LIVE\n        if (child.getNext() != null) {\n          VariableLiveness state = isVariableReadBeforeKill(child, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}