{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // Only consider as KILL if we are on the left of an assignment operator (= or op=)\n        Node parent = n.getParent();\n        if (parent.isAssign() && parent.getFirstChild() == n) {\n          // This is a kill (assignment) for `x = ...`\n          return VariableLiveness.KILL;\n        } else if (parent.isAssignOp() && parent.getFirstChild() == n) {\n          // Compound assignment (+=, -=, etc) also READS then WRITES\n          // So first reference is considered a READ\n          return VariableLiveness.READ;\n        } else {\n          // It's a LHS in, e.g., var x; or function(x), which isn't a KILL in expr context.\n          return VariableLiveness.READ;\n        }\n      } else {\n        // First reference is a READ.\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}