{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      // If 'n' is the LHS of an assignment, the KILL occurs after the RHS is evaluated.\n      // So, if we find 'n' as an LHS, we don't immediately return KILL here.\n      // Instead, we return MAYBE_LIVE to allow the traversal to check the RHS first.\n      // The KILL status will be determined by the parent ASSIGN node (if 'n' is its LHS)\n      // after checking its children.\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        return VariableLiveness.MAYBE_LIVE;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state; // Found a READ or KILL in a child, propagate it.\n        }\n      }\n    }\n\n    // If we've traversed all children and found no READ or KILL,\n    // and if 'n' is an ASSIGN node whose LHS is the variable, then this\n    // assignment is the first reference and constitutes a KILL.\n    // This handles cases like `x = 1`, where 'x' is not read in '1'.\n    if (n.isAssign()) {\n      Node lhs = n.getFirstChild();\n      if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {\n        return VariableLiveness.KILL;\n      }\n    }\n    \n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}