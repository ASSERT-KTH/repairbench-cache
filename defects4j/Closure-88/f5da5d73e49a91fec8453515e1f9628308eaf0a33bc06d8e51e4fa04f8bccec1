{
    "generation": "private VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated.\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // First check children for KILL before READ operations\n  // since KILL takes precedence\n  for (Node child = n.getFirstChild();\n      child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state == VariableLiveness.KILL) {\n        return state;\n      }\n      if (state == VariableLiveness.READ) {\n        // If we find a READ before any KILL in any child, return READ\n        return state;\n      }\n    }\n  }\n\n  // If we didn't find anything in children, check if current node is a binary operation\n  // where the variable might be both read and written (like x = x + 1)\n  if (n.getType() == Token.ASSIGN && n.getFirstChild() != null) {\n    String lhsName = null;\n    Node lhs = n.getFirstChild();\n    if (NodeUtil.isName(lhs)) {\n      lhsName = lhs.getString();\n    }\n\n    if (variable.equals(lhsName)) {\n      // This is an assignment to our variable\n      // We need to check the RHS to see if the variable is read before this kill\n      Node rhs = lhs.getNext();\n      while (rhs != null) {\n        VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);\n        if (rhsState == VariableLiveness.READ) {\n          return VariableLiveness.READ;\n        } else if (rhsState == VariableLiveness.KILL) {\n          // If there's a KILL in the RHS, it might affect our analysis\n          // But since we're looking for the first reference, we can stop here\n          return VariableLiveness.KILL;\n        }\n        rhs = rhs.getNext();\n      }\n    }\n  }\n\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}