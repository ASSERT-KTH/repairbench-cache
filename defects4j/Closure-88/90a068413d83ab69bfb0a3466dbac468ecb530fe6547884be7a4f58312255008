{
    "generation": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n  // If this is the variable we're looking for...\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    Node parent = n.getParent();\n    // ...and it's on the left\u2010hand side of an assignment or var decl,\n    // that is a KILL, but only after any reads in the RHS/initializer.\n    if (NodeUtil.isLhs(n, parent)) {\n      // Special\u2010case simple \u201c=\u201d and \u201cvar x = \u2026\u201d so we can peek into the RHS.\n      if (parent.getType() == Token.ASSIGN || parent.getType() == Token.VAR) {\n        // For \u201cx = expr\u201d the RHS is the next sibling; for \u201cvar x = expr\u201d\n        // the initializer is the first child of the NAME node.\n        Node rhs = (parent.getType() == Token.ASSIGN)\n                   ? n.getNext()\n                   : n.getFirstChild();\n        if (rhs != null) {\n          // Scan the entire RHS for any READ of 'variable'.\n          // If we find one, that read happens before the KILL.\n          java.util.Deque<Node> stack = new java.util.ArrayDeque<Node>();\n          stack.push(rhs);\n          while (!stack.isEmpty()) {\n            Node m = stack.pop();\n            if (NodeUtil.isName(m)\n                && variable.equals(m.getString())\n                && !NodeUtil.isLhs(m, m.getParent())) {\n              return VariableLiveness.READ;\n            }\n            for (Node c = m.getFirstChild(); c != null; c = c.getNext()) {\n              stack.push(c);\n            }\n          }\n        }\n      }\n      // No intervening read: this is a kill.\n      return VariableLiveness.KILL;\n    } else {\n      // A plain read of the variable\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Otherwise, recurse into children in evaluation order.\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}