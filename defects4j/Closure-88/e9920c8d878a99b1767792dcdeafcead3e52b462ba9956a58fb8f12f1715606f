{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          if (state == VariableLiveness.KILL) {\n            return state;\n          }\n          // If we found a READ, we need to continue checking for potential KILLs\n          // that might come before it in evaluation order\n          VariableLiveness otherState = checkForEarlierKill(n, child, variable);\n          if (otherState != VariableLiveness.MAYBE_LIVE) {\n            return otherState;\n          }\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }\n\n  private VariableLiveness checkForEarlierKill(Node parent, Node current, String variable) {\n    // Check siblings before current node for potential KILLs\n    for (Node sibling = parent.getFirstChild();\n         sibling != null && sibling != current;\n         sibling = sibling.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n        VariableLiveness state = isVariableReadBeforeKill(sibling, variable);\n        if (state == VariableLiveness.KILL) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}