{
    "generation": "/**\n * Give an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n */\nprivate VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  // Check for direct reference\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated.\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // First check if there's any KILL in the subtree\n  boolean hasKill = false;\n  boolean hasRead = false;\n\n  // We need to traverse all children to properly handle cases where the variable\n  // is used in multiple places\n  for (Node child = n.getFirstChild();\n      child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state == VariableLiveness.KILL) {\n        hasKill = true;\n      } else if (state == VariableLiveness.READ) {\n        hasRead = true;\n      }\n      // We still need to check all children to find all references\n    }\n  }\n\n  if (hasKill) {\n    if (hasRead) {\n      // There's both a read and kill, so the order matters\n      // We need to find the first reference in evaluation order\n      // Since we can't easily determine order here, we'll conservatively return READ\n      // because if the variable is read before being killed, it's live\n      return VariableLiveness.READ;\n    }\n    return VariableLiveness.KILL;\n  }\n  if (hasRead) {\n    return VariableLiveness.READ;\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}