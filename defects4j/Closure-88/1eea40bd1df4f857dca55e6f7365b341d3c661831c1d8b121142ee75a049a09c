{
    "generation": "/**\n * Give an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.\n */\nprivate VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated.\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Handle logical AND/OR expressions carefully - we need to evaluate all conditions\n  if (n.isAnd() || n.isOr()) {\n    VariableLiveness leftResult = VariableLiveness.MAYBE_LIVE;\n    if (n.getFirstChild() != null) {\n      leftResult = isVariableReadBeforeKill(n.getFirstChild(), variable);\n    }\n\n    VariableLiveness rightResult = VariableLiveness.MAYBE_LIVE;\n    if (n.getFirstChild().getNext() != null) {\n      rightResult = isVariableReadBeforeKill(n.getFirstChild().getNext(), variable);\n    }\n\n    if (leftResult == VariableLiveness.KILL) {\n      // If the first part (left) is KILL, we need to see if there's a read in the right\n      // But since KILL is a definitive action, we should return KILL only if\n      // the right side doesn't override it\n      if (rightResult == VariableLiveness.READ) {\n        // If right is a read, then the KILL might not execute if left is false/true\n        return VariableLiveness.READ;\n      }\n      return VariableLiveness.KILL;\n    }\n\n    if (leftResult != VariableLiveness.MAYBE_LIVE) {\n      return leftResult;\n    }\n    return rightResult;\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  for (Node child = n.getFirstChild();\n      child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}