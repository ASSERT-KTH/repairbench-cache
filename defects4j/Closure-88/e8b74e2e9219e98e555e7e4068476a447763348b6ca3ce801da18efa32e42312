{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state == VariableLiveness.READ) {\n          return VariableLiveness.READ;\n        } else if (state == VariableLiveness.KILL) {\n          // We found a kill, but we still need to check whether there was a read in the LHS.\n          // e.g. (x = read()) && (x = 1)\n          // so just continue\n        }\n      }\n    }\n    // We are here because either \n    // 1) we didn't find a KILL or READ, so we return MAYBE_LIVE or\n    // 2) we found a KILL, but there was no READ and we didn't return in the loop above.\n    return n.isAssign() ? VariableLiveness.MAYBE_LIVE : VariableLiveness.KILL;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}