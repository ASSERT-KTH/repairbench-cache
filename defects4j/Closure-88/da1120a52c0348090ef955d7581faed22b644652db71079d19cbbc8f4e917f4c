{
    "generation": "/**\n * Given an expression and a variable. It returns READ if the first\n * reference of that variable is a read. It returns KILL if the first\n * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n */\nprivate VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    Node parent = n.getParent();\n    if (NodeUtil.isLhs(n, parent)) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated.\n\n      // If the parent is an assignment, we need to check if 'n' is the left side,\n      // but only return KILL if the assignment itself is reached.\n      // For compound assignments like +=, the variable is read first.\n      if (parent.isAssign()) {\n        return VariableLiveness.KILL;\n      } else if (parent.isAssignAdd() || parent.isAssignSub()\n          || parent.isAssignMul() || parent.isAssignDiv()\n          || parent.isAssignMod() || parent.isAssignBitAnd()\n          || parent.isAssignBitOr() || parent.isAssignBitXor()\n          || parent.isAssignLsh() || parent.isAssignRsh()\n          || parent.isAssignUrsh()) {\n        // Compound assignment: variable is read before written\n        return VariableLiveness.READ;\n      } else {\n        return VariableLiveness.KILL;\n      }\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}