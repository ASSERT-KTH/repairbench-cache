{
    "generation": "/**\n * Give an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n */\nprivate VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated.\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  // However, in logical expressions (&&, ||), the right side is not evaluated\n  // if the left side determines the result. We need to handle these cases\n  // differently to avoid incorrect liveness analysis.\n  if (n.isLogicalOp()) {\n    VariableLiveness leftState = isVariableReadBeforeKill(n.getFirstChild(), variable);\n    if (leftState == VariableLiveness.READ || leftState == VariableLiveness.KILL) {\n      // If the left side already determines the liveness, return that state.\n      return leftState;\n    }\n    // Otherwise, continue to the right side only if necessary.\n    Node rightChild = n.getLastChild();\n    if (rightChild != null) {\n      return isVariableReadBeforeKill(rightChild, variable);\n    }\n  } else {\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}