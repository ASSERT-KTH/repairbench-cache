{
    "generation": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n  // If this node is an assignment, handle its two operands specially.\n  // In an assignment \u201cx = y\u201d, even though the LHS (\u201cx\u201d) is visited first,\n  // its \u201ckill\u201d effect is delayed until after the RHS (\u201cy\u201d) is evaluated.\n  // Thus, if a read of the variable appears in the RHS, that read \u201cwins\u201d.\n  if (n.getType() == Token.ASSIGN) {\n    Node lhs = n.getFirstChild();\n    Node rhs = lhs.getNext();\n    VariableLiveness lhsState = isVariableReadBeforeKill(lhs, variable);\n    VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);\n    // If either operand produces a READ, then the overall effective reference is a read.\n    if (lhsState == VariableLiveness.READ || rhsState == VariableLiveness.READ) {\n      return VariableLiveness.READ;\n    }\n    // Otherwise, if the LHS produced a kill, then no read was found later.\n    if (lhsState == VariableLiveness.KILL) {\n      return VariableLiveness.KILL;\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }\n\n  // For a name node matching the variable, decide based on context.\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    // If this name appears on the left\u2010hand side of an assignment,\n    // then by itself it would be considered a kill.\n    // (Assignment nodes are handled specially, so here this is for non\u2013delayed cases.)\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // For all other nodes, traverse the children in left-to-right (depth-first) order.\n  // Note: new CFG nodes (such as functions) stop the search.\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}