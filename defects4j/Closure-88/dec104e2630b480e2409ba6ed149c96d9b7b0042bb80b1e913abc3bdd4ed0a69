{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node parent = n.getParent();\n        if (parent.isAssign() && n == parent.getFirstChild()) {\n          // This is the LHS of an assignment, only kill if this node is not part of a compound assignment (+=, etc.)\n          return VariableLiveness.KILL;\n        }\n        // Other LHS contexts (e.g., variable declaration) should also count as kill\n        if (NodeUtil.isVarDeclaration(n)) {\n          return VariableLiveness.KILL;\n        }\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Short-circuiting for logical operators and conditional expressions\n    if (n.isAnd() || n.isOr()) {\n      // Left and right evaluated left to right, but if left determines value, right is skipped\n      VariableLiveness left = isVariableReadBeforeKill(n.getFirstChild(), variable);\n      if (left != VariableLiveness.MAYBE_LIVE) {\n        return left;\n      }\n      VariableLiveness right = isVariableReadBeforeKill(n.getLastChild(), variable);\n      if (right != VariableLiveness.MAYBE_LIVE) {\n        return right;\n      }\n      return VariableLiveness.MAYBE_LIVE;\n    } else if (n.isHook()) {\n      // condition ? then : else\n      Node cond = n.getFirstChild();\n      Node thenBranch = cond.getNext();\n      Node elseBranch = thenBranch.getNext();\n      VariableLiveness condState = isVariableReadBeforeKill(cond, variable);\n      if (condState != VariableLiveness.MAYBE_LIVE) {\n        return condState;\n      }\n      VariableLiveness thenState = isVariableReadBeforeKill(thenBranch, variable);\n      VariableLiveness elseState = isVariableReadBeforeKill(elseBranch, variable);\n      if (thenState == elseState) {\n        return thenState;\n      } else if (thenState == VariableLiveness.KILL || elseState == VariableLiveness.KILL) {\n        // If either branch is kill, and the other is may_live, return kill (conservative)\n        if (thenState == VariableLiveness.MAYBE_LIVE) {\n          return elseState;\n        }\n        if (elseState == VariableLiveness.MAYBE_LIVE) {\n          return thenState;\n        }\n        return VariableLiveness.MAYBE_LIVE;\n      } else {\n        // If one branch is read, prioritize that.\n        if (thenState == VariableLiveness.READ || elseState == VariableLiveness.READ) {\n          return VariableLiveness.READ;\n        }\n        return VariableLiveness.MAYBE_LIVE;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}