{
    "generation": "/**\n * Given an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.\n */\nprivate VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated. So check if this is \"x = RHS\"\n      // If we are currently visiting the lhs of the assignment, this is a write.\n      Node parent = n.getParent();\n      Node lhs = parent.getFirstChild();\n      if (n == lhs) {\n        return VariableLiveness.KILL;\n      } else {\n        // This is reading 'x' in a compound assignment (like x += 1) or destructuring\n        return VariableLiveness.READ;\n      }\n    } else {\n      // Just a plain read.\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Evaluate children in evaluation order.\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}