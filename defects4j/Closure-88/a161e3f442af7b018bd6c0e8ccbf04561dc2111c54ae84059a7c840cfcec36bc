{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          // Only return immediately if it's a READ or KILL at this level\n          // We need to check all children first to see if there's an earlier reference\n          if (NodeUtil.isAssignmentOp(n) ||\n              (n.isAssign() && n.getFirstChild().getNext() != null)) {\n            // For assignment operations, we need to check both sides carefully\n            // First, process left side, then right side\n            Node firstChild = n.getFirstChild();\n            Node secondChild = firstChild.getNext();\n            if (secondChild != null) {\n              // Check left side first\n              VariableLiveness leftState = isVariableReadBeforeKill(firstChild, variable);\n              if (leftState != VariableLiveness.MAYBE_LIVE) {\n                return leftState;\n              }\n              // If left side is MAYBE_LIVE, then check right side\n              VariableLiveness rightState = isVariableReadBeforeKill(secondChild, variable);\n              if (rightState != VariableLiveness.MAYBE_LIVE) {\n                return rightState;\n              }\n            }\n          } else {\n            return state;\n          }\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}