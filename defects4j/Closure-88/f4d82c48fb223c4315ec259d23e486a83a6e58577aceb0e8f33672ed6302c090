{
    "generation": "private VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated.\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Track whether we've seen a READ or KILL\n  VariableLiveness result = VariableLiveness.MAYBE_LIVE;\n\n  // Expressions are evaluated left-right, depth first.\n  for (Node child = n.getFirstChild();\n      child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness childState = isVariableReadBeforeKill(child, variable);\n      if (childState == VariableLiveness.KILL) {\n        if (result == VariableLiveness.MAYBE_LIVE) {\n          result = VariableLiveness.READ; // A KILL after a READ is still READ\n        }\n      } else if (childState == VariableLiveness.READ) {\n        if (result == VariableLiveness.MAYBE_LIVE) {\n          // First occurrence is a read - set result\n          result = VariableLiveness.READ;\n        } else if (result == VariableLiveness.KILL) {\n          // We already had a kill, but now we have a read before it\n          // in execution order (right-to-left evaluation)\n          return VariableLiveness.READ;\n        }\n      }\n      // For MAYBE_LIVE, we continue searching\n    }\n  }\n\n  // After examining all children, if we found a READ anywhere without a preceding KILL,\n  // then it's READ. Otherwise, if we found a KILL without any preceding READ, it's KILL.\n  // Otherwise, it's MAYBE_LIVE.\n  return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}