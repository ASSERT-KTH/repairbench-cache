{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    // First check if this node is the variable we're looking for\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Check children first (depth-first)\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          // If we found a definite READ or KILL in a child, return it\n          return state;\n        }\n      }\n    }\n\n    // If we didn't find the variable in any children, check if this node is an assignment\n    // that might contain the variable in its RHS\n    if (n.isAssign()) {\n      Node lhs = n.getFirstChild();\n      if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {\n        // This is an assignment to our variable, but we need to check the RHS first\n        VariableLiveness rhsState = isVariableReadBeforeKill(n.getSecondChild(), variable);\n        if (rhsState == VariableLiveness.READ) {\n          return VariableLiveness.READ;\n        }\n        return VariableLiveness.KILL;\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}