{
    "generation": "/**\n * Give an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n */\nprivate VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent()) &&\n        !NodeUtil.isAssignmentOp(n.getParent())) {\n      // The name is being assigned to with something other than an\n      // assignment operator (e.g., ++ or --).\n      return VariableLiveness.KILL;\n    } else if (NodeUtil.isLhs(n, n.getParent()) &&\n               NodeUtil.isAssignmentOp(n.getParent())) {\n      // In \"x = ...\" or \"x += ...\", the expression on the right of \n      // the assignment is evaluated before kill.\n      Node parent = n.getParent();\n      Node rhs = parent.getLastChild();\n      if (n != rhs) {\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Expressions are evaluated left-right, depth first.\n  for (Node child = n.getFirstChild();\n       child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}