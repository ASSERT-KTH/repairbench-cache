{
    "generation": "/**\n * Give an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.\n */\nprivate VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  // Handle assignment\u2010operators specially so that the \"kill\" (the write\n  // to the variable) is only reported after we have scanned the entire RHS\n  // (and any reads it may contain).\n  if (NodeUtil.isAssignmentOp(n)) {\n    Node lhs = n.getFirstChild();\n    Node rhs = lhs.getNext();\n    // 1) scan the LHS subtree for reads of the variable (e.g. in\n    //    a GETPROP like x.y = ...)\n    for (Node child = lhs.getFirstChild();\n         child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    // 2) scan the RHS for reads or nested kills\n    VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n    if (state != VariableLiveness.MAYBE_LIVE) {\n      return state;\n    }\n    // 3) only now do we report the kill of the variable itself\n    if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {\n      return VariableLiveness.KILL;\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }\n\n  // Non\u2010assignment context: any matching NAME is a read or (if it\n  // appears on the LHS of some other assign) a kill.\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  }\n\n  // Otherwise recurse left\u2010to\u2010right, skipping into new CFG nodes.\n  for (Node child = n.getFirstChild();\n       child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n  }\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}