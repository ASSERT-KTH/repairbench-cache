{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        // Only return KILL if this is the actual assignment target, not in the RHS.\n        Node parent = n.getParent();\n        if (parent.isAssign() && parent.getFirstChild() == n) {\n          return VariableLiveness.KILL;\n        }\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Special handling for short-circuiting binary operators (&&, ||) and\n    // the comma operator, which evaluate their operands left-to-right but may\n    // skip right depending on the left's result.\n    if (n.isOr() || n.isAnd() || n.isComma()) {\n      Node first = n.getFirstChild();\n      Node second = first.getNext();\n\n      // Check first child (left).\n      VariableLiveness state = isVariableReadBeforeKill(first, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n\n      // Check second child (right).\n      state = isVariableReadBeforeKill(second, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n      return VariableLiveness.MAYBE_LIVE;\n    }\n\n    // For all other expressions, depth-first, left-to-right traversal.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}