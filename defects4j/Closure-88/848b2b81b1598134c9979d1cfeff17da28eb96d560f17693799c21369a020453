{
    "generation": "  /**\n   * Give an expression and a variable. It returns READ, if the first\n   * reference of that variable is a read. It returns KILL, if the first\n   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.\n   */\n  private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    // Special\u2010case assignment ops so that we scan the RHS (and any reads there)\n    // before we consider the LHS name a KILL (since the kill actually happens\n    // only after the RHS is evaluated).\n    if (NodeUtil.isAssignmentOp(n)) {\n      Node lhs = n.getFirstChild();\n      Node rhs = lhs.getNext();\n      // If this assignment is to our variable, look for reads in the RHS first.\n      if (NodeUtil.isName(lhs) && variable.equals(lhs.getString())) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(rhs)) {\n          VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n          if (state != VariableLiveness.MAYBE_LIVE) {\n            return state;\n          }\n        }\n        // No read in the RHS, so the first true reference here is the kill.\n        return VariableLiveness.KILL;\n      }\n      // Otherwise, walk both sides normally.\n      if (!ControlFlowGraph.isEnteringNewCfgNode(lhs)) {\n        VariableLiveness state = isVariableReadBeforeKill(lhs, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n      if (!ControlFlowGraph.isEnteringNewCfgNode(rhs)) {\n        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n      return VariableLiveness.MAYBE_LIVE;\n    }\n\n    // A plain name use.\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      // LHS of any assignment/var/catch is a KILL, otherwise it's a READ.\n      return NodeUtil.isLhs(n, n.getParent())\n          ? VariableLiveness.KILL\n          : VariableLiveness.READ;\n    }\n\n    // Recurse left-to-right, depth-first, skipping new CFG entries (FUNCTIONs).\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n        VariableLiveness state = isVariableReadBeforeKill(c, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}