{
    "generation": "/**\n * Give an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.\n */\nprivate VariableLiveness isVariableReadBeforeKill(\n    Node n, String variable) {\n  // 1) A plain name use is a READ unless it's on the LHS of an assignment.\n  if (NodeUtil.isName(n)\n      && variable.equals(n.getString())\n      && !NodeUtil.isLhs(n, n.getParent())) {\n    return VariableLiveness.READ;\n  }\n\n  // 2) If this node is an assignment to our variable (\"variable = ...\"),\n  //    we must scan its RHS first (reads happen before the kill), and only\n  //    if there are no reads do we declare the kill.\n  Node firstChild = n.getFirstChild();\n  if (firstChild != null\n      && NodeUtil.isName(firstChild)\n      && variable.equals(firstChild.getString())\n      && NodeUtil.isLhs(firstChild, n)) {\n    // Skip the LHS, scan the rest (the RHS and any other children).\n    for (Node child = firstChild.getNext(); child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    // No reads in the RHS \u2013 the first thing we saw is the kill.\n    return VariableLiveness.KILL;\n  }\n\n  // 3) Otherwise, recurse into children (left-to-right, depth-first).\n  for (Node child = firstChild; child != null; child = child.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n  }\n\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}