{
    "generation": "  String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType receiverType = getJSType(n.getFirstChild()).dereference();\n      if (receiverType != null) {\n        String propName = n.getLastChild().getString();\n        if (receiverType.getConstructor() != null &&\n            receiverType.getConstructor().isInterface()) {\n          receiverType = FunctionType.getTopDefiningInterface(\n              receiverType, propName);\n        } else {\n          // classes\n          while (receiverType != null && !receiverType.hasOwnProperty(propName)) {\n            receiverType = receiverType.getImplicitPrototype();\n          }\n          // After climbing, if receiverType is null, we still want to return the original type.\n          // So we reset if objectType becomes null.\n          if (receiverType == null) {\n            receiverType = getJSType(n.getFirstChild()).dereference();\n          }\n        }\n\n        // Return the readable name\n        return receiverType.toString() + \".\" + propName;\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}