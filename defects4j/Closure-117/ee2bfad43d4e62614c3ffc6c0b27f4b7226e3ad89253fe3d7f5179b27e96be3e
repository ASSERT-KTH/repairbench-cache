{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n    if (n.isGetProp()) {\n        // Get the type of the base object and dereference it if needed\n        JSType baseType = getJSType(n.getFirstChild());\n        if (dereference) {\n            baseType = baseType.dereference();\n        }\n        if (baseType instanceof ObjectType) {\n            ObjectType objectType = (ObjectType) baseType;\n            String propName = n.getLastChild().getString();\n            \n            if (objectType.getImplicitPrototype() != null) {\n                // Climb the prototype chain to find where the property is originally defined\n                ObjectType currentType = objectType;\n                while (currentType != null && !currentType.hasOwnProperty(propName)) {\n                    currentType = currentType.getImplicitPrototype();\n                }\n                if (currentType != null) {\n                    return currentType.toString() + \".\" + propName;\n                }\n            }\n        }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n        type = type.dereference();\n    }\n    if (type.isFunctionPrototypeType() || (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n        return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n        return qualifiedName;\n    } else if (type.isFunctionType()) {\n        return \"function\";\n    } else {\n        return type.toString();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}