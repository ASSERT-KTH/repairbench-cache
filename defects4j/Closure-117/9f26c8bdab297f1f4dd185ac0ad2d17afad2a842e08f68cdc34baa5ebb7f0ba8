{
    "generation": "  String getReadableJSTypeName(Node n, boolean dereference) {\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      Node\u0436\u0434\n      if (n.getFirstChild().isGetProp()) {\n        // Handle nested property access by looking at the base type\n        return getReadableJSTypeName(n.getLastChild(), dereference);\n      }\n\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          // classes\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            ObjectType next = objectType.getImplicitPrototype();\n            if (next == null || next.equals(objectType)) {\n              break; // prevent infinite loops\n            }\n            objectType = next;\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n\n    if (type.isUnknownType()) {\n      // Try to get a qualified name for unknown types\n      if (n.getParent() != null && n.getParent().isGetProp()) {\n        return getReadableJSTypeName(n.getParent(), dereference) + \".\" + n.getString();\n      }\n      return n.getQualifiedName();\n    }\n\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}