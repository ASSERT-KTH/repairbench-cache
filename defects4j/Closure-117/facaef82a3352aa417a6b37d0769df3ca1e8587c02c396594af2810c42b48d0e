{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n        JSType type = getJSType(n.getFirstChild());\n        if (type.isObjectType()) {\n            ObjectType objectType = type.toObjectType();\n            String propName = n.getLastChild().getString();\n\n            // Handle the case where the property might be inherited.\n            while (objectType != null && !objectType.hasOwnProperty(propName)) {\n                objectType = objectType.getImplicitPrototype();\n            }\n\n            // Don't show complex function names or anonymous types.\n            // Instead, try to get a human-readable type name.\n            if (objectType != null) {\n                return objectType.toString() + \".\" + propName;\n            }\n        }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n        ObjectType dereferenced = type.dereference();\n        if (dereferenced != null) {\n            type = dereferenced;\n        }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n        return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n        return qualifiedName;\n    } else if (type.isFunctionType()) {\n        // Don't show complex function names.\n        return \"function\";\n    } else {\n        return type.toString();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}