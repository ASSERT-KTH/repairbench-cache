{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          // classes\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      // If qualifiedName is a getprop, try to find the type of the object\n      // that it is getting the property from and see if it has a property\n      // with the same name.\n      Node parent = n.getParent();\n      if (parent != null && parent.isGetProp() && parent.getFirstChild() == n) {\n        Node propNode = parent.getLastChild();\n        if (propNode.isString()) {\n          String propName = propNode.getString();\n          ObjectType objectType = type.toObjectType();\n          if (objectType != null) {\n            ObjectType topDefiningType =\n                objectType.getTopDefiningInterface(propName);\n            if (topDefiningType == null) {\n              // classes\n              ObjectType foundType = objectType;\n              while (foundType != null && !foundType.hasOwnProperty(propName)) {\n                foundType = foundType.getImplicitPrototype();\n              }\n              if (foundType != null) {\n                return foundType.toString() + \".\" + propName;\n              }\n            } else {\n              return topDefiningType.toString() + \".\" + propName;\n            }\n          }\n        }\n      }\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}