{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n  // When analyzing a GETPROP node, the property may be inherited along the\n  // prototype chain. Climb that chain to find the original type that defines\n  // the property.\n  if (n.isGetProp()) {\n    JSType lhsType = getJSType(n.getFirstChild());\n    if (lhsType != null) {\n      ObjectType objectType = lhsType.dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n        } else {\n          // For classes, walk up the prototype chain until we find the defining type.\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n        if (objectType != null &&\n            (objectType.getConstructor() != null || objectType.isFunctionPrototypeType())) {\n          // Fix: Use the constructor's display name (if available) so that instead of\n          // something like \"C3.c2_\" the readable name comes out as \"C2\"\n          if (objectType.getConstructor() != null &&\n              objectType.getConstructor().getDisplayName() != null) {\n            return objectType.getConstructor().getDisplayName() + \".\" + propName;\n          } else {\n            return objectType.toString() + \".\" + propName;\n          }\n        }\n      }\n    }\n  }\n\n  // Fallback: get the type of the node.\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType dereferenced = type.dereference();\n    if (dereferenced != null) {\n      type = dereferenced;\n    }\n  }\n  if (type.isFunctionPrototypeType() ||\n      (type.toObjectType() != null &&\n       type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n  String qualifiedName = n.getQualifiedName();\n  if (qualifiedName != null) {\n    return qualifiedName;\n  } else if (type.isFunctionType()) {\n    return \"function\";\n  } else {\n    return type.toString();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}