{
    "generation": "  String getReadableJSTypeName(Node n, boolean dereference) {\n\n    if (n.isGetProp()) {\n      ObjectType originalObjectType = getJSType(n.getFirstChild()).dereference();\n      if (originalObjectType != null) {\n        String propName = n.getLastChild().getString();\n        ObjectType ownerType = null;\n\n        if (originalObjectType.getConstructor() != null &&\n            originalObjectType.getConstructor().isInterface()) {\n          ownerType = FunctionType.getTopDefiningInterface(originalObjectType, propName);\n        } else {\n          ownerType = originalObjectType;\n          while (ownerType != null && !ownerType.hasOwnProperty(propName)) {\n            ownerType = ownerType.getImplicitPrototype();\n          }\n        }\n\n        String typeName = null;\n        if (ownerType != null &&\n            (ownerType.getConstructor() != null ||\n             ownerType.isFunctionPrototypeType())) {\n          typeName = ownerType.toString();\n        } else {\n          typeName = originalObjectType.toString();\n        }\n\n        return typeName + \".\" + propName;\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}