{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n  if (n.isGetProp()) {\n    JSType type = getJSType(n.getFirstChild());\n    if (dereference) {\n      type = type.dereference();\n    }\n    ObjectType objectType = type.toObjectType();\n    if (objectType != null) {\n      String propName = n.getLastChild().getString();\n      // Look for the property in the object type or its prototypes\n      ObjectType currentType = objectType;\n      while (currentType != null && !currentType.hasOwnProperty(propName)) {\n        currentType = currentType.getImplicitPrototype();\n      }\n      if (currentType != null) {\n        // Prefer constructor's name if it's a function\n        String typeName = currentType.getConstructor() != null && \n                          currentType.getConstructor().isFunction() ?\n                          currentType.getConstructor().toString() :\n                          currentType.toString();\n        return typeName + \".\" + propName;\n      }\n    }\n  }\n\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType dereferenced = type.dereference();\n    if (dereferenced != null) {\n      type = dereferenced;\n    }\n  }\n\n  if (type.isFunctionPrototypeType() ||\n      (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n\n  String qualifiedName = n.getQualifiedName();\n  if (qualifiedName != null) {\n    return qualifiedName;\n  } else if (type.isFunctionType()) {\n    return \"function\";\n  } else {\n    return type.toString();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}