{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n  // If we are looking at a GETPROP node, then we want to resolve the\n  // property \u201creceiver\u201d type in a way that gives the declared (human\u2010readable)\n  // type rather than a qualified (syntactic) name.\n  if (n.isGetProp()) {\n    String propName = n.getLastChild().getString();\n    ObjectType objectType = null;\n    Node receiver = n.getFirstChild();\n\n    // If the receiver is itself a GETPROP (for example, \"this.c2_\")\n    // then try to get its declared type rather than its qualified name.\n    if (receiver.isGetProp()) {\n      String innerProp = receiver.getLastChild().getString();\n      JSType ownerJSType = getJSType(receiver.getFirstChild());\n      if (ownerJSType != null) {\n        ObjectType ownerType = ownerJSType.dereference();\n        if (ownerType != null && ownerType.hasProperty(innerProp)) {\n          JSType declaredPropType = ownerType.getPropertyType(innerProp);\n          if (declaredPropType != null) {\n            objectType = declaredPropType.dereference();\n          }\n        }\n      }\n    }\n    // Fallback: if we couldn\u2019t get the declared property type,\n    // then use the type of the receiver.\n    if (objectType == null) {\n      JSType recType = getJSType(receiver);\n      if (recType != null) {\n        objectType = recType.dereference();\n      }\n    }\n\n    if (objectType != null) {\n      // If the type is an interface then find the top-level interface\n      if (objectType.getConstructor() != null &&\n          objectType.getConstructor().isInterface()) {\n        objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n      } \n      // Otherwise, if the receiver was not a GETPROP, climb the prototype chain.\n      else if (!receiver.isGetProp()) {\n        while (objectType != null && !objectType.hasOwnProperty(propName)) {\n          objectType = objectType.getImplicitPrototype();\n        }\n      }\n      // If we found a valid type with a constructor (or it is a function prototype type)\n      if (objectType != null &&\n          (objectType.getConstructor() != null ||\n           objectType.isFunctionPrototypeType())) {\n        return objectType.toString() + \".\" + propName;\n      }\n    }\n  }\n\n  // For non-GETPROP nodes (or if our GETPROP analysis did not succeed), use the\n  // actual JSType and (if available) the qualifiedName.\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType dereferenced = type.dereference();\n    if (dereferenced != null) {\n      type = dereferenced;\n    }\n  }\n  if (type.isFunctionPrototypeType() ||\n      (type.toObjectType() != null &&\n       type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n  String qualifiedName = n.getQualifiedName();\n  if (qualifiedName != null) {\n    return qualifiedName;\n  } else if (type.isFunctionType()) {\n    return \"function\";\n  } else {\n    return type.toString();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}