{
    "generation": "/**\n * Given a node, get a human-readable name for the type of that node so\n * that will be easy for the programmer to find the original declaration.\n *\n * For example, if SubFoo's property \"bar\" might have the human-readable\n * name \"Foo.prototype.bar\".\n *\n * @param n The node.\n * @param dereference If true, the type of the node will be dereferenced\n *     to an Object type, if possible.\n */\nString getReadableJSTypeName(Node n, boolean dereference) {\n  // Special-case prototype methods and interface properties.\n  if (n.isGetProp()) {\n    ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n    if (objectType != null) {\n      String propName = n.getLastChild().getString();\n      // If it's an interface, find the top defining interface.\n      if (objectType.getConstructor() != null\n          && objectType.getConstructor().isInterface()) {\n        ObjectType iface =\n            FunctionType.getTopDefiningInterface(objectType, propName);\n        if (iface != null) {\n          return iface.toString() + \".\" + propName;\n        }\n      } else {\n        // Otherwise climb the prototype chain to find where the prop was defined.\n        while (objectType != null && !objectType.hasOwnProperty(propName)) {\n          objectType = objectType.getImplicitPrototype();\n        }\n        // Only show X.prototype.foo for real prototype methods.\n        if (objectType != null && objectType.isFunctionPrototypeType()) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n  }\n\n  // Fallback: show the type itself or the qualified name.\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType deref = type.dereference();\n    if (deref != null) {\n      type = deref;\n    }\n  }\n  if (type.isFunctionPrototypeType()\n      || (type.toObjectType() != null\n          && type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n  String qname = n.getQualifiedName();\n  if (qname != null) {\n    return qname;\n  } else if (type.isFunctionType()) {\n    // Don't show complex function signatures.\n    return \"function\";\n  } else {\n    return type.toString();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}