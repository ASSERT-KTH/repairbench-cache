{
    "generation": "/**\n * Given a node, get a human-readable name for the type of that node so\n * that it will be easy for the programmer to find the original declaration.\n *\n * @param n The node.\n * @param dereference If true, the type of the node will be dereferenced\n *     to an Object type, if possible.\n */\nString getReadableJSTypeName(Node n, boolean dereference) {\n  // Special-case GETPROP: try to find where the property was originally\n  // defined.  But if it's just a data field, show the field's declared type.\n  if (n.isGetProp()) {\n    ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n    if (objectType != null) {\n      String propName = n.getLastChild().getString();\n      if (objectType.getConstructor() != null\n          && objectType.getConstructor().isInterface()) {\n        objectType = FunctionType.getTopDefiningInterface(\n            objectType, propName);\n      } else {\n        // walk up the prototype chain\n        while (objectType != null && !objectType.hasOwnProperty(propName)) {\n          objectType = objectType.getImplicitPrototype();\n        }\n      }\n      if (objectType != null) {\n        // If the property is a data field, show its declared type\n        JSType propType = objectType.getPropertyType(propName);\n        if (propType != null && !propType.isFunctionType()) {\n          return propType.toString();\n        }\n        // Otherwise (methods), show where it was defined\n        return objectType.toString() + \".\" + propName;\n      }\n    }\n  }\n\n  // Fallback: show the type of n (possibly dereferenced), or its qualified name.\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType deref = type.dereference();\n    if (deref != null) {\n      type = deref;\n    }\n  }\n  if (type.isFunctionPrototypeType()\n      || (type.toObjectType() != null\n          && type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n  String qname = n.getQualifiedName();\n  if (qname != null) {\n    return qname;\n  } else if (type.isFunctionType()) {\n    // Hide complex function signatures\n    return \"function\";\n  } else {\n    return type.toString();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}