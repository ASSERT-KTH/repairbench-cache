{
    "generation": "  String getReadableJSTypeName(Node n, boolean dereference) {\n\n    if (n.isGetProp()) {\n      JSType lhsType = getJSType(n.getFirstChild());\n      ObjectType originalObjectType = lhsType.dereference();\n      if (originalObjectType != null) {\n        String propName = n.getLastChild().getString();\n        ObjectType objectType = originalObjectType;\n\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n\n        ObjectType resultType = objectType != null ? objectType : originalObjectType;\n        if (resultType != null &&\n            (resultType.getConstructor() != null ||\n             resultType.isFunctionPrototypeType())) {\n          return resultType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}