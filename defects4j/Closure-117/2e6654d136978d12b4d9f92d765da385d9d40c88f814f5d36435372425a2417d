{
    "generation": "  /**\n   * Given a node, get a human-readable name for the type of that node so\n   * that will be easy for the programmer to find the original declaration.\n   *\n   * For example, if SubFoo's property \"bar\" might have the human-readable\n   * name \"Foo.prototype.bar\".\n   *\n   * @param n The node.\n   * @param dereference If true, the type of the node will be dereferenced\n   *     to an Object type, if possible.\n   */\n  String getReadableJSTypeName(Node n, boolean dereference) {\n    // The best type name is the actual type name.\n    JSType actualType = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = actualType.dereference();\n      if (dereferenced != null) {\n        actualType = dereferenced;\n      }\n    }\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. In some cases, we want to show the qualified name\n    // (e.g., \"Foo.prototype.bar\"), especially if the actual type is generic\n    // (like \"function\" or \"?\"). If the actual type is specific (like \"C2\"),\n    // we prefer that.\n    if (n.isGetProp()) {\n      // Check if the actual type provides a specific, descriptive name.\n      // If it's a generic type (e.g., function, object without constructor, unknown),\n      // then finding the qualified name from the prototype chain might be more descriptive.\n      if (actualType != null &&\n          !(actualType.isUnknownType() || actualType.isNoType() || actualType.isAllType() ||\n            (actualType.isFunctionType() && actualType.toObjectType() == null) || // Generic function type\n            (actualType.isObjectType() && actualType.toObjectType().getConstructor() == null && !actualType.isFunctionPrototypeType()))) { // Generic object type, e.g. {}\n        // If the actual type is a specific named type (like C2), use it.\n        return actualType.toString();\n      }\n\n      // Otherwise, proceed with the original GETPROP logic to find the\n      // defining class/interface and its qualified name.\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          // classes\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n\n        // Don't show complex function names or anonymous types for the qualified name.\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    // Fallback if not a GETPROP or if GETPROP logic didn't return a name.\n    // This part tries to use the actual JSType or the node's qualified name.\n    if (actualType.isFunctionPrototypeType() ||\n        (actualType.toObjectType() != null &&\n         actualType.toObjectType().getConstructor() != null)) {\n      return actualType.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (actualType.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      return actualType.toString();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}