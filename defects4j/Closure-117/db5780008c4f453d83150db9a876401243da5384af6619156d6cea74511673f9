{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n  // Special handling for property accesses.\n  if (n.isGetProp()) {\n    String propName = n.getLastChild().getString();\n    // Get the receiver\u2019s type.\n    JSType receiver = getJSType(n.getFirstChild());\n    ObjectType objectType = (receiver != null) ? receiver.dereference() : null;\n    if (objectType != null) {\n      if (objectType.getConstructor() != null && objectType.getConstructor().isInterface()) {\n        objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n      } else {\n        // For classes, walk up the implicit prototype chain looking for the property.\n        while (objectType != null && !objectType.hasOwnProperty(propName)) {\n          objectType = objectType.getImplicitPrototype();\n        }\n      }\n      // If we found a prototype that actually \u201cowns\u201d the property,\n      // return a human\u2010readable name that includes the property.\n      if (objectType != null &&\n          (objectType.getConstructor() != null || objectType.isFunctionPrototypeType())) {\n        return objectType.toString() + \".\" + propName;\n      }\n    }\n    // Fallback: if no prototype defined the property,\n    // use the type of the receiver rather than the full GETPROP chain.\n    if (receiver != null) {\n      if (dereference) {\n        ObjectType deref = receiver.dereference();\n        if (deref != null) {\n          receiver = deref;\n        }\n      }\n      return receiver.toString();\n    }\n  }\n\n  // Otherwise, work with the whole node.\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType dereferenced = type.dereference();\n    if (dereferenced != null) {\n      type = dereferenced;\n    }\n  }\n  if (type.isFunctionPrototypeType() ||\n      (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n  String qualifiedName = n.getQualifiedName();\n  if (qualifiedName != null) {\n    return qualifiedName;\n  } else if (type.isFunctionType()) {\n    // Don't show complex function names.\n    return \"function\";\n  } else {\n    return type.toString();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}