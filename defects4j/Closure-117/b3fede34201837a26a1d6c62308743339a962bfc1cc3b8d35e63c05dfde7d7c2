{
    "generation": "  String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      JSType objectType = getJSType(n.getFirstChild());\n      if (objectType != null && objectType.isObjectType()) {\n        String propName = n.getLastChild().getString();\n        ObjectType objType = objectType.toObjectType();\n        if (objType.getConstructor() != null && objType.getConstructor().isInterface()) {\n          objType = FunctionType.getTopDefiningInterface(objType, propName);\n        } else {\n          // classes\n          while (objType != null && !objType.hasOwnProperty(propName)) {\n            objType = objType.getImplicitPrototype();\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objType != null &&\n            (objType.getConstructor() != null ||\n             objType.isFunctionPrototypeType())) {\n          return objType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}