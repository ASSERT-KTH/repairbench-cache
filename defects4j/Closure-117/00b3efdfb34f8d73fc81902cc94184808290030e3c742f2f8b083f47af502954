{
    "generation": "/**\n * Given a node, get a human-readable name for the type of that node so\n * that will be easy for the programmer to find the original declaration.\n *\n * For example, if SubFoo's property \"bar\" might have the human-readable\n * name \"Foo.prototype.bar\".\n *\n * @param n The node.\n * @param dereference If true, the type of the node will be dereferenced\n *     to an Object type, if possible.\n */\nString getReadableJSTypeName(Node n, boolean dereference) {\n  // If this GETPROP is serving as the base of another GETPROP,\n  // skip the \"find original prototype-definer\" logic so that\n  // nested GETPROP calls (e.g. the base of an undefined\u2010property\n  // error) come back as the declared type, not \"Owner.prop\".\n  if (n.isGetProp() && (n.getParent() == null || !n.getParent().isGetProp())) {\n    // The best type name is the actual type name.\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n    if (objectType != null) {\n      String propName = n.getLastChild().getString();\n      if (objectType.getConstructor() != null &&\n          objectType.getConstructor().isInterface()) {\n        objectType = FunctionType.getTopDefiningInterface(\n            objectType, propName);\n      } else {\n        // classes\n        while (objectType != null && !objectType.hasOwnProperty(propName)) {\n          objectType = objectType.getImplicitPrototype();\n        }\n      }\n      // Don't show complex function names or anonymous types.\n      // Instead, try to get a human-readable type name.\n      if (objectType != null &&\n          (objectType.getConstructor() != null ||\n           objectType.isFunctionPrototypeType())) {\n        return objectType.toString() + \".\" + propName;\n      }\n    }\n  }\n\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType dereferenced = type.dereference();\n    if (dereferenced != null) {\n      type = dereferenced;\n    }\n  }\n  if (type.isFunctionPrototypeType() ||\n      (type.toObjectType() != null &&\n       type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n  String qualifiedName = n.getQualifiedName();\n  if (qualifiedName != null) {\n    return qualifiedName;\n  } else if (type.isFunctionType()) {\n    // Don't show complex function names.\n    return \"function\";\n  } else {\n    return type.toString();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}