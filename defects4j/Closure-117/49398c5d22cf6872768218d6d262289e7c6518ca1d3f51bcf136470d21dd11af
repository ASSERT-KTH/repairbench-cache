{
    "generation": "  /**\n   * Given a node, get a human-readable name for the type of that node so\n   * that will be easy for the programmer to find the original declaration.\n   *\n   * For example, if SubFoo's property \"bar\" might have the human-readable\n   * name \"Foo.prototype.bar\".\n   *\n   * @param n The node.\n   * @param dereference If true, the type of the node will be dereferenced\n   *     to an Object type, if possible.\n   */\n  String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      // Get the type of the object expression (the receiver of the property access).\n      JSType baseType = getJSType(n.getFirstChild());\n      // Dereference it to an ObjectType, if possible. This represents the object\n      // on which the property lookup initially occurs (e.g., C2 for `this.c2_`).\n      ObjectType initialObjectType = baseType.dereference();\n\n      if (initialObjectType != null) {\n        String propName = n.getLastChild().getString();\n        // This variable will be used to climb the prototype chain and find the\n        // specific type where the property is actually defined.\n        ObjectType definingType = initialObjectType;\n\n        if (definingType.getConstructor() != null &&\n            definingType.getConstructor().isInterface()) {\n          // If it's an interface, find the top-most interface that defines the property.\n          definingType = FunctionType.getTopDefiningInterface(\n              definingType, propName);\n        } else {\n          // For classes (or regular objects), climb the prototype chain\n          // until the property is found or the chain ends.\n          while (definingType != null && !definingType.hasOwnProperty(propName)) {\n            definingType = definingType.getImplicitPrototype();\n          }\n        }\n\n        // If a defining type was found on the prototype chain (i.e., property exists)\n        // and it's suitable for display (has a constructor or is a function prototype),\n        // return the name of the defining type plus the property name.\n        if (definingType != null &&\n            (definingType.getConstructor() != null ||\n             definingType.isFunctionPrototypeType())) {\n          return definingType.toString() + \".\" + propName;\n        } else {\n          // If the property was not found (definingType is null after the loop),\n          // or if the defining type was found but is not suitable for display\n          // (e.g., an anonymous type where we prefer not to show the full type string),\n          // we should still report the context of the error.\n          // In such cases (like \"property not defined\" errors), the relevant type\n          // is the `initialObjectType` on which the access was attempted.\n          return initialObjectType.toString();\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}