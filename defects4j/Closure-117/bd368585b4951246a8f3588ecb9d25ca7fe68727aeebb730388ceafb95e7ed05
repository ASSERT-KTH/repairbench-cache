{
    "generation": "  /**\n   * Given a node, get a human-readable name for the type of that node so\n   * that will be easy for the programmer to find the original declaration.\n   *\n   * For example, if SubFoo's property \"bar\" might have the human-readable\n   * name \"Foo.prototype.bar\".\n   *\n   * @param n The node.\n   * @param dereference If true, the type of the node will be dereferenced\n   *     to an Object type, if possible.\n   */\n  String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      Node objectNode = n.getFirstChild();\n      JSType nodeType = getJSType(objectNode);\n      ObjectType objectType = nodeType.dereference(); // Type of the object being accessed\n\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        ObjectType definer = null; // The type where the property is actually defined\n\n        // Find the definer\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          // Interfaces\n          definer = FunctionType.getTopDefiningInterface(objectType, propName);\n        } else {\n          // Classes / structural types\n          ObjectType currentType = objectType;\n          while (currentType != null && !currentType.hasOwnProperty(propName)) {\n            currentType = currentType.getImplicitPrototype();\n          }\n          definer = currentType; // This will be null if the property is not found\n        }\n\n        // If the property was found on the chain and the definer has a good name\n        if (definer != null &&\n            (definer.getConstructor() != null ||\n             definer.isFunctionPrototypeType())) {\n          return definer.toString() + \".\" + propName;\n        } else {\n          // *** FIX ***\n          // If the property was NOT found (definer is null) or the definer doesn't\n          // have a representable name, the error message should refer to the type\n          // we were searching on. Return the name of the base object type if it's\n          // representable.\n          if (objectType.isFunctionPrototypeType() ||\n              (objectType.toObjectType() != null &&\n               objectType.toObjectType().getConstructor() != null)) {\n             // Return the name of the type where the property was expected but not found.\n             return objectType.toString();\n          }\n          // If the base object type itself doesn't have a good name (e.g.,\n          // anonymous object literal), fall through to the general logic below.\n          // *** END FIX ***\n        }\n      }\n      // Fallthrough if objectType was initially null or if the specific object type name wasn't suitable\n      // in the failure case.\n    }\n\n    // General fallback logic for non-GETPROP nodes or GETPROPs where the specific logic didn't return.\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n\n    // Prefer the type name if it's identifiable\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n\n    // Next, try the qualified name of the node\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      // Fallback to the JSType's toString()\n      return type.toString();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}