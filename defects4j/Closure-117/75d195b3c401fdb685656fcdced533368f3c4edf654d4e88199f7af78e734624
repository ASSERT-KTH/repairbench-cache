{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n  // Special handling for GETPROP nodes: if the property is inherited,\n  // we try to climb the prototype chain to see where it was originally defined.\n  if (n.isGetProp()) {\n    // Get the type of the \u201creceiver\u201d (the object on which the property is accessed).\n    JSType receiverJSType = getJSType(n.getFirstChild());\n    if (receiverJSType != null) {\n      // Dereference to get the instance type (which, for example, converts a declared\n      // type \u201cC3.c2_\u201d into the type annotation \u201cC2\u201d).\n      ObjectType receiverType = receiverJSType.dereference();\n      if (receiverType != null) {\n        String propName = n.getLastChild().getString();\n        ObjectType defPropType;\n        // For an interface, get the top defining interface.\n        if (receiverType.getConstructor() != null &&\n            receiverType.getConstructor().isInterface()) {\n          defPropType = FunctionType.getTopDefiningInterface(receiverType, propName);\n        } else {\n          // For classes, search the prototype chain until we find an object that\n          // actually has an own property for the name.\n          defPropType = receiverType;\n          while (defPropType != null && !defPropType.hasOwnProperty(propName)) {\n            defPropType = defPropType.getImplicitPrototype();\n          }\n        }\n        // If we found a type that actually defines the property,\n        // return \u201c<defining type>.<propertyname>\u201d.\n        if (defPropType != null &&\n            (defPropType.getConstructor() != null ||\n             defPropType.isFunctionPrototypeType())) {\n          return defPropType.toString() + \".\" + propName;\n        } else {\n          // Otherwise, if no prototype in the chain defines the property,\n          // fall back to the receiver\u2019s type (this produces the declared type,\n          // e.g. \u201cC2\u201d, rather than the full qualifier \u201cC3.c2_\u201d).\n          return receiverType.toString();\n        }\n      }\n    }\n  }\n\n  // Fallback: Use the type of the node itself.\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType dereferenced = type.dereference();\n    if (dereferenced != null) {\n      type = dereferenced;\n    }\n  }\n  if (type.isFunctionPrototypeType() ||\n      (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n  String qualifiedName = n.getQualifiedName();\n  if (qualifiedName != null) {\n    return qualifiedName;\n  } else if (type.isFunctionType()) {\n    return \"function\";\n  } else {\n    return type.toString();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}