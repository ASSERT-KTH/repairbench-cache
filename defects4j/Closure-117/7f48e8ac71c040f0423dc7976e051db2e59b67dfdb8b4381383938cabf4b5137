{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        ObjectType definingType = objectType;\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          definingType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          // classes\n          definingType = objectType;\n          while (definingType != null && !definingType.hasOwnProperty(propName)) {\n            definingType = definingType.getImplicitPrototype();\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (definingType != null) {\n          // If the definingType is a FunctionPrototypeType, get its constructor's name.\n          if (definingType.isFunctionPrototypeType()) {\n            FunctionType funcType = definingType.getConstructor();\n            if (funcType != null) {\n              return funcType.toString() + \".\" + propName;\n            }\n          }\n          // Otherwise, use the definingType's constructor name or type name.\n          if (definingType.getConstructor() != null) {\n            return definingType.getConstructor().toString() + \".\" + propName;\n          }\n          return definingType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}