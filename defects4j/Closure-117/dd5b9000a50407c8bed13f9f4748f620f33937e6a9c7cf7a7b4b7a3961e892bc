{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n\n    if (n.isGetProp()) {\n        ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n        if (objectType != null) {\n            String propName = n.getLastChild().getString();\n            if (objectType.getConstructor() != null && \n                objectType.getConstructor().isInterface()) {\n              objectType = FunctionType.getTopDefiningInterface(\n                  objectType, propName);\n            } else if (objectType.hasOwnProperty(propName)) {\n                // Property exists on this type; no need to climb prototype\n            } else {\n                // Climb prototype chain only if property doesn't exist\n                while (objectType != null && !objectType.hasOwnProperty(propName)) {\n                    objectType = objectType.getImplicitPrototype();\n                }\n            }\n\n            if (objectType != null &&\n                (objectType.getConstructor() != null || \n                 objectType.isFunctionPrototypeType())) {\n                return objectType.toString() + \".\" + propName;\n            }\n        }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n        ObjectType dereferenced = type.dereference();\n        if (dereferenced != null) {\n            type = dereferenced;\n        }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n        return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n        return qualifiedName;\n    } else if (type.isFunctionType()) {\n        return \"function\";\n    } else {\n        return type.toString();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}