{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n  // Special-case GETPROP nodes so that we report the type where a property was declared.\n  if (n.isGetProp()) {\n    Node left = n.getFirstChild();\n    JSType leftType = getJSType(left);\n\n    // If the left-hand side is itself a GETPROP (e.g. \"this.c2_\") then try to use the declared type\n    // of that property rather than its fully qualified name.\n    if (left.isGetProp()) {\n      String leftProp = left.getLastChild().getString();\n      ObjectType owner = getJSType(left.getFirstChild()).dereference();\n      if (owner != null && owner.hasProperty(leftProp)) {\n        JSType declared = owner.getPropertyType(leftProp);\n        if (declared != null) {\n          leftType = declared;\n        }\n      }\n    }\n\n    ObjectType objectType = leftType.dereference();\n    if (objectType != null) {\n      String propName = n.getLastChild().getString();\n      if (objectType.getConstructor() != null &&\n          objectType.getConstructor().isInterface()) {\n        objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n      } else {\n        // Walk up the prototype chain to see where the property is defined.\n        ObjectType current = objectType;\n        while (current != null && !current.hasOwnProperty(propName)) {\n          current = current.getImplicitPrototype();\n        }\n        // If no explicit def is found, fall back to the base type.\n        if (current == null) {\n          current = objectType;\n        }\n        objectType = current;\n      }\n      if (objectType != null &&\n          (objectType.getConstructor() != null ||\n           objectType.isFunctionPrototypeType())) {\n        return objectType.toString() + \".\" + propName;\n      }\n    }\n  }\n\n  // Fall back to the node's type or qualified name.\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType dereferenced = type.dereference();\n    if (dereferenced != null) {\n      type = dereferenced;\n    }\n  }\n  if (type.isFunctionPrototypeType() ||\n      (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n  String qualifiedName = n.getQualifiedName();\n  if (qualifiedName != null) {\n    return qualifiedName;\n  } else if (type.isFunctionType()) {\n    return \"function\";\n  } else {\n    return type.toString();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}