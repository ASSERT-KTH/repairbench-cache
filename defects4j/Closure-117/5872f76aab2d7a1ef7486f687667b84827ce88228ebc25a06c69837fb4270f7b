{
    "generation": "String getReadableJSTypeName(Node n, boolean dereference) {\n  // If we're analyzing a GETPROP, the property may be inherited by the\n  // prototype chain. So climb the prototype chain and find out where\n  // the property was originally defined.\n  if (n.isGetProp()) {\n    ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n    if (objectType != null) {\n      String propName = n.getLastChild().getString();\n      if (objectType.getConstructor() != null &&\n          objectType.getConstructor().isInterface()) {\n        objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n      } else {\n        // For classes, climb up until we find the type that owns the property.\n        while (objectType != null && !objectType.hasOwnProperty(propName)) {\n          objectType = objectType.getImplicitPrototype();\n        }\n      }\n      if (objectType != null &&\n          (objectType.getConstructor() != null ||\n           objectType.isFunctionPrototypeType())) {\n        // If the object type has a constructor, use its display name rather than\n        // the full qualified name (which may include extra qualifiers).\n        if (objectType.getConstructor() != null) {\n          return objectType.getConstructor().getDisplayName() + \".\" + propName;\n        } else {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n  }\n\n  JSType type = getJSType(n);\n  if (dereference) {\n    ObjectType dereferenced = type.dereference();\n    if (dereferenced != null) {\n      type = dereferenced;\n    }\n  }\n  if (type.isFunctionPrototypeType() ||\n      (type.toObjectType() != null &&\n       type.toObjectType().getConstructor() != null)) {\n    return type.toString();\n  }\n  String qualifiedName = n.getQualifiedName();\n  if (qualifiedName != null) {\n    return qualifiedName;\n  } else if (type.isFunctionType()) {\n    // Don't show complex function names.\n    return \"function\";\n  } else {\n    return type.toString();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}