{
    "generation": "  /**\n   * Given a node, get a human-readable name for the type of that node so\n   * that will be easy for the programmer to find the original declaration.\n   *\n   * For example, if SubFoo's property \"bar\" might have the human-readable\n   * name \"Foo.prototype.bar\".\n   *\n   * @param n The node.\n   * @param dereference If true, the type of the node will be dereferenced\n   *     to an Object type, if possible.\n   */\n  String getReadableJSTypeName(Node n, boolean dereference) {\n    // If we're looking at a GETPROP, see if the property is actually inherited\n    // from some prototype or interface.  Only show a \".foo\" on the owner\n    // if it lives up the chain, not if it's an own-instance field.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        ObjectType initial = objectType;\n        ObjectType owner = objectType;\n        if (objectType.getConstructor() != null\n            && objectType.getConstructor().isInterface()) {\n          owner = FunctionType.getTopDefiningInterface(objectType, propName);\n        } else {\n          // climb the prototype chain\n          while (owner != null && !owner.hasOwnProperty(propName)) {\n            owner = owner.getImplicitPrototype();\n          }\n        }\n        // only show \"X.foo\" if foo came from a prototype/interface,\n        // not if it's defined directly on the instance\n        if (owner != null\n            && owner != initial\n            && (owner.getConstructor() != null\n                || owner.isFunctionPrototypeType())) {\n          return owner.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    // fallback: just show the type or qualified name\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType deref = type.dereference();\n      if (deref != null) {\n        type = deref;\n      }\n    }\n    if (type.isFunctionPrototypeType()\n        || (type.toObjectType() != null\n            && type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}