{
    "generation": "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n\n  // DiagnosticGroups override the plain checkTypes option.\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    // If DiagnosticGroups did not override the plain checkTypes\n    // option, and checkTypes is disabled, then turn off the\n    // parser type warnings.\n    options.setWarningLevel(\n        DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  }\n\n  // Initialize the warnings guard.\n  List<WarningsGuard> guards = Lists.newArrayList();\n  // Always suppress @nocompile doc warnings first.\n  guards.add(\n      new SuppressDocWarningsGuard(\n          getDiagnosticGroups().getRegisteredGroups()));\n\n  // Capture the user-specified guard so we can detect overrides.\n  WarningsGuard userGuard = options.getWarningsGuard();\n\n  // Only shut off the missing-variable warnings if the user has\n  // not explicitly overridden them.\n  if (!options.checkSymbols &&\n      (userGuard == null ||\n       !userGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n    guards.add(\n        new DiagnosticGroupWarningsGuard(\n            DiagnosticGroups.CHECK_VARIABLES,\n            CheckLevel.OFF));\n  }\n\n  // Finally add the user guard so explicit --jscomp_* flags win.\n  if (userGuard != null) {\n    guards.add(userGuard);\n  }\n\n  this.warningsGuard = new ComposeWarningsGuard(guards);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}