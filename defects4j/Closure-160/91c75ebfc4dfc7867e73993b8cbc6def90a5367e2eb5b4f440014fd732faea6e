{
    "generation": "  /**\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   */\n  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is disabled, then turn off the\n      // parser type warnings. Note the apparent discrepancy between\n      // the comment and the code, but this is pre-existing logic.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    // Get the WarningsGuard based on the options passed to this method. This guard\n    // reflects the command-line flags like --warning_level and --jscomp_error.\n    WarningsGuard initialGuard = options.getWarningsGuard();\n    guards.add(initialGuard);\n\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If checkSymbols is off,\n    // we disable the CHECK_VARIABLES warnings group, unless the user has\n    // explicitly enabled it using a flag like --jscomp_error=undefinedVars.\n    if (!options.checkSymbols &&\n        !initialGuard.enables( // Check if CHECK_VARIABLES is not already enabled by specific options\n            DiagnosticGroups.CHECK_VARIABLES)) {\n      // If checkSymbols is disabled, and the initial guard doesn't explicitly\n      // enable CHECK_VARIABLES (e.g., via --jscomp_error=...), then add a\n      // guard to disable this group.\n      guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    // Compose the final warnings guard. This combines the suppression guard,\n    // the guard based on options, and potentially the CHECK_VARIABLES OFF guard.\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}