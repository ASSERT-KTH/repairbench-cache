{
    "generation": "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n\n  // DiagnosticGroups override the plain checkTypes option.\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    // If DiagnosticGroups did not override the plain checkTypes\n    // option, and checkTypes is not enabled, then turn off the\n    // parser type warnings.\n    options.setWarningLevel(\n        DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n\n  // DiagnosticGroups override the plain checkSymbols option.\n  // Previously, the variable-check warnings could be force-disabled\n  // (as in QUIET mode) even when the user explicitly requested an\n  // error (e.g. via --jscomp_error=undefinedVars). Now we honor the\n  // command-line override: if the user explicitly enables CHECK_VARIABLES,\n  // we force checkSymbols to true.\n  if (options.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n    options.checkSymbols = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_VARIABLES)) {\n    options.checkSymbols = false;\n  }\n\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  }\n\n  // Initialize the warnings guard.\n  List<WarningsGuard> guards = Lists.newArrayList();\n  // This guard suppresses warnings included in @suppress annotations.\n  guards.add(\n      new SuppressDocWarningsGuard(\n          getDiagnosticGroups().getRegisteredGroups()));\n  // Add the warnings guard provided via options (e.g. command-line overrides)\n  guards.add(options.getWarningsGuard());\n\n  // All passes must run the variable check. The compiler later synthesizes\n  // variables so that it doesn't crash and also validates externs.\n  // If the user does NOT want variable checking, then we shut off the\n  // CHECK_VARIABLES diagnostic by adding a guard.\n  if (!options.checkSymbols) {\n    guards.add(new DiagnosticGroupWarningsGuard(\n        DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n  }\n\n  this.warningsGuard = new ComposeWarningsGuard(guards);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}