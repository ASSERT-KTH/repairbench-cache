{
    "generation": "/**\n * Initialize the compiler options. Only necessary if you're not doing\n * a normal compile() job.\n */\npublic void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n        if (outStream == null) {\n            setErrorManager(\n                new LoggerErrorManager(createMessageFormatter(), logger));\n        } else {\n            PrintStreamErrorManager printer =\n                new PrintStreamErrorManager(createMessageFormatter(), outStream);\n            printer.setSummaryDetailLevel(options.summaryDetailLevel);\n            setErrorManager(printer);\n        }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes = false;\n    } else if (!options.checkTypes) {\n        // If DiagnosticGroups did not override the plain checkTypes\n        // option, and checkTypes is enabled, then turn off the\n        // parser type warnings.\n        options.setWarningLevel(\n            DiagnosticGroup.forType(\n                RhinoErrorReporter.TYPE_PARSE_ERROR),\n            CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n        options.setWarningLevel(\n            DiagnosticGroups.GLOBAL_THIS,\n            options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    // Handle CHECK_VARIABLES diagnostic group based on checkSymbols and warning guards\n    if (!options.checkSymbols &&\n        (warningsGuard == null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        // Only add the CHECK_VARIABLES guard if it's not already disabled by other guards\n        if (!guards.stream().anyMatch(guard -> guard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n            guards.add(new DiagnosticGroupWarningsGuard(\n                DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n        }\n    }\n\n    // If undefinedVars is set as an error, ensure CHECK_VARIABLES is enabled\n    if (options.getErrorLevel(DiagnosticGroups.CHECK_VARIABLES).isOn()) {\n        guards.removeIf(guard -> guard.disables(DiagnosticGroups.CHECK_VARIABLES));\n    }\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}