{
    "generation": "/**\n * Initialize the compiler options. Only necessary if you're not doing\n * a normal compile() job.\n */\npublic void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n\n  // DiagnosticGroups override the plain checkTypes option.\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    // If DiagnosticGroups did not override the plain checkTypes\n    // option, and checkTypes is not enabled, then turn off the\n    // parser type warnings.\n    options.setWarningLevel(\n        DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  }\n\n  // Initialize the warnings guard.\n  List<WarningsGuard> guards = Lists.newArrayList();\n  guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n  guards.add(options.getWarningsGuard());\n\n  // All passes must run the variable check. This synthesizes\n  // variables later so that the compiler doesn't crash. It also\n  // checks the externs file for validity.\n  // If you don't want to warn about missing variable declarations,\n  // we shut that specific error off. However, if the user has explicitly\n  // overridden the undefined variable diagnostic (for example via\n  // --jscomp_error=undefinedVars), then that override should take precedence.\n  if (!options.checkSymbols &&\n      !options.enables(DiagnosticGroups.CHECK_VARIABLES) &&\n      !options.disables(DiagnosticGroups.CHECK_VARIABLES)) {\n    guards.add(new DiagnosticGroupWarningsGuard(\n        DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n  }\n\n  this.warningsGuard = new ComposeWarningsGuard(guards);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}