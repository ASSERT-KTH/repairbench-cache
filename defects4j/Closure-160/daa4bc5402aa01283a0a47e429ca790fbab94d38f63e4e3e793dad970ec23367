{
    "generation": "  /**\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   */\n  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (options.checkTypes) { // Note: Original code had !options.checkTypes here, which seems wrong.\n                                     // If checkTypes is enabled (and not overridden), turn off parser type warnings.\n                                     // If checkTypes is disabled (and not overridden), we don't need to do anything specific here.\n                                     // Assuming the original intent was correct despite the apparent logic contradiction:\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      // Let's stick to the original logic for this part as it wasn't the cause of the test failure.\n      options.setWarningLevel(\n          DiagnosticGroups.PARSER_TYPE_WARNINGS, // Assuming this group exists or maps correctly.\n                                                 // The original used DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR)\n                                                 // Let's keep the original group reference for safety.\n          DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF);\n    }\n\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard()); // Add the primary guard based on options first.\n\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If checkSymbols is off,\n    // we turn off the variable check warnings, unless the user explicitly\n    // enabled warnings/errors for checkVariables.\n    if (!options.checkSymbols) {\n      CheckLevel checkVarsEffectiveLevel =\n          options.getOptionStates().getEffectiveLevel(DiagnosticGroups.CHECK_VARIABLES);\n      if (checkVarsEffectiveLevel != CheckLevel.ERROR\n          && checkVarsEffectiveLevel != CheckLevel.WARNING) {\n        // If checkSymbols is off, and the user hasn't explicitly set\n        // CHECK_VARIABLES to ERROR or WARNING, then turn it OFF.\n        guards.add(new DiagnosticGroupWarningsGuard(\n            DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n      }\n    }\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}