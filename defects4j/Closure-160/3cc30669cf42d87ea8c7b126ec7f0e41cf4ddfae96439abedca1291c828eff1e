{
    "generation": "  /**\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   */\n  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // If specific checks related to CHECK_VARIABLES are explicitly enabled\n    // as a warning or an error (via --jscomp_error/warning flags),\n    // then force options.checkSymbols to true. This ensures that the\n    // relevant compiler passes (like VarCheck's sub-checks, which depend\n    // on options.checkSymbols being true) are not skipped, even if\n    // `checkSymbols` was initially set to false (e.g., by --warning_level=QUIET).\n    boolean checkSymbolsForcedByExplicitErrorOrWarning = false;\n\n    // Check individual diagnostic types that are part of the CHECK_VARIABLES bundle.\n    // For example, DiagnosticGroups.UNDEFINED_VARIABLES (which includes VarCheck.UNDEFINED_VAR_ERROR)\n    // is part of CHECK_VARIABLES. If it's explicitly set to ERROR, we must enable checkSymbols.\n    for (DiagnosticType type : DiagnosticGroups.CHECK_VARIABLES.getDiagnostics()) {\n        CheckLevel currentLevel = options.getWarningsGuard().levelFor(DiagnosticGroup.forType(type));\n        if (currentLevel != null && currentLevel.isOn()) {\n            options.checkSymbols = true;\n            checkSymbolsForcedByExplicitErrorOrWarning = true;\n            break;\n        }\n    }\n\n    // Also check the CHECK_VARIABLES group itself, in case it was explicitly enabled.\n    // (e.g., via --jscomp_error=checkVars)\n    if (!checkSymbolsForcedByExplicitErrorOrWarning) {\n        CheckLevel checkVarsGroupLevel = options.getWarningsGuard().levelFor(DiagnosticGroups.CHECK_VARIABLES);\n        if (checkVarsGroupLevel != null && checkVarsGroupLevel.isOn()) {\n            options.checkSymbols = true;\n            // No need to set checkSymbolsForcedByExplicitErrorOrWarning here,\n            // as we don't break early and will exit this block.\n        }\n    }\n\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    // Add the warnings guard configured from command-line options. This guard\n    // reflects `--jscomp_error`, `--jscomp_warning`, etc.\n    guards.add(options.getWarningsGuard());\n\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    // This logic only applies if options.checkSymbols is still false AFTER\n    // considering explicit --jscomp_error/warning flags above.\n    if (!options.checkSymbols &&\n        (warningsGuard == null || !warningsGuard.disables(\n            DiagnosticGroups.CHECK_VARIABLES))) {\n      guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}