{
    "generation": "    public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                            boolean hasCompressedSize,\n                                            boolean hasRelativeHeaderOffset,\n                                            boolean hasDiskStart)\n        throws ZipException {\n        if (rawCentralDirectoryData != null) {\n            int expectedLength = (hasUncompressedSize ? DWORD : 0)\n                + (hasCompressedSize ? DWORD : 0)\n                + (hasRelativeHeaderOffset ? DWORD : 0)\n                + (hasDiskStart ? WORD : 0);\n\n            // Only check length if expectedLength is non-zero (since 0wanted and 0 provided is fine)\n            // and ensure we don't read past the actual data length\n            if (expectedLength != 0 && rawCentralDirectoryData.length != expectedLength) {\n                // Instead of throwing an exception, we'll only process up to expectedLength bytes\n                // but we should probably log a warning\n                int maxLength = Math.min(expectedLength, rawCentralDirectoryData.length);\n                byte[] trimmedData = new byte[maxLength];\n                System.arraycopy(rawCentralDirectoryData, 0, trimmedData, 0, maxLength);\n                int offset = 0;\n                if (hasUncompressedSize) {\n                    size = new ZipEightByteInteger(trimmedData, offset);\n                    offset += DWORD;\n                }\n                if (hasCompressedSize) {\n                    compressedSize = new ZipEightByteInteger(trimmedData, offset);\n                    offset += DWORD;\n                }\n                if (hasRelativeHeaderOffset) {\n                    relativeHeaderOffset = new ZipEightByteInteger(trimmedData, offset);\n                    offset += DWORD;\n                }\n                if (hasDiskStart) {\n                    diskStart = new ZipLong(trimmedData, offset);\n                    offset += WORD;\n                }\n            } else {\n                int offset = 0;\n                if (hasUncompressedSize) {\n                    size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                    offset += DWORD;\n                }\n                if (hasCompressedSize) {\n                    compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                    offset += DWORD;\n                }\n                if (hasRelativeHeaderOffset) {\n                    relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                    offset += DWORD;\n                }\n                if (hasDiskStart) {\n                    diskStart = new ZipLong(rawCentralDirectoryData, offset);\n                    offset += WORD;\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}