{
    "generation": "    /**\n     * Parses the raw bytes read from the central directory extra\n     * field with knowledge which fields are expected to be there.\n     *\n     * <p>All four fields inside the zip64 extended information extra\n     * field are optional and must only be present if their corresponding\n     * entry inside the central directory contains the correct magic\n     * value.</p>\n     */\n    public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                            boolean hasCompressedSize,\n                                            boolean hasRelativeHeaderOffset,\n                                            boolean hasDiskStart)\n        throws ZipException {\n        if (rawCentralDirectoryData != null) {\n            // Use the actual byte sizes of the Zip64 fields.\n            // ZipEightByteInteger fields are 8 bytes, ZipLong fields are 4 bytes.\n            // The original code incorrectly used DWORD (4) and WORD (2) from ZipConstants.\n            int expectedLength = (hasUncompressedSize ? ZipEightByteInteger.BYTE_SIZE : 0)\n                + (hasCompressedSize ? ZipEightByteInteger.BYTE_SIZE : 0)\n                + (hasRelativeHeaderOffset ? ZipEightByteInteger.BYTE_SIZE : 0)\n                + (hasDiskStart ? ZipLong.BYTE_SIZE : 0);\n\n            // As per COMPRESS-228, excess data in the extra field is allowed.\n            // Only throw an exception if the actual data length is shorter than expected.\n            if (rawCentralDirectoryData.length < expectedLength) {\n                throw new ZipException(\"central directory zip64 extended\"\n                                       + \" information extra field's length\"\n                                       + \" doesn't match central directory\"\n                                       + \" data.  Expected length \"\n                                       + expectedLength + \" but is \"\n                                       + rawCentralDirectoryData.length);\n            }\n            int offset = 0;\n            if (hasUncompressedSize) {\n                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += ZipEightByteInteger.BYTE_SIZE;\n            }\n            if (hasCompressedSize) {\n                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                         offset);\n                offset += ZipEightByteInteger.BYTE_SIZE;\n            }\n            if (hasRelativeHeaderOffset) {\n                relativeHeaderOffset =\n                    new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += ZipEightByteInteger.BYTE_SIZE;\n            }\n            if (hasDiskStart) {\n                diskStart = new ZipLong(rawCentralDirectoryData, offset);\n                offset += ZipLong.BYTE_SIZE;\n            }\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}