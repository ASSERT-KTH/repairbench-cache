{
    "generation": "    /**\n     * Parses the raw bytes read from the central directory extra\n     * field with knowledge which fields are expected to be there.\n     *\n     * <p>All four fields inside the zip64 extended information extra\n     * field are optional and must only be present if their corresponding\n     * entry inside the central directory contains the correct magic\n     * value.</p>\n     *\n     * <p>Certain tools create entries where the central directory extra\n     * field contains more data than is required based on the fields signaled\n     * in the central directory header. According to the spec, extra data\n     * must be ignored. We cater for this situation by allowing the\n     * central directory extra field to be longer than expected.</p>\n     */\n    public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                            boolean hasCompressedSize,\n                                            boolean hasRelativeHeaderOffset,\n                                            boolean hasDiskStart)\n        throws ZipException {\n        if (rawCentralDirectoryData != null) {\n            // Data specification section 4.5.3\n            //   Original Size          8 bytes    (if size == 0xFFFFFFFF)\n            //   Compressed Size        8 bytes    (if csize == 0xFFFFFFFF)\n            //   Relative Header Offset 8 bytes    (if offset == 0xFFFFFFFF)\n            //   Disk Start Number      4 bytes    (if disk == 0xFFFF)\n            int expectedLength = (hasUncompressedSize ? ZipConstants.DWORD : 0)\n                + (hasCompressedSize ? ZipConstants.DWORD : 0)\n                + (hasRelativeHeaderOffset ? ZipConstants.DWORD : 0)\n                + (hasDiskStart ? ZipConstants.WORD : 0);\n            // Some tools format the data incorrectly, we attempt to work\n            // around it and let parsing fail later - see COMPRESS-247\n            if (rawCentralDirectoryData.length < expectedLength) {\n                throw new ZipException(\"central directory zip64 extended\"\n                                       + \" information extra field's length\"\n                                       + \" doesn't match central directory\"\n                                       + \" data.  Expected length \"\n                                       + expectedLength + \" but is \"\n                                       + rawCentralDirectoryData.length);\n            }\n            int offset = 0;\n            if (hasUncompressedSize) {\n                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += ZipConstants.DWORD;\n            }\n            if (hasCompressedSize) {\n                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                         offset);\n                offset += ZipConstants.DWORD;\n            }\n            if (hasRelativeHeaderOffset) {\n                relativeHeaderOffset =\n                    new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += ZipConstants.DWORD;\n            }\n            if (hasDiskStart) {\n                // disk number is 32 bits in CDIR\n                diskStart = new ZipLong(rawCentralDirectoryData, offset);\n                // offset += WORD; // BZ 104483 - this was missing\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}