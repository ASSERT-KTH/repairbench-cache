{
    "generation": "    /**\n     * Parses the raw bytes read from the central directory extra\n     * field with knowledge which fields are expected to be there.\n     *\n     * <p>All four fields inside the zip64 extended information extra\n     * field are optional and must only be present if their corresponding\n     * entry inside the central directory contains the correct magic\n     * value.</p>\n     *\n     * <p>According to APPNOTE.TXT 4.5.3 The actual size of the field\n     * can be smaller than the expected size if the fields are omitted.</p>\n     *\n     * <p>The fields MUST only appear if the corresponding Local or Central\n     * directory record field is set to 0xFFFF or 0xFFFFFFFF. It is possible\n     * that the extra field is longer than the minimal required size based\n     * on the flags passed in.</p>\n     */\n    public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                            boolean hasCompressedSize,\n                                            boolean hasRelativeHeaderOffset,\n                                            boolean hasDiskStart)\n        throws ZipException {\n        if (rawCentralDirectoryData != null) {\n            // The Zip64 extra field contains \u0644\u0627\u0632\u0645\u064a fields based on the\n            // flags passed in. Other fields might be present if the\n            // central directory header values were 0xFF../0xFFFF.\n            // The extra field data length can be >= the required length.\n            // Let's calculate the minimum required length based on the flags.\n            int minimumExpectedLength = (hasUncompressedSize ? ZipConstants.DWORD : 0)\n                + (hasCompressedSize ? ZipConstants.DWORD : 0)\n                + (hasRelativeHeaderOffset ? ZipConstants.DWORD : 0)\n                + (hasDiskStart ? ZipConstants.WORD : 0);\n\n            // Check if the actual data length is sufficient for the required fields.\n            if (rawCentralDirectoryData.length < minimumExpectedLength) {\n                throw new ZipException(\"central directory zip64 extended\"\n                                       + \" information extra field's length\"\n                                       + \" is too short, expected minimum\"\n                                       + \" \" + minimumExpectedLength + \" bytes\"\n                                       + \" but is \" + rawCentralDirectoryData.length);\n            }\n\n            int offset = 0;\n            if (hasUncompressedSize) {\n                // Ensure we do not read beyond the bounds of the array\n                if (offset + ZipConstants.DWORD > rawCentralDirectoryData.length) {\n                     throw new ZipException(\"Data read out of bounds\"); // Should not happen due to the length check above, but safety first\n                 }\n                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += ZipConstants.DWORD;\n            }\n            if (hasCompressedSize) {\n                // Ensure we do not read beyond the bounds of the array\n                if (offset + ZipConstants.DWORD > rawCentralDirectoryData.length) {\n                     throw new ZipException(\"Data read out of bounds\");\n                 }\n                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                         offset);\n                offset += ZipConstants.DWORD;\n            }\n            if (hasRelativeHeaderOffset) {\n                 // Ensure we do not read beyond the bounds of the array\n                 if (offset + ZipConstants.DWORD > rawCentralDirectoryData.length) {\n                     throw new ZipException(\"Data read out of bounds\");\n                 }\n                relativeHeaderOffset =\n                    new ZipEightByteInteger(rawCentralDirectoryData, offset);\n                offset += ZipConstants.DWORD;\n            }\n            if (hasDiskStart) {\n                // Ensure we do not read beyond the bounds of the array\n                if (offset + ZipConstants.WORD > rawCentralDirectoryData.length) {\n                     throw new ZipException(\"Data read out of bounds\");\n                 }\n                // diskStart is ZipLong (4 bytes), corresponding to WORD in this context\n                diskStart = new ZipLong(rawCentralDirectoryData, offset);\n                // offset += ZipConstants.WORD; // No need to increment offset further as it's the last field potentially parsed\n            }\n            // Any remaining bytes in rawCentralDirectoryData are ignored as per the spec flexibility.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}