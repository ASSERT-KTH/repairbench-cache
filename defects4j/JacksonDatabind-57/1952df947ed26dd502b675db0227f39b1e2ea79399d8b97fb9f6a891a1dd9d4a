{
    "generation": " /**\n * Overloaded version of {@link #readValue(InputStream)}.\n */\npublic <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders != null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n\n    String encoding = detectCharset(src, offset, length);\n\n    JsonParser p = _parserFactory.createParser(src, offset, length, encoding);\n    p = _considerFilter(p, true);\n\n    return _bindAndReadValues(p);\n}\n\nprivate String detectCharset(byte[] bytes, int offset, int length) throws IOException {\n    if (length == 0) {\n        return \"UTF-8\";\n    }\n\n    int bomLength = Math.min(4, length);\n    byte[] bom = new byte[bomLength];\n    System.arraycopy(bytes, offset, bom, 0, bomLength);\n\n    if (bomLength >= 3 && bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n        return \"UTF-8\";\n    } else if (bomLength >= 2 && bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        return \"UTF-16BE\";\n    } else if (bomLength >= 2 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n        return \"UTF-16LE\";\n    } else if (bomLength >= 4 && bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        return \"UTF-32BE\";\n    } else if (bomLength >= 4 && bom[0] == (byte) 0xFF && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == 0x00) {\n        return \"UTF-32LE\";\n    } else {\n        return \"UTF-8\";\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}