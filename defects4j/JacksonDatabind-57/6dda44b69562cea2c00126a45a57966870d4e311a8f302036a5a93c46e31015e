{
    "generation": "    /**\n     * Overloaded version of {@link #readValue(InputStream)}.\n     */\n    public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n        }\n        // Ensure the byte array is a valid UTF-8 sequence before creating the parser\n        if (!isUtf8(src, offset, length)) {\n            throw new CharConversionException(\"Invalid UTF-8 sequence\");\n        }\n        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length),\n                true));\n    }\n\n    private boolean isUtf8(byte[] bytes, int offset, int length) {\n        int end = offset + length;\n        for (int i = offset; i < end; ) {\n            int b = bytes[i] & 0xFF;\n            if ((b & 0x80) == 0) {\n                i++;\n            } else if ((b & 0xE0) == 0xC0) {\n                if (i + 1 >= end || (bytes[i + 1] & 0xC0) != 0x80) {\n                    return false;\n                }\n                i += 2;\n            } else if ((b & 0xF0) == 0xE0) {\n                if (i + 2 >= end || (bytes[i + 1] & 0xC0) != 0x80 || (bytes[i + 2] & 0xC0) != 0x80) {\n                    return false;\n                }\n                i += 3;\n            } else if ((b & 0xF8) == 0xF0) {\n                if (i + 3 >= end || (bytes[i + 1] & 0xC0) != 0x80 || (bytes[i + 2] & 0xC0) != 0x80 || (bytes[i + 3] & 0xC0) != 0x80) {\n                    return false;\n                }\n                i += 4;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}