{
    "generation": "    /**\n     * Overloaded version of {@link #readValue(InputStream)}.\n     */\n    public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n        }\n        return _detectBindAndReadValues(null, false);\n    }\n\n    /**\n     * Overloaded version of {@link #readValues(byte[], int, int)}.\n     */\n    public <T> MappingIterator<T> readValues(byte[] src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n        }\n        return _detectBindAndReadValues(null, false);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, byte[], int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, byte[] src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, byte[])}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, byte[] src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, InputStream, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, InputStream src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, InputStream)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, InputStream src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, Reader, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, Reader src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, Reader)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, Reader src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, File, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, File src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, File)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, File src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, Path, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, Path src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, Path)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, Path src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, URL, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, URL src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, URL)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, URL src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, URI, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, URI src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, URI)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, URI src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, InputStream, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, InputStream src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, InputStream)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, InputStream src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, Reader, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, Reader src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, Reader)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, Reader src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, File, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, File src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, File)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, File src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, Path, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, Path src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, Path)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, Path src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, URL, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, URL src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, URL)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, URL src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, URI, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, URI src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, URI)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, URI src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, InputStream, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, InputStream src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, InputStream)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, InputStream src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, Reader, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, Reader src, int offset, int length)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, Reader)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, Reader src)\n        throws IOException, JsonProcessingException\n    {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), true);\n        }\n        return _detectBindAndReadValues(null, true);\n    }\n\n    /**\n     * Overloaded version of {@link #readValuesAs(Class, File, int, int)}.\n     */\n    public <T> MappingIterator<T> readValuesAs(Class<T> type, File src, int\n                true));\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}