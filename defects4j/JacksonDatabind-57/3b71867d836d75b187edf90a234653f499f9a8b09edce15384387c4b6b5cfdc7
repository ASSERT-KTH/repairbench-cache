{
    "generation": "/**\n * Overloaded version of {@link #readValue(InputStream)}.\n */\npublic <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders != null) {\n        // Must slice 'src' for correct offset/length handling on parser\n        byte[] newSrc = src;\n        if (offset != 0 || length != src.length) {\n            newSrc = new byte[length];\n            System.arraycopy(src, offset, newSrc, 0, length);\n            offset = 0;\n        }\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(newSrc, offset, length), false);\n    }\n    // For parser, must also use a slice if offset/length != full array\n    JsonParser p;\n    if (offset == 0 && length == src.length) {\n        p = _parserFactory.createParser(src);\n    } else {\n        p = _parserFactory.createParser(src, offset, length);\n    }\n    return _bindAndReadValues(_considerFilter(p, true));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}