{
    "generation": "    /**\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     */\n    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(rhs);\n\n        // According to the Javadoc: \"If either this or rhs has a NaN value in either part, NaN is returned\".\n        // This check must be performed before the addition, as the addition rules for NaN\n        // might not produce Complex.NaN (e.g., real part could remain non-NaN if only imaginary is NaN).\n        if (isNaN() || rhs.isNaN()) {\n            return Complex.NaN;\n        }\n\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}