{
    "generation": "@Override\nprotected CompilerOptions createOptions() {\n  CompilerOptions options = new CompilerOptions();\n  if (flags.processJqueryPrimitives) {\n    options.setCodingConvention(new JqueryCodingConvention());\n  } else {\n    options.setCodingConvention(new ClosureCodingConvention());\n  }\n  \n  options.setExtraAnnotationNames(flags.extraAnnotationName);\n\n  CompilationLevel level = flags.compilationLevel;\n  level.setOptionsForCompilationLevel(options);\n  if (flags.debug) {\n    level.setDebugOptionsForCompilationLevel(options);\n  }\n  if (flags.useTypesForOptimization) {\n    level.setTypeBasedOptimizationOptions(options);\n  }\n  if (flags.generateExports) {\n    options.setGenerateExports(flags.generateExports);\n  }\n\n  // Set up the message bundle early so that warning level configuration\n  // (which depends on a non-null messageBundle) will not generate unnecessary\n  // i18n warnings. In ADVANCED_OPTIMIZATIONS mode, if no translations file was\n  // specified, install an empty bundle to disable message warnings.\n  if (!flags.translationsFile.isEmpty()) {\n    try {\n      options.messageBundle = new XtbMessageBundle(\n          new FileInputStream(flags.translationsFile),\n          flags.translationsProject);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Reading XTB file\", e);\n    }\n  } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n    options.messageBundle = new EmptyMessageBundle();\n  }\n\n  WarningLevel wLevel = flags.warningLevel;\n  wLevel.setOptionsForWarningLevel(options);\n  for (FormattingOption formattingOption : flags.formatting) {\n    formattingOption.applyToOptions(options);\n  }\n\n  options.closurePass = flags.processClosurePrimitives;\n  options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&\n      flags.processJqueryPrimitives;\n  options.angularPass = flags.angularPass;\n\n  return options;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}