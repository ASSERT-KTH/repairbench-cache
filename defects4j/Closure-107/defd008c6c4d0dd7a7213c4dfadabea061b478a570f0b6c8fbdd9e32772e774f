{
    "generation": "@Override\nprotected CompilerOptions createOptions() {\n  CompilerOptions options = new CompilerOptions();\n\n  // Pick the right coding convention.\n  if (flags.processJqueryPrimitives) {\n    options.setCodingConvention(new JqueryCodingConvention());\n  } else {\n    options.setCodingConvention(new ClosureCodingConvention());\n  }\n\n  // Carry forward any extra user\u2010defined JSDoc annotations.\n  options.setExtraAnnotationNames(flags.extraAnnotationName);\n\n  // Set up the various compilation levels.\n  CompilationLevel level = flags.compilationLevel;\n  level.setOptionsForCompilationLevel(options);\n  if (flags.debug) {\n    level.setDebugOptionsForCompilationLevel(options);\n  }\n  if (flags.useTypesForOptimization) {\n    level.setTypeBasedOptimizationOptions(options);\n  }\n  if (flags.generateExports) {\n    options.setGenerateExports(flags.generateExports);\n  }\n\n  // Warning level and formatting.\n  WarningLevel wLevel = flags.warningLevel;\n  wLevel.setOptionsForWarningLevel(options);\n  for (FormattingOption fmt : flags.formatting) {\n    fmt.applyToOptions(options);\n  }\n\n  // Closure/library\u2010specific flags.\n  options.closurePass = flags.processClosurePrimitives;\n  options.jqueryPass = level == CompilationLevel.ADVANCED_OPTIMIZATIONS\n      && flags.processJqueryPrimitives;\n  options.angularPass = flags.angularPass;\n\n  // Only wire up the new i18n\u2010translation pipeline if the user actually\n  // supplied a translations file.  In particular, do NOT inject an\n  // EmptyMessageBundle for ADVANCED_OPTIMIZATIONS anymore, so that\n  // legacy \"var MSG_FOO = 1;\" patterns get treated as ordinary code\n  // (and can be dead\u2010coded away without spurious warnings).\n  if (!flags.translationsFile.isEmpty()) {\n    try {\n      options.messageBundle = new XtbMessageBundle(\n          new FileInputStream(flags.translationsFile),\n          flags.translationsProject);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Reading XTB file\", e);\n    }\n  }\n\n  return options;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}