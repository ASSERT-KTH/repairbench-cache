{
    "generation": "// performance sensitive\npublic boolean hasClass(String className) {\n    // Use a case-insensitive lookup for the \"class\" attribute.\n    final String classAttr = attributes.getIgnoreCase(\"class\");\n    if (classAttr == null || classAttr.length() == 0)\n        return false;\n        \n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    \n    if (len < wantLen)\n        return false;\n    \n    // if both lengths are equal, only need compare the className with the attribute\n    if (len == wantLen)\n        return classAttr.equalsIgnoreCase(className);\n    \n    // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                // whitespace ends a class name, compare it with the requested one, ignore case\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen))\n                    return true;\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // start a new token\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    \n    // check the last token\n    if (inClass && len - start == wantLen)\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    \n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}