{
    "generation": "    // performance sensitive\n    public boolean hasClass(String className) {\n        final String classAttr = attributes.get(\"class\");\n        // FIX: If the \"class\" attribute does not exist (and thus `classAttr` is null),\n        // then the element cannot have the class. Return false instead of throwing NullPointerException.\n        if (classAttr == null) {\n            return false;\n        }\n\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        // The original logic handles cases where `classAttr` is empty or shorter than `className`.\n        // This is still correct after the null check.\n        if (len == 0 || len < wantLen) {\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute\n        // This covers elements with a single class attribute, e.g., <p class=\"foo\">.\n        // `equalsIgnoreCase` correctly handles case-insensitivity.\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        // This handles elements with multiple class attributes, e.g., <p class=\"one two three\">.\n        // The loop iterates through class names, and `regionMatches(true, ...)` correctly handles case-insensitivity\n        // and avoids new String allocations.\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false; // Reset for next class name\n                }\n            } else {\n                if (!inClass) {\n                    // we're in a class name: keep the start of the substring\n                    inClass = true;\n                    start = i;\n                }\n            }\n        }\n\n        // Check the last entry, in case the class attribute doesn't end with whitespace.\n        // This handles cases like <p class=\"one two\">.\n        if (inClass && len - start == wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}