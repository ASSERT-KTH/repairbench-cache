{
    "generation": "    // performance sensitive\n    public boolean hasClass(String className) {\n        // Defensive checks: className should not be null or empty.\n        // An empty className (e.g. hasClass(\"\")) is not a valid match according to specs.\n        if (className == null || className.isEmpty()) {\n             return false;\n        }\n        // Trim the search class name? No, spec implies class names don't have leading/trailing whitespace.\n        // If the input className had spaces, it wouldn't match anyway.\n\n        final String classAttr = attributes.get(\"class\");\n\n        // Attribute must exist and be at least as long as the class name.\n        // Also handles empty class attribute early.\n        if (classAttr == null || classAttr.isEmpty()) {\n            return false; // No class attribute or empty attribute value.\n        }\n\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        // Quick check: if attribute is shorter than className, it can't be present.\n        if (len < wantLen) {\n            return false;\n        }\n\n        // Optimization: if attribute length is exactly className length, compare the whole string case-insensitively.\n        // This handles attributes with only one class name.\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // Scan for className within the attribute string, respecting whitespace boundaries.\n        // This avoids allocations compared to splitting the string (e.g., classAttr.split(\"\\\\s+\")).\n        boolean inClass = false; // Tracks if the current position is inside a potential class name segment.\n        int start = 0; // Tracks the start index of the current potential class name segment.\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // Whitespace encountered signifies the end of a potential class name segment.\n                    // Check if the identified segment matches the className (length and content, case-insensitive).\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true; // Found a match.\n                    }\n                    // End of the segment; reset state to look for the next potential class name.\n                    inClass = false;\n                }\n                // Continue scanning past potentially multiple whitespace characters.\n            } else { // Character is not whitespace.\n                if (!inClass) {\n                    // Start of a new potential class name segment.\n                    inClass = true;\n                    start = i; // Record the starting position.\n                }\n                // Continue scanning within the potential class name segment.\n            }\n        }\n\n        // After the loop, check if the string ended while inside a potential class name segment.\n        // This handles cases where the matching class name is the last one in the attribute string\n        // (i.e., not followed by whitespace).\n        if (inClass && len - start == wantLen) {\n            // Compare the final segment case-insensitively.\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        // No matching class name segment was found after checking all segments.\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}