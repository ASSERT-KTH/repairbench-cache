{
    "generation": "// performance sensitive\npublic boolean hasClass(String className) {\n    // Look up the \"class\" attribute without being tripped up by key case.\n    String classAttr = null;\n    for (Attribute attr : attributes) {\n        if (attr.getKey().equalsIgnoreCase(\"class\")) {\n            classAttr = attr.getValue();\n            break;\n        }\n    }\n    if (classAttr == null || classAttr.length() == 0)\n        return false;\n\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n\n    if (len < wantLen)\n        return false;\n\n    // fast path: if there is no extra whitespace, the attribute must exactly equal className (ignoring case)\n    if (len == wantLen)\n        return className.equalsIgnoreCase(classAttr);\n\n    // otherwise, do a whitespace\u2010aware scan to check for a token that equals className (ignoring case)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                if ((i - start) == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen))\n                    return true;\n                inClass = false;\n            }\n        } else if (!inClass) {\n            inClass = true;\n            start = i;\n        }\n    }\n    // check the last token if the string didn\u2019t end with whitespace\n    if (inClass && (len - start) == wantLen)\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}