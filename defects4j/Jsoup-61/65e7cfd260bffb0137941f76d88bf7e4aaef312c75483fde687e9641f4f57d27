{
    "generation": "// performance sensitive\npublic boolean hasClass(String className) {\n    // Reject null or empty class names immediately.\n    if (className == null || className.length() == 0)\n        throw new IllegalArgumentException(\"className must not be empty\");\n\n    // Get the value of the \"class\" attribute; if missing, no classes exist.\n    final String classAttr = attributes.get(\"class\");\n    if (classAttr == null || classAttr.length() == 0)\n        return false;\n\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n\n    // If the entire attribute is exactly the class name, compare directly.\n    if (len == wantLen)\n        return className.equalsIgnoreCase(classAttr);\n\n    // Otherwise, scan through the attribute looking for tokens.\n    // (NB: We treat NBSP (U+00A0) as whitespace because HTML does too.)\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        char c = classAttr.charAt(i);\n        // Use explicit check for non-breaking space since Character.isWhitespace('\\u00A0') is false.\n        if (c == '\\u00A0' || Character.isWhitespace(c)) {\n            if (inClass) {\n                // End of a class token. If the token length matches, compare it.\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen))\n                    return true;\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    // Check the final token (if we didn\u2019t end on whitespace).\n    if (inClass && len - start == wantLen)\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}