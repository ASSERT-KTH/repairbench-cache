{
    "generation": "    // performance sensitive\n    public boolean hasClass(String className) {\n        final String classAttr = attributes.get(\"class\");\n\n        // Fix: Handle the case where the \"class\" attribute is missing (null) or empty.\n        // If classAttr is null, no class attribute exists for this element.\n        // If classAttr is an empty string, there are no class names present.\n        if (classAttr == null || classAttr.isEmpty()) {\n            return false;\n        }\n\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        // If the class attribute string is shorter than the desired class name,\n        // it cannot possibly contain the desired class name.\n        if (len < wantLen) {\n            return false;\n        }\n\n        // If both lengths are equal, it means the class attribute contains a single class name\n        // that has the same length as the desired class name. We just need to compare them,\n        // ignoring case.\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // Otherwise (len > wantLen), the class attribute string might contain multiple class names\n        // separated by whitespace, or a single class name that is longer than 'className'\n        // but which 'className' might match as a substring.\n        // We need to scan for individual class names and compare them.\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // White space ends a class name. Compare the extracted class name\n                    // (from 'start' to 'i') with the requested one, ignoring case.\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true; // Found a match!\n                    }\n                    inClass = false; // Reset to look for the next class name\n                }\n            } else {\n                if (!inClass) {\n                    // We've just entered a class name (current character is not whitespace\n                    // and we were not previously in a class name).\n                    // Mark the start of this potential class name.\n                    inClass = true;\n                    start = i;\n                }\n            }\n        }\n\n        // After the loop, we need to check the last class name in the string,\n        // in case the string does not end with whitespace.\n        // For example, if classAttr is \"foo bar\", \"bar\" would be processed here.\n        if (inClass && len - start == wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        // If no match was found after checking all class names, return false.\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}