{
    "generation": "public boolean hasClass(String className) {\n    // Retrieve the \"class\" attribute in a case-insensitive manner.\n    // This fixes the bug where elements with attribute names like \"Class\" or \"CLASS\" were missed.\n    String classAttr = attributes.getIgnoreCase(\"class\");\n    if (classAttr == null)\n        classAttr = \"\";\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n\n    // If the entire attribute exactly matches the requested class name (ignoring case)\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n\n    // Otherwise, scan the attribute looking for whitespace-delimited tokens.\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                // End of a token \u2013 if token length matches and equals (ignoring case), then we have a match.\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen))\n                    return true;\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n\n    // Check the last token in the attribute string.\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}