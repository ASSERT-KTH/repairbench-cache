{
    "generation": "    // performance sensitive\n    public boolean hasClass(String className) {\n        // HTML attribute names are case-insensitive.\n        // Use getIgnoreCase to retrieve the \"class\" attribute value,\n        // allowing for variations like \"Class\", \"CLASS\", etc.\n        final String classAttr = attributes.getIgnoreCase(\"class\");\n\n        // If the element does not have a class attribute, or if its value is empty,\n        // it cannot have the requested class.\n        if (classAttr == null || classAttr.length() == 0) {\n            return false;\n        }\n\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        // If the class attribute value is shorter than the desired class name,\n        // it cannot be a match.\n        if (len < wantLen) {\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute\n        // This handles cases where the class attribute only contains one class name\n        // (e.g., class=\"foo\") and we're looking for that specific class.\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        // This part iterates through the class attribute value, splitting it by whitespace\n        // to find individual class names and comparing them case-insensitively.\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false;\n                }\n            } else {\n                if (!inClass) {\n                    // we're in a class name : keep the start of the substring\n                    inClass = true;\n                    start = i;\n                }\n            }\n        }\n\n        // check the last entry:\n        // After the loop, if we were in a class name, it means the last part\n        // of the string might be the class name we're looking for.\n        if (inClass && len - start == wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}