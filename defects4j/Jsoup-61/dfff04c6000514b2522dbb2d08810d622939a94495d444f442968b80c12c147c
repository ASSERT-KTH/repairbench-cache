{
    "generation": "public boolean hasClass(String className) {\n    // Retrieve the class attribute in a case-insensitive way.\n    String classAttr = \"\";\n    for (Map.Entry<String, String> entry : attributes.entrySet()) {\n        if (entry.getKey().equalsIgnoreCase(\"class\")) {\n            classAttr = entry.getValue();\n            break;\n        }\n    }\n    \n    final int len = classAttr.length();\n    final int wantLen = className.length();\n\n    if (len == 0 || len < wantLen)\n        return false;\n\n    // If there is exactly one class (i.e. no whitespace), just compare.\n    if (len == wantLen)\n        return className.equalsIgnoreCase(classAttr);\n\n    // Otherwise, scan through the attribute value (which may contain multiple space separated classes)\n    // and check each token using a region match (ignoring case) without extra allocations.\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen))\n                    return true;\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n\n    // Check the last token if there's no trailing whitespace.\n    if (inClass && len - start == wantLen)\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}