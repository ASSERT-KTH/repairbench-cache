{
    "generation": "    // performance sensitive\n    public boolean hasClass(String className) {\n        final String classAttr = attributes.get(\"class\");\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        if (len == 0 || len < wantLen) {\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false;\n                }\n            } else {\n                if (!inClass) {\n                    // we're in a class name : keep the start of the substring\n                    inClass = true;\n                    start = i;\n                }\n            }\n        }\n\n        // check the last entry\n        if (inClass && len - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n            return true;\n        }\n\n        // also check if the className is in the middle of the string (not space-separated)\n        // this handles cases where the class attribute isn't properly space-separated\n        // but still matches when ignoring case\n        if (len >= wantLen) {\n            for (int i = 0; i <= len - wantLen; i++) {\n                if (classAttr.regionMatches(true, i, className, 0, wantLen)) {\n                    // check if we're at start/end or surrounded by whitespace or non-word chars\n                    boolean leftOk = (i == 0) || Character.isWhitespace(classAttr.charAt(i-1)) || !Character.isLetterOrDigit(classAttr.charAt(i-1));\n                    boolean rightOk = (i + wantLen == len) || Character.isWhitespace(classAttr.charAt(i+wantLen)) || !Character.isLetterOrDigit(classAttr.charAt(i+wantLen));\n                    if (leftOk && rightOk) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}