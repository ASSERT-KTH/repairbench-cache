{
    "generation": "    // performance sensitive\n    public boolean hasClass(String className) {\n        // Attempt to retrieve the class attribute value using the standard Jsoup method.\n        // In Jsoup, attribute names are canonicalized to lowercase, so 'attributes.get(\"class\")'\n        // should ideally handle all casings of the 'class' attribute name (e.g., 'Class', 'CLASS').\n        String classAttr = attributes.get(\"class\");\n\n        // If the standard retrieval yields an empty string (meaning the attribute was not found\n        // or stored under the canonical lowercase 'class' name),\n        // we perform a fallback check by iterating all attributes.\n        // This compensates for potential inconsistencies in attribute name storage/retrieval\n        // that might occur in specific Jsoup versions or environments where attribute names\n        // are not reliably canonicalized to lowercase in the Attributes map keys.\n        if (classAttr.isEmpty()) { // Jsoup's attributes.get() returns \"\" if not found, not null.\n            for (org.jsoup.nodes.Attribute attr : attributes) {\n                if (attr.getKey().equalsIgnoreCase(\"class\")) {\n                    classAttr = attr.getValue();\n                    break;\n                }\n            }\n        }\n        \n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        if (len == 0 || len < wantLen) {\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false;\n                }\n            } else {\n                if (!inClass) {\n                    // we're in a class name : keep the start of the substring\n                    inClass = true;\n                    start = i;\n                }\n            }\n        }\n\n        // check the last entry\n        if (inClass && len - start == wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}