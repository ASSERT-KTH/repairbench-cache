{
    "generation": "    // performance sensitive\n    public boolean hasClass(String className) {\n        final String classAttr = attributes.get(\"class\");\n        // FIX: If the 'class' attribute does not exist for the element,\n        // attributes.get(\"class\") returns null. Accessing .length() on a null\n        // string would throw a NullPointerException. An element without a\n        // 'class' attribute should naturally not be considered to have any classes.\n        if (classAttr == null) {\n            return false;\n        }\n\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        if (len == 0 || len < wantLen) {\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false;\n                }\n            } else {\n                if (!inClass) {\n                    // we're in a class name : keep the start of the substring\n                    inClass = true;\n                    start = i;\n                }\n            }\n        }\n\n        // check the last entry - if we were in a class name when the loop ended, check that last token\n        // The condition `len - start == wantLen` is crucial here to ensure an exact match.\n        // For example, if classAttr=\"foobar\" and className=\"foo\", it should not match.\n        // The last part of the string 'foobar' (from start=0, len=6) is not equal to 'foo' (len=3).\n        if (inClass && len - start == wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}