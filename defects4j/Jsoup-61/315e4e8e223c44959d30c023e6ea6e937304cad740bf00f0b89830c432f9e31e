{
    "generation": "    // performance sensitive\n    public boolean hasClass(String className) {\n        // Bug fix: The original code used attributes.get(\"class\"), which assumes the attribute\n        // key \"class\" is always stored in lowercase. While Jsoup's parser typically normalizes\n        // attribute names to lowercase, scenarios exist (e.g., manually constructed Elements,\n        // or older Jsoup versions/environments) where the 'class' attribute might be stored\n        // with different casing (e.g., \"Class\", \"CLASS\").\n        // To ensure robust case-insensitive retrieval of the \"class\" attribute value,\n        // use attributes.getIgnoreCase(\"class\"). This will correctly fetch the value regardless\n        // of the case of the 'class' attribute name.\n        final String classAttr = attributes.getIgnoreCase(\"class\");\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        if (len == 0 || len < wantLen) {\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false;\n                }\n            } else {\n                if (!inClass) {\n                    // we're in a class name : keep the start of the substring\n                    inClass = true;\n                    start = i;\n                }\n            }\n        }\n\n        // check the last entry\n        if (inClass && len - start == wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}