{
    "generation": "    // performance sensitive\n    public boolean hasClass(String className) {\n        // Use getIgnoreCase to handle attribute names like CLASS, class, Class\n        final String classAttr = attributes.getIgnoreCase(\"class\");\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        // Basic length checks: attribute empty, className empty, attribute too short\n        // Added wantLen == 0 check for robustness.\n        if (len == 0 || wantLen == 0 || len < wantLen) {\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    // regionMatches(true,...) ensures case-insensitive comparison\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false; // Reset for the next potential class\n                }\n                // else: whitespace signifies boundary or padding; continue\n            } else { // Character is not whitespace\n                if (!inClass) {\n                    // Starting a new potential class name token\n                    inClass = true;\n                    start = i;\n                }\n                // else: Already in a class name token, continue scanning\n            }\n        }\n\n        // check the last token after the loop, in case the string doesn't end with whitespace\n        // This check is crucial for the last class name in the attribute\n        if (inClass && len - start == wantLen) {\n            // regionMatches(true,...) ensures case-insensitive comparison\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false; // className not found in attribute string\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}