{
    "generation": "// performance sensitive\npublic boolean hasClass(String className) {\n    // fetch the \"class\" attribute value, falling back to a case\u2010insensitive key\n    String classAttr = attributes.get(\"class\");\n    if (classAttr == null || classAttr.length() == 0) {\n        for (Attribute attr : attributes) {\n            if (\"class\".equalsIgnoreCase(attr.getKey())) {\n                classAttr = attr.getValue();\n                break;\n            }\n        }\n        if (classAttr == null || classAttr.length() == 0) {\n            return false;\n        }\n    }\n\n    int len = classAttr.length();\n    int wantLen = className.length();\n\n    if (len < wantLen) {\n        return false;\n    }\n    // if exactly equal length, do a simple case\u2010insensitive compare\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n\n    // otherwise scan for whitespace\u2010separated tokens\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        char c = classAttr.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (inClass) {\n                // end of a token: compare\n                if (i - start == wantLen\n                        && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else if (!inClass) {\n            // start of a token\n            inClass = true;\n            start = i;\n        }\n    }\n    // check the final token\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}