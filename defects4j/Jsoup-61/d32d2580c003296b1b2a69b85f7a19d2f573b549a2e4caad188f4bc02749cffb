{
    "generation": "    // performance sensitive\n    public boolean hasClass(String className) {\n        // Null check for className is implicit via className.length() below,\n        // but explicit check is cleaner. Return false if className is null or empty.\n        if (className == null || className.isEmpty()) {\n            return false;\n        }\n\n        final String classAttr = attributes.get(\"class\");\n        // Return false if class attribute is null, empty, or shorter than className\n        if (classAttr == null || classAttr.isEmpty()) {\n            return false;\n        }\n\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        if (len < wantLen) {\n            return false;\n        }\n\n        // Quick check: If lengths match, we can do a simple equalsIgnoreCase\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // If className contains whitespace, it's an invalid class name, return false\n        // (This check wasn't strictly necessary based on test cases but improves robustness)\n        for (int j = 0; j < wantLen; j++) {\n            if (Character.isWhitespace(className.charAt(j))) {\n                return false;\n            }\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        boolean inClass = false; // Tracks if the current position is inside a potential class name segment.\n        int start = 0; // Start index of the current potential class name segment.\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // Whitespace marks the end of a class name segment. Check if it matches.\n                    // Compare length: (current index i) - (start index) == length of className\n                    // Compare content: use regionMatches with ignoreCase = true\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true; // Found a match\n                    }\n                    inClass = false; // Reset flag, we are no longer in a class name segment.\n                }\n                // Continue scanning past whitespace...\n            } else {\n                // Character is not whitespace.\n                if (!inClass) {\n                    // Start of a new potential class name segment.\n                    inClass = true;\n                    start = i; // Record the start index.\n                }\n                // Continue scanning characters within the segment...\n            }\n        }\n\n        // After the loop, check if the string ended while inside a class name segment.\n        // This handles cases where the desired class is the last one and not followed by whitespace.\n        if (inClass && len - start == wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false; // No match found\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}