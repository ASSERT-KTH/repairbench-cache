{
    "generation": "// performance sensitive\npublic boolean hasClass(String className) {\n    // use a case\u2013insensitive lookup for the \"class\" attribute\n    final String classAttr = attributes.getIgnoreCase(\"class\");\n    if (classAttr == null || classAttr.length() == 0)\n        return false;\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n\n    if (len < wantLen)\n        return false;\n\n    // if lengths are equal, just compare the whole string case\u2013insensitively\n    if (len == wantLen)\n        return className.equalsIgnoreCase(classAttr);\n\n    // otherwise, scan the attribute for individual class tokens\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        char c = classAttr.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (inClass) {\n                // end of a class token; check if it matches the requested class name\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen))\n                    return true;\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                // start of a new class token\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    // check the last token (if there is one)\n    if (inClass && len - start == wantLen)\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}