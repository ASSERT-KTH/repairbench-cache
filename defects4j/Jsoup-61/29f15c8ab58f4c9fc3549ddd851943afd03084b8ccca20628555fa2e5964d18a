{
    "generation": "import org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element; // Assuming this method belongs to Element or similar class with 'attributes' field\n\n// The following imports are assumed based on standard Jsoup usage, though not strictly needed for the method itself\nimport org.jsoup.Jsoup;\nimport org.jsoup.select.Elements;\nimport org.junit.Test; // Hypothetical test imports\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertEquals;\n\n\n// Assume the method is part of a class that has an 'attributes' field of type Attributes\n// e.g., public class Element { ... Attributes attributes; ... }\n\n    /**\n     * Checks if this element has the specified class name, case-insensitive.\n     * This method is typically performance sensitive, so operates directly on the underlying class string,\n     * avoiding allocations and splits, wherever possible.\n     *\n     * @param className case-insensitive class name to check for\n     * @return true if this element has the class\n     */\n    // performance sensitive\n    public boolean hasClass(String className) {\n        // Fetches the class attribute value. Uses getIgnoreCase to handle situations where the attribute name case varies (e.g., \"Class\" or \"CLASS\").\n        final String classAttr = attributes.getIgnoreCase(\"class\"); // Use getIgnoreCase for robustness against attribute key casing\n        final int len = classAttr.length();\n        final int wantLen = className.length();\n\n        if (len == 0 || len < wantLen) {\n            return false;\n        }\n\n        // if both lengths are equal, only need compare the className with the attribute\n        if (len == wantLen) {\n            return className.equalsIgnoreCase(classAttr);\n        }\n\n        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)\n        boolean inClass = false;\n        int start = 0;\n        for (int i = 0; i < len; i++) {\n            if (Character.isWhitespace(classAttr.charAt(i))) {\n                if (inClass) {\n                    // white space ends a class name, compare it with the requested one, ignore case\n                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                        return true;\n                    }\n                    inClass = false;\n                }\n            } else {\n                if (!inClass) {\n                    // we're in a class name : keep the start of the substring\n                    inClass = true;\n                    start = i;\n                }\n            }\n        }\n\n        // check the last entry\n        if (inClass && len - start == wantLen) {\n            return classAttr.regionMatches(true, start, className, 0, wantLen);\n        }\n\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}