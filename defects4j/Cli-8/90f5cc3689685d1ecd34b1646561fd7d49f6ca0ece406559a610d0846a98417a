{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * <p>This fixed version first splits the input text on new\u2010lines so that\n * already separated paragraphs are preserved. For each paragraph it then\n * wraps the text as needed. If a nonzero nextLineTabStop is specified, all\n * lines after the first of each paragraph are padded accordingly.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                           int nextLineTabStop, String text)\n{\n    // Use the formatter's new-line string.\n    String nl = defaultNewLine;\n    // Split the input text on newlines (preserving empty trailing parts)\n    String[] lines = text.split(\"\\\\r?\\\\n\", -1);\n    for (int i = 0; i < lines.length; i++) {\n        if (i > 0) {\n            sb.append(nl);\n        }\n        String line = lines[i];\n        // If the line is empty, nothing more to do.\n        if (line.length() == 0) {\n            continue;\n        }\n        // If this is a \"short\" line that fits in the allowed width,\n        // simply output it (adding padding if needed for non-first paragraphs).\n        if (line.length() <= width) {\n            if (i > 0 && nextLineTabStop > 0) {\n                sb.append(createPadding(nextLineTabStop));\n            }\n            sb.append(line);\n        } else {\n            // For a long line, we wrap it.\n            // For paragraphs beyond the first, we want to add padding\n            // to all wrapped lines.\n            String segment = (i > 0 && nextLineTabStop > 0)\n                             ? line = createPadding(nextLineTabStop) + line\n                             : line;\n            while (segment.length() > width) {\n                // The first call uses an indent of 0 for the very first paragraph,\n                // otherwise use nextLineTabStop.\n                int indent = (i == 0) ? 0 : nextLineTabStop;\n                int pos = findWrapPos(segment, width, indent);\n                if (pos == -1) {\n                    break;\n                }\n                sb.append(rtrim(segment.substring(0, pos)));\n                sb.append(nl);\n                // Prepend padding for every subsequent line.\n                segment = createPadding(nextLineTabStop) + segment.substring(pos).trim();\n            }\n            sb.append(segment);\n        }\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}