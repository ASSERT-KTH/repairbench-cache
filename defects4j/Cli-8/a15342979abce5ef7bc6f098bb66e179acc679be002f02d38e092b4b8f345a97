{
    "generation": "    /**\n     * <p>Render the specified text and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        // First line is not padded\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n\n        // Append the first line and a new line\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // All following lines must be padded with nextLineTabStop space characters\n        final String padding = createPadding(nextLineTabStop);\n\n        // 'remainingText' holds the portion of the original text yet to be wrapped\n        String remainingText = text.substring(pos);\n\n        while (true)\n        {\n            // Calculate the effective width for the content of the current line,\n            // accounting for the padding that will be prepended.\n            int effectiveWidth = width - nextLineTabStop;\n\n            // Find the wrap position in the 'remainingText' (which is unpadded content).\n            // 'startPos' for findWrapPos should be 0 because 'remainingText' is the current segment.\n            pos = findWrapPos(remainingText, effectiveWidth, 0);\n\n            if (pos == -1)\n            {\n                // No more wrapping needed for the 'remainingText'\n                // Append the padding and the remaining content\n                sb.append(padding).append(remainingText);\n                return sb;\n            }\n\n            // Append the padding, the wrapped portion of 'remainingText', and a new line\n            sb.append(padding)\n              .append(rtrim(remainingText.substring(0, pos)))\n              .append(defaultNewLine);\n\n            // Update 'remainingText' for the next iteration.\n            // Trim leading whitespace, as it's typically the space after a word break.\n            remainingText = remainingText.substring(pos).trim();\n\n            // If remainingText is empty after trimming, we are done\n            if (remainingText.isEmpty())\n            {\n                return sb;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}