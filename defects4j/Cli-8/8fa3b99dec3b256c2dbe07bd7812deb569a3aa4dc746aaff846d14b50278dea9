{
    "generation": "    /**\n     * <p>Render the specified text and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, nextLineTabStop);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n\n    /**\n     * <p>Finds the next text wrap position after `startPos` for the specified\n     * text and width.</p>\n     *\n     * @param text The text to be searched for the wrap position.\n     * @param width The maximum number of characters per line.\n     * @param startPos The position in the text to start searching for the\n     * wrap position.\n     *\n     * @return The position in the text where the wrap should occur, or -1 if\n     * no wrap position is found.\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos = -1;\n\n        // the line ends before the max wrap width (width)\n        if (text.length() <= width)\n        {\n            return -1;\n        }\n\n        // try to find a natural line break\n        // Search backwards from the end of the line (index width-1 or text.length()-1) down to startPos\n        int searchLimit = Math.min(text.length() - 1, width - 1);\n        for (int i = searchLimit; i >= startPos; --i)\n        {\n            if (Character.isWhitespace(text.charAt(i)))\n            {\n                pos = i;\n                break;\n            }\n        }\n\n        // if no natural line break was found, then cut at the wrap width\n        // or if the break is at 'startPos' (meaning the content starts with whitespace and no real break was found)\n        if (pos == -1 || pos == startPos)\n        {\n            // Force break at 'width' (total line length).\n            // Ensure this position does not exceed actual text length.\n            pos = Math.min(text.length(), width);\n        }\n        else\n        {\n            // if the break is at a space, this space is not displayed.\n            // Move 'pos' to the character just before the whitespace block.\n            while (pos > startPos && Character.isWhitespace(text.charAt(pos - 1)))\n            {\n                --pos;\n            }\n        }\n\n        return pos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}