{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb,\n                                         int width,\n                                         int nextLineTabStop,\n                                         String text)\n{\n    if (text == null || text.length() == 0) {\n        return sb;\n    }\n    final String padding = createPadding(nextLineTabStop);\n    final int newLineLen = defaultNewLine.length();\n    int start = 0;\n    boolean firstOriginal = true;\n\n    // Manually split on existing new lines so we preserve them\n    while (start < text.length()) {\n        int idx = text.indexOf(defaultNewLine, start);\n        String segment;\n        if (idx >= 0) {\n            segment = text.substring(start, idx);\n        } else {\n            segment = text.substring(start);\n        }\n\n        // Wrap this segment\n        boolean firstSegment = true;\n        String line = segment;\n        while (true) {\n            // compute available width and padding\n            int avail = (firstOriginal && firstSegment)\n                        ? width\n                        : (width - nextLineTabStop);\n            String pad = (firstOriginal && firstSegment)\n                         ? \"\"\n                         : padding;\n            // find wrap position in the current line\n            int pos = findWrapPos(line, avail, 0);\n            if (pos == -1) {\n                // no wrap -> output remainder\n                sb.append(pad).append(rtrim(line));\n                break;\n            }\n            // wrap here\n            sb.append(pad)\n              .append(rtrim(line.substring(0, pos)))\n              .append(defaultNewLine);\n            line = line.substring(pos).trim();\n            firstSegment = false;\n        }\n\n        // if there was an original newline, re-append it and continue\n        if (idx >= 0) {\n            sb.append(defaultNewLine);\n            start = idx + newLineLen;\n            firstOriginal = false;\n        } else {\n            break;\n        }\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}