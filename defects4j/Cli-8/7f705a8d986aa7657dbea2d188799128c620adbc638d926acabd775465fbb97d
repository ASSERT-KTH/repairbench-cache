{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    // first, try to wrap at or before width\n    int pos = findWrapPos(text, width, 0);\n\n    // no wrap needed: just trim trailing whitespace and return\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n\n    // wrap here\n    sb.append(rtrim(text.substring(0, pos)))\n      .append(defaultNewLine);\n\n    // prepare padding for subsequent lines\n    final String padding = createPadding(nextLineTabStop);\n\n    // process the remainder in a loop\n    while (true)\n    {\n        // trim the whitespace before the wrap position, add padding\n        text = padding + text.substring(pos).trim();\n\n        // attempt another wrap, always from column zero\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            // no more wraps, append remainder\n            sb.append(text);\n            return sb;\n        }\n\n        // wrap and continue\n        sb.append(rtrim(text.substring(0, pos)))\n          .append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}