{
    "generation": "    /**\n     * <p>Render the specified text and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        // Find the first potential wrap position, searching from index 0.\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            // No wrap needed, append the entire text (right-trimmed)\n            sb.append(rtrim(text));\n            return sb;\n        }\n\n        // Append the first line (substring up to the wrap position, right-trimmed)\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // Prepare the padding string for subsequent lines\n        final String padding = createPadding(nextLineTabStop);\n\n        // Loop through the remaining text\n        while (true)\n        {\n            // Get the remaining text from the previous wrap position,\n            // trim leading/trailing whitespace, and prepend the padding.\n            // This forms the text for the next line.\n            text = padding + text.substring(pos).trim();\n\n            // Find the wrap position within the current potentially padded line.\n            // The search for the wrap position should start from the beginning (index 0)\n            // of this new 'text' string.\n            pos = findWrapPos(text, width, 0); // FIX: Changed startPos from nextLineTabStop to 0\n\n            if (pos == -1)\n            {\n                // The rest of the text fits on the current line.\n                // Append it (right-trimmed) and we are done.\n                sb.append(rtrim(text));\n                return sb;\n            }\n\n            // Append the wrapped line (substring up to the new wrap position, right-trimmed)\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n            // Continue the loop with the text remaining after the current wrap position 'pos'.\n            // 'text' will be reconstructed in the next iteration based on this new 'pos'.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}