{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n        int nextLineTabStop, String text) {\n    // If the text contains an explicit newline, split and process each part separately.\n    if (text.indexOf(defaultNewLine) != -1) {\n        String[] lines = text.split(java.util.regex.Pattern.quote(defaultNewLine), -1);\n        for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                sb.append(defaultNewLine);\n            }\n            String line = lines[i];\n            // For lines that come after a newline, if padding is desired, prepend it.\n            if (i > 0 && nextLineTabStop > 0 && line.length() > 0) {\n                line = createPadding(nextLineTabStop) + line;\n                // Process the padded line but let any further wrapping use the same pad.\n                renderWrappedText(sb, width, nextLineTabStop, line);\n            } else {\n                // For the first line (or when no padding is required) don't add extra indent.\n                renderWrappedText(sb, width, 0, line);\n            }\n        }\n        return sb;\n    }\n\n    // Now process a single paragraph (one without any newline characters)\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    // Subsequent lines should be indented by nextLineTabStop spaces.\n    String indent = createPadding(nextLineTabStop);\n    // Remove the already-printed part, trimming leading/trailing whitespace.\n    text = text.substring(pos).trim();\n    while (text.length() > 0) {\n        // For wrapped lines, the available width is reduced by the indent amount.\n        pos = findWrapPos(text, width - nextLineTabStop, 0);\n        if (pos == -1) {\n            sb.append(indent).append(text);\n            break;\n        }\n        sb.append(indent).append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos).trim();\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}