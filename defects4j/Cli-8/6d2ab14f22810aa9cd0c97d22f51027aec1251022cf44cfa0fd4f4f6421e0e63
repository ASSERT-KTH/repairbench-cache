{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    String[] lines = text.split(defaultNewLine);\n    for (int i = 0; i < lines.length; ++i) {\n        if (i > 0) {\n            sb.append(defaultNewLine);\n        }\n\n        String line = lines[i];\n\n        int offset = 0;\n        // first line: no padding\n        boolean firstLine = true;\n        while (line.length() > 0) {\n            int pos = findWrapPos(line, width, firstLine ? 0 : nextLineTabStop);\n\n            if (pos == -1) {\n                if (!firstLine && nextLineTabStop > 0) {\n                    sb.append(createPadding(nextLineTabStop));\n                }\n                sb.append(rtrim(line));\n                break;\n            }\n\n            if (!firstLine && nextLineTabStop > 0) {\n                sb.append(createPadding(nextLineTabStop));\n            }\n            sb.append(rtrim(line.substring(0, pos)))\n              .append(defaultNewLine);\n\n            line = line.substring(pos).trim();\n            firstLine = false;\n        }\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}