{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n{\n    int pos;\n    int newLinePos = text.indexOf(defaultNewLine);\n    if (newLinePos != -1 && newLineTabStop == 0) \n    {\n        pos = newLinePos;\n    }\n    else \n    {\n        pos = findWrapPos(text, width, 0);\n    }\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        if (newLinePos != -1 && pos == newLinePos) \n        {\n            text = text.substring(newLinePos + defaultNewLine.length());\n            newLinePos = text.indexOf(defaultNewLine);\n            pos = newLinePos;\n        }\n        else \n        {\n            text = text.substring(pos);\n            pos = findWrapPos(text, width - nextLineTabStop, nextLineTabStop);\n        }\n\n        if (pos == -1)\n        {\n            if (nextLineTabStop > 0 && text.trim().length() > 0)\n            {\n                sb.append(padding);\n            }\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n\n        if (newLinePos != -1 && pos == newLinePos) \n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n        else \n        {\n            sb.append(rtrim(padding + text.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}