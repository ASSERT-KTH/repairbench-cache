{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    if (text == null) {\n        return sb;\n    }\n    int start = 0;\n    while (true)\n    {\n        int newline = text.indexOf('\\n', start);\n        String line;\n        if (newline != -1)\n        {\n            line = text.substring(start, newline);\n        }\n        else\n        {\n            line = text.substring(start);\n        }\n\n        int pos = findWrapPos(line, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(line));\n        }\n        else\n        {\n            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n\n            // All following lines must be padded with nextLineTabStop spaces\n            final String padding = createPadding(nextLineTabStop);\n\n            line = padding + line.substring(pos).trim();\n\n            while (true)\n            {\n                pos = findWrapPos(line, width, nextLineTabStop);\n\n                if (pos == -1)\n                {\n                    sb.append(line);\n                    break;\n                }\n\n                sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n                line = padding + line.substring(pos).trim();\n            }\n        }\n\n        if (newline != -1)\n        {\n            sb.append(defaultNewLine);\n            start = newline + 1;\n            if (start >= text.length())\n            {\n                break;\n            }\n        }\n        else\n        {\n            break;\n        }\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}