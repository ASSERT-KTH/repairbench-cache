{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    final String newLine = defaultNewLine;\n    int textLen = text.length();\n    int offset = 0;\n    boolean firstLine = true;\n\n    while (offset < textLen) {\n        // split out an explicit line if present\n        int nl = text.indexOf(newLine, offset);\n        String segment;\n        boolean hasNewLine;\n        if (nl >= 0) {\n            segment = text.substring(offset, nl);\n            hasNewLine = true;\n        } else {\n            segment = text.substring(offset);\n            hasNewLine = false;\n        }\n\n        // decide whether to indent this first wrap\u2010line of the segment\n        int initialIndent = firstLine ? 0 : nextLineTabStop;\n        // attempt to wrap the segment\n        int pos = findWrapPos(segment, width, 0);\n        if (pos == -1) {\n            // no wrap needed\n            if (initialIndent > 0) {\n                sb.append(createPadding(initialIndent));\n            }\n            sb.append(rtrim(segment));\n        } else {\n            // wrap first line\n            if (initialIndent > 0) {\n                sb.append(createPadding(initialIndent));\n            }\n            sb.append(rtrim(segment.substring(0, pos))).append(newLine);\n            // wrap any remaining text\n            String pad = createPadding(nextLineTabStop);\n            String rem = segment.substring(pos).trim();\n            while (true) {\n                int w = width - nextLineTabStop;\n                int p = findWrapPos(rem, w, 0);\n                if (p == -1) {\n                    sb.append(pad).append(rem);\n                    break;\n                }\n                sb.append(pad).append(rtrim(rem.substring(0, p))).append(newLine);\n                rem = rem.substring(p).trim();\n            }\n        }\n\n        // if we consumed an explicit newline, output it and continue\n        if (hasNewLine) {\n            sb.append(newLine);\n            firstLine = false;\n            offset = nl + newLine.length();\n        } else {\n            break;\n        }\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}