{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    // handle lines separated by newlines individually\n    String[] lines = text.split(\"\\\\r?\\\\n\");\n    for (int i = 0; i < lines.length; ++i) {\n        if (i > 0) {\n            sb.append(defaultNewLine);\n        }\n        String curText = lines[i];\n\n        int pos = findWrapPos(curText, width, 0);\n\n        if (pos == -1) {\n            sb.append(rtrim(curText));\n            continue;\n        }\n        sb.append(rtrim(curText.substring(0, pos))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space\n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            curText = padding + curText.substring(pos).trim();\n            pos = findWrapPos(curText, width, nextLineTabStop);\n\n            if (pos == -1)\n            {\n                sb.append(curText);\n                break;\n            }\n\n            sb.append(rtrim(curText.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}