{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    // Process all existing newlines first so that wrapped text remains correct\n    int lineStart = 0;\n    while (true) {\n        int newline = text.indexOf(defaultNewLine, lineStart);\n        String line;\n        boolean lastLine = (newline == -1);\n        if (lastLine) {\n            line = text.substring(lineStart);\n        } else {\n            line = text.substring(lineStart, newline);\n        }\n        \n        // Now process this line\n        boolean firstLine = (lineStart == 0);\n        int pos = findWrapPos(line, width, firstLine ? 0 : nextLineTabStop);\n\n        String prefix = (!firstLine && nextLineTabStop > 0) ? createPadding(nextLineTabStop) : \"\";\n\n        while (true) {\n            if (pos == -1) {\n                sb.append(prefix).append(rtrim(line));\n                break;\n            } else {\n                sb.append(prefix).append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n                line = line.substring(pos).trim();\n                prefix = (nextLineTabStop > 0) ? createPadding(nextLineTabStop) : \"\";\n                pos = findWrapPos(line, width, nextLineTabStop);\n            }\n        }\n\n        if (lastLine) break;\n        sb.append(defaultNewLine);\n        lineStart = newline + defaultNewLine.length();\n    }\n\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}