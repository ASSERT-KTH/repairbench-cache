{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    // If the text contains any newline characters, process each block separately.\n    if (text.indexOf(defaultNewLine) != -1) {\n        // Use a tokenizer that preserves the newline delimiters.\n        StringTokenizer tok = new StringTokenizer(text, defaultNewLine, true);\n        // 'bol' flag indicates beginning\u2010of\u2010line.\n        // For the very first line we do not indent,\n        // but for any line that immediately follows an explicit newline, we do.\n        boolean beginningOfLine = true;\n        while (tok.hasMoreTokens()) {\n            String token = tok.nextToken();\n            if (token.equals(defaultNewLine)) {\n                sb.append(defaultNewLine);\n                beginningOfLine = true;\n            } else {\n                // Determine the indent for this block:\n                // If we're at the beginning of a line and this is not the very first line, apply the extra padding.\n                int indent = (beginningOfLine && sb.length() > 0) ? nextLineTabStop : 0;\n                String line = token;\n                if (indent > 0) {\n                    // Remove any existing leading spaces and add the proper padding.\n                    line = createPadding(indent) + line.trim();\n                }\n                // Now word-wrap this block just like a normal paragraph.\n                while (true) {\n                    int pos = findWrapPos(line, width, indent);\n                    if (pos == -1) {\n                        sb.append(rtrim(line));\n                        break;\n                    }\n                    sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n                    // For subsequent wrapped lines, always use nextLineTabStop.\n                    line = createPadding(nextLineTabStop) + line.substring(pos).trim();\n                    indent = nextLineTabStop;\n                }\n                beginningOfLine = false;\n            }\n        }\n        return sb;\n    }\n\n    // Otherwise, process the text as a single paragraph.\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1) {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}