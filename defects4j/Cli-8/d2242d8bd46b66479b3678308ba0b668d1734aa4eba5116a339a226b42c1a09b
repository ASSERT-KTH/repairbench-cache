{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    int pos = 0;\n    while (text != null && text.length() > 0)\n    {\n        int newLinePos = text.indexOf(defaultNewLine);\n        String line;\n        if (newLinePos != -1 && newLinePos <= width)\n        {\n            line = text.substring(0, newLinePos);\n            text = text.substring(newLinePos + defaultNewLine.length());\n        }\n        else\n        {\n            int wrapPos = findWrapPos(text, width, pos);\n\n            if (wrapPos == -1)\n            {\n                line = text;\n                text = \"\";\n            }\n            else\n            {\n                line = text.substring(0, wrapPos);\n                text = text.substring(wrapPos).trim();\n            }\n        }\n\n        sb.append(rtrim(line));\n\n        if (text.length() > 0)\n        {\n            sb.append(defaultNewLine);\n            // add padding to subsequent lines\n            sb.append(createPadding(nextLineTabStop));\n        }\n    }\n\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}