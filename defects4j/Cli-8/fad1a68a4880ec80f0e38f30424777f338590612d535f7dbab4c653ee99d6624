{
    "generation": "    /**\n     * <p>Render the specified text and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        // Handle the first line, which does not have nextLineTabStop padding\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        // All following lines must be padded with nextLineTabStop space characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            // Get the remaining text, trimming leading/trailing whitespace (e.g., the space used for wrapping)\n            String remainingText = text.substring(pos).trim();\n\n            // If no text remains, we are done\n            if (remainingText.isEmpty())\n            {\n                return sb;\n            }\n\n            // Construct the current line string with padding\n            String currentLineString = padding + remainingText;\n\n            // Calculate the effective width for the content part of the line\n            // This is the total line width minus the padding for the next line's tab stop\n            int contentWidth = width - nextLineTabStop;\n\n            // Find the wrap position within the 'remainingText' (content part),\n            // considering the effective content width. The search starts from 0 of remainingText.\n            int wrapPosInContent = findWrapPos(remainingText, contentWidth, 0);\n\n            if (wrapPosInContent == -1)\n            {\n                // The remaining content fits on this line\n                sb.append(currentLineString);\n                return sb;\n            }\n\n            // Append the portion of the current line up to the wrap point\n            // The actual position in currentLineString is padding length + wrapPosInContent\n            sb.append(rtrim(currentLineString.substring(0, nextLineTabStop + wrapPosInContent))).append(defaultNewLine);\n\n            // Update 'text' for the next iteration to be the unpadded remaining part\n            // (from the original remainingText, starting after the wrap point)\n            text = remainingText.substring(wrapPosInContent);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}