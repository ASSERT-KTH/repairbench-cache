{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    // handle existing newlines in the input text\n    int lineStart = 0;\n    while (true)\n    {\n        int newLine = text.indexOf('\\n', lineStart);\n        String line;\n        if (newLine == -1)\n        {\n            line = text.substring(lineStart);\n        }\n        else\n        {\n            line = text.substring(lineStart, newLine);\n        }\n\n        // Process one logical line\n        int pos = findWrapPos(line, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(line));\n        }\n        else\n        {\n            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n\n            final String padding = createPadding(nextLineTabStop);\n\n            String remaining = line.substring(pos).trim();\n            while (true)\n            {\n                remaining = padding + remaining;\n                pos = findWrapPos(remaining, width, nextLineTabStop);\n\n                if (pos == -1)\n                {\n                    sb.append(remaining);\n                    break;\n                }\n                sb.append(rtrim(remaining.substring(0, pos))).append(defaultNewLine);\n                remaining = remaining.substring(pos).trim();\n            }\n        }\n\n        // If there are more lines, add a new line and continue processing\n        if (newLine == -1)\n        {\n            break;\n        }\n        else\n        {\n            sb.append(defaultNewLine);\n            lineStart = newLine + 1;\n        }\n    }\n\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}