{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n{\n    int pos;\n    int len = text.length();\n\n    // Handle the special case of a text with only one newline and nothing else.\n    if ((len == (defaultNewLine.length() + 1)) && text.equals(defaultNewLine))\n    {\n        sb.append(text);\n\n        return sb;\n    }\n\n    // iterate over the lines\n    int start = 0;\n    while (start < len)\n    {\n        int newLine = text.indexOf(defaultNewLine, start);\n        if (newLine == -1)\n        {\n            pos = findWrapPos(text, width, start);\n        }\n        else\n        {\n            pos = (newLine - start > width) ? findWrapPos(text, width, start) : newLine;\n        }\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text.substring(start)));\n\n            return sb;\n        }\n\n        // write out the line\n        if (pos != newLine)\n        {\n            sb.append(rtrim(text.substring(start, pos)));\n        }\n        else\n        {\n            sb.append(text.substring(start, pos));\n        }\n        sb.append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        // set the start to be the next line\n        start = pos + 1;\n        if (start < len && text.charAt(start) == ' ')\n        {\n            // skip the first character on the next line, it's a space\n            start += 1;\n        }\n        text = padding + text.substring(start);\n        len = text.length();\n        start = 0;\n    }\n\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}