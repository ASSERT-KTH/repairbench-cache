{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    // If the text already contains newlines, split and process each line individually.\n    if (text.indexOf(defaultNewLine) >= 0) {\n        // Split on the exact newline sequence.\n        String[] lines = text.split(java.util.regex.Pattern.quote(defaultNewLine), -1);\n        for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                sb.append(defaultNewLine);\n                // For lines after the first, prepend the specified padding.\n                if (nextLineTabStop > 0) {\n                    // Prepend the padding to the current line so that if it wraps, \n                    // the initial (and all subsequent wrapped lines) will remain indented.\n                    lines[i] = createPadding(nextLineTabStop) + lines[i];\n                }\n            }\n            // Process the individual line. Since it now does not contain newline characters,\n            // the normal wrapping logic applies.\n            renderWrappedText(sb, width, nextLineTabStop, lines[i]);\n        }\n        return sb;\n    }\n\n    // Process a single paragraph (without embedded newlines)\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // For subsequent lines, use the specified padding.\n    final String padding = createPadding(nextLineTabStop);\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1) {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}