{
    "generation": "    /**\n     * <p>Render the specified text and return the rendered Options\n     * in a StringBuffer.</p>\n     *\n     * @param sb The StringBuffer to place the rendered text into.\n     * @param width The number of characters to display per line\n     * @param nextLineTabStop The position on the next line for the first tab.\n     * @param text The text to be rendered.\n     *\n     * @return the StringBuffer with the rendered Options contents.\n     */\n    protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n\n            return sb;\n        }\n        // Bugfix: Include the character at 'pos' in the first line before trimming.\n        // If 'pos' is a delimiter (space, newline), rtrim will remove it.\n        // If 'pos' is a hard break character, it will be included.\n        sb.append(rtrim(text.substring(0, pos + 1))).append(defaultNewLine);\n\n        // all following lines must be padded with nextLineTabStop space \n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            // The trim() here is correct, as it removes the leading delimiter\n            // (space, newline) from the remaining text.\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, nextLineTabStop);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n\n                return sb;\n            }\n\n            // Bugfix: Similar to the first line, include the character at 'pos'\n            // for subsequent wrapped lines before trimming.\n            sb.append(rtrim(text.substring(0, pos + 1))).append(defaultNewLine);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}