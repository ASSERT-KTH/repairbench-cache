{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    String nl = defaultNewLine;\n    // Split on the renderer's newline, to preserve original line breaks\n    String[] lines = text.split(nl, -1);\n    String padding = createPadding(nextLineTabStop);\n\n    for (int i = 0; i < lines.length; i++) {\n        // Trim trailing spaces of the original line\n        String toWrap = rtrim(lines[i]);\n        boolean firstSegment = true;\n\n        // Wrap this one line (possibly into multiple)\n        while (true) {\n            // Decide the indent for this segment:\n            //   firstSegment && first original line \u2192 no indent\n            //   firstSegment && subsequent original line \u2192 padding\n            //   later segments \u2192 padding\n            String indent;\n            if (firstSegment) {\n                indent = (i == 0) ? \"\" : padding;\n            } else {\n                indent = padding;\n            }\n\n            // Measure on the full line including indent\n            String fullLine = indent + toWrap;\n            int pos = findWrapPos(fullLine, width, 0);\n\n            // If it fits, just append and break\n            if (pos == -1) {\n                sb.append(fullLine);\n                break;\n            }\n\n            // Otherwise, break at pos, append that piece & newline\n            String piece = fullLine.substring(0, pos);\n            sb.append(rtrim(piece)).append(nl);\n\n            // Compute the remainder: drop the broken\u2010off piece + indent\n            String remainder = fullLine.substring(pos);\n            if (remainder.startsWith(indent)) {\n                remainder = remainder.substring(indent.length());\n            }\n            toWrap = remainder.trim();\n            firstSegment = false;\n        }\n\n        // After each original input line (except last), re\u2010append its newline\n        if (i < lines.length - 1) {\n            sb.append(nl);\n        }\n    }\n\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}