{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    // Handle null or empty string\n    if (text == null) {\n        return sb;\n    }\n    int lineLen = 0;\n    int pos = 0;\n    String nl = defaultNewLine;\n    String padding = createPadding(nextLineTabStop);\n\n    while (text.length() > 0) {\n        // Handle embedded newlines (honour user newlines)\n        int newline = text.indexOf(nl);\n        String line;\n        if (newline != -1 && newline <= width) {\n            line = text.substring(0, newline);\n            sb.append(rtrim(line));\n            sb.append(nl);\n            text = text.substring(newline + nl.length());\n            if (text.length() > 0) {\n                sb.append(padding);\n            }\n            continue;\n        }\n\n        int wrapPos = findWrapPos(text, width, pos);\n\n        if (wrapPos == -1) {\n            sb.append(rtrim(text));\n            break;\n        } else {\n            line = text.substring(0, wrapPos);\n            sb.append(rtrim(line));\n            sb.append(nl);\n            text = text.substring(wrapPos).trim();\n\n            if (text.length() > 0) {\n                sb.append(padding);\n            }\n        }\n    }\n\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}