{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int linePos = 0;\n    while (true) {\n        // handle embedded newlines in the input text\n        int newlinePos = text.indexOf(defaultNewLine, linePos);\n        String line;\n        if (newlinePos != -1) {\n            line = text.substring(linePos, newlinePos);\n        } else {\n            line = text.substring(linePos);\n        }\n\n        boolean firstLine = (linePos == 0);\n        int curWidth = width;\n        int curTab = nextLineTabStop;\n\n        int pos = findWrapPos(line, curWidth, firstLine ? 0 : curTab);\n\n        if (pos == -1) {\n            // no more wrap required\n            if (!firstLine) {\n                sb.append(createPadding(curTab));\n            }\n            sb.append(rtrim(line));\n        } else {\n            if (!firstLine) {\n                sb.append(createPadding(curTab));\n            }\n            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n\n            // all following lines must be padded with nextLineTabStop space\n            final String padding = createPadding(curTab);\n            line = padding + line.substring(pos).trim();\n\n            // process wrapped line for further breaking if required\n            while (true) {\n                pos = findWrapPos(line, width, curTab);\n\n                if (pos == -1) {\n                    sb.append(line);\n                    break;\n                }\n\n                sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n                line = padding + line.substring(pos).trim();\n            }\n        }\n\n        // break if there are no more newlines\n        if (newlinePos == -1)\n            break;\n\n        // move to the next line after existing newline\n        sb.append(defaultNewLine);\n        linePos = newlinePos + defaultNewLine.length();\n        if (linePos >= text.length()) {\n            break;\n        }\n    }\n\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}