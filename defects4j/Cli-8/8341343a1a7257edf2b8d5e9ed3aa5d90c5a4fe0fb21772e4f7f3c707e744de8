{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    // If the text contains newline characters, process each line separately.\n    if (text.indexOf(defaultNewLine) > -1) {\n        // Split on the newline so that existing newlines are preserved.\n        String[] lines = text.split(java.util.regex.Pattern.quote(defaultNewLine), -1);\n        for (int i = 0; i < lines.length; i++) {\n            if (i > 0) {\n                // Start a new line; if a padding is requested for subsequent lines, add it.\n                sb.append(defaultNewLine);\n                if (nextLineTabStop > 0) {\n                    sb.append(createPadding(nextLineTabStop));\n                }\n            }\n            // Process this individual line (which does not contain a newline)\n            renderWrappedText(sb, width, nextLineTabStop, lines[i]);\n        }\n        return sb;\n    }\n    \n    // Otherwise, treat the text as one paragraph and wrap it.\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    \n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    \n    // Compute the padding string for subsequent lines.\n    final String padding = createPadding(nextLineTabStop);\n    // Remove the already processed portion.\n    text = text.substring(pos).trim();\n    \n    while (!text.isEmpty()) {\n        // Prepend padding to the next line if needed.\n        if (nextLineTabStop > 0) {\n            text = padding + text;\n        }\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1) {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos).trim();\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}