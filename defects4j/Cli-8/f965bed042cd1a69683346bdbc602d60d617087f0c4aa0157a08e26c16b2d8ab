{
    "generation": "/**\n * <p>Render the specified text and return the rendered Options\n * in a StringBuffer.</p>\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    // handle existing newlines in input text: process line by line\n    String[] lines = text.split(\"\\\\r?\\\\n\");\n    for (int i = 0; i < lines.length; i++) {\n        String line = lines[i];\n\n        int pos = findWrapPos(line, width, 0);\n        if (pos == -1) {\n            // no wrapping needed\n            sb.append(line);\n        } else {\n            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n\n            final String padding = createPadding(nextLineTabStop);\n\n            line = padding + line.substring(pos).trim();\n\n            while(true) {\n                pos = findWrapPos(line, width, nextLineTabStop);\n\n                if (pos == -1) {\n                    sb.append(line);\n                    break;\n                } else {\n                    sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);\n                    line = padding + line.substring(pos).trim();\n                }\n            }\n        }\n\n        if (i < lines.length - 1) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}