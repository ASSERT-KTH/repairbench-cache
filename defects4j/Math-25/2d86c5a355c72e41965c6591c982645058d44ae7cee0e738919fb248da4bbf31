{
    "generation": "private void guessAOmega() {\n    // initialize the sums for the linear model between the two integrals\n    double sx2 = 0;\n    double sy2 = 0;\n    double sxy = 0;\n    double sxz = 0;\n    double syz = 0;\n\n    double currentX = observations[0].getX();\n    double currentY = observations[0].getY();\n    double f2Integral = 0;\n    double fPrime2Integral = 0;\n    final double startX = currentX;\n    for (int i = 1; i < observations.length; ++i) {\n        // one step forward\n        final double previousX = currentX;\n        final double previousY = currentY;\n        currentX = observations[i].getX();\n        currentY = observations[i].getY();\n\n        // update the integrals of f^2 and f'^2 assuming linear f between points\n        final double dx = currentX - previousX;\n        final double dy = currentY - previousY;\n        final double f2Step =\n            dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n        final double fPrime2Step = dy * dy / dx;\n\n        final double x = currentX - startX;\n        f2Integral += f2Step;\n        fPrime2Integral += fPrime2Step;\n\n        sx2 += x * x;\n        sy2 += f2Integral * f2Integral;\n        sxy += x * f2Integral;\n        sxz += x * fPrime2Integral;\n        syz += f2Integral * fPrime2Integral;\n    }\n\n    // solve for the three cofactors\n    final double c1 = sy2 * sxz - sxy * syz;\n    final double c2 = sxy * sxz - sx2 * syz;\n    final double c3 = sx2 * sy2 - sxy * sxy;\n\n    // build the two ratios and check they are strictly positive and finite\n    final double r1 = c1 / c2;\n    final double r2 = c2 / c3;\n    if (Double.isNaN(r1) || Double.isNaN(r2) ||\n        Double.isInfinite(r1) || Double.isInfinite(r2) ||\n        r1 <= 0.0 || r2 <= 0.0) {\n        // cannot produce a sensible amplitude/frequency estimate\n        throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_GUESS_INITIAL_PARAMETERS);\n    }\n\n    // finally the amplitude and angular frequency\n    a     = FastMath.sqrt(r1);\n    omega = FastMath.sqrt(r2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}