{
    "generation": "        /**\n         * Estimate a first guess of the amplitude and angular frequency.\n         * This method assumes that the {@link #sortObservations()} method\n         * has been called previously.\n         *\n         * @throws ZeroException if the abscissa range is zero.\n         * @throws MathIllegalStateException when the guessing procedure cannot\n         * produce sensible results.\n         */\n        private void guessAOmega() {\n            // Check preconditions.\n            if (observations.length < 2) {\n                 throw new MathIllegalStateException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_FOR_GUESSING,\n                                                    observations.length, 2);\n            }\n\n            // initialize the sums for the linear model between the two integrals\n            double sx2 = 0;\n            double sy2 = 0;\n            double sxy = 0;\n            double sxz = 0;\n            double syz = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            double f2Integral = 0;\n            double fPrime2Integral = 0;\n            final double startX = currentX;\n\n            // Check total range\n            final double endX = observations[observations.length - 1].getX();\n            if (FastMath.abs(endX - startX) < FastMath.ulp(startX) + FastMath.ulp(endX)) { // Use ULP for tolerance\n                 throw new ZeroException(LocalizedFormats.ZERO_RANGE_INTERPOLATION_ORDER);\n            }\n\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n\n                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>\n                // considering a linear model for f (and therefore constant f')\n                final double dx = currentX - previousX;\n                // Handle step size of zero.\n                if (FastMath.abs(dx) < FastMath.ulp(previousX) + FastMath.ulp(currentX)) {\n                    // Skip points with the same abscissa.\n                    continue;\n                }\n                final double dy = currentY - previousY;\n                final double f2StepIntegral =\n                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n                final double fPrime2StepIntegral = dy * dy / dx;\n\n                final double x = currentX - startX; // Use relative x for potentially better numerical stability\n                f2Integral += f2StepIntegral;\n                fPrime2Integral += fPrime2StepIntegral;\n\n                sx2 += x * x;\n                sy2 += f2Integral * f2Integral;\n                sxy += x * f2Integral;\n                sxz += x * fPrime2Integral;\n                syz += f2Integral * fPrime2Integral;\n            }\n\n            // compute the amplitude and pulsation coefficients\n            double c1 = sy2 * sxz - sxy * syz;\n            double c2 = sxy * sxz - sx2 * syz;\n            double c3 = sx2 * sy2 - sxy * sxy;\n\n            // Check for ill-conditioned cases (MATH-844 related)\n            // Includes checks for division by zero (c2 or c3 is zero)\n            // and square root of negative numbers (c1/c2 < 0 or c2/c3 < 0)\n            final double FPM_TOL = 1e-14; // Tolerance for checking zero or negative values\n            if (FastMath.abs(c2) < FPM_TOL || FastMath.abs(c3) < FPM_TOL || (c1 / c2) < 0 || (c2 / c3) < 0) {\n                // The guessing procedure cannot produce sensible results.\n                throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_PARAMETERS);\n            }\n\n            // Estimate amplitude and frequency\n            // No fallback mechanism anymore, throw exception if formulas are not applicable\n            a = FastMath.sqrt(c1 / c2);\n            omega = FastMath.sqrt(c2 / c3);\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}