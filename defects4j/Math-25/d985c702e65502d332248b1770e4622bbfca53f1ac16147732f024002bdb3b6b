{
    "generation": "        /**\n         * Estimate a first guess of the amplitude and angular frequency.\n         * This method assumes that the {@link #sortObservations()} method\n         * has been called previously.\n         *\n         * @throws ZeroException if the abscissa range is zero.\n         * @throws MathIllegalStateException when the guessing procedure cannot\n         * produce sensible results.\n         */\n        private void guessAOmega() {\n            // initialize the sums for the linear model between the two integrals\n            double sx2 = 0;\n            double sy2 = 0;\n            double sxy = 0;\n            double sxz = 0;\n            double syz = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            double f2Integral = 0;\n            double fPrime2Integral = 0;\n            final double startX = currentX;\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n\n                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>\n                // considering a linear model for f (and therefore constant f')\n                final double dx = currentX - previousX;\n                final double dy = currentY - previousY;\n                final double f2StepIntegral =\n                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n                final double fPrime2StepIntegral = dy * dy / dx;\n\n                final double x = currentX - startX;\n                f2Integral += f2StepIntegral;\n                fPrime2Integral += fPrime2StepIntegral;\n\n                sx2 += x * x;\n                sy2 += f2Integral * f2Integral;\n                sxy += x * f2Integral;\n                sxz += x * fPrime2Integral;\n                syz += f2Integral * fPrime2Integral;\n            }\n\n            // compute the amplitude and pulsation coefficients\n            double c1 = sy2 * sxz - sxy * syz;\n            double c2 = sxy * sxz - sx2 * syz;\n            double c3 = sx2 * sy2 - sxy * sxy;\n\n            // Additional check: if c2 or c3 are zero, the result is ill-conditioned.\n            if (c2 == 0 || c3 == 0 || (c1 / c2 < 0) || (c2 / c3 < 0)) {\n                final int last = observations.length - 1;\n                // Range of the observations, assuming that the\n                // observations are sorted.\n                final double xRange = observations[last].getX() - observations[0].getX();\n                if (xRange == 0) {\n                    throw new ZeroException();\n                }\n                omega = 2 * Math.PI / xRange;\n\n                double yMin = Double.POSITIVE_INFINITY;\n                double yMax = Double.NEGATIVE_INFINITY;\n                for (int i = 1; i < observations.length; ++i) {\n                    final double y = observations[i].getY();\n                    if (y < yMin) {\n                        yMin = y;\n                    }\n                    if (y > yMax) {\n                        yMax = y;\n                    }\n                }\n                a = 0.5 * (yMax - yMin);\n\n                // Still, if this fallback estimation does not make sense, throw.\n                // If the function is not harmonic, reject (cf. MATH-844).\n                if (!Double.isFinite(a) || !Double.isFinite(omega) || a == 0 || omega == 0) {\n                    throw new MathIllegalStateException();\n                }\n                // Additional heuristic: if yMax == yMin, amplitude is zero, not sensible\n                if (yMax == yMin) {\n                    throw new MathIllegalStateException();\n                }\n            } else {\n                // In some ill-conditioned cases (cf. MATH-844), the guesser\n                // procedure cannot produce sensible results.\n\n                double amp = c1 / c2;\n                double om = c2 / c3;\n                if (amp <= 0 || om <= 0 || !Double.isFinite(amp) || !Double.isFinite(om)) {\n                    throw new MathIllegalStateException();\n                }\n\n                a = FastMath.sqrt(amp);\n                omega = FastMath.sqrt(om);\n\n                // Defensive: reject zero or non-finite results\n                if (!Double.isFinite(a) || !Double.isFinite(omega) || a == 0 || omega == 0) {\n                    throw new MathIllegalStateException();\n                }\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}