{
    "generation": "        /**\n         * Estimate a first guess of the amplitude and angular frequency.\n         * This method assumes that the {@link #sortObservations()} method\n         * has been called previously.\n         *\n         * @throws ZeroException if the abscissa range is zero.\n         * @throws MathIllegalStateException when the guessing procedure cannot\n         * produce sensible results.\n         */\n        private void guessAOmega() {\n            // initialize the sums for the linear model between the two integrals\n            double sx2 = 0;\n            double sy2 = 0;\n            double sxy = 0;\n            double sxz = 0;\n            double syz = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            double f2Integral = 0;\n            double fPrime2Integral = 0;\n            final double startX = currentX;\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n\n                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>\n                // considering a linear model for f (and therefore constant f')\n                final double dx = currentX - previousX;\n                final double dy = currentY - previousY;\n\n                final double f2StepIntegral =\n                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n\n                // Handle dx == 0 to prevent division by zero or NaN/Infinity propagation.\n                // If dx is zero, f' is undefined or infinite, so it cannot be a sensible\n                // part of a harmonic function fit. Propagate NaN.\n                final double fPrime2StepIntegral;\n                if (dx == 0) {\n                    fPrime2StepIntegral = Double.NaN;\n                } else {\n                    fPrime2StepIntegral = dy * dy / dx;\n                }\n\n                final double x = currentX - startX;\n                f2Integral += f2StepIntegral;\n                fPrime2Integral += fPrime2StepIntegral;\n\n                sx2 += x * x;\n                sy2 += f2Integral * f2Integral;\n                sxy += x * f2Integral;\n                sxz += x * fPrime2Integral;\n                syz += f2Integral * fPrime2Integral;\n            }\n\n            // compute the amplitude and pulsation coefficients\n            double c1 = sy2 * sxz - sxy * syz;\n            double c2 = sxy * sxz - sx2 * syz;\n            double c3 = sx2 * sy2 - sxy * sxy;\n\n            // Flag to determine if the direct guess produced non-sensible results,\n            // which would trigger the fallback estimation or an exception.\n            boolean notSensibleGuess = false;\n\n            // Check conditions that prevent a sensible direct calculation of a and omega:\n            // 1. Denominators c2 or c3 are zero, leading to NaN/Infinity in sqrt arguments.\n            if (c2 == 0 || c3 == 0) {\n                notSensibleGuess = true;\n            } else {\n                // Calculate potential arguments for square roots.\n                final double ratio1 = c1 / c2;\n                final double ratio2 = c2 / c3;\n\n                // 2. Arguments to sqrt are negative (would result in NaN).\n                if (ratio1 < 0 || ratio2 < 0) {\n                    notSensibleGuess = true;\n                } else {\n                    // Direct calculation of a and omega.\n                    a = FastMath.sqrt(ratio1);\n                    omega = FastMath.sqrt(ratio2);\n\n                    // 3. Calculated a or omega are not finite or not positive.\n                    // This catches NaN/Infinity results (e.g., from earlier NaN propagation\n                    // if dx was 0) or zero/negative values for a or omega.\n                    if (!(Double.isFinite(a) && a > 0 && Double.isFinite(omega) && omega > 0)) {\n                        notSensibleGuess = true;\n                    }\n                }\n            }\n\n            // If the direct guess was not sensible, or if the calculation itself led to\n            // non-sensible values, try the fallback estimation.\n            if (notSensibleGuess) {\n                final int last = observations.length - 1;\n                final double xRange = observations[last].getX() - observations[0].getX();\n                if (xRange == 0) {\n                    throw new ZeroException();\n                }\n                omega = 2 * Math.PI / xRange;\n\n                double yMin = Double.POSITIVE_INFINITY;\n                double yMax = Double.NEGATIVE_INFINITY;\n                for (int i = 1; i < observations.length; ++i) {\n                    final double y = observations[i].getY();\n                    if (y < yMin) {\n                        yMin = y;\n                    }\n                    if (y > yMax) {\n                        yMax = y;\n                    }\n                }\n                a = 0.5 * (yMax - yMin);\n\n                // After fallback, perform a final check for sensibleness.\n                // If even the fallback produces non-sensible results (e.g., zero amplitude, NaN/Infinity),\n                // then the guessing procedure cannot produce sensible results.\n                if (!(Double.isFinite(a) && a > 0 && Double.isFinite(omega) && omega > 0)) {\n                    throw new MathIllegalStateException();\n                }\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}