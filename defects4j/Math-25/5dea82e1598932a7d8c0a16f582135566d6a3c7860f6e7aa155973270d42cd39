{
    "generation": "        /**\n         * Estimate a first guess of the amplitude and angular frequency.\n         * This method assumes that the {@link #sortObservations()} method\n         * has been called previously.\n         *\n         * @throws ZeroException if the abscissa range is zero.\n         * @throws MathIllegalStateException when the guessing procedure cannot\n         * produce sensible results.\n         */\n        private void guessAOmega() {\n            // initialize the sums for the linear model between the two integrals\n            double sx2 = 0;\n            double sy2 = 0;\n            double sxy = 0;\n            double sxz = 0;\n            double syz = 0;\n\n            double currentX = observations[0].getX();\n            double currentY = observations[0].getY();\n            double f2Integral = 0;\n            double fPrime2Integral = 0;\n            final double startX = currentX;\n\n            // Check for zero abscissa range early. If xRange is zero, all dx will be zero,\n            // leading to division by zero and NaN/Infinity in subsequent calculations,\n            // which should result in a more specific ZeroException.\n            final int last = observations.length - 1;\n            final double xRange = observations[last].getX() - observations[0].getX();\n            if (xRange == 0) {\n                throw new ZeroException();\n            }\n\n            for (int i = 1; i < observations.length; ++i) {\n                // one step forward\n                final double previousX = currentX;\n                final double previousY = currentY;\n                currentX = observations[i].getX();\n                currentY = observations[i].getY();\n\n                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>\n                // considering a linear model for f (and therefore constant f')\n                final double dx = currentX - previousX;\n                final double dy = currentY - previousY;\n                final double f2StepIntegral =\n                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;\n                // If dx is zero (but xRange is not, meaning it's an isolated vertical line segment),\n                // fPrime2StepIntegral can become Infinity or NaN, which will be caught later.\n                final double fPrime2StepIntegral = dy * dy / dx;\n\n                final double x = currentX - startX;\n                f2Integral += f2StepIntegral;\n                fPrime2Integral += fPrime2StepIntegral;\n\n                sx2 += x * x;\n                sy2 += f2Integral * f2Integral;\n                sxy += x * f2Integral;\n                sxz += x * fPrime2Integral;\n                syz += f2Integral * fPrime2Integral;\n            }\n\n            // compute the amplitude and pulsation coefficients\n            double c1 = sy2 * sxz - sxy * syz;\n            double c2 = sxy * sxz - sx2 * syz;\n            double c3 = sx2 * sy2 - sxy * sxy;\n\n            // In some ill-conditioned cases (cf. MATH-844), the guesser\n            // procedure cannot produce sensible results from the linear model.\n            // This occurs if the derived squared amplitude (c1/c2) or squared\n            // angular frequency (c2/c3) are negative (implying imaginary values),\n            // or if numerical issues like division by zero result in NaN/Infinity.\n            final double ratio1 = c1 / c2; // Represents a^2\n            final double ratio2 = c2 / c3; // Represents omega^2\n\n            if (ratio1 < 0 || ratio2 < 0 || Double.isNaN(ratio1) || Double.isNaN(ratio2) || Double.isInfinite(ratio1) || Double.isInfinite(ratio2)) {\n                // If any of these conditions are met, the guessing procedure is not sensible.\n                throw new MathIllegalStateException();\n            } else {\n                // If the ratios are non-negative and finite, we can compute the amplitude and frequency.\n                a = FastMath.sqrt(ratio1);\n                omega = FastMath.sqrt(ratio2);\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}