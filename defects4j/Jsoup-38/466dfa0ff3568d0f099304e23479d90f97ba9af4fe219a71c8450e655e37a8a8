{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                // ... unchanged logic for <html> ...\n            } else if (StringUtil.in(name, Constants.InBodyStartToHead)) {\n                // ... unchanged logic ...\n            }\n            // ... many other branches ...\n            else if (name.equals(\"image\")) {\n                // change <image> to <img>, unless we're in an SVG context\n                boolean inSvg = false;\n                for (Element el : tb.getStack()) {\n                    if (el.nodeName().equals(\"svg\")) {\n                        inSvg = true;\n                        break;\n                    }\n                }\n                if (inSvg) {\n                    // in an <svg>, leave it as <image>\n                    tb.insert(startTag);\n                } else {\n                    // otherwise, convert to <img> (and let the <img> handling insert it as an empty element)\n                    return tb.process(startTag.name(\"img\"));\n                }\n            }\n            // ... the rest of the <startTag> branches unchanged ...\n            break;\n\n        case EndTag:\n            // ... unchanged logic for end tags ...\n            break;\n\n        case EOF:\n            // ... unchanged EOF logic ...\n            break;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}