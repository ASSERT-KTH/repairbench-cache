{
    "generation": "@Override\nboolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        // \u2026 all other cases unchanged \u2026\n\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n\n            // \u2026 other StartTag branches \u2026\n\n            else if (name.equals(\"hr\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insertEmpty(startTag);\n                tb.framesetOk(false);\n            }\n            else if (name.equals(\"image\")) {\n                // convert <image> to <img>, except when inside an <svg>\n                boolean inSvg = false;\n                for (Element el : tb.getStack()) {\n                    if (el.nodeName().equals(\"svg\")) {\n                        inSvg = true;\n                        break;\n                    }\n                }\n                if (!inSvg) {\n                    // reprocess this token as <img>\n                    return tb.process(startTag.name(\"img\"));\n                } else {\n                    // inside svg: leave <image> alone\n                    tb.insert(startTag);\n                }\n            }\n            else if (name.equals(\"isindex\")) {\n                // \u2026 rest of isindex handling \u2026\n            }\n            // \u2026 the rest of the StartTag branches \u2026\n\n            break;\n\n        // \u2026 all other cases unchanged \u2026\n\n        case EOF:\n            // stop parsing\n            break;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}