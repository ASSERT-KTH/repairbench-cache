{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Skip any leading spaces.\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // If there are no digits, or the first non-space character is NUL,\n    // then treat the field as being absent and return 0.\n    if (start >= end || buffer[start] == 0) {\n        return 0L;\n    }\n\n    // The spec requires that the numeric field be terminated by a space or NUL.\n    // Remove the last terminator.\n    if (buffer[end - 1] == 0 || buffer[end - 1] == ' ') {\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n    }\n    // Remove an additional trailing space or NUL if present.\n    if (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    // Process the digit characters.\n    for (; start < end; start++) {\n        byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}