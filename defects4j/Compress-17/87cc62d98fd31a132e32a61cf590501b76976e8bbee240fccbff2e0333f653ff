{
    "generation": "/**\n * Parse an octal string from a buffer.\n *\n * <p>Leading spaces are ignored.\n * The buffer may or may not contain a trailing space or NUL.\n * All trailing spaces or NULs are simply skipped.</p>\n *\n * <p>The input buffer is allowed to contain all NULs or spaces,\n * in which case the method returns 0L.</p>\n *\n * <p>To work-around some tar implementations that insert a\n * leading NUL this method returns 0 if it detects a leading NUL\n * at the start of the field.</p>\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if an invalid octal digit is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n    int start = offset;\n    int end = offset + length;\n\n    // Work-around: if the very first byte is NUL, treat as zero\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // Skip all trailing NULs or spaces\n    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    // If nothing left to parse, it's zero\n    if (start >= end) {\n        return 0L;\n    }\n\n    long result = 0L;\n    for (int i = start; i < end; i++) {\n        byte b = buffer[i];\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, b));\n        }\n        result = (result << 3) + (b - '0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}