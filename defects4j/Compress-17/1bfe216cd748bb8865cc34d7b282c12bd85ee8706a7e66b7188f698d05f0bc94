{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain additional trailing spaces or NULs.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Must have trailing NUL or space\n        byte trailer;\n        trailer = buffer[end-1];\n        if (trailer == 0 || trailer == ' '){\n            end--;\n        } else {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end-1, trailer));\n        }\n\n        // May have additional NULs or spaces\n        // In particular, GNU tar is known to add additional NULs\n        // Be backward compatible - allow spaces as well, although it is doubtful\n        // that it is needed. Fixes TarArchiveInputStreamTest.testCompress197\n        // Reference: COMPRESS-197\n        while (end > start && ( (trailer = buffer[end - 1]) == 0 || trailer == ' ') ){\n            end--;\n        }\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist based on its usage in the original code\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int current, byte currentByte) {\n        // Implementation is not provided, but needed for the code to compile.\n        // Using a placeholder implementation for demonstration.\n        String B = Integer.toHexString(currentByte); // CHECKSTYLE IGNORE MagicNumber\n        try {\n            return \"Invalid byte \" + B + \" at offset \" + (current - offset)\n                    + \" in '\" + new String(buffer, offset, length, \"US-ASCII\").replaceAll(\"\\0\", \"{NUL}\") // CHECKSTYLE IGNORE MagicNumber\n                    + \"' len=\" + length;\n        } catch (java.io.UnsupportedEncodingException e) {\n            // Should not happen with US-ASCII\n            throw new RuntimeException(e);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}