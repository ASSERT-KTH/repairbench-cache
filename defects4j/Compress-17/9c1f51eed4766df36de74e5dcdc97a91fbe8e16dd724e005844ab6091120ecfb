{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Iterate through the buffer from 'start' to 'end' to parse octal digits.\n        // The parsing stops when a non-octal digit is encountered or 'end' is reached.\n        // If a non-octal character is found, it must be a space or NUL padding.\n        // Any subsequent characters must also be spaces or NULs.\n        int currentIdx = start;\n        while (currentIdx < end) {\n            final byte currentByte = buffer[currentIdx];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                // If it's not an octal digit, it must be a trailing space or NUL.\n                if (currentByte == 0 || currentByte == ' '){\n                    // This is a valid trailing character.\n                    // All remaining bytes in the field must also be spaces or NULs.\n                    for (int i = currentIdx + 1; i < end; i++) {\n                        final byte trailingByte = buffer[i];\n                        if (trailingByte != 0 && trailingByte != ' '){\n                            // Found an invalid character after a valid trailer.\n                            throw new IllegalArgumentException(\n                                    exceptionMessage(buffer, offset, length, i, trailingByte));\n                        }\n                    }\n                    // All remaining bytes are valid trailers, so we're done parsing the number.\n                    break; // Exit the while loop\n                } else {\n                    // Invalid character encountered that is neither an octal digit nor a space/NUL.\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, currentIdx, currentByte));\n                }\n            }\n            // It's a valid octal digit, append it to the result.\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n            currentIdx++;\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}