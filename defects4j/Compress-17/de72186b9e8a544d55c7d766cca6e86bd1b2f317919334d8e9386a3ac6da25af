{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n    int start = offset;\n    int end = offset + length;\n\n    // Special case: if the very first byte is NUL, treat this field as missing.\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip any leading spaces.\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // The specification requires that the field be terminated by at least one NUL or space.\n    if (buffer[end - 1] != 0 && buffer[end - 1] != ' ') {\n        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n    }\n\n    // Remove all trailing NULs and spaces.\n    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    // Now convert the remaining digits (which must be between '0' and '7').\n    long result = 0;\n    for (int i = start; i < end; i++) {\n        byte b = buffer[i];\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, b));\n        }\n        result = (result << 3) + (b - '0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}