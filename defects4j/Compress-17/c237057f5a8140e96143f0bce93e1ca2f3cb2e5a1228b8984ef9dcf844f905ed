{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Detect leading NUL for work-around or all-NUL buffer\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end && buffer[start] == ' '){\n            start++;\n        }\n\n        // Check for mandatory trailing NUL or space at the end of the segment.\n        // If the buffer was all spaces, start == end and this check is skipped.\n        byte trailer = buffer[end - 1];\n        if (trailer != 0 && trailer != ' ') {\n             // If the very last character is not a space or NUL, it's invalid.\n             throw new IllegalArgumentException(\n                     exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n\n        // Find the end of the actual octal digits by scanning backwards\n        // from the character before the trailer. Stop at the first non-space/non-NUL.\n        int digitEnd = end - 2; // Index of last char _before_ mandatory trailer\n        while (digitEnd >= start && (buffer[digitEnd] == ' ' || buffer[digitEnd] == 0)) {\n            digitEnd--;\n        }\n\n        // If all characters after leading spaces and before the trailer were spaces/NULs,\n        // or if the initial buffer was all spaces (start >= end handled implicitly by digitEnd < start)\n        if (digitEnd < start) {\n            return 0L;\n        }\n\n        // Parse octal digits from start up to digitEnd (inclusive)\n        for ( ;start <= digitEnd; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method needed for the exception message (assume it exists outside this scope)\n    // This is a placeholder signature. The actual implementation is part of the surrounding class.\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int index, byte value) {\n         // In a real environment, this method would be defined elsewhere in the class/utility.\n         // Providing a placeholder signature to make the main function syntactically valid.\n         // Actual implementation would format a helpful error message.\n         return \"Invalid octal digit '\" + (char)value + \"' at index \" + index + \" in buffer segment [\" + offset + \", \" + (offset+length) + \")\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}