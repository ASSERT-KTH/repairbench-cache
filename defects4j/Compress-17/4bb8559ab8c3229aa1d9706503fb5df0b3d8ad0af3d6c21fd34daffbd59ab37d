{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    boolean foundDigit = false;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // If entire field is all NULs, treat as missing (return 0)\n    boolean allNuls = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // Work-around for tar implementations that insert a leading NUL (COMPRESS-197)\n    if (buffer[start] == 0) {\n        // Only skip a single leading NUL if the rest is not completely NULs\n        start++;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Must have trailing NUL or space\n    if (start >= end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end-1, (byte)0));\n    }\n\n    byte trailer;\n    trailer = buffer[end-1];\n    if (trailer == 0 || trailer == ' '){\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end-1, trailer));\n    }\n    // May have additional NULs or spaces\n    if (end > start) {\n        trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' '){\n            end--;\n        }\n    }\n\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n        // CheckStyle:MagicNumber OFF\n        if (currentByte >= '0' && currentByte <= '7'){\n            foundDigit = true;\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        } else if (currentByte == 0 || currentByte == ' ') {\n            // ignore embedded or extra NUL/space in value for robustness\n        } else {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        // CheckStyle:MagicNumber ON\n    }\n\n    // Accept octal value of 0 if field was spaces/NULs, per tar leniency.\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}