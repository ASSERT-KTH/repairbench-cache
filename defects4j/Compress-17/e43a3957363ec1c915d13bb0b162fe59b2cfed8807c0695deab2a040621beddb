{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (length > 0 && buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Must have trailing NUL or space\n    if (end <= start) {\n        return 0L; // buffer contains only nulls or spaces\n    }\n\n    byte trailer = buffer[end-1];\n    if (trailer != 0 && trailer != ' ') {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end-1, trailer));\n    }\n    end--;\n\n    // May have additional trailing NULs or spaces\n    while (end > start && (buffer[end-1] == 0 || buffer[end-1] == ' ')) {\n        end--;\n    }\n\n    boolean seenNonZero = false;\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte == 0) {\n            // Handle embedded NULs as terminators (workaround for some tar implementations)\n            break;\n        }\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        if (currentByte != '0') {\n            seenNonZero = true;\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        // CheckStyle:MagicNumber ON\n    }\n\n    if (!seenNonZero && end == start) {\n        return 0L;\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}