{
    "generation": "/**\n * Parse an octal string from a buffer.\n *\n * <p>Leading spaces or NULs are ignored.\n * The buffer must contain a trailing space or NUL.</p>\n *\n * <p>The input buffer is allowed to contain all NULs or spaces,\n * in which case the method returns 0L\n * (this allows for missing fields).</p>\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n    // Must have a trailing NUL or space\n    final int lastIdx = offset + length - 1;\n    final byte lastByte = buffer[lastIdx];\n    if (lastByte != 0 && lastByte != ' ') {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, lastIdx, lastByte));\n    }\n    // Skip leading NULs and spaces\n    int start = offset;\n    int end = lastIdx;\n    while (start <= end && (buffer[start] == 0 || buffer[start] == ' ')) {\n        start++;\n    }\n    // If nothing left, it's zero\n    if (start > end) {\n        return 0L;\n    }\n    // Skip trailing NULs and spaces\n    while (end >= start && (buffer[end] == 0 || buffer[end] == ' ')) {\n        end--;\n    }\n    // Parse the octal digits\n    long result = 0L;\n    for (int i = start; i <= end; i++) {\n        byte b = buffer[i];\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, b));\n        }\n        result = (result << 3) + (b - '0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}