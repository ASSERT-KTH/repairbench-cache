{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces and NULs are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p> This behavior is preserved by\n     * skipping leading NULs.\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Skip leading spaces and NULs\n        while (start < end){\n            final byte currentByte = buffer[start];\n            if (currentByte == ' ' || currentByte == 0) { // Skip spaces and NULs\n                start++;\n            } else {\n                break; // Found first non-space/NUL character\n            }\n        }\n\n        // Must have trailing NUL or space for POSIX compliance.\n        // These checks ensure that the last characters are valid terminators.\n        byte trailer;\n        // Check trailing byte. If it's not terminator, throw exception.\n        // No need to check if start >= end here, because if length < 2, we already threw.\n        // If length >= 2, end-1 is a valid index.\n        // If all were skipped (start == end), buffer[end-1] was a space or NUL.\n        trailer = buffer[end-1];\n        if (trailer == 0 || trailer == ' '){\n            end--; // Decrement end to point past the last digit/character to parse\n        } else {\n            // If the very last character is not a space or NUL, it's invalid.\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end-1, trailer));\n        }\n\n        // May have additional NUL or space. This allows for example \"123 \\0\" or \"123\\0 \"\n        // Check only if there are still characters left to potentially parse (end > start)\n        // and the new last character is also a terminator.\n        if (end > start) {\n            trailer = buffer[end - 1];\n            if (trailer == 0 || trailer == ' '){\n                end--; // Decrement end again\n            }\n        }\n\n        // Now parse digits from the adjusted start up to the adjusted end\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            // Ensure characters are octal digits.\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            // Standard octal parsing: shift left by 3 (multiply by 8) and add new digit.\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist elsewhere in the class for creating exception messages.\n    // private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte currentByte) { ... }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}