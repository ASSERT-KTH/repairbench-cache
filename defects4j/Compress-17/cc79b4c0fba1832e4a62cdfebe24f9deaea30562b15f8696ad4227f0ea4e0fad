{
    "generation": "/**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long result = 0;\n        int end = offset + length;\n        int start = offset;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n\n        // Handle leading NUL or all NULs case\n        if (buffer[start] == 0) {\n            while (start < end && buffer[start] == 0) {\n                start++;\n            }\n            if (start == end) {\n                return 0L; // All NULs\n            }\n        }\n\n        // Skip leading spaces\n        while (start < end && buffer[start] == ' ') {\n            start++;\n        }\n\n        // Check for valid characters and calculate end position\n        int validEnd = start;\n        while (validEnd < end) {\n            byte currentByte = buffer[validEnd];\n            if (currentByte < '0' || currentByte > '7') {\n                break;\n            }\n            validEnd++;\n        }\n\n        // Ensure there's at least one valid digit\n        if (validEnd == start) {\n            throw new IllegalArgumentException(\"No valid octal digits found\");\n        }\n\n        // Check trailing characters\n        int actualEnd = validEnd;\n        while (actualEnd < end && (buffer[actualEnd] == 0 || buffer[actualEnd] == ' ')) {\n            actualEnd++;\n        }\n\n        // Ensure trailing space/NUL\n        if (actualEnd == end && (buffer[end - 1] != 0 && buffer[end - 1] != ' ')) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n        }\n\n        // Parse valid octal digits\n        for (int i = start; i < validEnd; i++) {\n            byte currentByte = buffer[i];\n            result = (result << 3) + (currentByte - '0');\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}