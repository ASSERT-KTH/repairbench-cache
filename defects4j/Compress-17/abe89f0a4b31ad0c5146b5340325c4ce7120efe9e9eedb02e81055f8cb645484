{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Handle GNU tar \"binary\" (base\u2010256) if the high bit of the first byte is set\n    if ((buffer[start] & 0x80) != 0) {\n        // strip the marker bit and parse big\u2010endian unsigned\n        long val = buffer[start] & 0x7F;\n        for (int i = start + 1; i < end; i++) {\n            val = (val << 8) | (buffer[i] & 0xFF);\n        }\n        return val;\n    }\n\n    // all\u2010NUL field => zero\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // Must have a trailing NUL or space\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' ') {\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, trailer));\n    }\n\n    // May have an additional trailing NUL or space\n    trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' ') {\n        end--;\n    }\n\n    // Parse the octal digits\n    for (; start < end; start++) {\n        byte b = buffer[start];\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, b));\n        }\n        result = (result << 3) + (b - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}