{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Determine the effective end of the octal string by trimming trailing NULs and spaces.\n        // The 'end' pointer will point to the character *after* the last octal digit.\n        // If the entire buffer segment is filled with digits, no trimming occurs.\n        while (end > start) {\n            final byte trailer = buffer[end - 1];\n            if (trailer == 0 || trailer == ' ') {\n                end--; // Found a trailer, decrement end and check the character before it\n            } else if (trailer < '0' || trailer > '7') {\n                // Found an invalid character that is not a trailer.\n                // This means the buffer contains invalid data at its effective end.\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, end - 1, trailer));\n            } else {\n                // Found an octal digit. This marks the end of the numeric string.\n                // Stop trimming, as this digit is part of the number.\n                break;\n            }\n        }\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            // This check for currentByte < '0' || currentByte > '7' is still necessary\n            // for characters *within* the number string, as the trailing trim loop\n            // only validates the characters it considers as potential trailers.\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}