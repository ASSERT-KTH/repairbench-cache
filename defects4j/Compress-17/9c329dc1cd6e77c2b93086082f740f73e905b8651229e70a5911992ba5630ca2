{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n    // Binary (base-256) format if high bit of first byte is set\n    if ((buffer[start] & 0x80) != 0) {\n        long val = 0;\n        for (int i = start; i < end; i++) {\n            val = (val << 8) | (buffer[i] & 0xFF);\n        }\n        return val;\n    }\n    // Leading NUL means the field is missing => return 0\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n    // Must have trailing NUL or space\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' ') {\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, end - 1, trailer));\n    }\n    // May have additional trailing NUL or space\n    if (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n    // Parse ASCII octal digits\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n        // CheckStyle:MagicNumber ON\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}