{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer is scanned until the first NUL or SPACE is found.\n     * The characters before the terminator must be '0'-'7'.</p>\n     * <p>All characters after the number and before the end of the buffer\n     * must be NUL or SPACE.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the field contains invalid characters,\n     * or is too short.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     start = offset;\n        final int end = offset + length; // Mark the logical end of the field\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle cases with leading NUL, specific TAR formats might use this\n        // Also handles all-NUL fields (common for missing fields)\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end && buffer[start] == ' ') {\n            start++;\n        }\n\n        // Find the end of the actual octal digits. Stop at the first non-octal digit.\n        int digitEnd = start;\n        while (digitEnd < end && buffer[digitEnd] >= '0' && buffer[digitEnd] <= '7') {\n            digitEnd++;\n        }\n\n        // Check that all characters from the first non-octal digit onwards\n        // until the end of the field are NUL ('\\0') or space (' ').\n        // This enforces that the field is terminated correctly after the digits.\n        for (int i = digitEnd; i < end; i++) {\n             byte currentByte = buffer[i];\n             if (currentByte != 0 && currentByte != ' ') {\n                 // Assuming exceptionMessage helper method is available in the class context\n                 throw new IllegalArgumentException(\n                     exceptionMessage(buffer, offset, length, i, currentByte));\n             }\n        }\n\n        // If start == digitEnd, it signifies that after skipping leading spaces,\n        // no octal digits were found. This includes fields like \"   \", \" \\0\", etc.\n        // Return 0 for such cases.\n        if (start == digitEnd) {\n             return 0L;\n        }\n\n        // Convert the sequence of octal digits (from start to digitEnd-1) to a long value.\n        for (int i = start; i < digitEnd; i++) {\n            final byte currentByte = buffer[i];\n            // CheckStyle:MagicNumber OFF - Already validated bytes are '0'-'7'\n            result = (result << 3) + (currentByte - '0'); // Convert ASCII octal digit to value\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}