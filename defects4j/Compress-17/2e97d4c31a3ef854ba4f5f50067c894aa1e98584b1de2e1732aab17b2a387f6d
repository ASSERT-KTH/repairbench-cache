{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long result = 0;\n        int end = offset + length;\n        int start = offset;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) { // Commons Compress 1.4 workaround for leading NUL\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end) {\n            if (buffer[start] == ' ') {\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Parse octal digits until a non-digit character (which should be a terminator) is encountered\n        int current = start;\n        while (current < end) {\n            final byte currentByte = buffer[current];\n            if (currentByte == 0 || currentByte == ' ') {\n                break; // Found a terminator (NUL or space)\n            }\n            if (currentByte < '0' || currentByte > '7') {\n                // Not a digit and not a terminator\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, current, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            current++;\n        }\n\n        // After parsing digits, 'current' points to the first byte *after* the octal number.\n        // This byte must be a NUL or space (the required trailing terminator).\n        // If 'current' reached 'end', it means the number consumed the entire buffer range\n        // without a terminator. This is an error.\n        if (current == end) {\n            // No trailing terminator found within the specified length.\n            // The last parsed byte was a digit, but it was expected to be followed by a terminator.\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, current - 1, buffer[current - 1]));\n        }\n\n        // The byte at 'current' must be the required trailing space or NUL.\n        final byte firstTerminator = buffer[current];\n        if (firstTerminator != 0 && firstTerminator != ' ') {\n            // It was not an octal digit (loop broke), but also not a NUL/space terminator. Invalid.\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, current, firstTerminator));\n        }\n\n        // All subsequent bytes (from current + 1 up to original end - 1) must also be NULs or spaces.\n        // This handles cases where tar fields are padded with multiple NULs after the value and its terminator.\n        for (int i = current + 1; i < end; i++) {\n            final byte trailingByte = buffer[i];\n            if (trailingByte != 0 && trailingByte != ' ') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, trailingByte));\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}