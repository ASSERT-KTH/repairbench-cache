{
    "generation": "/**\n * Parse an octal string from a buffer.\n *\n * <p>Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain additional trailing space or NUL.\n * <p>\n * <p>The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).</p>\n *\n * <p>To work-around some tar implementations that insert a\n * leading NUL this method returns 0 if it detects a leading NUL.\n * Additionally, if the number was written in base-256 (binary)\n * form \u2013 indicated by a negative first byte \u2013 then it is decoded accordingly.\n * </p>\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal (or binary) string.\n * @throws IllegalArgumentException if the mandatory trailing space/NUL is missing\n *                                  or if an invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Check for base-256 (binary) encoding.\n    // In tar headers, if the most-significant bit of the first byte is set,\n    // then the field is stored in binary (base-256) form.\n    if (buffer[offset] < 0) {\n        long result = 0;\n        for (int i = 0; i < length; i++) {\n            result = (result << 8) | (buffer[offset + i] & 0xff);\n        }\n        // For binary encoded numbers the stored value is the original value plus 2^(8*length-1).\n        // Subtract that bias to recover the original number.\n        return result - (1L << ((length * 8) - 1));\n    }\n\n    int end = offset + length;\n    int start = offset;\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip any leading spaces.\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // The specification requires that the last byte of the fixed field\n    // must be either NUL or space. Verify this.\n    if (buffer[end - 1] != 0 && buffer[end - 1] != ' ') {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n    }\n\n    // Remove all trailing NULs and spaces.\n    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    long result = 0;\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII octal digit\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}