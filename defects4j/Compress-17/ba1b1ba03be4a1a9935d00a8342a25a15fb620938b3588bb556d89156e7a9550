{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // To work-around leading NUL\n    if (buffer[start] == 0) {\n        boolean allNuls = true;\n        for (int i = start; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNuls = false;\n                break;\n            }\n        }\n        if (allNuls) {\n            return 0L;\n        }\n    }\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // Return 0 if buffer is all spaces or all NULs after skipping leading spaces\n    if (start == end) {\n        return 0L;\n    }\n\n    // Must have trailing NUL or space (one or two)\n    if (end <= offset) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end-1, (byte)0));\n    }\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' ') {\n        end--;\n        if (end > offset) {\n            byte prev = buffer[end - 1];\n            if (prev == 0 || prev == ' ') {\n                end--;\n            }\n        }\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, trailer));\n    }\n\n    if (start == end) {\n        // All NUL/space field after trimming\n        return 0L;\n    }\n\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}