{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Check for all spaces, or a leading NUL where the number would start.\n        // Per Javadoc: \"To work-around some tar implementations that insert a\n        // leading NUL this method returns 0 if it detects a leading NUL\".\n        // This needs to check the first non-space byte, not just buffer[offset].\n        // Also handles the \"all spaces\" case.\n        if (start == end || buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Must have trailing NUL or space.\n        byte trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--; // Adjust end to point past the last char to be processed\n        } else {\n            // If the field is not NUL-terminated or space-terminated, complain.\n            // This is required by the TAR specification.\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n\n        // May have additional NULs or spaces before the mandatory one.\n        // These are only allowed immediately preceding the mandatory terminator byte.\n        // Check the byte before the (potentially decremented) end.\n        // Ensure start < end to handle cases where length=2 and end was already decremented.\n        if (start < end) {\n            trailer = buffer[end - 1];\n            if (trailer == 0 || trailer == ' ') {\n                end--;\n            }\n        }\n\n        // Process bytes from first non-space up to the adjusted end index\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            // If a non-octal digit (including space or NUL) is found before the end,\n            // the field is invalid.\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    /**\n     * Helper method to generate the exception message\n     * @param buffer the buffer\n     * @param offset the offset within the buffer\n     * @param length the length of the buffer\n     * @param idx the index of the anomaly\n     * @param currentByte the byte at the index\n     * @return the exception message\n     */\n    private static String exceptionMessage(final byte[] buffer, final int offset,\n                                           final int length, final int idx, final byte currentByte) {\n        String nl = System.getProperty(\"line.separator\");\n        return \"Invalid byte \" + currentByte + \" at offset \" + (idx - offset) + \" in '\"\n            + TarUtils.toAsciiString(buffer, offset, length) + \"' len=\" + length + nl;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}