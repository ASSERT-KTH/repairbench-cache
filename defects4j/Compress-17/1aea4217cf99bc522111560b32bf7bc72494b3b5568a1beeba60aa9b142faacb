{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle leading NUL byte (Commons Compress 1.4 workaround)\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // The *last* character in the original range must be a NUL or space.\n        // This is a strict requirement from the Javadoc (\"The buffer must contain a trailing space or NUL\").\n        // 'end' is (offset + length), so 'end - 1' is the last index.\n        byte lastChar = buffer[end - 1];\n        if (lastChar == 0 || lastChar == ' ') {\n            // This character is a valid trailer, so reduce the effective end.\n            end--;\n        } else {\n            // The last character is NOT a NUL or space, which violates the contract.\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end-1, lastChar));\n        }\n\n        // Now, trim any additional trailing NULs or spaces.\n        // This loop continues as long as 'end' is still greater than 'start'\n        // and the character at (end - 1) is a NUL or space.\n        while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n            end--;\n        }\n\n        // At this point:\n        // 'start' points to the first character of the octal string (after leading spaces).\n        // 'end' points to the position *after* the last character of the octal string (after trimming all trailing NULs/spaces).\n        // The characters to parse are from buffer[start] to buffer[end-1].\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            // The bytes must be valid octal digits ('0' through '7').\n            // NULs or spaces that might have been part of internal padding\n            // should have been trimmed by the 'while (end > start && ...)' loop above.\n            // If they are encountered here, they are truly invalid.\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}