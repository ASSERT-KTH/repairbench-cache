{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Skip leading NULs (workaround for tar implementations that insert them)\n    while (start < end) {\n        if (buffer[start] == 0) {\n            // Leading NULs mean missing field -> treat as zero value\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Must have trailing NUL or space\n    byte trailer;\n    trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' ') {\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, trailer));\n    }\n    // May have additional NULs or spaces\n    trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' ') {\n        end--;\n    }\n\n    boolean foundDigit = false;\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte >= '0' && currentByte <= '7') {\n            foundDigit = true;\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        } else if (currentByte == 0 || currentByte == ' ') {\n            // ignore embedded NULs or spaces (workaround for buggy tar creators)\n            continue;\n        } else {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n    }\n\n    // If no digits parsed or only zeros/nuls/spaces, return zero\n    return foundDigit ? result : 0L;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}