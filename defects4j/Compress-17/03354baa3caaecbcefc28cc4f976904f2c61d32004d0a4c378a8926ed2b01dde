{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain additional trailing spaces or NULs.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     start = offset;\n        int     end = offset + length;\n        // Keep track of original offset/length for exception messages\n        final int original_offset = offset;\n        final int original_length = length;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Special handling for leading NUL required by Javadoc/previous behavior.\n        // Check buffer[start] before skipping leading spaces.\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Use a temporary variable to track the start of digits after skipping spaces\n        int currentPos = start;\n\n        // Skip leading spaces\n        while (currentPos < end && buffer[currentPos] == ' '){\n             currentPos++;\n        }\n\n        // Find the end of the octal digits by trimming trailing NULs and spaces\n        int effectiveEnd = end; // Point immediately after the field initially\n\n        // Check for the mandatory trailing space or NUL. Start from the last byte.\n        // Use original_offset for lower bound check.\n        int idx = effectiveEnd - 1;\n\n        // Ensure idx is valid and points to a terminator.\n        // If the field is all spaces/NULs, idx might become < currentPos after trimming,\n        // but it must point to a space/NUL initially at end - 1.\n        if (idx < original_offset || (buffer[idx] != ' ' && buffer[idx] != 0)) {\n             // Since length >= 2, idx must be >= original_offset.\n             byte problematicByte = (idx < original_offset) ? -1 : buffer[idx]; // Should not happen with length >= 2\n             // Assume exceptionMessage helper exists and formats the error appropriately\n             // Provide a more context-specific message if possible\n             throw new IllegalArgumentException(\n                     exceptionMessage(buffer, original_offset, original_length, idx, problematicByte)\n                      + \" Missing mandatory trailing NUL or space\");\n        }\n\n        // Trim all trailing spaces and NULs backward from the end.\n        // Stop trimming if idx goes before the first non-space character found earlier (currentPos).\n        while (idx >= currentPos && (buffer[idx] == ' ' || buffer[idx] == 0)) {\n            idx--;\n        }\n        // Now `idx` points to the last potential octal digit, or is < currentPos.\n        // effectiveEnd marks the position *after* the last digit.\n        effectiveEnd = idx + 1;\n\n        // If after skipping leading spaces and trimming trailing terminators,\n        // the start position is at or after the effective end, the field is effectively empty or all spaces/NULs.\n        // This handles cases like \"   \\0\" or \"       \\0\" which should be 0.\n        if (currentPos >= effectiveEnd) {\n            return 0L;\n        }\n\n        // Update start to the first non-space character for the parsing loop\n        start = currentPos;\n\n        // Main parsing loop\n        for ( ; start < effectiveEnd; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                 // Encountered a non-octal digit before the trimmed end.\n                 // This indicates an invalid character within the expected octal number part (e.g., \"123 45\\0\").\n                 // Assume exceptionMessage helper exists and formats the error appropriately\n                 throw new IllegalArgumentException(\n                        exceptionMessage(buffer, original_offset, original_length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Assume this helper method exists elsewhere in the class or a utility class.\n    // It is required by the function signature but its implementation is not part of the fix.\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int current, byte currentByte) {\n        // Placeholder for the actual implementation assumed to exist.\n        // A real implementation would format a detailed error message.\n        String fieldContent;\n        try {\n            // Attempt to decode assuming ISO-8859-1 or similar, replace NULs for display\n            fieldContent = new String(buffer, offset, length, java.nio.charset.StandardCharsets.ISO_8859_1).replace((char) 0, '{' + \"NUL\" + '}');\n        } catch (Exception e) {\n            fieldContent = \"Cannot decode header field\"; // Fallback\n        }\n         return \"Invalid octal digit '\" + (char)currentByte + \"' (byte value \" + currentByte + \")\" +\n                \" at index \" + (current - offset) + \" (byte offset \" + current + \")\" +\n                \" in field '\" + fieldContent + \"' (length \" + length + \")\";\n     }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}