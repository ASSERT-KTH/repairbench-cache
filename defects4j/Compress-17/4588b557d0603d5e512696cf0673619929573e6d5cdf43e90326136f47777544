{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // To work around some tar implementations that insert a leading NUL\n    // this method returns 0 if it detects a leading NUL since Commons Compress 1.4.\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Check for all NUL in field (tolerate missing fields)\n    boolean allNul = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNul = false;\n            break;\n        }\n    }\n    if (allNul) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Must have trailing NUL or space OR end before trailer if trailer = 0x00 or ' '\n    // If there are no valid digits, return 0\n    // May have additional NULs or spaces\n    int trailerEnd = end;\n    while (trailerEnd > start && (buffer[trailerEnd - 1] == 0 || buffer[trailerEnd - 1] == ' ')) {\n        trailerEnd--;\n    }\n    if (trailerEnd == start) {\n        return 0L;\n    }\n\n    for (; start < trailerEnd; start++) {\n        final byte currentByte = buffer[start];\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        // CheckStyle:MagicNumber ON\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}