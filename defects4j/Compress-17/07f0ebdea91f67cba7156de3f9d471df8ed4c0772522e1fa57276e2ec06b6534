{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // Skip leading NULs and spaces (changed logic here)\n    boolean allNuls = true;\n    while (start < end && (buffer[start] == 0 || buffer[start] == ' ')) {\n        if (buffer[start] != 0) {\n            allNuls = false;\n        }\n        start++;\n    }\n    // If buffer is all NULs or spaces, return 0L as allowed by the contract\n    if (start == end) {\n        return 0L;\n    }\n\n    // Must have trailing NUL or space\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' ') {\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, trailer));\n    }\n    // May have additional NUL or space\n    trailer = buffer[end - 1];\n    if (end > start && (trailer == 0 || trailer == ' ')) {\n        end--;\n    }\n\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}