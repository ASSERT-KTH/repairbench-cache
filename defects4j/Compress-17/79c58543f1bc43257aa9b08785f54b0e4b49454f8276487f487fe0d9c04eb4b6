{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end) {\n            if (buffer[start] == ' ') {\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Find first non-space/non-null byte from the end\n        while (end > start && (buffer[end-1] == 0 || buffer[end-1] == ' ')) {\n            end--;\n        }\n\n        // Check if we have at least one valid character between start and end\n        if (start >= end) {\n            return 0L;\n        }\n\n        // Now check the new end position has proper trailer (but we've already handled trailing spaces/nuls)\n        // The original code was checking the trailer again after decrementing end, which could be wrong\n        // So we'll skip that check and proceed with parsing between start and end\n\n        for (; start < end; start++) {\n            final byte currentByte = buffer[start];\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}