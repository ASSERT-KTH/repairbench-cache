{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n    // If the field is encoded in base-256 (binary), decode it accordingly.\n    // In Java, a negative byte value means its high-order bit is set.\n    if (buffer[offset] < 0) {\n        long result = 0;\n        int end = offset + length;\n        for (int i = offset; i < end; i++) {\n            result = (result << 8) | (buffer[i] & 0xff);\n        }\n        return result;\n    }\n\n    int start = offset;\n    int end = offset + length;\n\n    // Work-around for tar implementations that insert a leading NUL.\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip any leading spaces.\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // The spec requires that there is at least one trailing delimiter.\n    if (end <= start) {\n        return 0L;\n    }\n    // The last byte must be a NUL or a space.\n    if (buffer[end - 1] == 0 || buffer[end - 1] == ' ') {\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1])\n        );\n    }\n    // Remove one more trailing delimiter if present.\n    if (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    long result = 0;\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte)\n            );\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII octal digit\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}