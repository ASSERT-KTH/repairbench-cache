{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long result = 0;\n        int end = offset + length;\n        int start = offset;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n\n        // Handle a leading NUL per the workaround since Commons Compress 1.4\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end && buffer[start] == ' ') {\n            start++;\n        }\n\n        // Check if there's at least one valid trailer byte (NUL or space) at the end\n        if (end > start) {\n            int trailerPos = end - 1;\n            if (buffer[trailerPos] != 0 && buffer[trailerPos] != ' ') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, trailerPos, buffer[trailerPos]));\n            }\n        } else {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n        }\n\n        // Parse the octal digits\n        for (; start < end; start++) {\n            final byte currentByte = buffer[start];\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0');\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}