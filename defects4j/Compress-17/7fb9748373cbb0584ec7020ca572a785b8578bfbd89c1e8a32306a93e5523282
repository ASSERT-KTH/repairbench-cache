{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n        // Use a different variable for the index marking the end of potential digits.\n        // Initialize it to the end of the field. It will be adjusted by trailer checks.\n        int     parseEnd = end;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle leading NUL, as specified in the Javadoc.\n        // This also covers the case of a buffer containing only NULs,\n        // because the first byte would be 0.\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        // Loop invariant: start < end (using original end for safety boundary)\n        // Loop terminates because start increases, or start == end.\n        while (start < end && buffer[start] == ' '){\n             start++;\n        }\n\n        // Check for mandatory trailer (NUL or space) at the physical end of the field.\n        // Do this check *before* potentially adjusting parseEnd based on inner terminators.\n        byte trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' '){\n            // Adjust the logical boundary for parsing actual digits.\n            // Everything up to this mandatory terminator is potentially part of the number or padding.\n            parseEnd--;\n        } else {\n            // If the very last byte isn't a NUL or space, the format is invalid per Javadoc/standard.\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n\n        // Check for optional second trailer (NUL or space) just before the mandatory one.\n        // This allows for fields ending in \" \\0\" or \"  \" or \"\\0\\0\".\n        // Ensure we don't read past the start or the newly adjusted parseEnd.\n        // We only need to check if parseEnd is still potentially pointing at a character\n        // that could be part of the number (i.e., parseEnd > start).\n        if (parseEnd > start) {\n            trailer = buffer[parseEnd - 1]; // Check the byte at the new 'parseEnd - 1'\n            if (trailer == 0 || trailer == ' ') {\n                // Found another NUL/space trailer, reduce parseEnd again.\n                parseEnd--;\n            }\n        }\n\n        // It's possible that after skipping leading spaces and processing trailer(s),\n        // start >= parseEnd. This happens for fields containing only spaces and/or NUL terminators.\n        // In this case, the loop below won't execute, and result will remain 0, which is correct.\n\n        for ( ;start < parseEnd; start++) {\n            final byte currentByte = buffer[start];\n\n            // CheckStyle:MagicNumber OFF\n            // If we encounter NUL ('\\0') or space (' ') within the designated digit area,\n            // it signifies the end of the octal number according to TAR specs.\n            if (currentByte == 0 || currentByte == ' ') {\n                 // Stop parsing digits, any remaining characters up to parseEnd are ignored.\n                 break;\n            }\n\n            // Check if the byte is a valid octal digit ('0' through '7').\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n\n            // Accumulate the octal value. (result << 3) is equivalent to result * 8.\n            result = (result << 3) + (currentByte - '0');\n            // CheckStyle:MagicNumber ON\n        }\n        // The loop terminates either by hitting the adjusted 'parseEnd' or by encountering\n        // an early terminator (NUL/space).\n\n        return result;\n    }\n\n    // Helper method assumed to be in the same class context for the exception message.\n    // Provided for completeness, assuming a similar implementation exists.\n    private static String exceptionMessage(byte[] buffer, final int offset, final int length, int idx, final byte currentByte) {\n        String S_buffer;\n        try {\n            // Attempt to decode the relevant part of the buffer as ASCII for readability\n             S_buffer = new String(buffer, offset, length, \"ASCII\");\n        } catch (java.io.UnsupportedEncodingException e) {\n             // Fallback to default charset if ASCII is not supported (unlikely)\n             S_buffer = new String(buffer, offset, length);\n        }\n        // Replace NUL characters for better display in the error message\n        S_buffer = S_buffer.replace(\"\\0\", \"{NUL}\");\n        return \"Invalid byte \"+currentByte+\" at offset \"+(idx-offset)+\" in '\"+S_buffer+\"' len \"+length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}