{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle leading NUL or scenarios where the first char determines the value\n        // This check needs to happen BEFORE skipping spaces\n        if (buffer[start] == 0) {\n            return 0L; // As per documentation, return 0 for leading NUL\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // After skipping leading spaces, if we are at the end, the field was all spaces.\n        // The checks below for trailing terminators handle this.\n        // However, if the first non-space character is NUL, we should treat it as end-of-number.\n        // Example: \"  \\0\" or \"  \\0123\"\n        // The original code didn't explicitly handle NUL after leading spaces;\n        // it would be caught by the parsing loop or trailer checks.\n\n        // Determine the effective end of the octal digits by checking for NUL/space trailers\n        int digitEnd = end; // Potential end of digits\n\n        // Check 1: Must have at least one trailing NUL or space.\n        byte trailer = buffer[digitEnd - 1];\n        if (trailer == 0 || trailer == ' ') {\n            digitEnd--;\n        } else {\n            // If the very last byte isn't NUL or space, the format is invalid per TAR spec.\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n\n        // Check 2: Optionally skip a second trailing NUL or space.\n        // Ensure digitEnd hasn't already moved past start\n        if (digitEnd > start) {\n             trailer = buffer[digitEnd - 1];\n             if (trailer == 0 || trailer == ' ') {\n                 digitEnd--;\n             }\n        }\n\n        // After trimming terminators, if start is now >= digitEnd,\n        // it means the field contained only spaces and/or terminators.\n        // Example: \" \\0\", \"  \", \"\\0\\0\" etc. Result should be 0.\n        if (start >= digitEnd) {\n            return 0L;\n        }\n\n        // Parse octal digits from 'start' up to 'digitEnd'\n        for ( ;start < digitEnd; start++) {\n            final byte currentByte = buffer[start];\n\n            // If we encounter a space or NUL within the potential digits,\n            // it marks the end of the octal number. Stop parsing.\n            // Example: \"123 \\0\\0\" should parse as 123.\n            if (currentByte == ' ' || currentByte == 0) {\n                break;\n            }\n\n            // CheckStyle:MagicNumber OFF\n            // Validate the byte is an octal digit\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            // Convert ASCII octal digit to numeric value and add to result\n            result = (result << 3) + (currentByte - '0');\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist, definition not provided but needed for compilation\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int badChrOffset, byte badChr) {\n        return \"Invalid byte \" + (badChr & 0xFF) + \" at offset \" + (badChrOffset - offset)\n             + \" in '\" + new String(buffer, offset, length).replaceAll(\"\\0\", \"{NUL}\") // Replace NUL for visibility\n             + \"' len \" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}