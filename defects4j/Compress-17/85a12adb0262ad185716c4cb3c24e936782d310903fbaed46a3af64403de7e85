{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Allow all NULs, i.e., missing fields, also if the first and all subsequent bytes are NUL, return 0\n    boolean allNuls = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    // To work around some tar implementations that insert a leading NUL\n    // (for COMPRESS-197), treat as 0 ONLY if all bytes are NUL, otherwise skip leading NULs\n    while (start < end && (buffer[start] == 0 || buffer[start] == ' ')) { // skip leading NULs and spaces\n        start++;\n    }\n\n    // At this point, skip if all characters were skip chars\n    if (start == end) {\n        return 0L;\n    }\n\n    if (start >= end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start - 1, buffer[start - 1]));\n    }\n\n    // Must have trailing NUL or space (at least one, possibly two)\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' ') {\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, trailer));\n    }\n    // May have additional NULs or spaces\n    if (end > start) {\n        trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--;\n        }\n    }\n\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}