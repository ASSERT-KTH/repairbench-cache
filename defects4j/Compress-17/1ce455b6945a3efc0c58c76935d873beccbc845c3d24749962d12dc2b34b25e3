{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // If the field has a leading NUL, return 0 (workaround for some tar variants)\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip any leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // Ensure that the last byte is a valid trailer (either NUL or space)\n    if (buffer[end - 1] != 0 && buffer[end - 1] != ' ') {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1])\n        );\n    }\n\n    // Remove any trailing NULs or spaces (there may be one or more)\n    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    // Parse the remaining bytes as an octal number.\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, currentByte)\n            );\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII octal digit\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}