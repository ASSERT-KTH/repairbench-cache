{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    // If the field is binary encoded, decode it as a base\u2011256 number.\n    // In tar headers, if the high order bit is set the value is stored in binary (two\u2019s complement)\n    // and should be interpreted as an unsigned number.\n    if ((buffer[offset] & 0x80) != 0) {\n        long result = 0;\n        for (int i = 0; i < length; i++) {\n            result = (result << 8) | (buffer[offset + i] & 0xff);\n        }\n        return result;\n    }\n\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Work-around: if the very first byte is NUL, return 0.\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip any leading spaces.\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // The field must have a trailing NUL or space.\n    if (end > start) {\n        byte trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--;\n        } else {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n    }\n    // It may contain an additional trailing NUL or space.\n    if (end > start) {\n        byte trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--;\n        }\n    }\n\n    // Parse the remaining octal digits.\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}