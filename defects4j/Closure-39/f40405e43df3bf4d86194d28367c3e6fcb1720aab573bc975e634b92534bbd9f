{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (forAnnotations) {\n    // In annotation mode we want to print the full record (with all properties)\n    // and use a different recursion marker.\n    if (!prettyPrint) {\n      return \"?\";\n    }\n    boolean prevPrettyPrint = prettyPrint;\n    // Turn off pretty printing to avoid recursion.\n    prettyPrint = false;\n\n    // Gather all properties from this and its prototypes (ignoring native types).\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this; \n         current != null && !current.isNativeObjectType(); \n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n      sb.append(property);\n      sb.append(\": \");\n      // Use the annotation string of the property type.\n      sb.append(getPropertyType(property).toAnnotationString());\n      i++;\n    }\n    sb.append(\"}\");\n\n    prettyPrint = prevPrettyPrint;\n    return sb.toString();\n  } else if (prettyPrint) {\n    // In normal toString mode we want to pretty print but possibly truncate if there\n    // are too many properties.\n    boolean prevPrettyPrint = prettyPrint;\n    prettyPrint = false;\n\n    // Only look far enough to decide if we should truncate.\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this; \n         current != null && !current.isNativeObjectType() &&\n             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n      sb.append(property);\n      sb.append(\": \");\n      sb.append(getPropertyType(property).toString());\n      i++;\n      // Only append an ellipsis if there are additional properties.\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n    sb.append(\"}\");\n\n    prettyPrint = prevPrettyPrint;\n    return sb.toString();\n  } else {\n    // If we're already in a nested call, use the appropriate recursion marker.\n    return forAnnotations ? \"?\" : \"{...}\";\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}