{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  }\n\n  // Annotation mode: show all props, guard recursion with \"?\"\n  if (forAnnotations) {\n    if (!prettyPrint) {\n      return \"?\";\n    }\n    prettyPrint = false;\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType();\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n    boolean first = true;\n    for (String property : propertyNames) {\n      if (!first) {\n        sb.append(\", \");\n      }\n      sb.append(property).append(\": \")\n        .append(getPropertyType(property).toAnnotationString());\n      first = false;\n    }\n    sb.append(\"}\");\n    prettyPrint = true;\n    return sb.toString();\n  }\n\n  // Pretty\u2010print mode: limit to MAX_PRETTY_PRINTED_PROPERTIES, guard recursion with \"{...}\"\n  if (prettyPrint) {\n    prettyPrint = false;\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null\n             && !current.isNativeObjectType()\n             && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n      sb.append(property).append(\": \")\n        .append(getPropertyType(property).toString());\n      i++;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n    sb.append(\"}\");\n    prettyPrint = true;\n    return sb.toString();\n  }\n\n  // Recursive case in non\u2010annotation, non\u2010pretty mode\n  return \"{...}\";\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}