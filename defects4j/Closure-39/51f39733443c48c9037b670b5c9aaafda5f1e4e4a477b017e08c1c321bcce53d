{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      // If the type has a name, give that.\n      return getReferenceName();\n    }\n\n    // The 'prettyPrint' flag is used to detect recursive calls during toString() generation.\n    // It's assumed to be true upon initial entry for a non-recursive call.\n    if (prettyPrint) {\n      // Set flag to false temporarily to detect recursive calls to this specific object.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted alphabetically.\n      Set<String> propertyNames = Sets.newTreeSet();\n      // Collect all properties from the object and its prototype chain.\n      // Do not limit the collection here; limiting is done during printing.\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType();\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        JSType propertyType = getPropertyType(property);\n        // Delegate to the appropriate string representation method (toString or toAnnotationString)\n        // for the property's type, preserving the 'forAnnotations' context.\n        // This ensures that recursive calls correctly use \"?\" or \"{...}\" based on the context.\n        if (forAnnotations) {\n            sb.append(propertyType.toAnnotationString());\n        } else {\n            sb.append(propertyType.toString());\n        }\n\n        i++;\n\n        // Add ellipsis and break if this is NOT for annotations (i.e., standard toString),\n        // we have reached the property display limit, AND there are more properties remaining.\n        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > i) {\n            sb.append(\", ...\");\n            break; // Stop adding properties\n        }\n      }\n\n      sb.append(\"}\");\n\n      // Reset the flag after finishing generation for this object.\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      // A recursive call to toStringHelper for this object was detected (prettyPrint was false).\n      // Return \"?\" if generating an annotation string, otherwise return \"{...}\".\n      // This matches the expected behavior shown in testRecursiveRecord.\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}