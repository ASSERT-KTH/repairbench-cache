{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  }\n  // If we are already recursing, then return the recursion marker:\n  if (!prettyPrint) {\n    return forAnnotations ? \"?\" : \"{...}\";\n  }\n  \n  // Temporarily disable pretty printing to avoid infinite recursion.\n  boolean oldPrettyPrint = prettyPrint;\n  prettyPrint = false;\n  \n  // Collect property names in sorted order.\n  Set<String> propertyNames = Sets.newTreeSet();\n  for (ObjectType current = this;\n       current != null && !current.isNativeObjectType();\n       current = current.getImplicitPrototype()) {\n    propertyNames.addAll(current.getOwnPropertyNames());\n    // For normal (non\u2010annotation) printing, stop once we have too many properties.\n    if (!forAnnotations && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n      break;\n    }\n  }\n  \n  StringBuilder sb = new StringBuilder();\n  sb.append(\"{\");\n  \n  int i = 0;\n  for (String property : propertyNames) {\n    if (i > 0) {\n      sb.append(\", \");\n    }\n    sb.append(property);\n    sb.append(\": \");\n    // Use the same forAnnotations flag when printing the property type.\n    sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n    i++;\n    // In toString (non-annotation) mode, if there are too many properties, print an ellipsis.\n    if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES &&\n        propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n      sb.append(\", ...\");\n      break;\n    }\n  }\n  sb.append(\"}\");\n  \n  // Restore the flag.\n  prettyPrint = oldPrettyPrint;\n  return sb.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}