{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    boolean savedPrettyPrint = prettyPrint;\n    // Prevent infinite recursion.\n    prettyPrint = false;\n    // Use a tree set so that the properties are sorted.\n    Set<String> propertyNames = Sets.newTreeSet();\n    if (forAnnotations) {\n      // When printing annotations, collect all properties.\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType();\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n    } else {\n      // When printing normally, only care about enough properties to hit the limit.\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType();\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n        if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n          break;\n        }\n      }\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n    int i = 0;\n    Iterator<String> iter = propertyNames.iterator();\n    while (iter.hasNext()) {\n      String property = iter.next();\n      if (i > 0) {\n        sb.append(\", \");\n      }\n      sb.append(property);\n      sb.append(\": \");\n      // Use the appropriate rendering for the property type.\n      if (forAnnotations) {\n        sb.append(getPropertyType(property).toAnnotationString());\n      } else {\n        sb.append(getPropertyType(property).toString());\n      }\n      i++;\n      // Only for normal toString, if we reached the limit and there are more properties,\n      // append an ellipsis.\n      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES && iter.hasNext()) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n    sb.append(\"}\");\n    prettyPrint = savedPrettyPrint;\n    return sb.toString();\n  } else {\n    // When recursion is detected, use different markers for annotations and toString.\n    return forAnnotations ? \"?\" : \"{...}\";\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}