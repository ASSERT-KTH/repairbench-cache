{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      boolean originalPrettyPrint = prettyPrint;\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n\n        JSType propertyType = getPropertyType(property);\n        if (propertyType.isStructType() && propertyType.toMaybeStructType().hasProperty(\"loop\") \n            && propertyType.toMaybeStructType().getPropertyType(\"loop\").isEquivalentTo(this)) {\n          sb.append(forAnnotations ? \"?\" : \"{...}\");\n        } else {\n          sb.append(propertyType.toString());\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = originalPrettyPrint;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}