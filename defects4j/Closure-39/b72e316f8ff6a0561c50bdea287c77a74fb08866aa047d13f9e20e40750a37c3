{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Don't pretty print recursively.\n    prettyPrint = false;\n\n    // Use a tree set so that the properties are sorted.\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType() &&\n             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    int numProps = propertyNames.size();\n    int limit =\n        forAnnotations ? Integer.MAX_VALUE : MAX_PRETTY_PRINTED_PROPERTIES;\n\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      sb.append(property);\n      sb.append(\": \");\n      JSType propType = getPropertyType(property);\n      // In annotation case, use annotation string\n      sb.append(forAnnotations ? propType.toAnnotationString() : propType.toString());\n\n      ++i;\n      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        // Print the rest properties in annotation case, else print \", ...\"\n        if (numProps > MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n        }\n        break;\n      }\n    }\n\n    sb.append(\"}\");\n\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}