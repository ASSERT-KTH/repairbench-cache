{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  }\n  // When recursing, return a short representation.\n  if (!prettyPrint) {\n    return forAnnotations ? \"?\" : \"{...}\";\n  }\n\n  // Temporarily disable pretty printing to avoid infinite recursion.\n  boolean oldPrettyPrint = prettyPrint;\n  prettyPrint = false;\n  StringBuilder sb = new StringBuilder();\n  sb.append(\"{\");\n\n  Set<String> propertyNames = Sets.newTreeSet();\n  if (forAnnotations) {\n    // When printing annotations, show all properties.\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType();\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n  } else {\n    // For non-annotation printing, limit the number of properties.\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType() &&\n         propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n  }\n\n  int i = 0;\n  for (String property : propertyNames) {\n    if (i > 0) {\n      sb.append(\", \");\n    }\n    sb.append(property);\n    sb.append(\": \");\n    sb.append(forAnnotations\n              ? getPropertyType(property).toAnnotationString()\n              : getPropertyType(property).toString());\n    i++;\n    // If printing normally and there are too many properties, show only the first ones.\n    if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES &&\n        propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n      sb.append(\", ...\");\n      break;\n    }\n  }\n  sb.append(\"}\");\n  prettyPrint = oldPrettyPrint;\n  return sb.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}