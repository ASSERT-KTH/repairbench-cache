{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  // If this type has a reference name, just use it.\n  if (hasReferenceName()) {\n    return getReferenceName();\n  }\n  // Recursion guard: if we've already entered pretty\u2010printing on this instance,\n  // then for annotations we return \"?\" and for toString() we return \"{...}\".\n  if (!prettyPrint) {\n    return forAnnotations ? \"?\" : \"{...}\";\n  }\n  // Enter pretty\u2010print mode (turn off the guard).\n  prettyPrint = false;\n  // Collect all property names in a sorted set.  If we're doing a normal toString(),\n  // stop collecting once we've exceeded the max; for annotations we collect them all.\n  Set<String> propertyNames = Sets.newTreeSet();\n  for (ObjectType cur = this;\n       cur != null && !cur.isNativeObjectType();\n       cur = cur.getImplicitPrototype()) {\n    propertyNames.addAll(cur.getOwnPropertyNames());\n    if (!forAnnotations && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n      break;\n    }\n  }\n  // Build the output.\n  StringBuilder sb = new StringBuilder();\n  sb.append(\"{\");\n  if (!forAnnotations) {\n    // Normal toString(): cap at MAX_PRETTY_PRINTED_PROPERTIES\n    int i = 0;\n    for (String prop : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n      sb.append(prop).append(\": \").append(getPropertyType(prop).toString());\n      i++;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n  } else {\n    // Annotation string: list them all, and use toAnnotationString() on each type\n    int i = 0;\n    for (String prop : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n      sb.append(prop).append(\": \")\n        .append(getPropertyType(prop).toAnnotationString());\n      i++;\n    }\n  }\n  sb.append(\"}\");\n  // Restore the recursion guard.\n  prettyPrint = true;\n  return sb.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}