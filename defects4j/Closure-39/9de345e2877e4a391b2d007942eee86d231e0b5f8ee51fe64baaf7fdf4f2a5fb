{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        // Propagate the 'forAnnotations' flag to nested types.\n        sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n\n        ++i;\n        // The original problem description and error messages suggest that\n        // truncation with \"...\" is not desired for 'toString()'.\n        // The 'toAnnotationString()' method also expects all properties.\n        // Therefore, remove the truncation logic.\n        // if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        //   sb.append(\", ...\");\n        //   break;\n        // }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      // If prettyPrint is false (e.g., due to recursion or recursion limit),\n      // return either \"{...}\" for standard string representation or \"?\" for annotations.\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}