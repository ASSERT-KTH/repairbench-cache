{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  // If this type has a reference name, just print it.\n  if (hasReferenceName()) {\n    return getReferenceName();\n  }\n  // We pretty\u2010print either when asked explicitly for annotations\n  // or when our 'prettyPrint' flag is set.\n  if (forAnnotations || prettyPrint) {\n    // Turn off prettyPrint to prevent recursive re\u2010entry.\n    prettyPrint = false;\n\n    // Collect all property names in sorted order.\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType()\n             && (forAnnotations\n                 || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String prop : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n      sb.append(prop).append(\": \");\n      JSType t = getPropertyType(prop);\n      // In annotation mode, use toAnnotationString(), else toString().\n      sb.append(forAnnotations ? t.toAnnotationString() : t.toString());\n\n      i++;\n      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n\n    sb.append(\"}\");\n    // Restore the flag.\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    // We're in a recursive context and not pretty\u2010printing.\n    return \"{...}\";\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}