{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Don't pretty print recursively.\n    prettyPrint = false;\n\n    // Use a tree set so that the properties are sorted.\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType() &&\n             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    int propertiesToPrint = propertyNames.size();\n    boolean exceedsMax = propertiesToPrint > MAX_PRETTY_PRINTED_PROPERTIES;\n    int maxToPrint = forAnnotations ? propertiesToPrint : Math.min(propertiesToPrint, MAX_PRETTY_PRINTED_PROPERTIES);\n\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      sb.append(property);\n      sb.append(\": \");\n      // To avoid infinite recursion for recursive records in annotation strings,\n      // print ? when forAnnotations is true and the property refers back to 'this'.\n      JSType propertyType = getPropertyType(property);\n      if (forAnnotations && propertyType == this) {\n        sb.append(\"?\");\n      } else if (!forAnnotations && propertyType == this) {\n        sb.append(\"{...}\");\n      } else {\n        sb.append(propertyType.toStringHelper(forAnnotations));\n      }\n\n      ++i;\n      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n\n    sb.append(\"}\");\n\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}