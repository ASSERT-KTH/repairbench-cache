{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      // If it has a reference name, use that.\n      // We don't want to potentially start an infinite loop for recursive\n      // object types. This is potentially imperfect, as we might be hiding\n      // types like {Object} or {Array}, but it's the best we can do.\n      return getReferenceName();\n    }\n\n    // The 'prettyPrint' flag is used to prevent infinite loops for recursive\n    // types. It's thread-unsafe, but we're currently single-threaded.\n    // When prettyPrint is false, it means we're in a recursive call.\n    if (!prettyPrint) {\n      // Return \"?\" for annotations and \"{...}\" for regular toString to match\n      // expected behavior in recursive scenarios.\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n\n    // Temporarily disable pretty printing to break recursion in nested calls.\n    prettyPrint = false;\n    try {\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      // Collect all property names from the type and its prototypes.\n      // Truncation will be handled during string building if necessary.\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType();\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      boolean truncated = false;\n      for (String property : propertyNames) {\n        // Check if we need to truncate based on MAX_PRETTY_PRINTED_PROPERTIES.\n        // Truncation only applies if forAnnotations is false.\n        if (!forAnnotations && i >= MAX_PRETTY_PRINTED_PROPERTIES) {\n          truncated = true;\n          break;\n        }\n\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        JSType propType = getPropertyType(property);\n        // Recursively call the appropriate string representation method\n        // based on the 'forAnnotations' flag.\n        sb.append(forAnnotations ? propType.toAnnotationString() : propType.toString());\n\n        i++;\n      }\n\n      if (truncated) {\n        // Append ellipsis if the output was truncated.\n        // Ensure we add it only if at least one property was added.\n        if (i > 0) {\n           sb.append(\", ...\");\n        } else {\n           // Handle edge case where MAX_PRETTY_PRINTED_PROPERTIES might be 0\n           sb.append(\"...\");\n        }\n      }\n\n      sb.append(\"}\");\n      return sb.toString();\n    } finally {\n      // Ensure the prettyPrint flag is reset.\n      prettyPrint = true;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}