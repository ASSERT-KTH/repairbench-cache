{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Don't pretty print recursively.\n    prettyPrint = false;\n\n    // Use a tree set so that the properties are sorted.\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType() &&\n             propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      sb.append(property);\n      sb.append(\": \");\n      JSType propType = getPropertyType(property);\n\n      // If pretty printing and the property type is referring back to\n      // a type that is already pretty printing, just show {...} \n      if (prettyPrintInProgress(propType)) {\n        sb.append(\"{...}\");\n      } else {\n        sb.append(propType.toStringHelper(forAnnotations));\n      }\n\n      ++i;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        // If forAnnotations==true, continue printing all properties\n        if (!forAnnotations) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n    }\n\n    sb.append(\"}\");\n\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}\n\n// Helper method to detect recursive types during pretty-printing.\nprivate boolean prettyPrintInProgress(JSType type) {\n  if (type instanceof ProxyObjectType) {\n    JSType referencedType = ((ProxyObjectType) type).getReferencedType();\n    return referencedType != null && referencedType == this && !prettyPrint;\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}