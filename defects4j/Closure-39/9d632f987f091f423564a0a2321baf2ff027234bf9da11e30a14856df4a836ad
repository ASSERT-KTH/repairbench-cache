{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      // If the type has a reference name, prefer that.\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Prevent infinite recursion in case of recursive types.\n      // Temporarily disable pretty printing for nested calls within this type's string representation.\n      prettyPrint = false;\n\n      // Use a TreeSet to ensure properties are sorted alphabetically.\n      Set<String> propertyNames = Sets.newTreeSet();\n      // Collect all own property names from this object type and its implicit prototypes.\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType();\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      // Iterate over the sorted property names.\n      for (String property : propertyNames) {\n        // Check if the maximum number of properties to print has been reached,\n        // but only apply this limit if we are not generating the string for annotations.\n        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          // Ensure we only add \"...\" if there were actually more properties than the limit.\n          if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n            sb.append(\", ...\");\n          }\n          break; // Stop appending properties\n        }\n\n        // Add a comma and space separator before the second property onwards.\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        // Append the property name.\n        sb.append(property);\n        sb.append(\": \");\n        // Append the string representation of the property's type.\n        // Recursively call toStringHelper, passing the forAnnotations flag.\n        JSType propertyType = getPropertyType(property);\n        // Handle cases where property type might be null (though less common for record types).\n        sb.append(propertyType != null ? propertyType.toStringHelper(forAnnotations) : \"<?>\" );\n\n        // Increment the count of properties processed.\n        i++;\n      }\n\n      sb.append(\"}\");\n\n      // Restore the prettyPrint flag state for subsequent calls at the same level.\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      // If prettyPrint is false, this indicates a recursive call trying to print the same type again.\n      // Return \"?\" when generating for annotations, and \"{...}\" otherwise, to break the recursion.\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}