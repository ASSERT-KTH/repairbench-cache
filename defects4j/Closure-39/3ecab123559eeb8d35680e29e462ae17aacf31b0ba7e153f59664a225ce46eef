{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        // FIX: Pass the 'forAnnotations' flag to the recursive toStringHelper call\n        // This ensures that nested types are printed correctly (e.g., '{...}' vs '?')\n        // and truncation rules are applied consistently based on whether\n        // it's for annotation string or regular toString.\n        sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n\n        ++i;\n        // FIX: Only truncate the property list if it's not for annotations.\n        // Annotation strings should show all properties, while regular toString\n        // should truncate for brevity.\n        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      // FIX: When 'prettyPrint' is false, it indicates a recursive call to this\n      // object itself (to prevent infinite recursion). In this case,\n      // differentiate the output based on 'forAnnotations':\n      // - If for annotations, return \"?\".\n      // - Otherwise, return \"{...}\".\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}