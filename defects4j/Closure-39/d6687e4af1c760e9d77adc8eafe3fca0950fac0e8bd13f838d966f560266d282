{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (prettyPrint) {\n    // Prevent recursion from going deeper.\n    boolean savedPrettyPrint = prettyPrint;\n    prettyPrint = false;\n\n    // When printing annotations we want the full list; otherwise, we may abbreviate.\n    boolean abbreviate = !forAnnotations;\n    Set<String> props = Sets.newTreeSet();\n\n    // Collect property names from this type and its prototypes.\n    // In abbreviation mode, we try to collect one extra name so we know if there are \u201ctoo many.\u201d\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType();\n         current = current.getImplicitPrototype()) {\n      for (String name : current.getOwnPropertyNames()) {\n        props.add(name);\n        if (abbreviate && props.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n          break;\n        }\n      }\n      if (abbreviate && props.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n        break;\n      }\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int total = props.size();\n    int displayCount = total;\n    // In non-annotation (toString) mode, if there are more than MAX_PRETTY_PRINTED_PROPERTIES\n    // then only print (MAX_PRETTY_PRINTED_PROPERTIES - 1) items followed by an ellipsis.\n    if (abbreviate && total > MAX_PRETTY_PRINTED_PROPERTIES) {\n      displayCount = MAX_PRETTY_PRINTED_PROPERTIES - 1;\n    }\n\n    int count = 0;\n    for (String name : props) {\n      if (count > 0) {\n        sb.append(\", \");\n      }\n      if (count == displayCount) {\n        // We have more properties than we want to show.\n        sb.append(\"...\");\n        break;\n      }\n      sb.append(name).append(\": \");\n      // Use the appropriate printing style for the property type.\n      sb.append(forAnnotations\n          ? getPropertyType(name).toAnnotationString()\n          : getPropertyType(name).toString());\n      count++;\n    }\n    sb.append(\"}\");\n\n    prettyPrint = savedPrettyPrint;\n    return sb.toString();\n  } else {\n    // If we are inside a nested call, then avoid recursion.\n    return forAnnotations ? \"?\" : \"{...}\";\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}