{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n        return getReferenceName();\n    } else if (forAnnotations) {\n        // For annotations, do not truncate, include all properties.\n        Set<String> propertyNames = Sets.newTreeSet();\n        for (ObjectType current = this;\n             current != null && !current.isNativeObjectType();\n             current = current.getImplicitPrototype()) {\n            propertyNames.addAll(current.getOwnPropertyNames());\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        boolean first = true;\n        for (String property : propertyNames) {\n            if (!first) {\n                sb.append(\", \");\n            } else {\n                first = false;\n            }\n            sb.append(property).append(\": \").append(getPropertyType(property).toString());\n        }\n        sb.append(\"}\");\n        return sb.toString();\n    } else if (prettyPrint) {\n        // Don't pretty print recursively.\n        boolean originalPrettyPrint = prettyPrint;\n        try {\n            prettyPrint = false;\n\n            // Use a tree set so that the properties are sorted.\n            Set<String> propertyNames = Sets.newTreeSet();\n            for (ObjectType current = this;\n                 current != null && !current.isNativeObjectType() &&\n                     propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n                 current = current.getImplicitPrototype()) {\n                propertyNames.addAll(current.getOwnPropertyNames());\n            }\n\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"{\");\n\n            int i = 0;\n            for (String property : propertyNames) {\n                if (i > 0) {\n                    sb.append(\", \");\n                }\n\n                sb.append(property);\n                sb.append(\": \");\n                sb.append(getPropertyType(property).toString());\n\n                ++i;\n                if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n                    sb.append(\", ...\");\n                    break;\n                }\n            }\n\n            sb.append(\"}\");\n            return sb.toString();\n        } finally {\n            prettyPrint = originalPrettyPrint;\n        }\n    } else {\n        return \"{...}\";\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}