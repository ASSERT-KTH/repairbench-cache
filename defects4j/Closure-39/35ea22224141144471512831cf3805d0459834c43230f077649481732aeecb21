{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    }\n\n    // The 'prettyPrint' member variable is used to detect and prevent infinite recursion\n    // when building the string representation of an object type.\n    // If 'prettyPrint' is false, it indicates that we have already entered the\n    // pretty printing process for this object (or an object higher up in the call stack)\n    // and are now recursively calling toStringHelper on a property type that refers back to it.\n    if (!prettyPrint) {\n      // If we are in a recursive call:\n      // For annotation strings (forAnnotations == true), recursive types are represented by '?'.\n      // For regular toString (forAnnotations == false), they are represented by '{...}'.\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n\n    // If we reach here, it's the *initial* non-recursive call for this object.\n    // We proceed to pretty print its properties.\n    // Set 'prettyPrint' to false to mark that we are currently processing this object\n    // and any recursive calls will hit the above 'if (!prettyPrint)' block.\n    prettyPrint = false;\n\n    // Use a tree set so that the properties are sorted consistently.\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType() &&\n             (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES); // For annotations, collect all properties (no limit). For regular toString, apply limit.\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n\n      sb.append(property);\n      sb.append(\": \");\n      // Recursively call toStringHelper on the property's type,\n      // passing the same 'forAnnotations' flag to maintain context.\n      sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n\n      ++i;\n      // Truncate the output with \"...\" only if we are generating a regular toString\n      // (i.e., not for annotations) and the maximum property limit is reached.\n      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break; // Stop adding more properties after truncation\n      }\n    }\n\n    sb.append(\"}\");\n\n    // Reset 'prettyPrint' to true, indicating that this object has finished\n    // its pretty printing process and is ready for future full pretty prints.\n    prettyPrint = true;\n    return sb.toString();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}