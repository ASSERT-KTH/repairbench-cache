{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  } else if (forAnnotations) {\n    // In annotation mode, print all properties (without truncation)\n    boolean oldPrettyPrint = prettyPrint;\n    prettyPrint = false;\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType();\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n      sb.append(property);\n      sb.append(\": \");\n      sb.append(getPropertyType(property).toAnnotationString());\n      i++;\n    }\n    sb.append(\"}\");\n    prettyPrint = oldPrettyPrint;\n    return sb.toString();\n  } else if (prettyPrint) {\n    // In normal mode, use pretty printing with a property limit.\n    prettyPrint = false;\n    Set<String> propertyNames = Sets.newTreeSet();\n    for (ObjectType current = this;\n         current != null && !current.isNativeObjectType() &&\n         propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n         current = current.getImplicitPrototype()) {\n      propertyNames.addAll(current.getOwnPropertyNames());\n    }\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n    int total = propertyNames.size();\n    int i = 0;\n    for (String property : propertyNames) {\n      if (i > 0) {\n        sb.append(\", \");\n      }\n      sb.append(property);\n      sb.append(\": \");\n      sb.append(getPropertyType(property).toString());\n      i++;\n      if (i == MAX_PRETTY_PRINTED_PROPERTIES && total > MAX_PRETTY_PRINTED_PROPERTIES) {\n        sb.append(\", ...\");\n        break;\n      }\n    }\n    sb.append(\"}\");\n    prettyPrint = true;\n    return sb.toString();\n  } else {\n    return \"{...}\";\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}