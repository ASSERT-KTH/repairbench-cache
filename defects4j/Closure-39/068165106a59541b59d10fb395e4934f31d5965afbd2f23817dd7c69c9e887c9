{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (forAnnotations || prettyPrint) {\n      // Save original prettyPrint state to restore later\n      boolean originalPrettyPrint = prettyPrint;\n      if (!forAnnotations) {\n        // Disable prettyPrint to prevent recursion for non-annotation cases\n        prettyPrint = false;\n      }\n\n      // Use a tree set for sorted properties\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n           (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        // Use appropriate string representation based on forAnnotations\n        sb.append(forAnnotations ?\n            getPropertyType(property).toAnnotationString() :\n            getPropertyType(property).toString());\n\n        ++i;\n        // Add ellipsis if exceeding max properties for non-annotation cases\n        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      // Restore original prettyPrint state\n      if (!forAnnotations) {\n        prettyPrint = originalPrettyPrint;\n      }\n\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}