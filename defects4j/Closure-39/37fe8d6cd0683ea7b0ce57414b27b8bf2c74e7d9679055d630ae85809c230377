{
    "generation": "@Override\nString toStringHelper(boolean forAnnotations) {\n  if (hasReferenceName()) {\n    return getReferenceName();\n  }\n  // Recursion guard: if we're already printing this type, stop here.\n  if (!prettyPrint) {\n    return forAnnotations ? \"?\" : \"{...}\";\n  }\n\n  // Don't pretty print recursively.\n  prettyPrint = false;\n\n  // Use a tree set so that the properties are sorted.\n  Set<String> propertyNames = Sets.newTreeSet();\n  for (ObjectType current = this;\n       current != null && !current.isNativeObjectType() &&\n         (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);\n       current = current.getImplicitPrototype()) {\n    propertyNames.addAll(current.getOwnPropertyNames());\n  }\n\n  StringBuilder sb = new StringBuilder();\n  sb.append(\"{\");\n\n  int i = 0;\n  for (String property : propertyNames) {\n    if (i > 0) {\n      sb.append(\", \");\n    }\n    sb.append(property).append(\": \");\n    JSType propType = getPropertyType(property);\n    sb.append(forAnnotations\n              ? propType.toAnnotationString()\n              : propType.toString());\n    i++;\n    if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n      sb.append(\", ...\");\n      break;\n    }\n  }\n\n  sb.append(\"}\");\n  prettyPrint = true;\n  return sb.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}