{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    // Don't use the reference name for annotations, show the structure.\n    if (hasReferenceName() && !forAnnotations) {\n      return getReferenceName();\n    }\n\n    // Prevent infinite loops with recursive types. If prettyPrint is false,\n    // it means we are already printing this object higher up the stack.\n    if (!prettyPrint) {\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n\n    prettyPrint = false;\n    try {\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      // Collect all properties from the prototype chain.\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType();\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        // Apply truncation limit only for regular toString(), not for annotations.\n        // Check before appending the property, if the limit is reached.\n        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          // Ensure we only add \"...\" if there are more properties than the limit.\n          if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {\n              sb.append(\"...\");\n          }\n          break;\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        JSType propertyType = getPropertyType(property);\n        // Delegate toStringHelper call, passing the forAnnotations flag.\n        // Ensure propertyType is not null before calling methods on it.\n        // Although getPropertyType is unlikely to return null for owned properties,\n        // it's safer. If null, use a placeholder.\n        sb.append(propertyType != null ? propertyType.toStringHelper(forAnnotations) : \"<??\");\n\n        i++; // Increment property count *after* processing it.\n      }\n\n      sb.append(\"}\");\n      return sb.toString();\n    } finally {\n      // Restore prettyPrint state.\n      prettyPrint = true;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}