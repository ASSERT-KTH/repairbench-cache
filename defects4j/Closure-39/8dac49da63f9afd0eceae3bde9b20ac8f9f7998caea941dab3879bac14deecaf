{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // The 'prettyPrint' field acts as a recursion guard for both regular\n      // toString() and toAnnotationString(). We set it to false to mark\n      // this object as currently being processed. If a recursive call\n      // encounters this object again, it will find 'prettyPrint' is false\n      // and take the 'else' branch below.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               // For annotation strings, we want to include all properties,\n               // so the MAX_PRETTY_PRINTED_PROPERTIES limit should not apply.\n               (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        // Recursively call toStringHelper, passing the 'forAnnotations' flag\n        // down to ensure sub-types are formatted correctly for annotations\n        // or regular pretty printing.\n        sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n\n        ++i;\n        // The '...' truncation should only apply when not generating\n        // an annotation string and the limit is reached.\n        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      // Reset 'prettyPrint' to true now that processing is complete for this object.\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      // This 'else' branch is taken when 'prettyPrint' is false,\n      // indicating that this object is currently being processed\n      // higher up in the call stack (i.e., a recursive call).\n      // If we are generating an annotation string, return \"?\" to indicate\n      // a recursive/cycle reference. Otherwise, return \"{...}\" for regular\n      // pretty printing.\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}