{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      // If this type has a reference name (e.g., a named type or a resolved proxy type),\n      // return its reference name. For annotation strings, ProxyObjectType.getReferenceName()\n      // typically returns \"?\".\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // This flag prevents infinite recursion for recursive types by ensuring\n      // a type is only pretty-printed once in a given call stack.\n      // If we are currently pretty-printing this object, set prettyPrint to false\n      // for any nested calls to toStringHelper for this *same* object instance.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted consistently.\n      Set<String> propertyNames = Sets.newTreeSet();\n      // Collect all property names from this object and its implicit prototypes.\n      // The previous code had a bug here, prematurely stopping collection based on\n      // MAX_PRETTY_PRINTED_PROPERTIES, which could lead to an incomplete list\n      // of properties for truncation purposes. Collect all, then truncate when printing.\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType();\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        // Apply truncation logic if not in annotation mode and the number of\n        // properties printed has reached MAX_PRETTY_PRINTED_PROPERTIES.\n        // This check should happen *before* appending the current property\n        // to determine if \"...\" is needed.\n        if (!forAnnotations && i >= MAX_PRETTY_PRINTED_PROPERTIES) {\n          // If there were properties printed before the truncation point,\n          // append a comma before \"...\" for correct formatting.\n          if (i > 0) {\n            sb.append(\", \");\n          }\n          sb.append(\"...\");\n          break; // Stop iterating through remaining properties\n        }\n\n        // Add a comma and space separator for properties after the first one.\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        // Recursively call toStringHelper for the property's type,\n        // ensuring the 'forAnnotations' flag is propagated. This is crucial\n        // for `toAnnotationString()` to work correctly for nested types.\n        sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n\n        ++i;\n      }\n\n      sb.append(\"}\");\n\n      // Restore the prettyPrint flag for this object, so subsequent independent\n      // toString() calls on this object behave normally.\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      // If prettyPrint is false (meaning this object is already being pretty-printed\n      // further up the call stack, or pretty-printing is globally disabled for some reason),\n      // return a generic \"{...}\" to prevent infinite recursion.\n      return \"{...}\";\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}