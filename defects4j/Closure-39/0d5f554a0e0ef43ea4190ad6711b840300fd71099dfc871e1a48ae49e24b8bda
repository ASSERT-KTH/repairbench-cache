{
    "generation": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    }\n\n    // `prettyPrint` is a member variable, used to detect if we're already processing this object type higher up the call stack.\n    // If `prettyPrint` is false, it means we've already entered this object type's toStringHelper,\n    // indicating a recursive call.\n    if (!prettyPrint) {\n      // For recursive types, return '?' if forAnnotations is true, otherwise '{...}'.\n      return forAnnotations ? \"?\" : \"{...}\";\n    }\n\n    // From this point, `prettyPrint` must be true. This is the first time we're pretty printing this object\n    // in the current call stack, or this object was explicitly marked for pretty printing.\n\n    // Temporarily set `prettyPrint` to false to prevent infinite recursion and signal to nested calls\n    // that they are part of a larger pretty-printing operation for 'this' object.\n    // This ensures that any subsequent nested call to toStringHelper on 'this' object\n    // will hit the `if (!prettyPrint)` branch above and return either '?' or '{...}'.\n    final boolean originalPrettyPrint = prettyPrint;\n    prettyPrint = false; // Disable pretty printing for recursive calls within this object's properties.\n\n    try {\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType();\n           current = current.getImplicitPrototype()) {\n        // Collect all property names. Truncation will be handled during string building,\n        // not during property collection, especially for annotation strings.\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        // CRITICAL FIX: Pass `forAnnotations` down to the nested property type's `toStringHelper` call.\n        // This ensures that nested types are also printed according to `forAnnotations` (e.g., fully or with `?`).\n        sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n\n        ++i;\n        // Truncate the output string only if it's not for annotations\n        // AND the number of printed properties reaches the maximum limit.\n        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break; // Stop iterating properties if truncated.\n        }\n      }\n\n      sb.append(\"}\");\n      return sb.toString();\n    } finally {\n      // Ensure `prettyPrint` is restored to its original state, regardless of how the try block exits.\n      // This is crucial because `prettyPrint` is a member variable and its state should not leak.\n      prettyPrint = originalPrettyPrint;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}