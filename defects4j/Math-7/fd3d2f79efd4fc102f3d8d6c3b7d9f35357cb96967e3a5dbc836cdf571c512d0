{
    "generation": "@Override\nprotected double acceptStep(final AbstractStepInterpolator interpolator,\n                            final double[] y, final double[] yDot, final double tEnd)\n    throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {\n\n    double previousT = interpolator.getGlobalPreviousTime();\n    final double currentT = interpolator.getGlobalCurrentTime();\n\n    // initialize the event states if needed\n    if (!statesInitialized) {\n        for (EventState state : eventsStates) {\n            state.reinitializeBegin(interpolator);\n        }\n        statesInitialized = true;\n    }\n\n    // search for next events that may occur during the step\n    final int orderingSign = interpolator.isForward() ? +1 : -1;\n    SortedSet<EventState> occurringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n        public int compare(EventState es0, EventState es1) {\n            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n        }\n    });\n    for (EventState state : eventsStates) {\n        if (state.evaluateStep(interpolator)) {\n            occurringEvents.add(state);\n        }\n    }\n\n    // process all occurring events in chronological order\n    while (!occurringEvents.isEmpty()) {\n\n        // pick the first event\n        final Iterator<EventState> it = occurringEvents.iterator();\n        final EventState currentEvent = it.next();\n        it.remove();\n        final double eventT = currentEvent.getEventTime();\n\n        // restrict interpolator to [previousT, eventT]\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(eventT);\n\n        // compute the state at event time\n        interpolator.setInterpolatedTime(eventT);\n        final double[] eventY = interpolator.getInterpolatedState().clone();\n\n        // advance all event states to this time\n        for (EventState state : eventsStates) {\n            state.stepAccepted(eventT, eventY);\n        }\n\n        // handle the first part of the step, up to the event\n        for (StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, false);\n        }\n\n        // eventOccurred may ask to stop\n        if (currentEvent.stop()) {\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            return eventT;\n        }\n\n        // eventOccurred may ask to reset\n        if (currentEvent.reset(eventT, eventY)) {\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            computeDerivatives(eventT, y, yDot);\n            resetOccurred = true;\n            // reinitialize all states at the reset time\n            for (EventState state : eventsStates) {\n                state.stepAccepted(eventT, eventY);\n            }\n            return eventT;\n        }\n\n        // prepare for the remaining part of the step\n        previousT = eventT;\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(currentT);\n\n        // re-evaluate all events over [previousT, currentT]\n        occurringEvents.clear();\n        for (EventState state : eventsStates) {\n            if (state.evaluateStep(interpolator)) {\n                occurringEvents.add(state);\n            }\n        }\n    }\n\n    // no more events, finish the step\n    interpolator.setSoftPreviousTime(previousT);\n    interpolator.setSoftCurrentTime(currentT);\n    interpolator.setInterpolatedTime(currentT);\n    final double[] currentY = interpolator.getInterpolatedState();\n    for (EventState state : eventsStates) {\n        state.stepAccepted(currentT, currentY);\n        isLastStep = isLastStep || state.stop();\n    }\n    isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n    // handle the remaining part of the step\n    for (StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, isLastStep);\n    }\n    System.arraycopy(currentY, 0, y, 0, y.length);\n\n    return currentT;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}