{
    "generation": "    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     * @exception NoBracketingException if the location of an event cannot be bracketed\n     * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {\n\n            double previousT = interpolator.getGlobalPreviousTime();\n            final double currentT = interpolator.getGlobalCurrentTime();\n            // Ensure isLastStep and resetOccurred are fresh for this step acceptance\n            // isLastStep is typically managed by the integrator loop, but resetOccurred needs reset\n            resetOccurred = false;\n\n\n            // initialize the events states if needed\n            if (! statesInitialized) {\n                for (EventState state : eventsStates) {\n                    state.reinitializeBegin(interpolator);\n                }\n                statesInitialized = true;\n            }\n\n            // search for next events that may occur during the step\n            final int orderingSign = interpolator.isForward() ? +1 : -1;\n            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n\n                /** {@inheritDoc} */\n                public int compare(EventState es0, EventState es1) {\n                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                }\n\n            });\n\n            for (final EventState state : eventsStates) {\n                if (state.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(state);\n                }\n            }\n\n            // Keep track of events handled during the loop to avoid redundant final updates\n            final Set<EventState> handledEvents = new HashSet<EventState>();\n            boolean stepEndedPrematurely = false;\n\n            while (!occuringEvents.isEmpty()) {\n\n                // handle the chronologically first event\n                final Iterator<EventState> iterator = occuringEvents.iterator();\n                final EventState currentEvent = iterator.next();\n                iterator.remove();\n                handledEvents.add(currentEvent); // Mark event as handled in this step segment\n\n                // restrict the interpolator to the first part of the step, up to the event\n                final double eventT = currentEvent.getEventTime();\n                interpolator.setSoftPreviousTime(previousT);\n                interpolator.setSoftCurrentTime(eventT);\n\n                // get state at event time\n                interpolator.setInterpolatedTime(eventT);\n                // CLONE the state - event handlers may modify it, and we need original for potential reset/stop\n                final double[] eventY = interpolator.getInterpolatedState().clone();\n\n                // advance THIS event state ONLY to the event time.\n                // It is vital to call stepAccepted BEFORE checking stop() or reset()\n                // because stepAccepted() may change the state of the handler, turning\n                // SHOULD_CONTINUE into SHOULD_STOP or SHOULD_RESET\n                currentEvent.stepAccepted(eventT, eventY);\n                // Check if the event requests stopping the integration\n                isLastStep = currentEvent.stop();\n\n                // handle the first part of the step, up to the event\n                for (final StepHandler handler : stepHandlers) {\n                    handler.handleStep(interpolator, isLastStep);\n                }\n\n                if (isLastStep) {\n                    // the event asked to stop integration\n                    System.arraycopy(eventY, 0, y, 0, y.length); // Update main state array\n                    // Notify events that were found AFTER this event, that the step ended early\n                    for (final EventState remaining : occuringEvents) {\n                        remaining.stepAccepted(eventT, eventY);\n                    }\n                    stepEndedPrematurely = true;\n                    return eventT;\n                }\n\n                boolean needReset = currentEvent.reset(eventT, eventY);\n                if (needReset) {\n                    // some event handler has triggered changes that\n                    // invalidate the derivatives, we need to recompute them\n                    System.arraycopy(eventY, 0, y, 0, y.length); // Update main state array\n                    computeDerivatives(eventT, y, yDot);          // Recompute derivatives\n                    resetOccurred = true;\n                    // Notify events that were found AFTER this event, that the step ended early\n                    for (final EventState remaining : occuringEvents) {\n                        remaining.stepAccepted(eventT, eventY);\n                    }\n                    stepEndedPrematurely = true;\n                    return eventT;\n                }\n\n                // prepare handling of the remaining part of the step\n                previousT = eventT;\n                interpolator.setSoftPreviousTime(eventT);\n                interpolator.setSoftCurrentTime(currentT);\n\n                // check if the same event occurs again in the remaining part of the step\n                if (currentEvent.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(currentEvent);\n                }\n\n            } // end while events occur\n\n            // Reaching here means the step completed normally up to currentT (no stop/reset requested by handled events)\n            previousT = currentT; // Ensure previousT is currentT for the final handler call if no events occurred\n            interpolator.setSoftPreviousTime(interpolator.getGlobalPreviousTime()); // Restore soft bounds for final handler call? No, keep previousT.\n            interpolator.setSoftCurrentTime(currentT);\n            interpolator.setInterpolatedTime(currentT); // Ensure interpolation time is set to the end\n\n            // y should already hold the state at currentT (set by integrator before calling acceptStep)\n            final double[] currentY = y; // Use state potentially modified by integrator step/reset\n\n            // Update the internal state of all event handlers, preparing for next step\n            for (final EventState state : eventsStates) {\n                 // Update state t0/g0 to the end of the completed step interval (currentT)\n                 // Only call if not handled mid-step? No, original logic seemed necessary.\n                 // Call stepAccepted for ALL states to align them with the end of the step.\n                 state.stepAccepted(currentT, currentY);\n                 // Accumulate stop flags from all handlers (flags were set during evaluateStep)\n                 isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n            // handle the final part of the step, after all events (if any) were processed\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n\n            return currentT;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}