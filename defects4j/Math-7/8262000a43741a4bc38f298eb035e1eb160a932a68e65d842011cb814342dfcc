{
    "generation": "/** Accept a step, triggering events and step handlers.\n * @param interpolator step interpolator\n * @param y state vector at step end time, must be reset if an event\n * asks for resetting or if an events stops integration during the step\n * @param yDot placeholder array where to put the time derivative of the state vector\n * @param tEnd final integration time\n * @return time at end of step\n * @exception MaxCountExceededException if the interpolator throws one because\n * the number of functions evaluations is exceeded\n * @exception NoBracketingException if the location of an event cannot be bracketed\n * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n * @since 2.2\n */\nprotected double acceptStep(final AbstractStepInterpolator interpolator,\n                            final double[] y, final double[] yDot, final double tEnd)\n    throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {\n\n    double previousT = interpolator.getGlobalPreviousTime();\n    final double currentT = interpolator.getGlobalCurrentTime();\n\n    // initialize the events states if needed\n    if (! statesInitialized) {\n        for (EventState state : eventsStates) {\n            state.reinitializeBegin(interpolator);\n        }\n        statesInitialized = true;\n    }\n\n    // search for next events that may occur during the step\n    final int orderingSign = interpolator.isForward() ? +1 : -1;\n    SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n        public int compare(EventState es0, EventState es1) {\n            int cmp = Double.compare(es0.getEventTime(), es1.getEventTime());\n            if (cmp != 0) {\n                return orderingSign * cmp;\n            }\n            // tie\u2010breaker so two different handlers at exactly the same time still get scheduled\n            return System.identityHashCode(es0) - System.identityHashCode(es1);\n        }\n    });\n\n    for (final EventState state : eventsStates) {\n        if (state.evaluateStep(interpolator)) {\n            // the event occurs during the current step\n            occuringEvents.add(state);\n        }\n    }\n\n    // now process all the events in chronological order\n    while (!occuringEvents.isEmpty()) {\n\n        // pick the chronologically first event\n        Iterator<EventState> it = occuringEvents.iterator();\n        EventState currentEvent = it.next();\n        it.remove();\n\n        // restrict the interpolator to the part of the step up to the event\n        double eventT = currentEvent.getEventTime();\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(eventT);\n\n        // retrieve the state at the event\n        interpolator.setInterpolatedTime(eventT);\n        double[] eventY = interpolator.getInterpolatedState().clone();\n\n        // signal the event to its handler\n        currentEvent.stepAccepted(eventT, eventY);\n        // also advance all the other handlers to this time, so their internal g0 is updated\n        for (EventState other : eventsStates) {\n            if (other != currentEvent) {\n                other.stepAccepted(eventT, eventY);\n            }\n        }\n        isLastStep = currentEvent.stop();\n\n        // first part of the step, up to the event\n        for (StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        if (isLastStep) {\n            // user asked to stop at this event, copy back state and exit\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            for (EventState remaining : occuringEvents) {\n                remaining.stepAccepted(eventT, eventY);\n            }\n            return eventT;\n        }\n\n        // check for a reset\n        boolean needReset = currentEvent.reset(eventT, eventY);\n        if (needReset) {\n            // copy back state, recompute derivatives, and exit\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            computeDerivatives(eventT, y, yDot);\n            resetOccurred = true;\n            for (EventState remaining : occuringEvents) {\n                remaining.stepAccepted(eventT, eventY);\n            }\n            return eventT;\n        }\n\n        // prepare to continue after the event\n        previousT = eventT;\n        interpolator.setSoftPreviousTime(eventT);\n        interpolator.setSoftCurrentTime(currentT);\n\n        // check if the same event fires again in the remainder of the step\n        if (currentEvent.evaluateStep(interpolator)) {\n            occuringEvents.add(currentEvent);\n        }\n\n    }\n\n    // no more events in this step \u2013 finish the step\n    interpolator.setInterpolatedTime(currentT);\n    double[] currentY = interpolator.getInterpolatedState();\n    for (EventState state : eventsStates) {\n        state.stepAccepted(currentT, currentY);\n        isLastStep = isLastStep || state.stop();\n    }\n    // also flag the very last integrator step\n    isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n    // notify the step handlers of the final segment\n    for (StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, isLastStep);\n    }\n\n    return currentT;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}