{
    "generation": "    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     * @exception NoBracketingException if the location of an event cannot be bracketed\n     * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {\n\n            double previousT = interpolator.getGlobalPreviousTime();\n            final double currentT = interpolator.getGlobalCurrentTime();\n\n            // initialize the events states if needed\n            if (! statesInitialized) {\n                for (EventState state : eventsStates) {\n                    state.reinitializeBegin(interpolator);\n                }\n                statesInitialized = true;\n            }\n\n            // search for next events that may occur during the step\n            final int orderingSign = interpolator.isForward() ? +1 : -1;\n            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n\n                /** {@inheritDoc} */\n                @Override\n                public int compare(EventState es0, EventState es1) {\n                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                }\n\n            });\n\n            for (final EventState state : eventsStates) {\n                if (state.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(state);\n                }\n            }\n\n            while (!occuringEvents.isEmpty()) {\n\n                // handle the chronologically first event\n                final Iterator<EventState> iterator = occuringEvents.iterator();\n                final EventState currentEvent = iterator.next();\n                iterator.remove();\n\n                // restrict the interpolator to the first part of the step, up to the event\n                final double eventT = currentEvent.getEventTime();\n                interpolator.setSoftPreviousTime(previousT);\n                interpolator.setSoftCurrentTime(eventT);\n\n                // get state at event time\n                interpolator.setInterpolatedTime(eventT);\n                // use clone() because state is needed by stepAccepted() and reset()\n                // and might be modified by event handler in reset()\n                final double[] eventY = interpolator.getInterpolatedState().clone();\n\n                // Check if the event triggers reset or stop actions.\n                // Note: eventOccurred() is called internally by reset() and stop()\n                //       and this MUST be done before stepAccepted() is called for this event state\n                final boolean needReset = currentEvent.reset(eventT, eventY);\n                final boolean stop = currentEvent.stop();\n\n                // handle the first part of the step, up to the event\n                // Pass the stop status determined by THIS event to the handler\n                for (final StepHandler handler : stepHandlers) {\n                    handler.handleStep(interpolator, stop);\n                }\n\n                if (stop || needReset) {\n                    // The step is effectively ended at eventT\n\n                    // Update state vector\n                    System.arraycopy(eventY, 0, y, 0, y.length);\n\n                    // Advance ALL event states to the event time T\n                    // This ensures all states are synchronized to the actual step end time.\n                    for (final EventState state : eventsStates) {\n                        state.stepAccepted(eventT, eventY);\n                    }\n\n                    isLastStep = stop; // Set the global integrator flag\n\n                    if (needReset) {\n                        // Recompute derivatives after state change\n                        computeDerivatives(eventT, y, yDot);\n                        resetOccurred = true;\n                    }\n\n                    // Integration ends here, return the event time\n                    return eventT;\n\n                }\n\n                // --- If we reach here: NO stop, NO reset requested by currentEvent ---\n\n                // Advance only the current event state, as the step proceeds normally for now\n                currentEvent.stepAccepted(eventT, eventY);\n\n                // Prepare handling of the remaining part of the step\n                previousT = eventT;\n                interpolator.setSoftPreviousTime(eventT);\n                interpolator.setSoftCurrentTime(currentT); // Restore end of step for next evaluation\n\n                // check if the same event occurs again in the remaining part of the step\n                if (currentEvent.evaluateStep(interpolator)) {\n                    // the event occurs during the current step (again)\n                    occuringEvents.add(currentEvent);\n                }\n\n            } // End of while loop for events within the step\n\n\n            // --- If we reach here: No more events detected within the interval [previousT, currentT] ---\n            // --- Or no events occurred at all in this step ---\n\n            // The step proceeds normally to currentT\n            interpolator.setInterpolatedTime(currentT);\n            final double[] currentY = interpolator.getInterpolatedState(); // No clone needed (matches original)\n\n            // Advance all event states to the end of the step 'currentT'\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                // Check if any event requested stop during this step processing\n                // (The stop flag is set within reset/stop methods called earlier inside the loop)\n                isLastStep = isLastStep || state.stop();\n            }\n            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n            // handle the final part of the step, from previousT (last event time or step start) to currentT\n            interpolator.setSoftPreviousTime(previousT);\n            interpolator.setSoftCurrentTime(currentT);\n            interpolator.setInterpolatedTime(currentT); // Ensure interpolated time is correct for handler\n\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n\n            // Return the time at the end of the step\n            return currentT;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}