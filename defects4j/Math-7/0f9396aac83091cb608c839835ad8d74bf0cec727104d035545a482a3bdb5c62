{
    "generation": "    /** Accept a step, triggering events and step handlers.\n     * @param interpolator step interpolator\n     * @param y state vector at step end time, must be reset if an event\n     * asks for resetting or if an events stops integration during the step\n     * @param yDot placeholder array where to put the time derivative of the state vector\n     * @param tEnd final integration time\n     * @return time at end of step\n     * @exception MaxCountExceededException if the interpolator throws one because\n     * the number of functions evaluations is exceeded\n     * @exception NoBracketingException if the location of an event cannot be bracketed\n     * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n     * @since 2.2\n     */\n    protected double acceptStep(final AbstractStepInterpolator interpolator,\n                                final double[] y, final double[] yDot, final double tEnd)\n        throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {\n\n            double previousT = interpolator.getGlobalPreviousTime();\n            final double currentT = interpolator.getGlobalCurrentTime();\n\n            // initialize the events states if needed\n            if (! statesInitialized) {\n                for (EventState state : eventsStates) {\n                    state.reinitializeBegin(interpolator);\n                }\n                statesInitialized = true;\n            }\n\n            // search for next events that may occur during the step\n            final int orderingSign = interpolator.isForward() ? +1 : -1;\n            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n\n                /** {@inheritDoc} */\n                public int compare(EventState es0, EventState es1) {\n                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                }\n\n            });\n\n            for (final EventState state : eventsStates) {\n                if (state.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(state);\n                }\n            }\n\n            while (!occuringEvents.isEmpty()) {\n\n                // handle the chronologically first event\n                final Iterator<EventState> iterator = occuringEvents.iterator();\n                final EventState currentEvent = iterator.next();\n                iterator.remove();\n\n                // restrict the interpolator to the first part of the step, up to the event\n                final double eventT = currentEvent.getEventTime();\n                interpolator.setSoftPreviousTime(previousT);\n                interpolator.setSoftCurrentTime(eventT);\n\n                // get state at event time\n                interpolator.setInterpolatedTime(eventT);\n                // Cloned is needed here to prevent subsequent changes from interfering\n                // with the event handler behavior. The event handler might very well\n                // compute linear combinations of states for finding exact event time,\n                // so its needs immutable states. Event handlers may also reset the\n                // state, but this is handled later.\n                final double[] eventY = interpolator.getInterpolatedState().clone();\n\n                // advance event state to event time\n                currentEvent.stepAccepted(eventT, eventY);\n                // check possible actions for the event\n                final boolean stopIntegration = currentEvent.stop();\n                final boolean resetState      = currentEvent.reset(eventT, eventY);\n\n                // handle the first part of the step, up to the event\n                for (final StepHandler handler : stepHandlers) {\n                    // isLastStep is true only if this event triggers a stop\n                    handler.handleStep(interpolator, stopIntegration);\n                }\n\n                if (stopIntegration) {\n                    // the event asked to stop integration\n                    System.arraycopy(eventY, 0, y, 0, y.length);\n                    // Ensure remaining events state are updated before returning\n                    for (final EventState remaining : occuringEvents) {\n                        remaining.stepAccepted(eventT, eventY);\n                    }\n                    this.isLastStep = true; // Set the global flag\n                    return eventT;\n                }\n\n                if (resetState) {\n                    // some event handler has triggered changes that\n                    // invalidate the derivatives, we need to recompute them\n                    System.arraycopy(eventY, 0, y, 0, y.length);\n                    computeDerivatives(eventT, y, yDot);\n                    resetOccurred = true;\n                    // Ensure remaining events state are updated before returning\n                    for (final EventState remaining : occuringEvents) {\n                        remaining.stepAccepted(eventT, eventY);\n                    }\n                    return eventT; // Return the event time to force the integrator to restart\n                }\n\n                // prepare handling of the remaining part of the step\n                previousT = eventT;\n                interpolator.setSoftPreviousTime(eventT);\n                interpolator.setSoftCurrentTime(currentT);\n\n                // check if the same event occurs again in the remaining part of the step\n                if (currentEvent.evaluateStep(interpolator)) {\n                    // the event occurs during the current step\n                    occuringEvents.add(currentEvent);\n                }\n\n            } // End of event handling loop\n\n\n            // Process the final part of the step, from previousT to currentT\n            interpolator.setInterpolatedTime(currentT);\n            // Clone the state to safely update event states\n            final double[] currentY = interpolator.getInterpolatedState().clone();\n\n            // Advance all event states to the end of the step\n            for (final EventState state : eventsStates) {\n                state.stepAccepted(currentT, currentY);\n                // ** BUG FIX: Do not update isLastStep based on state.stop() evaluated at currentT **\n                // isLastStep = isLastStep || state.stop(); // Removed/Commented out\n            }\n\n            // Check if the end of the integration has been reached\n            // Note: isLastStep is a member variable, it could be true if already stopped by an event\n            this.isLastStep = this.isLastStep || Precision.equals(currentT, tEnd, 1);\n\n            // handle the remaining part of the step, after all events if any\n            // Ensure the interpolator has the correct interval [previousT, currentT]\n            interpolator.setSoftPreviousTime(previousT);\n            interpolator.setSoftCurrentTime(currentT);\n            for (StepHandler handler : stepHandlers) {\n                // Pass the final isLastStep status. If an event stopped integration earlier,\n                // this code piece is not reached. If we are here, isLastStep is true\n                // only if currentT is close to tEnd.\n                handler.handleStep(interpolator, this.isLastStep);\n            }\n\n            return currentT; // Return the actual end time of the step\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}