{
    "generation": "/** Accept a step, triggering events and step handlers.\n * @param interpolator step interpolator\n * @param y state vector at step end time, must be reset if an event\n * asks for resetting or if an events stops integration during the step\n * @param yDot placeholder array where to put the time derivative of the state vector\n * @param tEnd final integration time\n * @return time at end of step\n * @exception MaxCountExceededException if the interpolator throws one because\n * the number of functions evaluations is exceeded\n * @exception NoBracketingException if the location of an event cannot be bracketed\n * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n * @since 2.2\n */\nprotected double acceptStep(final AbstractStepInterpolator interpolator,\n                            final double[] y, final double[] yDot, final double tEnd)\n    throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {\n\n    double previousT = interpolator.getGlobalPreviousTime();\n    final double currentT = interpolator.getGlobalCurrentTime();\n\n    // initialize the events states if needed\n    if (!statesInitialized) {\n        for (EventState state : eventsStates) {\n            state.reinitializeBegin(interpolator);\n        }\n        statesInitialized = true;\n    }\n\n    // make sure the interpolator covers the full step for initial checks\n    interpolator.setSoftPreviousTime(previousT);\n    interpolator.setSoftCurrentTime(currentT);\n\n    // search for next events that may occur during the step\n    final int orderingSign = interpolator.isForward() ? +1 : -1;\n    SortedSet<EventState> occuringEvents =\n        new TreeSet<EventState>(new Comparator<EventState>() {\n            public int compare(EventState es0, EventState es1) {\n                int c = orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                if (c == 0 && es0 != es1) {\n                    // tie\u2010breaker to avoid dropping distinct handlers\n                    return System.identityHashCode(es0) - System.identityHashCode(es1);\n                }\n                return c;\n            }\n        });\n    for (EventState state : eventsStates) {\n        if (state.evaluateStep(interpolator)) {\n            occuringEvents.add(state);\n        }\n    }\n\n    // process events in chronological order within this step\n    while (!occuringEvents.isEmpty()) {\n\n        // pick the earliest event\n        EventState currentEvent = occuringEvents.first();\n        occuringEvents.remove(currentEvent);\n        double eventT = currentEvent.getEventTime();\n\n        // restrict the interpolator to [previousT, eventT]\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(eventT);\n\n        // get the state at event time\n        interpolator.setInterpolatedTime(eventT);\n        final double[] eventY = interpolator.getInterpolatedState().clone();\n\n        // advance all event states to the event time\n        for (EventState state : eventsStates) {\n            state.stepAccepted(eventT, eventY);\n        }\n        isLastStep = currentEvent.stop();\n\n        // handle the part of the step up to the event\n        for (StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        if (isLastStep) {\n            // an event asked to stop integration\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            for (EventState state : eventsStates) {\n                // finalize other states\n                state.stepAccepted(eventT, eventY);\n            }\n            return eventT;\n        }\n\n        // check for a reset request\n        boolean needReset = currentEvent.reset(eventT, eventY);\n        if (needReset) {\n            // a handler has reset the state, we must recompute derivatives\n            System.arraycopy(eventY, 0, y, 0, y.length);\n            computeDerivatives(eventT, y, yDot);\n            resetOccurred = true;\n            for (EventState state : eventsStates) {\n                // bring all states up to date\n                state.stepAccepted(eventT, eventY);\n            }\n            return eventT;\n        }\n\n        // prepare to handle the remainder of the step\n        previousT = eventT;\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(currentT);\n\n        // find any further events in the remaining sub\u2010interval\n        occuringEvents.clear();\n        for (EventState state : eventsStates) {\n            if (state.evaluateStep(interpolator)) {\n                occuringEvents.add(state);\n            }\n        }\n\n    }\n\n    // no more events, finish the step\n    interpolator.setSoftPreviousTime(previousT);\n    interpolator.setSoftCurrentTime(currentT);\n    interpolator.setInterpolatedTime(currentT);\n    final double[] currentY = interpolator.getInterpolatedState();\n    for (EventState state : eventsStates) {\n        state.stepAccepted(currentT, currentY);\n        isLastStep = isLastStep || state.stop();\n    }\n    isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n    // handle the final part of the step\n    for (StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, isLastStep);\n    }\n\n    return currentT;\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}