{
    "generation": "protected double acceptStep(final AbstractStepInterpolator interpolator,\n                            final double[] y, final double[] yDot, final double tEnd)\n    throws MaxCountExceededException, DimensionMismatchException, NoBracketingException {\n\n        double previousT = interpolator.getGlobalPreviousTime();\n        final double currentT = interpolator.getGlobalCurrentTime();\n\n        // initialize the events states if needed\n        if (! statesInitialized) {\n            for (EventState state : eventsStates) {\n                state.reinitializeBegin(interpolator);\n            }\n            statesInitialized = true;\n        }\n\n        // search for next events that may occur during the step\n        final int orderingSign = interpolator.isForward() ? +1 : -1;\n        SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n\n            /** {@inheritDoc} */\n            public int compare(EventState es0, EventState es1) {\n                final int timeComparison = orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n                if (timeComparison != 0) {\n                    return timeComparison;\n                }\n                // In case of exact same event time, to prevent events of same date from collapsing,\n                // force distinct ordering to allow both events to be handled\n                // Use identity hash code as tie-breaker to provide deterministic ordering\n                return System.identityHashCode(es0) - System.identityHashCode(es1);\n            }\n\n        });\n\n        for (final EventState state : eventsStates) {\n            if (state.evaluateStep(interpolator)) {\n                // the event occurs during the current step\n                occuringEvents.add(state);\n            }\n        }\n\n        while (!occuringEvents.isEmpty()) {\n\n            // handle the chronologically first event\n            final Iterator<EventState> iterator = occuringEvents.iterator();\n            final EventState currentEvent = iterator.next();\n            iterator.remove();\n\n            // restrict the interpolator to the first part of the step, up to the event\n            final double eventT = currentEvent.getEventTime();\n            interpolator.setSoftPreviousTime(previousT);\n            interpolator.setSoftCurrentTime(eventT);\n\n            // get state at event time\n            interpolator.setInterpolatedTime(eventT);\n            final double[] eventY = interpolator.getInterpolatedState().clone();\n\n            // advance all event states to current time\n            for (EventState state : eventsStates) {\n                state.stepAccepted(eventT, eventY);\n            }\n            isLastStep = false;\n            for (EventState state : eventsStates) {\n                isLastStep = isLastStep || state.stop();\n            }\n\n            // handle the first part of the step, up to the event\n            for (final StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n\n            if (isLastStep) {\n                // the event asked to stop integration\n                System.arraycopy(eventY, 0, y, 0, y.length);\n                return eventT;\n            }\n\n            boolean needReset = false;\n            for (EventState state : eventsStates) {\n                if (state.reset(eventT, eventY)) {\n                    needReset = true;\n                }\n            }\n            if (needReset) {\n                // some event handler has triggered changes that\n                // invalidate the derivatives, we need to recompute them\n                System.arraycopy(eventY, 0, y, 0, y.length);\n                computeDerivatives(eventT, y, yDot);\n                resetOccurred = true;\n                return eventT;\n            }\n\n            // prepare handling of the remaining part of the step\n            previousT = eventT;\n            interpolator.setSoftPreviousTime(eventT);\n            interpolator.setSoftCurrentTime(currentT);\n\n            // check remaining events in next part of step\n            occuringEvents.clear();\n            for (final EventState state : eventsStates) {\n                if (state.evaluateStep(interpolator)) {\n                    occuringEvents.add(state);\n                }\n            }\n\n        }\n\n        // last part of the step, after the last event\n        interpolator.setInterpolatedTime(currentT);\n        final double[] currentY = interpolator.getInterpolatedState();\n        for (final EventState state : eventsStates) {\n            state.stepAccepted(currentT, currentY);\n        }\n        isLastStep = false;\n        for (final EventState state : eventsStates) {\n            isLastStep = isLastStep || state.stop();\n        }\n        isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);\n\n        // handle the remaining part of the step, after all events if any\n        for (StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        return currentT;\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}