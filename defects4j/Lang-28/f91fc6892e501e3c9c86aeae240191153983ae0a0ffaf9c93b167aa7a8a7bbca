{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            // The original code does not protect against missing semicolon, which can lead to StringIndexOutOfBoundsException.\n            // A more robust solution would add a check like: while(end < input.length() && input.charAt(end) != ';')\n            // However, the current fix only addresses the reported supplementary character issue.\n            while(input.charAt(end) != ';') {\n                end++;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                return 0;\n            }\n\n            // The original code `out.write(entityValue)` is problematic for supplementary characters.\n            // If entityValue is a Unicode code point greater than Character.MAX_VALUE (U+FFFF),\n            // it represents a supplementary character and requires two char values (a surrogate pair)\n            // in UTF-16 encoding. `Writer.write(int)` only writes the lower 16 bits of the int.\n            // To correctly handle supplementary characters, Character.toChars(int) should be used.\n            if (entityValue > Character.MAX_VALUE) { // Check if it's a supplementary code point\n                out.write(Character.toChars(entityValue)); // Write the surrogate pair\n            } else {\n                out.write(entityValue); // Write as a single character\n            }\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}