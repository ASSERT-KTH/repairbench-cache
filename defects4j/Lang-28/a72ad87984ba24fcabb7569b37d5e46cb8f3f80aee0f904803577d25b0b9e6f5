{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Protect from ArrayIndexOutOfBounds\n    if(index < 0 || index + 2 >= input.length()) {\n        return 0;\n    }\n    if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if(start >= input.length()) {\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            if(start >= input.length()) {\n                return 0;\n            }\n        }\n\n        int end = start;\n        while(end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if(end == input.length() || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String number = input.subSequence(start, end).toString();\n            if(number.isEmpty()) {\n                return 0;\n            }\n            entityValue = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch(NumberFormatException nfe) {\n            return 0;\n        }\n\n        if(Character.isValidCodePoint(entityValue)) {\n            if(entityValue > 0xFFFF) {\n                // write surrogate pair\n                char[] chars = Character.toChars(entityValue);\n                out.write(chars[0]);\n                out.write(chars[1]);\n            } else {\n                out.write(entityValue);\n            }\n        } else {\n            return 0;\n        }\n\n        return end - index + 1; // number of consumed characters\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}