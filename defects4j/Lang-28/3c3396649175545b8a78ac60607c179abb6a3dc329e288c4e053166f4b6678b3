{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int length = input.length();\n        if(index + 1 >= length || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n            return 0;\n        }\n\n        int start = index + 2;\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while(end < length && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // Check if we have reached the end without finding a ';'\n        if(end >= length) {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            if(isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch(NumberFormatException nfe) {\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] ch = Character.toChars(entityValue);\n            out.write(ch[0]);\n            out.write(ch[1]);\n        } else {\n            out.write((char)entityValue);\n        }\n        return end - index + 1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}