{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Protect from ArrayIndexOutOfBounds: Ensure there are at least two characters ('&' and '#') after the current index.\n        if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n            return 0;\n        }\n\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Protect from ArrayIndexOutOfBounds: Check if there's content after '&#'.\n        if (start >= input.length()) {\n            return 0; // Malformed entity, e.g., \"&#\" at end of string.\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            // After consuming 'x' or 'X', check if there's still content for the number.\n            if (start >= input.length()) {\n                return 0; // Malformed entity, e.g., \"&#x\" at end of string.\n            }\n        }\n\n        int end = start;\n        // Protect from ArrayIndexOutOfBounds: Search for the terminating ';' character.\n        // Stop if end reaches the end of the input string before finding ';'.\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // If ';' was not found, or if it was the very next character (empty numeric content like \"&#;\" or \"&#x;\"),\n        // or if end is out of bounds (meaning no ';'), return 0.\n        if (end == input.length() || input.charAt(end) != ';' || start == end) {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch (NumberFormatException nfe) {\n            return 0; // Malformed number (e.g., \"&#abc;\")\n        }\n\n        // Fix for supplementary characters:\n        // Writer.write(int c) only handles BMP characters (U+0000 to U+FFFF).\n        // Supplementary characters (U+10000 and above) require surrogate pairs,\n        // which must be written as two char values.\n        if (Character.isSupplementaryCodePoint(entityValue)) {\n            // Convert the code point to a char array (surrogate pair) and write it.\n            out.write(Character.toChars(entityValue));\n        } else {\n            // For BMP characters, write the integer directly as a char.\n            out.write(entityValue);\n        }\n\n        // Return the number of characters consumed by this translation:\n        // 2 (for \"&#\") + (end - start) (for the numeric part) + (1 if 'x' or 'X' was present) + 1 (for ';')\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}