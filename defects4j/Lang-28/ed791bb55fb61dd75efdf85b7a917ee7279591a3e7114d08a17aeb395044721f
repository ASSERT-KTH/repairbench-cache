{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Defensive bounds checks\n    final int len = input.length();\n    if (index < 0 || index + 2 > len) {\n        return 0;\n    }\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < len) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        }\n\n        int end = start;\n        // Find the semicolon\n        while (end < len && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end == len || input.charAt(end) != ';') {\n            // No terminating semicolon; not a valid entity\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String number = input.subSequence(start, end).toString();\n            if (number.isEmpty()) {\n                return 0;\n            }\n            if (isHex) {\n                entityValue = Integer.parseInt(number, 16);\n            } else {\n                entityValue = Integer.parseInt(number, 10);\n            }\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Write the correct number of chars for the codepoint\n        if (Character.isValidCodePoint(entityValue)) {\n            out.write(Character.toChars(entityValue));\n        } else {\n            return 0; // Not a valid Unicode codepoint\n        }\n        // total consumed: \"&\" + \"#\" + possible \"x\" + digits + \";\"\n        return end - index + 1;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}