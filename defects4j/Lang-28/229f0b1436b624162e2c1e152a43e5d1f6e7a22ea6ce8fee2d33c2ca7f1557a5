{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Check that there's at least one character after '&'\n    if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Check for the hex prefix\n        if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n            start++;\n            isHex = true;\n        }\n\n        // Find the terminating semicolon\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        // If no semicolon was found, we don't translate.\n        if (end >= input.length() || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String number = input.subSequence(start, end).toString();\n            entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Write the character(s) to the output.\n        // If the code point is a supplementary character then write its surrogate pair.\n        if (entityValue > Character.MAX_VALUE) {\n            out.write(Character.toChars(entityValue));\n        } else {\n            out.write(entityValue);\n        }\n        // Return the count of characters consumed in the input.\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}