{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Protect from ArrayIndexOutOfBounds\n    int inputLength = input.length();\n    if (index < 0 || index + 2 > inputLength) {\n        return 0;\n    }\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < inputLength) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        }\n\n        int end = start;\n        // Find the next ';', but don't go out of bounds\n        while (end < inputLength && input.charAt(end) != ';') {\n            end++;\n        }\n        // If we didn't find a ';', it's not a valid reference\n        if (end == inputLength || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String entityStr = input.subSequence(start, end).toString();\n            if (entityStr.length() == 0) {\n                return 0;\n            }\n            entityValue = Integer.parseInt(entityStr, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Write correct chars: use surrogates for supplementary characters\n        if (entityValue > 0xFFFF) {\n            char[] chars = Character.toChars(entityValue);\n            out.write(chars);\n        } else {\n            out.write(entityValue);\n        }\n\n        // total length: \"&#\" [2] + ('x'/not) [isHex ? 1 : 0] + digits [end-start] + semicolon [1]\n        return end - index + 1;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}