{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Protect from ArrayIndexOutOfBounds\n    if (index < 0 || index + 2 >= input.length()) {\n        return 0;\n    }\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= input.length()) {\n            return 0;\n        }\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        // Find the ending ';', guard bounds\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end == input.length() || input.charAt(end) != ';') {\n            // no ';' found\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String value = input.subSequence(start, end).toString();\n            if (value.isEmpty()) {\n                return 0;\n            }\n            entityValue = Integer.parseInt(value, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Output as one or two chars depending on Unicode codepoint\n        if (Character.isSupplementaryCodePoint(entityValue)) {\n            out.write(Character.toChars(entityValue));\n        } else {\n            out.write(entityValue);\n        }\n\n        // The number of consumed characters: \n        // \"&#\" = 2 \n        // optional \"x\" = (isHex ? 1 : 0)\n        // value = (end - start)\n        // ';' = 1\n        return end + 1 - index;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}