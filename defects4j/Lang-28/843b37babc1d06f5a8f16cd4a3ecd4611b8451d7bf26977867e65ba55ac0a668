{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        if (index + 1 >= input.length()) {\n            return 0;\n        }\n        char first = input.charAt(index);\n        char second = input.charAt(index + 1);\n        if (first != '&' || second != '#') {\n            return 0;\n        }\n\n        int start = index + 2;\n        if (start >= input.length()) {\n            return 0;\n        }\n\n        boolean isHex = false;\n        char third = input.charAt(start);\n        if (third == 'x' || third == 'X') {\n            start++;\n            isHex = true;\n            if (start >= input.length()) {\n                return 0;\n            }\n        }\n\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if (end >= input.length() || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        String number = input.subSequence(start, end).toString();\n        try {\n            int entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);\n            if (entityValue < 0 || entityValue > Character.MAX_CODE_POINT) {\n                return 0;\n            }\n            out.write(Character.toChars(entityValue));\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}