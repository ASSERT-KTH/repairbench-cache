{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Protect from ArrayIndexOutOfBounds and handle malformed entities.\n\n        // Check for sufficient length to have \"&#\" (at least index and index+1)\n        if (index + 1 >= input.length()) {\n            return 0; // Not enough characters for a potential entity start\n        }\n\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check if there's enough room for at least 'x' or the first digit\n            if (start >= input.length()) {\n                return 0; // Entity too short (e.g., \"&#\" at end of string)\n            }\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n                // After 'x' (or 'X'), need at least one digit for the entity value\n                if (start >= input.length()) {\n                    return 0; // Entity too short (e.g., \"&#x\" at end of string)\n                }\n            }\n\n            int end = start;\n            // Iterate until semicolon is found or end of input is reached.\n            // Protects from infinite loop and AIOOB.\n            while(end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // If semicolon not found (reached end of input) or no digits were found\n            // between &#[x] and ;, it's not a valid numeric entity.\n            if (end == input.length() || end == start) {\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                // Not a valid number (e.g., \"&#abc;\"), so not a numeric entity\n                return 0;\n            }\n\n            // Fix: Handle supplementary characters by converting to char array (surrogate pair)\n            // and writing the char array.\n            out.write(Character.toChars(entityValue));\n\n            // Return the number of characters consumed from the input string:\n            // \"&\" (1) + \"#\" (1) + numeric value (end - start) + \"x\" (isHex ? 1 : 0) + \";\" (1)\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}