{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Quick check for \"&#\"\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Check for hexadecimal marker\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            isHex = true;\n            start++;\n        }\n\n        // Find the terminating semicolon\n        int end = start;\n        while (input.charAt(end) != ';') {\n            end++;\n        }\n\n        // Parse the number\n        int entityValue;\n        try {\n            String number = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Write either a single BMP character or a supplementary pair\n        if (Character.isSupplementaryCodePoint(entityValue)) {\n            out.write(Character.toChars(entityValue));\n        } else {\n            out.write(entityValue);\n        }\n\n        // Return number of characters consumed in the input\n        return 2                 // \"&#\"\n             + (isHex ? 1 : 0)   // optional 'x' or 'X'\n             + (end - start)     // the digits\n             + 1;                // the trailing ';'\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}