{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Protect from ArrayIndexOutOfBounds\n    int len = input.length();\n    if(index < 0 || index + 2 > len) {\n        return 0;\n    }\n    if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= len) {\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            if (start >= len) {\n                return 0;\n            }\n        }\n\n        int end = start;\n        // Find next semicolon\n        while(end < len && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end == len || input.charAt(end) != ';') {\n            return 0; // no terminating semicolon\n        }\n\n        int entityValue;\n        try {\n            String entityString = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(entityString, isHex ? 16 : 10);\n        } catch(NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Output supplementary characters as surrogate pairs\n        if (entityValue > 0xFFFF) {\n            char[] chars = Character.toChars(entityValue);\n            out.write(chars);\n        } else {\n            out.write(entityValue);\n        }\n        // Calculate consumed length: \"&#\" [+ \"x\"] + digits + \";\"\n        int consumed = end - index + 1;\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}