{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Check for array bounds safety\n    if (index >= input.length() - 1 || input.charAt(index) != '&') {\n        return 0;\n    }\n    \n    if (input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        if (start >= input.length()) {\n            return 0;\n        }\n        \n        boolean isHex = false;\n        \n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            if (start >= input.length()) {\n                return 0;\n            }\n        }\n        \n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        \n        if (end == input.length() || end == start) {\n            return 0;\n        }\n        \n        int entityValue;\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n        \n        // Handle supplementary characters (code points outside the BMP)\n        if (entityValue > 0xFFFF) {\n            char[] chars = Character.toChars(entityValue);\n            out.write(chars, 0, chars.length);\n        } else {\n            out.write(entityValue);\n        }\n        \n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}