{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Protect from ArrayIndexOutOfBounds\n    if (index >= input.length() - 1) {\n        return 0;\n    }\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Check for the \"x\" or \"X\" that indicates hexadecimal\n        if (start < input.length()) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        } else {\n            return 0;\n        }\n\n        int end = start;\n        // Look for the ending semicolon; be careful not to run off the end\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end == input.length() || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String number = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // If the code point is in the supplementary range, write it as a surrogate pair.\n        if (Character.isSupplementaryCodePoint(entityValue)) {\n            out.write(Character.toChars(entityValue));\n        } else {\n            out.write(entityValue);\n        }\n        // Return the number of characters consumed in the input.\n        return end - index + 1;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}