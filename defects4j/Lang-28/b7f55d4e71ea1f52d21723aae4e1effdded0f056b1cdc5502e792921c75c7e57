{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Check bounds first\n    if(index < 0 || index >= input.length()) {\n        return 0;\n    }\n\n    if(input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Check bounds for firstChar\n        if(start >= input.length()) {\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        // Check bounds for end\n        if(start >= input.length()) {\n            return 0;\n        }\n\n        int end = start;\n        while(end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // If we didn't find a closing ';', return 0\n        if(end >= input.length()) {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            if(isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch(NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Write the character directly to handle supplementary characters\n        out.write(Character.toChars(entityValue));\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}