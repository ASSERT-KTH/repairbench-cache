{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Check sufficient length for \"&#\"\n        if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            // Check if sequence terminates after \"&#\"\n            if (start == seqEnd) {\n                return 0;\n            }\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n                // Check if sequence terminates after \"&#x\"\n                if (start == seqEnd) {\n                    return 0;\n                }\n            }\n\n            int end = start;\n            // Find the semicolon, checking bounds\n            while (end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // Check if semicolon was found before the end of the sequence\n            if (end == seqEnd) {\n                return 0; // No terminating semicolon found\n            }\n\n            int entityValue;\n            try {\n                CharSequence entityChars = input.subSequence(start, end);\n                // Check if there are any digits\n                if (entityChars.length() == 0) {\n                    return 0; // e.g., \"&#;\" or \"&#x;\"\n                }\n                if (isHex) {\n                    entityValue = Integer.parseInt(entityChars.toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(entityChars.toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                // Treat as untranslatable if parsing fails\n                return 0;\n            }\n\n            try {\n                // Convert the numeric value to char(s) and write.\n                // Character.toChars handles supplementary characters correctly.\n                // It throws IllegalArgumentException for invalid code points.\n                out.write(Character.toChars(entityValue));\n            } catch (IllegalArgumentException e) {\n                // Invalid Unicode code point, treat as untranslatable\n                return 0;\n            }\n\n            // Return the number of characters consumed (length of the entity)\n            // Example: \"&#123;\" -> end=5, index=0. Consumed: 5 - 0 + 1 = 6. Correct.\n            // Example: \"&#x10FFFF;\" -> end=9, index=0. Consumed: 9 - 0 + 1 = 10. Correct.\n            return end - index + 1;\n        }\n        // Not a numeric entity starting at this index\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}