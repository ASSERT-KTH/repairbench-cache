{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Check bounds first\n    if (index + 1 >= input.length()) {\n        return 0;\n    }\n\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= input.length()) {\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if (end >= input.length() || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        try {\n            String entityStr = input.subSequence(start, end).toString();\n            int entityValue;\n            if (isHex) {\n                entityValue = Integer.parseInt(entityStr, 16);\n            } else {\n                entityValue = Integer.parseInt(entityStr, 10);\n            }\n\n            // Handle supplementary characters (outside BMP)\n            if (entityValue > 0xFFFF) {\n                char[] surrogates = Character.toChars(entityValue);\n                out.write(surrogates[0]);\n                out.write(surrogates[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            return end - index + 1;\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}