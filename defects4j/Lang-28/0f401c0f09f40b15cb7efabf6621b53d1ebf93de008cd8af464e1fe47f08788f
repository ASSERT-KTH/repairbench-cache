{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    if (input == null) {\n        return 0;\n    }\n    int length = input.length();\n    if (index < 0 || index >= length) {\n        return 0;\n    }\n    if (input.charAt(index) != '&') {\n        return 0;\n    }\n    if (index + 1 >= length) {\n        return 0;\n    }\n    if (input.charAt(index + 1) != '#') {\n        return 0;\n    }\n\n    int start = index + 2;\n    boolean isHex = false;\n\n    if (start < length) {\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n    } else {\n        return 0;\n    }\n\n    int end = start;\n    while (end < length && input.charAt(end) != ';') {\n        end++;\n    }\n    if (end >= length || input.charAt(end) != ';') {\n        return 0;\n    }\n\n    try {\n        int entityValue;\n        if (isHex) {\n            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n        } else {\n            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n        }\n\n        // Check for valid Unicode code point\n        if (entityValue < 0 || entityValue > Character.MAX_CODE_POINT) {\n            return 0;\n        }\n\n        char[] chars = Character.toChars(entityValue);\n        for (char c : chars) {\n            out.write(c);\n        }\n\n        int processedLength = 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        return processedLength;\n    } catch (NumberFormatException nfe) {\n        return 0;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}