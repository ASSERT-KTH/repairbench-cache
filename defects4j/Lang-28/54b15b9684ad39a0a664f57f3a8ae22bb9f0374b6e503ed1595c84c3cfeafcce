{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // quickly bail if it can't be a numeric entity\n    if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        // check for hex marker\n        if (start < input.length()) {\n            char fc = input.charAt(start);\n            if (fc == 'x' || fc == 'X') {\n                isHex = true;\n                start++;\n            }\n        }\n\n        // find the ';'\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end == input.length()) {\n            // no closing ';' found\n            return 0;\n        }\n\n        // parse the number\n        int codePoint;\n        try {\n            String num = input.subSequence(start, end).toString();\n            codePoint = Integer.parseInt(num, isHex ? 16 : 10);\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n\n        // write either a BMP char or a surrogate\u2010pair for supplementary\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            char[] chars = Character.toChars(codePoint);\n            out.write(chars);\n        } else {\n            out.write(codePoint);\n        }\n\n        // number of characters consumed: from '&' to ';' inclusive\n        return end - index + 1;\n    }\n\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}