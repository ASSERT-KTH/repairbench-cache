{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Protect from ArrayIndexOutOfBounds\n        // Check if there are enough characters for \"&#\" sequence\n        if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n            return 0;\n        }\n\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Check if there are enough characters for at least a digit or 'x'/'X' after \"&#\"\n        if (start >= input.length()) {\n            return 0; // Not enough characters for a valid entity\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            // After 'x' or 'X', there must be at least one digit\n            if (start >= input.length()) {\n                return 0; // Not enough characters after \"&#x\" or \"&#X\"\n            }\n        }\n\n        int end = start;\n        // Find the ending semicolon, ensuring we don't go out of bounds\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // If the semicolon was not found (reached end of input), it's not a valid entity\n        if (end == input.length()) {\n            return 0;\n        }\n\n        // Ensure there's at least one digit between start and end (e.g., prevents \"&#;\" or \"&#x;\")\n        if (start == end) {\n            return 0; // Empty numeric entity\n        }\n\n        int entityValue;\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch(NumberFormatException nfe) {\n            // Not a valid number (e.g., \"&#abc;\")\n            return 0;\n        }\n\n        // Fix for supplementary characters:\n        // Writer.write(int) only writes the lower 16 bits. For supplementary characters (code points > 0xFFFF),\n        // we need to use Character.toChars to get the surrogate pair and write that.\n        try {\n            out.write(Character.toChars(entityValue));\n        } catch (IllegalArgumentException iae) {\n            // The parsed entityValue is not a valid Unicode code point (e.g., negative or too large)\n            return 0;\n        }\n\n        // Calculate the number of characters consumed:\n        // 2 (for \"&#\") + (end - start) (for the numeric value) + (isHex ? 1 : 0) (for 'x'/'X' if present) + 1 (for ';')\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}