{
    "generation": "    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        if (index + 1 >= input.length()) {\n            return 0;\n        }\n        if (input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n            return 0;\n        }\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < input.length()) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        } else {\n            // Not enough characters for numeric entity\n            return 0;\n        }\n\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end == input.length()) {\n            // No semicolon found; return 0 as per original behavior\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        char[] chars = Character.toChars(entityValue);\n        for (char c : chars) {\n            out.write(c);\n        }\n\n        return end - index + 1; // Including ';' and the starting '&'\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}