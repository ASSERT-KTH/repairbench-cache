{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        try {\n            if(input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {\n                int start = index + 2;\n                boolean isHex = false;\n\n                if(start >= input.length()) {\n                    return 0;\n                }\n\n                char firstChar = input.charAt(start);\n                if(firstChar == 'x' || firstChar == 'X') {\n                    start++;\n                    isHex = true;\n                }\n\n                int end = start;\n                while(end < input.length() && input.charAt(end) != ';') {\n                    end++;\n                }\n\n                if(end >= input.length() || input.charAt(end) != ';') {\n                    return 0;\n                }\n\n                int entityValue;\n                try {\n                    String numStr = input.subSequence(start, end).toString();\n                    if(isHex) {\n                        entityValue = Integer.parseInt(numStr, 16);\n                    } else {\n                        entityValue = Integer.parseInt(numStr, 10);\n                    }\n\n                    // Handle characters outside BMP\n                    if (entityValue > 0xFFFF) {\n                        // Write as surrogate pair\n                        char[] surrogates = Character.toChars(entityValue);\n                        out.write(surrogates);\n                    } else {\n                        out.write(entityValue);\n                    }\n                } catch(NumberFormatException nfe) {\n                    return 0;\n                }\n\n                return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n            }\n        } catch(IndexOutOfBoundsException e) {\n            return 0;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}