{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        if (index < 0 || index >= input.length()) {\n            return 0;\n        }\n        char firstChar = input.charAt(index);\n        if (firstChar != '&' || index + 1 >= input.length()) {\n            return 0;\n        }\n        char secondChar = input.charAt(index + 1);\n        if (secondChar != '#') {\n            return 0;\n        }\n        int start = index + 2;\n        if (start >= input.length()) {\n            return 0;\n        }\n        boolean isHex = false;\n        char thirdChar = input.charAt(start);\n        if (thirdChar == 'x' || thirdChar == 'X') {\n            start++;\n            isHex = true;\n            if (start >= input.length()) {\n                return 0;\n            }\n        }\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end >= input.length() || input.charAt(end) != ';') {\n            return 0;\n        }\n        String numberStr = input.subSequence(start, end).toString();\n        try {\n            int entityValue = isHex ? Integer.parseInt(numberStr, 16) : Integer.parseInt(numberStr, 10);\n            if (entityValue < 0 || entityValue > Character.MAX_CODE_POINT) {\n                return 0;\n            }\n            out.write(Character.toChars(entityValue));\n            return end - index + 1;\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}