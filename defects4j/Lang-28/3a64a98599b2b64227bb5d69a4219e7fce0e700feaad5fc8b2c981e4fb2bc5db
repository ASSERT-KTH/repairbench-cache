{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // TODO: Protect from ArrayIndexOutOfBounds\n    if(input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < input.length()) {\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        }\n\n        int end = start;\n        // Avoid out of bounds, find the ';'\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end == input.length() || input.charAt(end) != ';') {\n            // No closing ';'\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String entity = input.subSequence(start, end).toString();\n            if(entity.isEmpty()) {\n                return 0;\n            }\n            if(isHex) {\n                entityValue = Integer.parseInt(entity, 16);\n            } else {\n                entityValue = Integer.parseInt(entity, 10);\n            }\n        } catch(NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Write the codepoint correctly as UTF-16\n        if (Character.isBmpCodePoint(entityValue)) {\n            out.write(entityValue);\n        } else {\n            // Supplementary character, write surrogate pair\n            char[] chars = Character.toChars(entityValue);\n            out.write(chars);\n        }\n        return end - index + 1;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}