{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        // This check handles potential ArrayIndexOutOfBounds for input.charAt(index + 1)\n        if (index >= input.length() - 1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n            return 0;\n        }\n\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Check if there are enough characters for 'x' or 'X'\n        if (start < input.length()) {\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        } else {\n            return 0; // Not enough characters for entity start\n        }\n\n\n        int end = start;\n        // Protect from ArrayIndexOutOfBounds and ensure ';' is found\n        while(end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // If semicolon is not found, it's not a valid entity\n        if (end == input.length() || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            if(isHex) {\n                // Ensure there are characters to parse after 'x'/'X'\n                if (start == end) {\n                    return 0; // No digits after 'x'\n                }\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                // Ensure there are characters to parse\n                if (start == end) {\n                    return 0; // No digits\n                }\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch(NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Fix for supplementary characters:\n        // Writer.write(int) only writes the lower 16 bits, which truncates\n        // supplementary characters (code points > 0xFFFF).\n        // Character.toChars correctly converts a code point to a char array\n        // (a surrogate pair for supplementary characters, or a single char for BMP characters).\n        final char[] chars = Character.toChars(entityValue);\n        out.write(chars);\n\n        // Calculate characters consumed: \"&#\" (2) + digits/hex-digits (end - start) + \"x\" if present (isHex ? 1 : 0) + \";\" (1)\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}