{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // must have at least \"&#\"\n    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    int len = input.length();\n    int start = index + 2;\n    boolean isHex = false;\n    // optional hex marker\n    if (start < len) {\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            isHex = true;\n            start++;\n        }\n    } else {\n        return 0;\n    }\n    // find ';'\n    if (start >= len) {\n        return 0;\n    }\n    int end = start;\n    while (end < len && input.charAt(end) != ';') {\n        end++;\n    }\n    if (end == len) {\n        return 0;\n    }\n    // parse the number\n    int entityValue;\n    try {\n        String seq = input.subSequence(start, end).toString();\n        entityValue = Integer.parseInt(seq, isHex ? 16 : 10);\n    } catch (NumberFormatException e) {\n        return 0;\n    }\n    // write out either a single char or a surrogate pair\n    if (entityValue <= Character.MAX_VALUE) {\n        out.write(entityValue);\n    } else if (entityValue <= Character.MAX_CODE_POINT) {\n        char[] chars = Character.toChars(entityValue);\n        out.write(chars, 0, chars.length);\n    } else {\n        // invalid code point\n        return 0;\n    }\n    // return number of characters consumed (\"&\" \"#\" [ \"x\" ] digits \";\" )\n    return end + 1 - index;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}