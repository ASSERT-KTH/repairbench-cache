{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // basic bounds check and look for \"&#\"\n    if (index < 0 || index + 2 >= input.length() ||\n        input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    int start = index + 2;\n    boolean isHex = false;\n    // check for hex marker\n    if (start < input.length()) {\n        char first = input.charAt(start);\n        if (first == 'x' || first == 'X') {\n            isHex = true;\n            start++;\n            if (start >= input.length()) {\n                return 0;\n            }\n        }\n    }\n    // find the terminating semicolon\n    int end = start;\n    while (end < input.length() && input.charAt(end) != ';') {\n        end++;\n    }\n    if (end == input.length()) {\n        return 0; // no semicolon \u2192 not a valid entity\n    }\n    // parse the number\n    String num = input.subSequence(start, end).toString();\n    int value;\n    try {\n        value = Integer.parseInt(num, isHex ? 16 : 10);\n    } catch (NumberFormatException ex) {\n        return 0;\n    }\n    // ensure it's a valid Unicode code point\n    if (value < 0 || value > Character.MAX_CODE_POINT) {\n        return 0;\n    }\n    // write either a single char or a surrogate pair\n    if (value > Character.MAX_VALUE) {\n        char[] surrogates = Character.toChars(value);\n        out.write(surrogates);\n    } else {\n        out.write(value);\n    }\n    // return the number of characters consumed, from '&' through ';'\n    return end - index + 1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}