{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Check for the start of a numeric entity\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end >= input.length()) {\n            return 0; // No terminating ';', invalid entity\n        }\n\n        String entityStr = input.subSequence(start, end).toString();\n        int entityValue;\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(entityStr, 16);\n            } else {\n                entityValue = Integer.parseInt(entityStr, 10);\n            }\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Check if the entity value is a valid Unicode code point\n        if (entityValue < 0 || entityValue > 0x10FFFF) {\n            return 0;\n        }\n\n        // Write the Unicode character(s) to the Writer\n        if (entityValue > 0xFFFF) {\n            // Supplementary character, split into surrogate pair\n            char[] surrogatePair = Character.toChars(entityValue);\n            out.write(surrogatePair);\n        } else {\n            out.write(entityValue);\n        }\n\n        // Calculate the consumed length\n        int consumed = 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}