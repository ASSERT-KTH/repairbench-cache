{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    if (input.charAt(index) == '&' && input.length() > index + 2 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < input.length()) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        }\n\n        int end = start;\n        // Protect against index out of bounds\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        // If no semicolon, return 0 (not a valid numeric entity)\n        if (end == input.length() || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String number = input.subSequence(start, end).toString();\n            if (number.isEmpty()) {\n                return 0;\n            }\n            entityValue = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Write code point properly, including supplementary characters\n        if (entityValue > 0xFFFF) {\n            char[] chars = Character.toChars(entityValue);\n            out.write(chars);\n        } else {\n            out.write(entityValue);\n        }\n\n        return end - index + 1; // total characters consumed, including '&' and ';'\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}