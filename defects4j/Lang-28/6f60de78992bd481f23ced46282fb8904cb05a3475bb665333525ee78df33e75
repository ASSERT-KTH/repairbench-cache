{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Protect from ArrayIndexOutOfBounds and handle malformed entities\n        // Minimum length for &#; is 3 characters (e.g., \"&#0;\")\n        // or &#x; is 4 characters (e.g., \"&#x0;\")\n        // We need to safely access input.charAt(index), input.charAt(index + 1), and input.charAt(index + 2)\n        // to check for 'x' or the start of the number.\n        if (index + 2 >= input.length()) {\n            return 0; // Not enough characters for even a minimal numeric entity like \"&#;\"\n        }\n\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check if there's an 'x' or 'X' prefix for hex entities\n            // The check input.charAt(start) is safe due to the initial index + 2 check\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++; // Move 'start' past 'x'\n                isHex = true;\n                if (start >= input.length()) { // Malformed: \"&#x\" at end of input\n                    return 0;\n                }\n            }\n\n            int end = start;\n            // Find the trailing semicolon, protecting against ArrayIndexOutOfBounds\n            // if semicolon is missing or string ends prematurely.\n            while(end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // If semicolon was not found by reaching end of input, or no digits were found\n            if (end == input.length() || start == end) {\n                return 0; // Malformed entity (e.g., \"&#123\" or \"&#;\" or \"&#x;\")\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                return 0; // Not a valid numeric entity\n            }\n\n            // Fix for supplementary characters:\n            // Convert the integer code point to char(s) and write them.\n            // Character.toChars handles both BMP and supplementary characters correctly.\n            char[] chars = Character.toChars(entityValue);\n            out.write(chars);\n\n            // Calculate number of characters consumed from input\n            // 2 (for \"&#\") + (end - start) (for the numeric part) + (1 if 'x' was present) + 1 (for ';')\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0; // No entity found at this index\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}