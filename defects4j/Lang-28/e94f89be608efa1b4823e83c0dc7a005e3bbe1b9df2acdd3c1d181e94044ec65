{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Check if we're at an entity\n        if (index + 1 >= input.length()) {\n            // Not enough characters for & followed by something\n            return 0;\n        }\n        if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            while (end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            if (end == input.length()) {\n                // No closing ';' found\n                return 0;\n            }\n\n            int\tentityValue;\n            try {\n                if (isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch (NumberFormatException e) {\n                return 0;\n            }\n\n            if (!Character.isValidCodePoint(entityValue)) {\n                return 0;\n            }\n\n            // Convert the code point to chars and write them\n            char[] chars = Character.toChars(entityValue);\n            if (chars.length > 0) {\n                out.write(chars, 0, chars.length);\n            }\n\n            // Return the number of characters processed in the input\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}