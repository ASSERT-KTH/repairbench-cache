{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Check we have at least 2 characters to work with.\n    if (index >= input.length() - 1) {\n        return 0;\n    }\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        if (start >= input.length()) {\n            return 0;\n        }\n        boolean isHex = false;\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n        if (start >= input.length()) {\n            return 0;\n        }\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        // If no semicolon is found, do not translate.\n        if (end == input.length()) {\n            return 0;\n        }\n        int entityValue;\n        try {\n            String number = input.subSequence(start, end).toString();\n            entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n        // For code points > 0xFFFF, Character.toChars() returns a surrogate pair.\n        out.write(Character.toChars(entityValue));\n        // Return the number of characters consumed:\n        // from '&' at index to ';' at end, inclusive.\n        return end - index + 1;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}