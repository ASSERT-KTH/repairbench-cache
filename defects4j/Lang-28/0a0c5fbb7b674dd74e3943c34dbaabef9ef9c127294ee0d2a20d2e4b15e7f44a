{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Protect from ArrayIndexOutOfBounds\n        // Check if there are enough characters for \"&#\" sequence\n        if (index + 1 >= input.length()) {\n            return 0;\n        }\n\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2; // Position after \"&#\"\n\n            // Check if there are characters after \"&#\"\n            if (start >= input.length()) {\n                return 0; // Malformed entity, e.g., \"&#\" at end of string\n            }\n\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++; // Move past 'x'\n                // Check if there are characters after \"&#x\"\n                if (start >= input.length()) {\n                    return 0; // Malformed entity, e.g., \"&#x\" at end of string\n                }\n                isHex = true;\n            }\n\n            int end = start;\n            // Find the closing semicolon, ensuring we don't read past the end of the input\n            while(end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // If the loop terminated because we reached the end of the input without finding a semicolon,\n            // then it's a malformed entity.\n            if (end == input.length()) {\n                return 0; // No closing semicolon found\n            }\n\n            // Check if the numeric part is empty (e.g., \"&#;\" or \"&#x;\")\n            if (start == end) {\n                return 0; // Empty entity value\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                // If the content between &#...; is not a valid number, it's not a numeric entity.\n                return 0;\n            }\n\n            // Fix for supplementary characters:\n            // Writer.write(int) often casts the int to a char, truncating code points > 0xFFFF.\n            // Character.toChars handles supplementary characters by returning a surrogate pair.\n            char[] chars = Character.toChars(entityValue);\n            out.write(chars);\n\n            // Calculate the number of characters consumed from the input\n            // 2 for \"&#\"\n            // (end - start) for the length of the numeric part\n            // (isHex ? 1 : 0) for the 'x' if present\n            // 1 for the closing ';'\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0; // Not a numeric entity starting with \"&#\"\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}