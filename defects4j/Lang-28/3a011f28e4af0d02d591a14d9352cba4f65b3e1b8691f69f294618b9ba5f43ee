{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Protect from ArrayIndexOutOfBounds and check bounds properly\n        int length = input.length();\n        if (index + 1 >= length) {\n            return 0;\n        }\n\n        if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            if (start >= length) {\n                return 0;\n            }\n\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            // Find the semicolon\n            int end = start;\n            while (end < length && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // If no semicolon found or invalid length\n            if (end >= length || end <= start) {\n                return 0;\n            }\n\n            try {\n                String entityStr = input.subSequence(start, end).toString();\n                int entityValue;\n                if (isHex) {\n                    entityValue = Integer.parseInt(entityStr, 16);\n                } else {\n                    entityValue = Integer.parseInt(entityStr, 10);\n                }\n\n                // Handle supplementary characters (outside BMP)\n                if (entityValue > 0xFFFF) {\n                    int[] codePoints = Character.toCodePoints(entityValue);\n                    for (int codePoint : codePoints) {\n                        out.write(codePoint);\n                    }\n                } else {\n                    out.write(entityValue);\n                }\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}