{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Defensive checks for array bounds\n    int inputLength = input.length();\n    if (index < 0 || index + 2 > inputLength) {\n        return 0;\n    }\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < inputLength) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        }\n\n        int end = start;\n\n        // Find the semicolon or end of the input\n        while (end < inputLength && input.charAt(end) != ';') {\n            end++;\n        }\n        // If semicolon not found, return 0, invalid entity\n        if (end == inputLength || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String entity = input.subSequence(start, end).toString();\n            if (entity.isEmpty()) {\n                return 0;\n            }\n            entityValue = Integer.parseInt(entity, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Correct handling for supplementary (outside BMP) code points\n        if (Character.isValidCodePoint(entityValue)) {\n            out.write(Character.toChars(entityValue));\n        } else {\n            return 0;\n        }\n        // Total length: '&#' + optional 'x' + digits + ';'\n        int consumed = end - index + 1;\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}