{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Protect from ArrayIndexOutOfBounds\n    int inputLen = input.length();\n    if (index < 0 || index + 2 > inputLen) {\n        return 0;\n    }\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= inputLen) {\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        // Find ';' end\n        int end = start;\n        while (end < inputLen && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end == inputLen || input.charAt(end) != ';') {\n            // No semicolon found\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String number = input.subSequence(start, end).toString();\n            if (number.isEmpty()) {\n                return 0;\n            }\n            entityValue = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Write char(s) for the code point\n        if (Character.isBmpCodePoint(entityValue)) {\n            out.write(entityValue);\n        } else if (Character.isValidCodePoint(entityValue)) {\n            // write surrogate pair\n            out.write(Character.toChars(entityValue));\n        } else {\n            return 0;\n        }\n\n        return (end - index) + 1;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}