{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Check if there's enough characters to potentially form an entity\n    if (index < input.length() - 3 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n        \n        // Make sure we're not out of bounds\n        if (start < input.length()) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n            \n            int end = start;\n            // Find the closing semicolon, being careful of bounds\n            while (end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n            \n            // Check if we found a valid ending\n            if (end < input.length() && input.charAt(end) == ';') {\n                int entityValue;\n                try {\n                    if (isHex) {\n                        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                    } else {\n                        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                    }\n                    \n                    // Properly write the character based on its code point\n                    if (Character.isSupplementaryCodePoint(entityValue)) {\n                        // Write as surrogate pair for supplementary characters\n                        out.write(Character.toChars(entityValue));\n                    } else {\n                        // Write as single char for BMP characters\n                        out.write(entityValue);\n                    }\n                    \n                    return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n                } catch (NumberFormatException nfe) {\n                    return 0;\n                }\n            }\n        }\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}