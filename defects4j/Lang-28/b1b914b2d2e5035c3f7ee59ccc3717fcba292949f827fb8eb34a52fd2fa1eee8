{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Check if we have enough characters for a numeric entity\n    if (index + 2 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    \n    int start = index + 2;\n    boolean isHex = false;\n    \n    if (start < input.length()) {\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            \n            // Check if we're now at the end of the input\n            if (start >= input.length()) {\n                return 0;\n            }\n        }\n    }\n    \n    int end = start;\n    while (end < input.length() && input.charAt(end) != ';') {\n        end++;\n    }\n    \n    // Check if we reached the end without finding a semicolon\n    if (end >= input.length()) {\n        return 0;\n    }\n    \n    int entityValue;\n    try {\n        if (isHex) {\n            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n        } else {\n            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n        }\n    } catch (NumberFormatException nfe) {\n        return 0;\n    }\n    \n    if (entityValue > 0xFFFF) {\n        // Handle supplementary characters\n        char[] chars = Character.toChars(entityValue);\n        out.write(chars[0]);\n        out.write(chars[1]);\n    } else {\n        out.write(entityValue);\n    }\n    \n    return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}