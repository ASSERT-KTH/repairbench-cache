{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Protect against index out-of-bounds.\n    if (index < 0 || index >= input.length() - 1) {\n        return 0;\n    }\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n        if (end == input.length()) {\n            // No closing semicolon; not a valid entity.\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String entity = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(entity, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Handle supplementary code points by converting to a surrogate pair.\n        if (Character.isSupplementaryCodePoint(entityValue)) {\n            out.write(Character.toChars(entityValue));\n        } else {\n            out.write(entityValue);\n        }\n\n        // Return the number of characters consumed.\n        return end - index + 1;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}