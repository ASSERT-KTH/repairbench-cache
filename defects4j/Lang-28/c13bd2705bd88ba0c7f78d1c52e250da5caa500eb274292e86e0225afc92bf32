{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Check if the current index is valid to prevent ArrayIndexOutOfBoundsException\n        if (index >= input.length() - 1) {\n            return 0;\n        }\n        if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            if (start >= input.length()) {\n                return 0;\n            }\n\n            int end = start;\n            while (end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            if (end >= input.length()) {\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                String entityString = input.subSequence(start, end).toString();\n                if (isHex) {\n                    entityValue = Integer.parseInt(entityString, 16);\n                } else {\n                    entityValue = Integer.parseInt(entityString, 10);\n                }\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n\n            // Handle characters above BMP by splitting into surrogate pairs if necessary\n            char[] chars = Character.toChars(entityValue);\n            out.write(chars);\n            return end - index + 1;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}