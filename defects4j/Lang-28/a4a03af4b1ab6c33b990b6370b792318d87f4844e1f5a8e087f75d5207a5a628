{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Check if potentially start of entity: '&#'\n        if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check if Description has enough characters for potential 'x' and number\n            if (start >= input.length()) {\n                return 0; // Not enough characters after '&#', not a valid entity start\n            }\n\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n                // Check if enough characters after '&#x'\n                if (start >= input.length()) {\n                    return 0; // Not enough characters after '&#x', not a valid entity start\n                }\n            }\n\n            int end = start;\n            // Find the terminating ';' within bounds\n            while (end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // Check if ';' was found before the end of the input\n            if (end == input.length() || input.charAt(end) != ';') {\n                return 0; // Malformed entity: No trailing ';' found\n            }\n\n            // Check if there are digits between start and end\n            if (start == end) {\n                 return 0; // Malformed entity: No digits found e.g. \"&#;\" or \"&#x;\"\n            }\n\n            int entityValue;\n            try {\n                CharSequence sub = input.subSequence(start, end);\n                if (isHex) {\n                    entityValue = Integer.parseInt(sub.toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(sub.toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                // Treat as malformed if parsing fails\n                return 0;\n            }\n\n            // Handle writing the character, including supplementary characters (> 0xFFFF)\n            if (entityValue > Character.MAX_VALUE) { // Check if supplementary character\n                // Convert to surrogate pair and write\n                out.write(Character.toChars(entityValue));\n            } else {\n                // Write as single char (BMP character)\n                out.write(entityValue);\n            }\n\n            // Return the number of characters consumed (length of the numeric entity)\n            // The entity is from index to end inclusive.\n            return end - index + 1;\n        }\n        // Not a numeric entity starting at this index\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}