{
    "generation": "import java.io.IOException;\nimport java.io.Writer;\n\n/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int seqEnd = input.length();\n    // Check for \"&#\" prefix\n    if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Check if characters exist after \"&#\"\n        if (start >= seqEnd) {\n            return 0; // Malformed entity\n        }\n\n        final char firstChar = input.charAt(start);\n        // Check for optional \"x\" or \"X\" for hexidecimal entities\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            // Check if characters exist after \"&#x\"\n            if (start >= seqEnd) {\n                return 0; // Malformed entity\n            }\n        }\n\n        int end = start;\n        // Find the terminating semicolon, respecting sequence bounds\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // Check if semicolon was found and if there were digits\n        if (end == seqEnd || end == start) {\n            return 0; // Malformed entity (no digits or no semicolon)\n        }\n\n        final int entityValue;\n        try {\n            // Parse the numeric value\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch (final NumberFormatException nfe) {\n            return 0; // Malformed entity (invalid number)\n        }\n\n        // Check if the value represents a supplementary character\n        if (entityValue > 0xFFFF) {\n            // Convert to surrogate pair\n            final char[] chars = Character.toChars(entityValue);\n            out.write(chars[0]); // Write high surrogate\n            out.write(chars[1]); // Write low surrogate\n        } else {\n            // Write Basic Multilingual Plane (BMP) character\n            out.write(entityValue);\n        }\n\n        // Return the number of characters consumed (length of the entity sequence)\n        // Example: \"&#123;\" -> end=6, index=0. Consumed = (6 + 1) - 0 = 7.\n        // Example: \"&#x10C22;\" -> end=8, index=0. Consumed = (8 + 1) - 0 = 9.\n        return (end + 1) - index;\n    }\n    // Not a numeric entity starting at this index\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}