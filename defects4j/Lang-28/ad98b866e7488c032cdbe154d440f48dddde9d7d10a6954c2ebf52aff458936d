{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        // Original comment is addressed by adding checks for input length.\n\n        // Need at least 2 characters for \"&#\"\n        if (index >= input.length() - 1) {\n            return 0;\n        }\n\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check if there are characters after \"&#\"\n            if (start >= input.length()) {\n                return 0; // Input like \"&#\"\n            }\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n                // Check if there are characters after \"&#x\"\n                if (start >= input.length()) {\n                    return 0; // Input like \"&#x\"\n                }\n            }\n\n            int end = start;\n            // Protect against infinite loop if ';' is not found and ArrayIndexOutOfBounds\n            while(end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // If ';' was not found, or the numeric part is empty, it's not a valid numeric entity\n            if (end == input.length() || end == start) {\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                return 0; // Malformed number inside entity\n            }\n\n            // Fix for supplementary characters (U+10000 and above).\n            // Writer.write(int) only writes the lower 16 bits, which truncates supplementary characters.\n            // Character.toChars handles code points > 0xFFFF by returning a surrogate pair (two chars).\n            char[] chars = Character.toChars(entityValue);\n            out.write(chars);\n\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1; // Characters consumed from input\n        }\n        return 0; // Not a numeric entity\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}