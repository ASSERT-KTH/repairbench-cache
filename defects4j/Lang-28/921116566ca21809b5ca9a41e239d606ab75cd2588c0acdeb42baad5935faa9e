{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        if (index + 2 >= input.length()) {\n            return 0;\n        }\n        if (input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n            return 0;\n        }\n\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < input.length()) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        }\n\n        if (start >= input.length()) {\n            return 0;\n        }\n\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if (end >= input.length() || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        String number = input.subSequence(start, end).toString();\n        int entityValue;\n        try {\n            entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        if (!Character.isValidCodePoint(entityValue)) {\n            return 0;\n        }\n\n        char[] chars = Character.toChars(entityValue);\n        out.write(chars);\n\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}