{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Ensure we have at least two characters to check for \"&#\"\n    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    \n    int start = index + 2;\n    if (start >= input.length()) {\n        return 0;\n    }\n    \n    boolean isHex = false;\n    char firstChar = input.charAt(start);\n    if (firstChar == 'x' || firstChar == 'X') {\n        isHex = true;\n        start++;\n    }\n    if (start >= input.length()) {\n        return 0;\n    }\n    \n    int end = start;\n    // Search for the terminating semicolon while staying in bounds.\n    while (end < input.length() && input.charAt(end) != ';') {\n        end++;\n    }\n    if (end >= input.length() || input.charAt(end) != ';') {\n        return 0;\n    }\n    \n    int entityValue;\n    try {\n        String number = input.subSequence(start, end).toString();\n        entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);\n    } catch (NumberFormatException nfe) {\n        return 0;\n    }\n    \n    // When the entity represents a supplementary character, write the surrogate pair.\n    if (entityValue > 0xFFFF) {\n        out.write(Character.toChars(entityValue));\n    } else {\n        out.write(entityValue);\n    }\n    \n    // Return number of characters consumed: from the '&' to the ';'\n    return end - index + 1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}