{
    "generation": "    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            while (end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            int entityValue;\n            try {\n                String numStr = input.subSequence(start, end).toString();\n                if (isHex) {\n                    entityValue = Integer.parseInt(numStr, 16);\n                } else {\n                    entityValue = Integer.parseInt(numStr, 10);\n                }\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n\n            String entityStr;\n            if (entityValue >= 0x10000) {\n                int offset = entityValue - 0x10000;\n                char high = (char) (0xD800 + (offset >> 10));\n                char low = (char) (0xDC00 + (offset & 0x3FF));\n                entityStr = new StringBuilder().append(high).append(low).toString();\n            } else {\n                entityStr = Character.toString((char) entityValue);\n            }\n            out.write(entityStr);\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}