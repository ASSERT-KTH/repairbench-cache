{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    // TODO: Protect from ArrayIndexOutOfBounds\n    int inputLength = input.length();\n    if(index >= inputLength) {\n        return 0;\n    }\n    if(input.charAt(index) == '&' && index + 1 < inputLength && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start < inputLength) {\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        }\n\n        int end = start;\n        while (end < inputLength && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if (end == inputLength || input.charAt(end) != ';') {\n            // No terminating semicolon\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String value = input.subSequence(start, end).toString();\n            if (value.isEmpty()) { // Avoid NumberFormatException\n                return 0;\n            }\n            entityValue = Integer.parseInt(value, isHex ? 16 : 10);\n        } catch(NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Write codepoint correctly\n        if (Character.isBmpCodePoint(entityValue)) {\n            out.write(entityValue);\n        } else {\n            // Write surrogate pair\n            out.write(Character.toChars(entityValue));\n        }\n\n        return end - index + 1;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}