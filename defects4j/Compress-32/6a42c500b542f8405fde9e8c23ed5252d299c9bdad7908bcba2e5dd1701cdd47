{
    "generation": "    private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {\n        /*\n         * The following headers are defined for Pax.\n         * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields\n         * mtime\n         * comment\n         * gid, gname\n         * linkpath\n         * size\n         * uid,uname\n         * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those\n         * Note: PAX headers override corresponding TAR header values.\n         */\n        for (Entry<String, String> ent : headers.entrySet()){\n            String key = ent.getKey();\n            String val = ent.getValue();\n            if (\"path\".equals(key)){\n                currEntry.setName(val);\n            } else if (\"linkpath\".equals(key)){\n                currEntry.setLinkName(val);\n            } else if (\"gid\".equals(key)){\n                // Use Long.parseLong for potentially large group IDs (pax header can hold larger values than octal field)\n                currEntry.setGroupId(Long.parseLong(val));\n            } else if (\"gname\".equals(key)){\n                currEntry.setGroupName(val);\n            } else if (\"uid\".equals(key)){\n                // Use Long.parseLong for potentially large user IDs (pax header can hold larger values than octal field)\n                currEntry.setUserId(Long.parseLong(val));\n            } else if (\"uname\".equals(key)){\n                currEntry.setUserName(val);\n            } else if (\"size\".equals(key)){\n                // Use Long.parseLong for potentially large file sizes (pax header can hold larger values than octal field)\n                currEntry.setSize(Long.parseLong(val));\n            } else if (\"mtime\".equals(key)){\n                // PAX mtime is specified as a decimal number of seconds since the epoch.\n                // Multiply by 1000 to convert to milliseconds.\n                currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n            } else if (\"SCHILY.devminor\".equals(key)){\n                // Although the comment says no setters/getters, they seem to exist.\n                // Device numbers are typically ints.\n                currEntry.setDevMinor(Integer.parseInt(val));\n            } else if (\"SCHILY.devmajor\".equals(key)){\n                // Although the comment says no setters/getters, they seem to exist.\n                // Device numbers are typically ints.\n                currEntry.setDevMajor(Integer.parseInt(val));\n            }\n            // Ignoring other less common or unsupported headers like atime, ctime, charset, comment for now.\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}