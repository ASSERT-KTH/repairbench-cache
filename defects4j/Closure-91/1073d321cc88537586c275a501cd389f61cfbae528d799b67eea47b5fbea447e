{
    "generation": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null) {\n        if (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.isOverride()) {\n          return false;\n        }\n        if (jsDoc.hasThisType()) {\n          // Only traverse if the @this is not global\n          if (!jsDoc.getThisType().equals.GlobalThis audiThisAnnotationIsGlobal) {\n            return false;\n          }\n        }\n        if (jsDoc.hasAnnotation(DiagnosticSidebar.$lends)) {\n          return false;\n        }\n      }\n\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        if (NodeUtil.isGet(lhs)) {\n          Node current = lhs;\n          while (current != null && current.getType() == Token.GETPROP) {\n            if (current.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            current = current.getFirstChild();\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}