{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this/@override annotations.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them.\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN ||\n          // object literal keys\n          pType == Token.STRING ||\n          pType == Token.NUMBER)) {\n      return false;\n    }\n\n    // FIX: Don't traverse functions that are defined in an object literal\n    // with a @lends annotation (e.g. for prototype methods).\n    // In an object literal, the function value's parent is typically a STRING/NUMBER node\n    // (the property key), whose parent is the OBJECTLIT carrying the @lends annotation.\n    if ((pType == Token.STRING || pType == Token.NUMBER) && parent.getParent() != null) {\n      Node objLit = parent.getParent();\n      if (objLit.getType() == Token.OBJECTLIT) {\n        JSDocInfo objJsDoc = objLit.getJSDocInfo();\n        if (objJsDoc != null && objJsDoc.getLendsName() != null) {\n          return false;\n        }\n      }\n    }\n\n    // (Other lends cases, such as functions assigned via prototype assignments, are\n    // handled below in the parent ASSIGN check.)\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly, assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n      if (NodeUtil.isGet(lhs)) {\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}