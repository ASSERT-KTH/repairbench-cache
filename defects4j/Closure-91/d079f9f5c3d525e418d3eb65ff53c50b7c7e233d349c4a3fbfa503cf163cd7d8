{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else if (n == rhs) {\n        // Check if we're assigning to a prototype property\n        if (NodeUtil.isGet(lhs)) {\n          // Handle function assignments where the LHS might involve prototype\n          if (lhs.getType() == Token.GETPROP) {\n            Node lastChild = lhs.getLastChild();\n            if (lastChild != null && lastChild.getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n          // Check for nested GETPROP (like a.b.prototype)\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP) {\n            Node lastChild = llhs.getLastChild();\n            if (lastChild != null && lastChild.getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n        }\n      }\n    }\n\n    // Check if the parent is a GETPROP where the property is \"prototype\"\n    if (parent != null && parent.getType() == Token.GETPROP) {\n      Node property = parent.getLastChild();\n      if (property != null && property.getString().equals(\"prototype\")) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}