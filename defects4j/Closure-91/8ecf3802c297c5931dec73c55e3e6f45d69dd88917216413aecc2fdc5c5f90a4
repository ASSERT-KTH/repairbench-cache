{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  @Override // Assuming this overrides a method from NodeTraversal.Callback\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    // Member variable assumed to exist in the enclosing class CheckGlobalThis.\n    // It needs proper initialization/reset logic elsewhere (e.g., in visit).\n    // Node assignLhsChild; // Example declaration\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      // Use NodeUtil helper to get JSDoc, handles associations like VAR declarations.\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // ADDED: Don't traverse functions that are values in an object literal that\n      // has an @lends annotation. 'this' is bound correctly in such functions.\n      // Example: /** @lends {SomeType.prototype} */ ({ func: function() { this... } })\n      if (parent != null && NodeUtil.isObjectLitKey(parent)) {\n        // OBJECTLIT <-- objectLit\n        //   STRING_KEY 'func' <-- parent\n        //     FUNCTION <-- n\n        Node objectLit = parent.getParent();\n        // Ensure grandparent is an OBJECTLIT node.\n        if (objectLit != null && objectLit.isObjectLit()) {\n           JSDocInfo objLitJsDoc = objectLit.getJSDocInfo();\n           if (objLitJsDoc != null && objLitJsDoc.getLendsName() != null) {\n             // Function is inside an object literal with @lends, so skip traversal.\n             return false;\n           }\n        }\n      }\n\n      // Original heuristic: Don't traverse functions unless they are defined\n      // in a context where 'this' might be global.\n      // Corrected to use NodeUtil.isObjectLitKey instead of plain STRING/NUMBER.\n      if (parent != null) {\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||    // var f = function() { ... }\n              pType == Token.ASSIGN || // x.y = function() { ... }\n              NodeUtil.isObjectLitKey(parent))) { // { key: function() { ... }}\n          return false;\n        }\n      } else if (n.getType() != Token.SCRIPT) {\n         // Only SCRIPT nodes should have null parent during traversal.\n         return false;\n      }\n\n      // Comment from original: \"Don't traverse functions that are getting lent to a prototype.\"\n      // This is now handled by the @lends check above and the assignment check below.\n    }\n\n    // Original assignment check logic:\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        // Assumes 'assignLhsChild' is a member variable managed externally by CheckGlobalThis.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n        // Continue traversal into LHS.\n      } else { // n == rhs\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) { // Check if LHS involves property access\n          // Check for Foo.prototype = rhs\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false; // Don't traverse RHS if assigned directly to prototype\n          }\n          // Check for Foo.prototype.bar = rhs\n          Node llhs = lhs.getFirstChild(); // Get the object being accessed (e.g., Foo.prototype)\n          // Check llhs is valid, is a GETPROP, and ends in \"prototype\"\n          // Check hasChildren() for safety before calling getLastChild()\n          if (llhs != null && llhs.getType() == Token.GETPROP &&\n              llhs.hasChildren() && // Ensure it has children before accessing last\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false; // Don't traverse RHS if assigned to prototype member\n          }\n        }\n        // Otherwise, traverse the RHS.\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}