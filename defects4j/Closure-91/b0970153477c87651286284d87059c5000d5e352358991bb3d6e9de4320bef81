{
    "generation": "  /**\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   */\n  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    // Check 1: Don't traverse functions or object literals assigned to prototypes.\n    // Example: Foo.prototype.bar = function() { ... };\n    // Example: Foo.prototype = { bar: function() { ... } };\n    if (parent != null && parent.isAssign()) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      // Check if 'n' is the RHS (function or object literal) being assigned to a prototype property.\n      if (n == rhs && NodeUtil.isPrototypeProperty(lhs)) {\n        return false;\n      }\n      // No special handling needed for LHS (n == lhs), traversal should continue normally.\n      // The original code had logic related to 'assignLhsChild', which seems unnecessary\n      // for this check's purpose (preventing traversal into RHS of prototype assignments)\n      // and is not a field of CheckGlobalThis.\n    }\n\n    // Check 2: Don't traverse functions that are known methods or constructors.\n    if (n.isFunction()) {\n      // Check JSDoc on the function itself (@constructor, @interface, @this, @override)\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n); // Use helper to handle JSDoc potentially on parent\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Check if the function is inside an object literal with @lends annotation.\n      // Example: dojo.declare(F, /** @lends {F.prototype} */ ({ foo: function() { ... } }));\n      // Structure: OBJECTLIT -> KEY -> FUNCTION (n)\n      // NodeUtil.isObjectLitKey(node) checks if 'node' is STRING_KEY, GETTER_DEF, etc.\n      if (parent != null && NodeUtil.isObjectLitKey(parent)) {\n        Node objectLit = parent.getParent();\n        // Check the expected structure OBJECTLIT -> KEY (parent) -> FUNCTION (n)\n        if (objectLit != null && objectLit.isObjectLit() && parent.getFirstChild() == n) {\n          JSDocInfo objLitJsDoc = objectLit.getJSDocInfo();\n          // If the object literal has @lends, assume 'this' is safe inside its methods.\n          if (objLitJsDoc != null && objLitJsDoc.getLendsName() != null) {\n            return false;\n          }\n        }\n      }\n\n      // The original code had a check based on parent node types (BLOCK, SCRIPT, NAME, ASSIGN, STRING, NUMBER)\n      // This check was likely too broad and potentially incorrect (e.g., excluding functions passed as callbacks).\n      // The specific checks above for JSDoc, prototype assignments, and @lends are more reliable ways\n      // to identify functions where 'this' is not global. We remove the old parent type check.\n    }\n\n    // If none of the specific non-traversal conditions are met, traverse the node.\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}