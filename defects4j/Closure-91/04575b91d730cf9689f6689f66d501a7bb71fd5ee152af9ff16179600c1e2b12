{
    "generation": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {}; // or\n    // var a = {x: function() {}};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN ||\n\n          // object literal keys\n          pType == Token.STRING ||\n          pType == Token.NUMBER)) {\n      return false;\n    }\n\n    // Don't traverse functions that are getting lent to a prototype.\n    // If the parent is an object literal and has a @lends annotation in the rhs of an assign,\n    // we should not traverse the function in this case.\n    Node gramps = parent.getParent();\n    if (parent.getType() == Token.OBJECTLIT && gramps != null && gramps.getType() == Token.CALL) {\n      // Handle:\n      // dojo.declare(F, /** @lends {F.prototype} */ ({foo: function(){ return this.foo; }}));\n      Node callParent = gramps;\n      JSDocInfo callJsDoc = callParent.getJSDocInfo();\n      if (callJsDoc == null && callParent.getType() == Token.CALL) {\n        // Check JSDoc for arguments\n        for (Node arg = callParent.getFirstChild(); arg != null; arg = arg.getNext()) {\n          JSDocInfo argJsDoc = arg.getJSDocInfo();\n          if (argJsDoc != null && argJsDoc.getLendsName() != null) {\n            return false;\n          }\n        }\n      }\n      if (callJsDoc != null && callJsDoc.getLendsName() != null) {\n        return false;\n      }\n      // Check for @lends on the object literal itself\n      JSDocInfo objLitJsDoc = parent.getJSDocInfo();\n      if (objLitJsDoc != null && objLitJsDoc.getLendsName() != null) {\n        return false;\n      }\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (NodeUtil.isGet(lhs)) {\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}