{
    "generation": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Only traverse functions that are in a context where a @this annotation is allowed.\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN ||\n          // keys in object literals often have type STRING or NUMBER.\n          pType == Token.STRING ||\n          pType == Token.NUMBER)) {\n      return false;\n    }\n    \n    // Don't traverse functions that are getting lent to a prototype.\n    // In many cases a @lends annotation is attached to an object literal.\n    // The function might be the value of a property whose parent is a STRING (or NUMBER)\n    // node, whose parent in turn is an object literal carrying a @lends annotation.\n    // In either case, we want to skip traversing the function.\n    if (parent.getType() == Token.OBJECTLIT) {\n      JSDocInfo parentJsDoc = parent.getJSDocInfo();\n      if (parentJsDoc != null && parentJsDoc.getLends() != null) {\n        return false;\n      }\n    } else if (parent.getParent() != null && parent.getParent().getType() == Token.OBJECTLIT) {\n      JSDocInfo objLitJsDoc = parent.getParent().getJSDocInfo();\n      if (objLitJsDoc != null && objLitJsDoc.getLends() != null) {\n        return false;\n      }\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment.\n      // To handle nested assignments properly (e.g., (a = this).property = c),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (NodeUtil.isGet(lhs)) {\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}