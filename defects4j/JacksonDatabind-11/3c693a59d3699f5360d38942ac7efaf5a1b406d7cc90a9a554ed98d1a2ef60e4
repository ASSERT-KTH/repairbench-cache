{
    "generation": "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n{\n    final String name = type.getName();\n    // 19-Mar-2015: Without context, all we can check are bounds.\n    if (context == null) {\n        // And to prevent infinite loops, now need this:\n        return _unknownType();\n    } else {\n        // Ok: here's where context might come in handy!\n        /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n         *   unresolved type variables to handle some cases where bounds\n         *   are enough. Let's hope it does not hide real fail cases.\n         */\n        JavaType actualType = context.findType(name);\n        if (actualType != null) {\n            return actualType;\n        }\n    }\n\n    Type[] bounds = type.getBounds();\n\n    // 2021: Watch out for recursive variable bounds (e.g. <T extends T>)\n    // and \"Object\" bound that merely means \"no information\"\n    if (bounds.length == 1 && bounds[0] instanceof Class) {\n        Class<?> boundClass = (Class<?>) bounds[0];\n        if (boundClass == Object.class) {\n            // No bounds, type is essentially Object\n            return _unknownType();\n        }\n    }\n    \n    context._addPlaceholder(name);\n\n    // Defensive: avoid infinite recursion with self-referential bound\n    Type firstBound = bounds[0];\n    if (firstBound == type) {\n        return _unknownType();\n    }\n\n    return _constructType(firstBound, context);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}