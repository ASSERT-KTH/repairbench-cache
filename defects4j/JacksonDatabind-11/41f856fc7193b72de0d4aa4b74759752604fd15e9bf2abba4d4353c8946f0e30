{
    "generation": "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context) {\n    final String name = type.getName();\n    if (context == null) {\n        return _unknownType();\n    }\n    // If the type variable already has a binding, return it:\n    JavaType actualType = context.findType(name);\n    if (actualType != null) {\n        return actualType;\n    }\n    // Add a placeholder to detect (and eventually resolve) any recursive reference\n    context._addPlaceholder(name);\n    // Get the bounds; by default there is at least the Object bound\n    Type[] bounds = type.getBounds();\n    // Construct a JavaType from the first bound\n    JavaType boundType = _constructType(bounds[0], context);\n    // Now that we have a concrete type, update the placeholder mapping so that\n    // further lookups of this type variable will return the resolved type.\n    context.resolvePlaceholder(name, boundType);\n    return boundType;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}