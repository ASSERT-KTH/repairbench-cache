{
    "generation": "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n{\n    final String name = type.getName();\n    // 19-Mar-2015: Without context, all we can check are bounds.\n    if (context == null) {\n        // And to prevent infinite loops, now need this:\n        return _unknownType();\n    } else {\n        // Ok: here's where context might come in handy!\n        /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n         *   unresolved type variables to handle some cases where bounds\n         *   are enough. Let's hope it does not hide real fail cases.\n         */\n        JavaType actualType = context.findType(name);\n        if (actualType != null) {\n            return actualType;\n        }\n        // 2020-03-19: As per [databind#609] and [databind#728], if variable is unresolved in context, just resolve via bounds (do NOT throw exception!)\n    }\n\n    Type[] bounds = type.getBounds();\n\n    // Prevent possible infinite recursion for recursive bounds:\n    context._addPlaceholder(name);\n    // In case there are no bounds (should not happen; at least Object is always there)\n    if (bounds == null || bounds.length == 0) {\n        return _unknownType();\n    }\n    return _constructType(bounds[0], context);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}