{
    "generation": "protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n{\n    final String name = type.getName();\n    // 19-Mar-2015: Without context, all we can check are bounds.\n    if (context == null) {\n        return _unknownType();\n    }\n    JavaType actualType = context.findType(name);\n    if (actualType != null) {\n        return actualType;\n    }\n    \n    /* 29-Jan-2010, tatu: We used to throw exception here, if type was\n     *   bound: but the problem is that this can occur for generic \"base\"\n     *   method, overridden by sub-class. If so, we will want to ignore\n     *   current type (for method) since it will be masked.\n     */\n\n    // ------------- fix: do NOT throw in unbound case; treat as Object -------------\n    Type[] bounds = type.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        return _unknownType();\n    }\n    \n    // To prevent infinite loops, add as placeholder BEFORE resolving\n    context._addPlaceholder(name);\n    return _constructType(bounds[0], context);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}