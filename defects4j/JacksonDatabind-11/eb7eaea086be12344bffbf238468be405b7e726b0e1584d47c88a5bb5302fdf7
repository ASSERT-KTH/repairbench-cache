{
    "generation": "    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n    {\n        final String name = type.getName();\n        // 16-Mar-2017, tatu: Context seems to be null quite commonly; need to\n        //    figure out if that is ever expected. It might be if called when\n        //    resolving enclosing class definition itself.\n        // 08-Sep-2019, tatu: As per [databind#2430], seems like we must assume\n        //    Object if no context found.\n        if (context == null) {\n             // Failsafe, assume Object\n             return _unknownType();\n        }\n\n        // Ok: here's where context might come in handy!\n        // [databind#609]: Unresolved ones may be acceptable, use bounds\n        // [databind#1198], [databind#193]: Handle recursive types properly\n        // 08-Sep-2019, tatu: [databind#2430] needs slightly different handling, check `_resolveVariableViaSubTypes()`\n        JavaType actualType = context.findType(name, true); // note: must allow check for definition context\n        if (actualType != null) {\n            // [databind#2324]: Need to be able to override with explicit unknown\n             if (actualType.isUnknownType()) {\n                 return _unknownType();\n             }\n             return actualType;\n        }\n\n        // Bounds may be enough; or, with self-references, might need to add placeholder:\n        Type[] bounds = type.getBounds();\n        if (bounds == null || bounds.length == 0) { // against annotation declaration (NEVER null for actual java.lang.reflect.TypeVariable)\n             return _unknownType();\n        }\n\n        /* Note: bounds are not referring to context, need to resolve in context of\n         * variable declaration, THEN possibly bind in caller context.\n         * But for now, let's see if using caller context is sufficient...\n         */\n\n        // ZOMG: must use a placeholder to avoid infinite loops...\n        final TypeBindings bindings = context; // TBD: context or empty/new?\n        \n        // 08-Sep-2019, tatu: As per [databind#2430] Need to use different mechanism for\n        //   placeholder/self-ref, for robustness.\n        ResolvedRecursiveType selfRef = new ResolvedRecursiveType(bindings.resolveSelfReferencedClass(name), bindings);\n        bindings._addPlaceholder(name, selfRef);\n\n        // finally, resolve bounds and link type:\n        JavaType boundType = _constructType(bounds[0], bindings);\n\n        selfRef.setReference(boundType);\n        return selfRef;\n   }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}