{
    "generation": "    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n    {\n        final String name = type.getName();\n        // 19-Mar-2015: Without context, all we can check are bounds.\n        if (context == null) {\n            // Should not really happen often; best probably is Unknown\n            return _unknownType();\n            // TBD: Maybe should allow 'via lookup'? But for now, let's play it safe\n            // return _findVariableViaLookup(name);\n        }\n\n        // Ok: here's where context might come in handy!\n        // But importantly: MUST handle recursive definitions, like <T extends Comparable<T>>\n        // Need to therefore check if we are already resolving this type:\n        // 13-Oct-2015, tatu: Important: must check for placeholders to avoid infinite loops.\n        //    Related to [databind#923]. Let's assume `findType` does this check.\n        JavaType actualType = context.findType(name);\n        if (actualType != null) {\n            // If 'actualType' is the placeholder marker (_unknownType), we are recursing, fine\n            return actualType;\n        }\n\n        /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n         *   unresolved type variables to handle some cases where bounds\n         *   are enough. Let's hope it does not hide real fail cases.\n         *   Also, as per [databind#923], using bounds seems necessary.\n         */\n        // If type variable is not bound, can not determine exact type; maybe return Object?\n        // (although ideally bounds would be used)\n        // For now, let's default to Unknown which is safest bet\n\n        /* 29-Jan-2010, tatu: We used to throw exception here, if type was\n         *   bound: but the problem is that this can occur for generic \"base\"\n         *   method, overridden by sub-class. If so, we will want to ignore\n         *   current type (for method) since it will be masked.\n         */\n        // 13-Oct-2015, tatu: Actually, as per [databind#923], let's start using bounds.\n        Type[] bounds = type.getBounds();\n\n        // With type variables we must use bound information.\n        // Theoretically this gets tricky, as there may be multiple\n        // bounds (\"... extends A & B\"); and optimally we might\n        // want to choose the best match. Also, bounds are optional;\n        // but here we are lucky in that implicit \"Object\" is\n        // added as bounds if so. JLS guarantees bounds array is never empty.\n        // Either way let's just use the first bound, for now, and\n        // worry about better match later on if there is need.\n\n        /* 29-Jan-2010 / 13-Oct-2015, tatu: One more problem are recursive types\n         *   (T extends Comparable<T>). Need to add \"placeholder\"\n         *   for resolution to catch those. Must add AFTER checking for\n         *   existing binding/placeholder, but BEFORE resolving bounds.\n         */\n        // Add placeholder *before* resolving bound, to handle recursive definitions.\n        context._addPlaceholder(name);\n        // Use the first bound.\n        return _constructType(bounds[0], context);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}