{
    "generation": "    protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)\n    {\n        final String name = type.getName();\n        JavaType actualType = null;\n\n        // 19-Mar-2015: First, try to resolve from the provided context (if any)\n        if (context != null) {\n            actualType = context.findType(name);\n            if (actualType != null) {\n                return actualType;\n            }\n            // Ok: here's where context might come in handy!\n            /* 19-Mar-2015, tatu: As per [databind#609], may need to allow\n             *   unresolved type variables to handle some cases where bounds\n             *   are enough. Let's hope it does not hide real fail cases.\n             */\n            // 29-Jan-2010, tatu: One more problem are recursive types\n            //   (T extends Comparable<T>). Need to add \"placeholder\"\n            //   for resolution to catch those.\n            context._addPlaceholder(name);\n        }\n\n        // If actualType was not found in context (or context was null),\n        // try to resolve using bounds.\n        // With type variables we must use bound information.\n        // Theoretically this gets tricky, as there may be multiple\n        // bounds (\"... extends A & B\"); and optimally we might\n        // want to choose the best match. Also, bounds are optional;\n        // but here we are lucky in that implicit \"Object\" is\n        // added as bounds if so.\n        // Either way let's just use the first bound, for now, and\n        // worry about better match later on if there is need.\n        Type[] bounds = type.getBounds();\n\n        // TypeVariable.getBounds() should always return at least one bound (e.g., Object.class),\n        // so bounds.length should typically be >= 1.\n        if (bounds.length == 0) {\n            return _unknownType();\n        }\n        \n        // Pass the same context down. If context was null, it remains null.\n        // _constructType() is expected to handle null context for non-generic types\n        // or resolve further TypeVariables using their bounds (which might call _fromVariable again).\n        return _constructType(bounds[0], context);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}