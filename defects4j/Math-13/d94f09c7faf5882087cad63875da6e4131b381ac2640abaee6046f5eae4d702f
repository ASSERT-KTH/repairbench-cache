{
    "generation": "import org.apache.commons.math3.linear.DiagonalMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.util.FastMath;\n\n    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        // In the context of AbstractCurveFitter (and its WeightedLeastSquaresProblem),\n        // the 'm' parameter, representing the weight matrix, is a BlockRealMatrix\n        // that is guaranteed to be diagonal (only diagonal entries are non-zero).\n        // For a very large number of observations, computing EigenDecomposition on\n        // such a large matrix, or even constructing a full BlockRealMatrix copy,\n        // leads to an OutOfMemoryError.\n        //\n        // The square root of a diagonal matrix is simply a diagonal matrix where\n        // each diagonal element is the square root of the original diagonal element.\n        // We can create a memory-efficient DiagonalMatrix for the result.\n        final int dim = m.getRowDimension();\n        final double[] sqrtDiag = new double[dim];\n        for (int i = 0; i < dim; ++i) {\n            // m.getEntry(i, i) is efficient for retrieving diagonal elements\n            // from both DiagonalMatrix and BlockRealMatrix.\n            sqrtDiag[i] = FastMath.sqrt(m.getEntry(i, i));\n        }\n        return new DiagonalMatrix(sqrtDiag);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}