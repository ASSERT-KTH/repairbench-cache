{
    "generation": "    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        // The weight matrix can be a DiagonalMatrix when constructed from observed points.\n        // For large numbers of observed points, a DiagonalMatrix can be very large\n        // (e.g., 40000x40000 in testLargeSample), but its underlying data is sparse.\n        // EigenDecomposition is very memory intensive and inefficient for large diagonal matrices,\n        // often causing OutOfMemoryError for dimensions like 40000x40000.\n        // The square root of a diagonal matrix is simply a diagonal matrix with the square roots of its diagonal elements.\n        if (m instanceof DiagonalMatrix) {\n            final DiagonalMatrix dm = (DiagonalMatrix) m;\n            final double[] diagonal = dm.getData(); // Get the underlying diagonal array\n            final double[] sqrtDiagonal = new double[diagonal.length];\n            for (int i = 0; i < diagonal.length; i++) {\n                // Weights are expected to be non-negative.\n                sqrtDiagonal[i] = FastMath.sqrt(diagonal[i]);\n            }\n            return new DiagonalMatrix(sqrtDiagonal);\n        } else {\n            // Fallback to EigenDecomposition for general (non-diagonal) matrices.\n            // This is still appropriate for smaller or non-diagonal matrices where its overhead is acceptable.\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}