{
    "generation": "import org.apache.commons.math3.linear.DiagonalMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.util.FastMath;\n\n    /**\n     * Computes the square-root of the weight matrix.\n     * Optimized for diagonal matrices to avoid memory issues with large dimensions.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        if (m instanceof DiagonalMatrix) {\n            // Optimize for the common case of diagonal weight matrices.\n            final int dim = m.getRowDimension();\n            // Create a new DiagonalMatrix to store the square root.\n            // DiagonalMatrix constructor with dimension initializes with zeros.\n            final DiagonalMatrix sqrtM = new DiagonalMatrix(dim);\n            for (int i = 0; i < dim; ++i) {\n                // Compute the square root of each diagonal element.\n                // Assumes diagonal elements are non-negative (m is positive-definite).\n                sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n            }\n            return sqrtM;\n        } else {\n            // For non-diagonal matrices, use the general EigenDecomposition method.\n            // This might be memory-intensive for large matrices but is correct.\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}