{
    "generation": "    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        if (m.getRowDimension() != m.getColumnDimension()) {\n            throw new NonSquareMatrixException(m.getRowDimension(), m.getColumnDimension());\n        }\n        if (m.getRowDimension() == 0) {\n            return m.copy();\n        }\n\n        // This is a special case for a diagonal matrix.\n        if (isDiagonal(m)) {\n            final int dim = m.getRowDimension();\n            final double[][] data = new double[dim][dim];\n            for (int i = 0; i < dim; i++) {\n                data[i][i] = FastMath.sqrt(m.getEntry(i, i));\n            }\n            return MatrixUtils.createRealMatrix(data);\n        }\n\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n\n    /**\n     * Checks whether a matrix is diagonal.\n     *\n     * @param m Matrix.\n     * @return {@code true} if {@code m} is diagonal, {@code false} otherwise.\n     */\n    private boolean isDiagonal(RealMatrix m) {\n        final int rowDim = m.getRowDimension();\n        final int colDim = m.getColumnDimension();\n        for (int i = 0; i < rowDim; i++) {\n            for (int j = 0; j < colDim; j++) {\n                if (i != j && m.getEntry(i, j) != 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}