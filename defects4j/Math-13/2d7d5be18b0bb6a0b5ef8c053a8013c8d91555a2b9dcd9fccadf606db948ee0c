{
    "generation": "import org.apache.commons.math3.linear.BlockRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.util.FastMath;\n\n    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        // In the context of LevenbergMarquardtOptimizer with independent observations,\n        // the weight matrix 'm' is typically a diagonal matrix.\n        // For a large number of observations (e.g., 40000 in testLargeSample),\n        // performing a full EigenDecomposition on such a large (even if diagonal)\n        // dense matrix is highly inefficient and leads to an OutOfMemoryError.\n        // We optimize for this common case by directly computing the square root\n        // for a diagonal matrix.\n\n        final int dim = m.getRowDimension();\n        // Create a new diagonal matrix for the square root.\n        // BlockRealMatrix is a common dense matrix implementation in Commons Math.\n        final RealMatrix result = new BlockRealMatrix(dim, dim); \n        \n        for (int i = 0; i < dim; ++i) {\n            // For a diagonal matrix D, its square root D^(1/2) is a diagonal matrix\n            // with elements sqrt(D_ii).\n            result.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n        }\n        \n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}