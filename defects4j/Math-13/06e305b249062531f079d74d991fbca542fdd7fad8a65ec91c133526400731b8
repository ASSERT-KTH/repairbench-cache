{
    "generation": "import org.apache.commons.math3.linear.DiagonalMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.util.FastMath;\n\n    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        if (m instanceof DiagonalMatrix) {\n            // Optimization for diagonal matrices, which are common for weights.\n            // The square root of a diagonal matrix is the diagonal matrix\n            // with the square roots of the original diagonal elements.\n            final double[] data = ((DiagonalMatrix) m).getData();\n            final int dim = data.length;\n            final double[] sqrtData = new double[dim];\n            for (int i = 0; i < dim; i++) {\n                // As per the Javadoc, m is positive-definite, implying diagonal elements are non-negative.\n                // EigenDecomposition would also likely fail for non-positive definite matrices.\n                sqrtData[i] = FastMath.sqrt(data[i]);\n            }\n            // Create a new DiagonalMatrix with the computed square roots.\n            // Pass 'false' to the constructor to avoid unnecessary copying of the new array.\n            return new DiagonalMatrix(sqrtData, false);\n        } else {\n            // Fallback to EigenDecomposition for general symmetric positive-definite matrices.\n            // This is computationally more expensive and memory-intensive.\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}