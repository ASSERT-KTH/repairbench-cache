{
    "generation": "    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     * @throws org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException\n     * if {@code m} is not positive definite.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException if {@code m}\n     * is not square.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        if (!m.isSquare()) {\n            // Throw exception consistent with EigenDecomposition behavior for non-square matrices.\n            throw new org.apache.commons.math3.exception.DimensionMismatchException(m.getRowDimension(), m.getColumnDimension());\n        }\n\n        // Optimize computation for diagonal matrices, which are common for weights.\n        if (m instanceof org.apache.commons.math3.linear.DiagonalMatrix) {\n            final int dim = m.getRowDimension();\n            final double[] sqrtDiag = new double[dim];\n            for (int i = 0; i < dim; i++) {\n                final double diagEntry = m.getEntry(i, i);\n                // Check for non-positive entries. EigenDecomposition constructor also performs\n                // a check for positive definiteness (based on eigenvalues and a threshold).\n                // We mimic this by checking diagonal elements directly.\n                // Use a threshold of 0, consistent with the NonPositiveDefiniteMatrixException constructor.\n                if (diagEntry <= 0) {\n                     // Throw NonPositiveDefiniteMatrixException as specified in the javadoc\n                     // and consistent with EigenDecomposition constructor behavior for SPD matrices.\n                     throw new org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException(diagEntry, i, 0);\n                }\n                sqrtDiag[i] = org.apache.commons.math3.util.FastMath.sqrt(diagEntry);\n            }\n            // Create a new DiagonalMatrix with the square roots.\n            // Use 'false' for the copy parameter to avoid unnecessary array cloning.\n            return new org.apache.commons.math3.linear.DiagonalMatrix(sqrtDiag, false);\n        } else {\n            // Fallback to EigenDecomposition for general symmetric positive-definite matrices.\n            // The EigenDecomposition constructor performs checks for symmetry and positive definiteness.\n            final org.apache.commons.math3.linear.EigenDecomposition dec = new org.apache.commons.math3.linear.EigenDecomposition(m);\n            // The getSquareRoot method assumes the matrix is symmetric positive definite\n            // (checks are typically done in the constructor).\n            return dec.getSquareRoot();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}