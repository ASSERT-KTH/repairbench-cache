{
    "generation": "/**\n * Computes the square-root of the weight matrix.\n *\n * @param m Symmetric, positive-definite (weight) matrix.\n * @return the square-root of the weight matrix.\n */\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final int dimension = m.getRowDimension();\n    \n    // For small matrices, use the original approach\n    if (dimension < 50) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n    \n    // For large matrices, use a more memory-efficient approach\n    // Since weight matrices in curve fitting are often diagonal,\n    // check if it's diagonal and handle it efficiently\n    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(dimension, dimension);\n    boolean isDiagonal = true;\n    \n    // Check if matrix is diagonal\n    for (int i = 0; i < dimension && isDiagonal; i++) {\n        for (int j = 0; j < dimension; j++) {\n            if (i != j && Math.abs(m.getEntry(i, j)) > 1e-12) {\n                isDiagonal = false;\n                break;\n            }\n        }\n    }\n    \n    if (isDiagonal) {\n        // For diagonal matrix, sqrt is just sqrt of each diagonal element\n        for (int i = 0; i < dimension; i++) {\n            sqrtM.setEntry(i, i, Math.sqrt(m.getEntry(i, i)));\n        }\n        return sqrtM;\n    } else {\n        // Fall back to eigendecomposition for small to medium matrices\n        try {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        } catch (OutOfMemoryError e) {\n            // If we still run out of memory, use Cholesky decomposition as a fallback\n            // which is more memory efficient but less accurate for ill-conditioned matrices\n            RealMatrix identity = MatrixUtils.createRealIdentityMatrix(dimension);\n            return new CholeskyDecomposition(m).getSolver().solve(identity);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}