{
    "generation": "    /**\n     * Computes the square-root of the weight matrix.\n     *\n     * @param m Symmetric, positive-definite (weight) matrix.\n     * @return the square-root of the weight matrix.\n     */\n    private RealMatrix squareRoot(RealMatrix m) {\n        // The EigenDecomposition class, when used with a very large diagonal matrix,\n        // can lead to an OutOfMemoryError. This is because it constructs a full\n        // identity matrix for eigenvectors, which becomes extremely large.\n        //\n        // For a diagonal matrix, the square root is simply another diagonal matrix\n        // where each diagonal element is the square root of the corresponding\n        // original diagonal element. This can be computed much more efficiently\n        // without a full eigendecomposition.\n        if (m instanceof DiagonalMatrix) {\n            final int dim = m.getRowDimension();\n            final double[] diagonal = ((DiagonalMatrix) m).getDiagonal();\n            final double[] sqrtDiagonal = new double[dim];\n            for (int i = 0; i < dim; i++) {\n                final double value = diagonal[i];\n                // Per the Javadoc, the matrix is \"positive-definite\".\n                // For a diagonal matrix, this means all diagonal elements must be positive.\n                if (value < 0) {\n                    throw new IllegalArgumentException(\"Matrix must be positive-definite, but a diagonal element is negative: \" + value);\n                }\n                sqrtDiagonal[i] = FastMath.sqrt(value);\n            }\n            return new DiagonalMatrix(sqrtDiagonal);\n        } else {\n            // Fallback to EigenDecomposition for general symmetric, positive-definite matrices\n            // that are not necessarily diagonal.\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}