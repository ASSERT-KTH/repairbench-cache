{
    "generation": "import java.util.regex.Pattern;\n\n/**\n * Check to see if the given block comment looks like it should be JSDoc.\n * This expects a comment that does not start with /**.\n */\nprivate void handleBlockComment(Comment comment) {\n  String value = comment.getValue();\n\n  // Check for patterns that suggest a JSDoc comment:\n  // 1. A \"@\" symbol following the start of the comment, possibly after whitespace.\n  //    Example: /* @type {string} */\n  //    Handled by trimming the value and checking if it starts with \"@\".\n  boolean tagOnFirstLine = value.trim().startsWith(\"@\");\n\n  // 2. A \"@\" symbol following a newline, optional whitespace, an asterisk, and optional whitespace.\n  //    Example: /*\n  //             * @param {number} x\n  //             */\n  //    Handled by regex looking for \"\\n\\\\s*\\\\*\\\\s*@\".\n  boolean tagOnNewLine = Pattern.compile(\"\\\\n\\\\s*\\\\*\\\\s*@\").matcher(value).find();\n\n\n  if (tagOnFirstLine || tagOnNewLine) {\n    errorReporter.warning(\n        SUSPICIOUS_COMMENT_WARNING,\n        sourceName,\n        comment.getLineno(), \"\", 0);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}