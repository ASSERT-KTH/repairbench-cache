{
    "generation": "  /**\n   * Check to see if the given block comment looks like it should be JSDoc.\n   */\n  private void handleBlockComment(Comment comment) {\n    // The original checks were too specific and did not correctly handle variations\n    // in comment formatting or the way `comment.getValue()` processes the comment\n    // content (e.g., stripping leading \"/*\", \"*/\", and often leading '*' characters\n    // on subsequent lines).\n\n    // A more robust approach is to use a regular expression to find any '@' tag\n    // that appears at the beginning of a line within the comment content,\n    // accounting for various leading whitespace and an optional '*' character\n    // that might have been removed by `getValue()`.\n    //\n    // Pattern breakdown:\n    // (?m) : Enable multiline mode, so '^' matches the start of each line.\n    // ^    : Matches the beginning of a line.\n    // \\s*  : Matches zero or more whitespace characters.\n    // \\*?  : Matches an optional asterisk (escaped for regex, since `getValue()`\n    //        might remove it from `* @`).\n    // \\s*  : Matches zero or more whitespace characters.\n    // @    : Matches the literal '@' character.\n    java.util.regex.Pattern suspiciousCommentPattern =\n        java.util.regex.Pattern.compile(\"(?m)^\\\\s*\\\\*?\\\\s*@\");\n\n    if (suspiciousCommentPattern.matcher(comment.getValue()).find()) {\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}