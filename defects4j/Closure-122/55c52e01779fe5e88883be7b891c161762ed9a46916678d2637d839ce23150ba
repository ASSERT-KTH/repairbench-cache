{
    "generation": "  /**\n   * Check to see if the given block comment looks like it should be JSDoc.\n   */\n  private void handleBlockComment(Comment comment) {\n    // JSDoc comments typically start with '/**' and tags like '@param' are\n    // often preceded by a newline and possibly '*' and spaces.\n    // This check is for block comments that are *not* JSDoc (i.e. not '/**')\n    // but contain patterns that look like JSDoc tags.\n    // The pattern looks for '@' at the beginning of the comment content (after '/*')\n    // or at the beginning of a line within the comment, possibly preceded by\n    // whitespace and an optional asterisk.\n    // Examples this should catch:\n    // '/* @type {number}'\n    // '/*\\n * @type {number}'\n    // '/*\\n *@type {number}'\n    // '/*\\n   * @type {number}'\n\n    String commentText = comment.getValue();\n\n    // The regex pattern matches:\n    //   (?m)   - Multiline mode, so '^' matches the start of the string AND the start of each line\n    //   ^      - Start of the string or start of a line\n    //   \\s*    - Zero or more whitespace characters (space, tab, newline, etc.)\n    //   \\*?    - An optional asterisk character (escaped because '*' is a regex metacharacter)\n    //   \\s*    - Zero or more whitespace characters\n    //   @      - The literal '@' symbol\n    java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(\"(?m)^\\\\s*\\\\*?\\\\s*@\");\n    java.util.regex.Matcher matcher = pattern.matcher(commentText);\n\n    if (matcher.find()) {\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}