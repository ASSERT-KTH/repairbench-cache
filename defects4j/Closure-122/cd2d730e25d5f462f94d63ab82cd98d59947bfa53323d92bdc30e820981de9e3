{
    "generation": "  /**\n   * Check to see if the given block comment looks like it should be JSDoc.\n   */\n  private void handleBlockComment(Comment comment) {\n    // JSDoc comments typically start with /**\n    // Block comments start with /*\n    // This function checks if a regular block comment (starting with /*) contains JSDoc-like tags.\n    // A JSDoc-like tag starts with '@' and can appear:\n    // 1. At the very beginning of the comment content (after '/*')\n    //    e.g., /*@type {number}*/  (comment.getValue() for this is \"@type {number}\")\n    // 2. On a new line, potentially with leading whitespace and an optional asterisk.\n    //    e.g., /*\n    //           * @type {number}\n    //           */  (comment.getValue() for this is \"\\n * @type {number}\\n\")\n    //    e.g., /*\n    //           *@type {number}\n    //           */  (comment.getValue() for this is \"\\n*@type {number}\\n\")\n\n    // The original checks `indexOf(\"/* @\")` (which is always false as `/*` is not in `comment.getValue()`)\n    // and `indexOf(\"\\n * @\")` (which is too rigid about whitespace).\n\n    // The regex pattern covers these cases:\n    // ( ^ | \\n )   : Matches either the start of the string (^) or a newline character (\\n).\n    // \\s*          : Matches zero or more whitespace characters.\n    // \\*?          : Matches an optional asterisk character (*).\n    // \\s*          : Matches zero or more whitespace characters.\n    // @            : Matches the literal '@' character.\n    java.util.regex.Pattern jsdocTagPattern = java.util.regex.Pattern.compile(\"(^|\\\\n)\\\\s*\\\\*?\\\\s*@\");\n    java.util.regex.Matcher matcher = jsdocTagPattern.matcher(comment.getValue());\n\n    if (matcher.find()) {\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}