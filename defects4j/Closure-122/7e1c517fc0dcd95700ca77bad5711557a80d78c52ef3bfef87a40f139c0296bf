{
    "generation": "/**\n * Check to see if the given block comment looks like it should be JSDoc.\n */\nprivate void handleBlockComment(Comment comment) {\n  String value = comment.getValue();\n\n  // Split comment into lines to handle multi-line cases\n  String[] lines = value.split(\"\\n\");\n  for (String line : lines) {\n    String trimmedLine = line.trim();\n    // Remove leading '*' which is common in block comments\n    if (trimmedLine.startsWith(\"*\")) {\n      trimmedLine = trimmedLine.substring(1).trim();\n    }\n    if (trimmedLine.startsWith(\"@\")) {\n      // Found an @tag at the beginning of a line\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n      return;\n    }\n  }\n\n  // Also handle the single line case, e.g. /* @type {number} */\n  if (value.trim().startsWith(\"@\")) {\n    errorReporter.warning(\n        SUSPICIOUS_COMMENT_WARNING,\n        sourceName,\n        comment.getLineno(), \"\", 0);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}