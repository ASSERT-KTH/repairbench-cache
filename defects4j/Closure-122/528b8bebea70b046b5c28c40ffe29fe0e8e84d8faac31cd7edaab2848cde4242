{
    "generation": "  /**\n   * Check to see if the given block comment looks like it should be JSDoc.\n   */\n  private void handleBlockComment(Comment comment) {\n    String value = comment.getValue();\n    // Check each line for ' * @', which is typical of JSDoc, or lines starting '@'\n    // Exclude actual JSDoc comments (which begin with /**)\n    if (!value.startsWith(\"**\")) { // actual JSDoc comment text starts with /**\n      String[] lines = value.split(\"\\n\");\n      for (String line : lines) {\n        String trimmed = line.trim();\n        // Check for a line that begins with '*' (possibly after spaces) followed by '@'\n        if (trimmed.startsWith(\"*\") && trimmed.contains(\"@\")) {\n          errorReporter.warning(\n              SUSPICIOUS_COMMENT_WARNING,\n              sourceName,\n              comment.getLineno(), \"\", 0);\n          return;\n        }\n        // Or a line starting directly with @ (uncommon, but check if no leading stars)\n        if (trimmed.startsWith(\"@\")) {\n          errorReporter.warning(\n              SUSPICIOUS_COMMENT_WARNING,\n              sourceName,\n              comment.getLineno(), \"\", 0);\n          return;\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}