{
    "generation": "  /**\n   * Check to see if the given block comment looks like it should be JSDoc.\n   */\n  private void handleBlockComment(Comment comment) {\n    // JSDoc-like comments are typically prefixed with `/**`.\n    // Block comments (`/* ... */`) containing JSDoc tags (`@tag`) are suspicious\n    // because the parser will not interpret them as JSDoc.\n    //\n    // The `comment.getValue()` method returns the content of the comment\n    // *between* the `/*` and `*/` delimiters.\n    //\n    // We need to check if any JSDoc-like tag appears:\n    // 1. At the very beginning of the comment content (after leading whitespace).\n    //    Example: `/* @type {number} */` -> `getValue()` is ` @type {number} `\n    // 2. On a new line, potentially preceded by `*` and/or whitespace.\n    //    Example: `/*\\n * @type {number}\\n */` -> `getValue()` is `\\n * @type {number}\\n `\n    //    Example: `/*\\n *@type {number}\\n */` -> `getValue()` is `\\n *@type {number}\\n `\n\n    // The regex `(?:^|\\\\n)\\\\s*\\\\*?\\\\s*@` matches:\n    // (?:^|\\\\n) - Non-capturing group: asserts position at the beginning of the string (^) OR\n    //             after a newline character (\\\\n). This covers tags at the start of the comment\n    //             content or on subsequent lines.\n    // \\\\s*      - Matches zero or more whitespace characters. This accounts for indentation or\n    //             spaces before the asterisk or tag.\n    // \\\\*?      - Matches zero or one literal asterisk (`*`). This is optional, as JSDoc\n    //             lines often start with `*` but not always directly before a tag.\n    // \\\\s*      - Matches zero or more whitespace characters after the optional asterisk.\n    // @         - Matches the literal '@' character, which signifies a JSDoc tag.\n    java.util.regex.Pattern jsdocLikeTagPattern =\n        java.util.regex.Pattern.compile(\"(?:^|\\\\n)\\\\s*\\\\*?\\\\s*@\");\n\n    if (jsdocLikeTagPattern.matcher(comment.getValue()).find()) {\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}