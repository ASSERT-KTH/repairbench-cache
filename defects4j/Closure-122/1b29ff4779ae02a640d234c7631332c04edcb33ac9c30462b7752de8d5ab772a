{
    "generation": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n// ... other imports and class definition ...\n\n  // Pre-compile the pattern for efficiency.\n  // Looks for patterns like:\n  // @foo\n  // *@foo\n  // * @foo\n  // Any of the above preceded by whitespace and/or occurring after a newline.\n  private static final Pattern SUSPICIOUS_COMMENT_PATTERN =\n      Pattern.compile(\"(^|\\\\n)[\\\\t ]*\\\\*?[\\\\t ]*@[a-zA-Z]\");\n\n  /**\n   * Check to see if the given block comment looks like it should be JSDoc.\n   * This method assumes it's called only for block comments (/* ... * /)\n   * that are not JSDoc comments (/ ** ... * /).\n   */\n  private void handleBlockComment(Comment comment) {\n    // We check the comment's content for patterns typical of JSDoc annotations\n    // that might appear at the beginning of a line.\n    Matcher matcher = SUSPICIOUS_COMMENT_PATTERN.matcher(comment.getValue());\n    if (matcher.find()) {\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          // Report the warning at the line where the comment starts.\n          comment.getLineno(), \"\", 0);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}