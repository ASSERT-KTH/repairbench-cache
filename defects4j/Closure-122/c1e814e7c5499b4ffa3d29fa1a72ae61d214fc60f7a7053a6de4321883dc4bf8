{
    "generation": "import java.util.regex.Pattern;\n\n  /**\n   * Check to see if the given block comment looks like it should be JSDoc.\n   * We issue a warning if the comment starts with /* instead of /**\n   * but contains intermediate lines starting with * followed by @\n   * or starts with @ after the opening /*.\n   */\n  private void handleBlockComment(Comment comment) {\n    // This check should only apply to non-JSDoc comments (those starting with /*).\n    // We are looking for comments that contain JSDoc-like tags, like \"@foo\"\n    // at the start of a line (potentially after whitespace and an optional \"*\").\n    String value = comment.getValue();\n\n    // Check for patterns like \"@tag\" at the start of the comment value (after whitespace)\n    // or \"* @tag\" / \"*@tag\" / \"@tag\" at the start of a line within the comment\n    // (allowing for optional whitespace).\n    // Regex: \"(^|\\n)\\s*\\*?\\s*@\"\n    //   (^|\\n)   - Start of the string or newline\n    //   \\s*      - Optional whitespace\n    //   \\*?      - Optional '*' (the leading asterisk on comment lines)\n    //   \\s*      - Optional whitespace\n    //   @        - Literal '@' indicating a JSDoc tag\n    // Using Pattern.compile inline for simplicity as requested, although\n    // pre-compiling as a static final field is generally more performant.\n    Pattern suspiciousCommentPattern = Pattern.compile(\"(^|\\\\n)\\\\s*\\\\*?\\\\s*@\");\n\n    if (suspiciousCommentPattern.matcher(value).find()) {\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}