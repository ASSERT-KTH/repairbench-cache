{
    "generation": "  /**\n   * Check to see if the given block comment looks like it should be JSDoc.\n   */\n  private void handleBlockComment(Comment comment) {\n    String value = comment.getValue();\n\n    // JSDoc comments typically use \"@\" tags.\n    // We check for two main patterns that indicate a JSDoc-like tag:\n    // 1. An \"@\" tag at the very beginning of the comment's content (after stripping leading whitespace).\n    //    Examples: \"/*@type {number}*/\", \"/* @type {number}*/\"\n    if (value.trim().startsWith(\"@\")) {\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n      return; \n    }\n\n    // 2. An \"@\" tag on a subsequent line, typically preceded by a \"*\" and optional whitespace.\n    //    The pattern looks for: newline, any amount of whitespace, literal asterisk,\n    //    any amount of whitespace, literal at-sign.\n    //    Examples: \"/*\\n * @type {number}*/\", \"/*\\n *@type {number}*/\",\n    //              \"/*\\n   *   @type {number}*/\"\n    // We use a regular expression for this flexible matching.\n    java.util.regex.Pattern jsdocTagPattern = java.util.regex.Pattern.compile(\"\\\\n\\\\s*\\\\*\\\\s*@\");\n    java.util.regex.Matcher matcher = jsdocTagPattern.matcher(value);\n    if (matcher.find()) {\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}