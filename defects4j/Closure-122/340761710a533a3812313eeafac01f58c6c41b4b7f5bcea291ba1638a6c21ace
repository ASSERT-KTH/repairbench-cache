{
    "generation": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n  // Pre-compile the pattern for efficiency, looking for patterns like\n  // \"* @...\" or \"@...\" at the start of a line in the comment body.\n  private static final Pattern SUSPICIOUS_COMMENT_PATTERN =\n      Pattern.compile(\"(^|\\\\n)\\\\s*\\\\*?\\\\s*@[a-zA-Z]\");\n\n  /**\n   * Check to see if the given block comment looks like it should be JSDoc.\n   * This is a heuristic check. We check for JSDoc-like tags that appear\n   * at the beginning of a line (ignoring whitespace and the leading \"*\").\n   * We only issue a warning if the comment is not already a JSDoc comment\n   * (i.e., it starts with /* instead of /**). The caller is responsible\n   * for ensuring this method is only called on non-JSDoc comments.\n   */\n  private void handleBlockComment(Comment comment) {\n    // This method should only be called for non-JSDoc block comments.\n    // We check the comment's value for patterns that suggest it was\n    // intended to be JSDoc.\n    String value = comment.getValue();\n    Matcher matcher = SUSPICIOUS_COMMENT_PATTERN.matcher(value);\n\n    // Checking for patterns like \" *@type\" or \"\\n *@type\" which are common JSDoc tags.\n    // The regex allows for variations in whitespace and the optional leading asterisk.\n    // We add [a-zA-Z] to avoid matching things like \"* @ 123\" but match \"* @type\".\n    if (matcher.find()) {\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}