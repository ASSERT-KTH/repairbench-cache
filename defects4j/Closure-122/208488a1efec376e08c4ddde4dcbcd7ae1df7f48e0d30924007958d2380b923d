{
    "generation": "  /**\n   * Check to see if the given block comment looks like it should be JSDoc.\n   */\n  private void handleBlockComment(Comment comment) {\n    // JSDoc comments typically start with '/**'. Regular block comments start with '/*'.\n    // This function handles '/*' style comments. If such a comment contains JSDoc-like tags,\n    // it's considered suspicious because it might have been intended as JSDoc but missed the '/**' start.\n\n    // A JSDoc-like tag generally starts with '@' at the beginning of a line within the comment\n    // content (after stripping the '/*' and '*/' delimiters by comment.getValue()).\n    // This includes cases like:\n    // - '@tag' (at the very beginning of the comment content)\n    // - ' *@tag' (after a newline, with optional leading space and an optional '*' character)\n    // - ' * @tag' (after a newline, with optional leading space and an optional '*' character, then more space)\n    // - '  @tag' (after a newline, with leading spaces)\n\n    // Regex explanation:\n    // (?m) : Enable multiline mode. In this mode, '^' and '$' match the start/end of a line,\n    //        in addition to the start/end of the entire string.\n    // ^    : Matches the beginning of a line (due to (?m)).\n    // \\\\s* : Matches zero or more whitespace characters.\n    // \\\\*? : Matches zero or one literal '*' character (optional, to handle cases like \" *@tag\" or \" * @tag\").\n    // \\\\s* : Matches zero or more whitespace characters.\n    // @    : Matches the literal '@' character.\n    //\n    // This regex effectively checks for the presence of \"@\" at the start of any line within\n    // the comment's value, allowing for various common JSDoc formatting styles.\n    java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(\"(?m)^\\\\s*\\\\*?\\\\s*@\");\n    java.util.regex.Matcher matcher = pattern.matcher(comment.getValue());\n\n    if (matcher.find()) {\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}