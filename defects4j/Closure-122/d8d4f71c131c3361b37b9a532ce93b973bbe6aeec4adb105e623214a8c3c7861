{
    "generation": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n// ... other imports and class definition ...\n\n  // Regex to find suspicious JSDoc tags (like @type, @param) within block comments\n  // that are not JSDoc comments (i.e., start with /* instead of /**).\n  // Looks for @<word> potentially preceded by whitespace and an optional asterisk,\n  // occurring either at the start of a line within the comment body.\n  // Assumes comment.getValue() returns the content *inside* the comment delimiters.\n  private static final Pattern SUSPICIOUS_COMMENT_PATTERN =\n      Pattern.compile(\"(?:^|\\\\n)\\\\s*(?:\\\\*\\\\s*)?@\\\\w\");\n\n  /**\n   * Check to see if the given block comment looks like it should be JSDoc.\n   * This method should only be called for comments that start with /* but not /**.\n   */\n  private void handleBlockComment(Comment comment) {\n    // We assume this method is only called for non-JSDoc block comments /* ... */.\n    // We also assume comment.getValue() returns the content *without* the leading /*\n    // and trailing */.\n\n    String commentValue = comment.getValue();\n    Matcher matcher = SUSPICIOUS_COMMENT_PATTERN.matcher(commentValue);\n\n    // Search for the pattern anywhere in the comment value.\n    if (matcher.find()) {\n      // Found a JSDoc-like tag (e.g., @type) inside a /* comment.\n      errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,\n          comment.getLineno(), \"\", 0);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}