{
    "generation": "      @Override\n      public int parseArguments(Parameters params) throws CmdLineException {\n        String param = params.getParameter(0);\n\n        if (param == null) {\n          // If no explicit value is provided (e.g., --flag), it defaults to true.\n          // The return value indicates how many *subsequent* arguments were consumed.\n          // However, for a self-contained flag, returning 0 might cause the parser\n          // to get stuck or re-process the same flag, especially for flags that\n          // trigger immediate actions like --version.\n          // Returning 1 here signifies that the option itself was consumed,\n          // allowing the parser to advance.\n          setter.addValue(true);\n          return 1; // Changed from 0 to 1 to correctly consume the flag itself.\n        } else {\n          String lowerParam = param.toLowerCase();\n          if (TRUES.contains(lowerParam)) {\n            setter.addValue(true);\n          } else if (FALSES.contains(lowerParam)) {\n            setter.addValue(false);\n          } else {\n            // Bug fix: If a parameter is provided but it's not a valid boolean string\n            // (\"true\" or \"false\"), it should throw an exception instead of defaulting\n            // to true and not consuming the invalid parameter.\n            throw new CmdLineException(\n                \"Invalid boolean value for option: \" + param);\n          }\n          // If a value (true/false) was explicitly provided, consume that argument.\n          return 1;\n        }\n      }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}