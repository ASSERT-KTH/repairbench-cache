{
    "generation": "      @Override\n      public int parseArguments(Parameters params) throws CmdLineException {\n        String param = params.getParameter(0);\n\n        if (param == null) {\n          // If no explicit argument is provided for the boolean flag (e.g., just --flag),\n          // it defaults to true, and no additional parameters are consumed.\n          setter.addValue(true);\n          return 0;\n        } else {\n          String lowerParam = param.toLowerCase();\n          if (TRUES.contains(lowerParam)) {\n            // If the explicit argument is a 'true' string, set to true and consume 1 parameter.\n            setter.addValue(true);\n            return 1;\n          } else if (FALSES.contains(lowerParam)) {\n            // If the explicit argument is a 'false' string, set to false and consume 1 parameter.\n            setter.addValue(false);\n            return 1;\n          } else {\n            // BUG FIX: Original code returned 0 here, but 'param' was present.\n            // This would leave 'param' unconsumed, leading to JCommander re-parsing it\n            // and potentially causing errors or misinterpretations.\n            // An invalid explicit value should throw an exception.\n            throw new CmdLineException(\n                \"Invalid value for boolean option: '\" + param + \"'. \" +\n                \"Valid values are: \" + String.join(\", \", TRUES) + \" or \" +\n                String.join(\", \", FALSES) + \".\");\n          }\n        }\n      }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}