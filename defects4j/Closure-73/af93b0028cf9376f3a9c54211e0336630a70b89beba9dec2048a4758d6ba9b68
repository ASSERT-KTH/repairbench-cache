{
    "generation": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\\0':\n                sb.append(\"\\\\0\");\n                break;\n            case '\\n':\n                sb.append(\"\\\\n\");\n                break;\n            case '\\r':\n                sb.append(\"\\\\r\");\n                break;\n            case '\\t':\n                sb.append(\"\\\\t\");\n                break;\n            case '\\\\':\n                sb.append(backslashEscape);\n                break;\n            case '\\\"':\n                sb.append(doublequoteEscape);\n                break;\n            case '\\'':\n                sb.append(singlequoteEscape);\n                break;\n            case '>':\n                // Check for '>>' or '->' sequences before '>'\n                if (i >= 2 &&\n                    ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n                     (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                    sb.append(\"\\\\>\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case '<':\n                // Break </script into <\\/script and <!-- into <\\!--\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (i <= s.length() - END_SCRIPT.length() &&\n                    s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"<\\\\\");\n                } else if (i <= s.length() - START_COMMENT.length() &&\n                           s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                    sb.append(\"<\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                // Use Unicode escape for non-printable or non-ASCII control characters\n                // and those that can't be represented by the output charset\n                boolean useUnicodeEscape = false;\n                if (outputCharsetEncoder != null) {\n                    if (!outputCharsetEncoder.canEncode(c)) {\n                        useUnicodeEscape = true;\n                    }\n                } else {\n                    if (c > 0x7f || (c < 0x20 && c != '\\t' && c != '\\n' && c != '\\r')) {\n                        useUnicodeEscape = true;\n                    }\n                }\n                if (useUnicodeEscape) {\n                    appendHexJavaScriptRepresentation(sb, c);\n                } else {\n                    sb.append(c);\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}