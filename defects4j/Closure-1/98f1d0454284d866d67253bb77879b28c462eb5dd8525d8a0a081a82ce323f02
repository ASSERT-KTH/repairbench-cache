{
    "generation": "/**\n * Removes unreferenced arguments from a function declaration and when\n * possible the function's callSites.\n *\n * @param fnScope The scope inside the function\n */\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n\n  // Don't touch getters/setters in object literals.\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    return;\n  }\n\n  // If we're not removing globals, don't remove function parameters.\n  if (!removeGlobal) {\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(function);\n\n  if (!modifyCallers) {\n    // Skip functions assigned to properties (e.g., window.f = function(...) {...})\n    Node parent = function.getParent();\n    if (parent.isAssign() && parent.getFirstChild().isGetProp()) {\n      return;\n    }\n    // Strip unreferenced args off the end of the function's parameter list.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  } else {\n    // When we can modify callers, use the call-site optimizer.\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}