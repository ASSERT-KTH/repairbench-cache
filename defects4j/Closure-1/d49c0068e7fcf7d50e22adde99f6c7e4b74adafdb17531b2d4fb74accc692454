{
    "generation": "/**\n * Removes unreferenced arguments from a function declaration and when\n * possible the function's callSites.\n *\n * <p>Note: Removing unused function arguments can change a function\u2019s arity,\n * which may break code that depends on Function.prototype.length. In our\n * compiler pass we choose to perform this only when globals are being dropped.\n * Thus if removeGlobal is false (for example in SIMPLE_OPTIMIZATIONS or when the\n * globals must be preserved), then we leave the function\u2019s parameter list unchanged.\n *\n * @param fnScope The scope inside the function\n */\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters on an object literal setter cannot be removed.\n    return;\n  }\n\n  // Only remove (or rewrite) unreferenced parameters if globals are being removed.\n  // When removeGlobal is false we want to preserve the declared arity.\n  if (!removeGlobal) {\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n  if (modifyCallers) {\n    // Let the optimizer handle both the call sites and the parameter renaming.\n    callSiteOptimizer.optimize(fnScope, referenced);\n  } else {\n    // When not modifying call sites, we must be careful to preserve the function's\n    // arity. When there is more than one parameter, we may strip off unreferenced\n    // trailing parameters. However, if there is only one parameter, we replace its\n    // name with a dummy so that the function\u2019s length remains unchanged.\n    while (argList.getChildCount() > 1) {\n      Node lastArg = argList.getLastChild();\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n    if (argList.getChildCount() == 1) {\n      Node onlyArg = argList.getFirstChild();\n      Var var = fnScope.getVar(onlyArg.getString());\n      if (!referenced.contains(var) && !\"a\".equals(onlyArg.getString())) {\n        onlyArg.setString(\"a\");\n        compiler.reportCodeChange();\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}