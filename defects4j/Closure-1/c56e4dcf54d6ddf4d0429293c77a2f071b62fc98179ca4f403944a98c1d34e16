{
    "generation": "/**\n * Removes unreferenced arguments from a function declaration and when\n * possible the function's callSites.\n *\n * @param fnScope The scope inside the function\n */\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  // Notice that removing unreferenced function args breaks\n  // Function.prototype.length. In advanced mode, we don't really care\n  // about this: we consider \"length\" the equivalent of reflecting on\n  // the function's lexical source.\n  //\n  // Rather than create a new option for this, we assume that if the user\n  // is removing globals, then it's OK to remove unused function args.\n  //\n  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean isFunctionInGlobalScope =\n      fnScope.getParent() != null && fnScope.getParent().isGlobal();\n  boolean modifyCallersAllowed = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(function);\n  boolean canStripArgs =\n      modifyCallersAllowed\n          || removeGlobal\n          || !isFunctionInGlobalScope;\n\n  if (!canStripArgs) {\n    // Do not remove parameters from global-scope functions in SIMPLE mode.\n    return;\n  }\n\n  if (!modifyCallersAllowed) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}