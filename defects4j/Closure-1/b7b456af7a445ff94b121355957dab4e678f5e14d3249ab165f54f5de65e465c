{
    "generation": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  // The parameters of object\u2010literal getters/setters must be preserved.\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    return;\n  }\n  // Only drop unreferenced params when we're allowed to modify call sites\n  // (i.e. in advanced mode / remove-globals scenario).\n  if (!modifyCallSites) {\n    return;\n  }\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}