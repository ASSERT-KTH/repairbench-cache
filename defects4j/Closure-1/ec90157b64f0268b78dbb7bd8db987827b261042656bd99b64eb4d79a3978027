{
    "generation": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      List<Node> toRemove = new ArrayList<>();\n      for (Node child : argList.children()) {\n        Var var = fnScope.getVar(child.getString());\n        if (!referenced.contains(var)) {\n          toRemove.add(child);\n        }\n      }\n      for (Node node : toRemove) {\n        argList.removeChild(node);\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}