{
    "generation": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * In advanced mode (when globals are removed), this routine is allowed\n   * to trim off unreferenced trailing parameters. However, to preserve the\n   * function's \"length\" property, the final remaining parameter is never removed.\n   * In SIMPLE_OPTIMIZATIONS mode (when removeGlobal is false) no parameters are\n   * removed.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Only remove unused function arguments if globals are being removed.\n    // In SIMPLE mode or when removeGlobal is false, we must preserve the parameter list.\n    if (!removeGlobal) {\n      return;\n    }\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters of object literal setters cannot be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node lastArg;\n      // Remove trailing unreferenced args only if there is more than one parameter.\n      // This avoids impacting Function.prototype.length.\n      while (argList.getChildCount() > 1 && (lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}