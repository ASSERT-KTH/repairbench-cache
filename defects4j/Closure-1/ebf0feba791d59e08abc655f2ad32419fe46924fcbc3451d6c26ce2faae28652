{
    "generation": "/**\n * Removes unreferenced arguments from a function declaration and when\n * possible the function's callSites.\n *\n * @param fnScope The scope inside the function\n */\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  // Only remove unused function args if we are removing globals.\n  // This avoids changing the .length property for externally visible functions\n  // when globals are not being removed (as in SIMPLE_OPTIMIZATIONS or debug mode).\n  if (!removeGlobal) {\n    return;\n  }\n\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters in object literal getters/setters must not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}