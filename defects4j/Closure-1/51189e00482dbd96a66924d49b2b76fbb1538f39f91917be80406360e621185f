{
    "generation": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  // Notice that removing unreferenced function args breaks\n  // Function.prototype.length. In advanced mode, we don't really care\n  // about this: we consider \"length\" the equivalent of reflecting on\n  // the function's lexical source.\n  //\n  // Rather than create a new option for this, we assume that if the user\n  // is removing globals, then it's OK to remove unused function args.\n  //\n  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  // Only strip or rewrite arguments in advanced mode, when we\n  // are allowed to modify callers.  In simple or default modes\n  // we must keep the original parameter list intact.\n  if (!modifyCallSites || !callSiteOptimizer.canModifyCallers(function)) {\n    return;\n  }\n\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}