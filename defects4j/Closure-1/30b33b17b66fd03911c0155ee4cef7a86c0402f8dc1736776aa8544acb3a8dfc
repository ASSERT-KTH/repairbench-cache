{
    "generation": "/**\n * Removes unreferenced arguments from a function declaration and when\n * possible the function's callSites.\n *\n * <p>Notice that removing unreferenced function args breaks\n * Function.prototype.length. In advanced mode, we don't really care\n * about this: we consider \"length\" the equivalent of reflecting on\n * the function's lexical source.\n *\n * <p>Rather than create a new option for this, we assume that if the user\n * is removing globals, then it's OK to remove unused function args.\n *\n * <p>See http://code.google.com/p/closure-compiler/issues/detail?id=253\n *\n * @param fnScope The scope inside the function\n */\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  // Only remove unused function arguments if we are also removing globals.\n  // In SIMPLE_OPTIMIZATIONS and when removeGlobal is false we must leave the\n  // parameters intact (for example, so that Function.prototype.length remains).\n  if (!removeGlobal) {\n    return;\n  }\n\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters for object literal getters or setters must not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}