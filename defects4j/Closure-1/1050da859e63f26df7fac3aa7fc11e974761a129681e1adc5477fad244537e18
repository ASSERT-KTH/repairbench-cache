{
    "generation": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // We never strip params from getters/setters.\n      return;\n    }\n\n    // Only strip unused function parameters in advanced mode (when\n    // modifyCallSites==true).  In SIMPLE or WHITESPACE_ONLY modes\n    // we leave the signature alone to preserve Function.prototype.length\n    // and other reflective behaviors.\n    if (!modifyCallSites) {\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      // Advanced mode + safe to change callers: remove _and_ update call sites.\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}