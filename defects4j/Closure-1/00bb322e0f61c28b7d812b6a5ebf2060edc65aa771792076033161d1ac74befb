{
    "generation": "  /**\n   * Removes unreferenced arguments from a function declaration and when\n   * possible the function's callSites.\n   *\n   * @param fnScope The scope inside the function\n   */\n  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // We only remove unreferenced function parameters if removeGlobals is true.\n    // The rationale is that this is similar to removing globals in that it\n    // affects the \"API\" of the function. Removing unused parameters changes\n    // the function signature, which might break code that uses\n    // Function.prototype.length.\n    // Simple optimizations explicitly calls this pass with removeGlobals=false.\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n    if (!removeGlobals) {\n      return;\n    }\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          // Assume the first referenced variable means the rest are referenced.\n          break;\n        }\n      }\n    } else {\n      // Delegate the work of removing unused function parameters and call\n      // arguments to the call site optimizer.\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}