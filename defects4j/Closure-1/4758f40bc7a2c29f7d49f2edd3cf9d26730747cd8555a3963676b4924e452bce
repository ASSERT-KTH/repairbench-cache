{
    "generation": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Prevent removing arguments when function is a method in an object literal\n    if (function.getParent() instanceof ObjectLiteral || !modifyCallers) {\n        if (!modifyCallers) {\n            Node lastArg;\n            while ((lastArg = argList.getLastChild()) != null) {\n                Var var = fnScope.getVar(lastArg.getString());\n                if (!referenced.contains(var)) {\n                    argList.removeChild(lastArg);\n                    compiler.reportCodeChange();\n                } else {\n                    break;\n                }\n            }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}