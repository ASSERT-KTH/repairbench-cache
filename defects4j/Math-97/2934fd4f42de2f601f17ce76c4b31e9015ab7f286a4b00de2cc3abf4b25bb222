{
    "generation": "    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function \n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        \n        // Get the absolute accuracy from the solver settings.\n        // This method is inherited from UnivariateRealSolverImpl.\n        double accuracy = getAbsoluteAccuracy(); \n\n        // Check if yMin is a root (within the specified accuracy).\n        // If it is, return min immediately.\n        if (Math.abs(yMin) <= accuracy) {\n            return min;\n        }\n        \n        // Check if yMax is a root (within the specified accuracy).\n        // If it is, return max immediately.\n        if (Math.abs(yMax) <= accuracy) {\n            return max;\n        }\n        \n        // If neither endpoint is a root, verify that the function values at the endpoints\n        // have strictly opposite signs (i.e., they bracket the root).\n        // If yMin * yMax > 0, it means they have the same sign, and thus do not bracket the root.\n        if (yMin * yMax > 0) {\n            throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else {\n            // The interval is properly bracketed (yMin * yMax < 0).\n            // (The case yMin * yMax == 0 would have been handled by the above accuracy checks,\n            // as it implies at least one of yMin or yMax is exactly zero).\n            // Proceed with the actual root-finding algorithm.\n            return solve(min, yMin, max, yMax, min, yMin);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}