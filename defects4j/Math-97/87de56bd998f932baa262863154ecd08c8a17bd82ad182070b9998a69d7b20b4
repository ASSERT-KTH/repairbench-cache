{
    "generation": "    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function \n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        \n        // Check if either endpoint is a root within the function value accuracy.\n        // This needs to be done *before* the bracketing check, as an endpoint being\n        // a root (or very close to it) means it should be returned, regardless\n        // of whether yMin * yMax is non-negative due to floating point inaccuracies.\n        if (Math.abs(yMin) <= this.functionValueAccuracy) {\n            setResult(min, 0); // Set result and indicate 0 iterations for direct hit\n            return min;\n        }\n        \n        if (Math.abs(yMax) <= this.functionValueAccuracy) {\n            setResult(max, 0); // Set result and indicate 0 iterations for direct hit\n            return max;\n        }\n\n        // Verify bracketing: function values at endpoints must have opposite signs.\n        // If yMin * yMax >= 0, it means signs are the same or one is exactly zero\n        // (which should have been caught by the accuracy checks above).\n        double sign = yMin * yMax;\n        if (sign >= 0) {\n            // neither value is close to zero (checked above) and min and max do not bracket root.\n            throw new IllegalArgumentException\n                (\"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else {\n            // Signs are opposite, proceed with the actual solver algorithm\n            // The inner solve method will set the result internally.\n            double ret = solve(min, yMin, max, yMax, min, yMin);\n            return ret;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}