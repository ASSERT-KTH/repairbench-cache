{
    "generation": "/**\n * Find a zero in the given interval.\n * <p>\n * Requires that the values of the function at the endpoints have opposite\n * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n * the case.\n * </p>\n * \n * @param min the lower bound for the interval.\n * @param max the upper bound for the interval.\n * @return the value where the function is zero\n * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n * @throws FunctionEvaluationException if an error occurs evaluating the function \n * @throws IllegalArgumentException if min is not less than max or the signs of the\n *         values of the function at the endpoints are not opposites\n */\npublic double solve(double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Check if either endpoint is (almost) a root.\n    if (Math.abs(yMin) <= getFunctionValueAccuracy()) {\n        return min;\n    }\n    if (Math.abs(yMax) <= getFunctionValueAccuracy()) {\n        return max;\n    }\n\n    // Verify that the endpoints bracket a root.\n    if (yMin * yMax > 0) {\n        throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n                \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    }\n\n    // Use the first endpoint as an initial guess and solve.\n    return solve(min, yMin, max, yMax, min, yMin);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}