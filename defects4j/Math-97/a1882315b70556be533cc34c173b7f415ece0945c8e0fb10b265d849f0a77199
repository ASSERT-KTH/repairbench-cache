{
    "generation": "    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function \n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(double min, double max)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n\n        double ret = Double.NaN;\n\n        // evaluate endpoints\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= getFunctionValueAccuracy()) {\n            // min is (effectively) a root\n            setResult(min, yMin);\n            return min;\n        }\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= getFunctionValueAccuracy()) {\n            // max is (effectively) a root\n            setResult(max, yMax);\n            return max;\n        }\n\n        // verify bracketing\n        double sign = yMin * yMax;\n        if (sign > 0.0) {\n            throw new IllegalArgumentException(\n                \"Function values at endpoints do not have different signs.\" +\n                \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        }\n\n        // bracket is valid, proceed with Brent's method\n        ret = solve(min, yMin, max, yMax, min, yMin);\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}