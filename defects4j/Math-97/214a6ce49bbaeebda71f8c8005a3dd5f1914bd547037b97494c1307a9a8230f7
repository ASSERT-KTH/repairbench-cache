{
    "generation": "    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function \n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double ret = Double.NaN;\n        \n        double yMin = f.value(min);\n        // Check if min is close enough to zero according to function value accuracy.\n        // functionValueAccuracy is typically very small, e.g., 1E-15.\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n            // Return min as the root, as its function value is negligible.\n            // The internal result state is set by setResult.\n            return min; \n        }\n        \n        double yMax = f.value(max);\n        // Check if max is close enough to zero according to function value accuracy.\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0);\n            // Return max as the root, as its function value is negligible.\n            // The internal result state is set by setResult.\n            return max;\n        }\n        \n        // Verify bracketing: function values at endpoints must have different signs.\n        // This check is performed AFTER verifying whether endpoints themselves are roots.\n        double sign = yMin * yMax;\n        // The case sign == 0 is handled by the endpoint checks above.\n        // If sign > 0, the values have the same sign, and the interval does not bracket a root.\n        if (sign > 0) {\n            // Neither endpoint is a root (within functionValueAccuracy), \n            // and they don't bracket a root.\n            throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } \n        // If sign < 0, the interval properly brackets a root. Proceed with the solver algorithm.\n        // The internal solve method implements the core Brent's algorithm logic.\n        // It's expected to find the root, call setResult, and return the root value.\n        // The original code calls solve with min as the initial guess.\n        ret = solve(min, yMin, max, yMax, min, yMin);\n            \n        // Return the root found by the internal solve method.\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}