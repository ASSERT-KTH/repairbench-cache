{
    "generation": "    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function \n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        \n        // Check if either endpoint is a root (within tolerance)\n        // This handles cases where one endpoint is very close to a zero,\n        // which might cause yMin * yMax to be non-negative due to floating-point\n        // inaccuracies, even though it's a valid solution.\n        if (Math.abs(yMin) <= getFunctionValueAccuracy()) {\n            setResult(min, 0); // Found root at min with 0 iterations\n            return min;\n        }\n        \n        if (Math.abs(yMax) <= getFunctionValueAccuracy()) {\n            setResult(max, 0); // Found root at max with 0 iterations\n            return max;\n        }\n\n        // Verify bracketing: signs must be opposite\n        double sign = yMin * yMax;\n        if (sign >= 0) {\n            // Neither value was close to zero, and min and max do not bracket a root.\n            // (yMin and yMax have the same sign, or one/both are zero but not\n            // close enough to be considered a root by the previous checks).\n            throw new IllegalArgumentException\n                (\"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else {\n            // yMin and yMax have opposite signs, proceed with iterative solution.\n            // The root is guaranteed to be between min and max.\n            return solve(min, yMin, max, yMax, min, yMin);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}