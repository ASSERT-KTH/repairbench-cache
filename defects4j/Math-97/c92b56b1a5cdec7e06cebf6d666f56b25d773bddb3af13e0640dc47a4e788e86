{
    "generation": "    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     *\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function\n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n\n        clearResult();\n        verifyInterval(min, max);\n\n        double ret = Double.NaN;\n\n        double yMin = f.value(min);\n        // Check if min is a root within absolute accuracy\n        if (Math.abs(yMin) <= absoluteAccuracy) {\n            setResult(min, 0);\n            return result;\n        }\n\n        double yMax = f.value(max);\n        // Check if max is a root within absolute accuracy\n        if (Math.abs(yMax) <= absoluteAccuracy) {\n            setResult(max, 0);\n            return result;\n        }\n\n        // Verify bracketing: ensure function values have opposite signs\n        double sign = yMin * yMax;\n        if (sign > 0) {\n            // check if either value is close to a zero is done above\n            // neither value is close to zero and min and max do not bracket root.\n            throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                     \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                     \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else if (sign == 0) {\n            // This case should not be reachable due to the checks above,\n            // but handle defensively just in case.\n            // One of the endpoints is a root, handled above. If we reach here,\n            // it implies a potential precision issue or logic error.\n            // Let's decide based on which value is zero.\n             if (yMin == 0.0) {\n                 setResult(min, 0);\n                 return result;\n             } else {\n                 setResult(max, 0);\n                 return result;\n             }\n        } else { // sign < 0 : The interval brackets a root.\n            // solve using the Brent algorithm, starting with min as the initial guess\n            ret = solve(min, yMin, max, yMax, min, yMin);\n            // The solve(...) method above calls setResult(...) before returning.\n        }\n\n        return ret; // Return the computed root\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}