{
    "generation": "/**\n * Find a zero in the given interval.\n * <p>\n * Requires that the values of the function at the endpoints have opposite\n * signs, or that one of the endpoints is (approximately) a root. An\n * <code>IllegalArgumentException</code> is thrown if neither endpoint is a\n * root and the endpoints do not bracket a root.</p>\n * \n * @param min the lower bound for the interval.\n * @param max the upper bound for the interval.\n * @return the value where the function is zero\n * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n * @throws FunctionEvaluationException if an error occurs evaluating the function \n * @throws IllegalArgumentException if min is not less than max or the\n *         endpoints neither bracket a root nor one is already a root\n */\npublic double solve(double min, double max)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifyInterval(min, max);\n\n    // Evaluate endpoints\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // If either endpoint is (approximately) a root, return it\n    if (Math.abs(yMin) <= getAbsoluteAccuracy()) {\n        return min;\n    }\n    if (Math.abs(yMax) <= getAbsoluteAccuracy()) {\n        return max;\n    }\n\n    // Verify that the endpoints bracket a root\n    if (yMin * yMax > 0.0) {\n        throw new IllegalArgumentException(\n            \"Function values at endpoints do not have different signs.  \" +\n            \"Endpoints: [\" + min + \", \" + max + \"]  \" +\n            \"Values: [\" + yMin + \", \" + yMax + \"]\"\n        );\n    }\n\n    // They bracket a root\u2014proceed with Brent's method\n    return solve(min, yMin, max, yMax, min, yMin);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}