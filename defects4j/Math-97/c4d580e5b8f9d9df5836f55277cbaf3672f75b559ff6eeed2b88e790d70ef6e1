{
    "generation": "/**\n * Find a zero in the given interval.\n * <p>\n * Requires that the values of the function at the endpoints have opposite\n * signs (or that one of them is already a root within the solver's accuracy).\n * An <code>IllegalArgumentException</code> is thrown if neither endpoint\n * is (approximately) zero and they do not bracket a root.</p>\n * \n * @param min the lower bound for the interval.\n * @param max the upper bound for the interval.\n * @return the value where the function is zero\n * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n * @throws FunctionEvaluationException if an error occurs evaluating the function \n * @throws IllegalArgumentException if min is not less than max or the\n * signs of the values of the function at the endpoints are not opposites\n */\npublic double solve(double min, double max)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    // Evaluate at endpoints\n    double yMin = f.value(min);\n    // check if left endpoint is a root within accuracy\n    if (Math.abs(yMin) <= getAbsoluteAccuracy()) {\n        return min;\n    }\n    double yMax = f.value(max);\n    // check if right endpoint is a root within accuracy\n    if (Math.abs(yMax) <= getAbsoluteAccuracy()) {\n        return max;\n    }\n\n    // Verify bracketing (strictly opposite signs)\n    double sign = yMin * yMax;\n    if (sign > 0.0) {\n        throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n             \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n             \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    }\n\n    // Proceed with Brent's method using the left endpoint as the initial guess\n    return solve(min, yMin, max, yMax, min, yMin);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}