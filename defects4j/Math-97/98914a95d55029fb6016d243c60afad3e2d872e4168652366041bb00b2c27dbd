{
    "generation": "    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs OR one of the endpoints is close to a root based on the function value accuracy.\n     * An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function \n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     * and neither endpoint is close to a root.\n     */\n    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double ret = Double.NaN;\n        \n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        \n        // Verify bracketing or endpoint root\n        double sign = yMin * yMax;\n        if (sign >= 0) {\n            // check if either endpoint is a root within function value accuracy\n            // Note: functionValueAccuracy is typically defined in the AbstractUnivariateRealSolver class or BrentSolver itself\n            if (Math.abs(yMin) < functionValueAccuracy) {\n                // Ensure result is set before returning\n                setResult(min, 0); \n                return min;\n            } \n            if (Math.abs(yMax) < functionValueAccuracy) {\n                // Ensure result is set before returning\n                setResult(max, 0);\n                return max;\n            }   \n            \n            // If neither endpoint is a root (within tolerance) and signs are not opposite, then it's an error.\n            throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else {\n            // Function values have opposite signs, proceed with Brent's method.\n            // solve using the Brent algorithm, starting with the provided interval.\n            // The overloaded solve method below presumably implements Brent's algorithm.\n            ret = solve(min, yMin, max, yMax, min, yMin);\n        }\n\n        // Check that the returned value satisfies the function value accuracy.\n        // This check might be redundant if the internal solve method already ensures it,\n        // but it is included for robustness, similar to how it might be done in AbstractUnivariateRealSolver.\n        // It might be better placed within the internal solve or AbstractUnivariateRealSolver's solve method.\n        // However, without seeing the rest of the class, we keep the structure close to the original.\n        // if (Math.abs(f.value(ret)) > functionValueAccuracy) {\n             // Handle appropriately, perhaps log or refine result if needed, \n             // though Brent's method should ideally converge to this accuracy if possible.\n        // }\n\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}