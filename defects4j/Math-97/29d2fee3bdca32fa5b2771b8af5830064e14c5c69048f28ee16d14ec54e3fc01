{
    "generation": "/**\n * Find a zero in the given interval.\n * <p>\n * Requires that the values of the function at the endpoints have opposite\n * signs or one of the endpoints is a root. An <code>IllegalArgumentException</code> \n * is thrown if this is not the case.</p>\n * \n * @param min the lower bound for the interval.\n * @param max the upper bound for the interval.\n * @return the value where the function is zero\n * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n * @throws FunctionEvaluationException if an error occurs evaluating the\n * function \n * @throws IllegalArgumentException if min is not less than max or the\n * signs of the values of the function at the endpoints are not opposites\n * and neither endpoint is a root\n */\npublic double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n    \n    clearResult();\n    verifyInterval(min, max);\n    \n    double ret = Double.NaN;\n    \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    \n    // Check if either endpoint is a root\n    if (Math.abs(yMin) < functionValueAccuracy) {\n        ret = min;\n    } else if (Math.abs(yMax) < functionValueAccuracy) {\n        ret = max;\n    } else {\n        // Verify bracketing\n        double sign = yMin * yMax;\n        if (sign >= 0) {\n            throw new IllegalArgumentException(\n                \"Function values at endpoints do not have different signs \" +\n                \"and neither endpoint is a root.  Endpoints: [\" + min + \",\" + max + \"]\" + \n                \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        }\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n\n    return ret;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}