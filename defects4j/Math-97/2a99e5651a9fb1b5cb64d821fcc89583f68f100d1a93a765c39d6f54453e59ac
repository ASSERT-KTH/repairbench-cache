{
    "generation": "    /**\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function \n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     */\n    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double ret = Double.NaN;\n        \n        double yMin = f.value(min);\n        // Check if min is already a root within function value accuracy\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n            return result; // result field is set by setResult\n        }\n        \n        double yMax = f.value(max);\n        // Check if max is already a root within function value accuracy\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0);\n            return result; // result field is set by setResult\n        }\n        \n        // Verify bracketing, now that we know neither endpoint is the root.\n        double sign = yMin * yMax;\n        if (sign > 0) {\n            // yMin and yMax have the same sign (and are non-zero).\n            // Root is not bracketed.\n            throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else if (sign < 0) {\n            // solve using the Brent algorithm, starting with min as initial guess\n            ret = solve(min, yMin, max, yMax, min, yMin);\n        } else {\n            // sign == 0.0\n            // This implies one of yMin or yMax was exactly 0.0\n            // This case should have been caught by the Math.abs(y) <= functionValueAccuracy checks,\n            // but handle it for robustness.\n             if (yMin == 0.0) {\n                 ret = min;\n                 setResult(ret, 0);\n             } else { // yMax == 0.0\n                 ret = max;\n                 setResult(ret, 0);\n             }\n        }\n\n        // The result should have been set either by the endpoint checks or by the internal solve call.\n        // The internal solve method is expected to return the computed root value.\n        return ret; \n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}