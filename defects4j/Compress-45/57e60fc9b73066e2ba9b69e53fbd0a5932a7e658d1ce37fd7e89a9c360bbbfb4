{
    "generation": "    /**\n     * Write an long integer into a buffer as an octal string if this\n     * will fit, or as a binary number otherwise.\n     *\n     * Uses {@link #formatUnsignedOctalString} to format\n     * the value as an octal string with leading zeros.\n     * The converted number is followed by a space.\n     *\n     * @param value The value to write into the buffer.\n     * @param buf The destination buffer.\n     * @param offset The starting offset into the buffer.\n     * @param length The length of the buffer.\n     * @return The updated offset.\n     * @throws IllegalArgumentException if the value (and trailer)\n     * will not fit in the buffer according to the TAR conventions.\n     * @since 1.4\n     */\n    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            // Use default octal representation\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        // If value is negative or too large for octal, use binary representation.\n        // Binary representations are signaled by setting the high bit of the first byte.\n        // Negative values are stored in standard two's complement representation.\n\n        if (length < 9) {\n            // Handle binary conversion for standard lengths (like 8 bytes for size)\n            // This might throw an exception if the value doesn't fit according\n            // to its internal checks (which might differ from standard two's complement).\n            formatLongBinary(value, buf, offset, length, negative);\n        } else {\n            // Handle binary conversion for potentially larger fields (e.g., pax headers)\n            // This might also throw an exception based on its internal checks.\n            formatBigIntegerBinary(value, buf, offset, length, negative);\n        }\n\n        // Mark the number as binary by setting the high bit of the first byte.\n        // For negative numbers in two's complement, the high bit will usually\n        // already be set. Setting it to 0xFF ensures compatibility with formats\n        // that might expect this specific marker for negative binary values.\n        // For positive numbers, explicitly setting the high bit to 1 (0x80) marks it as binary.\n        buf[offset] = (byte) (negative ? 0xff : 0x80);\n        return offset + length;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}