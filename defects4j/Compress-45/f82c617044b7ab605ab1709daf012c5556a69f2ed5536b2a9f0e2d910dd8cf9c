{
    "generation": "public static int formatLongOctalOrBinaryBytes(\n    final long value, final byte[] buf, final int offset, final int length) {\n\n    // Check whether we are dealing with UID/GID or SIZE field\n    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n    final boolean negative = value < 0;\n    if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n        return formatLongOctalBytes(value, buf, offset, length);\n    }\n\n    if (length < 9) {\n        // within 8 bytes, must be encoded as classic binary representation (signed two's complement)\n        final long maxValue = (1L << (length * 8 - 1)) -1;\n        final long minValue = -(1L << (length * 8 -1));\n        if (value < minValue || value > maxValue) {\n            throw new IllegalArgumentException(\"Value \" + value + \" is too large for \" + length + \" byte field.\");\n        }\n        formatLongBinary(value, buf, offset, length, negative);\n    } else {\n        formatBigIntegerBinary(value, buf, offset, length, negative);\n    }\n\n    buf[offset] = (byte)(negative ? 0xFF : 0x80);\n    return offset + length;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}