{
    "generation": "    /**\n     * Write an long integer into a buffer as an octal string if this\n     * will fit, or as a binary number otherwise.\n     *\n     * Uses {@link #formatUnsignedOctalString} to format\n     * the value as an octal string with leading zeros.\n     * The converted number is followed by a space.\n     *\n     * The binary format is the Base-256 format defined in the\n     * POSIX.1-2001 standard: The highest bit of the first byte is\n     * set to indicate a binary number. The number itself is stored\n     * in the remaining bits of the field using two's complement\n     * representation.\n     *\n     * @param value The value to write into the buffer.\n     * @param buf The destination buffer.\n     * @param offset The starting offset into the buffer.\n     * @param length The length of the buffer.\n     * @return The updated offset.\n     * @throws IllegalArgumentException if the value (and trailer)\n     * will not fit in the buffer, either using octal or binary format.\n     * @since 1.4\n     */\n    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        // Try octal first\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            // formatLongOctalBytes includes the trailing space/NUL\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        // Octal failed, use POSIX Base-256 binary format.\n        // Check if the value fits using standard two's complement representation\n        // within the available length bytes. The MSB of the whole field determines the sign.\n        final long max = (1L << (length * 8 - 1)) - 1; // Max positive value for length bytes (using two's complement)\n        final long min = -(1L << (length * 8 - 1));    // Min negative value for length bytes (using two's complement)\n\n        if (value < min || value > max) {\n             throw new IllegalArgumentException(\"Value \" + value + \" is too large for \" + length + \" byte field.\");\n        }\n\n        // Write the value in two's complement representation into the buffer.\n        // formatBigIntegerBinary handles the conversion.\n        // It must write exactly 'length' bytes.\n        formatBigIntegerBinary(value, buf, offset, length, negative);\n\n        // Mark the field as binary by setting the high-order bit of the first byte.\n        // This is consistent with the POSIX standard for pax interchange format.\n        // For negative numbers, the MSB is already 1, so |= 0x80 is a no-op.\n        // For positive numbers, the MSB is 0, so |= 0x80 sets the binary flag.\n        buf[offset] |= (byte) 0x80;\n\n        return offset + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}