{
    "generation": "/**\n * Write a long integer into a buffer as an octal string if this\n * will fit, or as a binary number otherwise.\n * \n * Uses {@link #formatUnsignedOctalString} to format\n * the value as an octal string with leading zeros.\n * The converted number is followed by a space.\n * \n * @param value  The value to write into the buffer.\n * @param buf     The destination buffer.\n * @param offset  The starting offset into the buffer.\n * @param length  The length of the buffer.\n * @return The updated offset.\n * @throws IllegalArgumentException if the value (and trailer)\n *         will not fit in the buffer.\n * @since 1.4\n */\npublic static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n    // Check whether we are dealing with UID/GID or SIZE field\n    final long maxAsOctalChar = length == TarConstants.UIDLEN\n            ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n    final boolean negative = value < 0;\n    if (!negative && value <= maxAsOctalChar) {\n        // OK to store as octal chars\n        return formatLongOctalBytes(value, buf, offset, length);\n    }\n\n    // Otherwise store as binary\n    if (length < 9) {\n        formatLongBinary(value, buf, offset, length, negative);\n    } else {\n        formatBigIntegerBinary(value, buf, offset, length, negative);\n    }\n\n    // Ensure that the \"signal\" bit is set in the first byte.\n    buf[offset] = (byte) (negative ? 0xFF : 0x80);\n    return offset + length;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}