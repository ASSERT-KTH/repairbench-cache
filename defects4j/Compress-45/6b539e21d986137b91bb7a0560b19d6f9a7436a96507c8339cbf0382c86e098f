{
    "generation": "    /**\n     * Write an long integer into a buffer as an octal string if this\n     * will fit, or as a binary number otherwise.\n     * \n     * Uses {@link #formatUnsignedOctalString} to format\n     * the value as an octal string with leading zeros.\n     * The converted number is followed by a space.\n     * \n     * @param value The value to write into the buffer.\n     * @param buf The destination buffer.\n     * @param offset The starting offset into the buffer.\n     * @param length The length of the buffer.\n     * @return The updated offset.\n     * @throws IllegalArgumentException if the value (and trailer)\n     * will not fit in the buffer.\n     * @since 1.4\n     */\n    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        // --- Binary representation logic ---\n\n        // Determine if the value can fit within 'length - 1' bytes (after accounting for the 0x80/0xFF marker byte).\n        // This is necessary because formatBigIntegerBinary and formatLongBinary typically reserve the first byte.\n        // For a signed 7-byte value: max is 2^55 - 1, min is -2^55.\n        final long max7ByteValue = (1L << (7 * 8 - 1)) - 1; // 2^55 - 1\n        final long min7ByteValue = -(1L << (7 * 8 - 1));    // -2^55\n\n        // Special case for 8-byte fields (UIDLEN/SIZELEN) and values that don't fit into 7 bytes\n        // but fit into a full 8-byte long. This is a GNU tar extension for large numbers.\n        if (length == 8 && (value < min7ByteValue || value > max7ByteValue)) {\n            // Write the long directly as an 8-byte two's complement number.\n            // In this case, the first byte is part of the number, not a special marker.\n            for (int i = 0; i < 8; i++) {\n                buf[offset + 7 - i] = (byte) (value & 0xff);\n                value >>= 8;\n            }\n            return offset + length;\n        }\n\n        // For all other binary cases (lengths other than 8, or length 8 where\n        // the value fits in 7 bytes for the magnitude), use the BigInteger binary formatter.\n        // This formatter handles the 0x80/0xFF prefix byte and converts the value\n        // into the remaining `length - 1` bytes. It will throw IllegalArgumentException\n        // if the value's magnitude does not fit in `length - 1` bytes.\n        formatBigIntegerBinary(value, buf, offset, length, negative);\n        \n        // The original line below is removed because formatBigIntegerBinary already sets\n        // the header byte, and the 8-byte direct write case does not use it.\n        // buf[offset] = (byte) (negative ? 0xff : 0x80); \n        \n        return offset + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}