{
    "generation": "    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        // Must store as binary\n        if (length < 9) {\n            // Fields with length < 9 bytes (e.g., 1 to 8 bytes) cannot hold a full\n            // 8-byte (64-bit) long value plus a 1-byte sign/marker.\n            // In these cases, use formatBigIntegerBinary which can handle arbitrary\n            // precision numbers and will correctly check if the value fits within\n            // the available (length - 1) bytes, throwing IllegalArgumentException if not.\n            formatBigIntegerBinary(value, buf, offset, length, negative);\n        } else {\n            // Fields with length >= 9 bytes (e.g., 9 or more bytes) can hold a full\n            // 8-byte (64-bit) long value plus a 1-byte sign/marker (length - 1 >= 8).\n            // Use formatLongBinary, which is optimized for long values.\n            formatLongBinary(value, buf, offset, length, negative);\n        }\n\n        buf[offset] = (byte) (negative ? 0xff : 0x80);\n        return offset + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}