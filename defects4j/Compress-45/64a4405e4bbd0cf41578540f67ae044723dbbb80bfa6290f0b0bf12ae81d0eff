{
    "generation": "    /**\n     * Write an long integer into a buffer as an octal string if this\n     * will fit, or as a binary number otherwise.\n     * \n     * Uses {@link #formatUnsignedOctalString} to format\n     * the value as an octal string with leading zeros.\n     * The converted number is followed by a space.\n     * \n     * @param value The value to write into the buffer.\n     * @param buf The destination buffer.\n     * @param offset The starting offset into the buffer.\n     * @param length The length of the buffer.\n     * @return The updated offset.\n     * @throws IllegalArgumentException if the value (and trailer)\n     * will not fit in the buffer.\n     * @since 1.4\n     */\n    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        // Binary path\n        // The test failure (for length=8, negative value) indicates that formatLongBinary\n        // is not suitable for all 8-byte fields when they are negative.\n        // Therefore, for negative values or for lengths >= 9 (where BigInteger is typically preferred),\n        // formatBigIntegerBinary should be used. Otherwise, use formatLongBinary.\n        if (negative || length >= 9) {\n            formatBigIntegerBinary(value, buf, offset, length, negative);\n        } else {\n            formatLongBinary(value, buf, offset, length, negative);\n        }\n\n        // The formatLongBinary and formatBigIntegerBinary methods already set\n        // the first byte (0xff for negative, 0x80 for positive).\n        // So, the following line is redundant and can be removed.\n        // buf[offset] = (byte) (negative ? 0xff : 0x80);\n\n        return offset + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}