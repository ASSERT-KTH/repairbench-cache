{
    "generation": "    /**\n     * Write an long integer into a buffer as an octal string if this\n     * will fit, or as a binary number otherwise.\n     *\n     * Uses {@link #formatUnsignedOctalString} to format\n     * the value as an octal string with leading zeros.\n     * The converted number is followed by a space.\n     *\n     * @param value The value to write into the buffer.\n     * @param buf The destination buffer.\n     * @param offset The starting offset into the buffer.\n     * @param length The length of the buffer.\n     * @return The updated offset.\n     * @throws IllegalArgumentException if the value (and trailer)\n     * will not fit in the buffer.\n     * @since 1.4\n     */\n    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        if (length < 9) {\n            throw new IllegalArgumentException(\"Value \" + value + \" is too large for \" + length + \" byte field.\");\n        }\n\n        final int result;\n        if (length == 8) { // UID/GID fields (8 bytes) are always stored as octal\n            if (negative) {\n                throw new IllegalArgumentException(\"Value \" + value + \" is negative and cannot be stored in octal in an 8 byte field.\");\n            }\n            if (value > maxAsOctalChar) {\n                throw new IllegalArgumentException(\"Value \" + value + \" is too large for \" + length + \" byte field.\");\n            }\n            result = formatLongOctalBytes(value, buf, offset, length);\n        } else {\n            formatBigIntegerBinary(value, buf, offset, length, negative);\n            buf[offset] = (byte) (negative ? 0xff : 0x80);\n            result = offset + length;\n        }\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}