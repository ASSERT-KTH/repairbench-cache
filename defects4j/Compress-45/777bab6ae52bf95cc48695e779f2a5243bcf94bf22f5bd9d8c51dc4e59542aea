{
    "generation": "    /**\n     * Write a long integer into a buffer as an octal string if this\n     * will fit, or as a binary number otherwise.\n     * \n     * Uses {@link #formatUnsignedOctalString} to format\n     * the value as an octal string with leading zeros.\n     * The converted number is followed by a space.\n     * \n     * @param value The value to write into the buffer.\n     * @param buf The destination buffer.\n     * @param offset The starting offset into the buffer.\n     * @param length The length of the buffer.\n     * @return The updated offset.\n     * @throws IllegalArgumentException if the value (and trailer)\n     * will not fit in the buffer.\n     * @since 1.4\n     */\n    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        // If not octal, then binary.\n        // Choose the correct binary format based on the field type/length.\n        // UID/GID/Mode/Checksum fields (typically 8 bytes) use formatLongBinary.\n        // Size field (typically 12 bytes) uses formatBigIntegerBinary with a prefix.\n        if (length == TarConstants.UIDLEN || length == TarConstants.GIDLEN || length == TarConstants.CHKLEN || length == TarConstants.MODLEN) {\n            formatLongBinary(value, buf, offset, length, negative);\n        } else {\n            // This covers the SIZE field (length=12) and other fields that use the 0x80/0xFF prefix scheme.\n            formatBigIntegerBinary(value, buf, offset, length, negative);\n        }\n        \n        // The original line below is removed because:\n        // 1. formatBigIntegerBinary already sets buf[offset].\n        // 2. formatLongBinary does not use such a prefix, so setting it here would be wrong.\n        // buf[offset] = (byte) (negative ? 0xff : 0x80);\n        \n        return offset + length;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}