{
    "generation": "    /**\n     * Write a long integer into a buffer as an octal string if this\n     * will fit, or as a binary number otherwise.\n     * \n     * Uses {@link #formatUnsignedOctalString} to format\n     * the value as an octal string with leading zeros.\n     * The converted number is followed by a space.\n     * \n     * @param value The value to write into the buffer.\n     * @param buf The destination buffer.\n     * @param offset The starting offset into the buffer.\n     * @param length The length of the buffer.\n     * @return The updated offset.\n     * @throws IllegalArgumentException if the value (and trailer)\n     * will not fit in the buffer.\n     * @since 1.4\n     */\n    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        // If not formatted as octal, format as binary.\n        // Due to a bug in formatLongBinary's bounds checking (using octal maxes for binary fields),\n        // it's safer to always use formatBigIntegerBinary for binary representation,\n        // as it handles value conversions to BigInteger and provides correct range checks.\n        formatBigIntegerBinary(value, buf, offset, length, negative);\n\n        // This byte indicates a binary field (0xff for negative, 0x80 for positive)\n        // It's placed at the beginning of the field.\n        buf[offset] = (byte) (negative ? 0xff : 0x80);\n        return offset + length;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}