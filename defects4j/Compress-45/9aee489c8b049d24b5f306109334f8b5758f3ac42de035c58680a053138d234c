{
    "generation": "public static int formatLongOctalOrBinaryBytes(final long value, final byte[] buf, final int offset, final int length) {\n    // Check whether we are dealing with UID/GID or SIZE field\n    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n    final boolean negative = value < 0;\n\n    // If the value fits in octal then use that format.\n    if (!negative && value <= maxAsOctalChar) {\n        return formatLongOctalBytes(value, buf, offset, length);\n    }\n\n    // Otherwise use binary representation.\n    // Use formatLongBinary for short fields, and formatBigIntegerBinary for longer ones.\n    if (length < 9) {\n        formatLongBinary(value, buf, offset, length, negative);\n    } else {\n        formatBigIntegerBinary(value, buf, offset, length, negative);\n    }\n\n    // Set the leading byte marker: 0x80 for positive, 0xff for negative.\n    buf[offset] = (byte) (negative ? 0xff : 0x80);\n    return offset + length;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}