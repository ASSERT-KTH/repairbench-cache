{
    "generation": "    /**\n     * Write an long integer into a buffer as an octal string if this\n     * will fit, or as a binary number otherwise.\n     * \n     * Uses {@link #formatUnsignedOctalString} to format\n     * the value as an octal string with leading zeros.\n     * The converted number is followed by a space.\n     * \n     * @param value The value to write into the buffer.\n     * @param buf The destination buffer.\n     * @param offset The starting offset into the buffer.\n     * @param length The length of the buffer.\n     * @return The updated offset.\n     * @throws IllegalArgumentException if the value (and trailer)\n     * will not fit in the buffer.\n     * @since 1.4\n     */\n    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        // If the value does not fit as an octal string (e.g., it's negative or too large),\n        // it must be stored as a binary number.\n        // The choice between formatLongBinary and formatBigIntegerBinary depends on the field length.\n        // - formatLongBinary is typically for fields up to 8 bytes, representing a standard long value.\n        // - formatBigIntegerBinary is for fields of 9 bytes or more, potentially requiring a BigInteger\n        //   representation or a larger binary format.\n        if (length < 9) { // For lengths 1 to 8 (e.g., UID/GID fields which are 8 bytes)\n            formatLongBinary(value, buf, offset, length, negative);\n        } else { // For lengths 9 or more (e.g., SIZE fields which are 12 bytes)\n            formatBigIntegerBinary(value, buf, offset, length, negative);\n        }\n\n        // The first byte of a binary-encoded field indicates the type:\n        // 0xFF for negative, 0x80 for positive.\n        // This byte is set after the actual binary value is written to the buffer,\n        // implying that formatLongBinary and formatBigIntegerBinary write\n        // the actual value to buf[offset+1] through buf[offset+length-1].\n        buf[offset] = (byte) (negative ? 0xff : 0x80);\n        return offset + length;\n    }\n",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}