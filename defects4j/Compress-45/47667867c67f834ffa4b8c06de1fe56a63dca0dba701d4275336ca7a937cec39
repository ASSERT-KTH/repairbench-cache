{
    "generation": "    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        // Determine if the value can be represented as an octal string\n        if (value >= 0 && value <= maxAsOctalChar) { // OK to store as octal chars\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        // If the value is negative or too large for octal, format as binary\n        if (length < 9) {\n            formatLongBinary(value, buf, offset, length, value < 0);\n        } else {\n            formatBigIntegerBinary(value, buf, offset, length, value < 0);\n        }\n\n        // Set the sign bit\n        buf[offset] = (byte) (value < 0 ? 0xff : 0x80);\n        return offset + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}