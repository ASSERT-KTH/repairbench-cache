{
    "generation": "    /**\n     * Write an long integer into a buffer as an octal string if this\n     * will fit, or as a binary number otherwise.\n     * \n     * Uses {@link #formatUnsignedOctalString} to format\n     * the value as an octal string with leading zeros.\n     * The converted number is followed by a space.\n     * \n     * @param value The value to write into the buffer.\n     * @param buf The destination buffer.\n     * @param offset The starting offset into the buffer.\n     * @param length The length of the buffer.\n     * @return The updated offset.\n     * @throws IllegalArgumentException if the value (and trailer)\n     * will not fit in the buffer.\n     * @since 1.4\n     */\n    public static int formatLongOctalOrBinaryBytes(\n        final long value, final byte[] buf, final int offset, final int length) {\n\n        // Check whether we are dealing with UID/GID or SIZE field\n        final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n        final boolean negative = value < 0;\n        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars\n            // formatLongOctalBytes calls formatOctalBytes which handles the trailing space/NUL\n            return formatLongOctalBytes(value, buf, offset, length);\n        }\n\n        // If value is negative or too large for octal, use binary representation.\n        // Binary representation in TAR uses two's complement with the highest bit of the first byte set.\n        if (length < 9) {\n            // Handles standard fields like size, mtime, uid, gid (typically 8 bytes)\n            // Writes the two's complement representation to buf[offset..offset+length-1]\n            formatLongBinary(value, buf, offset, length, negative);\n        } else {\n            // Handles potentially larger fields (e.g., PAX extended headers)\n            // Writes the two's complement representation to buf[offset..offset+length-1]\n            formatBigIntegerBinary(value, buf, offset, length, negative);\n        }\n\n        // Mark the field as binary:\n        // Set the high bit of the first byte (buf[offset]) to 1.\n        // For negative numbers, the standard TAR format (GNU and PAX) uses two's complement,\n        // where the first byte will already have the high bit set (often 0xFF).\n        // For positive numbers, the first byte needs the high bit set explicitly (0x80).\n        // The original code uses a specific logic: 0xFF for negative, 0x80 for positive.\n        // This overwrites the first byte written by the format*Binary methods but ensures\n        // compatibility with the corresponding parse method.\n        buf[offset] = (byte) (negative ? 0xff : 0x80);\n        return offset + length;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}