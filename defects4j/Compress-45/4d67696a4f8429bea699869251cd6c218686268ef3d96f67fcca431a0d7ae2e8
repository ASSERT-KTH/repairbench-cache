{
    "generation": "public static int formatLongOctalOrBinaryBytes(\n    final long value, final byte[] buf, final int offset, final int length) {\n\n    final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;\n\n    final boolean negative = value < 0;\n    if (!negative && value <= maxAsOctalChar) { \n        return formatLongOctalBytes(value, buf, offset, length);\n    }\n\n    if (length < 8) {\n        throw new IllegalArgumentException(\"Buffer too small to store binary long value\");\n    } else if (length == 8) {\n        formatLongBinary(value, buf, offset, length, negative);\n        return offset + length;\n    } else {\n        // For lengths greater than 8, use big integer binary with a trailer byte\n        formatBigIntegerBinary(value, buf, offset, length, negative);\n        buf[offset] = (byte) (negative ? 0xff : 0x80);\n        return offset + length;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}