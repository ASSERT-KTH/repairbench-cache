{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    int len = pattern.length();\n    char[] c = pattern.toCharArray();\n\n    // Handle two consecutive single\u2010quotes as an escaped literal quote.\n    if (escapingOn\n            && start + 1 < len\n            && c[start] == QUOTE\n            && c[start + 1] == QUOTE) {\n        pos.setIndex(start + 2);\n        if (appendTo != null) {\n            appendTo.append(QUOTE);\n        }\n        return appendTo;\n    }\n\n    // Otherwise this is a real opening quote; skip it.\n    pos.setIndex(start + 1);\n    int index = pos.getIndex();\n    int lastHold = index;\n\n    while (index < len) {\n        // Inside quoted string, two quotes in a row => literal quote\n        if (escapingOn\n                && index + 1 < len\n                && c[index] == QUOTE\n                && c[index + 1] == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, index - lastHold)\n                        .append(QUOTE);\n            }\n            index += 2;\n            pos.setIndex(index);\n            lastHold = index;\n            continue;\n        }\n        // End of quoted string\n        if (c[index] == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, index - lastHold);\n            }\n            pos.setIndex(index + 1);\n            return appendTo;\n        }\n        index++;\n    }\n\n    // If we get here, we never saw a closing quote.\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}