{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex(); // Position of the first quote ' encountered by caller\n        char[] c = pattern.toCharArray(); // Use char array for efficient access\n\n        // Check if the sequence is an escaped quote '' only if escaping is enabled\n        // An escaped quote occurs when the current char is QUOTE and the next is also QUOTE\n        if (escapingOn && c[start] == QUOTE && start + 1 < pattern.length() && c[start + 1] == QUOTE) {\n            // It's an escaped quote sequence ''\n            if (appendTo != null) {\n                // Append a single literal quote, representing the escaped sequence\n                appendTo.append(QUOTE); \n            }\n            // Advance position past the two quotes ''\n            // Assumes ESCAPED_QUOTE is \"''\", length 2\n            pos.setIndex(start + 2); \n            return appendTo; // Return buffer after handling the escaped quote\n        }\n\n        // It's the start of a quoted string literal '...'\n        next(pos); // Consume the opening quote '\n        \n        int lastHold = pos.getIndex(); // Remember the start index of the content inside quotes\n\n        // Loop through the pattern starting from the character after the opening quote\n        while (pos.getIndex() < pattern.length()) {\n            int currentIndex = pos.getIndex();\n\n            // Check for escaped quote '' inside the literal, but only if escaping is on\n            if (escapingOn && c[currentIndex] == QUOTE && currentIndex + 1 < pattern.length() && c[currentIndex + 1] == QUOTE) {\n                // Append the segment of text gathered so far (before the escaped quote '')\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, currentIndex - lastHold);\n                    // Append a single literal quote ' which represents the escaped ''\n                    appendTo.append(QUOTE);\n                }\n                \n                // Advance parser position past the escaped quote '' sequence\n                pos.setIndex(currentIndex + 2); \n                // Update the starting point for the next text segment\n                lastHold = pos.getIndex(); \n            } \n            // Check for the closing quote '\n            else if (c[currentIndex] == QUOTE) {\n                // Found the closing quote ' for the literal segment\n                // Append the final segment of text before the closing quote\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, currentIndex - lastHold);\n                }\n                // Advance position past the closing quote\n                next(pos); // pos index becomes currentIndex + 1\n                return appendTo; // Quoted string parsing finished successfully\n            } \n            // Default: The character is a regular character inside the quoted string\n            else {\n                // Just advance the position to the next character, content will be appended later in segments\n                next(pos); \n            }\n        }\n\n        // If the loop finishes without finding a closing quote, the string is malformed\n        // Throw exception indicating where the unterminated quoted string began\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }\n\n    // Helper methods/constants assumed to exist in the class:\n    // private static final char QUOTE = '\\'';\n    // // Assuming ESCAPED_QUOTE = \"''\", but the code uses char checks directly\n    // private static final String ESCAPED_QUOTE = \"''\"; \n    // private void next(ParsePosition pos) { pos.setIndex(pos.getIndex() + 1); }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}