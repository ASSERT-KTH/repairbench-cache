{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    int len = pattern.length();\n    char[] chars = pattern.toCharArray();\n\n    // The character at the current position must be the opening quote.\n    if (pos.getIndex() >= len || chars[pos.getIndex()] != QUOTE) {\n        throw new IllegalArgumentException(\"Quoted string must start with a quote at position \" + pos.getIndex());\n    }\n    // Skip the opening quote.\n    pos.setIndex(pos.getIndex() + 1);\n    int lastHold = pos.getIndex();\n\n    while (pos.getIndex() < len) {\n        // If escaping is on and the upcoming text matches the escape sequence (i.e. two quotes),\n        // append a literal quote and skip the escape.\n        if (escapingOn \n                && pos.getIndex() + ESCAPED_QUOTE.length() <= len\n                && pattern.substring(pos.getIndex(), pos.getIndex() + ESCAPED_QUOTE.length()).equals(ESCAPED_QUOTE)) {\n            if (appendTo != null) {\n                appendTo.append(chars, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n            }\n            pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n            lastHold = pos.getIndex();\n            continue;\n        }\n        // A single quote here terminates the quoted string.\n        if (chars[pos.getIndex()] == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(chars, lastHold, pos.getIndex() - lastHold);\n            }\n            pos.setIndex(pos.getIndex() + 1); // skip the closing quote\n            return appendTo;\n        }\n        // Otherwise, move to the next character.\n        pos.setIndex(pos.getIndex() + 1);\n    }\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}