{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    int len = pattern.length();\n    \n    // If this is an escaped quote (two consecutive quotes), consume both and return one quote.\n    if (escapingOn && start + 1 < len && pattern.startsWith(ESCAPED_QUOTE, start)) {\n        pos.setIndex(start + ESCAPED_QUOTE.length());\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n    \n    // The quoted string must start with a quote.\n    if (pattern.charAt(start) != QUOTE) {\n        throw new IllegalArgumentException(\"Quoted string must start with a quote at position \" + start);\n    }\n    \n    // Skip the opening quote.\n    pos.setIndex(start + 1);\n    int last = pos.getIndex();\n    \n    while (pos.getIndex() < len) {\n        // Handle escaped quote inside a quoted literal.\n        if (escapingOn && pos.getIndex() + 1 < len && pattern.startsWith(ESCAPED_QUOTE, pos.getIndex())) {\n            if (appendTo != null) {\n                appendTo.append(pattern.substring(last, pos.getIndex()));\n                appendTo.append(QUOTE);\n            }\n            pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n            last = pos.getIndex();\n            continue;\n        }\n        char ch = pattern.charAt(pos.getIndex());\n        pos.setIndex(pos.getIndex() + 1);\n        if (ch == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(pattern.substring(last, pos.getIndex() - 1));\n            }\n            return appendTo;\n        }\n    }\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}