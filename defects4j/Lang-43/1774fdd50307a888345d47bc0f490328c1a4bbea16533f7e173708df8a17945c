{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    int length = pattern.length();\n    // 1) Handle escaped quote at the very beginning: two consecutive single quotes => one literal quote\n    if (escapingOn\n            && start + 1 < length\n            && pattern.charAt(start) == QUOTE\n            && pattern.charAt(start + 1) == QUOTE) {\n        pos.setIndex(start + 2);\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n    // 2) Otherwise this is the start of a quoted literal. Skip the opening quote.\n    pos.setIndex(start + 1);\n    int i = pos.getIndex();\n    while (i < length) {\n        char ch = pattern.charAt(i);\n        // 2a) Escaped quote inside a quoted string => append one quote and skip both\n        if (escapingOn\n                && ch == QUOTE\n                && i + 1 < length\n                && pattern.charAt(i + 1) == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(QUOTE);\n            }\n            i += 2;\n            continue;\n        }\n        // 2b) Closing quote => consume it and return\n        if (ch == QUOTE) {\n            pos.setIndex(i + 1);\n            return appendTo == null ? null : appendTo;\n        }\n        // 2c) Ordinary character inside quotes\n        if (appendTo != null) {\n            appendTo.append(ch);\n        }\n        i++;\n    }\n    // If we reach here, no closing quote was found\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}