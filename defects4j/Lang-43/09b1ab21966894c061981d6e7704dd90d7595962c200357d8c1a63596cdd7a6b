{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex(); // Store original start for error message\n        char[] c = pattern.toCharArray(); // For efficient character access\n\n        // The method is expected to be called when pos.getIndex() points to the opening quote.\n        // Consume the opening quote.\n        next(pos);\n\n        // lastHold marks the beginning of the actual content segment to be appended.\n        // It starts immediately after the opening quote.\n        int lastHold = pos.getIndex(); \n\n        // Loop through the characters inside the quoted string\n        while (pos.getIndex() < pattern.length()) {\n            // Check for escaped quote sequence \"''\"\n            // We use substring().startsWith() to check for the two-character sequence.\n            if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {\n                // Append the characters collected since the last append point (lastHold)\n                // up to the current position (before the escaped quote).\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n                // Append a single QUOTE character, as the escaped sequence \"''\" represents one '.\n                appendTo.append(QUOTE);\n                // Advance the parse position past both characters of the escaped quote (\"''\").\n                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n                // Update lastHold to the new current position, as characters before it have been appended.\n                lastHold = pos.getIndex();\n                continue; // Move to the next iteration to process characters after the escaped quote\n            }\n\n            // Check for the closing quote character\n            if (c[pos.getIndex()] == QUOTE) {\n                // Found the closing QUOTE. Append any remaining characters\n                // from lastHold up to this closing quote.\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n                // Consume the closing QUOTE character.\n                next(pos);\n                // The quoted string has been successfully parsed. Return the StringBuffer.\n                return appendTo;\n            }\n\n            // Default case: It's a regular character within the quoted string.\n            // Just advance the parse position to the next character.\n            next(pos);\n        }\n\n        // If the loop finishes, it means a closing quote was not found before the end of the pattern string.\n        // This indicates an unterminated quoted string, which is an error.\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}