{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    int len = c.length;\n    // Handle escaped quote: two single\u2010quotes yield one literal quote\n    if (escapingOn && start + 1 < len && c[start] == QUOTE && c[start + 1] == QUOTE) {\n        pos.setIndex(start + 2);\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n    // Handle a quoted literal: skip the opening quote\n    pos.setIndex(start + 1);\n    int lastHold = pos.getIndex();\n    while (pos.getIndex() < len) {\n        int i = pos.getIndex();\n        // Check for escaped quote inside the literal\n        if (escapingOn && i + 1 < len && c[i] == QUOTE && c[i + 1] == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n            }\n            pos.setIndex(i + 2);\n            lastHold = pos.getIndex();\n        }\n        // Check for closing quote\n        else if (c[i] == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, i - lastHold);\n            }\n            pos.setIndex(i + 1);\n            return appendTo == null ? null : appendTo;\n        }\n        // Regular character inside the literal\n        else {\n            pos.setIndex(i + 1);\n        }\n    }\n    // No closing quote found\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}