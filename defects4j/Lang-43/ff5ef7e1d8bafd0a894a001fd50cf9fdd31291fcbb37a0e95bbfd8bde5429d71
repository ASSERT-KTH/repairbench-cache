{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n\n    // Skip opening quote\n    if (escapingOn && c[start] == QUOTE) {\n        next(pos); // move past opening quote\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n\n    int lastHold = pos.getIndex();\n\n    for (int i = pos.getIndex(); i < pattern.length(); ) {\n        if (escapingOn && pattern.regionMatches(i, ESCAPED_QUOTE, 0, ESCAPED_QUOTE.length())) {\n            // Append characters since lastHold\n            if (appendTo != null && i > lastHold) {\n                appendTo.append(c, lastHold, i - lastHold);\n            }\n            if (appendTo != null) {\n                appendTo.append(QUOTE);\n            }\n            i += ESCAPED_QUOTE.length();\n            pos.setIndex(i);\n            lastHold = i;\n            continue;\n        }\n        char ch = c[i];\n        if (ch == QUOTE) {\n            // End of quoted string\n            if (appendTo != null && i > lastHold) {\n                appendTo.append(c, lastHold, i - lastHold);\n            }\n            next(pos); // move past closing quote\n            return appendTo;\n        }\n        next(pos);\n        i = pos.getIndex();\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}