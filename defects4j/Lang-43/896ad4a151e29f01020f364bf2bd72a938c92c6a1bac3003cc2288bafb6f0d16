{
    "generation": "    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        int patternLength = pattern.length();\n        if (escapingOn && start < patternLength - 1 && c[start] == QUOTE && c[start + 1] == QUOTE) {\n            // Escaped quote: ''\n            if (appendTo != null) {\n                appendTo.append(QUOTE);\n            }\n            pos.setIndex(start + 2);\n            return appendTo;\n        }\n        if (escapingOn && c[start] == QUOTE) {\n            // A single quote at start: '\n            pos.setIndex(start + 1);\n            return appendTo;\n        }\n        int lastHold = start;\n        for (int i = pos.getIndex(); i < patternLength; ) {\n            if (escapingOn\n                    && i < patternLength - 1\n                    && c[i] == QUOTE\n                    && c[i + 1] == QUOTE) {\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n                }\n                i += 2;\n                pos.setIndex(i);\n                lastHold = i;\n                continue;\n            }\n            if (c[i] == QUOTE) {\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, i - lastHold);\n                }\n                pos.setIndex(i + 1);\n                return appendTo;\n            }\n            i++;\n            pos.setIndex(i);\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}