{
    "generation": "    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        if (escapingOn && c[start] == QUOTE) {\n            pos.setIndex(start + 1); // Adjust the position to skip the initial quote\n            return appendTo == null ? null : appendTo.append(QUOTE);\n        }\n        int lastHold = start;\n        for (int i = pos.getIndex(); i < pattern.length(); i = pos.getIndex()) { // Adjust loop to use pos.getIndex()\n            char currentChar = c[i];\n            if (escapingOn && i + 1 < pattern.length() && currentChar == QUOTE && c[i + 1] == QUOTE) {\n                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n                pos.setIndex(i + 2); // Skip the escaped quote\n                lastHold = pos.getIndex();\n                continue;\n            }\n            switch (currentChar) {\n            case QUOTE:\n                if (escapingOn && i + 1 < pattern.length() && c[i + 1] == QUOTE) {\n                    // Handle escaped quote\n                    appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n                    pos.setIndex(i + 2); // Skip the escaped quote\n                    lastHold = pos.getIndex();\n                } else {\n                    next(pos);\n                    return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1);\n                }\n                break;\n            default:\n                next(pos);\n            }\n        }\n        throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}