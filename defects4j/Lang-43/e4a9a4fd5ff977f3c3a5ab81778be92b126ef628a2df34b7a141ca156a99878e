{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] chars = pattern.toCharArray();\n    if (start >= pattern.length() || chars[start] != QUOTE) {\n        throw new IllegalArgumentException(\"Quoted string must start with a quote at position \" + start);\n    }\n    // If the opening two characters are quotes, that means an escaped quote.\n    if (escapingOn && start + 1 < pattern.length() && chars[start] == QUOTE && chars[start + 1] == QUOTE) {\n        pos.setIndex(start + 2);\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n    // Consume the opening quote.\n    pos.setIndex(start + 1);\n    int index = pos.getIndex();\n    int literalStart = index;\n    \n    while (index < pattern.length()) {\n        // If we see an escaped quote sequence (two single quotes), output one literal quote.\n        if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, index)) {\n            if (appendTo != null) {\n                appendTo.append(chars, literalStart, index - literalStart);\n                appendTo.append(QUOTE);\n            }\n            index += ESCAPED_QUOTE.length();\n            pos.setIndex(index);\n            literalStart = index;\n            continue;\n        }\n        // A single quote ends the quoted string.\n        if (chars[index] == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(chars, literalStart, index - literalStart);\n            }\n            pos.setIndex(index + 1);\n            return appendTo;\n        }\n        index++;\n        pos.setIndex(index);\n    }\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}