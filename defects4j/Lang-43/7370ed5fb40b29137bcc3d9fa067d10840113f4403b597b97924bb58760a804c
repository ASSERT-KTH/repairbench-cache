{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    final int start = pos.getIndex();\n    final int length = pattern.length();\n    // Handle escaped quote at beginning: two single\u2010quotes -> one literal quote\n    if (escapingOn\n            && start + ESCAPED_QUOTE.length() <= length\n            && pattern.startsWith(ESCAPED_QUOTE, start)) {\n        pos.setIndex(start + ESCAPED_QUOTE.length());\n        if (appendTo != null) {\n            appendTo.append(QUOTE);\n        }\n        return appendTo;\n    }\n    // Must be a starting single quote\n    if (start >= length || pattern.charAt(start) != QUOTE) {\n        return appendTo;\n    }\n    // Skip the opening quote\n    pos.setIndex(start + 1);\n    // Consume until closing quote\n    while (pos.getIndex() < length) {\n        int idx = pos.getIndex();\n        // Inside a quoted string, handle escaped quotes\n        if (escapingOn\n                && idx + ESCAPED_QUOTE.length() <= length\n                && pattern.startsWith(ESCAPED_QUOTE, idx)) {\n            // two single-quotes => one literal quote\n            pos.setIndex(idx + ESCAPED_QUOTE.length());\n            if (appendTo != null) {\n                appendTo.append(QUOTE);\n            }\n        } else if (pattern.charAt(idx) == QUOTE) {\n            // Found the closing quote\n            pos.setIndex(idx + 1);\n            return appendTo;\n        } else {\n            // Regular character inside quotes\n            if (appendTo != null) {\n                appendTo.append(pattern.charAt(idx));\n            }\n            pos.setIndex(idx + 1);\n        }\n    }\n    // If we get here, no closing quote was found\n    throw new IllegalArgumentException(\n        \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}