{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] chars = pattern.toCharArray();\n    int length = pattern.length();\n\n    // The character at pos must be a quote.\n    if (chars[pos.getIndex()] != '\\'') {\n        throw new IllegalArgumentException(\"Quoted string must start with a quote at position \" + pos.getIndex());\n    }\n\n    // Skip the opening quote.\n    pos.setIndex(pos.getIndex() + 1);\n    int lastHold = pos.getIndex();\n\n    while (pos.getIndex() < length) {\n        // If escaping is on and we have two consecutive quotes, that means an escaped quote.\n        if (escapingOn && pos.getIndex() < length - 1 \n                && chars[pos.getIndex()] == '\\'' && chars[pos.getIndex() + 1] == '\\'') {\n            if (appendTo != null) {\n                // Append the part before the doubled quote,\n                // then append a single quote literal.\n                appendTo.append(chars, lastHold, pos.getIndex() - lastHold);\n                appendTo.append('\\'');\n            }\n            // Skip over both quotes.\n            pos.setIndex(pos.getIndex() + 2);\n            lastHold = pos.getIndex();\n            continue;\n        }\n        // If we have a single quote, then this is the closing quote.\n        if (chars[pos.getIndex()] == '\\'') {\n            if (appendTo != null) {\n                // Append the text between the opening quote and this closing quote.\n                appendTo.append(chars, lastHold, pos.getIndex() - lastHold);\n            }\n            // Consume the closing quote.\n            pos.setIndex(pos.getIndex() + 1);\n            return appendTo;\n        }\n        // Otherwise, simply advance one character.\n        pos.setIndex(pos.getIndex() + 1);\n    }\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}