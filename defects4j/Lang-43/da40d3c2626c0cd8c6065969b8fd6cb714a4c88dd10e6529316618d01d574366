{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n\n    // Handle empty pattern or starting at or beyond pattern end\n    if (start >= c.length) {\n        throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n    }\n\n    if (escapingOn && c[start] == QUOTE) {\n        // It's just an escaped quote, consume it and append a single quote\n        pos.setIndex(start + 1);\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n\n    int lastHold = start;\n    int i = start;\n    while (i < pattern.length()) {\n        if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, i)) {\n            // Append chars from lastHold up to current position\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n            }\n            i += ESCAPED_QUOTE.length();\n            pos.setIndex(i);\n            lastHold = i;\n            continue;\n        }\n        char ch = pattern.charAt(i);\n        if (ch == QUOTE) {\n            i++;\n            pos.setIndex(i);\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, i - lastHold - 1);\n            }\n            return appendTo;\n        }\n        i++;\n        pos.setIndex(i);\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}