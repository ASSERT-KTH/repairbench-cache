{
    "generation": "    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        if (escapingOn && start < c.length && c[start] == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(QUOTE);\n            }\n            pos.setIndex(start + 1);\n            return appendTo;\n        }\n        int lastHold = start;\n        int currentIndex = start;\n        final int patternLength = pattern.length();\n        final int escapedQuoteLength = ESCAPED_QUOTE.length();\n\n        while (currentIndex < patternLength) {\n            if (escapingOn) {\n                if (currentIndex + escapedQuoteLength <= patternLength \n                        && pattern.startsWith(ESCAPED_QUOTE, currentIndex)) {\n                    if (appendTo != null) {\n                        appendTo.append(c, lastHold, currentIndex - lastHold).append(QUOTE);\n                    }\n                    currentIndex += escapedQuoteLength;\n                    lastHold = currentIndex;\n                    pos.setIndex(currentIndex);\n                    continue;\n                }\n            }\n\n            if (c[currentIndex] == QUOTE) {\n                currentIndex++;\n                pos.setIndex(currentIndex);\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, currentIndex - 1 - lastHold);\n                }\n                return appendTo;\n            }\n\n            currentIndex++;\n            pos.setIndex(currentIndex);\n        }\n\n        throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}