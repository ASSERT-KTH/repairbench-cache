{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position (should be positioned just after the opening quote)\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes ('' as ')\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        // pos is expected to be pointing at the character after the opening quote '\n        int start = pos.getIndex(); \n        char[] c = pattern.toCharArray(); // Convert once for efficient access\n        int lastHold = start;\n        int patternLen = pattern.length(); // Cache pattern length\n\n        while (pos.getIndex() < patternLen) {\n            int currentPos = pos.getIndex();\n            char currentChar = c[currentPos];\n\n            // Check for escaped quote ('') using the char array\n            // Need to check currentPos + 1 < patternLen to avoid IndexOutOfBoundsException\n            if (escapingOn && currentChar == QUOTE && currentPos + 1 < patternLen && c[currentPos + 1] == QUOTE) {\n                // Found an escaped quote ('')\n                if (appendTo != null) {\n                    // Append the segment of text before the escaped quote\n                    appendTo.append(c, lastHold, currentPos - lastHold);\n                    // Append the literal quote character itself (since '' means ')\n                    appendTo.append(QUOTE); \n                }\n                // Advance position past the escaped quote ('')\n                pos.setIndex(currentPos + 2); // Advance by 2 characters\n                // Update lastHold to the position immediately after the escaped quote\n                lastHold = pos.getIndex();\n            } else if (currentChar == QUOTE) {\n                // Found the closing quote (')\n                // Advance position past the closing quote. The loop terminates below.\n                next(pos); // Equivalent to pos.setIndex(currentPos + 1);\n\n                if (appendTo != null) {\n                    // Append the final segment of text before the closing quote\n                    appendTo.append(c, lastHold, currentPos - lastHold);\n                }\n                // Successfully consumed the quoted string, return the buffer\n                return appendTo; // Return the buffer (which might be null if it was null initially)\n            } else {\n                // It's a regular character inside the quotes, just advance the position\n                next(pos); // Equivalent to pos.setIndex(currentPos + 1);\n            }\n        }\n\n        // If the loop completes, it means we reached the end of the pattern \n        // without finding the closing quote.\n        throw new IllegalArgumentException(\n                // Adjust start index for message to point to the opening quote location\n                \"Unterminated quoted string starting at position \" + (start - 1)); \n    }\n\n    // Helper method assumed to exist from the original class context\n    private void next(ParsePosition pos) {\n        pos.setIndex(pos.getIndex() + 1);\n    }\n\n    // Constants assumed to exist from the original class context\n    // QUOTE is likely '\\''\n    private static final char QUOTE = '\\''; \n    // ESCAPED_QUOTE is likely \"''\" but not directly used in the fixed logic above\n    // private static final String ESCAPED_QUOTE = \"''\"; ",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}