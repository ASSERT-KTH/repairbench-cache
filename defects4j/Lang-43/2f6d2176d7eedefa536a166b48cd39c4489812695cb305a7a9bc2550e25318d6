{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    int len = pattern.length();\n    if (start >= len || pattern.charAt(start) != '\\'') {\n        throw new IllegalArgumentException(\n                \"Quoted string must start with a quote at position \" + start);\n    }\n    // If two quotes appear in a row, treat that as an escaped quote.\n    if (escapingOn && start + 1 < len && pattern.charAt(start + 1) == '\\'') {\n        pos.setIndex(start + 2);\n        return appendTo == null ? null : appendTo.append('\\'');\n    }\n    // Otherwise, it is a quoted literal: skip the opening quote.\n    pos.setIndex(start + 1);\n    int lastHold = pos.getIndex();\n    while (pos.getIndex() < len) {\n        int cur = pos.getIndex();\n        // If we see an escaped quote within the quoted literal, output one quote.\n        if (escapingOn && cur + 1 < len && pattern.charAt(cur) == '\\'' \n                && pattern.charAt(cur + 1) == '\\'') {\n            if (appendTo != null) {\n                appendTo.append(pattern, lastHold, cur);\n                appendTo.append('\\'');\n            }\n            pos.setIndex(cur + 2);\n            lastHold = pos.getIndex();\n            continue;\n        }\n        char ch = pattern.charAt(cur);\n        pos.setIndex(cur + 1);\n        if (ch == '\\'') { // found closing quote\n            if (appendTo != null) {\n                appendTo.append(pattern, lastHold, cur);\n            }\n            return appendTo;\n        }\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}