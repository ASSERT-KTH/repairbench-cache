{
    "generation": "/**\n * Consume a quoted string, adding it to <code>appendTo</code> if\n * specified.\n *\n * @param pattern pattern to parse\n * @param pos current parse position\n * @param appendTo optional StringBuffer to append\n * @param escapingOn whether to process escaped quotes\n * @return <code>appendTo</code>\n */\nprivate StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    int length = pattern.length();\n    // 1) two consecutive quotes => one literal quote\n    if (escapingOn\n            && start + ESCAPED_QUOTE.length() <= length\n            && pattern.startsWith(ESCAPED_QUOTE, start)) {\n        pos.setIndex(start + ESCAPED_QUOTE.length());\n        if (appendTo != null) {\n            appendTo.append(QUOTE);\n        }\n        return appendTo;\n    }\n    // 2) otherwise it's a quoted string delimited by single quotes\n    //    skip the opening quote\n    pos.setIndex(start + 1);\n    int lastHold = pos.getIndex();\n    while (pos.getIndex() < length) {\n        // 2a) escaped quote inside quoted string\n        if (escapingOn\n                && pos.getIndex() + ESCAPED_QUOTE.length() <= length\n                && pattern.startsWith(ESCAPED_QUOTE, pos.getIndex())) {\n            if (appendTo != null) {\n                // append text up to the escape\n                appendTo.append(pattern.substring(lastHold, pos.getIndex()));\n                // append one literal quote\n                appendTo.append(QUOTE);\n            }\n            // skip over the two-quote escape\n            pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n            lastHold = pos.getIndex();\n            continue;\n        }\n        char ch = pattern.charAt(pos.getIndex());\n        if (ch == QUOTE) {\n            // end of quoted string\n            if (appendTo != null) {\n                appendTo.append(pattern.substring(lastHold, pos.getIndex()));\n            }\n            // skip closing quote\n            pos.setIndex(pos.getIndex() + 1);\n            return appendTo;\n        }\n        // normal character inside quoted string\n        pos.setIndex(pos.getIndex() + 1);\n    }\n    // unterminated quoted string\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}