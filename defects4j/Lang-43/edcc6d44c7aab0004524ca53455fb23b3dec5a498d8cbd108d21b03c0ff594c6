{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        // Fix: only consume next char if the quote is not a start of escaped quote\n        if (escapingOn && c[start] == QUOTE) {\n            // If this is a double quote (''), it's an escaped quote, not the start of a quoted string\n            if ((start + 1) < c.length && c[start + 1] == QUOTE) {\n                // Do not treat as quoted string -- instead return or process normally\n                if (appendTo != null) {\n                    appendTo.append(QUOTE);\n                }\n                pos.setIndex(start + 2);\n                return appendTo;\n            }\n            // It is a lone quote, treat it as the start of a quoted string\n        }\n        int lastHold = start;\n        for (int i = pos.getIndex(); i < pattern.length(); ) {\n            if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, i)) {\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, i - lastHold);\n                    appendTo.append(QUOTE);\n                }\n                i += ESCAPED_QUOTE.length();\n                pos.setIndex(i);\n                lastHold = pos.getIndex();\n                continue;\n            }\n            if (c[i] == QUOTE) {\n                // End of quoted string\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, i - lastHold);\n                }\n                i++; // consume quote\n                pos.setIndex(i);\n                return appendTo;\n            } else {\n                i++;\n                pos.setIndex(i);\n            }\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}