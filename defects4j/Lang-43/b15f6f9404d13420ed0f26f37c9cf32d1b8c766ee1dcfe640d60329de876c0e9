{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex(); // `start` is the index of the opening quote.\n\n        // The first character must be the opening QUOTE. Consume it.\n        // The calling context of this method (e.g., ExtendedMessageFormat.parse)\n        // ensures that pos.getIndex() points to a QUOTE character.\n        next(pos); // Advance `pos` past the opening quote.\n\n        int lastHold = pos.getIndex(); // `lastHold` now marks the start of the content *inside* the quotes.\n\n        while (pos.getIndex() < pattern.length()) {\n            char current = pattern.charAt(pos.getIndex());\n\n            // Check for escaped quote `''`\n            // If escapingOn is true, and we find two consecutive quotes.\n            // ESCAPED_QUOTE is typically \"''\"\n            if (escapingOn\n                && current == QUOTE // Current character is a quote\n                && pos.getIndex() + 1 < pattern.length() // And there's at least one more character\n                && pattern.charAt(pos.getIndex() + 1) == QUOTE) { // And the next character is also a quote\n                \n                // Append the characters collected since lastHold up to the current position.\n                if (appendTo != null) {\n                    appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);\n                    appendTo.append(QUOTE); // Append a single quote for the escaped double quotes.\n                }\n                // Advance pos past the two escaped quotes.\n                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length()); // ESCAPED_QUOTE.length() is 2\n                lastHold = pos.getIndex(); // Update lastHold to the new current position.\n            }\n            // Check for closing quote `'`\n            else if (current == QUOTE) {\n                // Found the closing quote. Append any remaining text inside the quotes.\n                if (appendTo != null) {\n                    appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);\n                }\n                next(pos); // Advance pos past the closing quote.\n                return appendTo; // Successfully parsed the quoted string.\n            }\n            // Regular character\n            else {\n                // Just consume the character and continue.\n                next(pos); // Advance pos by 1.\n            }\n        }\n\n        // If the loop finishes without finding a closing quote, the string is unterminated.\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}