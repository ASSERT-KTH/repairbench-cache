{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    int len = pattern.length();\n\n    // If we are in escaping mode and the next two characters are a pair of quotes,\n    // interpret this as a literal quote and return it.\n    if (escapingOn && pos.getIndex() + 1 < len \n            && pattern.charAt(pos.getIndex()) == QUOTE \n            && pattern.charAt(pos.getIndex() + 1) == QUOTE) {\n        pos.setIndex(pos.getIndex() + 2);\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n\n    // Otherwise, treat the current quote as the start of a quoted string.\n    // Skip the opening quote.\n    pos.setIndex(pos.getIndex() + 1);\n    int lastHold = pos.getIndex();\n\n    while (pos.getIndex() < len) {\n        // Look for an escaped quote sequence inside the quoted string.\n        if (escapingOn && pos.getIndex() + 1 < len \n                && pattern.charAt(pos.getIndex()) == QUOTE \n                && pattern.charAt(pos.getIndex() + 1) == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(pattern, lastHold, pos.getIndex()).append(QUOTE);\n            }\n            pos.setIndex(pos.getIndex() + 2);\n            lastHold = pos.getIndex();\n            continue;\n        }\n        // If we hit a single quote, that terminates the quoted string.\n        if (pattern.charAt(pos.getIndex()) == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(pattern, lastHold, pos.getIndex());\n            }\n            pos.setIndex(pos.getIndex() + 1); // consume the closing quote\n            return appendTo;\n        }\n        // Otherwise, move on to the next character.\n        pos.setIndex(pos.getIndex() + 1);\n    }\n    \n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}