{
    "generation": "/**\n * Consume a quoted string, adding it to <code>appendTo</code> if\n * specified.\n * \n * @param pattern pattern to parse\n * @param pos current parse position\n * @param appendTo optional StringBuffer to append\n * @param escapingOn whether to process escaped quotes\n * @return <code>appendTo</code>\n */\nprivate StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n        // Escaped quote, consume one quote and output one quote, advance position\n        next(pos);\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n    int lastHold = start;\n    for (int i = pos.getIndex(); i < pattern.length(); ) {\n        if (escapingOn \n            && pattern.regionMatches(i, ESCAPED_QUOTE, 0, ESCAPED_QUOTE.length())) {\n            // append up to just before the double quote\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n            }\n            i += ESCAPED_QUOTE.length();\n            pos.setIndex(i);\n            lastHold = i;\n            continue;\n        }\n        char ch = c[i];\n        if (ch == QUOTE) {\n            // End of quoted string\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, i - lastHold);\n            }\n            next(pos);\n            return appendTo;\n        }\n        i++;\n        next(pos);\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}