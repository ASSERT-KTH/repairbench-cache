{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified. This method handles both normal quoted strings like\n     * <code>'abc'</code> and escaped quotes <code>''</code> (if escaping is on).\n     *\n     * @param pattern pattern to parse\n     * @param pos current parse position (should point to the opening quote)\n     * @param appendTo optional StringBuffer to append the interpreted text to\n     *                 (literal quotes are appended for escaped quotes, content inside\n     *                 quotes is appended for normal quoted strings).\n     * @param escapingOn whether to process escaped quotes (<code>''</code> treated as a literal <code>'</code>)\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex(); // Position of the first quote encountered by the caller\n        char[] c = pattern.toCharArray(); // Use char array for efficient appending\n\n        // Ensure we are actually at a quote (as precondition)\n        // The calling code in parse() ensures this, but a check could be added for robustness.\n        // if (c[start] != QUOTE) { ... }\n\n        // Case 1: Handle escaped quote ''\n        // If escaping is on and we see '', consume it and append a single '\n        if (escapingOn && start + 1 < c.length && c[start + 1] == QUOTE) {\n            // Consume ''\n            pos.setIndex(start + 2);\n            // Append a single literal quote '\n            return appendTo == null ? null : appendTo.append(QUOTE);\n        }\n\n        // Case 2: Handle regular quoted string '...'\n        // Consume the opening quote '\n        next(pos);\n        int lastHold = pos.getIndex(); // Position *after* the opening quote\n\n        // Find the end of the quoted string by iterating through the characters\n        while (pos.getIndex() < c.length) {\n            int currentIdx = pos.getIndex();\n\n            // Check for escaped quote '' inside the string, e.g. 'ab''cd'\n            // This is needed if escaping is enabled within quoted segments.\n            if (escapingOn && c[currentIdx] == QUOTE && currentIdx + 1 < c.length && c[currentIdx + 1] == QUOTE) {\n                // Append the segment before the escaped quote ''\n                if (appendTo != null) {\n                    // Append characters from lastHold up to currentIdx\n                    appendTo.append(c, lastHold, currentIdx - lastHold);\n                    // Append the literal quote ' resulting from ''\n                    appendTo.append(QUOTE);\n                }\n                // Advance position past the escaped quote ''\n                pos.setIndex(currentIdx + 2);\n                // Update the start of the next segment to append\n                lastHold = pos.getIndex();\n            }\n            // Check for the closing quote '\n            else if (c[currentIdx] == QUOTE) {\n                // Found the closing quote for '...'\n                // Append the final segment before the closing quote\n                if (appendTo != null) {\n                    // Append characters from lastHold up to currentIdx\n                    appendTo.append(c, lastHold, currentIdx - lastHold);\n                }\n                // Advance position past the closing quote\n                next(pos); // pos index becomes currentIdx + 1\n                return appendTo; // Successfully parsed the quoted string content\n            }\n            // It's a regular character inside the quotes\n            else {\n                // Just advance the position; the character is part of the current segment\n                // which will be appended in batch later.\n                next(pos);\n            }\n        }\n\n        // If the loop completes without finding a closing quote\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string starting at position \" + start);\n    }\n\n    // Helper method assumed to exist within the class\n    private void next(ParsePosition pos) {\n        pos.setIndex(pos.getIndex() + 1);\n    }\n\n    // Constant assumed to exist within the class\n    private static final char QUOTE = '\\'';",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}