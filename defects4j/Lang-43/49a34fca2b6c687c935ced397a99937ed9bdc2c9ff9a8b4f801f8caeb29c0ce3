{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n        pos.setIndex(start + 1);  // <-- advance pos to avoid infinite loop\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n    int lastHold = start;\n    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n            }\n            i += ESCAPED_QUOTE.length() - 1;\n            pos.setIndex(i + 1);\n            lastHold = pos.getIndex();\n            continue;\n        }\n        switch (c[i]) {\n        case QUOTE:\n            pos.setIndex(i + 1);\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, i - lastHold);\n            }\n            return appendTo;\n        default:\n            // nothing to do, just advance\n            pos.setIndex(i + 1);\n        }\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}