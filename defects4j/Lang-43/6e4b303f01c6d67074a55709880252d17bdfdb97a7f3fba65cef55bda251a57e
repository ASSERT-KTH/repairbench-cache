{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    int length = pattern.length();\n    char[] chars = pattern.toCharArray();\n    // Handle escaped quote (two consecutive quotes => literal single quote)\n    if (escapingOn && start + 1 < length\n            && chars[start] == QUOTE && chars[start + 1] == QUOTE) {\n        pos.setIndex(start + 2);\n        if (appendTo != null) {\n            appendTo.append(QUOTE);\n            return appendTo;\n        }\n        return null;\n    }\n    // Otherwise this is the start of a quoted literal: skip the opening quote\n    pos.setIndex(start + 1);\n    int lastHold = pos.getIndex();\n    while (pos.getIndex() < length) {\n        int i = pos.getIndex();\n        char ch = chars[i];\n        // an escaped quote inside the quoted string?\n        if (escapingOn && ch == QUOTE\n                && i + 1 < length && chars[i + 1] == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(chars, lastHold, i - lastHold)\n                        .append(QUOTE);\n            }\n            pos.setIndex(i + 2);\n            lastHold = pos.getIndex();\n            continue;\n        }\n        // closing quote -> end of literal\n        if (ch == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(chars, lastHold, i - lastHold);\n            }\n            pos.setIndex(i + 1);\n            return appendTo;\n        }\n        // otherwise consume this character\n        pos.setIndex(i + 1);\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}