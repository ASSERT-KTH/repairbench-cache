{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n                                        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    // Handle escaped single\u2010quote (two consecutive quotes) before a quoted literal\n    if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, start)) {\n        pos.setIndex(start + ESCAPED_QUOTE.length());\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n    // Skip the opening quote\n    next(pos);\n    int lastHold = pos.getIndex();\n    int len = c.length;\n    // Consume until the matching closing quote\n    while (pos.getIndex() < len) {\n        int i = pos.getIndex();\n        // Inside a quoted string, handle escaped quotes\n        if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, i)) {\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n            }\n            pos.setIndex(i + ESCAPED_QUOTE.length());\n            lastHold = pos.getIndex();\n            continue;\n        }\n        // Found the closing quote\n        if (c[i] == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, i - lastHold);\n            }\n            next(pos);\n            return appendTo;\n        }\n        // Advance one character\n        next(pos);\n    }\n    // No closing quote found\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}