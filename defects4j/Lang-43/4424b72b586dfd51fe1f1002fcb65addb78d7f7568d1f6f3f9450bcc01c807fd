{
    "generation": "    /**\n     * Consume a quoted string, adding it to <code>appendTo</code> if\n     * specified.\n     * \n     * @param pattern pattern to parse\n     * @param pos current parse position\n     * @param appendTo optional StringBuffer to append\n     * @param escapingOn whether to process escaped quotes\n     * @return <code>appendTo</code>\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        // The start of the current segment of text to be appended.\n        // pos.getIndex() is expected to be already positioned after an opening quote\n        // or at the start of a literal segment, based on how this function is called\n        // by ExtendedMessageFormat.applyPattern.\n        int lastHold = pos.getIndex();\n        char[] c = pattern.toCharArray(); // Convert to char array once for efficiency\n\n        // Loop through the pattern using pos.getIndex() as the current cursor.\n        // The original code used a separate 'i' loop variable which was not updated\n        // consistently with pos.getIndex(), leading to incorrect substring checks and\n        // potential infinite loops/OutOfMemoryErrors if the substring check was stale.\n        for (; pos.getIndex() < pattern.length();) {\n            // Check for escaped quote (e.g., '') at the current position.\n            // This is handled by consuming two quotes and appending a single literal quote.\n            if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {\n                // Append the text accumulated since lastHold\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n                    appendTo.append(QUOTE); // Append the literal quote\n                }\n                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length()); // Advance past both quotes\n                lastHold = pos.getIndex(); // Reset lastHold to the new current position\n                continue; // Continue scanning for more characters or the closing quote\n            }\n\n            // Get the current character at the parse position\n            switch (c[pos.getIndex()]) {\n            case QUOTE:\n                // Found a closing quote.\n                // Append the text accumulated since lastHold up to this closing quote.\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n                }\n                next(pos); // Consume the closing quote\n                return appendTo; // Quoted string successfully consumed and appended\n            default:\n                // Regular character, just advance the parse position.\n                next(pos);\n            }\n        }\n\n        // If the loop finishes without finding a closing quote, it means the quoted string is unterminated.\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + lastHold);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}