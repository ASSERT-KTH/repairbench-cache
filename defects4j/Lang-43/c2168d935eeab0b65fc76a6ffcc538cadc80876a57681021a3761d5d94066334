{
    "generation": "    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        // LANG-477 fix: Only treat the leading single quote as an escaped quote if it's not the end of the pattern\n        if (escapingOn && start < pattern.length() && c[start] == QUOTE) {\n            // if next char is also QUOTE, it's an escaped quote\n            if (start + 1 < pattern.length() && c[start + 1] == QUOTE) {\n                pos.setIndex(start + 2);\n                if (appendTo != null) {\n                    appendTo.append(QUOTE);\n                }\n                return appendTo;\n            } else {\n                pos.setIndex(start + 1);\n                if (appendTo != null) {\n                    return appendTo;\n                } else {\n                    return null;\n                }\n            }\n        }\n        int lastHold = start;\n        for (; pos.getIndex() < pattern.length(); ) {\n            int i = pos.getIndex();\n            // Check for escaped quote: two consecutive single quotes\n            if (escapingOn && i + 1 < pattern.length() && c[i] == QUOTE && c[i + 1] == QUOTE) {\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, i - lastHold);\n                    appendTo.append(QUOTE);\n                }\n                pos.setIndex(i + 2);\n                lastHold = pos.getIndex();\n                continue;\n            }\n            // Check for end quote\n            if (c[i] == QUOTE) {\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, i - lastHold);\n                }\n                pos.setIndex(i + 1);\n                return appendTo;\n            }\n            pos.setIndex(i + 1);\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}