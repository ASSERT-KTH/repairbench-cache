{
    "generation": "    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n\n        if (escapingOn && c[start] == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(QUOTE);\n            }\n            return appendTo;\n        }\n\n        int lastHold = pos.getIndex();\n\n        while (pos.getIndex() < pattern.length()) {\n            char currentChar = c[pos.getIndex()];\n\n            if (escapingOn && currentChar == ESCAPE) {\n                // Check if the next character is a quote to handle escaped quote\n                if (pos.getIndex() + 1 < pattern.length() && c[pos.getIndex() + 1] == QUOTE) {\n                    if (appendTo != null) {\n                        appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n                        appendTo.append(QUOTE);\n                    }\n                    pos.setIndex(pos.getIndex() + 2);\n                    lastHold = pos.getIndex();\n                    continue;\n                }\n            }\n\n            if (currentChar == QUOTE) {\n                next(pos);\n                if (appendTo != null) {\n                    appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1);\n                }\n                return appendTo;\n            }\n\n            pos.setIndex(pos.getIndex() + 1);\n        }\n\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}