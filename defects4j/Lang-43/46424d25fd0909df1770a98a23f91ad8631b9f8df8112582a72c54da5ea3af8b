{
    "generation": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    int len = pattern.length();\n\n    // If the current quote is immediately doubled, treat it as an escaped quote.\n    if (escapingOn && pos.getIndex() + 1 < len && c[pos.getIndex()] == QUOTE\n            && c[pos.getIndex() + 1] == QUOTE) {\n        pos.setIndex(pos.getIndex() + 2);\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n\n    // Otherwise, we are starting a quoted string literal.\n    // Skip the initial quote.\n    pos.setIndex(pos.getIndex() + 1);\n    int lastHold = pos.getIndex();\n    while (pos.getIndex() < len) {\n        // Look for an escaped quote within the quoted string.\n        if (escapingOn && pos.getIndex() + 1 < len \n                && pattern.startsWith(ESCAPED_QUOTE, pos.getIndex())) {\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n            }\n            pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n            lastHold = pos.getIndex();\n            continue;\n        }\n        char ch = c[pos.getIndex()];\n        pos.setIndex(pos.getIndex() + 1);\n        // A single quote ends the quoted string.\n        if (ch == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1);\n            }\n            return appendTo;\n        }\n    }\n    throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}