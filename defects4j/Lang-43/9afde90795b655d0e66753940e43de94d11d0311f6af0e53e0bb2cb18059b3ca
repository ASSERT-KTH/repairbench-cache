{
    "generation": "/**\n * Consume a quoted string, adding it to <code>appendTo</code> if\n * specified.\n * \n * @param pattern pattern to parse\n * @param pos current parse position\n * @param appendTo optional StringBuffer to append\n * @param escapingOn whether to process escaped quotes\n * @return <code>appendTo</code>\n */\nprivate StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n        // It's a quote escaped by another quote ('')\n        if (appendTo != null) {\n            appendTo.append(QUOTE);\n        }\n        next(pos); // skip first quote\n        next(pos); // skip second quote\n        return appendTo;\n    }\n    int lastHold = start;\n    for (int i = pos.getIndex(); i < pattern.length(); ) {\n        if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, i)) {\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);\n            }\n            i += ESCAPED_QUOTE.length();\n            pos.setIndex(i);\n            lastHold = i;\n            continue;\n        }\n        if (c[i] == QUOTE) {\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, i - lastHold);\n            }\n            next(pos); // skip closing quote\n            return appendTo;\n        } else {\n            next(pos);\n            i = pos.getIndex();\n        }\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}