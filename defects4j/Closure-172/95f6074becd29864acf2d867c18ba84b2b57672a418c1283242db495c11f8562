{
    "generation": "    private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType) {\n      if (valueType == null) {\n        return true;\n      }\n\n      // Prototypes of constructors and interfaces are always declared,\n      // EXCEPT if they are assigned as a property of a parameter or locals,\n      // which are always inferred (e.g. a.prototype = ...).\n      if (qName != null && qName.endsWith(\".prototype\")) {\n        // Check if the base of 'qName' is a local variable or parameter.\n        Node target = n.getFirstChild();\n        // target may be a qualified name, get the base node\n        Node base = target;\n        while (base != null && base.isGetProp()) {\n          base = base.getFirstChild();\n        }\n        if (base != null && (NodeUtil.isNameDeclaration(base)\n            || (base.isName() && NodeUtil.isReferenceName(base.getString())))) {\n          // Locals/parameters -- treat as inferred\n          return true;\n        }\n        if (target != null && target.isGetProp()) {\n          Node propBase = target.getFirstChild();\n          if (propBase != null && propBase.isName() &&\n              scope.isLocalFunParamOrBlockScopedVariable(propBase.getString())) {\n            // Is a local function param or block scoped variable\n            return true;\n          }\n        }\n        return false;\n      }\n\n      boolean inferred = true;\n      if (info != null) {\n        inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (isConstantSymbol(info, n) && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n      }\n\n      if (inferred && rhsValue != null && rhsValue.isFunction()) {\n        if (info != null) {\n          return false;\n        } else if (!scope.isDeclared(qName, false) &&\n            n.isUnscopedQualifiedName()) {\n\n          // Check if this is in a conditional block.\n          // Functions assigned in conditional blocks are inferred.\n          for (Node current = n.getParent();\n               !(current.isScript() || current.isFunction());\n               current = current.getParent()) {\n            if (NodeUtil.isControlStructure(current)) {\n              return true;\n            }\n          }\n\n          // Check if this is assigned in an inner scope.\n          // Functions assigned in inner scopes are inferred.\n          AstFunctionContents contents =\n              getFunctionAnalysisResults(scope.getRootNode());\n          if (contents == null ||\n              !contents.getEscapedQualifiedNames().contains(qName)) {\n            return false;\n          }\n        }\n      }\n      return inferred;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}