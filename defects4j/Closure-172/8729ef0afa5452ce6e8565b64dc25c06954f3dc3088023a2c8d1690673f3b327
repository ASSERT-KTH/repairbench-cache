{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n  if (valueType == null) {\n    return true;\n  }\n\n  // Prototypes of constructors and interfaces are always declared.\n  // But other \".prototype\" assignments (e.g. on a parameter or plain object)\n  // should be treated as inferred.\n  if (qName != null && qName.endsWith(\".prototype\")) {\n    // The owner of \".prototype\" is the first child of the GETPROP.\n    Node owner = n.getFirstChild();\n    if (owner != null) {\n      JSType ownerType = owner.getJSType();\n      // If the owner really is a function (constructor) or interface,\n      // its \"prototype\" is declared by the language/runtime.\n      if (ownerType != null && ownerType.isFunctionType()) {\n        return false;\n      }\n    }\n    // Otherwise (e.g. a parameter named \"a\"), treat as inferred.\n    return true;\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (isConstantSymbol(info, n) && valueType != null\n            && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  if (inferred && rhsValue != null && rhsValue.isFunction()) {\n    if (info != null) {\n      return false;\n    } else if (!scope.isDeclared(qName, false)\n        && n.isUnscopedQualifiedName()) {\n\n      // Functions assigned in conditional blocks are inferred.\n      for (Node current = n.getParent();\n           !(current.isScript() || current.isFunction());\n           current = current.getParent()) {\n        if (NodeUtil.isControlStructure(current)) {\n          return true;\n        }\n      }\n\n      // Functions assigned in inner scopes are inferred.\n      AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());\n      if (contents == null\n          || !contents.getEscapedQualifiedNames().contains(qName)) {\n        return false;\n      }\n    }\n  }\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}