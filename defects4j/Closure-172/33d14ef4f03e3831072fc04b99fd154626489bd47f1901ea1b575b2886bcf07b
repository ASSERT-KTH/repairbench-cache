{
    "generation": "private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType) {\n    if (valueType == null) {\n        return true;\n    }\n\n    // Check if the assignment is to a .prototype, but only at the top level.\n    if (qName != null && qName.endsWith(\".prototype\")) {\n        // Determine if the node is inside a function.\n        boolean insideFunction = false;\n        for (Node current = n; current != null; current = current.getParent()) {\n            if (current.isFunction()) {\n                insideFunction = true;\n                break;\n            }\n        }\n        if (!insideFunction) {\n            // Top-level assignment to .prototype is considered declared.\n            return false;\n        }\n    }\n\n    boolean inferred = true;\n    if (info != null) {\n        inferred = !(info.hasType()\n                || info.hasEnumParameterType()\n                || (isConstantSymbol(info, n) && valueType != null\n                        && !valueType.isUnknownType())\n                || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n    }\n\n    if (inferred && rhsValue != null && rhsValue.isFunction()) {\n        if (info != null) {\n            return false;\n        } else if (!scope.isDeclared(qName, false) &&\n                n.isUnscopedQualifiedName()) {\n\n            // Check if this is in a conditional block.\n            // Functions assigned in conditional blocks are inferred.\n            for (Node current = n.getParent();\n                    !(current.isScript() || current.isFunction());\n                    current = current.getParent()) {\n                if (NodeUtil.isControlStructure(current)) {\n                    return true;\n                }\n            }\n\n            // Check if this is assigned in an inner scope.\n            // Functions assigned in inner scopes are inferred.\n            AstFunctionContents contents =\n                    getFunctionAnalysisResults(scope.getRootNode());\n            if (contents == null ||\n                    !contents.getEscapedQualifiedNames().contains(qName)) {\n                return false;\n            }\n        }\n    }\n    return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}