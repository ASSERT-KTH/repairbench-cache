{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n  if (valueType == null) {\n    return true;\n  }\n\n  // Prototypes of constructors and interfaces are always declared,\n  // but we special-case the \"__proto\" string hack so we don't record it.\n  if (qName != null && qName.endsWith(\".prototype\")) {\n    // If someone writes `x.prototype = \"__proto\"`, don't infer or record that.\n    if (rhsValue != null && rhsValue.isString()\n        && \"__proto\".equals(rhsValue.getString())) {\n      return false;\n    }\n    // Otherwise only treat real constructor/interface prototypes as declared.\n    Node root = NodeUtil.getRootOfQualifiedName(n);\n    if (root != null) {\n      JSType rootType = root.getJSType();\n      if (rootType != null\n          && (rootType.isFunctionType() || rootType.isInterface())) {\n        return false;\n      }\n    }\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (isConstantSymbol(info, n)\n            && valueType != null\n            && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  if (inferred && rhsValue != null && rhsValue.isFunction()) {\n    if (info != null) {\n      return false;\n    } else if (!scope.isDeclared(qName, false)\n        && n.isUnscopedQualifiedName()) {\n      // Functions assigned in conditional blocks are still inferred.\n      for (Node current = n.getParent();\n           !(current.isScript() || current.isFunction());\n           current = current.getParent()) {\n        if (NodeUtil.isControlStructure(current)) {\n          return true;\n        }\n      }\n      // Functions assigned in inner scopes are inferred.\n      AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());\n      if (contents == null\n          || !contents.getEscapedQualifiedNames().contains(qName)) {\n        return false;\n      }\n    }\n  }\n\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}