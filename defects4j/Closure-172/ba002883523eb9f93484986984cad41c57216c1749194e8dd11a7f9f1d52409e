{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n  if (valueType == null) {\n    return true;\n  }\n\n  // Only treat \".prototype\" as declared if its base is a known constructor or interface.\n  if (qName != null && qName.endsWith(\".prototype\")) {\n    String base = qName.substring(0, qName.length() - \".prototype\".length());\n    if (scope.isDeclared(base, false)) {\n      Var var = scope.getVar(base);\n      if (var != null && var.getType() != null && var.getType().isFunctionType()) {\n        return false;\n      }\n    }\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (isConstantSymbol(info, n) && valueType != null && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  if (inferred && rhsValue != null && rhsValue.isFunction()) {\n    if (info != null) {\n      return false;\n    } else if (!scope.isDeclared(qName, false) && n.isUnscopedQualifiedName()) {\n      // Check if this assignment is inside a control structure.\n      for (Node current = n.getParent();\n           !(current.isScript() || current.isFunction());\n           current = current.getParent()) {\n        if (NodeUtil.isControlStructure(current)) {\n          return true;\n        }\n      }\n\n      // Check if this function is assigned in an inner scope.\n      AstFunctionContents contents = getFunctionAnalysisResults(scope.getRootNode());\n      if (contents == null || !contents.getEscapedQualifiedNames().contains(qName)) {\n        return false;\n      }\n    }\n  }\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}