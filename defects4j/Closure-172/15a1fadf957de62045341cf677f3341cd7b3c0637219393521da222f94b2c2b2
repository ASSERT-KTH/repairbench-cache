{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n  // If we don't know the RHS type at all, treat it as inferred.\n  if (valueType == null) {\n    return true;\n  }\n\n  // Special\u2010case: assigning a string literal to \".prototype\" should be\n  // treated as an inferred property (so you don't get a spurious\n  // \"found string, required function\" on the common \"__proto__\" hack).\n  if (qName != null\n      && qName.endsWith(\".prototype\")\n      && rhsValue != null\n      && rhsValue.isString()) {\n    return true;\n  }\n\n  // Prototypes of real constructors/interfaces are always declared.\n  if (qName != null && qName.endsWith(\".prototype\")) {\n    return false;\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (isConstantSymbol(info, n)\n            && valueType != null\n            && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  // Special\u2010case function literals assigned to inferred names.\n  if (inferred && rhsValue != null && rhsValue.isFunction()) {\n    if (info != null) {\n      return false;\n    } else if (!scope.isDeclared(qName, false)\n        && n.isUnscopedQualifiedName()) {\n      // If it's inside a control structure, treat it as inferred.\n      for (Node current = n.getParent();\n           !(current.isScript() || current.isFunction());\n           current = current.getParent()) {\n        if (NodeUtil.isControlStructure(current)) {\n          return true;\n        }\n      }\n      // Otherwise only infer it if the name actually escapes its defining scope.\n      AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());\n      if (contents == null\n          || !contents.getEscapedQualifiedNames().contains(qName)) {\n        return false;\n      }\n    }\n  }\n\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}