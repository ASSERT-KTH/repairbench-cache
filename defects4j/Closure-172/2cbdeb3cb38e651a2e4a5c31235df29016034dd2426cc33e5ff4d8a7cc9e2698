{
    "generation": "    /**\n     * Determines whether a qualified name is inferred.\n     * NOTE(nicksantos): Determining whether a property is declared or not\n     * is really really obnoxious.\n     *\n     * The problem is that there are two (equally valid) coding styles:\n     *\n     * (function() {\n     *   /* The authoritative definition of goog.bar. /\n     *   goog.bar = function() {};\n     * })();\n     *\n     * function f() {\n     *   goog.bar();\n     *   /* Reset goog.bar to a no-op. /\n     *   goog.bar = function() {};\n     * }\n     *\n     * In a dynamic language with first-class functions, it's very difficult\n     * to know which one the user intended without looking at lots of\n     * contextual information (the second example demonstrates a small case\n     * of this, but there are some really pathological cases as well).\n     *\n     * The current algorithm checks if either the declaration has\n     * JsDoc type information, or @const with a known type,\n     * or a function literal with a name we haven't seen before.\n     */\n    private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType) {\n      if (valueType == null) {\n        return true;\n      }\n\n      // Prototypes of constructors and interfaces are always declared.\n      // However, if the base object is not a globally declared constructor,\n      // then its 'prototype' property might be an inferred property.\n      // This is particularly true for properties on arbitrary objects (e.g., `obj.prototype = ...`)\n      // where `obj` is not a constructor function.\n      if (qName != null && qName.endsWith(\".prototype\")) {\n          Node base = n.getFirstChild();\n          String baseName = NodeUtil.getQualifiedName(base); // Get the qualified name of the base object (e.g., \"Foo\" in \"Foo.prototype\")\n          if (baseName != null) {\n            Var var = scope.getVar(baseName);\n            // If the base name refers to a variable that is:\n            // 1. Found in the symbol table.\n            // 2. Defined in the global scope (e.g., `function Foo() {}`).\n            // 3. Has a type that is explicitly defined (not inferred).\n            // 4. And its type is a constructor.\n            // Then, its 'prototype' property is considered declared.\n            if (var != null && var.scope.isGlobal() &&\n                var.isTypeInferred() == false &&\n                var.getType() != null && var.getType().isConstructor()) {\n                return false; // Declared.\n            }\n          }\n          // Otherwise (e.g., `a.prototype` where `a` is a local parameter or a generic object),\n          // let the rest of the inference logic apply to determine if it's inferred.\n      }\n\n      boolean inferred = true;\n      if (info != null) {\n        inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (isConstantSymbol(info, n) && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n      }\n\n      if (inferred && rhsValue != null && rhsValue.isFunction()) {\n        if (info != null) {\n          return false;\n        } else if (!scope.isDeclared(qName, false) &&\n            n.isUnscopedQualifiedName()) {\n\n          // Check if this is in a conditional block.\n          // Functions assigned in conditional blocks are inferred.\n          for (Node current = n.getParent();\n               !(current.isScript() || current.isFunction());\n               current = current.getParent()) {\n            if (NodeUtil.isControlStructure(current)) {\n              return true;\n            }\n          }\n\n          // Check if this is assigned in an inner scope.\n          // Functions assigned in inner scopes are inferred.\n          AstFunctionContents contents =\n              getFunctionAnalysisResults(scope.getRootNode());\n          if (contents == null ||\n              !contents.getEscapedQualifiedNames().contains(qName)) {\n            // If the qualified name is NOT in the list of escaped names,\n            // it means it's an inner scope function assignment that does not escape.\n            // According to the comment, such functions should be inferred.\n            return true; // BUG FIX: Changed from 'return false;' to 'return true;'\n          } else {\n            // If the qualified name IS in the list of escaped names,\n            // it means it's an inner scope function assignment that escapes.\n            // Therefore, it should be declared.\n            return false;\n          }\n        }\n      }\n      return inferred;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}