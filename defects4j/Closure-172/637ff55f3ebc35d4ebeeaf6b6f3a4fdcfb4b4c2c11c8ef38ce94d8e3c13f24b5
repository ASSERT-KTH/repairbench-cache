{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n  if (valueType == null) {\n    return true;\n  }\n\n  // Prototypes of constructors and interfaces are always declared,\n  // EXCEPT: assignments to .prototype of locals/parameters are inferred.\n  if (qName != null && qName.endsWith(\".prototype\")) {\n    Node owner = NodeUtil.getPrototypeClassOwner(n);\n    if (owner == null || (!owner.isName() && !owner.isThis() && !owner.isGetProp() && !owner.isString())) {\n      // Generally treat as declared\n      return false;\n    }\n    // If the owner is a parameter or local, treat as inferred\n    if (owner.getParent() != null &&\n        (owner.getParent().isParamList()\n         || (owner.getParent().isVar() && owner.getParent().getParent() != null\n             && owner.getParent().getParent().isFunction()))) {\n      return true;\n    }\n    // Defensive: For cases we missed, default to declared\n    return false;\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (isConstantSymbol(info, n) && valueType != null\n            && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  if (inferred && rhsValue != null && rhsValue.isFunction()) {\n    if (info != null) {\n      return false;\n    } else if (!scope.isDeclared(qName, false) &&\n        n.isUnscopedQualifiedName()) {\n\n      // Check if this is in a conditional block.\n      // Functions assigned in conditional blocks are inferred.\n      for (Node current = n.getParent();\n           !(current.isScript() || current.isFunction());\n           current = current.getParent()) {\n        if (NodeUtil.isControlStructure(current)) {\n          return true;\n        }\n      }\n\n      // Check if this is assigned in an inner scope.\n      // Functions assigned in inner scopes are inferred.\n      AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());\n      if (contents == null ||\n          !contents.getEscapedQualifiedNames().contains(qName)) {\n        return false;\n      }\n    }\n  }\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}