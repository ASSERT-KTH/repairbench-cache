{
    "generation": "    /**\n     * Determines whether a qualified name is inferred.\n     * NOTE(nicksantos): Determining whether a property is declared or not\n     * is really really obnoxious.\n     *\n     * The problem is that there are two (equally valid) coding styles:\n     *\n     * (function() {\n     *   /* The authoritative definition of goog.bar. /\n     *   goog.bar = function() {};\n     * })();\n     *\n     * function f() {\n     *   goog.bar();\n     *   /* Reset goog.bar to a no-op. /\n     *   goog.bar = function() {};\n     * }\n     *\n     * In a dynamic language with first-class functions, it's very difficult\n     * to know which one the user intended without looking at lots of\n     * contextual information (the second example demonstrates a small case\n     * of this, but there are some really pathological cases as well).\n     *\n     * The current algorithm checks if either the declaration has\n     * JsDoc type information, or @const with a known type,\n     * or a function literal with a name we haven't seen before.\n     */\n    private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType) {\n      if (valueType == null) {\n        return true;\n      }\n\n      // Prototypes of constructors and interfaces are always declared.\n      // However, if the object is not a constructor, then its 'prototype' property\n      // is just a regular property and should be inferred like other properties.\n      // 'n' is the GETPROP node (e.g., 'a.prototype').\n      // Its first child is the object expression (e.g., 'a').\n      if (qName != null && qName.endsWith(\".prototype\")) {\n        Node objectNode = n.getFirstChild();\n        JSType objectType = getJSType(objectNode);\n        if (objectType != null && objectType.isFunctionType() && objectType.toMaybeFunctionType().isConstructor()) {\n          return false; // This is a constructor's prototype, so it's declared.\n        }\n        // Else, it's a 'prototype' property on a non-constructor object.\n        // It should follow the general inference rules, which default to inferred\n        // unless explicitly declared via JSDoc, const, or specific function patterns.\n      }\n\n      boolean inferred = true;\n      if (info != null) {\n        inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (isConstantSymbol(info, n) && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n      }\n\n      if (inferred && rhsValue != null && rhsValue.isFunction()) {\n        if (info != null) {\n          // If there is JSDoc (even if not type-declaring), and it's a function,\n          // consider it declared. This handles cases like `/** @desc foo */ C.f = function() {}`.\n          return false;\n        } else if (!scope.isDeclared(qName, false) &&\n            n.isUnscopedQualifiedName()) {\n\n          // Check if this is in a conditional block.\n          // Functions assigned in conditional blocks are inferred.\n          for (Node current = n.getParent();\n               !(current.isScript() || current.isFunction());\n               current = current.getParent()) {\n            if (NodeUtil.isControlStructure(current)) {\n              return true;\n            }\n          }\n\n          // Check if this is assigned in an inner scope.\n          // Functions assigned in inner scopes are inferred.\n          AstFunctionContents contents =\n              getFunctionAnalysisResults(scope.getRootNode());\n          // If the qualified name does not escape the current function's scope,\n          // then it's local to that scope and should be inferred.\n          // If it *does* escape, it acts like a global declaration.\n          if (contents == null ||\n              !contents.getEscapedQualifiedNames().contains(qName)) {\n            // qName does NOT escape (or no analysis results) -> inferred\n            return true;\n          } else {\n            // qName DOES escape -> declared\n            return false;\n          }\n        }\n      }\n      return inferred;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}