{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n  if (valueType == null) {\n    return true;\n  }\n\n  // Prototypes of constructors and interfaces are always declared,\n  // EXCEPT when the prototype is a property of a parameter (e.g. a.prototype)\n  if (qName != null && qName.endsWith(\".prototype\")) {\n    // Check if the base of the prototype property is a parameter.\n    Node lhs = n.getFirstChild();\n    if (lhs != null && lhs.isGetProp()) {\n      Node base = lhs.getFirstChild();\n      // If the base is a name and that name is a parameter of the current function\n      Node fn = NodeUtil.getEnclosingFunction(n);\n      if (fn != null && (NodeUtil.isFunctionDeclaration(fn) || NodeUtil.isFunctionExpression(fn))) {\n        Node paramList = fn.getSecondChild();\n        for (Node param = paramList.getFirstChild(); param != null; param = param.getNext()) {\n          if (base.isName() && param.isName() && base.getString().equals(param.getString())) {\n            // This is a.prototype for parameter 'a'; treat as inferred\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (isConstantSymbol(info, n) && valueType != null\n            && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  if (inferred && rhsValue != null && rhsValue.isFunction()) {\n    if (info != null) {\n      return false;\n    } else if (!scope.isDeclared(qName, false) &&\n        n.isUnscopedQualifiedName()) {\n\n      // Check if this is in a conditional block.\n      // Functions assigned in conditional blocks are inferred.\n      for (Node current = n.getParent();\n           !(current.isScript() || current.isFunction());\n           current = current.getParent()) {\n        if (NodeUtil.isControlStructure(current)) {\n          return true;\n        }\n      }\n\n      // Check if this is assigned in an inner scope.\n      // Functions assigned in inner scopes are inferred.\n      AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());\n      if (contents == null ||\n          !contents.getEscapedQualifiedNames().contains(qName)) {\n        return false;\n      }\n    }\n  }\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}