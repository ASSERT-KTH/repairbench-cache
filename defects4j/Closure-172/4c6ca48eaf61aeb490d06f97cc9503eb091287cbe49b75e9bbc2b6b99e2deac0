{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n  if (valueType == null) {\n    return true;\n  }\n\n  // Only treat prototype assignments as \u201cdeclared\u201d when the assignment\n  // is to the prototype of a known constructor or interface. Otherwise,\n  // if the property is on a non\u2010global (or parameter) object then we want to\n  // infer its type. (If we always returned false for *.prototype then both\n  // assignments below may get \u201cdeclared\u201d and force an inconsistent type.)\n  if (qName != null && qName.endsWith(\".prototype\") &&\n      info != null &&\n      (info.isConstructor() || info.isInterface())) {\n    return false;\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (isConstantSymbol(info, n) && valueType != null && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  if (inferred && rhsValue != null && rhsValue.isFunction()) {\n    if (info != null) {\n      return false;\n    } else if (!scope.isDeclared(qName, false) && n.isUnscopedQualifiedName()) {\n\n      // If this function assignment is inside a control structure\n      // then treat it as inferred.\n      for (Node current = n.getParent();\n           !(current.isScript() || current.isFunction());\n           current = current.getParent()) {\n        if (NodeUtil.isControlStructure(current)) {\n          return true;\n        }\n      }\n\n      // If the qualified name is assigned in an inner scope, treat it as inferred.\n      AstFunctionContents contents = getFunctionAnalysisResults(scope.getRootNode());\n      if (contents == null ||\n          !contents.getEscapedQualifiedNames().contains(qName)) {\n        return false;\n      }\n    }\n  }\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}