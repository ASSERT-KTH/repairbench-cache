{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n  if (valueType == null) {\n    return true;\n  }\n\n  // Prototypes of constructors and interfaces are always declared,\n  // BUT: If the prototype property is NOT directly on some constructor,\n  // and is being set on an unknown or parameterized object, treat as inferred.\n  // That is: if qName ends with \".prototype\" but this is not a normal qualified name.\n  if (qName != null && qName.endsWith(\".prototype\")) {\n    // Heuristic: Infer if left side is NOT a simple qualified name (e.g. a.b.prototype).\n    // For assignments like a.prototype = ..., where a is a parameter/unknown,\n    // treat as inferred.\n    if (!n.isQualifiedName()) {\n      return true;\n    }\n    // Extra test: lhs is a name, but not a global/class name, or we're in a function param,\n    // In cases like f(a) { a.prototype = ... }  treat as inferred.\n    Node first = n;\n    while (first.isGetProp()) {\n      first = first.getFirstChild();\n    }\n    if (first.isName() && scope.isLocalScope() && scope.isDeclared(first.getString(), false)) {\n      return true;\n    }\n    return false;\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (isConstantSymbol(info, n) && valueType != null\n            && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  if (inferred && rhsValue != null && rhsValue.isFunction()) {\n    if (info != null) {\n      return false;\n    } else if (!scope.isDeclared(qName, false) &&\n        n.isUnscopedQualifiedName()) {\n\n      // Check if this is in a conditional block.\n      // Functions assigned in conditional blocks are inferred.\n      for (Node current = n.getParent();\n           !(current.isScript() || current.isFunction());\n           current = current.getParent()) {\n        if (NodeUtil.isControlStructure(current)) {\n          return true;\n        }\n      }\n\n      // Check if this is assigned in an inner scope.\n      // Functions assigned in inner scopes are inferred.\n      AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());\n      if (contents == null ||\n          !contents.getEscapedQualifiedNames().contains(qName)) {\n        return false;\n      }\n    }\n  }\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}