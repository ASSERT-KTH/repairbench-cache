{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n  if (valueType == null) {\n    return true;\n  }\n\n  // Prototypes of constructors and interfaces are always declared,\n  // BUT NOT when it's a property access like x.prototype, e.g. b.prototype=x\n  if (qName != null && qName.endsWith(\".prototype\")) {\n    // Check if this is not a direct prototype property of a constructor,\n    // i.e., name before .prototype is not in global scope or is not a known function.\n    // To fix the bug, only treat as declared if it's not a property access\n    // (i.e., treat e.g. a.prototype=... inside a function as inferred).\n    if (!n.isGetProp()) {\n      return false;\n    }\n    Node owner = n.getFirstChild();\n    // If the owner is a NAME node in global scope, consider declared.\n    Scope ownerScope = scope;\n    while (ownerScope.getParent() != null) {\n      ownerScope = ownerScope.getParent();\n    }\n    if (owner.isName() && ownerScope.isDeclared(owner.getString(), false)) {\n      return false;\n    }\n    // Otherwise, it's an assignment like a.prototype=..., inside local fn, so inferred.\n    return true;\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (isConstantSymbol(info, n) && valueType != null\n            && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  if (inferred && rhsValue != null && rhsValue.isFunction()) {\n    if (info != null) {\n      return false;\n    } else if (!scope.isDeclared(qName, false) &&\n        n.isUnscopedQualifiedName()) {\n\n      // Check if this is in a conditional block.\n      // Functions assigned in conditional blocks are inferred.\n      for (Node current = n.getParent();\n           !(current.isScript() || current.isFunction());\n           current = current.getParent()) {\n        if (NodeUtil.isControlStructure(current)) {\n          return true;\n        }\n      }\n\n      // Check if this is assigned in an inner scope.\n      // Functions assigned in inner scopes are inferred.\n      AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());\n      if (contents == null ||\n          !contents.getEscapedQualifiedNames().contains(qName)) {\n        return false;\n      }\n    }\n  }\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}