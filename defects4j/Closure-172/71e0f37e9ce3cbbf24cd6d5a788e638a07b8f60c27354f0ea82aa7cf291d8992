{
    "generation": "    private boolean isQualifiedNameInferred(\n        String qName, Node n, JSDocInfo info,\n        Node rhsValue, JSType valueType) {\n      if (valueType == null) {\n        return true;\n      }\n\n      // Prototypes of constructors and interfaces are always declared, \n      // except when the prototype is not a property of a variable or qualified name (i.e., e.g., `a.prototype` when `a` is a parameter/local).\n      if (qName != null && qName.endsWith(\".prototype\")) {\n        Node target = n;\n        if (target.isAssign() && target.getFirstChild().isGetProp()) {\n          target = target.getFirstChild();\n        }\n        Node object = target.isGetProp() ? target.getFirstChild() : null;\n\n        // If 'object' is a NAME (not a global NAME), e.g. function parameter, then treat its prototype as inferred.\n        boolean isPossiblyLocal = false;\n        if (object != null && object.isName()) {\n          String name = object.getString();\n          if (scope.getVar(name) != null && !scope.getVar(name).isGlobal()) {\n            isPossiblyLocal = true;\n          }\n        }\n        if (!isPossiblyLocal) {\n          return false;\n        }\n      }\n\n      boolean inferred = true;\n      if (info != null) {\n        inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (isConstantSymbol(info, n) && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n      }\n\n      if (inferred && rhsValue != null && rhsValue.isFunction()) {\n        if (info != null) {\n          return false;\n        } else if (!scope.isDeclared(qName, false) &&\n            n.isUnscopedQualifiedName()) {\n\n          // Check if this is in a conditional block.\n          // Functions assigned in conditional blocks are inferred.\n          for (Node current = n.getParent();\n               !(current.isScript() || current.isFunction());\n               current = current.getParent()) {\n            if (NodeUtil.isControlStructure(current)) {\n              return true;\n            }\n          }\n\n          // Check if this is assigned in an inner scope.\n          // Functions assigned in inner scopes are inferred.\n          AstFunctionContents contents =\n              getFunctionAnalysisResults(scope.getRootNode());\n          if (contents == null ||\n              !contents.getEscapedQualifiedNames().contains(qName)) {\n            return false;\n          }\n        }\n      }\n      return inferred;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}