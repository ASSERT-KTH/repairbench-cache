{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n  if (valueType == null) {\n    return true;\n  }\n\n  // Prototypes of constructors and interfaces are always declared,\n  // EXCEPT when the prototype is a property of a function parameter, e.g., a.prototype in `function f(a) { a.prototype = ... }`.\n  // In that case, the declaration is not for the normal .prototype of a constructor.\n  if (qName != null && qName.endsWith(\".prototype\")) {\n    // Check if qName is a property of a function parameter, i.e., if the base of qName is a parameter.\n    if (n.getFirstChild() != null) {\n      Node lhs = n.getFirstChild();\n      if (lhs.isGetProp() && lhs.getLastChild().getString().equals(\"prototype\")) {\n        Node base = lhs.getFirstChild();\n        // If the immediate qualified name is a function parameter, infer the type.\n        if (base.isName()) {\n          // Check if base is a function parameter.\n          Node maybeFn = NodeUtil.getEnclosingFunction(n);\n          if (maybeFn != null && NodeUtil.isFunctionDeclaration(maybeFn)) {\n            for (Node param = maybeFn.getFirstChild().getNext().getFirstChild();\n                param != null;\n                param = param.getNext()) {\n              if (param.getString().equals(base.getString())) {\n                // This is a parameter name.\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (isConstantSymbol(info, n) && valueType != null\n            && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  if (inferred && rhsValue != null && rhsValue.isFunction()) {\n    if (info != null) {\n      return false;\n    } else if (!scope.isDeclared(qName, false) &&\n        n.isUnscopedQualifiedName()) {\n\n      // Check if this is in a conditional block.\n      // Functions assigned in conditional blocks are inferred.\n      for (Node current = n.getParent();\n           !(current.isScript() || current.isFunction());\n           current = current.getParent()) {\n        if (NodeUtil.isControlStructure(current)) {\n          return true;\n        }\n      }\n\n      // Check if this is assigned in an inner scope.\n      // Functions assigned in inner scopes are inferred.\n      AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());\n      if (contents == null ||\n          !contents.getEscapedQualifiedNames().contains(qName)) {\n        return false;\n      }\n    }\n  }\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}