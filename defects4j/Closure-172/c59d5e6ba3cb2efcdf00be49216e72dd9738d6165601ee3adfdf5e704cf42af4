{
    "generation": "private boolean isQualifiedNameInferred(\n    String qName, Node n, JSDocInfo info,\n    Node rhsValue, JSType valueType) {\n  if (valueType == null) {\n    return true;\n  }\n\n  // Special handling for \".prototype\" assignments:\n  // Only if the property is on a constructor should it be treated as declared.\n  // Otherwise (for example, when the receiver is not a function),\n  // we want to consider the assignment inferred.\n  if (qName != null && qName.endsWith(\".prototype\")) {\n    Node receiver = n.getFirstChild();\n    if (receiver != null && receiver.getJSType() != null \n        && receiver.getJSType().isFunctionType()) {\n      // This is a prototype property on a constructor function.\n      return false;\n    }\n    return true;\n  }\n\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (isConstantSymbol(info, n) \n            && valueType != null && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n\n  if (inferred && rhsValue != null && rhsValue.isFunction()) {\n    if (info != null) {\n      return false;\n    } else if (!scope.isDeclared(qName, false) && n.isUnscopedQualifiedName()) {\n      // Functions assigned inside conditional blocks should be inferred.\n      for (Node current = n.getParent(); \n           !(current.isScript() || current.isFunction()); \n           current = current.getParent()) {\n        if (NodeUtil.isControlStructure(current)) {\n          return true;\n        }\n      }\n\n      // Functions assigned in inner scopes are inferred.\n      AstFunctionContents contents = getFunctionAnalysisResults(scope.getRootNode());\n      if (contents == null || !contents.getEscapedQualifiedNames().contains(qName)) {\n        return false;\n      }\n    }\n  }\n  return inferred;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}