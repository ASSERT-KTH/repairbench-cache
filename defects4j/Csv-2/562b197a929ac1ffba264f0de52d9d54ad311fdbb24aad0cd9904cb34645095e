{
    "generation": "    /**\n     * Returns a value by name.\n     *\n     * @param name\n     *            the name of the column to be retrieved.\n     * @return the column value, or {@code null} if the column name is not found\n     * @throws IllegalStateException\n     *             if no header mapping was provided\n     * @throws IllegalArgumentException\n     *             if the record is inconsistent\n     * @see #isConsistent()\n     */\n    public String get(final String name) {\n        if (mapping == null) {\n            throw new IllegalStateException(\n                    \"No header mapping was specified, the record values can't be accessed by name\");\n        }\n        final Integer index = mapping.get(name);\n\n        // If the name exists in the mapping (index is not null) but the mapped index\n        // is out of bounds for the actual 'values' array, it indicates an inconsistent\n        // record state. This is an IllegalArgumentException scenario as per Javadoc.\n        if (index != null && index.intValue() >= values.length) {\n            throw new IllegalArgumentException(\n                String.format(\"The record is inconsistent, the value for '%s' (index %d) is out of bounds [0..%d]\",\n                              name, index.intValue(), values.length > 0 ? values.length - 1 : -1));\n        }\n\n        // If index is null, the name was not found in the mapping, so return null.\n        // Otherwise, access the value at the valid index.\n        return index != null ? values[index.intValue()] : null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}