{
    "generation": "    /**\n     * Returns a value by name.\n     *\n     * @param name\n     *            the name of the column to be retrieved.\n     * @return the column value, or {@code null} if the column name is not found\n     * @throws IllegalStateException\n     *             if no header mapping was provided\n     * @throws IllegalArgumentException\n     *             if the record is inconsistent\n     * @see #isConsistent()\n     */\n    public String get(final String name) {\n        if (mapping == null) {\n            throw new IllegalStateException(\n                    \"No header mapping was specified, the record values can't be accessed by name\");\n        }\n        final Integer index = mapping.get(name);\n        if (index == null) {\n            return null;\n        }\n\n        // The Javadoc states: \"throws IllegalArgumentException if the record is inconsistent\".\n        // An ArrayIndexOutOfBoundsException occurs when the mapped index is greater than or\n        // equal to the number of available values, indicating an inconsistent record.\n        // This check prevents the ArrayIndexOutOfBoundsException and throws the specified\n        // IllegalArgumentException instead.\n        if (index.intValue() >= values.length) {\n            throw new IllegalArgumentException(\n                    String.format(\"The record is inconsistent, as the header mapping references an index %d which is out of bounds for the %d values.\",\n                            index.intValue(), values.length));\n        }\n\n        return values[index.intValue()];\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}