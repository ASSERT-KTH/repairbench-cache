{
    "generation": "    /**\n     * Returns a value by name.\n     *\n     * @param name\n     *            the name of the column to be retrieved.\n     * @return the column value, or {@code null} if the column name is not found\n     * @throws IllegalStateException\n     *             if no header mapping was provided\n     * @throws IllegalArgumentException\n     *             if the record is inconsistent (specifically, if the requested column index derived from the name\n     *             is out of bounds for the record's values)\n     * @see #isConsistent()\n     */\n    public String get(final String name) {\n        if (mapping == null) {\n            throw new IllegalStateException(\n                    \"No header mapping was specified, the record values can't be accessed by name\");\n        }\n        final Integer index = mapping.get(name);\n        if (index == null) {\n            return null; // Column name not found in the header mapping\n        }\n        // Check if the retrieved index is within the bounds of the values array.\n        // If not, it indicates an inconsistent record for this column name.\n        final int i = index.intValue();\n        if (i >= values.length) {\n            throw new IllegalArgumentException(String.format(\n                    \"Index for header '%s' is %d but CSVRecord only has %d values!\",\n                    name, index, values.length));\n        }\n        return values[i];\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}