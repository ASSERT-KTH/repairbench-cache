{
    "generation": "    /**\n     * Returns a value by name.\n     *\n     * @param name\n     *            the name of the column to be retrieved.\n     * @return the column value, or {@code null} if the column name is not found\n     * @throws IllegalStateException\n     *             if no header mapping was provided\n     * @throws IllegalArgumentException\n     *             if the record is inconsistent, e.g. the header mapping is referencing a column index which is out of bounds\n     * @see #isConsistent()\n     * @see #values\n     */\n    public String get(final String name) {\n        if (mapping == null) {\n            throw new IllegalStateException(\n                    \"No header mapping was specified, the record values can't be accessed by name\");\n        }\n        final Integer index = mapping.get(name);\n        if (index == null) {\n            return null; // Column name not found in the header map\n        }\n        // Check if the fetched index is within the bounds of the values array.\n        // This check is necessary for inconsistent records where the header map might\n        // indicate more columns than the record actually contains.\n        if (index.intValue() >= values.length) {\n            throw new IllegalArgumentException(String.format(\n                    \"Index for header '%s' is %d but CSVRecord only has %d values!\",\n                    name, index.intValue(), values.length));\n        }\n        return values[index.intValue()];\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}