{
    "generation": "    /**\n     * Specialized method for removing specified existing entry.\n     * NOTE: entry MUST exist, otherwise an exception is thrown.\n     */\n    public void remove(SettableBeanProperty propToRm)\n    {\n        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n        String key = getPropertyName(propToRm); // 'key' will be lower-cased if _caseInsensitive is true\n        boolean found = false;\n\n        for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n            // _hashArea stores (String name, SettableBeanProperty prop) pairs\n            // _hashArea[i-1] holds the name (which is lower-cased if _caseInsensitive)\n            // _hashArea[i] holds the SettableBeanProperty\n            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n            if (prop == null) {\n                continue;\n            }\n            if (!found) {\n                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\n                //   as only former is lower-case in case-insensitive case.\n                // The 'key' variable (from propToRm) is also lower-cased if case-insensitive.\n                // Therefore, compare 'key' with the stored name slot (_hashArea[i-1]).\n                found = key.equals(_hashArea[i-1]);\n                if (found) {\n                    // need to leave a hole here\n                    _propsInOrder[_findFromOrdered(prop)] = null;\n                    continue;\n                }\n            }\n            props.add(prop);\n        }\n        if (!found) {\n            throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n        }\n        init(props);\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}