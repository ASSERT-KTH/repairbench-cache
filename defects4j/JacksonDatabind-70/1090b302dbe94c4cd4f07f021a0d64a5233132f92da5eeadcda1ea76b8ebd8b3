{
    "generation": "    /**\n     * Specialized method for removing specified existing entry.\n     * NOTE: entry MUST exist, otherwise an exception is thrown.\n     */\n    public void remove(SettableBeanProperty propToRm)\n    {\n        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n        String key = getPropertyName(propToRm);\n        boolean found = false;\n\n        for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n            if (prop == null) {\n                continue;\n            }\n            if (!found) {\n                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\n                //   as only former is lower-case in case-insensitive case\n                // Compare the key (which is already potentially lower-cased) with the\n                // stored key in the hash area (at index i-1).\n                found = key.equals(_hashArea[i-1]); // FIX: Compare with name slot, not prop.getName()\n                if (found) {\n                    // need to leave a hole here\n                    _propsInOrder[_findFromOrdered(prop)] = null;\n                    continue; // Don't add this property to the list 'props'\n                }\n            }\n            // If not the property to remove, add it to the list for re-initialization\n            props.add(prop);\n        }\n        // If the property wasn't found after checking the whole hash area, throw exception\n        if (!found) {\n            throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n        }\n        // Rebuild the map internals with the remaining properties\n        init(props);\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}