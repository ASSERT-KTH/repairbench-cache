{
    "generation": "    /**\n     * Specialized method for removing specified existing entry.\n     * NOTE: entry MUST exist, otherwise an exception is thrown.\n     */\n    public void remove(SettableBeanProperty propToRm)\n    {\n        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n        String key = getPropertyName(propToRm);\n        boolean found = false;\n\n        for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n            // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\n            //   as only former is lower-case in case-insensitive case\n            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n            if (prop == null) {\n                continue;\n            }\n            if (!found) {\n                // A Hairy details: key is calculated from property name which is NOT\n                // lower-case, whereas keys in hash area MAY BE lower-case...\n                // so we need to compare against key in hash area\n                String actualKey = (String) _hashArea[i-1];\n                if (key.equals(actualKey)) {\n                    // We must find the entry; but verify as sanity check\n                    if (prop != propToRm) {\n                         // 15-Jan-2017, tatu: as per [databind#1498], needs to work even if not same exact instance.\n                         //    Note, however, that typically this method is called with `prop` found\n                         //    via lookup, so usually `prop == propToRm` is true.\n                        if (!prop.getName().equals(propToRm.getName())) {\n                             throw new IllegalStateException(\"Internal error: property '\"+propToRm.getName()+\"' with key '\"+key\n                                     +\"' found instead property '\"+prop.getName()+\"'\");\n                         }\n                    }\n\n                    // need to leave a hole here\n                    _propsInOrder[_findFromOrdered(prop)] = null;\n                    found = true;\n                    // DO NOT add to props list, continue iteration to collect others\n                    continue;\n                }\n            }\n            props.add(prop);\n        }\n        // should always be found; but assertion check helps ensure logic is correct\n        if (!found) {\n            throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n        }\n        init(props);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}