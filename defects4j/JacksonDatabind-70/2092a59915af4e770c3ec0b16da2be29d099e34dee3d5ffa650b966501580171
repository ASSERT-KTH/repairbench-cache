{
    "generation": "    /**\n     * Specialized method for removing specified existing entry.\n     * NOTE: entry MUST exist, otherwise an exception is thrown.\n     */\n    public void remove(SettableBeanProperty propToRm)\n    {\n        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n        // `key` should be the normalized name of the property to remove,\n        // consistent with how names are stored internally in `_hashArea`.\n        // `getPropertyName` already handles case-insensitivity if `_caseInsensitive` is true.\n        String key = getPropertyName(propToRm);\n        boolean found = false;\n\n        // The `_hashArea` stores entries as `[key_string, prop_object, key_string, prop_object, ...]`.\n        // The loop `for (int i = 1, end = _hashArea.length; i < end; i += 2)`\n        // means `_hashArea[i]` refers to the `SettableBeanProperty` object,\n        // and `_hashArea[i-1]` refers to the corresponding String key.\n        for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n            if (prop == null) {\n                continue;\n            }\n            if (!found) {\n                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\n                //   as only former is lower-case in case-insensitive case.\n                // The \"name slot\" refers to the String key stored in `_hashArea[i-1]`,\n                // which is already normalized (e.g., lower-cased) if `_caseInsensitive` is true.\n                // `key` (from `propToRm`) is also normalized by `getPropertyName`.\n                // Therefore, comparing `key` directly with `_hashArea[i-1]` ensures the correct comparison.\n                found = key.equals(_hashArea[i-1]);\n                if (found) {\n                    // need to leave a hole here\n                    _propsInOrder[_findFromOrdered(prop)] = null;\n                    continue;\n                }\n            }\n            props.add(prop);\n        }\n        if (!found) {\n            throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n        }\n        init(props);\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}