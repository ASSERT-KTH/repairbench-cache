{
    "generation": "    /**\n     * Specialized method for removing specified existing entry.\n     * NOTE: entry MUST exist, otherwise an exception is thrown.\n     */\n    public void remove(SettableBeanProperty propToRm)\n    {\n        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n        // getPropertyName is a helper method (likely in BasicDeserializerFactory)\n        // that returns the property name, lowercased if ACCEPT_CASE_INSENSITIVE_PROPERTIES is enabled.\n        String key = getPropertyName(propToRm);\n        boolean found = false;\n\n        // This class (BucketProperties) is expected to have a '_config' field\n        // which holds the DeserializationConfig, used for feature checks.\n        boolean isCaseInsensitive = _config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\n\n        for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n            if (prop == null) {\n                continue;\n            }\n            if (!found) {\n                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\n                //   as only former is lower-case in case-insensitive case\n                // The original comment was slightly misleading in the context of this bug.\n                // `prop.getName()` returns the original case name of the property stored in the hash area.\n                // `key` (from `getPropertyName(propToRm)`) is normalized (lowercased)\n                // if the `ACCEPT_CASE_INSENSITIVE_PROPERTIES` feature is enabled.\n                // Therefore, for a correct comparison when case-insensitive matching is active,\n                // `prop.getName()` must also be normalized to lowercase before comparison with `key`.\n                String currentPropName = prop.getName();\n                if (isCaseInsensitive) {\n                    found = key.equals(currentPropName.toLowerCase());\n                } else {\n                    found = key.equals(currentPropName);\n                }\n\n                if (found) {\n                    // Property to be removed is found.\n                    // Set its corresponding entry in the ordered array to null to \"leave a hole\".\n                    _propsInOrder[_findFromOrdered(prop)] = null;\n                    // Continue iterating to collect other properties that are not being removed.\n                    continue;\n                }\n            }\n            // If the property is not the one to be removed, add it to the temporary list.\n            props.add(prop);\n        }\n        if (!found) {\n            // If the property was not found after iterating through all entries,\n            // throw an exception as per the method contract.\n            throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n        }\n        // Re-initialize the internal hash structure with the collected properties (excluding the removed one).\n        init(props);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}