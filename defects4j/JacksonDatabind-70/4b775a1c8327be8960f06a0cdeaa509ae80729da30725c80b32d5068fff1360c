{
    "generation": "    /**\n     * Specialized method for removing specified existing entry.\n     * NOTE: entry MUST exist, otherwise an exception is thrown.\n     */\n    public void remove(SettableBeanProperty propToRm)\n    {\n        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n        String key = getPropertyName(propToRm);\n        boolean found = false;\n        int orderIndex = -1;\n\n        for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n            if (prop == null) {\n                continue;\n            }\n            if (!found) {\n                // Check both the property name and the name slot for case-insensitive comparison\n                boolean nameMatch = key.equals(prop.getName());\n                if (!nameMatch && _caseInsensitive) {\n                    // For case-insensitive comparison, use the case-sensitive comparison of the lower-cased versions\n                    String propKey = getPropertyName(prop);\n                    nameMatch = key.equalsIgnoreCase(propKey);\n                }\n                if (nameMatch) {\n                    found = true;\n                    orderIndex = _findFromOrdered(prop);\n                    continue;\n                }\n            }\n            props.add(prop);\n        }\n        if (!found) {\n            throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n        }\n        _propsInOrder[orderIndex] = null;\n        init(props);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}