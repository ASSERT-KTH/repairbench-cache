{
    "generation": "    /**\n     * Specialized method for removing specified existing entry.\n     * NOTE: entry MUST exist, otherwise an exception is thrown.\n     */\n    public void remove(SettableBeanProperty propToRm)\n    {\n        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n        // 'key' will be lowercased if _caseInsensitiveKeys is true (via getPropertyName)\n        String key = getPropertyName(propToRm);\n        boolean found = false;\n\n        // Iterate through the hash area (which contains (int hash, SettableBeanProperty prop) pairs)\n        // 'i' starts at 1 to access the SettableBeanProperty objects at indices 1, 3, 5, ...\n        for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n            if (prop == null) {\n                continue;\n            }\n            if (!found) {\n                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\n                //   as only former is lower-case in case-insensitive case.\n                // This comment implies that prop.getName() might return the original-cased\n                // name, even if case-insensitive matching is enabled.\n                // If _caseInsensitiveKeys is true, 'key' is already lowercased.\n                // Therefore, for a correct case-insensitive comparison, prop.getName()\n                // must also be lowercased.\n                if (_caseInsensitiveKeys) {\n                    found = key.equals(prop.getName().toLowerCase());\n                } else {\n                    found = key.equals(prop.getName());\n                }\n\n                if (found) {\n                    // Found the property to remove.\n                    // Mark its entry in _propsInOrder as null to indicate removal.\n                    _propsInOrder[_findFromOrdered(prop)] = null;\n                    // Do not add the removed property to the temporary list 'props'.\n                    continue;\n                }\n            }\n            // Add all other properties to the temporary list 'props'.\n            props.add(prop);\n        }\n        if (!found) {\n            throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n        }\n        // Re-initialize the map with the remaining properties.\n        init(props);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}