{
    "generation": "    /**\n     * Specialized method for removing specified existing entry.\n     * NOTE: entry MUST exist, otherwise an exception is thrown.\n     */\n    public void remove(SettableBeanProperty propToRm)\n    {\n        // Note: entries MUST be added in-order, see SimpleBeanPropertyDefinition.hasExplicitIndex()\n        ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n        // Property name to use for comparison depends on case-sensitivity:\n        final String key = getPropertyName(propToRm);\n        boolean found = false;\n\n        for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n            // note: key is at i-1\n            SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n            if (prop == null) {\n                continue;\n            }\n            if (!found) {\n                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\n                //   as only former is lower-case in case-insensitive case\n                //  (that is, lookup name vs actual property name)\n\n                // 23-Feb-2017, tatu: As per [databind#1525], must check actual stored key,\n                //   not property name, as lookup map uses different key (interned,\n                //   possibly lower-cased)\n                String name = (String) _hashArea[i-1];\n\n                // 14-Mar-2017, tatu: If key is null, should we call `equals()`? Yes, very unlikely\n                //    to be null, and if it is, will get NPE as expected.\n                if (key.equals(name)) {\n                    found = true;\n                    // need to leave a hole here\n                    _propsInOrder[_findFromOrdered(prop)] = null;\n                    // but do NOT add this prop to list of remaining props\n                    continue;\n                }\n            }\n            // Either wasn't the one to remove, or we already found it, just add back\n            props.add(prop);\n        }\n\n        // Should have been found -- see NOTE above -- so if not, exception is warranted\n        if (!found) {\n            throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n        }\n        // And then re-construct lookup tables\n        init(props);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}