{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK or SCRIPT level.\n  // We've seen no cases where these indicate a bug, and some folks like\n  // keeping these semicolons around, so we'll allow them there.\n  if (n.isEmpty()) {\n    if (parent != null && (parent.isBlock() || parent.isScript())) {\n      return;\n    }\n    // Empty statement in any other context is almost certainly a mistake.\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // Empty is a statement, so we do not add it to problemNodes for wrapping.\n    return;\n  }\n\n  // We do not flag the comma operator itself; we inspect its operands.\n  if (n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove an expr-result statement itself; we handle its child.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // A no-op qualified name used only to hang JSDoc is fine.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  if (parent.getType() == Token.COMMA) {\n    if (isResultUsed) {\n      return;\n    }\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int at = an.getType();\n        if (at == Token.COMMA) continue;\n        if (at != Token.EXPR_RESULT && at != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT\n          && parent.getType() != Token.BLOCK) {\n    // Allow certain FOR clauses, otherwise bail.\n    if (!(parent.getType() == Token.FOR\n          && parent.getChildCount() == 4\n          && (n == parent.getFirstChild()\n              || n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n  }\n\n  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" +\n          Token.name(n.getType()).toLowerCase() +\n          \"' operator is not being used.\";\n    }\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // Only wrap non-statement subexpressions.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}