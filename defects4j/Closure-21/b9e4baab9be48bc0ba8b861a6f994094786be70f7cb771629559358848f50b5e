{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Skip comma\u2010operator nodes completely; we handle their children.\n  if (n.isComma()) {\n    return;\n  }\n\n  // EMPTY statements (extra semicolons) are only benign at BLOCK or SCRIPT level.\n  if (n.isEmpty()) {\n    if (parent != null &&\n        (parent.getType() == Token.BLOCK ||\n         parent.getType() == Token.SCRIPT)) {\n      // allow stray semicolons in blocks or at top\u2010level\n      return;\n    }\n    // Otherwise (e.g. empty statement as an if\u2010body), report it.\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR,\n            \"This code lacks side-effects. Is there a bug?\"));\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // We don't touch bare EXPR_RESULT nodes or block nodes here.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // Preserve QUALIFIED_NAME nodes that carry JSDoc.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  if (parent.getType() == Token.COMMA) {\n    // In a comma-expression context, only the very last child can be \"used.\"\n    if (isResultUsed) {\n      return;\n    }\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) continue;\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT\n             && parent.getType() != Token.BLOCK) {\n    // Only allow un\u2010used expressions in FOR initialization or increment.\n    if (!(parent.getType() == Token.FOR\n          && parent.getChildCount() == 4\n          && (n == parent.getFirstChild()\n              || n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n  }\n\n  // If it's a simple operator or has no side\u2010effects, warn about it.\n  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\"\n          + Token.name(n.getType()).toLowerCase()\n          + \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}