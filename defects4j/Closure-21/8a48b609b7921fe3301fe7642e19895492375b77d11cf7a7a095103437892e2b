{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  if (n.isEmpty() || n.isComma()) {\n    return;\n  }\n  if (parent == null) {\n    return;\n  }\n  if (n.isExprResult()) {\n    return;\n  }\n  // Allow attaching JSDoc to qualified name no-ops\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  if (parent.getType() == Token.COMMA) {\n    if (isResultUsed) {\n      return;\n    }\n    // do not return early even for last child, because useless code *inside* comma expressions should be detected\n    // (change: removed buggy ancestor check - detect useless code in all subexpressions of comma)\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    // Special case: for loop initializer and update may contain useless code\n    if (!(parent.getType() == Token.FOR &&\n        parent.getChildCount() == 4 &&\n        (n == parent.getFirstChild() ||\n         n == parent.getFirstChild().getNext().getNext()))) {\n      // Otherwise, don't warn about subexpressions\n      return;\n    }\n  }\n\n  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n    }\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}