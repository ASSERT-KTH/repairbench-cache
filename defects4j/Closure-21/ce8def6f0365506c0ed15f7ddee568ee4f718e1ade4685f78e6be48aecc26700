{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it.\n  if (n.isEmpty() ||\n      n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could\n  // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  boolean useless = false;\n\n  if (isResultUsed) {\n    // The expression result is used, so it's not useless.\n    return;\n  }\n\n  if (parent.getType() == Token.COMMA) {\n    if (n == parent.getLastChild()) {\n      // Check ancestors upwards to determine if the overall expression result is unused.\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {\n          // Expression is not used.\n          useless = true;\n        }\n        break;\n      }\n    } else {\n      // Non-final child of COMMA operator and its value is unused.\n      useless = true;\n    }\n  } else if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.BLOCK) {\n    // Top level in a statement or block, and unused result.\n    useless = true;\n  } else {\n    // Otherwise, check for for-loop init and incr clauses, which can have unused results.\n    if (!(parent.getType() == Token.FOR\n          && parent.getChildCount() == 4\n          && (n == parent.getFirstChild()\n              || n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n    // else, in for init or incr; check continues\n    useless = true;\n  }\n\n  if (useless && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n          \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // TODO(johnlenz): determine if it is necessary to\n    // try to protect side-effect free statements as well.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}