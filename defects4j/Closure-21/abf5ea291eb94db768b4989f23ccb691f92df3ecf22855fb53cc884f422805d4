{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes (extra semicolons) and comma nodes are not directly checked.\n  if (n.isEmpty() || n.isComma()) {\n    return;\n  }\n  if (parent == null) {\n    return;\n  }\n  // We rely on the child\u2010nodes in \u201cEXPR_RESULT\u201d to report errors.\n  if (n.isExprResult()) {\n    return;\n  }\n  // Allow a no\u2010op qualified name, if it has JSDoc on it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  // Special handling for nodes that are part of a comma (\",\") expression.\n  if (parent.getType() == Token.COMMA) {\n    // In comma expressions the \u201cused\u201d value is only the final one.\n    // However, there is a nuance: if the entire comma chain is pure\n    // (has no side effects) and is used in an assignment (or var initializer),\n    // then the omission of intermediate values is likely intentional.\n    // But in other contexts \u2013 like when a pure comma expression appears\n    // as a function argument \u2013 a non-final value is suspicious.\n    Node topComma = n;\n    while (topComma.getParent() != null && topComma.getParent().getType() == Token.COMMA) {\n      topComma = topComma.getParent();\n    }\n    // If the comma chain is used to initialize a variable or an assignment\n    // and the whole chain is pure, then suppress warnings.\n    if (topComma.getParent() != null) {\n      int containerType = topComma.getParent().getType();\n      if ((containerType == Token.ASSIGN || containerType == Token.VAR)\n          && !NodeUtil.mayHaveSideEffects(topComma, t.getCompiler())) {\n        return;\n      }\n    }\n    // Determine whether n is the final computed value of the entire comma chain.\n    // Walk upward through comma parents. Even if n is the last child of its immediate\n    // comma, it might be nested as the left operand of a larger comma.\n    Node tmp = n;\n    boolean isFinal = true;\n    while (tmp.getParent() != null && tmp.getParent().getType() == Token.COMMA) {\n      if (tmp != tmp.getParent().getLastChild()) {\n        isFinal = false;\n        break;\n      }\n      tmp = tmp.getParent();\n    }\n    // If the overall comma expression\u2019s value is used, then the final value is safe.\n    if (isFinal && NodeUtil.isExpressionResultUsed(tmp)) {\n      return;\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    // For most other nodes, if the parent is not an expression-result or a block,\n    // then ignore it, except for the special case of a FOR loop.\n    if (!(parent.getType() == Token.FOR &&\n          parent.getChildCount() == 4 &&\n          (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n  }\n\n  // Now, if the node is a simple operator or a side-effect\u2013free expression,\n  // it is considered \u201cuseless.\u201d\n  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" +\n            Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n    }\n    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // Protect non-statement expressions, if necessary.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}