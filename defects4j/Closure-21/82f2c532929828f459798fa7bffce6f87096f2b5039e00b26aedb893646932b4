{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n\n    if (parent == null) {\n        return;\n    }\n\n    if (n.isExprResult()) {\n        return;\n    }\n\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    if (parent.getType() == Token.COMMA) {\n        if (isResultUsed) {\n            return;\n        }\n\n        NodeephirParentLoop:\n        for (Node an = parent; an != null; an = an.getParent()) {\n            Token anType = an.getType();\n            if (anType == Token.COMMA || anType == Token.EXPR_RESULT || anType == Token.BLOCK) {\n                if (anType == Token.COMMA) {\n                    Node //// = an.getParent();\n                    if (//// == null) continue;\n                    if (////.getType() != Token.FOR || ////.getChildCount() != 4) {\n                        continue;\n                    }\n                }\n                continue;\n            }\n            break;\n        }\n\n        if (n == parent.getLastChild()) {\n            for (Node an : parent.getAncestors()) {\n                int ancestorType = an.getType();\n                if (ancestorType == Token.COMMA) continue;\n                if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n                else break;\n            }\n        }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n        if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n            return;\n        }\n    }\n\n    boolean inComma = parent.getType() == Token.COMMA;\n\n    boolean isTuple = parent.getType() == Token.COMMA && NodeUtil.isInParentheses(parent.getParent());\n\n    if (inComma) {\n        // For tuple expressions like (a, b, c), only the last expression needs to have side effects\n        // if it's being used as a value, others can be side-effect-free\n        if (isTuple) {\n            // Find all other comma parents upwards\n            List<Node> tupleCommas = new ArrayList<>();\n            Node current = parent;\n            while (current.getType() == Token.COMMA) {\n                tupleCommas.add(current);\n                current = current.getParent();\n                if (current == null || current.getType() != Token.COMMA) {\n                    break;\n                }\n            }\n            if (tupleCommas.size() == 1) {\n                tupleCommas = null;\n            } else {\n                // If this is the nth comma in a tuple, only the last one needs to have a side effect\n                if (!n.equals(parent.getLastChild())) {\n                    return;\n                }\n            }\n        }\n    }\n\n    boolean canReport = true;\n    if (inComma && !isResultUsed) {\n        // Check if we're inside function call arguments or similar\n        Node parentOfComma = parent.getParent();\n        if (parentOfComma != null) {\n            switch (parentOfComma.getType()) {\n                case Token.CALL:\n                case Token.NEW:\n                case Token.COMMA:\n                    canReport = false;\n                    break;\n            }\n            // Also, if inside a function declaration parameters, which are Token.PARAMS\n            if (parentOfComma.getType() == Token.PARAMS) {\n                canReport = false;\n            }\n        }\n    }\n\n    if (canReport) {\n        if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n            String msg = \"This code lacks side-effects. Is there a bug?\";\n            if (n.isString()) {\n                msg = \"Is there a missing '+' on the previous line?\";\n            } else if (isSimpleOp) {\n                msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n                        \"' operator is not being used.\";\n            }\n\n            t.getCompiler().report(\n                    t.makeError(n, level, USELESS_CODE_ERROR, msg));\n            if (!NodeUtil.isStatement(n)) {\n                problemNodes.add(n);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}