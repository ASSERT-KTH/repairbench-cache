{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it.\n  if (n.isEmpty() ||\n      n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could\n  // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  if (parent.getType() == Token.COMMA) {\n    if (isResultUsed) {\n      return;\n    }\n    // The difference with the original logic: we want to warn on the operands of comma,\n    // unless the comma itself is the root of an expression statement or a for loop,\n    // otherwise these operands are ALWAYS no-op if they are side-effect free.\n    if (n == parent.getLastChild()) {\n      // last child result is used by the comma, so skip that\n      return;\n    } else {\n      // Check if comma tree is part of an expression statement or for(;,,) initializer;\n      Node ancestor = parent.getParent();\n      while (ancestor != null &&\n             (ancestor.getType() == Token.COMMA)) {\n        ancestor = ancestor.getParent();\n      }\n      if (ancestor != null) {\n        int ancestorType = ancestor.getType();\n        if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {\n          // do nothing, fallthrough to report\n        } else if (ancestorType == Token.FOR) {\n          // FOR nodes: only warn on useless code in initializer/increment parts?\n          int childIndex = ancestor.getChildBefore(parent).getChildIndex();\n          // For statement children: VAR (optional), condition (optional), increment (optional), body\n          // Could just allow inside FOR's children generally,\n          // but for simplicity accept FOR context as one where these are tolerated.\n          // Ideally be more precise.\n          return;\n        } else {\n          // Anything else (CALL, ASSIGN, RETURN,etc), skip warning for comma children in here.\n          return;\n        }\n      } else {\n        // probably unreachable: no ancestor? ignore.\n        return;\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    // Also allow cases where the expression is inside a FOR statement\n    if (!(parent.getType() == Token.FOR &&\n          parent.getChildCount() == 4 &&\n          (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n  }\n\n  if (\n      (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n          \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // TODO(johnlenz): determine if it is necessary to\n    // try to protect side-effect free statements as well.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}