{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) { // Don't check COMMA nodes directly, check their children.\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    // Handle specific parent types where results might appear unused\n    // but are contextually required or handled differently.\n    if (parent.getType() == Token.COMMA) {\n      // If 'n' is the last child of a comma operator, its value is the result\n      // of the comma expression. Check if the comma's result is ultimately used.\n      if (n == parent.getLastChild()) {\n        boolean ultimatelyUsed = false;\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) {\n            continue; // Look beyond parent commas.\n          }\n          // If the first non-comma ancestor isn't EXPR_RESULT or BLOCK,\n          // the comma's value is used (e.g., in assignment, return, condition).\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n            ultimatelyUsed = true;\n          }\n          // We found the determining context (used or discarded), stop checking ancestors.\n          break;\n        }\n        // If the comma's result is ultimately used, don't warn about the last child.\n        if (ultimatelyUsed) {\n          return;\n        }\n        // Otherwise (result discarded), fall through to check 'n' for side effects.\n      }\n      // If 'n' is not the last child, its result is discarded by the comma.\n      // Fall through to check 'n' for side effects.\n\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      // If the parent is not EXPR_RESULT or BLOCK, the result is generally used,\n      // UNLESS it's the init or incr part of a standard FOR loop.\n      // example: for(init; cond; incr)\n      // The init and incr expressions are not in an EXPR_RESULT node.\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n             (n == parent.getFirstChild() || // init\n              n == parent.getFirstChild().getNext().getNext()))) { // incr\n        // Result is used by the parent (e.g., condition, assignment RHS, return value),\n        // so don't warn about lack of side effects here.\n        return;\n      }\n      // If it IS the init or incr of a FOR loop, fall through to check for side effects.\n    }\n    // If we reach here, the node 'n' is in a context where its result is discarded\n    // (e.g., EXPR_RESULT, BLOCK, non-last COMMA operand, last COMMA operand in discarded context,\n    // FOR init/incr). Now check if it lacks side effects.\n\n    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      // Report warning: the result is discarded and the expression has no side effects.\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      // Keep track of problematic nodes if they aren't full statements,\n      // potentially for removal by other passes.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}