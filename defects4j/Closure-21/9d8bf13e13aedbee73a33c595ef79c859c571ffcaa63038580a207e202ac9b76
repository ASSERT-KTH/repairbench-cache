{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    // Determine if the result of 'n' is effectively used.\n    // NodeUtil.isExpressionResultUsed has a known subtlety for\n    // children of COMMA nodes. Specifically, for 'a, b', the result of 'a' is\n    // discarded, while the result of 'b' becomes the result of the COMMA node.\n    // We adjust the 'isResultUsed' logic here to accurately reflect this.\n    boolean isResultUsed;\n    if (parent.getType() == Token.COMMA) {\n      if (n == parent.getLastChild()) {\n        // If 'n' is the last child of a comma, its result IS the comma's result.\n        // So, whether its result is used depends on whether the comma node itself is used.\n        isResultUsed = NodeUtil.isExpressionResultUsed(parent);\n      } else {\n        // If 'n' is a non-last child of a comma, its result is discarded by the comma operator.\n        // Therefore, it is never \"used\" in terms of its value affecting the outcome of the comma expression.\n        isResultUsed = false;\n      }\n    } else {\n      // For all other parent types, we rely on NodeUtil's existing logic.\n      isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    }\n\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      // If the result of 'n' (a child of a COMMA) is considered used, then we don't report an error.\n      if (isResultUsed) {\n        return;\n      }\n      // If 'n' is the last child of a comma, and its result is *not* used (isResultUsed is false),\n      // then we need to check its ancestors. This determines if the entire comma expression's result\n      // is implicitly unused (e.g., if the comma expression is directly under an EXPR_RESULT or BLOCK).\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n      // If 'n' is not the last child of the comma (e.g., '2' in 'a = (2, 3)'),\n      // and its result is not used (isResultUsed is already false from our custom calculation),\n      // we fall through to the final side-effect check, which is the desired behavior.\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      // For parents that are neither COMMA, EXPR_RESULT, nor BLOCK, the expression's\n      // result is generally considered \"used\" by the parent unless it's a specific FOR loop\n      // initialization/increment clause which can be side-effect free.\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n    \n    // Final check: if the expression has no side effects OR it's a simple operator\n    // and its result is not being used, then it's useless code.\n    if (\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}