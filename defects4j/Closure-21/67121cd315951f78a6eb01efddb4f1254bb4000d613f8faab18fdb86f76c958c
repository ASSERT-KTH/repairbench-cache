{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n\n    if (parent == null) {\n        return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n        return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    // This condition covers function call arguments and other comma-separated expressions.\n    if (parent.getType() == Token.COMMA) {\n        if (isResultUsed) {\n            return;\n        }\n        Node grandParent = parent.getParent();\n        if (grandParent != null) {\n            Token grandParentType = grandParent.getType();\n            if (grandParentType == Token.FUNC || grandParentType == Token.obj) {\n                // Check if the last comma-separated node in the parameter list is unused.\n                if (n == parent.getLastChild()) {\n                    // Traverse up to check if we are in a function call or object literal.\n                    for (Node an : parent.getAncestors()) {\n                        int ancestorType = an.getType();\n                        if (ancestorType == Token.COMMA) continue;\n                        if (ancestorType == Token.FUNC || ancestorType == Token.obj) {\n                            if (isResultUsed || NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n                                return;\n                            }\n                            break;\n                        }\n                        // If we exit the function call or object, then it's part of outer code and should be checked normally.\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    // Check for cases in blocks or expressions where the result isn't used.\n    if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n        if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n                (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n            return;\n        }\n    }\n\n    if (isResultUsed) {\n        return;\n    }\n\n    if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n        return;\n    }\n\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n            t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // TODO(johnlenz): determine if it is necessary to\n    // try to protect side-effect free statements as well.\n    if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}