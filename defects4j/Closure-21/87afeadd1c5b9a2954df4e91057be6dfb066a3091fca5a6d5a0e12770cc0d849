{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) { // Don't check comma nodes themselves, check their operands.\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      // If the EXPR_RESULT is empty, it is usually harmless.\n      // e.g. VAR declarations without assignments register as empty EXPR_RESULT.\n      if (n.hasChildren()) {\n         Node expr = n.getFirstChild();\n         // Allow constant expressions used for JSDoc purposes.\n         if (expr.isQualifiedName() && expr.getJSDocInfo() != null) {\n             return;\n         }\n         // Check EXPR_RESULT node children later in the control flow.\n      } else {\n         // Empty EXPR_RESULT is OK.\n         return;\n      }\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    // Check moved slightly up to handle cases like `/** @type {foo} */ bar.baz;`\n    // which might be inside an EXPR_RESULT node.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    // Now determine if the context requires the expression result.\n    if (parent.getType() == Token.COMMA) {\n      // For a comma operand, the result is used if it's the last operand AND\n      // the whole comma expression's result is used.\n      if (n == parent.getLastChild()) {\n        // isResultUsed already reflects the comma expression's usage context.\n        if (isResultUsed) {\n          return; // Last operand's result is used.\n        }\n      } else {\n        // Non-last operand's result is never used by the comma operator itself.\n        isResultUsed = false;\n      }\n      // Fall through if result is not used.\n\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      // Contexts other than EXPR_RESULT, BLOCK, COMMA.\n      // Allow FOR init/incr check to proceed if result is unused.\n      // For all other contexts (ARRAYLIT, OBJECTLIT value, ASSIGN rhs, etc.),\n      // assume the expression is needed, or handled elsewhere. The original logic\n      // returned here unless it was a FOR init/incr.\n       if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n             (n == parent.getFirstChild() || n == parent.getChildAtIndex(2)))) {\n          // If the result is used in these contexts, we should definitely bail.\n          // If not used (e.g. `[1, 2, 3]`), the original code returned, let's keep that.\n          if (isResultUsed) {\n             return;\n          }\n          // It's potentially useless code, but not in a statement context.\n          // Avoid warning for now, consistent with original logic.\n          return;\n       } else {\n         // For FOR init/incr, proceed only if the result is not used.\n         if (isResultUsed) {\n            return;\n         }\n       }\n    } else {\n      // Parent is EXPR_RESULT or BLOCK. Result is definitely not used if we're here.\n      // NodeUtil.isExpressionResultUsed should return false. Assert?\n      // Sanity check: if isResultUsed is true, NodeUtil is wrong.\n      if (isResultUsed) {\n        // This should not happen based on NodeUtil's documented behavior.\n        // If it does, returning prevents a potentially incorrect warning.\n        return;\n      }\n    }\n\n\n    // If we reach here, the expression's result is not used in its context.\n    // Check if the expression itself lacks side effects or is a simple operator\n    // whose value is unused.\n    if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler()) || isSimpleOp) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      // problemNodes is used by another pass (RemoveUnusedCode) to remove nodes.\n      // Only add expression nodes, not EXPR_RESULT itself.\n      if (!n.isExprResult() && !NodeUtil.isStatement(n)) {\n         // Check if parent is EXPR_RESULT before adding.\n         // We don't want to remove 'var x = foo();' if foo() has no side effects but result is unused.\n         // Let RemoveUnusedCode handle variable removal.\n         // Only add nodes whose removal is safe and doesn't break structure.\n         // Check if n is directly under EXPR_RESULT or COMMA under EXPR_RESULT etc.\n         // This logic might need refinement depending on RemoveUnusedCode pass.\n         // For now, keep the original condition.\n        if (!NodeUtil.isStatement(n)) { // Original condition\n           problemNodes.add(n);\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}