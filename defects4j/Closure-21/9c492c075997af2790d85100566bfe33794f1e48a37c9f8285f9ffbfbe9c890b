{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it.\n  if (n.isEmpty() ||\n      n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could\n  // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  if (parent.getType() == Token.COMMA) {\n    if (!isResultUsed) {\n      // Only report for nodes that are not the last child of the top-level\n      // COMMA tree or are inside an EXPR_RESULT/BLOCK, i.e. only signal\n      // for useless code unless part of a valid comma expression.\n      Node top = parent;\n      while (top.getParent() != null && top.getParent().getType() == Token.COMMA) {\n        top = top.getParent();\n      }\n      Node grand = top.getParent();\n      if (n != parent.getLastChild() ||\n          !(grand != null && (grand.getType() == Token.EXPR_RESULT || grand.getType() == Token.BLOCK))) {\n        // Mark code as useless only if it is not the last child of entire comma expression\n        // in an EXPR_RESULT or BLOCK.\n        if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n          String msg = \"This code lacks side-effects. Is there a bug?\";\n          if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n          } else if (isSimpleOp) {\n            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n                \"' operator is not being used.\";\n          }\n\n          t.getCompiler().report(\n              t.makeError(n, level, USELESS_CODE_ERROR, msg));\n          if (!NodeUtil.isStatement(n)) {\n            problemNodes.add(n);\n          }\n        }\n      }\n    }\n    // Always return in the COMMA case.\n    return;\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    if (!(parent.getType() == Token.FOR &&\n          parent.getChildCount() == 4 &&\n          (n == parent.getFirstChild() ||\n           n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n  }\n\n  if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n          \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}