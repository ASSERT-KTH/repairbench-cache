{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        // If 'n' is the last child of a COMMA and its result is used,\n        // then 'n' is useful.\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        // If 'n' is the last child of a COMMA, and its result is not used (isResultUsed is false),\n        // we need to check if the COMMA expression itself is at a statement-like position\n        // where its result is discarded (e.g., direct child of EXPR_RESULT or BLOCK).\n        // If the COMMA's result is used by an ancestor, then 'n' is useful.\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue; // Skip intermediate COMMA ancestors\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n            // The COMMA's result is used by a non-statement parent.\n            return; // 'n' is useful in this context.\n          } else {\n            // The COMMA's result is discarded (ancestor is EXPR_RESULT or BLOCK).\n            // Proceed to the side-effect check for 'n'.\n            break;\n          }\n        }\n      }\n      // If 'n' is NOT the last child of a COMMA, its result is always discarded by the COMMA operator.\n      // So, if its result is not used, it should fall through to the side-effect check.\n      // No 'return' here for this case.\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK && parent.getType() != Token.COMMA) {\n      // This block handles cases where the parent is NOT an EXPR_RESULT, BLOCK, or COMMA.\n      // In general, if 'n' is a child of such a parent, its result is used by the parent.\n      // The only exceptions are specific positions within a FOR loop.\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        // If it's not a FOR loop initializer or increment, and its result wasn't explicitly used\n        // (isResultUsed was false), then 'n' is implicitly useful in this context.\n        return;\n      }\n    }\n\n    // If we reach this point, it means 'n''s result is not explicitly used by its parent\n    // (isResultUsed was false), and it's in a context where a side-effect-free\n    // expression would be considered useless (e.g., direct child of EXPR_RESULT/BLOCK,\n    // a non-last child of COMMA, or a FOR loop initializer/increment).\n    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}