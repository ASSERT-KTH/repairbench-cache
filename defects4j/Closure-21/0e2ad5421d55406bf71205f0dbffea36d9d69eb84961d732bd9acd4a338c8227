{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      // For children of a COMMA, if 'n' is the last child, its result is the COMMA's result.\n      // If 'n' is not the last child, its result is discarded by the COMMA.\n      // So isResultUsed should only be true for the last child.\n      if (n == parent.getLastChild()) {\n        // If the last child's result is used (meaning the COMMA's result is also used),\n        // then this node is not useless.\n        if (isResultUsed) { // This check should only be relevant for the last child of a COMMA\n          return;\n        }\n        // If the last child's result is not used (meaning the COMMA's result is not used),\n        // we check the ancestor chain to see if the COMMA itself is eventually used.\n        // If not, then this last child is useless.\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue; // Skip intermediate COMMA ancestors.\n          // If the COMMA is part of an expression whose result is used by its non-COMMA ancestor,\n          // then the COMMA (and its last child) are not useless.\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n            return;\n          } else {\n            // If the ancestor is an EXPR_RESULT or BLOCK, the COMMA's result is not used.\n            // So the COMMA (and its last child) are useless. Break and let it be flagged.\n            break;\n          }\n        }\n      }\n      // If 'n' is NOT the last child of a COMMA, its result is discarded by the COMMA.\n      // So 'isResultUsed' should always be false for non-last children of a COMMA.\n      // In this case, 'n' is useless if it has no side effects.\n      // It should fall through to the final side-effect check.\n      // No 'return' is needed here, as the initial 'isResultUsed' check is now inside\n      // the 'n == parent.getLastChild()' block.\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n    if (\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}