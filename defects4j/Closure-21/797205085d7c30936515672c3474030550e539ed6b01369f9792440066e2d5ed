{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // An EMPTY node represents a semicolon only statement. Allow\n    // these only if they are direct children of a BLOCK.\n    if (n.isEmpty()) {\n      // Allow block-level empty statements:\n      //   { ;;; }\n      // Allow empty function bodies:\n      //   function foo() {}\n      // Allow empty control structures:\n      //   while(foo());\n      // TODO(johnlenz): Should we be stricter about these? C versions of\n      //                 lint generally warn about the latter.\n      if (parent == null\n          || parent.isBlock()\n          || parent.isScript()\n          || parent.isFunction()) {\n         return;\n      }\n      // Fall through to check EMPTY nodes in other contexts (e.g. if (x); )\n      // where they are likely bugs.\n    }\n\n    // Do not check comma nodes directly, check their operands.\n    // Do not check EXPR_RESULT nodes, check their expressions.\n    // Do not check the top level script node.\n    if (n.isComma() || n.isExprResult() || n.isScript() || parent == null) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    // Check if the code lacks side effects and its result is unused.\n    // Relies on NodeUtil helper functions to determine these conditions.\n    boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n\n    // If it has side effects, or the result is used, it is useful.\n    if (hasSideEffects || isResultUsed) {\n        return;\n    }\n\n    // If the node has JSDoc attached, it maybe that the JSDoc is the\n    // reason for the code existing. Don't warn.\n    if (n.getJSDocInfo() != null) {\n      return;\n    }\n\n    // Report the useless code.\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) { // Use isSimpleOp for msg only\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n          \"' operator is not being used.\";\n    } else if (n.isEmpty()) { // Specific message for suspicious empty statements\n        msg = \"Suspicious empty statement.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n\n    // TODO(johnlenz): determine if it is necessary to\n    // try to protect side-effect free statements as well.\n    // The removal logic might need more refinement, but reporting should be fixed.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}