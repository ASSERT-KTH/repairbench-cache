{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // Skip known safe cases or nodes handled elsewhere\n    // VOID nodes appear when there are extra semicolons at the BLOCK level. Allow it.\n    if (n.isEmpty() || n.isComma() || parent == null || n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    // Determine if the expression's result is effectively used, considering context.\n    boolean isResultEffectivelyUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n\n    // If the parent is a context where results are implicitly ignored,\n    // then the result is not used, regardless of what isExpressionResultUsed says.\n    if (parent.isExprResult() || parent.isBlock()) {\n      isResultEffectivelyUsed = false;\n    } else if (parent.isFor()) {\n      // The initializer and increment parts of a FOR loop are like EXPR_RESULT.\n      // The condition's result is used, and the body's result might be.\n      Node condition = NodeUtil.getConditionExpression(parent);\n      if (n != condition && n != parent.getLastChild()) {\n         // Node n is the initializer or the increment.\n         isResultEffectivelyUsed = false;\n      }\n    } else if (parent.isComma() && n == parent.getLastChild()) {\n      // For the last child of a comma, its result is used if and only if\n      // the comma's result is used by the comma's parent.\n      isResultEffectivelyUsed = NodeUtil.isExpressionResultUsed(parent);\n    }\n    // Note: For non-last children of COMMA, NodeUtil.isExpressionResultUsed(n)\n    // should correctly return false, as the comma operator discards the value.\n\n    // Report error if the result is not effectively used and there are no side effects.\n    if (!isResultEffectivelyUsed && !hasSideEffects) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n\n      // Track problematic nodes if they aren't full statements.\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}