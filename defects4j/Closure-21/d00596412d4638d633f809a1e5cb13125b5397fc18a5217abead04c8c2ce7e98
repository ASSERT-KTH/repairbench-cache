{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    // Determine if 'n' itself has its direct result used by its parent.\n    // This is a general indicator of usefulness, but needs special handling for COMMA.\n    boolean isResultUsedByParent = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    // --- Start of refined logic for useless code detection ---\n\n    // Special handling for COMMA nodes.\n    // A node within a COMMA expression is only useful if it's the last child\n    // AND the COMMA expression's result is used.\n    if (parent.getType() == Token.COMMA) {\n      if (n == parent.getLastChild()) {\n        // If n is the last child of a COMMA node, its result is the result of the COMMA node.\n        // Its usefulness depends on whether the COMMA node's result is used.\n        if (NodeUtil.isExpressionResultUsed(parent)) {\n          return; // The result of the COMMA (and thus n) is used, so n is useful.\n        }\n        // If the COMMA's result is not used, it means n is potentially useless.\n        // Fall through to the final side-effect check.\n      } else {\n        // If n is NOT the last child of a COMMA node, its result is always discarded by the COMMA operator.\n        // Therefore, it is only useful if it has side effects.\n        // Always fall through to the final side-effect check. Do not return based on 'isResultUsedByParent' here.\n      }\n      // After handling COMMA specific logic, if not returned, proceed to the final check.\n    } else { // Parent is NOT a COMMA.\n      // General case: if the result of 'n' is used by its parent, it's useful.\n      if (isResultUsedByParent) {\n        return;\n      }\n\n      // If the result of 'n' is NOT used by its parent, we need further checks.\n      // If the parent is not an EXPR_RESULT or BLOCK, it implies 'n' is in a larger expression context\n      // (e.g., assignment, function call argument, conditional expression).\n      // In these contexts, even if `isResultUsedByParent` is false, the expression might still be implicitly useful\n      // (e.g., conditions in `if`, `while`, `for` loops, or the initial/increment expressions in `for` loops).\n      if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n        // The original logic `if (! (FOR_LOOP_COND)) return;` meant:\n        // if it's NOT the FOR loop init/increment/condition special case, then it's considered useful and we return.\n        // This covers cases like `if (x==y);` where `x==y` is useful.\n        if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n               (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n          return; // 'n' is useful due to its context (e.g., conditional, argument, etc.)\n        }\n        // If it *is* the FOR loop special case (init/increment) and result is not used,\n        // it means we fall through to the final side-effect check.\n      }\n      // If the parent IS an EXPR_RESULT or BLOCK, and isResultUsedByParent is false,\n      // it means 'n' is potentially useless, so fall through to the final side-effect check.\n    }\n\n    // --- End of refined logic for useless code detection ---\n\n    // This is the common useless code check: report if the expression has no side effects and is not a simple operator.\n    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}