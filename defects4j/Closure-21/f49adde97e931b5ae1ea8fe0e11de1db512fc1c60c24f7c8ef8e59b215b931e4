{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) { // Don't check COMMA nodes directly. We check their children.\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not check EXPR_RESULT nodes themselves. We are interested in their children.\n    // The results of EXPR_RESULT nodes are never used.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    // Determine if the expression's result is implicitly used by the context\n    // in which it appears.\n    // If the parent is not an EXPR_RESULT, BLOCK, or specific FOR structure,\n    // the result is likely used.\n    if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (parent.getType() == Token.COMMA) {\n        // If the node is the last child of a comma operator, its result\n        // might be used by an ancestor. Check the ancestors.\n        if (n == parent.getLastChild()) {\n          boolean usageFound = false;\n          for (Node ancestor : parent.getAncestors()) {\n            int ancestorType = ancestor.getType();\n            if (ancestorType == Token.COMMA) {\n              continue; // Skip intermediate commas\n            }\n            // If the ancestor context uses the result (e.g., ASSIGN, RETURN, IF),\n            // then the result is used.\n            if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n              usageFound = true;\n              break;\n            }\n            // If we hit the statement level, the result is not used further up.\n            if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {\n              break;\n            }\n          }\n          // If the result of the comma expression was used by an ancestor, return.\n          if (usageFound) {\n            return;\n          }\n          // Otherwise (result not used), fall through to the side-effect check.\n        }\n        // If 'n' is not the last child of a comma, its result is never used.\n        // Fall through to the side-effect check.\n\n      } else if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n                 (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        // For contexts other than COMMA, EXPR_RESULT, BLOCK:\n        // If the context is not the initializer or increment of a standard FOR loop,\n        // the result is considered used (e.g., condition, assignment RHS, argument).\n        return; // Suppress side-effect check.\n      }\n      // Fall through for FOR initializer/increment and non-last COMMA children.\n    }\n    // Fall through for children of EXPR_RESULT or BLOCK.\n\n    // If we reach here, the expression's result is potentially unused.\n    // Check if the expression lacks side effects or is a simple operator\n    // whose result is unused.\n    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // Tag the node for potential removal if it's not a statement node.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}