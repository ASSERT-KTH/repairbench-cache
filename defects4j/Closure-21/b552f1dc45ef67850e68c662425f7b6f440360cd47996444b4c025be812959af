{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Instead of unconditionally skipping void nodes,\n  // only skip an empty (void) node if it\u2019s an extra semicolon within a block.\n  if (n.isEmpty()) {\n    if (parent != null && parent.getType() == Token.BLOCK) {\n      return;\n    }\n    // Otherwise \u2013 e.g. an empty statement used as the sole body of an if\u2010statement \u2013\n    // we want to flag it as \u201cside\u2010effect free.\u201d\n  }\n  if (n.isComma()) {\n    return;\n  }\n  if (parent == null) {\n    return;\n  }\n\n  // We deliberately skip nodes whose type is EXPR_RESULT;\n  // their \u201cusefulness\u201d is computed on their children.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // Don\u2019t complain about a qualified name if it has JSDoc attached.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  // Special handling for operands of a comma operator.\n  if (parent.getType() == Token.COMMA) {\n    // When a comma operator is used, only its last operand contributes to the overall value.\n    // However, we do not wish to flag an entire comma\u2010expression that is \u201cpure\u201d\n    // when it is used, for example, as the right\u2010side of an assignment.\n    boolean allOperandsPure = true;\n    for (Node child : parent.children()) {\n      if (NodeUtil.mayHaveSideEffects(child, t.getCompiler())) {\n        allOperandsPure = false;\n        break;\n      }\n    }\n    Node commaParent = parent.getParent();\n    if (commaParent != null &&\n        (commaParent.getType() == Token.ASSIGN || commaParent.getType() == Token.VAR) &&\n        allOperandsPure) {\n      // When the whole comma expression is pure and is used for an assignment or var initializer,\n      // assume the programmer intended the final (pure) result.\n      return;\n    }\n    // For a non\u2010last operand in a comma operator, only flag it if it really isn\u2019t \u201cused.\u201d\n    if (n != parent.getLastChild()) {\n      if (isResultUsed) {\n        return;\n      }\n    } else {\n      // For the last operand, look upward to see if the comma operator\u2019s result is itself used.\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n          return;\n        }\n        break;\n      }\n    }\n  }\n  // For most nodes we complain only when the computed expression\u2019s value isn\u2019t used.\n  // Typically an expression is \u201cused\u201d only when it is immediately wrapped in an\n  // expression statement or block.\n  else if (!n.isEmpty() &&\n           parent.getType() != Token.EXPR_RESULT &&\n           parent.getType() != Token.BLOCK) {\n    // ...except for the special case of a FOR loop initializer/test update.\n    if (!(parent.getType() == Token.FOR &&\n          parent.getChildCount() == 4 &&\n          (n == parent.getFirstChild() ||\n           n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n  }\n\n  // If the expression is either a simple operator (like \"==\")\n  // or is pure (has no side effects), then flag it.\n  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n    }\n    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}