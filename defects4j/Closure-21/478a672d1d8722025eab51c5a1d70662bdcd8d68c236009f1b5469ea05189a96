{
    "generation": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    // `isResultUsed` for `n` is calculated here, but its direct use for\n    // COMMA parents is overridden by the specific COMMA logic below.\n    // It is still relevant for other parent types in the subsequent `else if` block.\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n    if (parent.getType() == Token.COMMA) {\n      boolean commaResultUsed = false;\n      if (n == parent.getLastChild()) {\n        // If 'n' is the last child of a COMMA, its value becomes the result\n        // of the COMMA expression. We need to check if the COMMA expression's\n        // result is ultimately used.\n        Node current = parent;\n        while (current != null) {\n          // If the current node (or an ancestor) directly uses its result,\n          // then the entire comma expression's result is used.\n          if (NodeUtil.isExpressionResultUsed(current)) {\n            commaResultUsed = true;\n            break;\n          }\n          // If the current node is a statement (like EXPR_RESULT or BLOCK),\n          // then the result of the expression (including the comma) is discarded.\n          // This marks the end of the chain of usage for the comma expression.\n          if (current.isExprResult() || current.isBlock()) {\n            commaResultUsed = false;\n            break;\n          }\n          current = current.getParent();\n        }\n      } else {\n        // If 'n' is not the last child of a COMMA, its value is always\n        // discarded by the COMMA operator itself. So, its result is not used.\n        commaResultUsed = false;\n      }\n\n      // If the comma expression (or the part of it containing 'n') is used,\n      // then 'n' is not useless for its result.\n      if (commaResultUsed) {\n        return;\n      }\n      // Otherwise, proceed to check for side-effects, as the result of `n`\n      // (either directly or via the comma expression) is not ultimately used.\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      // If the parent is not a statement (EXPR_RESULT or BLOCK), then the\n      // result of 'n' must be used, UNLESS 'n' is in a special position\n      // where its result is truly unused but not an error (e.g., FOR loop parts).\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return; // The result of `n` is used by its parent in this context, so it's not useless.\n      }\n    }\n\n    // If we reach here, it means 'n' is part of a statement (EXPR_RESULT, BLOCK),\n    // or it's a non-last child of a COMMA, or it's the last child of a COMMA\n    // where the entire COMMA expression is unused, or it's in a FOR loop part\n    // that is explicitly allowed to be unused (though still checked for side effects).\n    // In all these cases, 'n's result is not effectively used.\n    if (\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}