{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it.\n  if (n.isEmpty() ||\n      n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could\n  // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  // Mark nodes that are children of a comma and NOT the last child\n  // as eligible for reporting if they have no side effects.\n  boolean allowUseless = false;\n\n  if (parent.getType() == Token.COMMA) {\n    // Only the last element in a COMMA expression might have its value\n    // used. All other elements MUST have side effects.\n    if (n != parent.getLastChild()) {\n      allowUseless = false; // Useless code not allowed here\n    } else {\n      // Last item in the comma chain: its result may or may not be used\n      // depending on further ancestry.\n      Node ancestor = parent;\n      while (ancestor.getParent() != null && ancestor.getParent().getType() == Token.COMMA) {\n        ancestor = ancestor.getParent();\n      }\n      Node commaRootParent = ancestor.getParent();\n      if (commaRootParent != null &&\n          (commaRootParent.getType() == Token.EXPR_RESULT || commaRootParent.getType() == Token.BLOCK)) {\n        allowUseless = true; // The result here is not used; useless code allowed\n      } else if (commaRootParent != null && commaRootParent.getType() == Token.FOR) {\n        // Special handling for FOR-loop: For initialization or increment expressions.\n        int index = commaRootParent.getIndexOfChild(ancestor);\n        if (index == 0 || index == 2) {\n          allowUseless = true;\n        }\n      } else {\n        allowUseless = false;\n      }\n    }\n  } else if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.BLOCK) {\n    allowUseless = true;\n  } else if (parent.getType() == Token.FOR) {\n    // For initializer or increment\n    int idx = parent.getIndexOfChild(n);\n    if (idx == 0 || idx == 2) {\n      allowUseless = true;\n    }\n  }\n\n  if (!allowUseless) {\n    return;\n  }\n\n  if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n          \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // TODO(johnlenz): determine if it is necessary to\n    // try to protect side-effect free statements as well.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}