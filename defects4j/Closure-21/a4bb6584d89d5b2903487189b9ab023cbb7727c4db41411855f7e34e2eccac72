{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it.\n  if (n.isEmpty() ||\n      n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could\n  // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  // Fix: Always report useless side-effect free code that is result in a COMMA\n  // sequence, except in a statement position (EXPR_RESULT, BLOCK), and\n  // allow for \"for\" loop heads\n  //\n  // The original code made it too hard to report errors for side-effect free\n  // sub-expressions inside a comma but not in statement position.\n  if (parent.getType() == Token.COMMA) {\n    // The ONLY time result may be used is if this comma-tree is inside\n    // EXPR_RESULT or BLOCK (i.e., statement), FOR header, or all but last child?\n    Node ancestor = parent;\n    boolean inExprResultOrBlock = false;\n    while (ancestor != null) {\n      int ancestorType = ancestor.getType();\n      if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {\n        inExprResultOrBlock = true;\n        break;\n      }\n      if (ancestorType == Token.FOR) {\n        // If this is child 0 or 2 (initializer or increment)\n        Node child = n;\n        Node forNode = ancestor;\n        int index = 0;\n        for (Node c = forNode.getFirstChild(); c != null; c = c.getNext(), index++) {\n          if (c == child) {\n            // ok, don't warn for these\n            return;\n          }\n        }\n        // Else keep looking\n      }\n      ancestor = ancestor.getParent();\n    }\n    if (!inExprResultOrBlock) {\n      if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n          msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n          msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n              \"' operator is not being used.\";\n        }\n\n        t.getCompiler().report(\n            t.makeError(n, level, USELESS_CODE_ERROR, msg));\n        // TODO(johnlenz): determine if it is necessary to\n        // try to protect side-effect free statements as well.\n        if (!NodeUtil.isStatement(n)) {\n          problemNodes.add(n);\n        }\n      }\n    }\n    // If in EXPR_RESULT or BLOCK, let the normal visitation happen later\n    return;\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    // Don't warn for FOR loop headers\n    if (!(parent.getType() == Token.FOR &&\n        parent.getChildCount() == 4 &&\n        (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n  }\n  if (\n      (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n          \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // TODO(johnlenz): determine if it is necessary to\n    // try to protect side-effect free statements as well.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}