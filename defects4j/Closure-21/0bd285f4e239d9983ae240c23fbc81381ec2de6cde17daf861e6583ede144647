{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK/SCRIPT level.\n  // We've not found any real bugs from those, so allow them there.\n  if (n.isEmpty()\n      && (parent.getType() == Token.BLOCK\n          || parent.getType() == Token.SCRIPT)) {\n    return;\n  }\n\n  // Skip comma operator nodes; we inspect their children instead.\n  if (n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could\n  // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  int pType = parent.getType();\n  if (pType == Token.COMMA) {\n    // In a comma-expression, only warn on unused, side\u2010effect\u2010free subexpressions\n    // except the very last one if the overall result is used.\n    if (isResultUsed) {\n      return;\n    }\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType != Token.EXPR_RESULT\n            && ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (\n      // otherwise only consider expressions in EXPR_RESULT or BLOCK\n      pType != Token.EXPR_RESULT\n      && pType != Token.BLOCK\n      // or the init/inc slots of a for(...)\n      && !(pType == Token.FOR\n           && parent.getChildCount() == 4\n           && (n == parent.getFirstChild()\n               || n == parent.getFirstChild().getNext().getNext()))\n      // and also allow empty\u2010statement children of an IF to be warned\n      && !(n.isEmpty() && pType == Token.IF)\n  ) {\n    return;\n  }\n\n  // Finally, if it really has no side\u2010effects or is a \"simple\" operator,\n  // report it.\n  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\"\n          + Token.name(n.getType()).toLowerCase()\n          + \"' operator is not being used.\";\n    }\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}