{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Skip comma nodes always.\n  if (n.isComma()) {\n    return;\n  }\n  // VOID nodes appear when there are extra semicolons at the BLOCK or SCRIPT level.\n  // Allow those, but flag empty statements elsewhere (e.g. in an if-body).\n  if (n.isEmpty()) {\n    if (parent != null &&\n        (parent.getType() == Token.BLOCK ||\n         parent.getType() == Token.SCRIPT)) {\n      return;\n    }\n    // otherwise fall through and report the empty statement\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (n.isExprResult()) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could\n  // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  if (parent.getType() == Token.COMMA) {\n    if (isResultUsed) {\n      return;\n    }\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) continue;\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (!n.isEmpty() &&\n             parent.getType() != Token.EXPR_RESULT &&\n             parent.getType() != Token.BLOCK) {\n    // Allow update expressions in the FOR loop header\n    if (!(parent.getType() == Token.FOR\n        && parent.getChildCount() == 4\n        && (n == parent.getFirstChild()\n            || n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n  }\n\n  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n    String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\"\n          + Token.name(n.getType()).toLowerCase()\n          + \"' operator is not being used.\";\n    }\n\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // If this isn't a statement node, we'll wrap it in\n    // JSCOMPILER_PRESERVE later.\n    if (!NodeUtil.isStatement(n)) {\n      problemNodes.add(n);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}