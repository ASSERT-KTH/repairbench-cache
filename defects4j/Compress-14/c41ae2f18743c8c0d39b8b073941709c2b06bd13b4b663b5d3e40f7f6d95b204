{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * (potentially after {@code start} has been advanced past leading spaces)\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Scan for all-NULs first\n        boolean allNUL = true;\n        for (int i = start; i < end; i++){\n            if (buffer[i] != 0){\n                allNUL = false;\n                break;\n            }\n        }\n        if (allNUL) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // CheckStyle:MagicNumber OFF\n\n        // Trim trailing NUL or space. The buffer must contain one.\n        byte trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--;\n        } else {\n            // If the trailing character is not NUL or space, it's potentially invalid.\n            // However, tar archives can contain fields terminated only by digits\n            // if the field is full (e.g., \"777777\").\n            // The original code threw an exception here, but this might be too strict\n            // for some valid tar formats if the last char is a digit.\n            // Let's relax this slightly: if it's not NUL/space, proceed,\n            // the parsing loop will validate digits. If it's an invalid char,\n            // the loop will throw. If it's a digit, it will be parsed.\n            // This matches behavior observed in some other tar parsers.\n            // --> NO, the TAR specification requires a NUL or space terminator.\n            // Stick to the original check for correctness according to the spec.\n             throw new IllegalArgumentException(\n                     exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n\n        // Trim second trailing NUL or space. The buffer may contain one.\n        // Ensure we don't trim past the start offset\n        // Check that end is still greater than start before accessing buffer[end-1]\n        if (end > start) {\n            trailer = buffer[end - 1];\n            if (trailer == 0 || trailer == ' ') {\n                end--;\n            }\n        }\n\n        // After trimming spaces and trailers, handle the NUL workaround.\n        // This checks if the first significant character is a NUL.\n        // It also handles cases where trimming resulted in an empty range (start >= end).\n        if (start >= end) {\n            return 0L;\n        }\n        // Apply the leading NUL workaround: If the first character after spaces\n        // is a NUL, return 0.\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Parse octal digits from start to end\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n        // CheckStyle:MagicNumber ON\n\n        return result;\n    }\n\n    // Helper function to create exception messages (implementation assumed present)\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte\u0633\u0628\u0628) {\n        String field = new String(buffer, offset, length).replace(\"\\0\", \"{NUL}\");\n        return \"Invalid byte \" + \u0633\u0628\u0628 + \" at index \" + (idx - offset) + \" in '\" + field + \"' octal entry.\";\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}