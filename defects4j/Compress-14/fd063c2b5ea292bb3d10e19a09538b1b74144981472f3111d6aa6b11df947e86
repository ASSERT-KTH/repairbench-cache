{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain additional trailing spaces or NULs.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * after any leading spaces since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     start = offset;\n        int     end = offset + length;\n        // Store the original end index for exception messages, and check if trimming occurred\n        final int originalEnd = end;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Scan for all NULs\n        boolean allNUL = true;\n        for (int i = start; i < end; i++){\n            if (buffer[i] != 0){\n                allNUL = false;\n                break;\n            }\n        }\n        if (allNUL) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end && buffer[start] == ' '){\n            start++;\n        }\n\n        // Trim trailing NULs and spaces.\n        // After this loop, 'end' points to the index *after* the last valid octal digit.\n        while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n            end--;\n        }\n\n        // If the field is now empty (all spaces/NULs or empty after trimming), return 0.\n        // This also handles fields like \" \\0\" which weren't covered by allNUL check.\n        if (start == end) {\n             return 0L;\n        }\n\n        // Check if any trimming occurred. If not, the last character wasn't NUL/space.\n        // This enforces the requirement of at least one trailing NUL or space.\n        if (end == originalEnd) {\n             // Note: The original code used a helper 'exceptionMessage'.\n             // If that helper is available, it should be used here.\n             // Providing a more informative message directly:\n             throw new IllegalArgumentException(\n                    \"Invalid octal entry. Must end with space or NUL. \" +\n                    \"Found byte \" + buffer[originalEnd - 1] + \" at offset \" +\n                    (originalEnd - 1) + \". Buffer length: \" + length + \", Starting offset: \" + offset + \".\");\n        }\n\n\n        // WORKAROUND: Check for leading NUL after spaces (commons-compress 1.4)\n        // If the first non-space character is NUL, return 0\n        // This handles cases like \" \\0123 \" which some tar implementations produce.\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n\n        // Parse octal digits from 'start' up to 'end - 1'\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n\n            if (currentByte < '0' || currentByte > '7'){\n                // Note: The original code used a helper 'exceptionMessage'.\n                // If that helper is available, it should be used here.\n                 throw new IllegalArgumentException(\n                        \"Invalid octal digit '\" + (char)currentByte + \"' (code \" + currentByte + \") at offset \" +\n                        start + \". Buffer length: \" + length + \", Starting offset: \" + offset + \".\");\n            }\n            // CheckStyle:MagicNumber OFF\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}