{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    boolean allNUL = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0L;\n    }\n\n    // Work-around broken headers with leading NUL(s) (i.e., NUL followed by spaces or NULs).\n    // If the first **non-space** byte is a NUL, treat as 0 per specification/workaround\n    int temp = start;\n    while (temp < end && buffer[temp] == ' ') {\n        temp++;\n    }\n    if (temp < end && buffer[temp] == 0) {\n        // Also ensure no non-NUL after the leading NUL up to trailer(s)\n        boolean restAllNULorSpace = true;\n        for (int i = temp; i < end; i++) {\n            if (buffer[i] != 0 && buffer[i] != ' ') {\n                restAllNULorSpace = false;\n                break;\n            }\n        }\n        if (restAllNULorSpace) {\n            return 0L;\n        }\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Must have trailing NUL or space\n    byte trailer = buffer[end - 1];\n    if (trailer == 0 || trailer == ' ') {\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, trailer));\n    }\n    // May have additional NUL or space\n    if ((end - 1) >= start) {\n        trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--;\n        }\n    }\n\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        // CheckStyle:MagicNumber ON\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}