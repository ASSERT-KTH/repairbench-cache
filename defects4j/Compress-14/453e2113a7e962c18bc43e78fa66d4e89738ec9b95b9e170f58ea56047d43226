{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Check for all NULs first, as per documentation.\n        // This handles cases where the field is entirely NULs.\n        boolean allNUL = true;\n        for (int i = start; i < end; i++){\n            if (buffer[i] != 0){\n                allNUL = false;\n                break;\n            }\n        }\n        if (allNUL) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // CheckStyle:MagicNumber OFF\n        // Handle cases like GnuTar putting NULs in octal fields (COMPRESS-199)\n        // Returns 0 if the first non-space char is NUL.\n        // This implements the documented workaround for leading NULs.\n        if (start < end && buffer[start] == 0) {\n             return 0L;\n        }\n        // CheckStyle:MagicNumber ON\n\n        // Must have trailing NUL or space.\n        byte trailer;\n        // Check the last byte: Must be NUL or space.\n        // Ensure we do not check invalid index if start >= end after skipping spaces\n        // Although length >= 2 implies end > offset initially, start could reach end.\n        // If start == end here (all spaces), accessing buffer[end-1] is safe\n        // because end = offset + length, and length >= 2, so end-1 >= offset+1.\n        // The original code implicitly handled the \"all spaces\" case by letting the parse loop\n        // become empty and returning 0. Let's preserve that, but ensure trailer check is valid.\n        if (start >= end) {\n             // Should not happen if length >= 2 and not all NULs, unless all spaces?\n             // If all spaces, start == end. Let the logic proceed.\n        }\n\n        trailer = buffer[end - 1]; // Check last byte\n        if (trailer == 0 || trailer == ' ') {\n            end--; // Found mandatory trailer; trim it.\n        } else {\n            // The mandatory trailer was missing.\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n\n        // May have *additional* NUL or space. Check the new last byte.\n        // Add check 'end > start' to prevent reading buffer[start - 1] if only one char left\n        // after trimming the first trailer (e.g., \"1\\0\" length 2 -> start=0, end=1 after trim).\n        if (end > start) {\n            trailer = buffer[end - 1]; // Check byte before mandatory trailer\n            if (trailer == 0 || trailer == ' ') {\n                end--; // Found optional second trailer; trim it.\n            }\n        }\n\n        // Parse octal digits from 'start' up to (but not including) the adjusted 'end'.\n        for (; start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') { // Validate octal digit\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // standard base-8 conversion (result = result * 8 + digit)\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed present (needed for the exception message)\n    // It's not part of the fix, but required for compilation and context.\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int idx, byte bayte) {\n        String content;\n        try {\n            // Attempt to decode assuming ASCII or compatible, replace NUL for visibility\n            content = new String(buffer, offset, length, \"ASCII\").replaceAll(\"\\u0000\", \"{NUL}\");\n        } catch (java.io.UnsupportedEncodingException e) {\n            // Fallback if ASCII is somehow not supported\n            content = Arrays.toString(Arrays.copyOfRange(buffer, offset, offset + length));\n        }\n        return \"Invalid byte \" + bayte + \" at offset \" + (idx - offset) + \" in '\" + content + \"' len=\" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}