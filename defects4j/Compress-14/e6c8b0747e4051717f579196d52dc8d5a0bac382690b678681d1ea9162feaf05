{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long result = 0;\n        int end = offset + length;\n        int start = offset;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n\n        // Check for leading NUL and return 0 immediately\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        boolean allNUL = true;\n        for (int i = start; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNUL = false;\n                break;\n            }\n        }\n        if (allNUL) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end && buffer[start] == ' ') {\n            start++;\n        }\n\n        // Must have trailing NUL or space\n        if (end - start < 1) {\n            throw new IllegalArgumentException(\"Invalid octal field\");\n        }\n        byte trailer = buffer[end - 1];\n        if (trailer != 0 && trailer != ' ') {\n            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n        end--;\n\n        // May have additional NUL or space\n        trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--;\n        }\n\n        if (end - start < 1) {\n            return 0L; // Handle edge case where only trailing spaces/NULs are left\n        }\n\n        for (int i = start; i < end; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // Convert from ASCII\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}