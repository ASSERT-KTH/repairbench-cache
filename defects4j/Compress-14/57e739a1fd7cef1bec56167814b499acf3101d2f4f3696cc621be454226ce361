{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * *after skipping leading spaces* since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        boolean allNUL = true;\n        for (int i = start; i < end; i++){\n            if (buffer[i] != 0){\n                allNUL = false;\n                break;\n            }\n        }\n        if (allNUL) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // COMPRESS-171: Check for leading NUL and return 0 if found.\n        // This needs to be done after skipping spaces but before checking/stripping trailers.\n        if (start < end && buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Must have trailing NUL or space\n        byte trailer;\n        // Ensure we are not checking beyond the valid part of the buffer if all were spaces\n        if (start >= end) {\n             // If we got here, the buffer was all spaces (or empty after offset).\n             // The loop below won't run, result is 0.\n             // However, the original code would have failed accessing buffer[end-1]\n             // or thrown in the trailer check if end > offset.\n             // Let's handle this cleanly: if start >= end, it means no digits, return 0.\n             // But first, we need to ensure the original ending byte was a valid terminator.\n             // The original code implicitly checked buffer[offset+length-1].\n             // If the field was just \"  \", length=2. start=2, end=2. The check buffer[end-1]\n             // would access buffer[1] (' '). It would pass, end becomes 1.\n             // Second check: end=1 > start=2 is false. Loop start=2<end=1 is false. Returns 0.\n             // So the original logic implicitly handled \"all spaces\" correctly by returning 0.\n             // Let's stick to the original structure for trailer checks.\n        }\n\n        // Check and strip trailing NUL/space\n        // A NUL or Space must exist at the end.\n        trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--; // Strip trailing NUL or space\n        } else {\n            // If the last byte is not NUL or space, it's an error according to the original code.\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, trailer));\n        }\n\n        // May have additional NUL or space. Only check if needed and valid.\n        // This check should happen only if the first stripping occurred and end is still > start.\n        if (end > start) {\n            trailer = buffer[end - 1];\n            if (trailer == 0 || trailer == ' ') {\n                end--; // Strip second trailing NUL or space\n            }\n        }\n\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            // Ensure the byte is an octal digit\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            // Note: This calculation might overflow for large octal numbers/lengths.\n            // Standard tar fields (size, mtime, uid, gid) are typically <= 12 bytes.\n            // A 12-byte octal number can represent up to 8^11 * 7 which fits in a long.\n            // 8^11 = 8,589,934,592. Max value ~ 60 * 10^9. Long.MAX_VALUE is ~9 * 10^18.\n            // If length were much larger, overflow checks might be needed.\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist from the original class context\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int current, byte currentByte) {\n        // Provide a meaningful error message, similar to what the original code likely did\n        String M_NULL = Character.toString((char) 0); // For NUL character representation\n        String s = new String(buffer, offset, length); // Use platform default charset; maybe risky? UTF-8 better? Original likely used default.\n        s = s.replace(M_NULL, \"{NUL}\"); // Make NULs visible\n        return \"Invalid byte \" + currentByte + \" at offset \" + (current - offset)\n             + \" in '\" + s + \"' len \" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}