{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i] != 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0L;\n    }\n\n    // Work-around for leading NUL (e.g. broken tar implementations)\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Must have trailing NUL or space, search for it from end\n    int trailerIdx = end - 1;\n    // skip trailing spaces/NULs\n    while (trailerIdx >= start && (buffer[trailerIdx] == 0 || buffer[trailerIdx] == ' ')) {\n        trailerIdx--;\n    }\n    // Now, trailerIdx is last non-space/NUL, so parse up to trailerIdx (inclusive)\n    int realEnd = trailerIdx + 1;\n\n    if (realEnd <= start) {\n        // field is empty (all spaces or NULs)\n        return 0L;\n    }\n\n    for (; start < realEnd; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}