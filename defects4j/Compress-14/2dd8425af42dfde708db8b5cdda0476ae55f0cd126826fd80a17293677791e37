{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        boolean allNUL = true;\n        for (int i = start; i < end; i++){\n            if (buffer[i] != 0){\n                allNUL = false;\n                break;\n            }\n        }\n        if (allNUL) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Must have trailing NUL or space\n        byte trailer;\n        // Correctness check: end must be greater than start to access end-1\n        if (start >= end) {\n             // If we skipped all chars or length was < 2 originally adjusted\n             // This path might occur if input is \" \" with length 2. start becomes offset+1, end offset+2.\n             // First trailer check reads buffer[offset+1] (' '). end becomes offset+1.\n             // Second trailer check reads buffer[offset] (' '). Needs end-1 > start check.\n             // However, if the loop condition start < end handles this, we might be ok.\n             // Let's proceed assuming valid inputs reach here with end > start.\n             // If end == start after skipping spaces, the loop below won't run, returns 0. Fine.\n             // If end == start + 1, the trailer checks might index buffer[start].\n             if (start == end) { // If all were spaces\n                 // This case implies input like \"  \" or just spaces,\n                 // allNUL was false, spaces skipped, start == end. Loop won't run.\n                 // It might need a check here or rely on trailer checks + loop condition.\n                 // Let's trust the original structure handled this and focus on the loop bug.\n             }\n             // Ensure we have a valid index for trailer check\n             if (end <= start) {\n                 // This situation implies an issue possibly before this point,\n                 // or an input like \" \". Let's assume the structure intends\n                 // to throw if no valid trailer is found eventually.\n                 // The first trailer check might throw if end-1 is invalid, but length >= 2 guards this.\n                 // If end-1 is valid:\n                 trailer = buffer[end-1];\n                 // If it's NUL/space, end--. Now end might equal start.\n             }\n        }\n\n        trailer = buffer[end-1];\n        if (trailer == 0 || trailer == ' '){\n            end--;\n        } else {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, end-1, trailer));\n        }\n\n        // May have additional NUL or space\n        // Add check to prevent end becoming <= start, which causes issues in loop/indexing\n        if (end - 1 >= start) { // Ensure index end-1 is valid and distinct from start after previous end--\n            trailer = buffer[end-1];\n            if (trailer == 0 || trailer == ' '){\n                end--;\n            }\n        }\n\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n\n            // CheckStyle:MagicNumber OFF\n            // Allow NUL (0) or space (' ') to terminate the octal number\n            // This handles cases like \"123\\0\" or \"123 \" encountered in some TARs\n            if (currentByte == 0 || currentByte == ' ') {\n                 break; // Stop parsing at the first terminator\n            }\n\n            // Check if the byte is a valid octal digit\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist for the exception message\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int current, byte currentByte) {\n        return \"Invalid byte \" + currentByte + \" at offset \" + (current - offset) + \" in '\"\n               + new String(buffer, offset, length).replaceAll(\"\\0\", \"{NUL}\") // Visualize NULs\n               + \"' len \" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}