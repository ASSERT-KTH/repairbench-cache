{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // If the entire field contains only NUL bytes, return 0.\n    boolean allNUL = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0L;\n    }\n\n    // Skip any leading spaces.\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n    // Work-around for broken tar implementations that insert a leading NUL.\n    if (start < end && buffer[start] == 0) {\n        return 0L;\n    }\n\n    // The specification requires that the field contain a trailing space or NUL.\n    // Check the last byte.\n    if (end <= start || (buffer[end - 1] != 0 && buffer[end - 1] != ' ')) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n    }\n    // Remove all trailing NUL and space markers.\n    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    // Now, parse the remaining bytes as octal digits.\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}