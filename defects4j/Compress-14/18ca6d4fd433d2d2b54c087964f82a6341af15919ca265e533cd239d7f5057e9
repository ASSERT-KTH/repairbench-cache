{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     originalEnd = offset + length; // Use a variable for the original end index (exclusive)\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Scan for all NULs\n        boolean allNUL = true;\n        for (int i = start; i < originalEnd; i++){\n            if (buffer[i] != 0){\n                allNUL = false;\n                break;\n            }\n        }\n        if (allNUL) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        // No need to check length here since length >= 2 is enforced\n        while (start < originalEnd){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // COMPRESS-171: Check for leading NUL after skipping spaces.\n        // This indicates an empty field or the start of NUL padding.\n        // Per Javadoc, treat this as 0. Handles cases like \" NUL...\" or \"NUL...\".\n        // Ensure we don't parse if start reached the end (e.g., all spaces).\n        if (start < originalEnd && buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Find the end of the octal digits by working backwards from the original end,\n        // skipping trailing NULs and spaces. This identifies the mandatory trailer\n        // and any optional ones.\n        int end = originalEnd;\n        while (end > start) {\n            final byte currentByte = buffer[end - 1];\n            if (currentByte == 0 || currentByte == ' ') {\n                end--;\n            } else {\n                break; // Found the last character that is not NUL or space\n            }\n        }\n\n        // If, after skipping leading spaces and trailing NUL/space,\n        // start equals end, it means the field contained only spaces and/or NULs.\n        // This case should have been mostly handled by the allNUL check or the\n        // leading NUL check, but this catches remaining scenarios like \"  \\0\\0\".\n        if (end == start) {\n            return 0L;\n        }\n\n        // Check if the sequence ended with anything other than NUL or space.\n        // This implies the mandatory trailing NUL/space is missing.\n        // 'end' now points right after the last potential octal digit.\n        // If 'end' is still the original end, no NUL/space trailer was found.\n        if (end == originalEnd) {\n             throw new IllegalArgumentException(\n                     exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n        }\n\n        // Parse the octal digits found between start and the adjusted end.\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist, providing context for exceptions.\n    // Implementation is not part of the fix but needed for compilation.\n    private static String exceptionMessage(byte[] buffer, final int offset,\n                                           final int length, int currentBlkIdx, byte currentByte) {\n        String fieldContent;\n        try {\n            // Attempt to decode assuming ASCII/ISO-8859-1 common for TAR\n            fieldContent = new String(buffer, offset, length, \"ISO-8859-1\");\n        } catch (java.io.UnsupportedEncodingException e) {\n            // Fallback to platform default if necessary\n            fieldContent = new String(buffer, offset, length);\n        }\n        // Replace NUL characters for clearer display\n        fieldContent = fieldContent.replaceAll(\"\\0\", \"{NUL}\");\n        return \"Invalid byte \" + String.format(\"%#04x\", currentByte) + \" at offset \" + (currentBlkIdx - offset)\n                + \" in '\" + fieldContent + \"' len \" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}