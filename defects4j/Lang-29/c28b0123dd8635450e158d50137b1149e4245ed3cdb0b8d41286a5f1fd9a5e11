{
    "generation": "    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param version the Java version string, may be null\n     * @return the version, for example 131 for Java 1.3.1. Returns 0 if the version string is null, \n     * has zero length, or cannot be parsed.\n     */\n    static int toJavaVersionInt(String version) {\n        // We expect toVersionInt to return a value that can be represented as an int.\n        // If toVersionInt returns a float, casting it to int matches the expected behavior\n        // based on the Javadoc and test cases (e.g., 0.0f becomes 0).\n        // If toVersionInt itself is intended to return an int, this change makes the signature consistent.\n        return (int) toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}