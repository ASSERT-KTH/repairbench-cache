{
    "generation": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * <p>\n * Converts the given Java version string to an <code>int</code>.\n * </p>\n * \n * <p>\n * Example return values:\n * </p>\n * <ul>\n * <li><code>120</code> for Java 1.2</li>\n * <li><code>131</code> for Java 1.3.1</li>\n * <li><code>160</code> for Java 1.6.0_20</li>\n * </ul>\n * \n * <p>\n * Patch releases are not reported.\n * </p>\n * <p>\n * This method is package private instead of private to support unit test invocation.\n * </p>\n * \n * @return the version, for example 131 for Java 1.3.1\n */\nstatic int toJavaVersionInt(String version) {\n    if (version == null || version.isEmpty()) {\n        return 0;\n    }\n    \n    // Remove any non-digit characters except for the dot\n    String cleanedVersion = version.replaceAll(\"[^\\\\d.]\", \"\");\n    \n    // Split the version string into parts\n    String[] parts = cleanedVersion.split(\"\\\\.\");\n    \n    // If the version string does not contain at least two parts, return 0\n    if (parts.length < 2) {\n        return 0;\n    }\n    \n    // Extract the major and minor version numbers\n    int major = Integer.parseInt(parts[0]);\n    int minor = Integer.parseInt(parts[1]);\n    \n    // If there is a third part, extract the patch version number\n    int patch = 0;\n    if (parts.length > 2) {\n        patch = Integer.parseInt(parts[2]);\n    }\n    \n    // Calculate the version number as major * 100 + minor * 10 + patch\n    return major * 100 + minor * 10 + patch;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}