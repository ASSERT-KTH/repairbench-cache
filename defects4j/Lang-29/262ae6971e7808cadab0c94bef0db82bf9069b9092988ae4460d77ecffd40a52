{
    "generation": "    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param version the Java version string to parse\n     * @return the version, for example 131 for Java 1.3.1\n     */\n    // This method is package private instead of private to support unit test invocation.\n    // It's not intended for public use.\n    static int toJavaVersionInt(String version) {\n        // We delegate to the protected method, which has been renamed:\n        // return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n        // Check that the renamed method returns a float (as the original signature indicated)\n        // and cast it to int to match the Javadoc and test expectations.\n        float floatVersion = SystemUtilsHelper.toVersionFloat(SystemUtilsHelper.toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n        // The helper method likely returns float, cast it to int as required by this method's contract.\n        return (int) floatVersion;\n    }\n\n    // Assume a helper class/method exists like this (based on typical refactoring patterns and the original code)\n    // This is just for illustration and not part of the required fix for toJavaVersionInt.\n    private static class SystemUtilsHelper {\n        private static final int JAVA_VERSION_TRIM_SIZE = 3; // Example value\n\n        static float toVersionFloat(int[] versionIntArray) {\n            if (versionIntArray == null) {\n                return 0f;\n            }\n            if (versionIntArray.length < 1) {\n                return 0f;\n            }\n            float version = 0;\n            if (versionIntArray.length > 1) {\n                version = versionIntArray[0] * 100 + versionIntArray[1] * 10;\n            } else {\n                version = versionIntArray[0] * 100;\n            }\n            if (versionIntArray.length > 2) {\n                version += versionIntArray[2];\n            }\n            return version;\n        }\n\n        static int[] toJavaVersionIntArray(String version, int trimSize) {\n             // Dummy implementation for context\n            if (version == null) return null;\n            String[] parts = version.replaceAll(\"[^0-9.]\", \"\").split(\"\\\\.\");\n            int[] ints = new int[Math.min(trimSize, parts.length)];\n            int count = 0;\n            for (String part : parts) {\n                if (count >= trimSize) break;\n                try {\n                    ints[count++] = Integer.parseInt(part);\n                } catch (NumberFormatException e) {\n                    // ignore non-numeric parts after initial cleanup\n                }\n            }\n             if (count == 0) return null; // No numbers found\n             if (count < ints.length) {\n                 int[] shorter = new int[count];\n                 System.arraycopy(ints, 0, shorter, 0, count);\n                 return shorter;\n             }\n            return ints;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}