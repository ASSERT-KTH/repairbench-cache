{
    "generation": "    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @param version the Java version string, may be null.\n     * @return the version, for example 131 for Java 1.3.1, or 0 if the version string is null or cannot be parsed.\n     */\n    // function signature changed to return int instead of float to match test expectations\n    static int toJavaVersionInt(String version) {\n        // Assuming toVersionInt returns a value convertible to int (ideally int itself).\n        // If toVersionInt returned float, the original code implicitly cast its result.\n        // Now returning int directly aligns with the method's purpose and test cases.\n        // If toVersionInt explicitly returns float, a cast '(int)' might be needed here,\n        // but based on typical integer version calculations and the test error (0 vs 0.0),\n        // it's more likely that the issue was just the final return type of this function.\n        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE)); \n    }\n\n    // Helper methods assumed to exist and work correctly for the conversion logic:\n    // static int[] toJavaVersionIntArray(String version, int trimSize) { ... }\n    // static int toVersionInt(int[] versionIntArray) { ... } // Assuming this returns int or compatible\n    // static final int JAVA_VERSION_TRIM_SIZE = 3; // Assuming this constant exists",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}