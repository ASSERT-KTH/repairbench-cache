{
    "generation": "    /**\n     * <p>\n     * Converts the given Java version string to an <code>int</code>.\n     * </p>\n     * \n     * <p>\n     * Example return values:\n     * </p>\n     * <ul>\n     * <li><code>120</code> for Java 1.2</li>\n     * <li><code>131</code> for Java 1.3.1</li>\n     * <li><code>160</code> for Java 1.6.0_20</li>\n     * </ul>\n     * \n     * <p>\n     * Patch releases are not reported.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     * \n     * @return the version, for example 131 for Java 1.3.1, or 0 if the input is invalid\n     */\n    static int toJavaVersionInt(String version) {\n        if (version == null || version.isEmpty()) {\n            return 0;\n        }\n        String[] parts = version.split(\"\\\\.\");\n        int major = 0, minor = 0, patch = 0;\n        if (parts.length > 0) {\n            major = parseInt(parts[0].replaceAll(\"\\\\D\", \"\"), 0);\n            if (major == 0 && parts[0].startsWith(\"1.\")) {\n                major = 1;\n            }\n        }\n        if (parts.length > 1) {\n            minor = parseInt(parts[1].replaceAll(\"\\\\D\", \"\"), 0);\n        }\n        if (parts.length > 2) {\n            patch = parseInt(parts[2].replaceAll(\"\\\\D\", \"\"), 0);\n        }\n        return major * 100 + minor * 10 + patch;\n    }\n\n    private static int parseInt(String value, int defaultValue) {\n        try {\n            return Integer.parseInt(value);\n        } catch (NumberFormatException e) {\n            return defaultValue;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}