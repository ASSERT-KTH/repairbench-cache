{
    "generation": "    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        // Handle empty sequence case: an empty sequence is \"found\" at the current position.\n        if (seq.length() == 0) {\n            return 0;\n        }\n\n        // doesn't handle scanning for surrogates\n        char startChar = seq.charAt(0);\n        int seqLen = seq.length();\n\n        for (int offset = pos; offset < length; offset++) {\n            // Scan to the first instance of startChar:\n            // If the current character is not the startChar, advance 'offset' using a while loop.\n            if (startChar != input[offset]) {\n                while(++offset < length && startChar != input[offset]);\n            }\n\n            // After the while loop, 'offset' either points to startChar or has gone past 'length'.\n            // If 'offset' is now out of bounds, no match is possible from this point, so break.\n            if (offset >= length) {\n                break;\n            }\n\n            // At this point, input[offset] == startChar.\n            // Now, check if the rest of the sequence matches from this 'offset'.\n            boolean found = true;\n            for (int j = 1; j < seqLen; j++) {\n                int inputIdx = offset + j; // Calculate the corresponding index in 'input'\n\n                // If inputIdx goes out of bounds of 'input' or characters don't match,\n                // then this 'offset' is not the start of a full match.\n                if (inputIdx >= length || seq.charAt(j) != input[inputIdx]) {\n                    found = false;\n                    break;\n                }\n            }\n\n            // If the inner loop completed without 'found' being set to false,\n            // it means the full sequence was matched.\n            if (found) {\n                return offset - pos; // Return the offset from the initial 'pos'\n            }\n        }\n        return -1; // Sequence not found\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}