{
    "generation": "/**\n * Returns the number of characters between the current position and the next instance of the input sequence\n *\n * @param seq scan target\n * @return offset between current position and next instance of target. -1 if not found.\n */\nint nextIndexOf(CharSequence seq) {\n    // doesn't handle scanning for surrogates\n    char startChar = seq.charAt(0);\n    int seqLength = seq.length();\n    \n    // empty sequence check\n    if (seqLength == 0)\n        return 0;\n    \n    outer:\n    for (int offset = pos; offset < length; offset++) {\n        // scan to first instance of startchar:\n        if (startChar != input[offset]) {\n            while(++offset < length && startChar != input[offset]);\n            if (offset >= length) // reached the end without finding start char\n                break;\n        }\n        \n        // check if we have enough room left to match the full sequence\n        if (offset + seqLength > length)\n            break;\n        \n        // attempt to match the full sequence\n        for (int j = 1; j < seqLength; j++) {\n            if (input[offset + j] != seq.charAt(j))\n                continue outer;\n        }\n        \n        // found full sequence\n        return offset - pos;\n    }\n    return -1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}