{
    "generation": "    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        // doesn't handle scanning for surrogates\n        char startChar = seq.charAt(0);\n        int seqLen = seq.length();\n\n        for (int offset = pos; offset < length; offset++) {\n            // scan to first instance of startChar:\n            if (startChar != input[offset]) {\n                // Advance offset until startChar is found or end of input is reached\n                while (++offset < length && startChar != input[offset]);\n                // If offset reached the end of input, the sequence cannot be found\n                if (offset == length)\n                    break; // Exit the main loop\n            }\n\n            // Found startChar at input[offset] (and offset < length).\n            // Now check if the rest of the sequence matches and fits within bounds.\n\n            int i = offset + 1; // Index in input[] for the second character of seq onwards\n            // The index *after* the sequence would end in input. This is offset + seqLen.\n            int last = offset + seqLen; \n\n            // Check bounds: the sequence must fit within the remaining input (last <= length)\n            if (last <= length) {\n                int j = 1; // Index in seq for the second character onwards\n                // Compare the remaining characters of the sequence.\n                // The condition i < last ensures we only check up to the sequence length\n                // and also ensures i < length (because last <= length).\n                while (i < last && seq.charAt(j) == input[i]) {\n                    i++;\n                    j++;\n                }\n                // If the inner loop completed (i reached 'last'), the full sequence matched\n                if (i == last) {\n                    return offset - pos; // Return the offset from the initial position 'pos'\n                }\n                // Otherwise, a mismatch occurred, continue the outer loop to search further\n            } else {\n                 // Optimization: If the sequence cannot fit starting at the current 'offset',\n                 // it also cannot fit starting at any later position.\n                 break; // Exit the main loop\n            }\n        }\n        return -1; // Sequence not found\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}