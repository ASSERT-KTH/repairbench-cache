{
    "generation": "    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        // doesn't handle scanning for surrogates\n        char startChar = seq.charAt(0);\n        for (int offset = pos; offset < length; offset++) {\n            // scan to first instance of startchar:\n            if (startChar != input[offset])\n                while(++offset < length && startChar != input[offset]);\n            \n            // If the while loop advanced offset to length, we are done\n            if (offset >= length) {\n                return -1;\n            }\n\n            int i = offset + 1;\n            int last = i + seq.length()-1; // last is the index after the last char of the sequence if matched\n            \n            // This check ensures 'offset' is within bounds, which is already handled by the outer loop and the if statement above.\n            // The critical part is checking 'i' against 'length' in the inner loop.\n            // if (offset < length) { // This `if` is redundant given the `offset >= length` check above.\n                for (int j = 1; i < length && i < last && seq.charAt(j) == input[i]; i++, j++);\n                // The loop condition `i < length` is crucial to prevent ArrayIndexOutOfBoundsException\n                // when checking `input[i]` if the sequence extends beyond the input buffer.\n\n                if (i == last) // found full sequence\n                    return offset - pos;\n            // } // Redundant closing brace\n        }\n        return -1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}