{
    "generation": "    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        // doesn't handle scanning for surrogates\n        char startChar = seq.charAt(0);\n        for (int offset = pos; offset < length; offset++) {\n            // scan to first instance of startchar:\n            if (startChar != input[offset])\n                while(++offset < length && startChar != input[offset]);\n            \n            // If the while loop advanced offset to length, it means startChar was not found\n            // or the last char was processed. In either case, we should break the outer loop.\n            if (offset == length) {\n                break;\n            }\n\n            int i = offset + 1;\n            // 'last' represents the index just past the end of the expected sequence match.\n            // If seq has length L, and its first char is at offset, then the last char is at offset + L - 1.\n            // So, the expected value of 'i' if the full sequence matches is offset + L.\n            int last = offset + seq.length();\n\n            // Ensure there are enough characters left in the input to match the remaining sequence\n            // (from the second character of seq onwards).\n            // 'i' will represent the current position in 'input' being compared to 'seq.charAt(j)'.\n            // It must always be less than 'length'.\n            // The inner loop iterates from j=1 up to seq.length()-1.\n            // If seq.length() == 1, then seq.charAt(0) is the only character to match,\n            // and the inner loop will not execute, as 'j' starts at 1.\n            // In this case, 'i' will be 'offset + 1' and 'last' will be 'offset + 1'.\n            // The condition 'i < last' will be false, and the loop won't run, which is correct.\n            // The check 'if (i == last)' will then be true.\n\n            // The main bug was that 'input[i]' could be accessed when 'i' was already 'length'.\n            // This happens when 'i' advances to 'length' within the loop, and the next iteration\n            // tries to access 'input[length]'.\n            // Adding 'i < length' to the inner loop condition prevents this.\n            for (int j = 1; i < last && i < length && seq.charAt(j) == input[i]; i++, j++);\n\n            // If i reached 'last', it means all characters of 'seq' (from index 0 to length-1)\n            // matched the corresponding characters in 'input' starting from 'offset'.\n            if (i == last) // found full sequence\n                return offset - pos;\n        }\n        return -1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}