{
    "generation": "    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        // doesn't handle scanning for surrogates\n        // seq must not be empty\n        char startChar = seq.charAt(0);\n        int seqLen = seq.length();\n\n        // The loop must terminate earliest enough to allow seqLen characters after offset\n        // The last possible starting position for the sequence is length - seqLen\n        for (int offset = pos; offset <= length - seqLen; offset++) {\n            // scan to first instance of startchar:\n            if (input[offset] != startChar) {\n                // find the next instance of startChar - avoids redundant checks if the char is common\n                while (++offset <= length - seqLen && input[offset] != startChar);\n                // if we moved past the end, there is no match\n                if (offset > length - seqLen) {\n                    break; // Reached end without finding startChar with enough room for the rest of seq\n                }\n            }\n\n            // Found startChar at offset, now check the rest of the sequence\n            int i = offset + 1; // index in input array to check next char\n            int j = 1; // index in seq to check next char\n            while (j < seqLen) {\n                // Check if the character matches\n                if (seq.charAt(j) != input[i]) {\n                    break; // Mismatch found, break the inner loop\n                }\n                // Move to the next characters\n                i++;\n                j++;\n            }\n\n            // If j reached the end of seq, all characters matched\n            if (j == seqLen) {\n                // Found the full sequence\n                return offset - pos; // Return the relative offset from the initial position\n            }\n            // If mismatch (j < seqLen), the outer loop continues to find the next potential startChar\n        }\n        return -1; // Sequence not found\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}