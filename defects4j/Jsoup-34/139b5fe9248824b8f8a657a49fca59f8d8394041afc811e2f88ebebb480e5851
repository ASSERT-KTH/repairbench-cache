{
    "generation": "    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        // doesn't handle scanning for surrogates\n        char startChar = seq.charAt(0);\n        int seqLen = seq.length();\n\n        for (int offset = pos; offset < length; offset++) {\n            // scan to first instance of startchar:\n            if (input[offset] != startChar) {\n                // Use a simple loop instead of the nested while condition for clarity\n                while (++offset < length && input[offset] != startChar);\n                // Check if we ran off the end after scanning for the start char\n                if (offset >= length)\n                    break; // Sequence start char not found before end of input, so seq cannot be found\n            }\n\n            // Found startChar at index 'offset'. Now match the rest of the sequence.\n            // Check if there's enough room left in input for the entire sequence.\n            if (offset + seqLen <= length) {\n                int i = offset + 1; // index into input array, starting after startChar\n                int j = 1;          // index into seq, starting after startChar\n                // Compare the rest of the sequence\n                // The check i < length is implicitly handled by the offset + seqLen <= length check before this loop\n                while (j < seqLen && input[i] == seq.charAt(j)) {\n                    i++;\n                    j++;\n                }\n                // If we matched the entire sequence (j successfully incremented past the end of seq)\n                if (j == seqLen) {\n                    return offset - pos; // Return the offset relative to the initial position 'pos'\n                }\n                // If not a full match, the outer loop continues from offset+1 in the next iteration\n            } else {\n                // Not enough characters remaining in input to match the sequence starting at 'offset'.\n                // Since we scan sequentially, no further match is possible.\n                break;\n            }\n        }\n\n        return -1; // Sequence not found\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}