{
    "generation": "    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        char startChar = seq.charAt(0);\n        int seqLen = seq.length();\n\n        // Optimized path for single-character sequences\n        if (seqLen == 1) {\n            for (int offset = pos; offset < length; offset++) {\n                if (startChar == input[offset]) {\n                    return offset - pos;\n                }\n            }\n            return -1;\n        }\n\n        // Search for longer sequences\n        for (int offset = pos; offset < length; offset++) {\n            // 1. Scan to the first instance of startChar\n            if (startChar != input[offset]) {\n                while(++offset < length && startChar != input[offset]);\n            }\n\n            // If startChar was not found in the remaining input, or we reached the end\n            if (offset >= length) {\n                return -1; // No match possible from this point onwards\n            }\n\n            // 2. Check if the full sequence can fit from this 'offset'\n            // The sequence would occupy indices from 'offset' to 'offset + seqLen - 1'.\n            // Therefore, 'offset + seqLen' must not exceed 'length'.\n            if (offset + seqLen > length) {\n                // If the remaining input is shorter than the sequence,\n                // no match is possible from this 'offset' or any subsequent 'offset'.\n                return -1;\n            }\n\n            // 3. Compare the rest of the sequence\n            // 'i' points to the character in 'input' after startChar\n            // 'j' points to the character in 'seq' after startChar (i.e., seq.charAt(1))\n            int i = offset + 1;\n            int j = 1;\n            boolean match = true;\n            // Loop until all characters of 'seq' (from index 1 onwards) are checked\n            while (j < seqLen) {\n                // We don't need to check i < length here because the 'offset + seqLen > length'\n                // check above ensures that input[i] will be within bounds.\n                if (seq.charAt(j) != input[i]) {\n                    match = false;\n                    break; // Mismatch found, break inner loop\n                }\n                i++;\n                j++;\n            }\n\n            if (match) {\n                return offset - pos; // Full sequence found\n            }\n        }\n        return -1; // Exhausted all possible starting positions without finding a match\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}