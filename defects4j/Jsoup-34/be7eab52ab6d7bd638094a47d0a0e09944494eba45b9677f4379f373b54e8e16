{
    "generation": "    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        // doesn't handle scanning for surrogates\n        char startChar = seq.charAt(0);\n        int seqLen = seq.length(); // Cache sequence length\n\n        for (int offset = pos; offset < length; offset++) {\n            // scan to first instance of startchar:\n            if (startChar != input[offset]) {\n                while (++offset < length && startChar != input[offset]);\n                // Check if we ran off the end scanning for startChar\n                if (offset >= length)\n                    break; // Reached end of input buffer without finding start char\n            }\n\n            // Found a potential startChar at 'offset'.\n            // Check if the subsequent characters required for the sequence match exist within bounds.\n            if (offset + seqLen <= length) {\n                int i = offset + 1; // input index starts after startChar\n                int last = i + seqLen - 1; // `last` is the index *after* the sequence match would end in input\n                int j = 1; // sequence index starts at second char\n\n                // Compare the rest of the sequence characters\n                // Check input bounds implicitly via `i < last` which depends on `offset + seqLen <= length` check\n                for (; i < last && seq.charAt(j) == input[i]; i++, j++);\n\n                // If `i` reached `last`, it means all characters matched\n                if (i == last) { // found full sequence\n                    return offset - pos;\n                }\n                // else: mismatch found, continue outer loop to find next potential startChar\n            } else {\n                // The sequence cannot fit starting at this offset. Because we scan sequentially,\n                // it won't fit starting at any later point either.\n                break; // Optimization: exit loop early\n            }\n        }\n        return -1; // Not found\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}