{
    "generation": "    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        // doesn't handle scanning for surrogates\n        if (seq.length() == 0) return 0; // handle empty sequence case\n        char startChar = seq.charAt(0);\n        int seqLength = seq.length();\n        for (int offset = pos; offset < length; offset++) {\n            // scan to first instance of startchar:\n            if (startChar != input[offset]) {\n                while(++offset < length && startChar != input[offset]);\n                if (offset >= length) break; // reached end of buffer without finding startChar\n            }\n            int i = offset + 1;\n            int end = offset + seqLength;\n            if (end > length) {\n                continue; // not enough remaining characters for a match\n            }\n            boolean match = true;\n            for (int j = 1; j < seqLength; j++) {\n                if (i + j - 1 >= length || seq.charAt(j) != input[offset + j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                return offset - pos;\n            }\n        }\n        return -1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}