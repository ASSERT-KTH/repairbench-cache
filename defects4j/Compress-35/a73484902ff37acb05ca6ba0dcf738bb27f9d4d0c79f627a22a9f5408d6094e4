{
    "generation": "    /**\n     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n     * <blockquote>\n     * The checksum is calculated by taking the sum of the unsigned byte values\n     * of the header block with the eight checksum bytes taken to be ascii\n     * spaces (decimal value 32). It is stored as a six digit octal number with\n     * leading zeroes followed by a NUL and then a space. Various\n     * implementations do not adhere to this format. For better compatibility,\n     * ignore leading and trailing whitespace, and get the first six digits. In\n     * addition, some historic tar implementations treated bytes as signed.\n     * Implementations typically calculate the checksum both ways, and treat it\n     * as good if either the signed or unsigned sum matches the included\n     * checksum.\n     * </blockquote>\n     * <p>\n     * The return value of this method should be treated as a best-effort\n     * heuristic rather than an absolute and final truth. The checksum\n     * verification logic may well evolve over time as more special cases\n     * are encountered.\n     *\n     * @param header tar header\n     * @return whether the checksum is reasonably good\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n     * @since 1.5\n     */\n    public static boolean verifyCheckSum(byte[] header) {\n        long storedSum = 0;\n        long unsignedSum = 0;\n        long signedSum = 0;\n\n        // 1. Extract the stored checksum value from the header.\n        // This part needs to ignore leading/trailing whitespace and get the first six octal digits.\n        int digitsRead = 0;\n        boolean startedDigits = false;\n        for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {\n            if (i >= header.length) {\n                // Handle truncated headers if they are shorter than the checksum field\n                break;\n            }\n            byte b = header[i];\n            if (b >= '0' && b <= '7') {\n                // If it's an octal digit\n                startedDigits = true;\n                if (digitsRead < 6) { // Only read up to 6 digits as per spec\n                    storedSum = storedSum * 8 + (b - '0');\n                    digitsRead++;\n                }\n            } else if (startedDigits) {\n                // If we've started reading digits and now encounter a non-octal char,\n                // we should stop parsing further digits for the storedSum.\n                // This handles cases like \"000123X \" where X is non-octal.\n                break;\n            } else if (b == ' ' || b == '\\0') {\n                // Ignore leading spaces or NULs before digits start.\n                // This handles cases like \"   123 \"\n                continue;\n            } else {\n                // Encountered an unexpected character (non-octal, non-space, non-NUL)\n                // before any digits. Treat this as an invalid format for stored sum,\n                // and stop parsing. storedSum will hold what was parsed so far (likely 0).\n                break;\n            }\n        }\n\n        // 2. Calculate the actual header checksums (signed and unsigned).\n        // The checksum field bytes must be treated as ASCII spaces (decimal 32) for this calculation.\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i];\n            if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                // Replace the checksum field bytes with space for the checksum calculation\n                b = ' '; \n            }\n            unsignedSum += 0xff & b; // Add unsigned byte value\n            signedSum += b;         // Add signed byte value\n        }\n\n        // 3. Compare the stored checksum with calculated sums.\n        return storedSum == unsignedSum || storedSum == signedSum;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}