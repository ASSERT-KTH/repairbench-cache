{
    "generation": "    /**\n     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n     * <blockquote>\n     * The checksum is calculated by taking the sum of the unsigned byte values\n     * of the header block with the eight checksum bytes taken to be ascii\n     * spaces (decimal value 32). It is stored as a six digit octal number with\n     * leading zeroes followed by a NUL and then a space. Various\n     * implementations do not adhere to this format. For better compatibility,\n     * ignore leading and trailing whitespace, and get the first six digits. In\n     * addition, some historic tar implementations treated bytes as signed.\n     * Implementations typically calculate the checksum both ways, and treat it\n     * as good if either the signed or unsigned sum matches the included\n     * checksum.\n     * </blockquote>\n     * <p>\n     * The return value of this method should be treated as a best-effort\n     * heuristic rather than an absolute and final truth. The checksum\n     * verification logic may well evolve over time as more special cases\n     * are encountered.\n     *\n     * @param header tar header\n     * @return whether the checksum is reasonably good\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n     * @since 1.5\n     */\n    public static boolean verifyCheckSum(byte[] header) {\n        // Assume CHKSUM_OFFSET and CHKSUMLEN are constants defined elsewhere\n        // For standard tar, CHKSUM_OFFSET = 148, CHKSUMLEN = 8.\n        final int CHKSUM_OFFSET = 148; // Assuming this constant is available in scope\n        final int CHKSUMLEN = 8;     // Assuming this constant is available in scope\n\n        long storedSum = 0;\n        long unsignedSum = 0; // Sum calculated treating checksum bytes as spaces (' ')\n        long signedSum = 0;   // Sum calculated treating checksum bytes as spaces (' ')\n        long unsignedSumZero = 0; // Sum calculated treating checksum bytes as binary zeros (0x00)\n        long signedSumZero = 0;   // Sum calculated treating checksum bytes as binary zeros (0x00)\n\n        int digits = 0;\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i]; // Original byte from header\n\n            if (i >= CHKSUM_OFFSET && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                // If we are in the checksum field (bytes 148 to 155 inclusive)\n\n                // 1. Parse the stored checksum value from the original bytes.\n                // \"ignore leading and trailing whitespace, and get the first six digits.\"\n                if ('0' <= b && b <= '7' && digits++ < 6) {\n                    storedSum = storedSum * 8 + b - '0';\n                } else if (digits > 0) {\n                    // Stop parsing storedSum if we hit a non-octal character after digits\n                    digits = 6;\n                }\n\n                // 2. For the standard checksum calculation (unsignedSum, signedSum),\n                //    treat these checksum bytes as ASCII spaces (decimal 32).\n                unsignedSum += 0xff & ' ';\n                signedSum += ' ';\n\n                // 3. For compatibility with non-standard implementations (like COMPRESS-335)\n                //    where checksum bytes might be '0's and treated as binary zeros (0x00)\n                //    in the original checksum calculation.\n                unsignedSumZero += 0xff & 0; // Add binary zero (0x00)\n                signedSumZero += 0;       // Add binary zero (0x00)\n            } else {\n                // For all other bytes outside the checksum field, use their original values\n                unsignedSum += 0xff & b;\n                signedSum += b;\n                unsignedSumZero += 0xff & b;\n                signedSumZero += b;\n            }\n        }\n\n        // Return true if storedSum matches any of the calculated sums.\n        // This covers the standard (unsigned/signed with spaces) and non-standard (unsigned/signed with binary zeros).\n        return storedSum == unsignedSum || storedSum == signedSum\n                || storedSum == unsignedSumZero || storedSum == signedSumZero;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}