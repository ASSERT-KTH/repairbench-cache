{
    "generation": "public static boolean verifyCheckSum(byte[] header) {\n    long storedSum = 0;\n    long unsignedSum = 0;\n    long signedSum = 0;\n\n    int digits = 0;\n    for (int i = 0; i < header.length; i++) {\n        byte b = header[i];\n        if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n            if ('0' <= b && b <= '7' && digits < 6) {\n                storedSum = storedSum * 8 + (b - '0');\n                digits++;\n            } else if (b != ' ' && b != '\\0') {\n                // If we encounter a non-space, non-null character outside the 0-7 range,\n                // or if we've already read 6 digits, stop processing the checksum field.\n                digits = 6;\n            }\n            // Treat checksum bytes as spaces for sum calculations\n            b = ' ';\n        }\n        unsignedSum += 0xff & b;\n        signedSum += b;\n    }\n\n    // Historic tar implementations may have leading zeros in the checksum field.\n    // We need to handle cases where the stored checksum is less than 6 digits long.\n    // To match such cases, we compare the stored sum with both the unsigned and signed sums,\n    // but also consider the possibility that the stored sum might be a truncated version\n    // of the actual sum.\n    return storedSum == unsignedSum || storedSum == signedSum ||\n           (storedSum != 0 && (unsignedSum == storedSum * 8 || signedSum == storedSum * 8));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}