{
    "generation": "public static boolean verifyCheckSum(byte[] header) {\n    long storedSum = 0;\n    long unsignedSum = 0;\n    long signedSum = 0;\n\n    int digits = 0;\n    for (int i = 0; i < header.length; i++) {\n        byte b = header[i];\n        if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n            if ('0' <= b && b <= '7' && digits++ < 6) {\n                storedSum = storedSum * 8 + (b - '0');\n            } else if (digits > 0) {\n                digits = 6;\n            }\n            b = ' ';\n        }\n        unsignedSum += 0xff & b;\n        signedSum += b;\n    }\n    // The original code was missing the checksum replacement in the sum calculation\n    // We need to adjust the signed and unsigned sums to account for the checksum field replacement\n    long adjustedUnsignedSum = unsignedSum;\n    long adjustedSignedSum = signedSum;\n\n    // The checksum field itself is replaced with spaces for calculation\n    // So we need to subtract the original checksum bytes and add spaces' values (32)\n    for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {\n        byte b = header[i];\n        adjustedUnsignedSum -= (0xff & b);\n        adjustedUnsignedSum += 32;  // space character\n        adjustedSignedSum -= b;\n        adjustedSignedSum += 32;    // space character\n    }\n\n    return storedSum == adjustedUnsignedSum || storedSum == adjustedSignedSum;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}