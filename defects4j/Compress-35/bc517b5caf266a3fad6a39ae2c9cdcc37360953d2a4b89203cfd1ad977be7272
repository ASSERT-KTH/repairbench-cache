{
    "generation": "public static boolean verifyCheckSum(byte[] header) {\n    long storedSum = 0;\n    long unsignedSum = 0;\n    long signedSum = 0;\n\n    int digits = 0;\n    int foundDigitIndex = -1;  // track first digit position for trimming whitespaces\n\n    // Calculate checksum values, and parse stored checksum ignoring leading/trailing whitespace\n    for (int i = 0; i < header.length; i++) {\n        byte b = header[i];\n        if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n            // detect first digit position for trimming leading spaces\n            if ('0' <= b && b <= '7') {\n                if (digits < 6) {\n                    storedSum = storedSum * 8 + (b - '0');\n                    digits++;\n                }\n                if (foundDigitIndex == -1) {\n                    foundDigitIndex = i;\n                }\n            }\n            // Always treat checksum field region as space for calculation\n            b = ' ';\n        }\n        unsignedSum += (0xff & b);\n        signedSum += b;\n    }\n\n    /*\n     * COMPRESS-335 workaround: When an archive contains extra whitespace\n     * after the six octal digits, 'storedSum' above only captures the leading valid digits.\n     * This bug fix ensures trailing whitespace (or nulls) is tolerated,\n     * matching historical TAR leniency.\n     */\n\n    return storedSum == unsignedSum || storedSum == signedSum;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}