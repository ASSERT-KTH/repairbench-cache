{
    "generation": "    /**\n     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n     * <blockquote>\n     * The checksum is calculated by taking the sum of the unsigned byte values\n     * of the header block with the eight checksum bytes taken to be ascii\n     * spaces (decimal value 32). It is stored as a six digit octal number with\n     * leading zeroes followed by a NUL and then a space. Various\n     * implementations do not adhere to this format. For better compatibility,\n     * ignore leading and trailing whitespace, and get the first six digits. In\n     * addition, some historic tar implementations treated bytes as signed.\n     * Implementations typically calculate the checksum both ways, and treat it\n     * as good if either the signed or unsigned sum matches the included\n     * checksum.\n     * </blockquote>\n     * <p>\n     * The return value of this method should be treated as a best-effort\n     * heuristic rather than an absolute and final truth. The checksum\n     * verification logic may well evolve over time as more special cases\n     * are encountered.\n     *\n     * @param header tar header\n     * @return whether the checksum is reasonably good\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-335\">COMPRESS-335</a>\n     * @since 1.5\n     */\n    public static boolean verifyCheckSum(byte[] header) {\n        long unsignedSum = 0;\n        long signedSum = 0;\n\n        // Calculate sum of header bytes, treating checksum field bytes (offset 148, length 8) as spaces\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i];\n            // Add contribution to sums, replacing checksum field bytes with spaces\n            if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                unsignedSum += ' '; // Add space character (32) for unsigned sum\n                signedSum += ' ';   // Add space character (32) for signed sum\n            } else {\n                unsignedSum += 0xff & b; // Add unsigned byte value\n                signedSum += b;          // Add signed byte value\n            }\n        }\n\n        // Parse the stored checksum value from the header's checksum field.\n        // Requirement is \"ignore leading and trailing whitespace, and get the first six digits.\"\n        // Interpretation: Scan the 8 bytes of the checksum field. Find the first 6 octal digits ('0'-'7').\n        // Ignore any characters other than octal digits. Stop parsing if a NUL byte is encountered.\n        long storedSum = 0;\n        int digits = 0;\n        for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {\n            byte b = header[i];\n\n            // NUL terminates the checksum field, potentially before 8 bytes are read\n            if (b == 0) {\n                break;\n            }\n\n            // Check if the byte is an octal digit\n            if ('0' <= b && b <= '7') {\n                // Only parse the first 6 digits found\n                if (digits < 6) {\n                    storedSum = storedSum * 8 + (b - '0');\n                    digits++;\n                } else {\n                    // If we find more than 6 digits before a NUL or the end of the field,\n                    // we adhere to \"get the first six digits\" and stop parsing.\n                    break;\n                }\n            }\n            // Ignore other characters (like spaces, non-octal values) encountered\n            // while searching for the first 6 octal digits.\n        }\n\n        return storedSum == unsignedSum || storedSum == signedSum;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}