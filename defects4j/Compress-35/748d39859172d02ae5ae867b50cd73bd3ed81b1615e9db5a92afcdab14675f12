{
    "generation": "    /**\n     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n     * <blockquote>\n     * The checksum is calculated by taking the sum of the unsigned byte values\n     * of the header block with the eight checksum bytes taken to be ascii\n     * spaces (decimal value 32). It is stored as a six digit octal number with\n     * leading zeroes followed by a NUL and then a space. Various\n     * implementations do not adhere to this format. For better compatibility,\n     * ignore leading and trailing whitespace, and get the first six digits. In\n     * addition, some historic tar implementations treated bytes as signed.\n     * Implementations typically calculate the checksum both ways, and treat it\n     * as good if either the signed or unsigned sum matches the included\n     * checksum.\n     * </blockquote>\n     * <p>\n     * The return value of this method should be treated as a best-effort\n     * heuristic rather than an absolute and final truth. The checksum\n     * verification logic may well evolve over time as more special cases\n     * are encountered.\n     *\n     * @param header tar header\n     * @return whether the checksum is reasonably good\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n     * @since 1.5\n     */\n    public static boolean verifyCheckSum(byte[] header) {\n        long storedSum = 0;\n        long unsignedSumWithSpaces = 0; // Sum calculated with checksum bytes replaced by ' '\n        long signedSumWithSpaces = 0;   // Sum calculated with checksum bytes replaced by ' '\n        long unsignedSumWithNuls = 0;   // Sum calculated with checksum bytes replaced by '\\0'\n        long signedSumWithNuls = 0;     // Sum calculated with checksum bytes replaced by '\\0'\n\n        int digits = 0;\n        for (int i = 0; i < header.length; i++) {\n            byte currentByte = header[i]; // Get the original byte from the header\n\n            if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                // This block handles parsing the stored checksum from the header.\n                // The original bytes in the checksum field are used for reading 'storedSum'.\n                if ('0' <= currentByte && currentByte <= '7' && digits < 6) {\n                    // Accumulate up to 6 octal digits for the stored checksum.\n                    storedSum = storedSum * 8 + currentByte - '0';\n                    digits++;\n                } else if (digits > 0) {\n                    // If we have already read some digits and now encounter a non-octal character,\n                    // consider the 6-digit checksum reading complete.\n                    digits = 6;\n                }\n\n                // For the purpose of calculating the header sums (unsignedSumWithSpaces, etc.),\n                // the bytes in the checksum field are specified to be replaced.\n                // The Wikipedia quote implies space replacement.\n                // The JIRA issue COMPRESS-191 implies some implementations use NUL.\n                unsignedSumWithSpaces += (0xff & ' '); // ASCII space (decimal 32)\n                signedSumWithSpaces += ' ';\n                unsignedSumWithNuls += (0xff & 0);     // NUL byte (decimal 0)\n                signedSumWithNuls += 0;\n            } else {\n                // Outside the checksum field, use the original byte for all sum calculations.\n                unsignedSumWithSpaces += (0xff & currentByte);\n                signedSumWithSpaces += currentByte;\n                unsignedSumWithNuls += (0xff & currentByte);\n                signedSumWithNuls += currentByte;\n            }\n        }\n        // The checksum is considered valid if 'storedSum' matches any of the calculated sums.\n        // This covers combinations of signed/unsigned interpretation and space/NUL replacement.\n        return storedSum == unsignedSumWithSpaces || storedSum == signedSumWithSpaces ||\n               storedSum == unsignedSumWithNuls || storedSum == signedSumWithNuls;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}