{
    "generation": "    /**\n     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n     * <blockquote>\n     * The checksum is calculated by taking the sum of the unsigned byte values\n     * of the header block with the eight checksum bytes taken to be ascii\n     * spaces (decimal value 32). It is stored as a six digit octal number with\n     * leading zeroes followed by a NUL and then a space. Various\n     * implementations do not adhere to this format. For better compatibility,\n     * ignore leading and trailing whitespace, and get the first six digits. In\n     * addition, some historic tar implementations treated bytes as signed.\n     * Implementations typically calculate the checksum both ways, and treat it\n     * as good if either the signed or unsigned sum matches the included\n     * checksum.\n     * </blockquote>\n     * <p>\n     * The return value of this method should be treated as a best-effort\n     * heuristic rather than an absolute and final truth. The checksum\n     * verification logic may well evolve over time as more special cases\n     * are encountered.\n     *\n     * @param header tar header\n     * @return whether the checksum is reasonably good\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n     * @since 1.5\n     */\n    public static boolean verifyCheckSum(byte[] header) {\n        // Calculate unsigned and signed sums, treating checksum field bytes as spaces\n        long unsignedSum = 0;\n        long signedSum = 0;\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i];\n            // Checksum field bytes (offset 148, length 8) are treated as spaces for sum calculation\n            if (TarConstants.CHKSUM_OFFSET <= i && i < TarConstants.CHKSUM_OFFSET + TarConstants.CHKSUMLEN) {\n                b = ' ';\n            }\n            unsignedSum += 0xff & b;\n            signedSum += b;\n        }\n\n        // Parse the stored checksum value leniently from the header's checksum field\n        long storedSum = 0;\n        int start = TarConstants.CHKSUM_OFFSET;\n        int end = TarConstants.CHKSUM_OFFSET + TarConstants.CHKSUMLEN;\n\n        // Trim trailing NULs and spaces from the checksum field\n        // (It should be NUL terminated followed by space, but implementations vary)\n        while (end > start && (header[end - 1] == 0 || header[end - 1] == ' ')) {\n            end--;\n        }\n\n        // Skip leading spaces in the checksum field\n        while (start < end && header[start] == ' ') {\n            start++;\n        }\n\n        // Parse the first 6 octal digits found\n        int digitCount = 0;\n        for (int i = start; i < end && digitCount < 6; i++) {\n            byte b = header[i];\n            // Check if it's an octal digit\n            if (b >= '0' && b <= '7') {\n                storedSum = (storedSum << 3) + (b - '0');\n                digitCount++;\n            } else {\n                // If we encounter a non-octal digit after skipping leading spaces,\n                // stop parsing, consistent with \"get the first six digits\".\n                break;\n            }\n        }\n\n        return storedSum == unsignedSum || storedSum == signedSum;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}