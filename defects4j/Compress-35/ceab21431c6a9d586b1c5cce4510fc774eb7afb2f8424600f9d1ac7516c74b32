{
    "generation": "    public static boolean verifyCheckSum(byte[] header) {\n        long storedSum = 0;\n        long unsignedSum = 0;\n        long signedSum = 0;\n\n        // First, compute the sums by replacing the checksum field with spaces\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i];\n            if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                b = ' '; // Replace checksum bytes with spaces for sum calculation\n            }\n            unsignedSum += 0xff & b;\n            signedSum += b;\n        }\n\n        // Now parse the stored checksum, skipping leading whitespace and up to 6 octal digits\n        int digits = 0;\n        boolean parsingDigits = false;\n        for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {\n            if (digits >= 6) {\n                break;\n            }\n            byte b = header[i];\n            if (!parsingDigits) {\n                // Skip leading whitespace (space, tab, null)\n                if (b == ' ' || b == '\\t' || b == 0) {\n                    continue;\n                } else {\n                    parsingDigits = true;\n                }\n            }\n            if (b >= '0' && b <= '7') {\n                storedSum = storedSum * 8 + (b - '0');\n                digits++;\n            } else {\n                // Stop parsing at the first non-octal digit\n                break;\n            }\n        }\n\n        return storedSum == unsignedSum || storedSum == signedSum;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}