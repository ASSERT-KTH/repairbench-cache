{
    "generation": "    /**\n     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n     * <blockquote>\n     * The checksum is calculated by taking the sum of the unsigned byte values\n     * of the header block with the eight checksum bytes taken to be ascii\n     * spaces (decimal value 32). It is stored as a six digit octal number with\n     * leading zeroes followed by a NUL and then a space. Various\n     * implementations do not adhere to this format. For better compatibility,\n     * ignore leading and trailing whitespace, and get the first six digits. In\n     * addition, some historic tar implementations treated bytes as signed.\n     * Implementations typically calculate the checksum both ways, and treat it\n     * as good if either the signed or unsigned sum matches the included\n     * checksum.\n     * </blockquote>\n     * <p>\n     * The return value of this method should be treated as a best-effort\n     * heuristic rather than an absolute and final truth. The checksum\n     * verification logic may well evolve over time as more special cases\n     * are encountered.\n     *\n     * @param header tar header\n     * @return whether the checksum is reasonably good\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n     * @since 1.5\n     */\n    public static boolean verifyCheckSum(byte[] header) {\n        long storedSum = 0;\n        long unsignedSum = 0;\n        long signedSum = 0;\n\n        int digits = 0;\n        // Tar header blocks are typically 512 bytes (HEADER_SIZE). The checksum\n        // is calculated over this entire block. If the provided header is\n        // shorter than the standard block size, the remaining bytes should be\n        // treated as NULs for checksum calculation purposes.\n        // Assumes HEADER_SIZE, CHKSUM_OFFSET, and CHKSUMLEN are constants\n        // accessible in this context (e.g., from TarConstants or directly in the class).\n        for (int i = 0; i < HEADER_SIZE; i++) {\n            byte b;\n            if (i < header.length) {\n                b = header[i];\n            } else {\n                // Pad with NULs if the actual header is shorter than HEADER_SIZE\n                b = 0;\n            }\n\n            if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                // When parsing the stored checksum, ignore leading/trailing\n                // non-octal characters and only take up to 6 octal digits.\n                if (b >= '0' && b <= '7' && digits < 6) {\n                    storedSum = storedSum * 8 + (b - '0');\n                    digits++;\n                } else if (digits > 0) {\n                    // Stop parsing storedSum if a non-octal char is encountered after digits have been read.\n                    // Subsequent checksum bytes are still treated as spaces for the sum calculation.\n                    digits = 6;\n                }\n                // For the purpose of checksum calculation, the checksum field\n                // bytes are taken to be ASCII spaces (decimal 32).\n                b = ' ';\n            }\n            unsignedSum += 0xff & b;\n            signedSum += b;\n        }\n        return storedSum == unsignedSum || storedSum == signedSum;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}