{
    "generation": "    /**\n     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n     * <blockquote>\n     * The checksum is calculated by taking the sum of the unsigned byte values\n     * of the header block with the eight checksum bytes taken to be ascii\n     * spaces (decimal value 32). It is stored as a six digit octal number with\n     * leading zeroes followed by a NUL and then a space. Various\n     * implementations do not adhere to this format. For better compatibility,\n     * ignore leading and trailing whitespace, and get the first six digits. In\n     * addition, some historic tar implementations treated bytes as signed.\n     * Implementations typically calculate the checksum both ways, and treat it\n     * as good if either the signed or unsigned sum matches the included\n     * checksum.\n     * </blockquote>\n     * <p>\n     * The return value of this method should be treated as a best-effort\n     * heuristic rather than an absolute and final truth. The checksum\n     * verification logic may well evolve over time as more special cases\n     * are encountered.\n     *\n     * @param header tar header\n     * @return whether the checksum is reasonably good\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n     * @since 1.5\n     */\n    public static boolean verifyCheckSum(byte[] header) {\n        long storedSum = 0;\n        // Sums calculated with checksum bytes replaced by spaces (standard)\n        long unsignedSumWithSpaces = 0;\n        long signedSumWithSpaces = 0;\n        // Sums calculated with actual checksum bytes (for some non-standard variants like GNU tar)\n        long unsignedSumActualBytes = 0;\n        long signedSumActualBytes = 0;\n\n        int digits = 0;\n        for (int i = 0; i < header.length; i++) {\n            byte currentByte = header[i]; // Original byte at current position\n\n            if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                // Parse the stored checksum from the header.\n                // \"ignore leading and trailing whitespace, and get the first six digits.\"\n                if ('0' <= currentByte && currentByte <= '7' && digits < 6) {\n                    storedSum = storedSum * 8 + (currentByte - '0');\n                    digits++;\n                } else if (digits > 0) { // If digits have been read, but a non-octal char or limit is reached, stop parsing.\n                    digits = 6; // Effectively stops further digit parsing within the checksum field.\n                }\n\n                // Calculate sum assuming checksum bytes are spaces (standard behavior)\n                unsignedSumWithSpaces += (0xff & ' '); // ' ' is ASCII 32\n                signedSumWithSpaces += ' ';\n\n                // Calculate sum assuming checksum bytes are their actual value (non-standard variant)\n                unsignedSumActualBytes += (0xff & currentByte);\n                signedSumActualBytes += currentByte;\n            } else {\n                // For bytes outside the checksum range, use their original value for all sums.\n                unsignedSumWithSpaces += (0xff & currentByte);\n                signedSumWithSpaces += currentByte;\n                unsignedSumActualBytes += (0xff & currentByte);\n                signedSumActualBytes += currentByte;\n            }\n        }\n\n        // Return true if stored checksum matches any of the four calculated sums.\n        // This covers:\n        // 1. Standard checksum (with spaces) using unsigned byte values.\n        // 2. Standard checksum (with spaces) using signed byte values.\n        // 3. Non-standard checksum (with actual bytes) using unsigned byte values.\n        // 4. Non-standard checksum (with actual bytes) using signed byte values.\n        return storedSum == unsignedSumWithSpaces || storedSum == signedSumWithSpaces ||\n               storedSum == unsignedSumActualBytes || storedSum == signedSumActualBytes;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}