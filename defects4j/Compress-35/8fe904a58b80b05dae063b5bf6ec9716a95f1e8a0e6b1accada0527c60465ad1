{
    "generation": "public static boolean verifyCheckSum(byte[] header) {\n    long unsignedSum = 0;\n    long signedSum = 0;\n    long storedSum = 0;\n    int digits = 0;\n\n    // First pass: compute the unsigned and signed sums,\n    // and parse an ASCII\u2010octal checksum (up to 6 digits),\n    // treating the checksum field bytes as spaces.\n    for (int i = 0; i < header.length; i++) {\n        byte b = header[i];\n        if (i >= CHKSUM_OFFSET && i < CHKSUM_OFFSET + CHKSUMLEN) {\n            if (digits < 6 && b >= '0' && b <= '7') {\n                storedSum = storedSum * 8 + (b - '0');\n                digits++;\n            } else if (digits > 0) {\n                // once we've seen digits, any non-octal ends parsing\n                digits = 6;\n            }\n            // for the purpose of the checksum sum, treat this byte as a space\n            b = ' ';\n        }\n        unsignedSum += (b & 0xFF);\n        signedSum += b;\n    }\n\n    // If the ASCII\u2010octal checksum matches either sum, we're good.\n    if (storedSum == unsignedSum || storedSum == signedSum) {\n        return true;\n    }\n\n    // Fallback: some historic tars store the checksum in binary\n    // (indicated by the high\u2010bit set in the first checksum byte).\n    if ((header[CHKSUM_OFFSET] & 0x80) != 0) {\n        storedSum = 0;\n        for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {\n            storedSum = (storedSum << 8) + (header[i] & 0xFF);\n        }\n        if (storedSum == unsignedSum || storedSum == signedSum) {\n            return true;\n        }\n    }\n\n    // No match\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}