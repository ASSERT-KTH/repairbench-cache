{
    "generation": "public static boolean verifyCheckSum(byte[] header) {\n    // First, extract the checksum field as a US-ASCII string and trim any extra whitespace.\n    String field = new String(header, CHKSUM_OFFSET, CHKSUMLEN, java.nio.charset.StandardCharsets.US_ASCII);\n    char[] trimmed = field.trim().toCharArray();\n    // Now, take only the first contiguous sequence of octal digits (up to 6 characters).\n    StringBuilder sb = new StringBuilder();\n    for (char c : trimmed) {\n        if (c >= '0' && c <= '7') {\n            if (sb.length() < 6) {\n                sb.append(c);\n            } else {\n                break;\n            }\n        } else if (sb.length() > 0) {\n            // Once digits have started, any non-digit terminates the processing.\n            break;\n        }\n    }\n\n    long storedSum = 0;\n    if (sb.length() > 0) {\n        try {\n            storedSum = Long.parseLong(sb.toString(), 8);\n        } catch (NumberFormatException nfe) {\n            storedSum = 0;\n        }\n    }\n\n    long unsignedSum = 0;\n    long signedSum = 0;\n    // Compute the sums of all header bytes; for indices in the checksum field,\n    // use an ascii space (decimal 32) instead of the real byte.\n    for (int i = 0; i < header.length; i++) {\n        byte b = header[i];\n        if (i >= CHKSUM_OFFSET && i < CHKSUM_OFFSET + CHKSUMLEN) {\n            b = ' ';\n        }\n        unsignedSum += b & 0xff;\n        signedSum += b;\n    }\n\n    return storedSum == unsignedSum || storedSum == signedSum;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}