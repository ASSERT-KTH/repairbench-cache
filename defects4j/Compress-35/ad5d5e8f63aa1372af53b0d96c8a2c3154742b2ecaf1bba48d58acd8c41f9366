{
    "generation": "import org.apache.commons.compress.archivers.tar.TarUtils; // Assuming TarUtils.parseOctalOrBinary exists\n\n// Note: Constants like CHKSUM_OFFSET and CHKSUMLEN are assumed to be defined elsewhere,\n// likely as static final ints in the same class.\n// The helper method TarUtils.parseOctalOrBinary is also assumed to be available.\n\n    /**\n     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n     * <blockquote>\n     * The checksum is calculated by taking the sum of the unsigned byte values\n     * of the header block with the eight checksum bytes taken to be ascii\n     * spaces (decimal value 32). It is stored as a six digit octal number with\n     * leading zeroes followed by a NUL and then a space. Various\n     * implementations do not adhere to this format. For better compatibility,\n     * ignore leading and trailing whitespace, and get the first six digits. In\n     * addition, some historic tar implementations treated bytes as signed.\n     * Implementations typically calculate the checksum both ways, and treat it\n     * as good if either the signed or unsigned sum matches the included\n     * checksum.\n     * GNU tar implementations have historically used signed bytes for the checksum calculation,\n     * but current versions use unsigned bytes like other implementations.\n     * GNU tar since version 1.24 supports storing the checksum in binary format\n     * if the octal representation would overflow the checksum field.\n     * </blockquote>\n     * <p>\n     * The return value of this method should be treated as a best-effort\n     * heuristic rather than an absolute and final truth. The checksum\n     * verification logic may well evolve over time as more special cases\n     * are encountered.\n     *\n     * @param header tar header\n     * @return whether the checksum is reasonably good\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-335\">COMPRESS-335</a>\n     * @since 1.5\n     */\n    public static boolean verifyCheckSum(final byte[] header) {\n        long unsignedSum = 0;\n        long signedSum = 0;\n\n        // Calculate the unsigned sum, treating checksum field as spaces\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i];\n            if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                b = ' '; // Replace checksum field bytes with spaces\n            }\n            unsignedSum += 0xff & b; // Add unsigned byte value\n        }\n\n        // Calculate the signed sum, treating checksum field as spaces\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i];\n            if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                b = ' '; // Replace checksum field bytes with spaces\n            }\n            signedSum += b; // Add signed byte value\n        }\n\n        // Parse the stored checksum value using the helper method\n        // that handles both octal and GNU binary formats (introduced for COMPRESS-335).\n        final long storedSum = TarUtils.parseOctalOrBinary(header, CHKSUM_OFFSET, CHKSUMLEN);\n\n        // Check if the stored checksum matches either the unsigned or signed sum\n        return storedSum == unsignedSum || storedSum == signedSum;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}