{
    "generation": "public static boolean verifyCheckSum(byte[] header) {\n    long storedSum = 0;\n    int digits = 0;\n    int chksumFieldStart = CHKSUM_OFFSET;\n    int chksumFieldEnd = CHKSUM_OFFSET + CHKSUMLEN;\n\n    // Extract actual stored checksum value per POSIX, ignore whitespace and trailing NUL/space after 6 digits\n    for (int i = chksumFieldStart; i < chksumFieldEnd; ++i) {\n        byte b = header[i];\n        if (digits == 0 && (b == 0x20 || b == 0)) { // Skip leading whitespace/NUL\n            continue;\n        }\n        if (digits < 6 && '0' <= b && b <= '7') {\n            storedSum = storedSum * 8 + (b - '0');\n            digits++;\n        } else if (digits < 6 && (b == 0x20 || b == 0)) {\n            // End of digits (whitespace or NUL)\n            break;\n        } else {\n            break;\n        }\n    }\n\n    // Compute unsigned and signed header checksum, with chksum field bytes treated as spaces.\n    long unsignedSum = 0;\n    long signedSum = 0;\n    for (int i = 0; i < header.length; ++i) {\n        byte b = header[i];\n        if (chksumFieldStart <= i && i < chksumFieldEnd) {\n            b = 0x20; // treat chksum field as space (32)\n        }\n        unsignedSum += (b & 0xFFL);\n        signedSum += b;\n    }\n    return storedSum == unsignedSum || storedSum == signedSum;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}