{
    "generation": "public static boolean verifyCheckSum(byte[] header) {\n    long storedSum = parseChecksum(header);\n    long unsignedSum = calculateSum(header, false);\n    long signedSum = calculateSum(header, true);\n\n    return storedSum == unsignedSum || storedSum == signedSum;\n}\n\nprivate static long parseChecksum(byte[] header) {\n    long sum = 0;\n    int digits = 0;\n    for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {\n        byte b = header[i];\n        if ('0' <= b && b <= '7' && digits < 6) {\n            sum = sum * 8 + (b - '0');\n            digits++;\n        } else if (Character.isWhitespace(b)) {\n            // skip whitespace\n        } else {\n            // If we encounter non-digit characters before we have 6 digits,\n            // treat as if we had a 6-digit number with trailing garbage\n            if (digits == 0) {\n                return 0; // invalid checksum\n            }\n            digits = 6;\n        }\n    }\n    // If we didn't get 6 digits, pad with zeros\n    while (digits < 6) {\n        digits++;\n    }\n    return sum;\n}\n\nprivate static long calculateSum(byte[] header, boolean useSigned) {\n    long sum = 0;\n    for (int i = 0; i < header.length; i++) {\n        byte b = header[i];\n        if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n            b = ' '; // treat checksum field as spaces\n        }\n        if (useSigned) {\n            sum += b;\n        } else {\n            sum += 0xff & b;\n        }\n    }\n    return sum;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}