{
    "generation": "public static boolean verifyCheckSum(byte[] header) {\n    long storedSum = 0;\n    long unsignedSum = 0;\n    long signedSum = 0;\n\n    // compute the stored checksum: trim leading/trailing spaces and NULs, then parse first up to 6 octal digits\n    int start = CHKSUM_OFFSET;\n    int end = CHKSUM_OFFSET + CHKSUMLEN;\n\n    // Skip leading spaces/NULs\n    while (start < end &&\n            (header[start] == 0 || header[start] == ' ')) {\n        ++start;\n    }\n    // Find end of digits (stop at space/NUL after some digits or after 6 digits)\n    int digits = 0;\n    for (int i = start; i < end && digits < 6; i++) {\n        byte b = header[i];\n        if (b >= '0' && b <= '7') {\n            storedSum = (storedSum << 3) + (b - '0');\n            digits++;\n        } else {\n            break;\n        }\n    }\n\n    // The standard says the stored checksum field should be treated as spaces (ASCII 32 decimal) for the calculation\n    for (int i = 0; i < header.length; i++) {\n        byte b = header[i];\n        if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n            b = ' ';\n        }\n        unsignedSum += 0xFF & b;\n        signedSum += b;\n    }\n    return storedSum == unsignedSum || storedSum == signedSum;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}