{
    "generation": "    /**\n     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n     * <blockquote>\n     * The checksum is calculated by taking the sum of the unsigned byte values\n     * of the header block with the eight checksum bytes taken to be ascii\n     * spaces (decimal value 32). It is stored as a six digit octal number with\n     * leading zeroes followed by a NUL and then a space. Various\n     * implementations do not adhere to this format. For better compatibility,\n     * ignore leading and trailing whitespace, and get the first six digits. In\n     * addition, some historic tar implementations treated bytes as signed.\n     * Implementations typically calculate the checksum both ways, and treat it\n     * as good if either the signed or unsigned sum matches the included\n     * checksum.\n     * </blockquote>\n     * <p>\n     * The return value of this method should be treated as a best-effort\n     * heuristic rather than an absolute and final truth. The checksum\n     * verification logic may well evolve over time as more special cases\n     * are encountered.\n     *\n     * @param header tar header\n     * @return whether the checksum is reasonably good\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n     * @since 1.5\n     */\n    public static boolean verifyCheckSum(byte[] header) {\n        // Assuming CHKSUM_OFFSET and CHKSUMLEN are accessible, e.g., from TarConstants\n        // public static final int CHKSUMLEN = 8;\n        // public static final int CHKSUM_OFFSET = 148;\n\n        long storedSum = 0;\n        long unsignedSum = 0;\n        long signedSum = 0;\n\n        int digits = 0;\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i];\n            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                // Parse the stored checksum from the header bytes\n                if ('0' <= b && b <= '7' && digits++ < 6) {\n                    storedSum = storedSum * 8 + b - '0';\n                } else if (digits > 0) {\n                    // Stop parsing if a non-octal digit is encountered after some digits\n                    digits = 6;\n                }\n                // For checksum calculation, the checksum bytes themselves are treated as spaces\n                b = ' ';\n            }\n            unsignedSum += 0xff & b; // Add byte as unsigned\n            signedSum += b;         // Add byte as signed\n        }\n\n        // COMPRESS-335: Special handling for tar files where the checksum field is all spaces.\n        // Some tar implementations write all spaces instead of a valid octal checksum.\n        // In such cases, despite the checksum not being parsable as a number, the file\n        // is considered a valid tar archive.\n        if (storedSum == 0 && CHKSUMLEN == 8 && header[CHKSUM_OFFSET] == ' ') {\n            boolean allSpaces = true;\n            for (int i = 0; i < CHKSUMLEN; i++) {\n                if (header[CHKSUM_OFFSET + i] != ' ') {\n                    allSpaces = false;\n                    break;\n                }\n            }\n            if (allSpaces) {\n                return true; // Consider it valid if all checksum bytes are spaces.\n            }\n        }\n\n        // Return true if either the unsigned or signed sum matches the stored sum\n        return storedSum == unsignedSum || storedSum == signedSum;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}