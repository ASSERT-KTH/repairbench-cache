{
    "generation": "import static org.apache.commons.compress.archivers.tar.TarConstants.CHKSUMLEN;\nimport static org.apache.commons.compress.archivers.tar.TarConstants.CHKSUM_OFFSET;\n// It's assumed TarConstants.CHKSUM_OFFSET = 148 and TarConstants.CHKSUMLEN = 8 are available.\n\n    /**\n     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n     * <blockquote>\n     * The checksum is calculated by taking the sum of the unsigned byte values\n     * of the header block with the eight checksum bytes taken to be ascii\n     * spaces (decimal value 32). It is stored as a six digit octal number with\n     * leading zeroes followed by a NUL and then a space. Various\n     * implementations do not adhere to this format. For better compatibility,\n     * ignore leading and trailing whitespace, and get the first six digits. In\n     * addition, some historic tar implementations treated bytes as signed.\n     * Implementations typically calculate the checksum both ways, and treat it\n     * as good if either the signed or unsigned sum matches the included\n     * checksum.\n     * <p>\n     * GNU tar implementations have historically calculated the checksum\n     * slightly differently; they treat the checksum field's bytes as part of\n     * the sum calculation, using signed bytes.\n     * </p>\n     * </blockquote>\n     * <p>\n     * The return value of this method should be treated as a best-effort\n     * heuristic rather than an absolute and final truth. The checksum\n     * verification logic may well evolve over time as more special cases\n     * are encountered.\n     * </p>\n     *\n     * @param header tar header\n     * @return whether the checksum is reasonably good\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-335\">COMPRESS-335</a>\n     * @since 1.5\n     */\n    public static boolean verifyCheckSum(byte[] header) {\n        // Parse stored checksum leniently from checksum field (offset 148, length 8)\n        long storedSum = 0;\n        int start = CHKSUM_OFFSET; // 148\n        int end = CHKSUM_OFFSET + CHKSUMLEN; // 156\n\n        // Ensure header is large enough to contain checksum field\n        // Tar headers are usually 512 bytes long.\n        if (header == null || end > header.length) {\n             // Invalid header length, cannot verify checksum.\n            return false;\n        }\n\n        // Skip leading spaces in checksum field\n        while (start < end && header[start] == ' ') {\n            start++;\n        }\n\n        // Parse up to 6 octal digits from checksum field\n        int count = 0;\n        while (count < 6 && start < end && header[start] >= '0' && header[start] <= '7') {\n            storedSum = storedSum * 8 + (header[start] - '0');\n            start++;\n            count++;\n        }\n        // Note: We ignore any remaining characters in the checksum field (NUL, space, non-octal)\n        // after the first 6 digits or the first non-octal character encountered after skipping leading spaces.\n\n        // Calculate checksums based on different methods\n        long unsignedSum = 0; // Standard: sum of unsigned bytes, checksum field treated as spaces\n        long signedSum = 0;   // Historic: sum of signed bytes, checksum field treated as spaces\n        long gnuSum = 0;      // GNU: sum of signed bytes, checksum field treated as original bytes\n\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i];\n            if (i >= CHKSUM_OFFSET && i < end) { // If inside the checksum field\n                unsignedSum += 0xff & ' '; // Use space value for standard unsigned sum\n                signedSum += ' ';          // Use space value for standard signed sum\n                gnuSum += b;               // Use original byte value for GNU-style signed sum\n            } else { // If outside the checksum field\n                unsignedSum += 0xff & b; // Use unsigned byte value\n                signedSum += b;          // Use signed byte value\n                gnuSum += b;             // Use signed byte value\n            }\n        }\n\n        // Verify: the stored checksum must match one of the calculated checksums\n        return storedSum == unsignedSum || storedSum == signedSum || storedSum == gnuSum;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}