{
    "generation": "    /**\n     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n     * <blockquote>\n     * The checksum is calculated by taking the sum of the unsigned byte values\n     * of the header block with the eight checksum bytes taken to be ascii\n     * spaces (decimal value 32). It is stored as a six digit octal number with\n     * leading zeroes followed by a NUL and then a space. Various\n     * implementations do not adhere to this format. For better compatibility,\n     * ignore leading and trailing whitespace, and get the first six digits. In\n     * addition, some historic tar implementations treated bytes as signed.\n     * Implementations typically calculate the checksum both ways, and treat it\n     * as good if either the signed or unsigned sum matches the included\n     * checksum.\n     * </blockquote>\n     * <p>\n     * The return value of this method should be treated as a best-effort\n     * heuristic rather than an absolute and final truth. The checksum\n     * verification logic may well evolve over time as more special cases\n     * are encountered.\n     *\n     * @param header tar header\n     * @return whether the checksum is reasonably good\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n     * @since 1.5\n     */\n    public static boolean verifyCheckSum(byte[] header) {\n        long storedSum = 0;\n        // Sums calculated treating checksum field as spaces (standard behavior)\n        long unsignedSumStandard = 0;\n        long signedSumStandard = 0;\n        // Sums calculated treating checksum field with its original bytes (for compatibility, e.g., NUL-padded)\n        long unsignedSumOriginalBytes = 0;\n        long signedSumOriginalBytes = 0;\n\n        int digits = 0;\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i]; // Get original byte\n\n            // Parse storedSum from the checksum field\n            if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n                if ('0' <= b && b <= '7' && digits++ < 6) {\n                    storedSum = storedSum * 8 + b - '0';\n                } else if (digits > 0) {\n                    // Stop parsing if non-octal char encountered after some digits\n                    digits = 6;\n                }\n                // For sums using original bytes, add the original 'b'\n                unsignedSumOriginalBytes += 0xff & b;\n                signedSumOriginalBytes += b;\n\n                // For standard sums, conceptually replace 'b' with a space for checksum calculation\n                b = ' '; // This 'b' will be used for standard sums below\n            } else {\n                // For bytes outside the checksum field, both sum types use the original byte\n                unsignedSumOriginalBytes += 0xff & b;\n                signedSumOriginalBytes += b;\n            }\n            \n            // Add 'b' (which is either header[i] or ' ' for checksum field) to standard sums\n            unsignedSumStandard += 0xff & b;\n            signedSumStandard += b;\n        }\n\n        // Return true if storedSum matches any of the calculated sums\n        return storedSum == unsignedSumStandard\n            || storedSum == signedSumStandard\n            || storedSum == unsignedSumOriginalBytes\n            || storedSum == signedSumOriginalBytes;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}