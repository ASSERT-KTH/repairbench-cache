{
    "generation": "public static boolean verifyCheckSum(byte[] header) {\n    long storedSum = 0;\n    long unsignedSum = 0;\n    long signedSum = 0;\n\n    int digits = 0;\n    boolean stillPadding = true;\n    // Parse the stored checksum, ignoring leading/trailing spaces and NULs,\n    // and handling old tars with malformed chksum fields\n    for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {\n        byte b = header[i];\n        if (digits < 6) {\n            if ((b == ' ' || b == 0) && stillPadding) {\n                continue;\n            } else if ('0' <= b && b <= '7') {\n                storedSum = storedSum * 8 + (b - '0');\n                stillPadding = false;\n                digits++;\n            } else if (b == ' ' || b == 0) {\n                // Treat space and NUL as padding after the digits\n                stillPadding = true;\n            } else {\n                // unexpected byte, ignore\n                stillPadding = true;\n            }\n        }\n    }\n\n    for (int i = 0; i < header.length; i++) {\n        byte b = header[i];\n        if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n            // The checksum field itself is treated as space bytes (0x20)\n            b = (byte) ' ';\n        }\n        unsignedSum += 0xff & b;\n        signedSum += b;\n    }\n    return storedSum == unsignedSum || storedSum == signedSum;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}