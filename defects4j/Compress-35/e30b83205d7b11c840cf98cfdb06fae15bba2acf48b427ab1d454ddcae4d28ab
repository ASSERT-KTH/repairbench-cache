{
    "generation": "    /**\n     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n     * <blockquote>\n     * The checksum is calculated by taking the sum of the unsigned byte values\n     * of the header block with the eight checksum bytes taken to be ascii\n     * spaces (decimal value 32). It is stored as a six digit octal number with\n     * leading zeroes followed by a NUL and then a space. Various\n     * implementations do not adhere to this format. For better compatibility,\n     * ignore leading and trailing whitespace, and get the first six digits. In\n     * addition, some historic tar implementations treated bytes as signed.\n     * Implementations typically calculate the checksum both ways, and treat it\n     * as good if either the signed or unsigned sum matches the included\n     * checksum.\n     * </blockquote>\n     * <p>\n     * The return value of this method should be treated as a best-effort\n     * heuristic rather than an absolute and final truth. The checksum\n     * verification logic may well evolve over time as more special cases\n     * are encountered.\n     *\n     * @param header tar header\n     * @return whether the checksum is reasonably good\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-335\">COMPRESS-335</a> Handling of NUL padded checksums.\n     * @since 1.5\n     */\n    public static boolean verifyCheckSum(byte[] header) {\n        long storedSum = 0;\n        long unsignedSum = 0;\n        long signedSum = 0;\n\n        boolean EOT = false; // Flag for End Of numerical Tar checksum chars\n        int digits = 0;\n\n        for (int i = 0; i < header.length; i++) {\n            byte b = header[i];\n            if (TarConstants.CHKSUM_OFFSET <= i && i < TarConstants.CHKSUM_OFFSET + TarConstants.CHKSUMLEN) { // Inside checksum field\n                // Parse stored checksum value from header field.\n                // Handles NUL-terminated or space-terminated values, ignores leading spaces/NULs,\n                // stops after 6 digits or on the first non-octal character after finding a digit.\n                if (!EOT) {\n                    if (b == ' ' || b == 0) { // Space or NUL\n                        if (digits > 0) { // If we already have digits, this is a terminator\n                            EOT = true;\n                        }\n                        // Leading spaces or NULs are ignored (continue loop without processing/error)\n                    } else if ('0' <= b && b <= '7') { // Octal digit\n                        if (digits < 6) { // Process up to 6 digits\n                            storedSum = storedSum * 8 + (b - '0');\n                            digits++;\n                        } else { // If more than 6 digits, stop parsing checksum field\n                            EOT = true;\n                        }\n                    } else { // Non-octal, non-space, non-NUL character encountered\n                        // This indicates an invalid character in the checksum field. Stop parsing.\n                        EOT = true;\n                    }\n                }\n                // For checksum calculation, treat bytes in the checksum field as spaces\n                b = ' ';\n            }\n            unsignedSum += 0xff & b;\n            signedSum += b;\n        }\n        return storedSum == unsignedSum || storedSum == signedSum;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}