{
    "generation": "private void inlineNonConstants(\n    Var v, ReferenceCollection referenceInfo,\n    boolean maybeModifiedArguments) {\n  int refCount = referenceInfo.references.size();\n  Reference declaration = referenceInfo.references.get(0);\n  Reference init = referenceInfo.getInitializingReference();\n  int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n  if (refCount > 1 &&\n      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n    // If the variable is referenced more than once, we can only\n    // inline it if it\u2019s immutable and never defined before it\u2019s referenced.\n    Node value;\n    if (init != null) {\n      value = init.getAssignedValue();\n    } else {\n      // Create a new node for a variable that is never initialized.\n      Node srcLocation = declaration.getNode();\n      value = NodeUtil.newUndefinedNode(srcLocation);\n    }\n    Preconditions.checkNotNull(value);\n    inlineWellDefinedVariable(v, value, referenceInfo.references);\n    staleVars.add(v);\n  } else if (refCount == firstRefAfterInit && init != null) {\n    // The variable is likely read only once.\n    // Try some more complex inlining heuristics but only inline if the\n    // initializer is safe to re-evaluate. For example, if the assigned value\n    // is not a literal or otherwise immutable then inlining could change\n    // evaluation order.\n    Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);\n    Node value = init.getAssignedValue();\n    // Only inline when the value is immutable (so that duplicating the read\n    // does not change program behavior).\n    if (value != null && NodeUtil.isImmutableValue(value) &&\n        canInline(declaration, init, reference)) {\n      inline(v, declaration, init, reference);\n      staleVars.add(v);\n    }\n  } else if (declaration != init && refCount == 2) {\n    if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n      // The only reference is the initialization; remove both the assignment\n      // and the variable declaration.\n      Node value = init.getAssignedValue();\n      Preconditions.checkNotNull(value);\n      inlineWellDefinedVariable(v, value, referenceInfo.references);\n      staleVars.add(v);\n    }\n  }\n\n  // If this variable was not inlined normally, check if we can inline an alias\n  // of it. (If the variable was inlined, then the reference data is out of sync.\n  // We're better off just waiting for the next pass.)\n  if (!maybeModifiedArguments &&\n      !staleVars.contains(v) &&\n      referenceInfo.isWellDefined() &&\n      referenceInfo.isAssignedOnceInLifetime()) {\n    // Inlining the variable based solely on being well defined and assigned\n    // once is *NOT* correct. We relax the correctness requirement if the\n    // variable is declared constant.\n    List<Reference> refs = referenceInfo.references;\n    for (int i = 1; i < refs.size(); i++) {  // start from a read\n      Node nameNode = refs.get(i).getNode();\n      if (aliasCandidates.containsKey(nameNode)) {\n        AliasCandidate candidate = aliasCandidates.get(nameNode);\n        if (!staleVars.contains(candidate.alias) &&\n            !isVarInlineForbidden(candidate.alias)) {\n          Reference aliasInit = candidate.refInfo.getInitializingReference();\n          Node value = aliasInit.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          inlineWellDefinedVariable(candidate.alias,\n              value,\n              candidate.refInfo.references);\n          staleVars.add(candidate.alias);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}