{
    "generation": "private void inlineNonConstants(\n    Var v, ReferenceCollection referenceInfo,\n    boolean maybeModifiedArguments) {\n  int refCount = referenceInfo.references.size();\n  Reference declaration = referenceInfo.references.get(0);\n  Reference init = referenceInfo.getInitializingReference();\n  int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n  if (refCount > 1 &&\n      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n    // When the variable is referenced more than once,\n    // we can only inline it if it is immutable and never defined before its use.\n    Node value;\n    if (init != null) {\n      value = init.getAssignedValue();\n    } else {\n      // Create a new node for a variable that is never initialized.\n      Node srcLocation = declaration.getNode();\n      value = NodeUtil.newUndefinedNode(srcLocation);\n    }\n    Preconditions.checkNotNull(value);\n    inlineWellDefinedVariable(v, value, referenceInfo.references);\n    staleVars.add(v);\n\n  } else if (refCount == firstRefAfterInit) {\n    // For variables with exactly one read, we originally tried a more aggressive (heuristic)\n    // inlining. However, this branch must only inline immutable, well\u2010defined variables.\n    // Otherwise (as in External Issue 1053) a variable like:\n    //   var x = u;\n    // where u is later modified, would be inlined unsafely.\n    if (isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n      Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);\n      if (canInline(declaration, init, reference)) {\n        inline(v, declaration, init, reference);\n        staleVars.add(v);\n      }\n    }\n    \n  } else if (declaration != init && refCount == 2) {\n    if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n      // When the only reference is the initialization, remove the assignment and\n      // the variable declaration.\n      Node value = init.getAssignedValue();\n      Preconditions.checkNotNull(value);\n      inlineWellDefinedVariable(v, value, referenceInfo.references);\n      staleVars.add(v);\n    }\n  }\n\n  // If this variable was not inlined normally, then check if we can\n  // inline an alias of it. (If the variable was inlined, then the\n  // reference information is out of sync. We're better off waiting for\n  // the next pass.)\n  if (!maybeModifiedArguments &&\n      !staleVars.contains(v) &&\n      referenceInfo.isWellDefined() &&\n      referenceInfo.isAssignedOnceInLifetime()) {\n    // Note: inlining based solely on being well\u2010defined and assigned\n    // only once is *NOT* correct in general. We relax the correctness requirement\n    // only if the variable is declared constant.\n    List<Reference> refs = referenceInfo.references;\n    for (int i = 1; i < refs.size(); i++) { // start from a read\n      Node nameNode = refs.get(i).getNode();\n      if (aliasCandidates.containsKey(nameNode)) {\n        AliasCandidate candidate = aliasCandidates.get(nameNode);\n        if (!staleVars.contains(candidate.alias) &&\n            !isVarInlineForbidden(candidate.alias)) {\n          Reference aliasInit = candidate.refInfo.getInitializingReference();\n          Node value = aliasInit.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          inlineWellDefinedVariable(candidate.alias,\n              value,\n              candidate.refInfo.references);\n          staleVars.add(candidate.alias);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}