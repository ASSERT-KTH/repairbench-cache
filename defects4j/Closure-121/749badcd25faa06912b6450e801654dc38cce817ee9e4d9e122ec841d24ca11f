{
    "generation": "private void inlineNonConstants(\n    Var v, ReferenceCollection referenceInfo,\n    boolean maybeModifiedArguments) {\n  int refCount = referenceInfo.references.size();\n  Reference declaration = referenceInfo.references.get(0);\n  Reference init = referenceInfo.getInitializingReference();\n  int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n  if (refCount > 1 &&\n      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n    // If the variable is referenced more than once, we can only inline it\n    // if it is immutable and its definition never comes after a read.\n    Node value;\n    if (init != null) {\n      value = init.getAssignedValue();\n    } else {\n      // Create a new node for a variable that is never explicitly initialized.\n      Node srcLocation = declaration.getNode();\n      value = NodeUtil.newUndefinedNode(srcLocation);\n    }\n    Preconditions.checkNotNull(value);\n    inlineWellDefinedVariable(v, value, referenceInfo.references);\n    staleVars.add(v);\n  } else if (refCount == firstRefAfterInit) {\n    // When the variable is read only once, try the more complex inlining heuristic.\n    Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);\n    if (canInline(declaration, init, reference)) {\n      inline(v, declaration, init, reference);\n      staleVars.add(v);\n    }\n  } else if (declaration != init && refCount == 2) {\n    // Only two refs: the declaration and the initialization.\n    // We only inline if the initializer is a pure (immutable) value.\n    if (isValidDeclaration(declaration) &&\n        isValidInitialization(init) &&\n        NodeUtil.isImmutableValue(init.getAssignedValue())) {\n      Node value = init.getAssignedValue();\n      Preconditions.checkNotNull(value);\n      inlineWellDefinedVariable(v, value, referenceInfo.references);\n      staleVars.add(v);\n    }\n  }\n\n  // If the variable was not inlined by the normal checks, see if we can inline\n  // an alias of it.  (If the variable was inlined already, its reference information\n  // may be out of sync, so we simply wait for the next pass.)\n  // Note: We only consider alias inlining if the variable is well defined and assigned\n  // only once.  This restriction is relaxed for variables declared constant.\n  if (!maybeModifiedArguments &&\n      !staleVars.contains(v) &&\n      referenceInfo.isWellDefined() &&\n      referenceInfo.isAssignedOnceInLifetime()) {\n    List<Reference> refs = referenceInfo.references;\n    for (int i = 1; i < refs.size(); i++) {\n      Node nameNode = refs.get(i).getNode();\n      if (aliasCandidates.containsKey(nameNode)) {\n        AliasCandidate candidate = aliasCandidates.get(nameNode);\n        // Only inline an alias if the candidate itself is not subject to multiple reassignments.\n        if (!staleVars.contains(candidate.alias) &&\n            !isVarInlineForbidden(candidate.alias) &&\n            candidate.refInfo.isAssignedOnceInLifetime()) {\n          Reference aliasInit = candidate.refInfo.getInitializingReference();\n          Node value = aliasInit.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          inlineWellDefinedVariable(candidate.alias,\n              value,\n              candidate.refInfo.references);\n          staleVars.add(candidate.alias);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}