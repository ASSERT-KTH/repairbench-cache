{
    "generation": "private void inlineNonConstants(\n    Var v, ReferenceCollection referenceInfo,\n    boolean maybeModifiedArguments) {\n  int refCount = referenceInfo.references.size();\n  Reference declaration = referenceInfo.references.get(0);\n  Reference init = referenceInfo.getInitializingReference();\n  int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n  if (refCount > 1 &&\n      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n    // if the variable is referenced more than once, we can only\n    // inline it if it's immutable and never defined before referenced.\n    Node value;\n    if (init != null) {\n      value = init.getAssignedValue();\n    } else {\n      // Create a new node for variable that is never initialized.\n      Node srcLocation = declaration.getNode();\n      value = NodeUtil.newUndefinedNode(srcLocation);\n    }\n    Preconditions.checkNotNull(value);\n    inlineWellDefinedVariable(v, value, referenceInfo.references);\n    staleVars.add(v);\n\n  } else if (refCount == firstRefAfterInit && init != null) {\n    // The variable likely only read once, try some more\n    // complex inlining heuristics, but only if the init value\n    // is a pure (immutable) literal/function/object.\n    Node value = init.getAssignedValue();\n    if (value != null && NodeUtil.isImmutableValue(value)) {\n      Reference reference = referenceInfo.references.get(\n          firstRefAfterInit - 1);\n      if (canInline(declaration, init, reference)) {\n        inline(v, declaration, init, reference);\n        staleVars.add(v);\n      }\n    }\n\n  } else if (declaration != init && refCount == 2) {\n    if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n      // The only reference is the initialization, remove the assignment and\n      // the variable declaration.\n      Node value = init.getAssignedValue();\n      Preconditions.checkNotNull(value);\n      inlineWellDefinedVariable(v, value, referenceInfo.references);\n      staleVars.add(v);\n    }\n  }\n\n  // If this variable was not inlined normally, check if we can\n  // inline an alias of it. (If the variable was inlined, then the\n  // reference data is out of sync, so wait for the next pass.)\n  // Inlining based solely on well-defined & single assignment is *NOT*\n  // correct unless the variable was declared @const.\n  JSDocInfo jsdoc = v.getJSDocInfo();\n  if (!maybeModifiedArguments &&\n      !staleVars.contains(v) &&\n      referenceInfo.isWellDefined() &&\n      referenceInfo.isAssignedOnceInLifetime() &&\n      jsdoc != null &&\n      jsdoc.isConstant()) {\n    List<Reference> refs = referenceInfo.references;\n    for (int i = 1; i < refs.size(); i++) {  // start from the first read\n      Node nameNode = refs.get(i).getNode();\n      if (aliasCandidates.containsKey(nameNode)) {\n        AliasCandidate candidate = aliasCandidates.get(nameNode);\n        if (!staleVars.contains(candidate.alias) &&\n            !isVarInlineForbidden(candidate.alias)) {\n          Reference aliasInit =\n              candidate.refInfo.getInitializingReference();\n          Node aliasValue = aliasInit.getAssignedValue();\n          Preconditions.checkNotNull(aliasValue);\n          inlineWellDefinedVariable(\n              candidate.alias, aliasValue,\n              candidate.refInfo.references);\n          staleVars.add(candidate.alias);\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}