{
    "generation": "  private void inlineNonConstants(\n      Var v, ReferenceCollection referenceInfo,\n      boolean maybeModifiedArguments) {\n    int refCount = referenceInfo.references.size();\n    Reference declaration = referenceInfo.references.get(0);\n    Reference init = referenceInfo.getInitializingReference();\n    int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n    if (refCount > 1 &&\n        isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n      // Determine the value to inline\n      Node value;\n      if (init != null) {\n        value = init.getAssignedValue();\n      } else {\n        // Handle case where variable is not initialized\n        Node srcLocation = declaration.getNode();\n        value = NodeUtil.newUndefinedNode(srcLocation);\n      }\n      Preconditions.checkNotNull(value);\n      inlineWellDefinedVariable(v, value, referenceInfo.references);\n      staleVars.add(v);\n    } else if (refCount == firstRefAfterInit) {\n      if (refCount > 0) { // Ensure we don't access an empty list\n        Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);\n        if (canInline(declaration, init, reference)) {\n          inline(v, declaration, init, reference);\n          staleVars.add(v);\n        }\n      }\n    } else if (refCount == 2 && declaration != init) {\n      if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n        Node value = init.getAssignedValue();\n        Preconditions.checkNotNull(value);\n        inlineWellDefinedVariable(v, value, referenceInfo.references);\n        staleVars.add(v);\n      }\n    }\n\n    // Additional checks for inlining based on well-defined conditions\n    if (!maybeModifiedArguments &&\n        !staleVars.contains(v) &&\n        referenceInfo.isWellDefined() &&\n        referenceInfo.isAssignedOnceInLifetime()) {\n      List<Reference> refs = referenceInfo.references;\n      for (int i = 1; i < refs.size(); i++) { // Start from the first read\n        Node nameNode = refs.get(i).getNode();\n        if (aliasCandidates.containsKey(nameNode)) {\n          AliasCandidate candidate = aliasCandidates.get(nameNode);\n          if (!staleVars.contains(candidate.alias) &&\n              !isVarInlineForbidden(candidate.alias)) {\n            Reference aliasInit = candidate.refInfo.getInitializingReference();\n            Node value = aliasInit != null ? aliasInit.getAssignedValue() : null;\n            Preconditions.checkNotNull(value);\n            inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);\n            staleVars.add(candidate.alias);\n          }\n        }\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}