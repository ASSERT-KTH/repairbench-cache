{
    "generation": "    private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo,\n        boolean maybeModifiedArguments) {\n      int refCount = referenceInfo.references.size();\n      Reference declaration = referenceInfo.references.get(0);\n      Reference init = referenceInfo.getInitializingReference();\n      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n      if (refCount > 1 &&\n          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n        // if the variable is referenced more than once, we can only\n        // inline it if it's immutable and never defined before referenced.\n        Node value;\n        if (init != null) {\n          value = init.getAssignedValue();\n        } else {\n          // Create a new node for variable that is never initialized.\n          Node srcLocation = declaration.getNode();\n          value = NodeUtil.newUndefinedNode(srcLocation);\n        }\n        Preconditions.checkNotNull(value);\n        inlineWellDefinedVariable(v, value, referenceInfo.references);\n        staleVars.add(v);\n      } else if (refCount == firstRefAfterInit) {\n        // The variable likely only read once, try some more\n        // complex inlining heuristics.\n        Reference reference = referenceInfo.references.get(\n            firstRefAfterInit - 1);\n        // Fix: Add a check for isWellDefined(). If the variable's value might be\n        // modified indirectly (like depending on a global modified by a function\n        // call) between init and reference, isWellDefined() should be false,\n        // preventing the unsafe inline. This relies on the ReferenceCollection\n        // analysis correctly identifying such cases.\n        if (referenceInfo.isWellDefined() && canInline(declaration, init, reference)) {\n          inline(v, declaration, init, reference);\n          staleVars.add(v);\n        }\n      } else if (declaration != init && refCount == 2) {\n        // This case should be impossible if init != null, because\n        // there must be a reference after the initialization for init != decl.\n        // This indicates that the variable is initialized but never used.\n        Preconditions.checkState(init != null);\n        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n          // The only reference is the initialization, remove the assignment and\n          // the variable declaration.\n          Node value = init.getAssignedValue();\n          // The value might be null if the variable is never read.\n          if (value != null && !NodeUtil.mayHaveSideEffects(value, compiler)) {\n             Node varNode = declaration.getNode().getParent();\n             Node parent = varNode.getParent();\n             NodeUtil.removeChild(parent, varNode);\n             compiler.reportCodeChange();\n             staleVars.add(v);\n          }\n        }\n      }\n\n\n      // If this variable was not inlined normally, check if we can\n      // inline an alias of it. (If the variable was inlined, then the\n      // reference data is out of sync. We're better off just waiting for\n      // the next pass.)\n      if (!maybeModifiedArguments &&\n          !staleVars.contains(v) &&\n          referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime()) {\n          // Inlining the variable based solely on well-defined and assigned\n          // once is *NOT* correct. We relax the correctness requirement if\n          // the variable is declared constant.\n        List<Reference> refs = referenceInfo.references;\n        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n          Node nameNode = refs.get(i).getNode();\n          if (aliasCandidates.containsKey(nameNode)) {\n            AliasCandidate candidate = aliasCandidates.get(nameNode);\n            if (!staleVars.contains(candidate.alias) &&\n                !isVarInlineForbidden(candidate.alias)) {\n              Reference aliasInit;\n              aliasInit = candidate.refInfo.getInitializingReference();\n              // candidate.refInfo might be null if the alias is never assigned.\n              // This should not happen if aliasCandidates is built correctly.\n              Preconditions.checkNotNull(aliasInit, \"Alias must be initialized.\");\n              Node value = aliasInit.getAssignedValue();\n              Preconditions.checkNotNull(value);\n              // Check if the alias itself is well-defined before inlining.\n              if (candidate.refInfo.isWellDefined()) {\n                inlineWellDefinedVariable(candidate.alias,\n                    value,\n                    candidate.refInfo.references);\n                staleVars.add(candidate.alias);\n              }\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}