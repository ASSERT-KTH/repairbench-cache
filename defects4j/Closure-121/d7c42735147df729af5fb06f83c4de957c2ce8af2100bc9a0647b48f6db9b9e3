{
    "generation": "private void inlineNonConstants(\n    Var v, ReferenceCollection referenceInfo,\n    boolean maybeModifiedArguments) {\n  int refCount = referenceInfo.references.size();\n  Reference declaration = referenceInfo.references.get(0);\n  Reference init = referenceInfo.getInitializingReference();\n  int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n  // Only inline variables with an initializer that is \u201cimmutable\u201d\n  // so that re\u2010evaluating it later won\u2019t change program behavior.\n  if (refCount > 1 &&\n      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n    // If the variable is referenced more than once, we can only inline\n    // it if it's immutable and never redefined before each reference.\n    Node value;\n    if (init != null) {\n      value = init.getAssignedValue();\n    } else {\n      Node srcLocation = declaration.getNode();\n      value = NodeUtil.newUndefinedNode(srcLocation);\n    }\n    Preconditions.checkNotNull(value);\n    inlineWellDefinedVariable(v, value, referenceInfo.references);\n    staleVars.add(v);\n  } else if (refCount == firstRefAfterInit) {\n    // The variable is likely read only once; try more refined inlining.\n    Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);\n    // Do not inline if the initializer is not a compile\u2010time constant.\n    if (init != null &&\n        NodeUtil.isImmutableValue(init.getAssignedValue()) &&\n        canInline(declaration, init, reference)) {\n      inline(v, declaration, init, reference);\n      staleVars.add(v);\n    }\n  } else if (declaration != init && refCount == 2) {\n    // When the only reference is the initialization, we can remove\n    // the assignment and the variable declaration.\n    if (init != null &&\n        NodeUtil.isImmutableValue(init.getAssignedValue()) &&\n        isValidDeclaration(declaration) &&\n        isValidInitialization(init)) {\n      Node value = init.getAssignedValue();\n      Preconditions.checkNotNull(value);\n      inlineWellDefinedVariable(v, value, referenceInfo.references);\n      staleVars.add(v);\n    }\n  }\n\n  // If the variable was not inlined above, check if an alias can be inlined.\n  // (If the variable was inlined, its reference data has been disrupted,\n  // so we defer alias inlining until a later pass.)\n  if (!maybeModifiedArguments &&\n      !staleVars.contains(v) &&\n      referenceInfo.isWellDefined() &&\n      referenceInfo.isAssignedOnceInLifetime()) {\n    // Inlining based solely on being well defined and assigned once is\n    // not safe unless the initializer is immutable.\n    List<Reference> refs = referenceInfo.references;\n    for (int i = 1; i < refs.size(); i++) {\n      Node nameNode = refs.get(i).getNode();\n      if (aliasCandidates.containsKey(nameNode)) {\n        AliasCandidate candidate = aliasCandidates.get(nameNode);\n        if (!staleVars.contains(candidate.alias) &&\n            !isVarInlineForbidden(candidate.alias)) {\n          Reference aliasInit = candidate.refInfo.getInitializingReference();\n          Node value = aliasInit.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          if (NodeUtil.isImmutableValue(value)) {\n            inlineWellDefinedVariable(candidate.alias,\n                value,\n                candidate.refInfo.references);\n            staleVars.add(candidate.alias);\n          }\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}