{
    "generation": "    private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo,\n        boolean maybeModifiedArguments) {\n      int refCount = referenceInfo.references.size();\n      Reference declaration = referenceInfo.references.get(0);\n      Reference init = referenceInfo.getInitializingReference();\n      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n      if (refCount > 1 &&\n          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n        // if the variable is referenced more than once, we can only\n        // inline it if it's immutable and never defined before referenced.\n        Node value;\n        if (init != null) {\n          value = init.getAssignedValue();\n        } else {\n          // Create a new node for variable that is never initialized.\n          Node srcLocation = declaration.getNode();\n          value = NodeUtil.newUndefinedNode(srcLocation);\n        }\n        Preconditions.checkNotNull(value);\n        inlineWellDefinedVariable(v, value, referenceInfo.references);\n        staleVars.add(v);\n      } else if (refCount == firstRefAfterInit) {\n        // The variable likely only read once, try some more\n        // complex inlining heuristics.\n        Reference reference = referenceInfo.references.get(\n            firstRefAfterInit - 1);\n\n        // Fix for testExternalIssue1053:\n        // When a variable `v` (e.g., `x` in `var x = u;`) is assigned the value\n        // of another variable `u`, and `u` is mutable (not a constant),\n        // inlining `x` with the *current* value of `u` can be incorrect if `u`\n        // changes between `x`'s initialization and `x`'s usage.\n        // The `canInline` function might not fully capture this side-effect\n        // on the aliased variable (`u`).\n        // To prevent this specific bug, we add a check to avoid inlining `v`\n        // if its assigned value is a reference to a mutable variable.\n        Node assignedValue = init.getAssignedValue();\n        boolean valueIsMutableVarReference = false;\n        if (assignedValue != null && assignedValue.isName()) {\n            Var assignedVar = assignedValue.getScope().getVar(assignedValue.getString());\n            // If the assigned value refers to a variable, and that variable is not 'const',\n            // it's considered a mutable variable reference.\n            if (assignedVar != null && !assignedVar.isConst()) {\n                valueIsMutableVarReference = true;\n            }\n        }\n\n        // Only proceed with inlining if the assigned value is NOT a reference\n        // to a mutable variable, or if the `canInline` method explicitly allows it.\n        // In the failing test case, `x = u`, `u` is a mutable variable, so `valueIsMutableVarReference`\n        // becomes true, preventing the incorrect inlining.\n        if (valueIsMutableVarReference) {\n            // Do not inline if the assigned value is a mutable variable.\n            // This prevents issues where 'v' captures a point-in-time value of\n            // 'u', but 'u' might change later.\n        } else if (canInline(declaration, init, reference)) {\n          inline(v, declaration, init, reference);\n          staleVars.add(v);\n        }\n      } else if (declaration != init && refCount == 2) {\n        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n          // The only reference is the initialization, remove the assignment and\n          // the variable declaration.\n          Node value = init.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          inlineWellDefinedVariable(v, value, referenceInfo.references);\n          staleVars.add(v);\n        }\n      }\n\n      // If this variable was not inlined normally, check if we can\n      // inline an alias of it. (If the variable was inlined, then the\n      // reference data is out of sync. We're better off just waiting for\n      // the next pass.)\n      if (!maybeModifiedArguments &&\n          !staleVars.contains(v) &&\n          referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime()) {\n          // Inlining the variable based solely on well-defined and assigned\n          // once is *NOT* correct. We relax the correctness requirement if\n          // the variable is declared constant.\n        List<Reference> refs = referenceInfo.references;\n        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n          Node nameNode = refs.get(i).getNode();\n          if (aliasCandidates.containsKey(nameNode)) {\n            AliasCandidate candidate = aliasCandidates.get(nameNode);\n            if (!staleVars.contains(candidate.alias) &&\n                !isVarInlineForbidden(candidate.alias)) {\n              Reference aliasInit;\n              aliasInit = candidate.refInfo.getInitializingReference();\n              Node value = aliasInit.getAssignedValue();\n              Preconditions.checkNotNull(value);\n              inlineWellDefinedVariable(candidate.alias,\n                  value,\n                  candidate.refInfo.references);\n              staleVars.add(candidate.alias);\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}