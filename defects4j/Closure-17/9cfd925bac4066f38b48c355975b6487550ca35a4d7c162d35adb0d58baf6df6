{
    "generation": "    /**\n     * Look for a type declaration on a property assignment\n     * (in an ASSIGN or an object literal key).\n     *\n     * @param info The doc info for this property.\n     * @param lValue The l-value node.\n     * @param rValue The node that {@code n} is being initialized to,\n     *     or {@code null} if this is a stub declaration.\n     */\n    private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue) {\n      if (info != null) {\n        // High priority: explicit @type annotation\n        if (info.hasType()) {\n          return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n        }\n        // Next priority: JSDoc for function types (@constructor, @interface, @return)\n        // These should always take precedence over inferred function literal types.\n        else if (info.isConstructor() || info.isInterface() || info.hasReturnType()) {\n          return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);\n        }\n        // Next priority: @enum\n        else if (info.hasEnumParameterType()) {\n          if (rValue != null && rValue.isObjectLit()) {\n            return rValue.getJSType();\n          } else {\n            return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);\n          }\n        }\n        // Next priority: @const\n        else if (info.isConstant()) {\n          // Check if this is constant, and if it has a known type.\n          JSType knownType = null;\n          if (rValue != null) {\n            if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n              // If rValue has a type-cast, we use the type in the type-cast.\n              // If rValue's type was already computed during scope creation,\n              // then we can safely use that.\n              return rValue.getJSType();\n            } else if (rValue.isOr()) {\n              // Check for a very specific JS idiom:\n              // var x = x || TYPE;\n              // This is used by Closure's base namespace for esoteric\n              // reasons.\n              Node firstClause = rValue.getFirstChild();\n              Node secondClause = firstClause.getNext();\n              boolean namesMatch = firstClause.isName()\n                  && lValue.isName()\n                  && firstClause.getString().equals(lValue.getString());\n              if (namesMatch && secondClause.getJSType() != null\n                  && !secondClause.getJSType().isUnknownType()) {\n                return secondClause.getJSType();\n              }\n            }\n          }\n        }\n      }\n\n      // Lower priority: If no specific JSDoc type was found, but rValue is a function literal\n      // and shouldUseFunctionLiteralType allows, use its inferred type.\n      // This handles cases like `var x = function() {};` with no specific JSDoc.\n      if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        return rValue.getJSType();\n      }\n\n      // Fallback: Try to get type from annotation (e.g. if info is null or no other match)\n      // This is generally the last resort for type inference if all else fails,\n      // or if the info object was derived from a context that implies an annotation.\n      return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}