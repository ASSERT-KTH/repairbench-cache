{
    "generation": "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n    Node lValue, @Nullable Node rValue) {\n  // For constants with an initializer, if we can infer a type from the initializer,\n  // then use that type. In particular, if the initializer is a cast then \u201cunwrap\u201d\n  // the cast so that we pick up the type information of its operand.\n  if (info != null && info.isConstant() && rValue != null) {\n    if (rValue.isCast()) {\n      rValue = rValue.getFirstChild();\n    }\n    if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n      return rValue.getJSType();\n    } else if (rValue.isOr()) {\n      // Handle the idiom: var x = x || TYPE;\n      Node firstClause = rValue.getFirstChild();\n      Node secondClause = firstClause.getNext();\n      boolean namesMatch = firstClause.isName() && lValue.isName()\n          && firstClause.getString().equals(lValue.getString());\n      if (namesMatch && secondClause.getJSType() != null\n          && !secondClause.getJSType().isUnknownType()) {\n        return secondClause.getJSType();\n      }\n    }\n  }\n\n  // Regular annotated declarations.\n  if (info != null && info.hasType()) {\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n  } else if (rValue != null && rValue.isFunction() &&\n      shouldUseFunctionLiteralType(\n          JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n  } else if (info != null) {\n    if (info.hasEnumParameterType()) {\n      if (rValue != null && rValue.isObjectLit()) {\n        return rValue.getJSType();\n      } else {\n        return createEnumTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n      }\n    } else if (info.isConstructor() || info.isInterface()) {\n      return createFunctionTypeFromNodes(rValue, lValue.getQualifiedName(), info, lValue);\n    }\n  }\n\n  return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}