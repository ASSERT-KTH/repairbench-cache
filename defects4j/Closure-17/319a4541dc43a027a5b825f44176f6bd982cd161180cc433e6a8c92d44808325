{
    "generation": "    /**\n     * Look for a type declaration on a property assignment\n     * (in an ASSIGN or an object literal key).\n     *\n     * @param info The doc info for this property.\n     * @param lValue The l-value node.\n     * @param rValue The node that {@code n} is being initialized to,\n     *     or {@code null} if this is a stub declaration.\n     */\n    private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue) {\n      // Stores the result of getDeclaredTypeInAnnotation if called.\n      JSType declaredTypeFromAnnotation = null;\n\n      // 1. Try to get the type from an explicit JSDoc @type annotation.\n      if (info != null && info.hasType()) {\n        declaredTypeFromAnnotation = getDeclaredTypeInAnnotation(sourceName, lValue, info);\n        // If the annotation provided a specific, known type, use it directly.\n        if (declaredTypeFromAnnotation != null && !declaredTypeFromAnnotation.isUnknownType()) {\n          return declaredTypeFromAnnotation;\n        }\n        // If declaredTypeFromAnnotation is null or UnknownType, we continue\n        // to other checks, potentially inferring from the rValue if it's a constant.\n      }\n\n      // 2. Handle function literals as rValue, with optional JSDoc info.\n      // This check is placed after the explicit @type annotation,\n      // consistent with a common interpretation of precedence.\n      if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        return rValue.getJSType();\n      }\n\n      // 3. Handle other JSDoc-specific types (Enum, Constructor, Interface)\n      // and constant inference as a fallback if no explicit @type yielded a known type.\n      if (info != null) {\n        if (info.hasEnumParameterType()) {\n          if (rValue != null && rValue.isObjectLit()) {\n            return rValue.getJSType();\n          } else {\n            return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);\n          }\n        } else if (info.isConstructor() || info.isInterface()) {\n          return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);\n        } else if (info.isConstant()) {\n          // This branch handles constants without an explicit @type,\n          // or where the explicit @type annotation was processed but\n          // resulted in an UnknownType (as handled above). This is a fallback\n          // to infer from the rValue's computed type.\n          if (rValue != null) {\n            // The 'knownType' variable was unused, removed.\n            if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n              return rValue.getJSType();\n            } else if (rValue.isOr()) {\n              // Check for a very specific JS idiom: var x = x || TYPE;\n              Node firstClause = rValue.getFirstChild();\n              Node secondClause = firstClause.getNext();\n              boolean namesMatch = firstClause.isName()\n                  && lValue.isName()\n                  && firstClause.getString().equals(lValue.getString());\n              if (namesMatch && secondClause.getJSType() != null\n                  && !secondClause.getJSType().isUnknownType()) {\n                return secondClause.getJSType();\n              }\n            }\n          }\n        }\n      }\n\n      // 4. Final fallback.\n      // If `declaredTypeFromAnnotation` was computed (meaning info.hasType() was true)\n      // but it was UnknownType, we return that UnknownType.\n      // Otherwise, call getDeclaredTypeInAnnotation again (e.g., if info was null,\n      // or no specific JSDoc type was handled and no rValue inference occurred).\n      if (declaredTypeFromAnnotation != null) {\n        return declaredTypeFromAnnotation;\n      }\n      return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}