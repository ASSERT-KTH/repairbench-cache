{
    "generation": "/**\n * Look for a type declaration on a property assignment\n * (in an ASSIGN or an object literal key).\n *\n * @param info The doc info for this property.\n * @param lValue The l-value node.\n * @param rValue The node that {@code n} is being initialized to,\n *     or {@code null} if this is a stub declaration.\n */\nprivate JSType getDeclaredType(String sourceName, JSDocInfo info,\n    Node lValue, @Nullable Node rValue) {\n  // 1) If the declaration itself has a @type, use that.\n  if (info != null && info.hasType()) {\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n  }\n\n  // 2) Otherwise, if the initializer has an inline @type (a type-cast),\n  //    use that.\n  if (rValue != null) {\n    // The JSDoc on a cast node holds the inline @type.\n    JSDocInfo castInfo = rValue.getJSDocInfo();\n    if (castInfo != null && castInfo.hasType()) {\n      return getDeclaredTypeInAnnotation(sourceName, lValue, castInfo);\n    }\n  }\n\n  // 3) Otherwise, if this is a function literal and we should use its\n  //    literal function type, pick that up.\n  if (rValue != null && rValue.isFunction() &&\n      shouldUseFunctionLiteralType(\n          JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n  }\n\n  // 4) Otherwise, handle enums, constructors, interfaces, constants, etc.\n  if (info != null) {\n    if (info.hasEnumParameterType()) {\n      if (rValue != null && rValue.isObjectLit()) {\n        return rValue.getJSType();\n      } else {\n        return createEnumTypeFromNodes(\n            rValue, lValue.getQualifiedName(), info, lValue);\n      }\n    } else if (info.isConstructor() || info.isInterface()) {\n      return createFunctionTypeFromNodes(\n          rValue, lValue.getQualifiedName(), info, lValue);\n    } else {\n      // Check if this is constant, and if it has a known type.\n      if (info.isConstant() && rValue != null) {\n        JSType rvType = rValue.getJSType();\n        if (rvType != null && !rvType.isUnknownType()) {\n          // If rValue has a type-cast, we use the type in the type-cast.\n          // If rValue's type was already computed during scope creation,\n          // then we can safely use that.\n          return rvType;\n        } else if (rValue.isOr()) {\n          // Check for a very specific JS idiom:\n          // var x = x || TYPE;\n          // This is used by Closure's base namespace for esoteric\n          // reasons.\n          Node firstClause = rValue.getFirstChild();\n          Node secondClause = firstClause.getNext();\n          boolean namesMatch = firstClause.isName()\n              && lValue.isName()\n              && firstClause.getString().equals(lValue.getString());\n          if (namesMatch) {\n            JSType altType = secondClause.getJSType();\n            if (altType != null && !altType.isUnknownType()) {\n              return altType;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // 5) Finally, fall back (this will produce UNKNOWN if there's no @type).\n  return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}