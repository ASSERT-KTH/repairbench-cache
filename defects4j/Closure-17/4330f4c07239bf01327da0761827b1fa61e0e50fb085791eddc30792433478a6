{
    "generation": "    /**\n     * Look for a type declaration on a property assignment\n     * (in an ASSIGN or an object literal key).\n     *\n     * @param info The doc info for this property.\n     * @param lValue The l-value node.\n     * @param rValue The node that {@code n} is being initialized to,\n     *     or {@code null} if this is a stub declaration.\n     */\n    private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue) {\n      // If the jsdoc declares a type, use that.\n      if (info != null && info.hasType()) {\n        return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n      }\n\n      // Functions are special, check them first.\n      if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        return rValue.getJSType();\n      }\n\n      // Check for other jsdoc annotations.\n      if (info != null) {\n        if (info.hasEnumParameterType()) {\n          if (rValue != null && rValue.isObjectLit()) {\n            // If the enum is initialized with an object literal, we infer\n            // the type from the properties of the object literal.\n            return rValue.getJSType();\n          } else {\n            // Otherwise, the enum type is resolved during scope creation.\n            return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);\n          }\n        } else if (info.isConstructor() || info.isInterface()) {\n          // If this is a function prototype assignment, type information\n          // is specified in the jsdoc comment. We have a function type\n          // with the corresponding instance type.\n          return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);\n        } else if (info.isConstant()) {\n          // Check if this is constant, and if it has a known type.\n          if (rValue != null) {\n            JSType rValueType = rValue.getJSType();\n            if (rValueType != null && !rValueType.isUnknownType()) {\n              // If rValue has a type-cast, we use the type in the type-cast.\n              // If rValue's type was already computed during scope creation,\n              // then we can safely use that.\n\n              // For @const declarations, the assigned value is guaranteed\n              // not null *if* the rValue expression itself isn't the null literal.\n              // In such cases, restrict the type to non-nullable.\n              // This handles `/** @const */ var X = /** @type {T} */ ({...})` by making the type !T.\n              // It also handles `/** @const */ var Y = {};` making the type {!Object}.\n              if (!rValue.isNull()) {\n                  return rValueType.restrictByNotNullOrUndefined();\n              } else {\n                  // If rValue is the literal 'null', keep the original type (which should be NullType)\n                  return rValueType;\n              }\n            } else if (rValue.isOr()) {\n              // Check for a very specific JS idiom:\n              // var x = x || TYPE;\n              // This is used by Closure's base namespace for esoteric\n              // reasons.\n              Node firstClause = rValue.getFirstChild();\n              Node secondClause = firstClause.getNext();\n              // Check if the first clause refers to the same variable being assigned.\n              boolean namesMatch = firstClause.isQualifiedName()\n                  && lValue.isQualifiedName()\n                  && firstClause.matchesQualifiedName(lValue);\n              if (namesMatch && secondClause.getJSType() != null\n                  && !secondClause.getJSType().isUnknownType()) {\n                // Type is determined by the second clause (the default value).\n                return secondClause.getJSType();\n              }\n            }\n          }\n          // If rValue is null or its type is unknown, fall through\n          // to the general case.\n        }\n      }\n\n      // Fallback case. If we have jsdoc, we use that.\n      // Otherwise, rValue may already have a type annotated on it\n      // (in an assignment, call, etc).\n      return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}