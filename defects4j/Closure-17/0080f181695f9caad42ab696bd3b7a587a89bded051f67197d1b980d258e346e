{
    "generation": "    /**\n     * Look for a type declaration on a property assignment\n     * (in an ASSIGN or an object literal key).\n     *\n     * @param info The doc info for this property.\n     * @param lValue The l-value node.\n     * @param rValue The node that {@code n} is being initialized to,\n     *     or {@code null} if this is a stub declaration.\n     */\n    private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue) {\n      // If the l-value has an explicit type annotation, use that.\n      if (info != null && info.hasType()) {\n        return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n      }\n\n      // If the r-value is a function literal, use its type.\n      if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        return rValue.getJSType();\n      }\n\n      if (info != null) {\n        // Check for enum types.\n        if (info.hasEnumParameterType()) {\n          if (rValue != null && rValue.isObjectLit()) {\n            // If rValue is an object literal, this is an enum definition.\n            // Use the object literal's type.\n            return rValue.getJSType();\n          } else {\n            // If rValue is not an object literal, we might be looking at an\n            // assignment of an enum type to a variable. e.g.,\n            // /** @enum {string} */ var MyEnum = OtherEnum;\n            // In this case, use the declared enum type, not the type of the rValue.\n            return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);\n          }\n        }\n\n        // Check for constructor/interface types.\n        if (info.isConstructor() || info.isInterface()) {\n          return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);\n        }\n\n        // Check if this is constant.\n        if (info.isConstant()) {\n           // For constants, the type annotation on the value is\n           // potentially significant.\n           // If rValue has a type-cast, we use the type in the type-cast.\n           // It's stronger than the inferred type.\n           // NOTE(nicksantos): This doesn't handle nested casts properly.\n           // Need to fix this later.\n\n           // Only do this if the constant does not have an explicit type\n           // annotation. The explicit annotation takes precedence.\n           if (rValue != null && rValue.isCast() && rValue.getJSDocInfo() != null) {\n             JSDocInfo castInfo = rValue.getJSDocInfo();\n             if (castInfo.hasType()) {\n               // Use the type specified in the cast. Pass the CAST node as the node\n               // associated with the type, so that it can be used for template resolution.\n               return getDeclaredTypeInAnnotation(sourceName, rValue, castInfo);\n             }\n             // If the castInfo has no type (e.g. /** @type {?} */), fall through\n             // and attempt to use the inferred type of the casted expression.\n           }\n\n          // If the constant is not initialized, or initialized to null, we do not\n          // infer the type.\n          if (rValue != null) {\n            JSType rValueType = rValue.getJSType();\n            // If rValue has a type-cast, we use the type in the type-cast.\n            // If rValue's type was already computed during scope creation,\n            // then we can safely use that.\n            if (rValueType != null && !rValueType.isUnknownType()) {\n              return rValueType;\n            } else if (rValue.isOr()) {\n              // Check for a very specific JS idiom:\n              // var x = x || TYPE;\n              // This is used by Closure's base namespace for esoteric\n              // reasons.\n              Node firstClause = rValue.getFirstChild();\n              Node secondClause = firstClause.getNext();\n              boolean namesMatch = firstClause.isName()\n                  && lValue.isName()\n                  && firstClause.getString().equals(lValue.getString());\n              if (namesMatch) {\n                JSType secondClauseType = secondClause.getJSType();\n                if (secondClauseType != null && !secondClauseType.isUnknownType()) {\n                  return secondClauseType;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // If we couldn't determine the type from the above checks, fall back\n      // to using the l-value's JSDoc info (or lack thereof). This handles function stubs,\n      // variables without initializers, and cases where the r-value type is unknown.\n      return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}