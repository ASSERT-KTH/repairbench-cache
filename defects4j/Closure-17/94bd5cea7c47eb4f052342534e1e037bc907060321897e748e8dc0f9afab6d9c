{
    "generation": "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n    Node lValue, @Nullable Node rValue) {\n  if (info != null && info.hasType()) {\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n  } else if (rValue != null && rValue.isFunction() &&\n      shouldUseFunctionLiteralType(\n          JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n  } else if (info != null) {\n    if (info.hasEnumParameterType()) {\n      if (rValue != null && rValue.isObjectLit()) {\n        return rValue.getJSType();\n      } else {\n        return createEnumTypeFromNodes(\n            rValue, lValue.getQualifiedName(), info, lValue);\n      }\n    } else if (info.isConstructor() || info.isInterface()) {\n      return createFunctionTypeFromNodes(\n          rValue, lValue.getQualifiedName(), info, lValue);\n    } else {\n      // Check if this is constant, and if it has a known type.\n      if (info.isConstant()) {\n        if (rValue != null) {\n          // If rValue itself has a @type cast, use that annotated type.\n          JSDocInfo rvInfo = rValue.getJSDocInfo();\n          if (rvInfo != null && rvInfo.hasType()) {\n            return getDeclaredTypeInAnnotation(sourceName, lValue, rvInfo);\n          }\n          // Otherwise if rValue already has a computed non-unknown JSType, use it.\n          JSType rType = rValue.getJSType();\n          if (rType != null && !rType.isUnknownType()) {\n            return rType;\n          } else if (rValue.isOr()) {\n            // Check for the \"var x = x || TYPE\" idiom.\n            Node first = rValue.getFirstChild();\n            Node second = first.getNext();\n            boolean namesMatch = first.isName()\n                && lValue.isName()\n                && first.getString().equals(lValue.getString());\n            if (namesMatch && second.getJSType() != null\n                && !second.getJSType().isUnknownType()) {\n              return second.getJSType();\n            }\n          }\n        }\n      }\n    }\n  }\n  // Fallback to any @type annotation on the LHS.\n  return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}