{
    "generation": "    /**\n     * Look for a type declaration on a property assignment\n     * (in an ASSIGN or an object literal key).\n     *\n     * @param info The doc info for this property.\n     * @param lValue The l-value node.\n     * @param rValue The node that {@code n} is being initialized to,\n     *     or {@code null} if this is a stub declaration.\n     */\n    private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue) {\n      JSType resultType = null;\n\n      if (info != null && info.hasType()) {\n        resultType = getDeclaredTypeInAnnotation(sourceName, lValue, info);\n      } else if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        resultType = rValue.getJSType();\n      } else if (info != null) {\n        if (info.hasEnumParameterType()) {\n          if (rValue != null && rValue.isObjectLit()) {\n            resultType = rValue.getJSType();\n          } else {\n            resultType = createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);\n          }\n        } else if (info.isConstructor() || info.isInterface()) {\n          resultType = createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);\n        } else {\n          // Check if this is constant, and if it has a known type.\n          if (info.isConstant()) {\n            if (rValue != null) {\n              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n                // If rValue has a type-cast, we use the type in the type-cast.\n                // If rValue's type was already computed during scope creation,\n                // then we can safely use that.\n                resultType = rValue.getJSType();\n              } else if (rValue.isOr()) {\n                // Check for a very specific JS idiom:\n                // var x = x || TYPE;\n                // This is used by Closure's base namespace for esoteric\n                // reasons.\n                Node firstClause = rValue.getFirstChild();\n                Node secondClause = firstClause.getNext();\n                boolean namesMatch = firstClause.isName()\n                    && lValue.isName()\n                    && firstClause.getString().equals(lValue.getString());\n                if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType()) {\n                  resultType = secondClause.getJSType();\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // If no specific type was determined by the above branches,\n      // fallback to the declared type in annotation or a default.\n      if (resultType == null) {\n        resultType = getDeclaredTypeInAnnotation(sourceName, lValue, info);\n      }\n\n      // For @const variables that are initialized with a non-null value,\n      // ensure the declared type is non-nullable.\n      // This addresses issues where the type might become nullable (e.g., from an annotation)\n      // but the initializer clearly makes it non-null.\n      if (info != null && info.isConstant() && rValue != null && resultType.isNullable()) {\n        resultType = resultType.asNonNullableType();\n      }\n\n      return resultType;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}