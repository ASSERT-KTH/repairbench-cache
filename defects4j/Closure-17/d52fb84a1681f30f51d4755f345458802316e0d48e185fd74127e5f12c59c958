{
    "generation": "    private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue) {\n      if (info != null && info.hasType()) {\n        return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n      }\n      if (rValue != null) {\n        if (rValue.isFunction() &&\n            shouldUseFunctionLiteralType(\n                JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n          return rValue.getJSType();\n        }\n        if (rValue.isObjectLit() && info != null && info.hasEnumParameterType()) {\n          return rValue.getJSType();\n        }\n      }\n      if (info != null) {\n        if (info.isConstructor() || info.isInterface()) {\n          return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);\n        } else if (info.isConstant()) {\n          if (rValue != null) {\n            JSType rValueType = rValue.getJSType();\n            if (rValueType != null && !rValueType.isUnknownType()) {\n              if (rValue.getJSType().isCast()) {\n                return rValue.getJSType();\n              }\n              if (rValue.isOr()) {\n                Node firstClause = rValue.getFirstChild();\n                Node secondClause = firstClause.getNext();\n                if (firstClause.isName() && lValue.isName() &&\n                    firstClause.getString().equals(lValue.getString())) {\n                  JSType secondClauseType = secondClause.getJSType();\n                  if (secondClauseType != null && !secondClauseType.isUnknownType()) {\n                    return secondClauseType;\n                  }\n                }\n              }\n              return rValueType;\n            }\n          }\n        }\n      }\n      return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}