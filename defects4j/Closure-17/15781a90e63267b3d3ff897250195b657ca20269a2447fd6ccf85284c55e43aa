{
    "generation": "/**\n * Look for a type declaration on a property assignment\n * (in an ASSIGN or an object literal key).\n *\n * @param info The doc info for this property.\n * @param lValue The l-value node.\n * @param rValue The node that {@code n} is being initialized to,\n *     or {@code null} if this is a stub declaration.\n */\nprivate JSType getDeclaredType(String sourceName, JSDocInfo info,\n    Node lValue, @Nullable Node rValue) {\n  // 1) If the l-value itself has an explicit @type, use it.\n  if (info != null && info.hasType()) {\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n  }\n\n  // 2) Otherwise, if the right-hand side has an inline @type cast, use that.\n  if (rValue != null) {\n    JSDocInfo rvInfo = rValue.getJSDocInfo();\n    if (rvInfo != null && rvInfo.hasType()) {\n      return getDeclaredTypeInAnnotation(sourceName, lValue, rvInfo);\n    }\n  }\n\n  // 3) If it's a function literal and we are allowed to use its literal type,\n  //    do so.\n  if (rValue != null && rValue.isFunction()\n      && shouldUseFunctionLiteralType(\n          JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n  }\n\n  // 4) Otherwise fall back to handling enums, ctors, interfaces, or consts.\n  if (info != null) {\n    if (info.hasEnumParameterType()) {\n      if (rValue != null && rValue.isObjectLit()) {\n        return rValue.getJSType();\n      } else {\n        return createEnumTypeFromNodes(\n            rValue, lValue.getQualifiedName(), info, lValue);\n      }\n    } else if (info.isConstructor() || info.isInterface()) {\n      return createFunctionTypeFromNodes(\n          rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n      if (rValue != null) {\n        // If the RHS already has a non-unknown type, use it.\n        if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n          return rValue.getJSType();\n        }\n        // Check for the idiom: var x = x || TYPE;\n        if (rValue.isOr()) {\n          Node firstClause = rValue.getFirstChild();\n          Node secondClause = firstClause.getNext();\n          boolean namesMatch = firstClause.isName()\n              && lValue.isName()\n              && firstClause.getString().equals(lValue.getString());\n          if (namesMatch\n              && secondClause.getJSType() != null\n              && !secondClause.getJSType().isUnknownType()) {\n            return secondClause.getJSType();\n          }\n        }\n      }\n    }\n  }\n\n  // 5) Default: if we saw no usable RHS type or explicit @type, defer to any\n  //    @type on the declaration itself (may be null).\n  return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}