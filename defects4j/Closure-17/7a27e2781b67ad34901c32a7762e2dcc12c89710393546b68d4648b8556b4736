{
    "generation": "/**\n * Look for a type declaration on a property assignment\n * (in an ASSIGN or an object literal key).\n *\n * @param info The doc info for this property.\n * @param lValue The l-value node.\n * @param rValue The node that {@code n} is being initialized to,\n *     or {@code null} if this is a stub declaration.\n */\nprivate JSType getDeclaredType(String sourceName, JSDocInfo info,\n    Node lValue, @Nullable Node rValue) {\n  if (info != null && info.hasType()) {\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n  } else if (rValue != null && rValue.isFunction() &&\n      shouldUseFunctionLiteralType(\n          JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n  } else if (info != null) {\n    if (info.hasEnumParameterType()) {\n      if (rValue != null && rValue.isObjectLit()) {\n        return rValue.getJSType();\n      } else {\n        return createEnumTypeFromNodes(\n            rValue, lValue.getQualifiedName(), info, lValue);\n      }\n    } else if (info.isConstructor() || info.isInterface()) {\n      return createFunctionTypeFromNodes(\n          rValue, lValue.getQualifiedName(), info, lValue);\n    } else {\n      // Check if this is constant, and if it has a known type.\n      if (info.isConstant()) {\n        if (rValue != null) {\n          // If rValue has a type-cast, use the cast annotation.\n          if (rValue.isCast()) {\n            JSDocInfo castInfo = rValue.getJSDocInfo();\n            if (castInfo != null && castInfo.hasType()) {\n              return getDeclaredTypeInAnnotation(\n                  sourceName, lValue, castInfo);\n            }\n          }\n          // Otherwise if rValue already has a non-unknown JSType, use it.\n          if (rValue.getJSType() != null && \n              !rValue.getJSType().isUnknownType()) {\n            return rValue.getJSType();\n          } else if (rValue.isOr()) {\n            // Handle `var x = x || TYPE;`\n            Node firstClause = rValue.getFirstChild();\n            Node secondClause = firstClause.getNext();\n            boolean namesMatch = firstClause.isName()\n                && lValue.isName()\n                && firstClause.getString().equals(lValue.getString());\n            if (namesMatch\n                && secondClause.getJSType() != null\n                && !secondClause.getJSType().isUnknownType()) {\n              return secondClause.getJSType();\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}