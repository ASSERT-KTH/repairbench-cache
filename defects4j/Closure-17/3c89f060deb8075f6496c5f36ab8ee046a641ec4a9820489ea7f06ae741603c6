{
    "generation": "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n    Node lValue, @Nullable Node rValue) {\n  // 1) If the LHS has its own @type, use that.\n  if (info != null && info.hasType()) {\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n\n  // 2) Otherwise if the RHS (initializer) carries a @type, use that.\n  } else if (rValue != null\n      && rValue.getJSDocInfo() != null\n      && rValue.getJSDocInfo().hasType()) {\n    return getDeclaredTypeInAnnotation(\n        sourceName, lValue, rValue.getJSDocInfo());\n\n  // 3) Otherwise if it's a function literal and we should\n  //    use its literal type, grab that.\n  } else if (rValue != null && rValue.isFunction()\n      && shouldUseFunctionLiteralType(\n          JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n\n  // 4) Otherwise fall back to various JSDocInfo flags on the LHS.\n  } else if (info != null) {\n    if (info.hasEnumParameterType()) {\n      if (rValue != null && rValue.isObjectLit()) {\n        return rValue.getJSType();\n      } else {\n        return createEnumTypeFromNodes(\n            rValue, lValue.getQualifiedName(), info, lValue);\n      }\n    } else if (info.isConstructor() || info.isInterface()) {\n      return createFunctionTypeFromNodes(\n          rValue, lValue.getQualifiedName(), info, lValue);\n    } else {\n      // Check if this is a @const and the initializer has a known type.\n      if (info.isConstant()) {\n        if (rValue != null) {\n          // If the init already has a concrete type, use it.\n          if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n            return rValue.getJSType();\n          }\n          // Or handle the special `var x = x || TYPE;` idiom.\n          if (rValue.isOr()) {\n            Node firstClause = rValue.getFirstChild();\n            Node secondClause = firstClause.getNext();\n            boolean namesMatch = firstClause.isName()\n                && lValue.isName()\n                && firstClause.getString().equals(lValue.getString());\n            if (namesMatch\n                && secondClause.getJSType() != null\n                && !secondClause.getJSType().isUnknownType()) {\n              return secondClause.getJSType();\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // 5) As a last resort, re-use whatever (possibly empty) @type\n  //    was on the LHS.\n  return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}