{
    "generation": "    /**\n     * Look for a type declaration on a property assignment\n     * (in an ASSIGN or an object literal key).\n     *\n     * @param info The doc info for this property.\n     * @param lValue The l-value node.\n     * @param rValue The node that {@code n} is being initialized to,\n     *     or {@code null} if this is a stub declaration.\n     */\n    private JSType getDeclaredType(String sourceName, JSDocInfo info,\n        Node lValue, @Nullable Node rValue) {\n      // Handle explicitly declared types (e.g., via @type annotation).\n      if (info != null && info.hasType()) {\n        JSType declaredType = getDeclaredTypeInAnnotation(sourceName, lValue, info);\n\n        // If the declared type is not UNKNOWN, use it.\n        // This handles cases where the type is fully resolved immediately.\n        if (declaredType != null && !declaredType.isUnknownType()) {\n          return declaredType;\n        }\n\n        // If the declared type is UNKNOWN (e.g., due to a forward reference where\n        // the type is defined later), and this is a constant with a known\n        // initializer type, use the initializer type as a temporary placeholder.\n        // This prevents UNKNOWN from propagating and silencing type errors,\n        // allowing more accurate type checking during the first pass.\n        // The type system will later try to resolve the UNKNOWN type if needed.\n        if (info.isConstant() && rValue != null &&\n            rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n          return rValue.getJSType();\n        }\n\n        // Otherwise, return the declaredType, which might be null or UNKNOWN.\n        // This means the explicit declaration either wasn't useful or couldn't be resolved,\n        // and no suitable fallback was found for constants.\n        return declaredType;\n      } else if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n        // Handle function literal types if applicable.\n        return rValue.getJSType();\n      } else if (info != null) {\n        // Handle other JSDoc info types (enums, constructors, interfaces, and constants without explicit @type).\n        if (info.hasEnumParameterType()) {\n          if (rValue != null && rValue.isObjectLit()) {\n            return rValue.getJSType();\n          } else {\n            return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);\n          }\n        } else if (info.isConstructor() || info.isInterface()) {\n          return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);\n        } else {\n          // Check if this is constant, and if it has a known type.\n          // This block is for constants *without* an explicit @type annotation.\n          // The logic for constants *with* an explicit @type annotation and\n          // an UNKNOWN declaredType was moved to a higher precedence block above.\n          if (info.isConstant()) {\n            // JSType knownType = null; // This variable is unused.\n            if (rValue != null) {\n              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n                // If rValue has a type-cast, we use the type in the type-cast.\n                // If rValue's type was already computed during scope creation,\n                // then we can safely use that.\n                return rValue.getJSType();\n              } else if (rValue.isOr()) {\n                // Check for a very specific JS idiom:\n                // var x = x || TYPE;\n                // This is used by Closure's base namespace for esoteric\n                // reasons.\n                Node firstClause = rValue.getFirstChild();\n                Node secondClause = firstClause.getNext();\n                boolean namesMatch = firstClause.isName()\n                    && lValue.isName()\n                    && firstClause.getString().equals(lValue.getString());\n                if (namesMatch && secondClause.getJSType() != null\n                    && !secondClause.getJSType().isUnknownType()) {\n                  return secondClause.getJSType();\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // Final fallback: if no type could be determined from the above conditions,\n      // try to derive a type from the annotation (which might be null or UNKNOWN).\n      // This is often for variables without an initializer or a specific JSDoc type,\n      // or if 'info' was null.\n      return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}