{
    "generation": "/**\n * Look for a type declaration on a property assignment\n * (in an ASSIGN or an object literal key).\n *\n * @param info The doc info for this property.\n * @param lValue The l-value node.\n * @param rValue The node that {@code n} is being initialized to,\n *     or {@code null} if this is a stub declaration.\n */\nprivate JSType getDeclaredType(String sourceName, JSDocInfo info,\n    Node lValue, @Nullable Node rValue) {\n  // 1) If the LHS has an explicit @type, use that.\n  if (info != null && info.hasType()) {\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n  }\n  // 2) Otherwise if the initializer itself carries a @type (a cast on the RHS),\n  //    use that annotation as the declared type.\n  if (rValue != null) {\n    JSDocInfo rvInfo = rValue.getJSDocInfo();\n    if (rvInfo != null && rvInfo.hasType()) {\n      return getDeclaredTypeInAnnotation(sourceName, lValue, rvInfo);\n    }\n  }\n  // 3) Otherwise special\u2010case function literals.\n  if (rValue != null && rValue.isFunction()\n      && shouldUseFunctionLiteralType(\n          JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n  }\n  // 4) Otherwise handle enum, ctor/interface, or const with known RHS type.\n  if (info != null) {\n    if (info.hasEnumParameterType()) {\n      if (rValue != null && rValue.isObjectLit()) {\n        return rValue.getJSType();\n      } else {\n        return createEnumTypeFromNodes(\n            rValue, lValue.getQualifiedName(), info, lValue);\n      }\n    } else if (info.isConstructor() || info.isInterface()) {\n      return createFunctionTypeFromNodes(\n          rValue, lValue.getQualifiedName(), info, lValue);\n    } else if (info.isConstant()) {\n      if (rValue != null) {\n        JSType rhsType = rValue.getJSType();\n        if (rhsType != null && !rhsType.isUnknownType()) {\n          return rhsType;\n        } else if (rValue.isOr()) {\n          // var x = x || TYPE;\n          Node firstClause = rValue.getFirstChild();\n          Node secondClause = firstClause.getNext();\n          boolean namesMatch = firstClause.isName()\n              && lValue.isName()\n              && firstClause.getString().equals(lValue.getString());\n          if (namesMatch) {\n            JSType secondType = secondClause.getJSType();\n            if (secondType != null && !secondType.isUnknownType()) {\n              return secondType;\n            }\n          }\n        }\n      }\n    }\n  }\n  // 5) Fallback: try to pull a type out of the (possibly null) LHS info.\n  return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}