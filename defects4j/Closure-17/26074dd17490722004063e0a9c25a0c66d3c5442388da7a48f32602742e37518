{
    "generation": "private JSType getDeclaredType(String sourceName, JSDocInfo info,\n    Node lValue, @Nullable Node rValue) {\n  // If the r-value has its own JSDoc with a type (i.e. an explicit cast),\n  // prefer that over any information on the l-value.\n  if (rValue != null) {\n    JSDocInfo rValueJsDoc = rValue.getJSDocInfo();\n    if (rValueJsDoc != null && rValueJsDoc.hasType()) {\n      return getDeclaredTypeInAnnotation(sourceName, lValue, rValueJsDoc);\n    }\n  }\n\n  if (info != null && info.hasType()) {\n    return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n  } else if (rValue != null && rValue.isFunction() &&\n      shouldUseFunctionLiteralType(\n          JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {\n    return rValue.getJSType();\n  } else if (info != null) {\n    if (info.hasEnumParameterType()) {\n      if (rValue != null && rValue.isObjectLit()) {\n        return rValue.getJSType();\n      } else {\n        return createEnumTypeFromNodes(\n            rValue, lValue.getQualifiedName(), info, lValue);\n      }\n    } else if (info.isConstructor() || info.isInterface()) {\n      return createFunctionTypeFromNodes(\n          rValue, lValue.getQualifiedName(), info, lValue);\n    } else {\n      // Check if this is a constant and if its initializer has a computed type.\n      if (info.isConstant()) {\n        if (rValue != null) {\n          if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n            // Use the initializer's type (unless it\u2019s a cast, which we already handled).\n            return rValue.getJSType();\n          } else if (rValue.isOr()) {\n            // Handle the idiom: var x = x || TYPE;\n            Node firstClause = rValue.getFirstChild();\n            Node secondClause = firstClause.getNext();\n            boolean namesMatch = firstClause.isName()\n                && lValue.isName()\n                && firstClause.getString().equals(lValue.getString());\n            if (namesMatch && secondClause.getJSType() != null\n                && !secondClause.getJSType().isUnknownType()) {\n              return secondClause.getJSType();\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}