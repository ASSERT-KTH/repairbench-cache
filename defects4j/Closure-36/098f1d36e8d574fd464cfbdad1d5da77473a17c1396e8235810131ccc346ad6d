{
    "generation": "/**\n * @return true if the provided reference and declaration can be safely\n *         inlined according to our criteria\n */\nprivate boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      || !isValidInitialization(initialization)\n      || !isValidReference(reference)) {\n    return false;\n  }\n\n  // If the value is read more than once, skip it.\n  // VAR declarations and EXPR_RESULT don't need the value, but other\n  // ASSIGN expressions parents do.\n  if (declaration != initialization &&\n      !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n\n  // Be very conservative and do no cross control structures or scope boundaries\n  if (declaration.getBasicBlock() != initialization.getBasicBlock()\n      || declaration.getBasicBlock() != reference.getBasicBlock()) {\n    return false;\n  }\n\n  // Do not inline into a call node. This would change the context in which it was\n  // being called. For example,\n  //   var a = b.c;\n  //   a();\n  // should not be inlined, because it calls a in the context of b rather than the\n  // context of the window.\n  //   var a = b.c;\n  //   f(a)\n  // is ok.\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value != null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n\n  // If the assigned value is a function, we need to be extra careful.\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (callNode.isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      // Bug 2388531: Don't inline subclass definitions into class defining calls\n      // as this confused class removing logic.\n      SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);\n      if (relationship != null) {\n        return false;\n      }\n\n      // Issue 668: Don't inline singleton getter method calls as this confused\n      // class removing logic.\n      Node callee = callNode.getFirstChild();\n      if (callee != null && callee.isGetProp()) {\n        Node property = callee.getLastChild();\n        if (property != null && \"getInstance\".equals(property.getString())) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return canMoveAggressively(value) ||\n         canMoveModerately(initialization, reference);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}