{
    "generation": "    private boolean canInline(\n        Reference declaration,\n        Reference initialization,\n        Reference reference) {\n      if (!isValidDeclaration(declaration)\n          || !isValidInitialization(initialization)\n          || !isValidReference(reference)) {\n        return false;\n      }\n\n      if (declaration != initialization &&\n          !initialization.getGrandparent().isExprResult()) {\n        return false;\n      }\n\n      if (declaration.getBasicBlock() != initialization.getBasicBlock()\n          || declaration.getBasicBlock() != reference.getBasicBlock()) {\n        return false;\n      }\n\n      Node value = initialization.getAssignedValue();\n      Preconditions.checkState(value != null);\n      if (value.isGetProp()\n          && reference.getParent().isCall()\n          && reference.getParent().getFirstChild() == reference.getNode()) {\n        return false;\n      }\n\n      if (value.isFunction()) {\n          // Check if this function is assigned to 'getInstance', indicating a singleton getter\n          Node assignmentNode = value.getParent();\n          if (assignmentNode.isAssign()) {\n              Node lhs = assignmentNode.getFirstChild();\n              if (lhs.isGetProp()) {\n                  if (lhs.getPropertyName().equals(\"getInstance\")) {\n                      return false;\n                  }\n              }\n          }\n\n          // Existing checks for Bug 2388531\n          Node callNode = reference.getParent();\n          if (callNode.isCall()) {\n              CodingConvention convention = compiler.getCodingConvention();\n              SubclassRelationship relationship =\n                  convention.getClassesDefinedByCall(callNode);\n              if (relationship != null) {\n                  return false;\n              }\n          }\n      }\n\n      return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}