{
    "generation": "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n    Node n, Node parent, Node rhsValue) {\n  Node ownerNode = n.getFirstChild();\n  String ownerName = ownerNode.getQualifiedName();\n  String qName = n.getQualifiedName();\n  String propName = n.getLastChild().getString();\n  Preconditions.checkArgument(qName != null && ownerName != null);\n\n  // Precedence of type information on GETPROPs:\n  // 1) @type/@enum annotations\n  // 2) ASSIGN to FUNCTION literal\n  // 3) @param/@return annotations (without a function literal)\n  // 4) ASSIGN to something marked @const\n  // 5) ASSIGN to anything else\n  //\n  // In our algorithm, declarations (1, 3, 4 and sometimes 2) result in a non\u2010inferred\n  // property. In other cases (5 and re\u2010assignments of declared properties) we want to\n  // keep the original declaration and have a type mismatch reported if the new value is\n  // incompatible.\n  JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);\n  if (valueType == null && rhsValue != null) {\n    valueType = rhsValue.getJSType();\n  }\n\n  // Function prototypes are special.\n  if (\"prototype\".equals(propName)) {\n    Var qVar = scope.getVar(qName);\n    if (qVar != null) {\n      ObjectType qVarType = ObjectType.cast(qVar.getType());\n      if (qVarType != null && rhsValue != null && rhsValue.isObjectLit()) {\n        typeRegistry.resetImplicitPrototype(\n            rhsValue.getJSType(), qVarType.getImplicitPrototype());\n      } else if (!qVar.isTypeInferred()) {\n        // Do not override a non-inferred (declared) prototype.\n        return;\n      }\n      if (qVar.getScope() == scope) {\n        scope.undeclare(qVar);\n      }\n    }\n  }\n\n  if (valueType == null) {\n    if (parent.isExprResult()) {\n      stubDeclarations.add(new StubDeclaration(\n          n,\n          t.getInput() != null && t.getInput().isExtern(),\n          ownerName));\n    }\n    return;\n  }\n\n  // Determine whether this property should be declared or merely inferred.\n  // By default we assume it's inferred, unless there is supporting type info.\n  boolean inferred = true;\n  if (info != null) {\n    inferred = !(info.hasType()\n        || info.hasEnumParameterType()\n        || (info.isConstant() && valueType != null && !valueType.isUnknownType())\n        || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n  }\n  // For function literals, if the property hasn't been declared before,\n  // treat the assignment as a declaration.\n  if (inferred) {\n    inferred = !(rhsValue != null &&\n        rhsValue.isFunction() &&\n        (info != null || !scope.isDeclared(qName, false)));\n  }\n\n  // If we have a declaration (i.e. not an inferred property),\n  // register it as a declared property on the owner type.\n  if (!inferred) {\n    ObjectType ownerType = getObjectSlot(ownerName);\n    if (ownerType != null) {\n      boolean isExtern = t.getInput() != null && t.getInput().isExtern();\n      if ((!ownerType.hasOwnProperty(propName) ||\n           ownerType.isPropertyTypeInferred(propName)) &&\n          ((isExtern && !ownerType.isNativeObjectType()) ||\n           !ownerType.isInstanceType())) {\n        ownerType.defineDeclaredProperty(propName, valueType, n);\n      }\n    }\n  } else if (rhsValue != null && rhsValue.isTrue()) {\n    // Special case: delegate proxy method properties.\n    FunctionType ownerType = JSType.toMaybeFunctionType(getObjectSlot(ownerName));\n    if (ownerType != null) {\n      JSType ownerTypeOfThis = ownerType.getTypeOfThis();\n      String delegateName = codingConvention.getDelegateSuperclassName();\n      JSType delegateType = delegateName == null ? null : typeRegistry.getType(delegateName);\n      if (delegateType != null &&\n          ownerTypeOfThis.isSubtype(delegateType)) {\n        defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);\n        return;\n      }\n    }\n  }\n  // Always define the slot so that, if there is a redefinition,\n  // a type mismatch is caught. In particular, this ensures that if a\n  // property was declared earlier with type information, then a later\n  // assignment (which would be marked inferred) will still trigger an\n  // error if its inferred type is incompatible.\n  defineSlot(n, parent, valueType, inferred);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}