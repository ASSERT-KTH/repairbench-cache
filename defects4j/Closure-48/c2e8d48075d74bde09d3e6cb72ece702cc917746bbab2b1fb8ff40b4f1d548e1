{
    "generation": "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n    Node n, Node parent, Node rhsValue) {\n  Node ownerNode = n.getFirstChild();\n  String ownerName = ownerNode.getQualifiedName();\n  String qName = n.getQualifiedName();\n  String propName = n.getLastChild().getString();\n  Preconditions.checkArgument(qName != null && ownerName != null);\n\n  // Determining type for the property value\n  JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);\n  if (valueType == null && rhsValue != null) {\n    valueType = rhsValue.getJSType();\n  }\n\n  // Function prototypes are special; handle them specifically.\n  if (\"prototype\".equals(propName)) {\n    Var qVar = scope.getVar(qName);\n    if (qVar != null) {\n      // If the prototype is being assigned and the type isn't declared,\n      // treat it as inferred to avoid incorrect type errors.\n      if (rhsValue != null && rhsValue.isFunction() && !qVar.isTypeInferred()) {\n        inferred = true;\n      }\n    }\n  }\n\n  if (valueType == null) {\n    if (parent.isExprResult()) {\n      stubDeclarations.add(new StubDeclaration(\n          n,\n          t.getInput() != null && t.getInput().isExtern(),\n          ownerName));\n    }\n    return;\n  }\n\n  // Determine if the property is declared or inferred\n  boolean inferred = inferType;\n  if (!inferType) {\n    inferred = false;\n  } else {\n    // For function properties on the prototype, if the function is assigned,\n    // treat it as inferred to prevent overeager type checking.\n    if (\"prototype\".equals(propName) && rhsValue != null && rhsValue.isFunction()) {\n      inferred = true;\n    }\n  }\n\n  if (inferred) {\n    // ... rest of the code ...\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}