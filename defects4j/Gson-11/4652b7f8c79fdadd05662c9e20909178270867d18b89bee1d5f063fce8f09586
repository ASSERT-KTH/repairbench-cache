{
    "generation": "@Override\npublic Number read(JsonReader in) throws IOException {\n  JsonToken jsonToken = in.peek();\n  switch (jsonToken) {\n    case NULL:\n      in.nextNull();\n      return null;\n    case NUMBER:\n      return new LazilyParsedNumber(in.nextString());\n    case STRING: {\n      String stringValue = in.nextString();\n      try {\n        return parseNumber(stringValue);\n      } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(\"Could not parse \" + jsonToken + \" to Number: \" + stringValue, e);\n      }\n    }\n    default:\n      throw new JsonSyntaxException(\"Expecting number, got: \" + jsonToken);\n  }\n}\n\nprivate Number parseNumber(String string) {\n  try {\n    return Double.valueOf(string);\n  } catch (NumberFormatException e) {\n    try {\n      return Long.valueOf(string);\n    } catch (NumberFormatException e2) {\n      throw e2;\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}