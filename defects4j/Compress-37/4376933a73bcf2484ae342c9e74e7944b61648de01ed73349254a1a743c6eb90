{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    while (true) {\n        int ch = i.read();\n        if (ch == -1) {\n            break;\n        }\n        // skip blank lines\n        if (ch == '\\n') {\n            continue;\n        }\n        // if not a digit, skip until end of line\n        if (ch < '0' || ch > '9') {\n            while (ch != -1 && ch != '\\n') {\n                ch = i.read();\n            }\n            continue;\n        }\n        // parse the length field\n        int len = ch - '0';\n        int digits = 1;\n        while ((ch = i.read()) != -1 && ch != ' ') {\n            if (ch < '0' || ch > '9') {\n                // malformed length, skip to end of line\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                break;\n            }\n            len = len * 10 + (ch - '0');\n            digits++;\n        }\n        if (ch == -1) {\n            break;\n        }\n        // compute how many bytes remain in this record\n        int restLen = len - digits - 1; // minus digits and the space\n        if (restLen <= 0) {\n            // nothing or malformed, skip remainder of line if any\n            if (restLen < 0) {\n                while ((ch = i.read()) != -1 && ch != '\\n') {\n                    // skip\n                }\n            }\n            continue;\n        }\n        // read the rest of the record (key=value\\n or just \"\\n\")\n        byte[] rest = new byte[restLen];\n        int got = IOUtils.readFully(i, rest);\n        if (got != restLen) {\n            throw new IOException(\"Failed to read Paxheader. Expected \"\n                                  + restLen + \" bytes, read \" + got);\n        }\n        // drop the trailing NL\n        String entry = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n        int idx = entry.indexOf('=');\n        if (idx != -1) {\n            String key = entry.substring(0, idx);\n            String value = entry.substring(idx + 1);\n            if (value.length() == 0) {\n                headers.remove(key);\n            } else {\n                headers.put(key, value);\n            }\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}