{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    while(true){ // process each line\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundLength = false;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                // We have read the length, proceed to the keyword part\n                foundLength = true;\n                break;\n            }\n            if (ch == '\\n') {\n                // Skip leading blank lines\n                len = 0;\n                read = 0;\n                foundLength = false;\n                break;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1) {\n            // End of stream\n            break;\n        }\n        if (!foundLength) {\n            // No length found after initial digit processing, line is malformed\n            continue;\n        }\n        int keywordStartRead = read;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == '=') {\n                final byte[] keywordBytes = new byte[read - keywordStartRead];\n                i.reset();\n                i.skip(keywordStartRead);\n                i.read(keywordBytes);\n                final String keyword = new String(keywordBytes, CharsetNames.UTF_8);\n                int restLen = len - read;\n                if (restLen == 1) { // only '\\n'\n                    headers.remove(keyword);\n                } else if (restLen > 0) {\n                    i.reset();\n                    i.skip(read);\n                    final byte[] rest = new byte[restLen];\n                    if (IOUtils.readFully(i, rest) != restLen) {\n                        throw new IOException(\"Failed to read Paxheader. Expected \" + restLen + \" bytes.\");\n                    }\n                    // Drop the trailing newline\n                    final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                }\n                break;\n            }\n        }\n    }\n    return headers;\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}