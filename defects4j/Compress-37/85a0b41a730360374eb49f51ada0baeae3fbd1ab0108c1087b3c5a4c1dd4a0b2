{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n    final Map<String, String> headers = new HashMap<>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while (true) {\n        int ch;\n        int len = 0;\n        int read = 0;\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == '\\n') {\n                // Blank line, ignore and continue\n                continue;\n            }\n            if (ch == ' ') {\n                // Get keyword\n                final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                while ((ch = i.read()) != -1) {\n                    read++;\n                    if (ch == '=') { // end of keyword\n                        final String keyword = coll.toString(CharsetNames.UTF_8);\n                        // Get rest of entry\n                        final int restLen = len - read;\n                        if (restLen == 1) { // only NL\n                            headers.remove(keyword);\n                        } else {\n                            final byte[] rest = new byte[restLen - 1]; // Exclude the newline\n                            final int got = IOUtils.readFully(i, rest);\n                            if (got != restLen - 1) {\n                                throw new IOException(\"Failed to read Paxheader. Expected \"\n                                        + (restLen - 1)\n                                        + \" bytes, read \"\n                                        + got);\n                            }\n                            // No need to drop trailing NL as it's excluded\n                            final String value = new String(rest, 0, got, CharsetNames.UTF_8);\n                            headers.put(keyword, value);\n                        }\n                        break;\n                    }\n                    coll.write((byte) ch);\n                }\n                break; // Processed single header\n            }\n            if (ch < '0' || ch > '9') {\n                throw new IOException(\"Invalid character in Pax header length: \" + (char) ch);\n            }\n            len = len * 10 + (ch - '0');\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}