{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Each pax header record is of the form: \"length keyword=value\\n\"\n    // Sometimes blank lines (just LF/CR) may appear. We simply skip them.\n    outer: while (true) {\n        int ch = i.read();\n        // Skip any blank lines (LF or CR)\n        while (ch == '\\n' || ch == '\\r') {\n            ch = i.read();\n        }\n        if (ch == -1) {\n            break; // EOF reached\n        }\n        // The record must start with a digit (the length field)\n        if (ch < '0' || ch > '9') {\n            throw new IOException(\"Invalid pax header, expected digit but got: \" + (char) ch);\n        }\n        int len = ch - '0';\n        int read = 1;\n        // Read remaining digit characters until a space is encountered\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                break;\n            }\n            if (ch < '0' || ch > '9') {\n                throw new IOException(\"Invalid pax header length: unexpected character: \" + (char) ch);\n            }\n            len = len * 10 + (ch - '0');\n        }\n        if (ch == -1) {\n            break;\n        }\n        // Now read the keyword until the '=' separator\n        final ByteArrayOutputStream keywordBuf = new ByteArrayOutputStream();\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == '=') {\n                break;\n            }\n            keywordBuf.write((byte) ch);\n        }\n        if (ch == -1) {\n            throw new IOException(\"Unexpected EOF while reading pax header keyword\");\n        }\n        final String keyword = keywordBuf.toString(CharsetNames.UTF_8);\n        // The remaining bytes (len - read) consist of the value and a trailing newline.\n        final int remaining = len - read;\n        if (remaining < 1) {\n            throw new IOException(\"Corrupt pax header: entry length \" + len + \" is too small; already read \" + read + \" bytes.\");\n        }\n        if (remaining == 1) {\n            // There is no value, only the trailing newline. Remove any existing mapping.\n            ch = i.read(); // consume the newline\n            headers.remove(keyword);\n        } else {\n            final byte[] rest = new byte[remaining];\n            final int got = IOUtils.readFully(i, rest);\n            if (got != remaining) {\n                throw new IOException(\"Failed to read Paxheader. Expected \" + remaining + \" bytes, read \" + got);\n            }\n            // The last byte is the newline; the value is stored in the preceding bytes.\n            final String value = new String(rest, 0, remaining - 1, CharsetNames.UTF_8);\n            headers.put(keyword, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}