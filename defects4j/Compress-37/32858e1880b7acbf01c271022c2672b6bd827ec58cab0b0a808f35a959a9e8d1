{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundDigit = false;\n        while((ch = i.read()) != -1) {\n            if (ch == ' '){\n                if (!foundDigit) {\n                    // skip blank line or malformed line\n                    // continue to next line\n                    while((ch = i.read()) != -1 && ch != '\\n') {\n                        // skip until end of line\n                    }\n                    // After skipping blank/malformed line, continue with outer loop\n                    break;\n                }\n                // Get keyword\n                final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                while((ch = i.read()) != -1) {\n                    read++;\n                    if (ch == '='){ // end of keyword\n                        final String keyword = coll.toString(CharsetNames.UTF_8);\n                        // Get rest of entry\n                        final int restLen = len - read;\n                        if (restLen < 1) {\n                            // Malformed entry, skip to next line\n                            while((ch = i.read()) != -1 && ch != '\\n') {\n                                // skip until end of line\n                            }\n                        } else if (restLen == 1) { // only NL\n                            headers.remove(keyword);\n                        } else {\n                            final byte[] rest = new byte[restLen];\n                            final int got = IOUtils.readFully(i, rest);\n                            if (got != restLen) {\n                                throw new IOException(\"Failed to read \"\n                                                      + \"Paxheader. Expected \"\n                                                      + restLen\n                                                      + \" bytes, read \"\n                                                      + got);\n                            }\n                            // Drop trailing NL\n                            final String value = new String(rest, 0,\n                                                      restLen - 1, CharsetNames.UTF_8);\n                            headers.put(keyword, value);\n                        }\n                        break;\n                    }\n                    coll.write((byte) ch);\n                }\n                break; // Processed single header, get next\n            }\n            if (ch >= '0' && ch <= '9') {\n                len *= 10;\n                len += ch - '0';\n                read++;\n                foundDigit = true;\n            } else if (ch == '\\n' || ch == '\\r') {\n                // skip blank lines\n                break;\n            } else {\n                // Malformed, skip this line\n                while((ch = i.read()) != -1 && ch != '\\n') {\n                    // skip until end of line\n                }\n                break;\n            }\n        }\n        if (ch == -1){ // EOF\n            break;\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}