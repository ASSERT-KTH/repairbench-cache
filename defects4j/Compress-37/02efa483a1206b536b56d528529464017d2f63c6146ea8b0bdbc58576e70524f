{
    "generation": "    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while(true){ // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            // Read length\n            while((ch = i.read()) != -1) {\n                if (ch == ' '){\n                    break; // end of length digits\n                }\n                if (ch == '\\n') { // skip blank line\n                    continue;\n                }\n                len *= 10;\n                len += ch - '0';\n            }\n            if (ch == -1){ // EOF\n                break;\n            }\n            if (len == 0) { // empty line, skip processing\n                continue;\n            }\n\n            // Get keyword\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            while((ch = i.read()) != -1) {\n                read++;\n                if (ch == '='){ // end of keyword\n                    final String keyword = coll.toString(CharsetNames.UTF_8);\n                    // Get rest of entry\n                    final int restLen = len - read;\n                    if (restLen == 1) { // only NL\n                        headers.remove(keyword);\n                    } else {\n                        final byte[] rest = new byte[restLen - 1]; // account for the trailing newline\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != rest.length) { // compare with actual array length\n                            throw new IOException(\"Failed to read \"\n                                                  + \"Paxheader. Expected \"\n                                                  + rest.length\n                                                  + \" bytes, read \"\n                                                  + got);\n                        }\n                        // Read the trailing newline\n                        i.read();\n                        // The rest array already doesn't include the NL\n                        final String value = new String(rest, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                    }\n                    break;\n                }\n                coll.write((byte) ch);\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}