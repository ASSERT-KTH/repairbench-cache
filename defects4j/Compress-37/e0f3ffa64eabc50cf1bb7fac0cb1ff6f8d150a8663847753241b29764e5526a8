{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while (true) { // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundLen = false;\n\n        // Read length field\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                foundLen = true;\n                break;\n            }\n            // ignore if starting with newline (blank line)\n            if (read == 1 && (ch == '\\n' || ch == '\\r')) {\n                break;\n            }\n            if (ch < '0' || ch > '9') {\n                // Invalid length, skip this line\n                // consume until newline or EOF\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                break;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n        if (!foundLen) { // Either '\\n' or invalid length, skip\n            continue;\n        }\n        if (len <= 0) {\n            // Skip the line of non-positive length\n            for (int j = read; j < 8192; j++) { // avoid infinite loop\n                int b = i.read();\n                if (b == -1 || b == '\\n') break;\n            }\n            continue;\n        }\n        final byte[] line = new byte[len - read];\n        final int got = IOUtils.readFully(i, line);\n        if (got != len - read) {\n            throw new IOException(\"Failed to read Paxheader. Expected \" + (len - read)\n                + \" bytes, read \" + got);\n        }\n        int end = line.length - 1; // expect last '\\n'\n        if (line.length > 0 && line[end] == '\\n') {\n            // correct, trailing newline\n            end--;\n        }\n        String kv = new String(line, 0, end + 1, CharsetNames.UTF_8);\n        int eq = kv.indexOf('=');\n        if (eq == -1) {\n            // Malformed line; ignore\n            continue;\n        }\n        String keyword = kv.substring(0, eq);\n        String value = kv.substring(eq + 1);\n        if (value.length() == 0) {\n            headers.remove(keyword);\n        } else {\n            headers.put(keyword, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}