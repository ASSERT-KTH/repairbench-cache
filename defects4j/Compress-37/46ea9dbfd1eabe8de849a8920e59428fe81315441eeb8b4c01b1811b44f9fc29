{
    "generation": "    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while(true){ // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n\n            // Read the length\n            while((ch = i.read()) != -1) {\n                if (ch == ' ') {\n                    break;\n                }\n                len = len * 10 + (ch - '0');\n            }\n\n            if (ch == -1) { // EOF\n                break;\n            }\n            read++; // account for the space\n\n            if (len <= 0) {\n                // Skip blank lines or invalid lengths\n                // Read until newline (which should be the next character since length was 0)\n                while((ch = i.read()) != -1 && ch != '\\n') {\n                    read++;\n                }\n                continue;\n            }\n\n            // Get keyword\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            while((ch = i.read()) != -1) {\n                read++;\n                if (ch == '='){ // end of keyword\n                    final String keyword = coll.toString(CharsetNames.UTF_8);\n                    // Get rest of entry\n                    final int restLen = len - read;\n                    if (restLen > 0) {\n                        final byte[] rest = new byte[restLen];\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != restLen) {\n                            throw new IOException(\"Failed to read \"\n                                                      + \"Paxheader. Expected \"\n                                                      + restLen\n                                                      + \" bytes, read \"\n                                                      + got);\n                        }\n                        // Drop trailing NL if present\n                        String value;\n                        if (rest.length > 0 && rest[rest.length - 1] == '\\n') {\n                            value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n                        } else {\n                            value = new String(rest, CharsetNames.UTF_8);\n                        }\n                        headers.put(keyword, value);\n                    } else if (restLen == 0) {\n                        headers.remove(keyword);\n                    }\n                    // Read the newline if it wasn't part of the restLen\n                    if (restLen <= 0) {\n                        ch = i.read();\n                    }\n                    break;\n                }\n                coll.write((byte) ch);\n            }\n\n            // If we didn't find a complete header, break\n            if (ch == -1) {\n                break;\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}