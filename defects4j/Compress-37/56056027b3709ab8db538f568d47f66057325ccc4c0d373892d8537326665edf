{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundLen = false;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' '){\n                foundLen = true;\n                break;\n            }\n            // Skip blank lines and invalid leading non-digit chars\n            if (!Character.isDigit(ch)) {\n                // Skip until LF to drop this bogus line\n                while (ch != '\\n' && ch != -1) {\n                    ch = i.read();\n                    if (ch == -1) break;\n                }\n                read = 0;\n                len = 0;\n                continue;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1){ // EOF\n            break;\n        }\n        if (!foundLen) {\n            // No length found; probably end of file\n            break;\n        }\n        // Already read len bytes? (in case of a blank/empty/invalid header)\n        if (len <= 0) {\n            // Invalid, just skip this line\n            // Read till end of line\n            do {\n                ch = i.read();\n            } while (ch != -1 && ch != '\\n');\n            continue;\n        }\n        // Read the rest of the header\n        int bytesRemaining = len - read;\n        if (bytesRemaining <= 0) {\n            // Malformed header, skip the rest of the line\n            for (int discard = 0; discard < len - 1; discard++) {\n                i.read();\n            }\n            continue;\n        }\n        byte[] rest = new byte[bytesRemaining];\n        int got = IOUtils.readFully(i, rest);\n        if (got != bytesRemaining) {\n            throw new IOException(\"Failed to read \"\n                                  + \"Paxheader. Expected \"\n                                  + bytesRemaining\n                                  + \" bytes, read \"\n                                  + got);\n        }\n        // Remove trailing newline (should always be at end)\n        int end = bytesRemaining - 1;\n        if (rest[end] != '\\n') {\n            // no trailing newline? Malformed header, skip\n            continue;\n        }\n        // Find the '=' separator\n        int eq = 0;\n        while (eq < end && rest[eq] != '=') {\n            eq++;\n        }\n        if (eq == 0 || eq >= end) {\n            // Malformed, no keyword or separator. Skip\n            continue;\n        }\n        final String keyword = new String(rest, 0, eq, CharsetNames.UTF_8);\n        final String value = new String(rest, eq + 1, end - eq - 1, CharsetNames.UTF_8);\n        if (value.length() == 0) {\n            headers.remove(keyword);\n        } else {\n            headers.put(keyword, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}