{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while (true) { // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                // Get keyword\n                final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                while ((ch = i.read()) != -1) {\n                    read++;\n                    if (ch == '=') { // end of keyword\n                        final String keyword = coll.toString(CharsetNames.UTF_8);\n                        // Get rest of entry\n                        final int restLen = len - read;\n                        if (restLen <= 0) { // handle blank lines or only NL\n                            if (restLen == -1) { // blank line, just skip it\n                                continue;\n                            } else if (restLen == 0) { // only NL\n                                headers.remove(keyword);\n                                break;\n                            }\n                        }\n                        final byte[] rest = new byte[Math.max(restLen - 1, 0)]; // ensure non-negative size\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != rest.length) {\n                            throw new IOException(\"Failed to read Paxheader. Expected \"\n                                    + rest.length\n                                    + \" bytes, read \"\n                                    + got);\n                        }\n                        // Drop trailing NL if present\n                        final String value = new String(rest, 0,\n                                rest.length, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                        break;\n                    }\n                    coll.write((byte) ch);\n                }\n                break; // Processed single header\n            }\n            if (ch < '0' || ch > '9') { // invalid character, skip to next line\n                while ((ch = i.read()) != -1 && ch != '\\n') {\n                }\n                read = 0;\n                len = 0;\n                continue;\n            }\n            len = len * 10 + (ch - '0');\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}