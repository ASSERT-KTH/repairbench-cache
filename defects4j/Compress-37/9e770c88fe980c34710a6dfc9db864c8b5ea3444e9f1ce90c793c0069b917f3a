{
    "generation": "    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while (true) {\n            int ch;\n            int len = 0;\n            int read = 0;\n            boolean validLine = true;\n\n            // Parse the length part\n            while ((ch = i.read()) != -1) {\n                read++;\n                if (ch == ' ') {\n                    break;\n                }\n                if (ch < '0' || ch > '9') {\n                    // Invalid character in length, skip this line\n                    validLine = false;\n                    // Read until newline or EOF\n                    while (ch != -1 && ch != '\\n') {\n                        ch = i.read();\n                    }\n                    break;\n                }\n                len = len * 10 + (ch - '0');\n            }\n\n            if (!validLine) {\n                continue; // Skip this invalid line and move to next\n            }\n\n            if (ch == -1) { // EOF\n                break;\n            }\n\n            // Process keyword and value\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            boolean keywordProcessed = false;\n            while ((ch = i.read()) != -1) {\n                read++;\n                if (ch == '=') { // End of keyword\n                    final String keyword = coll.toString(CharsetNames.UTF_8);\n                    final int restLen = len - read;\n\n                    if (restLen < 0) {\n                        // Invalid remaining length, skip this line\n                        validLine = false;\n                        // Read until newline or EOF\n                        while (ch != -1 && ch != '\\n') {\n                            ch = i.read();\n                        }\n                        break;\n                    }\n\n                    if (restLen == 1) { // Only newline left\n                        headers.remove(keyword);\n                    } else {\n                        final byte[] rest = new byte[restLen];\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != restLen) {\n                            throw new IOException(\"Failed to read Paxheader. Expected \"\n                                                  + restLen + \" bytes, read \" + got);\n                        }\n                        // Drop trailing newline\n                        final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                    }\n                    keywordProcessed = true;\n                    break;\n                }\n                coll.write((byte) ch);\n            }\n\n            if (!validLine || !keywordProcessed) {\n                continue; // Skip processing this line further\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}