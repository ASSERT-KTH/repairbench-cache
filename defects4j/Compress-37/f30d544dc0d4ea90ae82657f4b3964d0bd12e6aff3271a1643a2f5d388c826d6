{
    "generation": "    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while(true){ // Process each Pax header entry\n            int ch;\n            int len = 0;\n            int read = 0; // Total bytes read for the current entry\n\n            // Phase 1: Read length digits\n            // We read characters until a non-digit character is encountered.\n            // This non-digit must be a space, otherwise the format is incorrect.\n            while((ch = i.read()) != -1) {\n                read++;\n                if (ch >= '0' && ch <= '9') {\n                    len *= 10;\n                    len += ch - '0';\n                } else {\n                    break; // Non-digit character found, should be the space\n                }\n            }\n\n            // After parsing length digits, 'ch' contains the character that terminated digit reading.\n            // It must be a space (' ').\n            if (ch == -1 && read == 0) { // EOF at the very beginning of the line (no more headers)\n                break; // Normal termination of pax headers parsing\n            }\n            if (ch != ' ') { // Expected a space after length digits\n                if (ch == '\\n') {\n                    // This means the line was \"length\\n\" without a keyword=value part.\n                    // E.g., \"0\\n\" or \"123\\n\". This is malformed according to the spec.\n                    // For \"surviving blank lines\", treat this as the end of valid headers.\n                    break; // Terminate Pax header parsing.\n                }\n                // Any other non-space, non-digit, non-newline character is an error.\n                throw new IOException(\"Malformed Paxheader. Expected space after length digits, but got '\" + (char)ch + \"' at position \" + read);\n            }\n            // At this point, 'ch' is ' ', and 'read' counts the length digits and the space.\n            // 'len' holds the parsed integer value of the total entry length.\n\n            // Phase 2: Get keyword and the following equals sign\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            boolean haveEquals = false; // Flag to ensure an equals sign is found\n            while((ch = i.read()) != -1) {\n                read++; // Keep incrementing overall 'read' counter for the current entry\n                if (ch == '='){ // End of keyword found\n                    haveEquals = true;\n                    final String keyword = coll.toString(CharsetNames.UTF_8);\n                    \n                    // Get rest of entry (value + mandatory trailing newline)\n                    // 'len' is the total length of the entry including the initial 'length ' and 'keyword=' parts.\n                    // 'read' is the number of bytes consumed so far for these parts.\n                    final int restLen = len - read;\n\n                    // 'restLen' must be at least 1 (for the mandatory trailing newline).\n                    // If 'restLen' is 1, it means the value is empty (e.g., \"keyword=\\n\").\n                    // If 'restLen' <= 0, it means the declared 'len' was smaller than\n                    // the bytes already read for the prefix and keyword. This is a malformed header.\n                    if (restLen < 1) {\n                        throw new IOException(\"Malformed Paxheader. Declared length \" + len +\n                                              \" is less than bytes already read (\" + read +\n                                              \"), or missing value/newline. restLen=\" + restLen);\n                    }\n                    \n                    if (restLen == 1) { // Value is empty, only newline remains\n                        headers.remove(keyword);\n                    } else { // Value exists, including the trailing newline\n                        final byte[] rest = new byte[restLen];\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != restLen) {\n                            throw new IOException(\"Failed to read \"\n                                                  + \"Paxheader. Expected \"\n                                                  + restLen\n                                                  + \" bytes, read \"\n                                                  + got + \" for keyword \" + keyword);\n                        }\n                        // Drop trailing NL (restLen - 1 to exclude the last byte which is NL)\n                        final String value = new String(rest, 0,\n                                                  restLen - 1, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                    }\n                    break; // Processed single header entry, break from keyword loop\n                }\n                coll.write((byte) ch); // Accumulate keyword bytes\n            }\n\n            if (!haveEquals) { // Did not find equals sign after keyword, or EOF\n                throw new IOException(\"Malformed Paxheader. Premature EOF or missing '=' after keyword.\");\n            }\n            // The outer 'while(true)' loop continues to the next header entry after a successful parse.\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}