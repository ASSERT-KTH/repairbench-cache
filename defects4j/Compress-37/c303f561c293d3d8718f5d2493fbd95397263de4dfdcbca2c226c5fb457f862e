{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    int ch;\n    outer:\n    while (true) {\n        // 1) Read the first byte of the next record; skip blank lines\n        ch = i.read();\n        if (ch == -1) {\n            break;\n        }\n        if (ch == '\\n') {\n            // blank line, skip\n            continue;\n        }\n        // 2) If it's not a digit, skip until end of line\n        if (ch < '0' || ch > '9') {\n            while (ch != -1 && ch != '\\n') {\n                ch = i.read();\n            }\n            continue;\n        }\n        // 3) Parse the length field\n        int len = ch - '0';\n        int read = 1;\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                // end of length field\n                break;\n            }\n            if (ch < '0' || ch > '9') {\n                // malformed length, skip remainder of this line\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                continue outer;\n            }\n            len = len * 10 + (ch - '0');\n        }\n        if (ch == -1) {\n            break;\n        }\n        // if we didn't actually see the space, skip this record\n        if (ch != ' ') {\n            continue;\n        }\n        // 4) Compute how many bytes remain in this record\n        final int restLen = len - read;\n        if (restLen < 0) {\n            // invalid length, stop parsing\n            break;\n        }\n        // 5) Read the rest of the record in one shot\n        final byte[] rest = new byte[restLen];\n        final int got = IOUtils.readFully(i, rest);\n        if (got != restLen) {\n            throw new IOException(\"Failed to read Paxheader. Expected \"\n                                  + restLen + \" bytes, read \" + got);\n        }\n        if (restLen == 0) {\n            continue;\n        }\n        // rest[] now contains \"keyword=value\\n\" or \"keyword=\\n\"\n        // 6) Find the '=' separator\n        int eq = -1;\n        for (int j = 0; j < restLen; j++) {\n            if (rest[j] == '=') {\n                eq = j;\n                break;\n            }\n        }\n        if (eq < 0) {\n            // no '=', skip\n            continue;\n        }\n        // 7) Extract key and value (dropping the trailing newline)\n        final String key = new String(rest, 0, eq, CharsetNames.UTF_8);\n        // deletion record if only newline follows the '='\n        if (restLen == eq + 2 && rest[restLen - 1] == '\\n') {\n            headers.remove(key);\n        } else {\n            final String value = new String(\n                rest,                  // buffer\n                eq + 1,                // start of value\n                restLen - eq - 2,      // length = total - key - '=' - newline\n                CharsetNames.UTF_8\n            );\n            headers.put(key, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}