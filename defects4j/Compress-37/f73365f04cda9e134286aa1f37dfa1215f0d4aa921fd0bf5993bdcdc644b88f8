{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\"\n    while (true) {\n        // Read one byte and skip any blank lines (i.e. a lone LF).\n        int first = i.read();\n        if (first == -1) { // EOF reached\n            break;\n        }\n        if (first == '\\n') { // skip blank lines\n            continue;\n        }\n        // The record must start with a digit.\n        if (first < '0' || first > '9') {\n            throw new IOException(\"Corrupt PAX header: header length does not start with a digit: \" + (char) first);\n        }\n        int len = first - '0';\n        int read = 1;\n        int ch;\n        // Read remaining digits until a space is found.\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                break;\n            }\n            if (ch < '0' || ch > '9') {\n                throw new IOException(\"Corrupt PAX header: header length contains a non-digit: \" + (char) ch);\n            }\n            len = len * 10 + (ch - '0');\n        }\n        if (ch == -1) {\n            break;\n        }\n        \n        // Read the header keyword until the '=' sign.\n        final ByteArrayOutputStream keywordBuffer = new ByteArrayOutputStream();\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == '=') {\n                break;\n            }\n            keywordBuffer.write((byte) ch);\n        }\n        if (ch == -1) {\n            throw new IOException(\"Unexpected EOF reading PAX header keyword\");\n        }\n        final String keyword = keywordBuffer.toString(CharsetNames.UTF_8);\n        // The rest of the record should be \"value\\n\" where value might be empty.\n        final int restLen = len - read;\n        if (restLen < 1) {\n            throw new IOException(\"Corrupt PAX header: record length \" + len + \" is too small for header \" + keyword);\n        }\n        if (restLen == 1) {\n            // Only newline remains; remove the header.\n            headers.remove(keyword);\n            // Consume the trailing newline.\n            int nl = i.read();\n            if (nl != '\\n') {\n                throw new IOException(\"Expected newline at end of PAX header record\");\n            }\n        } else {\n            // Read the remainder of the header record.\n            final byte[] rest = new byte[restLen];\n            final int got = IOUtils.readFully(i, rest);\n            if (got != restLen) {\n                throw new IOException(\"Failed to read PAX header. Expected \" + \n                                        restLen + \" bytes, read \" + got);\n            }\n            // The final character should be a newline; drop it.\n            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n            headers.put(keyword, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}