{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundLength = false;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' '){\n                foundLength = true;\n                break;\n            }\n            if (ch == '\\n' || ch == '\\r') {\n                // skip blank lines or unexpected line breaks\n                break;\n            }\n            if (ch < '0' || ch > '9') {\n                // invalid length char, skip to next line\n                break;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1){ // EOF\n            break;\n        }\n\n        if (!foundLength || len <= 0) {\n            // skip any invalid or blank lines\n            // consume until newline if partial\n            while (ch != -1 && ch != '\\n') {\n                ch = i.read();\n            }\n            if (ch == -1) {\n                break;\n            } else {\n                continue;\n            }\n        }\n\n        int consumed = read;\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        while((ch = i.read()) != -1) {\n            consumed++;\n            if (ch == '='){ // end of keyword\n                final String keyword = coll.toString(CharsetNames.UTF_8);\n                final int restLen = len - consumed;\n                if (restLen < 0) {\n                    // corrupted length field, skip record\n                    // consume restLen bytes or until newline\n                    for (int skip = 0; skip < (len - read); skip++) {\n                        if (i.read() == -1) {\n                            break;\n                        }\n                    }\n                    break;\n                }\n                if (restLen == 1) { // only NL\n                    headers.remove(keyword);\n                } else {\n                    final byte[] rest = new byte[restLen];\n                    final int got = IOUtils.readFully(i, rest);\n                    if (got != restLen) {\n                        throw new IOException(\"Failed to read \"\n                                              + \"Paxheader. Expected \"\n                                              + restLen\n                                              + \" bytes, read \"\n                                              + got);\n                    }\n                    // Drop trailing NL\n                    final String value = new String(rest, 0,\n                                              restLen - 1, CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                }\n                break;\n            }\n            coll.write((byte) ch);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}