{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while (true) {\n        int ch;\n        int len = 0;\n        int read = 0;\n        // Read the length field, but skip any blank lines (CR/LF)\n        while ((ch = i.read()) != -1) {\n            if (read == 0 && (ch == '\\n' || ch == '\\r')) {\n                // blank line \u2013 skip it and restart length parsing\n                break;\n            }\n            read++;\n            if (ch == ' ') {\n                // end of the length, now read \"keyword=value\\n\"\n                final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                while ((ch = i.read()) != -1) {\n                    read++;\n                    if (ch == '=') {\n                        final String keyword = coll.toString(CharsetNames.UTF_8);\n                        final int restLen = len - read;\n                        if (restLen == 1) {\n                            // only a trailing newline \u2192 remove the header\n                            headers.remove(keyword);\n                        } else if (restLen > 1) {\n                            final byte[] rest = new byte[restLen];\n                            final int got = IOUtils.readFully(i, rest);\n                            if (got != restLen) {\n                                throw new IOException(\"Failed to read Paxheader. Expected \"\n                                        + restLen + \" bytes, read \" + got);\n                            }\n                            // drop trailing newline\n                            String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n                            headers.put(keyword, value);\n                        }\n                        break;\n                    }\n                    coll.write((byte) ch);\n                }\n                break; // processed one header record\n            }\n            // if it's not a digit, skip to end of line and restart\n            if (ch < '0' || ch > '9') {\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                break;\n            }\n            len = len * 10 + (ch - '0');\n        }\n        if (ch == -1) {\n            break;\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}