{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundLength = false;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' '){\n                foundLength = true;\n                break;\n            }\n            if (ch < '0' || ch > '9') {\n                // Skip invalid header line before length\n                // Read up to next LF to discard bad line\n                while (ch != '\\n' && ch != -1) {\n                    ch = i.read();\n                }\n                break;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n        if (!foundLength) {\n            continue; // invalid line, skip\n        }\n        if (len <= 0) {\n            // Skip zero-length or negative length entries (invalid but robust)\n            // Read up to newline to discard rest\n            int bytesSkipped = read; // already counted chars read so far\n            while (bytesSkipped < len) {\n                int skipped = (int) i.skip(len - bytesSkipped);\n                if (skipped <= 0) {\n                    break;\n                }\n                bytesSkipped += skipped;\n            }\n            continue;\n        }\n        final int entryLen = len - read;  // remaining bytes to read\n        if (entryLen < 1) {\n            // Defensive: malformed record (bad length), skip\n            int bytesSkipped = read;\n            while (bytesSkipped < len) {\n                int skipped = (int) i.skip(len - bytesSkipped);\n                if (skipped <= 0) {\n                    break;\n                }\n                bytesSkipped += skipped;\n            }\n            continue;\n        }\n        // Read entryLen bytes\n        final byte[] rest = new byte[entryLen];\n        final int got = IOUtils.readFully(i, rest);\n        if (got != entryLen) {\n            throw new IOException(\"Failed to read Paxheader. Expected \" + entryLen + \" bytes, read \" + got);\n        }\n        // Drop trailing newline\n        int lenWithData = rest.length;\n        if (lenWithData > 0 && rest[lenWithData - 1] == '\\n') {\n            lenWithData--;\n        }\n        if (lenWithData == 0) {\n            continue;  // skip empty lines\n        }\n        final String entry = new String(rest, 0, lenWithData, CharsetNames.UTF_8);\n        final int equalsIdx = entry.indexOf('=');\n        if (equalsIdx != -1) {\n            final String keyword = entry.substring(0, equalsIdx);\n            final String value = entry.substring(equalsIdx + 1);\n            if (value.length() == 0) {\n                headers.remove(keyword);\n            } else {\n                headers.put(keyword, value);\n            }\n        } else {\n            // malformed entry, skip\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}