{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while (true) { // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundDigit = false;\n        // Skip leading whitespace and blank lines\n        while ((ch = i.read()) != -1) {\n            if (ch == ' ' || ch == '\\n' || ch == '\\r' || ch == '\\t') {\n                // skip blank lines and whitespace\n                if (foundDigit) {\n                    // If we already started reading len, break only on SPACE\n                    if (ch == ' ') {\n                        break;\n                    } else {\n                        // It is format error but treat as per blank line, ignore\n                        continue;\n                    }\n                }\n                continue;\n            } else if (ch >= '0' && ch <= '9') {\n                len = len * 10 + (ch - '0');\n                foundDigit = true;\n                read++;\n            } else {\n                // not digit and not whitespace, ignore line (likely corrupt data)\n                // skip until the next line\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                // go to outer while again, try parsing next header\n                foundDigit = false;\n                len = 0;\n                read = 0;\n            }\n            if (foundDigit && ch == ' ') {\n                // already hit space: break out\n                break;\n            }\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n        if (!foundDigit) {\n            // skip blank/invalid line\n            continue;\n        }\n\n        // Get keyword\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == '=') { // end of keyword\n                final String keyword = coll.toString(CharsetNames.UTF_8);\n                // Get rest of entry\n                final int restLen = len - read;\n                if (restLen == 1) { // only NL\n                    headers.remove(keyword);\n                    // read and discard NL\n                    if (i.read() != -1) { }\n                } else if (restLen > 1) {\n                    final byte[] rest = new byte[restLen];\n                    final int got = IOUtils.readFully(i, rest);\n                    if (got != restLen) {\n                        throw new IOException(\"Failed to read \"\n                                + \"Paxheader. Expected \"\n                                + restLen\n                                + \" bytes, read \"\n                                + got);\n                    }\n                    // Drop trailing NL\n                    final String value = new String(rest, 0,\n                            restLen - 1, CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                } else {\n                    // restLen <= 0, means nothing to read (likely blank or malformed line), ignore safely\n                }\n                break;\n            }\n            coll.write((byte) ch);\n        }\n        // Skip any leftover data until the end of the line to recover from malformed lines\n        if (ch == -1) { // EOF\n            break;\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}