{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundLen = false;\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                foundLen = true;\n                break;\n            }\n            if (ch < '0' || ch > '9') {\n                // Ignore illegal record or blank lines (e.g., blank lines in PAX header)\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                read = 0;\n                len = 0;\n                // Restart outer loop to process the next header if any\n                continue;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n        if (!foundLen) {\n            break; // incomplete header, exit loop\n        }\n\n        // Now parse keyword\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == '=') {\n                final String keyword = coll.toString(CharsetNames.UTF_8);\n                final int restLen = len - read;\n                if (restLen < 0) {\n                    // Ignore corrupt record\n                    // skip to the end of record\n                    int skip = 0;\n                    while (skip < len - (read - restLen)) {\n                        int skipped = i.read();\n                        if (skipped == -1) {\n                            break;\n                        }\n                        skip++;\n                    }\n                    break;\n                }\n                if (restLen == 1) { // only NL\n                    headers.remove(keyword);\n                } else {\n                    final byte[] rest = new byte[restLen];\n                    final int got = IOUtils.readFully(i, rest);\n                    if (got != restLen) {\n                        throw new IOException(\"Failed to read Paxheader. Expected \"\n                                + restLen + \" bytes, read \" + got);\n                    }\n                    final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                }\n                break;\n            }\n            coll.write((byte) ch);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}