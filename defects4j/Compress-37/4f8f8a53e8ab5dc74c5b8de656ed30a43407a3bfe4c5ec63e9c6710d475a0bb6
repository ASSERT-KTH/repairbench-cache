{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    // Start with the global pax headers.\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Each entry is formatted as: \"length keyword=value\\n\"\n    // Some archives may include spurious blank lines in the extended header.\nouter:\n    while (true) {\n        // Get the first non-blank character. (Skip blank lines.)\n        int ch = i.read();\n        if (ch == -1) {\n            break;\n        }\n        // If the first char is a newline or carriage-return, ignore it.\n        if (ch == '\\n' || ch == '\\r') {\n            continue;\n        }\n        // The header line must begin with a digit. If not, skip to end of line.\n        if (ch < '0' || ch > '9') {\n            while (ch != '\\n' && ch != -1) {\n                ch = i.read();\n            }\n            continue;\n        }\n        // We already have one digit.\n        int len = ch - '0';\n        int readCount = 1;\n        // Continue collecting digits until we hit the space separator.\n        while (true) {\n            ch = i.read();\n            if (ch == -1) {\n                break outer;\n            }\n            readCount++;\n            if (ch == ' ') {\n                break;\n            }\n            if (ch < '0' || ch > '9') {\n                // Malformed length field: skip to end of line.\n                while (ch != '\\n' && ch != -1) {\n                    ch = i.read();\n                }\n                continue outer;\n            }\n            len = len * 10 + (ch - '0');\n        }\n        // Now read the \"keyword\" part up to the '='.\n        final ByteArrayOutputStream keywordOut = new ByteArrayOutputStream();\n        while (true) {\n            ch = i.read();\n            if (ch == -1) {\n                break outer;\n            }\n            readCount++;\n            if (ch == '=') {\n                break;\n            }\n            keywordOut.write((byte) ch);\n        }\n        final String keyword = keywordOut.toString(CharsetNames.UTF_8);\n        // Calculate how many bytes remain in this header entry.\n        int restLen = len - readCount;\n        if (restLen <= 0) {\n            // This header line is malformed (or blank); skip it.\n            continue;\n        }\n        if (restLen == 1) {\n            // Only a trailing newline remains. Per spec, in this case the header should be removed.\n            headers.remove(keyword);\n            // The single trailing newline is still in the stream and will be skipped as a blank line.\n        } else {\n            // Read the remaining bytes in this header entry.\n            final byte[] rest = new byte[restLen];\n            final int got = IOUtils.readFully(i, rest);\n            if (got != restLen) {\n                throw new IOException(\"Failed to read Paxheader. Expected \" + restLen + \" bytes, read \" + got);\n            }\n            // The final byte is the newline; drop it from the value.\n            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n            headers.put(keyword, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}