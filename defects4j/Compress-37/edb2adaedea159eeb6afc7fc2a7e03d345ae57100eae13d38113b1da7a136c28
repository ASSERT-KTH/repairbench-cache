{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean sawDigit = false;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' '){\n                break;\n            }\n            if ('0' <= ch && ch <= '9') {\n                len *= 10;\n                len += ch - '0';\n                sawDigit = true;\n            } else {\n                // skip invalid lines (including blank lines)\n                // skip until next NL\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                // continue to next header line\n                break;\n            }\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n        if (!sawDigit) {\n            // skip blank or invalid line and continue to next\n            continue;\n        }\n        // now process the rest of the line: 'keyword=value\\n'\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        String keyword = null;\n        int valueStartRead = read;\n        int keywordLen = 0;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == '='){ // end of keyword\n                keyword = coll.toString(CharsetNames.UTF_8);\n                break;\n            }\n            coll.write((byte) ch);\n            keywordLen++;\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n        final int restLen = len - read;\n        if (restLen < 0) {\n            // invalid line: length counts less than read bytes, likely a corrupted/blank/invalid header, skip it\n            // skip to next NL\n            while (ch != -1 && ch != '\\n') {\n                ch = i.read();\n            }\n            continue;\n        }\n        if (restLen == 1) { // only NL\n            headers.remove(keyword);\n            // also skip the trailing NL byte\n            i.read();\n        } else if (restLen > 1) {\n            final byte[] rest = new byte[restLen];\n            final int got = IOUtils.readFully(i, rest);\n            if (got != restLen) {\n                throw new IOException(\"Failed to read \"\n                                      + \"Paxheader. Expected \"\n                                      + restLen\n                                      + \" bytes, read \"\n                                      + got);\n            }\n            // Drop trailing NL\n            final String value = new String(rest, 0,\n                                            restLen - 1, CharsetNames.UTF_8);\n            headers.put(keyword, value);\n        } else {\n            // restLen == 0, just skip\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}