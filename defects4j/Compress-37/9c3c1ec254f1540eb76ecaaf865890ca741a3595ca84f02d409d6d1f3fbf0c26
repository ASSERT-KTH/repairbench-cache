{
    "generation": "    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while(true){ // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            while((ch = i.read()) != -1 && Character.isDigit((char)ch)) { // Check if ch is a digit before parsing\n                read++;\n                len *= 10;\n                len += ch - '0';\n            }\n            if (ch == -1){ // EOF\n                break;\n            }\n            if (ch != ' '){\n                throw new IOException(\"Invalid Paxheader encountered\");\n            }\n            read++; // Consume the space character\n            // Get keyword\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            while((ch = i.read()) != -1) {\n                read++;\n                if (ch == '='){ // end of keyword\n                    final String keyword = coll.toString(CharsetNames.UTF_8);\n                    // Get rest of entry\n                    final int restLen = len - read;\n                    if (restLen <= 1) { // Pax headers must be terminated by a NL, so restLen == 1 is valid, anything less is not\n                        if (restLen == 1) {\n                            // Consume the NL\n                            i.read();\n                        }\n                        headers.remove(keyword);\n                    } else {\n                        final byte[] rest = new byte[restLen - 1]; // Subtract 1 to account for the NL\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != restLen - 1) {\n                            throw new IOException(\"Failed to read \"\n                                                  + \"Paxheader. Expected \"\n                                                  + (restLen - 1)\n                                                  + \" bytes, read \"\n                                                  + got);\n                        }\n                        // The String constructor will handle the UTF-8 encoding\n                        final String value = new String(rest, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                        // Consume the NL\n                        i.read(); // This should be the NL, not checked as the stream may be closed after this\n                    }\n                    break;\n                }\n                coll.write((byte) ch);\n            }\n            if (ch == -1){ // EOF\n                break;\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}