{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    int c;\n    while (true) {\n        // Read first byte of the next record\n        c = i.read();\n        if (c == -1) {\n            // End of the pax header stream\n            break;\n        }\n        // Skip blank lines or stray CR/LF\n        if (c == '\\n' || c == '\\r') {\n            continue;\n        }\n        // First non\u2010blank char must be a digit (the length); otherwise skip to EOL\n        if (c < '0' || c > '9') {\n            do {\n                c = i.read();\n            } while (c != -1 && c != '\\n');\n            continue;\n        }\n        // Parse the length field\n        int len = c - '0';\n        int read = 1;\n        while ((c = i.read()) != -1) {\n            read++;\n            if (c == ' ') {\n                break;\n            }\n            if (c >= '0' && c <= '9') {\n                len = len * 10 + (c - '0');\n            } else {\n                // Malformed length, skip rest of line\n                while (c != -1 && c != '\\n') {\n                    c = i.read();\n                }\n                len = 0;\n                read = 0;\n                break;\n            }\n        }\n        if (c == -1) {\n            break;\n        }\n        if (read == 0) {\n            // We skipped a bad length line; go on to the next\n            continue;\n        }\n        // Read the keyword up to '='\n        final ByteArrayOutputStream keyBuf = new ByteArrayOutputStream();\n        while ((c = i.read()) != -1) {\n            read++;\n            if (c == '=') {\n                break;\n            }\n            keyBuf.write(c);\n        }\n        if (c == -1) {\n            break;\n        }\n        final String keyword = keyBuf.toString(CharsetNames.UTF_8);\n        // Compute how many bytes remain in this record (value + trailing newline)\n        final int restLen = len - read;\n        if (restLen <= 0) {\n            // Nothing or malformed, skip\n            continue;\n        }\n        if (restLen == 1) {\n            // Only a newline remains => delete this key\n            i.read(); // consume the lone '\\n'\n            headers.remove(keyword);\n        } else {\n            // Read value + newline\n            final byte[] rest = new byte[restLen];\n            final int got = IOUtils.readFully(i, rest);\n            if (got != restLen) {\n                throw new IOException(\"Failed to read Paxheader. Expected \"\n                                      + restLen + \" bytes, read \" + got);\n            }\n            // Drop the trailing newline\n            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n            headers.put(keyword, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}