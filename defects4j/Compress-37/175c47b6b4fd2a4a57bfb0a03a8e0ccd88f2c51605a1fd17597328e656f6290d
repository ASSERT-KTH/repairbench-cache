{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean gotLen = false;\n\n        // Read length\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' '){\n                gotLen = true;\n                break;\n            }\n            // skip blanks, or handle blank lines\n            if ((ch < '0' || ch > '9')) {\n                // If the line is actually blank (e.g., just \\n), skip to next\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                read = 0;\n                len = 0;\n                continue; // skip this line\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1){ // EOF\n            break;\n        }\n        if (!gotLen) {\n            // didn't find a valid length, probably end of headers\n            break;\n        }\n        // check for blank or invalid lines\n        if (len <= 0) {\n            // skip this line\n            for (int skip = 0; skip < 8192; skip++) { // safety limit\n                ch = i.read();\n                if (ch == -1 || ch == '\\n') break;\n            }\n            continue;\n        }\n\n        // Get keyword\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == '='){ // end of keyword\n                final String keyword = coll.toString(CharsetNames.UTF_8);\n                // Get rest of entry\n                final int restLen = len - read;\n                if (restLen < 1) {\n                    // skip invalid entry and continue\n                    // finish reading to \\n, if possible\n                    for (int skip = 0; skip < 8192 && (restLen - skip) > 0; skip++) {\n                        int nextCh = i.read();\n                        if (nextCh == -1 || nextCh == '\\n') break;\n                    }\n                    break; // skip this header, try next\n                } else if (restLen == 1) { // only NL\n                    headers.remove(keyword);\n                } else {\n                    final byte[] rest = new byte[restLen];\n                    final int got = IOUtils.readFully(i, rest);\n                    if (got != restLen) {\n                        throw new IOException(\"Failed to read \"\n                                              + \"Paxheader. Expected \"\n                                              + restLen\n                                              + \" bytes, read \"\n                                              + got);\n                    }\n                    // Drop trailing NL\n                    final String value = new String(rest, 0,\n                                              restLen - 1, CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                }\n                break;\n            }\n            coll.write((byte) ch);\n        }\n        // Continue to next header\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}