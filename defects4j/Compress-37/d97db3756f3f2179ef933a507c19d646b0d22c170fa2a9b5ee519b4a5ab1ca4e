{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<>(globalPaxHeaders);\n    while (true) {\n        int ch;\n        // 1) skip any stray blank lines\n        do {\n            ch = i.read();\n            if (ch == -1) {\n                return headers;\n            }\n        } while (ch == '\\n');\n        // 2) if it doesn't start with a digit, skip the rest of the line\n        if (ch < '0' || ch > '9') {\n            while (ch != -1 && ch != '\\n') {\n                ch = i.read();\n            }\n            continue;\n        }\n        // 3) parse the length field\n        int len = ch - '0';\n        int read = 1;\n        while (true) {\n            ch = i.read();\n            if (ch == -1) {\n                return headers;\n            }\n            if (ch >= '0' && ch <= '9') {\n                len = len * 10 + (ch - '0');\n                read++;\n            } else {\n                break;\n            }\n        }\n        // if not followed by a space, it's malformed; skip to line end\n        if (ch != ' ') {\n            while (ch != -1 && ch != '\\n') {\n                ch = i.read();\n            }\n            continue;\n        }\n        // consume the space\n        read++;\n        // 4) read the keyword up to '='\n        final ByteArrayOutputStream keyBuf = new ByteArrayOutputStream();\n        while (true) {\n            ch = i.read();\n            if (ch == -1) {\n                return headers;\n            }\n            read++;\n            if (ch == '=') {\n                break;\n            }\n            keyBuf.write((byte) ch);\n        }\n        final String keyword = keyBuf.toString(CharsetNames.UTF_8);\n        // 5) compute how many bytes remain in this record (value + newline)\n        final int restLen = len - read;\n        if (restLen <= 0) {\n            // malformed or no payload, skip to end of line\n            while (ch != -1 && ch != '\\n') {\n                ch = i.read();\n            }\n            continue;\n        }\n        if (restLen == 1) {\n            // only a newline => treat as deletion\n            i.read(); // consume the '\\n'\n            headers.remove(keyword);\n        } else {\n            // read value bytes (including trailing '\\n')\n            final byte[] rest = new byte[restLen];\n            final int got = IOUtils.readFully(i, rest);\n            if (got != restLen) {\n                throw new IOException(\"Failed to read PAX header. Expected \"\n                                      + restLen + \" bytes, read \" + got);\n            }\n            // drop the trailing newline\n            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n            headers.put(keyword, value);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}