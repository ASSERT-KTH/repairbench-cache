{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundDigit = false;\n        // Skip initial blank lines or invalid lines\n        while((ch = i.read()) != -1) {\n            if (ch == '\\n' || ch == '\\r') {\n                // skip blank lines\n                continue;\n            }\n            if (Character.isWhitespace(ch)) {\n                // skip leading whitespace (shouldn't be in valid pax record, but be lenient)\n                continue;\n            }\n            if (Character.isDigit(ch)) {\n                len = ch - '0';\n                foundDigit = true;\n                read = 1;\n                break;\n            } else {\n                // skip invalid/broken lines\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                // if EOF, break outer loop\n                if (ch == -1) {\n                    break;\n                }\n                // else continue reading next line\n            }\n        }\n        if (!foundDigit || ch == -1){\n            break; // EOF\n        }\n\n        // read remaining length digits\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' '){\n                break;\n            }\n            if (!Character.isDigit(ch)) {\n                // corrupt line, skip rest of this line\n                while(ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                break;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1){\n            break; // EOF\n        }\n        if (len <= 0) {\n            // skip invalid zero-length or negative length records\n            continue;\n        }\n        int restLen = len - read;\n        if (restLen <= 0) {\n            // skip invalid records\n            // consume line end if needed\n            if (restLen == 0) {\n                int skipCh = i.read();\n                if (skipCh == -1) {\n                    break;\n                }\n            }\n            continue;\n        }\n\n        final byte[] rest = new byte[restLen];\n        final int got = IOUtils.readFully(i, rest);\n        if (got != restLen) {\n            throw new IOException(\"Failed to read Paxheader. Expected \"\n                                  + restLen + \" bytes, read \" + got);\n        }\n        // rest contains: \"keyword=value\\n\"\n        int equals = -1;\n        for (int k = 0; k < restLen; k++) {\n            if (rest[k] == (byte) '=') {\n                equals = k;\n                break;\n            }\n        }\n        if (equals == -1) {\n            // invalid header record, skip\n            continue;\n        }\n        final String keyword = new String(rest, 0, equals, CharsetNames.UTF_8);\n        final String value = new String(rest, equals + 1, restLen - equals - 2, CharsetNames.UTF_8); // exclude trailing \\n\n        if (rest[restLen -1] != (byte) '\\n') {\n            // Should end on \\n, be lenient\n        }\n        if (value.length() == 0) {\n            headers.remove(keyword);\n        } else {\n            headers.put(keyword, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}