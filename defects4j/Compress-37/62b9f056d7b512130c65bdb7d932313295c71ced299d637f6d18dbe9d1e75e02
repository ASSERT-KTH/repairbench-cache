{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n    final Map<String, String> headers = new HashMap<>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while (true) { // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                // Get keyword\n                final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                while ((ch = i.read()) != -1) {\n                    read++;\n                    if (ch == '=') { // end of keyword\n                        final String keyword = coll.toString(CharsetNames.UTF_8);\n                        // Get rest of entry\n                        final int restLen = len - read;\n                        if (restLen <= 0) { // handle blank lines or invalid entries\n                            if (restLen == 0) {\n                                // Blank line, skip to next line\n                                while ((ch = i.read()) != -1 && ch != '\\n') {\n                                    // Skip characters until newline\n                                }\n                            } else {\n                                throw new IOException(\"Invalid Pax header format: rest length is negative\");\n                            }\n                            break;\n                        } else {\n                            final byte[] rest = new byte[restLen];\n                            final int got = IOUtils.readFully(i, rest);\n                            if (got != restLen) {\n                                throw new IOException(\"Failed to read Paxheader. Expected \"\n                                                      + restLen\n                                                      + \" bytes, read \"\n                                                      + got);\n                            }\n                            // Drop trailing NL\n                            final String value = new String(rest, 0,\n                                                      restLen - 1, CharsetNames.UTF_8);\n                            headers.put(keyword, value);\n                        }\n                        break;\n                    }\n                    coll.write((byte) ch);\n                }\n                break; // Processed single header\n            }\n            if (ch < '0' || ch > '9') {\n                throw new IOException(\"Invalid Pax header format: non-numeric length character\");\n            }\n            len = len * 10 + (ch - '0');\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}