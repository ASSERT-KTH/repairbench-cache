{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while (true) { // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundLength = false;\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                foundLength = true;\n                break;\n            }\n            if (ch == '\\n') { // skip blank line or ignore empty line\n                // reset read and len, start again to find next record\n                read = 0;\n                len = 0;\n                continue;\n            }\n            if (ch < '0' || ch > '9') {\n                throw new IOException(\"Invalid length character in PaxHeader: \" + ch);\n            }\n            len = len * 10 + (ch - '0');\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n        if (!foundLength) {\n            // should not happen, but just in case\n            break;\n        }\n        // Edge case: If it was a blank line (len=0), skip reading that record\n        if (len <= 0) {\n            // skip ignoring blank line\n            continue;\n        }\n        int keywordLength = 0;\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == '=') { // end of keyword\n                final String keyword = coll.toString(CharsetNames.UTF_8);\n                final int restLen = len - read;\n                if (restLen < 0) {\n                    throw new IOException(\"Invalid Paxheader record length\");\n                }\n                if (restLen == 1) { // only NL\n                    headers.remove(keyword);\n                } else {\n                    final byte[] rest = new byte[restLen];\n                    final int got = IOUtils.readFully(i, rest);\n                    if (got != restLen) {\n                        throw new IOException(\"Failed to read \"\n                                + \"Paxheader. Expected \"\n                                + restLen\n                                + \" bytes, read \"\n                                + got);\n                    }\n                    // Drop trailing NL\n                    final String value = new String(rest, 0,\n                            restLen - 1, CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                }\n                break;\n            }\n            coll.write((byte) ch);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}