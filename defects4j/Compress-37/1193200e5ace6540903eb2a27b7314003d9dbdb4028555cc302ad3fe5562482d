{
    "generation": "    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while(true) { // Process each line\n            int ch;\n            int len = 0;\n            int read = 0;\n            // Read length until space\n            while((ch = i.read()) != -1) {\n                read++;\n                if (ch == ' ') {\n                    break;\n                }\n                if (ch < '0' || ch > '9') { // Check for non-digit characters\n                    // Invalid length, skip the line\n                    len = -1; // Mark as invalid\n                    break;\n                }\n                len *= 10;\n                len += ch - '0';\n            }\n            if (ch == -1) { // EOF\n                break;\n            }\n            if (len < 0) { // Non-digit encountered in length\n                // Skip to end of line\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                continue;\n            }\n            final int restLen = len - read;\n            if (restLen < 0) { // Invalid remaining length\n                // Skip to end of line\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                continue;\n            }\n            if (restLen == 0) { // No data after length and space\n                continue;\n            }\n            // Read keyword and value\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            boolean validKeyword = true;\n            while (restLen > 0 && (ch = i.read()) != -1) {\n                restLen--;\n                if (ch == '=') {\n                    final String keyword = coll.toString(CharsetNames.UTF_8);\n                    if (restLen == 1) { // Only newline remains\n                        headers.remove(keyword);\n                    } else {\n                        final byte[] rest = new byte[restLen];\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != restLen) {\n                            throw new IOException(\"Failed to read Paxheader. Expected \" + restLen + \" bytes, read \" + got);\n                        }\n                        final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                    }\n                    validKeyword = true;\n                    break;\n                }\n                coll.write((byte) ch);\n                validKeyword = false;\n            }\n            if (!validKeyword) { // No '=' found in keyword\n                // Skip remaining bytes if any\n                final int remaining = restLen - coll.size();\n                if (remaining > 0) {\n                    IOUtils.skipFully(i, remaining);\n                }\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}