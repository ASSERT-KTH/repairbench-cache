{
    "generation": "    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while(true){ // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            // Read length (until space)\n            while((ch = i.read()) != -1) {\n                read++;\n                if (ch == ' '){\n                    break;\n                }\n                len *= 10;\n                len += ch - '0';\n            }\n            if (ch == -1){ // EOF\n                break;\n            }\n\n            // Now read the rest of the line: keyword=value\\n\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            while((ch = i.read()) != -1) {\n                read++;\n                if (ch == '='){ // end of keyword\n                    final String keyword = coll.toString(CharsetNames.UTF_8);\n                    // Get rest of entry\n                    final int restLen = len - read;\n                    if (restLen <= 0) { // includes cases where restLen is 0 or negative\n                        // Just skip this line (likely blank line)\n                        // Read until newline to skip the rest of the line\n                        while((ch = i.read()) != -1 && ch != '\\n') {\n                            // skip characters until newline\n                        }\n                        break;\n                    } else {\n                        final byte[] rest = new byte[restLen];\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != restLen) {\n                            throw new IOException(\"Failed to read \"\n                                                  + \"Paxheader. Expected \"\n                                                  + restLen\n                                                  + \" bytes, read \"\n                                                  + got);\n                        }\n                        // Drop trailing NL\n                        final String value = new String(rest, 0,\n                                                  restLen - 1, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                        // Read the newline character\n                        i.read();\n                    }\n                    break; // Processed single header\n                }\n                coll.write((byte) ch);\n            }\n            if (ch == -1 || (ch == '\\n' && read == 1)) { // EOF or blank line\n                // Read until next line if blank line\n                while((ch = i.read()) != -1 && ch != '\\n') {\n                    // skip line\n                }\n                continue;\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}