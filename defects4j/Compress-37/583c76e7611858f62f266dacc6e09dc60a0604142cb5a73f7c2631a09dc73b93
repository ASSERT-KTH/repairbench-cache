{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundLength = false;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' '){\n                foundLength = true;\n                break; // length read finished\n            }\n            if (ch < '0' || ch > '9') {\n                // Invalid character while reading length, skip rest of line\n                do {\n                    ch = i.read();\n                    if (ch == -1) {\n                        break;\n                    }\n                } while (ch != '\\n');\n                break; // skip this line, try next\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n        if (!foundLength || len <= 0) {\n            continue; // ignore blank/bad line\n        }\n\n        int dataLen = len - read;\n        if (dataLen <= 0) {\n            // skip this record if no data after length\n            // likely a blank or corrupt line\n            // skip up to NL to avoid corrupting next record\n            int remaining = len - read;\n            while (remaining > 0) {\n                int skipped = (int) i.skip(remaining);\n                if (skipped <= 0) {\n                    if (i.read() == -1) {\n                        break;\n                    } else {\n                        skipped = 1;\n                    }\n                }\n                remaining -= skipped;\n            }\n            continue;\n        }\n\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        // read keyword\n        int keywordBytes = 0;\n        while ((ch = i.read()) != -1) {\n            read++;\n            dataLen--;\n            keywordBytes++;\n            if (ch == '=') {\n                break;\n            }\n            coll.write((byte) ch);\n            if (dataLen == 0) {\n                break;\n            }\n        }\n        if (ch == -1 || dataLen < 0) {\n            break;\n        }\n        final String keyword = coll.toString(CharsetNames.UTF_8);\n\n        final int restLen = dataLen;\n        if (restLen < 1) {\n            headers.remove(keyword);\n            // consume trailing newlines if any\n            continue;\n        } else {\n            final byte[] rest = new byte[restLen];\n            final int got = IOUtils.readFully(i, rest);\n            if (got != restLen) {\n                throw new IOException(\"Failed to read \"\n                                      + \"Paxheader. Expected \"\n                                      + restLen\n                                      + \" bytes, read \"\n                                      + got);\n            }\n            // Drop trailing NL\n            final String value = new String(rest, 0,\n                                      restLen - 1, CharsetNames.UTF_8);\n            headers.put(keyword, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}