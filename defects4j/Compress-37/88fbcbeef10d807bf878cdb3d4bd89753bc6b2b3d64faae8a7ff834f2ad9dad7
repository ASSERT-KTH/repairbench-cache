{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundLen = false;\n        // First, parse the length field (as ASCII digits terminated by space).\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                foundLen = true;\n                break;\n            } else if (ch == '\\n' || ch == '\\r') {\n                // Malformed or blank line, skip to next line\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                break;\n            } else {\n                if (ch < '0' || ch > '9') {\n                    // Malformed line, skip it.\n                    while (ch != -1 && ch != '\\n') {\n                        ch = i.read();\n                    }\n                    break;\n                }\n                len *= 10;\n                len += ch - '0';\n            }\n        }\n        if (ch == -1 || !foundLen) { // EOF or not found length (blank line/malformed)\n            break;\n        }\n        if (len <= 0) {\n            // skip line of invalid length\n            for (int skip = 0; skip < len - 1; skip++) {\n                if (i.read() == -1) break;\n            }\n            continue;\n        }\n        // We have len (the full size of the record including digits, space, keyword, value, newline)\n        // We already read 'read' bytes.\n        // Read the rest into a buffer\n        int restLen = len - read;\n        if (restLen <= 0) { // malformed\n            // skip line of invalid length\n            continue;\n        }\n        byte[] rest = new byte[restLen];\n        int got = IOUtils.readFully(i, rest);\n        if (got != restLen) {\n            throw new IOException(\"Failed to read Paxheader. Expected \" + restLen + \" bytes, read \" + got);\n        }\n        // Find '=' separator\n        int eq = -1, nl = restLen - 1;\n        for (int j = 0; j < restLen; j++) {\n            if (rest[j] == '=' && eq == -1)\n                eq = j;\n        }\n        if (eq == -1) {\n            // Malformed entry, ignore\n            continue;\n        }\n        String keyword = new String(rest, 0, eq, CharsetNames.UTF_8);\n        String value = new String(rest, eq + 1, nl - eq, CharsetNames.UTF_8);\n        if (value.length() > 0 && value.charAt(value.length() - 1) == '\\n') {\n            value = value.substring(0, value.length() - 1);\n        }\n        if (rest[nl] != '\\n') {\n            // Malformed, entry should end in '\\n' per pax spec\n            continue;\n        }\n        if (keyword.length() == 0) {\n            // skip bad entry (likely a blank line or misplaced NL)\n            continue;\n        }\n        if (len == read + 1) { // only NL after keyword, per old logic\n            headers.remove(keyword);\n        } else {\n            headers.put(keyword, value);\n        }\n        // continue parsing next header\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}