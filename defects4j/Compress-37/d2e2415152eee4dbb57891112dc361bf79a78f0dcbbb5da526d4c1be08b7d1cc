{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while (true) { // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundLen = false;\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == '\\n' || ch == '\\r') {\n                // This handles possible blank lines in Pax headers;\n                // skip and try to read a new header.\n                continue;\n            }\n            if (ch == ' ') {\n                foundLen = true;\n                break;\n            }\n            if (ch < '0' || ch > '9') {\n                // Invalid line (possibly blank or garbage), skip to next line\n                // Consume until newline or EOF\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                read = 0;\n                len = 0;\n                continue;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1) { // EOF\n            break;\n        }\n        if (!foundLen) {\n            // encountered EOF or error before length was found\n            break;\n        }\n        // Now, parse keyword\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == '=') { // end of keyword\n                final String keyword = coll.toString(CharsetNames.UTF_8);\n                // Get rest of entry\n                final int restLen = len - read;\n                if (restLen < 0) {\n                    // Malformed header, skip (e.g. blank line previously, or garbage header length)\n                    // skip remaining characters in line\n                    for(; read < len; read++) {\n                        if (i.read() == -1) {\n                            break;\n                        }\n                    }\n                    break; // move to next header\n                }\n                if (restLen == 1) { // only NL\n                    headers.remove(keyword);\n                } else if (restLen >= 1) {\n                    final byte[] rest = new byte[restLen];\n                    final int got = IOUtils.readFully(i, rest);\n                    if (got != restLen) {\n                        throw new IOException(\"Failed to read \"\n                                + \"Paxheader. Expected \"\n                                + restLen\n                                + \" bytes, read \"\n                                + got);\n                    }\n                    // Drop trailing NL\n                    final String value = new String(rest, 0,\n                            restLen - 1, CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                }\n                break;\n            }\n            coll.write((byte) ch);\n        }\n        // At this point, we should have processed one Pax header; continue to next one.\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}