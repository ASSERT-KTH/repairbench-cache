{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\nHEADER:\n    while (true) {\n        int ch = i.read();\n        if (ch == -1) {\n            break;\n        }\n        // Skip any lines that do not begin with a digit.\n        if (!Character.isDigit(ch)) {\n            while (ch != -1 && ch != '\\n') {\n                ch = i.read();\n            }\n            continue;\n        }\n        int len = ch - '0';\n        int read = 1;\n        // Read the rest of the length field (digits) until a space.\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                break;\n            }\n            if (!Character.isDigit(ch)) {\n                // Found an unexpected character; skip to the end of the line.\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                continue HEADER;\n            }\n            len = len * 10 + (ch - '0');\n        }\n        if (ch == -1) {\n            break;\n        }\n        // Now read the keyword (which ends at an '=' character).\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == '=') {\n                break;\n            }\n            coll.write((byte) ch);\n        }\n        if (ch == -1) {\n            break;\n        }\n        // Calculate the number of bytes left (this should include the trailing newline).\n        int restLen = len - read;\n        if (restLen < 1) {\n            // This header record is blank or invalid (for example, a blank line); just ignore it.\n            continue;\n        }\n        final String keyword = coll.toString(CharsetNames.UTF_8);\n        if (restLen == 1) { // Only the newline remains, so remove the attribute.\n            headers.remove(keyword);\n            // Consume the trailing newline.\n            i.read();\n        } else {\n            final byte[] rest = new byte[restLen];\n            final int got = IOUtils.readFully(i, rest);\n            if (got != restLen) {\n                throw new IOException(\"Failed to read Paxheader. Expected \" +\n                                      restLen + \" bytes, read \" + got);\n            }\n            // Drop the trailing newline.\n            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n            headers.put(keyword, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}