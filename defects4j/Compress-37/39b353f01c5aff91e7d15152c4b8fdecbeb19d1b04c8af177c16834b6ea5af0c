{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    while (true) {\n        int b = i.read();\n        if (b == -1) {\n            // end of stream\n            break;\n        }\n        if (b == '\\n') {\n            // skip blank line\n            continue;\n        }\n        if (b < '0' || b > '9') {\n            // not a length field, skip to end of line\n            int c;\n            while ((c = i.read()) != -1 && c != '\\n') {\n                // skip\n            }\n            continue;\n        }\n        // we've seen a digit, parse the length field\n        StringBuilder lenSb = new StringBuilder();\n        lenSb.append((char) b);\n        while ((b = i.read()) != -1 && b != ' ') {\n            if (b < '0' || b > '9') {\n                throw new IOException(\"Invalid PAX header length byte: \" + b);\n            }\n            lenSb.append((char) b);\n        }\n        if (b != ' ') {\n            throw new IOException(\"Unexpected EOF reading PAX header length\");\n        }\n        final int len;\n        try {\n            len = Integer.parseInt(lenSb.toString());\n        } catch (NumberFormatException e) {\n            throw new IOException(\"Invalid PAX header length: \" + lenSb, e);\n        }\n        // subtract the digits and the space we just consumed\n        int toRead = len - lenSb.length() - 1;\n        if (toRead < 0) {\n            throw new IOException(\"Invalid PAX header, length=\" + len);\n        }\n        // read the rest of the record\n        byte[] rest = new byte[toRead];\n        int got = IOUtils.readFully(i, rest);\n        if (got != toRead) {\n            throw new IOException(\"Failed to read PAX header. Expected \"\n                                  + toRead + \" bytes, read \" + got);\n        }\n        if (toRead == 0) {\n            // nothing after the length/space\n            continue;\n        }\n        // must end in newline\n        if (rest[rest.length - 1] != '\\n') {\n            throw new IOException(\"PAX header record does not end with NL: \"\n                                  + new String(rest, CharsetNames.UTF_8));\n        }\n        // drop the trailing newline\n        String record = new String(rest, 0, rest.length - 1, CharsetNames.UTF_8);\n        int eq = record.indexOf('=');\n        if (eq < 0) {\n            // malformed entry\n            continue;\n        }\n        String key = record.substring(0, eq);\n        String value = record.substring(eq + 1);\n        if (value.isEmpty()) {\n            headers.remove(key);\n        } else {\n            headers.put(key, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}