{
    "generation": "    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while (true) { // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            while ((ch = i.read()) != -1) {\n                read++;\n                if (ch == ' ') {\n                    // Get keyword\n                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                    while ((ch = i.read()) != -1) {\n                        read++;\n                        if (ch == '=') { // end of keyword\n                            final String keyword = coll.toString(StandardCharsets.UTF_8);\n                            // Get rest of entry\n                            final int restLen = len - read;\n                            if (restLen == 1) { // only NL\n                                headers.remove(keyword);\n                            } else if (restLen > 0) { // Ensure restLen is positive\n                                final byte[] rest = new byte[restLen];\n                                final int got = IOUtils.readFully(i, rest);\n                                if (got != restLen) {\n                                    throw new IOException(\"Failed to read Paxheader. Expected \"\n                                                          + restLen\n                                                          + \" bytes, read \"\n                                                          + got);\n                                }\n                                // Drop trailing NL\n                                final String value = new String(rest, 0, restLen - 1, StandardCharsets.UTF_8);\n                                headers.put(keyword, value);\n                            } else {\n                                // Handle invalid length by skipping the rest of the line\n                                while ((ch = i.read()) != -1 && ch != '\\n') {\n                                    // Skip characters until newline or EOF\n                                }\n                            }\n                            break;\n                        }\n                        coll.write((byte) ch);\n                    }\n                    break; // Processed single header\n                } else if (ch < '0' || ch > '9') {\n                    // Handle invalid character by skipping the rest of the line\n                    while ((ch = i.read()) != -1 && ch != '\\n') {\n                        // Skip characters until newline or EOF\n                    }\n                    break;\n                }\n                len = len * 10 + (ch - '0');\n            }\n            if (ch == -1) { // EOF\n                break;\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}