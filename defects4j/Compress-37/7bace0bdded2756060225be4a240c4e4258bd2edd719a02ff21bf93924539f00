{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundLength = false;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' '){\n                foundLength = true;\n                break;\n            }\n            if (ch == '\\n' || ch == '\\r') {\n                // blank line or invalid header line, skip it\n                len = 0;\n                read = 0;\n                continue;\n            }\n            if (ch < '0' || ch > '9') {\n                throw new IOException(\"Invalid character '\" + (char) ch\n                        + \"' in Pax header length\");\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1){ // EOF\n            break;\n        }\n        if (!foundLength || len <= 0) {\n            continue; // skip the blank or invalid line\n        }\n        int restLen = len - read;\n        if (restLen <= 0) {\n            // invalid record length, skip this record\n            // but attempt to resync by reading remaining bytes if any\n            for (int skipped = 0; skipped < -restLen; skipped++) {\n                if (i.read() == -1) break;\n            }\n            continue;\n        }\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        int keywordBytes = 0;\n        while((ch = i.read()) != -1) {\n            read++;\n            restLen--;\n            keywordBytes++;\n            if (ch == '='){ // end of keyword\n                final String keyword = coll.toString(CharsetNames.UTF_8);\n                final byte[] rest = new byte[restLen];\n                final int got = IOUtils.readFully(i, rest);\n                if (got != restLen) {\n                    throw new IOException(\"Failed to read \"\n                                          + \"Paxheader. Expected \"\n                                          + restLen\n                                          + \" bytes, read \"\n                                          + got);\n                }\n                // Drop trailing NL\n                final String value = new String(rest, 0,\n                                          restLen - 1, CharsetNames.UTF_8);\n                if (restLen == 1) { // only NL\n                    headers.remove(keyword);\n                } else {\n                    headers.put(keyword, value);\n                }\n                break;\n            }\n            coll.write((byte) ch);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}