{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean foundLength = false;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                foundLength = true;\n                break;\n            }\n            if (ch == '\\n') {\n                // skip blank line (e.g., empty line, or invalid with only newline)\n                break;\n            }\n            if (ch < '0' || ch > '9') {\n                // invalid character in length, skip remainder of the line\n                while(ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                break;\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n\n        if (ch == -1) { // EOF\n            break;\n        }\n        if (!foundLength) {\n            // blank or invalid line skipped\n            continue;\n        }\n        if (len <= 0) {\n            // invalid length, skip this record\n            continue;\n        }\n\n        // At this point, we've read to the space, and have a positive len length\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        int keywordLen = 0;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == '=') { // end of keyword\n                break;\n            }\n            coll.write((byte) ch);\n            keywordLen++;\n        }\n\n        final String keyword = coll.toString(CharsetNames.UTF_8);\n        final int restLen = len - read;\n        if (restLen < 0) {\n            // Malformed header, skip this record\n            // Consume remaining bytes to resync\n            for(int skip = len - (read - 1); skip > 0; skip--){\n                if(i.read() == -1) break; \n            }\n            continue;\n        }\n\n        if (restLen == 1) { // only NL\n            headers.remove(keyword);\n            // consume the trailing newline\n            i.read();\n        } else {\n            final byte[] rest = new byte[restLen];\n            final int got = IOUtils.readFully(i, rest);\n            if (got != restLen) {\n                throw new IOException(\"Failed to read \"\n                                      + \"Paxheader. Expected \"\n                                      + restLen\n                                      + \" bytes, read \"\n                                      + got);\n            }\n            // Drop trailing NL\n            final String value = new String(rest, 0,\n                                      restLen - 1, CharsetNames.UTF_8);\n            headers.put(keyword, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}