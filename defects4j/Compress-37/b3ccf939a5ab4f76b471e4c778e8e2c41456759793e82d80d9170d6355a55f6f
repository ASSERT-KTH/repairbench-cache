{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    HEADER_LOOP:\n    while (true) {\n        int ch;\n        int len = 0;\n        int read = 0;\n        // First, read the digit part of the header record (its length)\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' ') {\n                // Now read the keyword until the '=' sign is encountered\n                final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                while ((ch = i.read()) != -1) {\n                    read++;\n                    if (ch == '=') {\n                        final String keyword = coll.toString(CharsetNames.UTF_8);\n                        // Calculate how many bytes remain in this record.\n                        final int restLen = len - read;\n                        // If restLen is less than 1 then we have a blank (or malformed) header\n                        if (restLen < 1) {\n                            // Skip this header record (blank line, etc.)\n                            continue HEADER_LOOP;\n                        }\n                        if (restLen == 1) { // only a newline remains\n                            headers.remove(keyword);\n                        } else {\n                            final byte[] rest = new byte[restLen];\n                            final int got = IOUtils.readFully(i, rest);\n                            if (got != restLen) {\n                                throw new IOException(\"Failed to read Paxheader. Expected \" \n                                        + restLen + \" bytes, read \" + got);\n                            }\n                            // Drop the trailing newline\n                            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n                            headers.put(keyword, value);\n                        }\n                        break;\n                    }\n                    coll.write((byte) ch);\n                }\n                break; // Finished processing one record.\n            }\n            len *= 10;\n            len += ch - '0';\n        }\n        if (ch == -1) { // End of stream reached.\n            break;\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}