{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    // start with any existing global Pax headers\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // slurp the entire Pax header block into memory\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    byte[] buffer = new byte[8192];\n    int n;\n    while ((n = i.read(buffer)) != -1) {\n        baos.write(buffer, 0, n);\n    }\n    // decode as UTF-8 and split on newline\n    String all = new String(baos.toByteArray(), CharsetNames.UTF_8);\n    for (String line : all.split(\"\\n\")) {\n        // skip blank lines\n        if (line.trim().isEmpty()) {\n            continue;\n        }\n        // each record is \"<len> <keyword>=<value>\"\n        int sp = line.indexOf(' ');\n        if (sp <= 0) {\n            continue;\n        }\n        String lenStr = line.substring(0, sp);\n        // sanity\u2010check length field\n        try {\n            Integer.parseInt(lenStr);\n        } catch (NumberFormatException ex) {\n            continue;\n        }\n        String rest = line.substring(sp + 1);\n        int eq = rest.indexOf('=');\n        if (eq < 0) {\n            continue;\n        }\n        String key = rest.substring(0, eq);\n        String value = rest.substring(eq + 1);\n        // empty value means \"remove\" this key\n        if (value.isEmpty()) {\n            headers.remove(key);\n        } else {\n            headers.put(key, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}