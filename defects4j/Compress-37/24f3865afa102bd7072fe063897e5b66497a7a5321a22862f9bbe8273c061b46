{
    "generation": "    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        // globalPaxHeaders and CharsetNames are assumed to be defined elsewhere in the class or package.\n        // For the purpose of this fix, their existence and typical usage are assumed.\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while(true){ // Process each header entry\n            int ch = -1; // Initialize ch to -1 to distinguish between initial state and EOF\n            int len = 0;\n            int read = 0; // Tracks bytes read for the current header entry *before* the value part\n            boolean foundSpaceAfterLength = false;\n\n            // 1. Parse length part: \"length \"\n            while((ch = i.read()) != -1) {\n                read++; // Account for the character just read for this header line\n                if (ch == ' '){\n                    foundSpaceAfterLength = true;\n                    break; // End of length digits\n                }\n                if (ch == '\\n') {\n                    // This is a special case: a blank line or a malformed length line ending in newline.\n                    // If it's a blank line (no digits read, first char is '\\n'):\n                    if (len == 0 && read == 1) { // len=0 means no digits were processed, read=1 means only '\\n' was read\n                        // It's a blank line. Skip it and try to read the next header.\n                        // Reset len and read for the next iteration of the outer loop.\n                        len = 0; // Reset length for the next iteration\n                        read = 0; // Reset read count for the next iteration\n                        break; // Break the inner loop; outer loop will handle continuation.\n                    } else {\n                        // Malformed line (e.g., \"123\\n\" missing space, or \"abc\\n\" where 'a' is not a digit).\n                        // If we got here, it's not a simple blank line, but a faulty length format.\n                        throw new IOException(\"Invalid Pax header: Missing space after length, found newline instead. Read: \" + (read - 1) + \" chars before newline.\");\n                    }\n                }\n                // If it's not a space and not a newline, it must be a digit.\n                if (ch < '0' || ch > '9') {\n                    // This is the primary cause of NegativeArraySizeException: non-digit character\n                    // in length part causes `len` to become negative.\n                    throw new IOException(\"Invalid character '\"+ (char)ch +\"' in Pax header length. Expected digit, space or newline.\");\n                }\n                len *= 10;\n                len += ch - '0';\n            }\n\n            // Check how the inner loop (length parsing) terminated\n            if (ch == -1){ // EOF encountered while reading length part\n                break; // No more headers to parse\n            }\n\n            // If the inner loop broke because a blank line was consumed (len=0, read=0)\n            if (len == 0 && read == 0) {\n                continue; // Skip this iteration and try to parse the next header line\n            }\n\n            if (!foundSpaceAfterLength) {\n                // This means the inner loop broke, but not because ' ' was found,\n                // and not because '\\n' was handled as a blank line, and not EOF.\n                // This implies an error in the input stream format (e.g., \"123ABC\", or \"123\" then EOF).\n                throw new IOException(\"Pax header length part not terminated by space.\");\n            }\n\n            // At this point:\n            // - `ch` is ' ' (the space character after the length)\n            // - `len` contains the parsed total length of the entry\n            // - `read` contains the count of bytes for the \"length \" part\n\n            // 2. Parse keyword and '=': \"keyword=\"\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            while((ch = i.read()) != -1) {\n                read++; // Increment read for each character of the keyword\n                if (ch == '='){ // end of keyword\n                    final String keyword = coll.toString(CharsetNames.UTF_8);\n                    \n                    // 3. Get value and trailing NL: \"value\\n\"\n                    // `restLen` is the number of bytes remaining for the value and the trailing newline.\n                    final int restLen = len - read; \n\n                    if (restLen < 0) {\n                        // This indicates that the stated 'len' is less than the bytes already read\n                        // for the length, space, keyword, and equals sign. This is a malformed header.\n                        throw new IOException(\"Pax header length \"+ len +\" is shorter than already read bytes \"+ read + \" for keyword '\"+keyword+\"'.\");\n                    }\n                    // A Pax header entry must end with a newline, so `restLen` should be at least 1.\n                    if (restLen == 0) { \n                        throw new IOException(\"Invalid Paxheader: restLen is 0, missing newline or value for keyword '\" + keyword + \"'.\");\n                    } else if (restLen == 1) { // Expected: only NL (empty value)\n                        int lastCh = i.read(); // Consume the trailing NL\n                        read++; // Increment read to account for the NL\n                        if (lastCh != '\\n') {\n                            throw new IOException(\"Invalid Paxheader: Expected \\\\n, got \" + (char)lastCh + \" after length \"+ len +\" keyword \"+ keyword);\n                        }\n                        headers.remove(keyword);\n                    } else { // Expected: value + NL\n                        final byte[] rest = new byte[restLen];\n                        final int got = IOUtils.readFully(i, rest); // IOUtils.readFully is assumed to be available\n                        if (got != restLen) {\n                            throw new IOException(\"Failed to read \"\n                                                  + \"Paxheader. Expected \"\n                                                  + restLen\n                                                  + \" bytes, read \"\n                                                  + got + \" for keyword \" + keyword);\n                        }\n                        // Drop trailing NL (which is the last byte of `rest`)\n                        if (rest[restLen - 1] != '\\n') {\n                            throw new IOException(\"Invalid Paxheader: Expected \\\\n at end of value for keyword \" + keyword);\n                        }\n                        final String value = new String(rest, 0,\n                                                  restLen - 1, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                    }\n                    break; // Processed single header, break from keyword loop to next header entry\n                }\n                coll.write((byte) ch);\n            }\n            if (ch == -1){ // EOF encountered while reading keyword part\n                throw new IOException(\"Pax header truncated. EOF while reading keyword for length \" + len);\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}