{
    "generation": "Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    outer: while (true) {\n        int ch;\n        int len = 0;\n        int read = 0;\n\n        // Read the length field. If the very first character is a newline, skip this blank line.\n        while ((ch = i.read()) != -1) {\n            if (read == 0 && ch == '\\n') {\n                // Skip blank line\n                continue outer;\n            }\n            read++;\n            if (ch == ' ') {\n                // End of length field\n                break;\n            }\n            if (ch < '0' || ch > '9') {\n                throw new IOException(\"Invalid pax header record: non-digit character in length field\");\n            }\n            len = (len * 10) + (ch - '0');\n        }\n        if (ch == -1) {\n            break;\n        }\n        if (len < read) {\n            throw new IOException(\"Truncated pax header record: stated length \" + len\n                                  + \" is less than bytes read \" + read);\n        }\n\n        // Read the keyword until we reach the '=' delimiter.\n        final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n        while ((ch = i.read()) != -1) {\n            read++;\n            if (ch == '=') {\n                break;\n            }\n            coll.write(ch);\n        }\n        if (ch == -1) {\n            break;\n        }\n        final String keyword = coll.toString(CharsetNames.UTF_8);\n\n        final int restLen = len - read;\n        if (restLen < 1) {\n            throw new IOException(\"Invalid pax header record: no trailing newline found\");\n        }\n        if (restLen == 1) { // Only a newline is left, so remove this header.\n            ch = i.read();\n            if (ch != '\\n') {\n                throw new IOException(\"Invalid pax header record: missing terminating newline\");\n            }\n            headers.remove(keyword);\n        } else {\n            final byte[] rest = new byte[restLen];\n            final int got = IOUtils.readFully(i, rest);\n            if (got != restLen) {\n                throw new IOException(\"Failed to read Paxheader. Expected \" + restLen\n                                      + \" bytes, read \" + got);\n            }\n            // The value is everything except for the trailing newline.\n            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);\n            headers.put(keyword, value);\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}