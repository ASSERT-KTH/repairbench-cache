{
    "generation": "    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while(true){ // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            while((ch = i.read()) != -1) {\n                read++;\n                if (ch == ' '){\n                    // Get keyword\n                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                    while((ch = i.read()) != -1) {\n                        read++;\n                        if (ch == '='){ // end of keyword\n                            final String keyword = coll.toString(CharsetNames.UTF_8);\n                            // Get rest of entry\n                            final int restLen = len - read;\n\n                            if (restLen < 0) {\n                                // Malformed header: The declared length 'len' is less than\n                                // the bytes already consumed (length_digits + ' ' + keyword + '=').\n                                // Consume the rest of the current line until '\\n' or EOF.\n                                int c;\n                                while ((c = i.read()) != -1 && c != '\\n') {\n                                    // consume remaining bytes of the current line\n                                }\n                                // If EOF was reached while skipping, signal to outer loop to stop.\n                                if (c == -1) {\n                                    ch = -1; // Will cause outer loop to break\n                                }\n                                break; // Break from the inner 'keyword' loop to continue to next header\n                            } else if (restLen == 0) {\n                                // Malformed header: The declared length indicates no value and no newline.\n                                // Pax headers must end with a newline. Treat as malformed and ignore.\n                                // No more bytes to read for this entry.\n                                break; // Break from the inner 'keyword' loop to continue to next header\n                            } else if (restLen == 1) { // only NL\n                                // This means the entry was \"length keyword=\\n\"\n                                // The value is empty, and the key should be removed.\n                                final byte[] rest = new byte[restLen]; // restLen is 1, so new byte[1] is fine.\n                                final int got = IOUtils.readFully(i, rest);\n                                if (got != restLen) {\n                                    throw new IOException(\"Failed to read \"\n                                                          + \"Paxheader. Expected \"\n                                                          + restLen\n                                                          + \" bytes, read \"\n                                                          + got);\n                                }\n                                headers.remove(keyword);\n                            } else { // Normal case: restLen > 1 (value and trailing NL)\n                                final byte[] rest = new byte[restLen];\n                                final int got = IOUtils.readFully(i, rest);\n                                if (got != restLen) {\n                                    throw new IOException(\"Failed to read \"\n                                                          + \"Paxheader. Expected \"\n                                                          + restLen\n                                                          + \" bytes, read \"\n                                                          + got);\n                                }\n                                // Drop trailing NL\n                                final String value = new String(rest, 0,\n                                                          restLen - 1, CharsetNames.UTF_8);\n                                headers.put(keyword, value);\n                            }\n                            break; // Processed single header\n                        }\n                        coll.write((byte) ch);\n                    }\n                    break; // Processed single header\n                }\n                len *= 10;\n                len += ch - '0';\n            }\n            if (ch == -1){ // EOF\n                break;\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}