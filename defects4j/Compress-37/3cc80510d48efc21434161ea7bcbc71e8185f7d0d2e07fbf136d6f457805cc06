{
    "generation": "    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n    Map<String, String> parsePaxHeaders(final InputStream i)\n        throws IOException {\n        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n        // Format is \"length keyword=value\\n\";\n        while(true){ // get length\n            int ch;\n            int len = 0;\n            int read = 0;\n            // Read length\n            while((ch = i.read()) != -1) {\n                if (ch == ' '){\n                    break;\n                }\n                if (ch < '0' || ch > '9') {\n                    throw new IOException(\"Invalid character in length field\");\n                }\n                len = len * 10 + (ch - '0');\n                read++;\n            }\n            if (ch == -1){ // EOF\n                break;\n            }\n\n            if (len <= read) {\n                throw new IOException(\"Invalid length in PAX header\");\n            }\n\n            // Get keyword\n            final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n            while((ch = i.read()) != -1) {\n                read++;\n                if (ch == '='){ // end of keyword\n                    final String keyword = coll.toString(CharsetNames.UTF_8);\n                    // Get rest of entry\n                    final int restLen = len - read;\n                    if (restLen < 0) {\n                        throw new IOException(\"Invalid length in PAX header\");\n                    }\n                    if (restLen == 1) { // only NL\n                        headers.remove(keyword);\n                    } else {\n                        final byte[] rest = new byte[restLen - 1]; // subtract 1 for NL\n                        final int got = IOUtils.readFully(i, rest);\n                        if (got != rest.length) {\n                            throw new IOException(\"Failed to read \"\n                                                  + \"Paxheader. Expected \"\n                                                  + rest.length\n                                                  + \" bytes, read \"\n                                                  + got);\n                        }\n                        // Read and drop trailing NL\n                        if (i.read() != '\\n') {\n                            throw new IOException(\"Missing newline in PAX header\");\n                        }\n                        final String value = new String(rest, CharsetNames.UTF_8);\n                        headers.put(keyword, value);\n                    }\n                    break;\n                }\n                coll.write((byte) ch);\n            }\n            // Skip to end of line if we're not already there\n            while((ch = i.read()) != -1 && ch != '\\n') {\n                read++;\n            }\n            if (ch == -1 && read < len) { // EOF before end of line\n                throw new IOException(\"Unexpected EOF in PAX header\");\n            }\n        }\n        return headers;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}