{
    "generation": "// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\nMap<String, String> parsePaxHeaders(final InputStream i)\n    throws IOException {\n    final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);\n    // Format is \"length keyword=value\\n\";\n    while(true){ // get length\n        int ch;\n        int len = 0;\n        int read = 0;\n        boolean saw_digit = false;\n        while((ch = i.read()) != -1) {\n            read++;\n            if (ch == ' '){\n                // If there was no digit before the space, it's a blank line; skip to next line.\n                if (!saw_digit) {\n                    // Skip this blank/broken line.\n                    // Read until newline or EOF\n                    while (ch != -1 && ch != '\\n') {\n                        ch = i.read();\n                    }\n                    break;\n                }\n                // Get keyword\n                final ByteArrayOutputStream coll = new ByteArrayOutputStream();\n                while((ch = i.read()) != -1) {\n                    read++;\n                    if (ch == '='){ // end of keyword\n                        final String keyword = coll.toString(CharsetNames.UTF_8);\n                        // Get rest of entry\n                        final int restLen = len - read;\n                        // Check for broken/malformed records, skip if restLen < 1\n                        if (restLen <= 0) {\n                            // Skip ahead to next NL\n                            int skipch;\n                            while ((skipch = i.read()) != -1 && skipch != '\\n') { }\n                            break;\n                        }\n                        if (restLen == 1) { // only NL\n                            headers.remove(keyword);\n                        } else {\n                            final byte[] rest = new byte[restLen];\n                            final int got = IOUtils.readFully(i, rest);\n                            if (got != restLen) {\n                                throw new IOException(\"Failed to read \"\n                                                      + \"Paxheader. Expected \"\n                                                      + restLen\n                                                      + \" bytes, read \"\n                                                      + got);\n                            }\n                            // Drop trailing NL\n                            final String value = new String(rest, 0,\n                                                      restLen - 1, CharsetNames.UTF_8);\n                            headers.put(keyword, value);\n                        }\n                        break;\n                    }\n                    coll.write((byte) ch);\n                }\n                break; // Processed single header\n            }\n            if (Character.isDigit(ch)) {\n                len *= 10;\n                len += ch - '0';\n                saw_digit = true;\n            } else if (ch == '\\n' || ch == '\\r') {\n                // It's a blank/broken line, so skip\n                break;\n            } else {\n                // Not digit and not space/newline: broken input; skip line.\n                while (ch != -1 && ch != '\\n') {\n                    ch = i.read();\n                }\n                break;\n            }\n        }\n        if (ch == -1){ // EOF\n            break;\n        }\n    }\n    return headers;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}