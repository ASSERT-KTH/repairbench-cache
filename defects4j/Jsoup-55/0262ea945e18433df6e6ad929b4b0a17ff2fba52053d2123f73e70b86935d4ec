{
    "generation": "        void read(Tokeniser t, CharacterReader r) {\n            // In SelfClosingStartTag state, we have consumed the '/' (in BeforeAttributeName)\n            // The next character determines what happens: > closes tag, EOF is error, otherwise attribute presumed.\n            char c = r.peek(); // Peek, don't consume yet.\n\n            switch (c) {\n                case '>':\n                    r.consume(); // Consume the '>'\n                    t.tagPending.selfClosing = true; // Set the flag\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    // Reached EOF after consuming '/', e.g., <img /\n                    t.eofError(this); // Parse error\n                    t.transition(Data); // Transition to Data state\n                    break;\n                default:\n                    // Found a character other than '>', e.g., the start of an attribute name\n                    // like in <img / name=val>. This is technically a parse error state,\n                    // but we transition back to BeforeAttributeName to handle the attribute.\n                    t.error(this); // Signal error: unexpected char in SelfClosingStartTag state\n                    // Transition back to BeforeAttributeName WITHOUT consuming the character 'c'.\n                    // This allows BeforeAttributeName to process the character (e.g., start of attribute name).\n                    t.transition(BeforeAttributeName);\n                    // No character consumption here - BeforeAttributeName will consume.\n                    break;\n            }\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}