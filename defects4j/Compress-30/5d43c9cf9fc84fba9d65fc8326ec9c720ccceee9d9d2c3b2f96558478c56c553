{
    "generation": "    /*\n     * (non-Javadoc)\n     *\n     * @see java.io.InputStream#read(byte[], int, int)\n     */\n    @Override\n    public int read(final byte[] dest, final int offs, final int len)\n        throws IOException {\n        if (offs < 0) {\n            throw new IndexOutOfBoundsException(\"offs(\" + offs + \") < 0.\");\n        }\n        if (len < 0) {\n            throw new IndexOutOfBoundsException(\"len(\" + len + \") < 0.\");\n        }\n        if (offs + len > dest.length) {\n            throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n                                                + len + \") > dest.length(\" + dest.length + \").\");\n        }\n        if (this.in == null) {\n            throw new IOException(\"stream closed\");\n        }\n        // Handle the case for len = 0 according to the InputStream contract\n        if (len == 0) {\n            return 0;\n        }\n\n        final int hi = offs + len;\n        int destOffs = offs;\n        int b;\n        // The loop condition correctly prevents execution when len is 0,\n        // but the return logic below treated that as EOF.\n        while (destOffs < hi && ((b = read0()) >= 0)) {\n            dest[destOffs++] = (byte) b;\n            count(1);\n        }\n\n        // If no bytes were read because the stream reached EOF *before*\n        // the loop started or during the first iteration, return -1.\n        // Otherwise, return the number of bytes read.\n        // The len == 0 case is now handled above.\n        return (destOffs == offs) ? -1 : (destOffs - offs);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}