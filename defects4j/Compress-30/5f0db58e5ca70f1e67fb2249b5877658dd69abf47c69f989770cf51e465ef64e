{
    "generation": "    /*\n     * (non-Javadoc)\n     * \n     * @see java.io.InputStream#read(byte[], int, int)\n     */\n    @Override\n    public int read(final byte[] dest, final int offs, final int len)\n        throws IOException {\n        if (offs < 0) {\n            throw new IndexOutOfBoundsException(\"offs(\" + offs + \") < 0.\");\n        }\n        if (len < 0) {\n            throw new IndexOutOfBoundsException(\"len(\" + len + \") < 0.\");\n        }\n        if (offs + len > dest.length) {\n            throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n                                                + len + \") > dest.length(\" + dest.length + \").\");\n        }\n        // As per InputStream's contract for read(byte[] b, int off, int len),\n        // if len is zero, then no bytes are read and 0 is returned.\n        // This must occur after bounds checks, but before attempting to read.\n        if (len == 0) {\n            return 0;\n        }\n        if (this.in == null) {\n            throw new IOException(\"stream closed\");\n        }\n\n        final int hi = offs + len;\n        int destOffs = offs;\n        int b;\n        while (destOffs < hi && ((b = read0()) >= 0)) {\n            dest[destOffs++] = (byte) b;\n            count(1);\n        }\n\n        // If no bytes were read because end of stream was reached immediately,\n        // and 'destOffs' is still equal to 'offs', return -1.\n        // Otherwise, return the number of bytes read.\n        int c = (destOffs == offs) ? -1 : (destOffs - offs);\n        return c;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}