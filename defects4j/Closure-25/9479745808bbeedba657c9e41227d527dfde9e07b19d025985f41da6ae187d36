{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope); // Process the constructor expression itself\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    FunctionType ct = null; // Initialize ct\n\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            // Try to get the FunctionType\n            ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n\n            // If we have a constructor function type, determine the instance type\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n            }\n        }\n    }\n\n    // Set the type of the 'new' expression\n    // If type is null, it defaults to UnknownType, which is fine.\n    n.setJSType(type);\n\n    // Perform argument type inference (backwards and forwards)\n    // This will also traverse the arguments.\n    // inferArgumentsSlotTypes expects the CALL or NEW node.\n    if (ct != null && ct.isConstructor()) {\n       scope = inferArgumentsSlotTypes(scope, n, ct);\n    } else {\n       // If constructor type is unknown or not a function,\n       // still traverse arguments, but without specific inference.\n       for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n          scope = traverse(arg, scope);\n       }\n    }\n\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}