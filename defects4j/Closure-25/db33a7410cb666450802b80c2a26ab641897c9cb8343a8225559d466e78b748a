{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n\n                // Add type information for constructor parameters\n                if (ct.isConstructor()) {\n                    // Get the parameter types from the constructor function\n                    List<JSType> paramTypes = ct.getParameters();\n                    if (paramTypes != null && !paramTypes.isEmpty()) {\n                        // Get the arguments passed to the constructor\n                        Node arg = constructor.getNext();\n                        int i = 0;\n                        while (arg != null && i < paramTypes.size()) {\n                            // Propagate the parameter type to the argument\n                            if (arg.getJSType() == null) {\n                                arg.setJSType(paramTypes.get(i));\n                            }\n                            arg = arg.getNext();\n                            i++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}