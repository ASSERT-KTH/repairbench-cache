{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n  Node constructor = n.getFirstChild();\n  List<Node> argNodes = new ArrayList<>();\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    argNodes.add(arg);\n  }\n\n  // 1. Traverse only the constructor first\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        // Do backwards inference from argNodes to parameters, BEFORE traversing args.\n        inferParameters(argNodes, ct, scope);\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(type);\n\n  // 2. Now traverse args\n  for (Node arg : argNodes) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}\n\n// Helper method to trigger backwards inference\nprivate void inferParameters(List<Node> argNodes, FunctionType ct, FlowScope scope) {\n  int paramCount = 0;\n  for (Node param = ct.getParametersNode().getFirstChild(); param != null; param = param.getNext()) {\n    if (paramCount >= argNodes.size()) {\n      break;\n    }\n    Node arg = argNodes.get(paramCount);\n    JSType paramType = param.getJSType();\n    if (paramType != null) {\n      updateTypeOfExpression(scope, arg, paramType);\n    }\n    paramCount++;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}