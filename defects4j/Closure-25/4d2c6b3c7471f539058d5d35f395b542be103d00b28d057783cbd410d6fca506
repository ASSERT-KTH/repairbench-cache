{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    FunctionType ct = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n\n    // If ct is constructor, run backward inference on arguments.\n    if (ct != null && ct.isConstructor()) {\n      // ParameterType for constructor includes 'this'\n      // so we getParametersNode().getSecondChild()\n      Node paramNode = ct.getParametersNode();\n      Node arg = constructor.getNext();\n      Node param = paramNode.getFirstChild();\n      while (arg != null && param != null) {\n        JSType paramType = param.getJSType();\n        if (paramType != null && !paramType.isUnknownType()) {\n          n.getParent().putProp(Node.FUNCTION_INVOKE_ARGUMENT, Boolean.TRUE);\n          reverseInterpreter.inferArgumentType(arg, paramType, scope);\n        }\n        arg = arg.getNext();\n        param = param.getNext();\n      }\n    }\n\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}