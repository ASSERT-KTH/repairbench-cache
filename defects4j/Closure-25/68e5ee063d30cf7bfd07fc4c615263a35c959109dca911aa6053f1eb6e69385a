{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  // First traverse the \u201cconstructor\u201d expression.\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n\n  // Figure out the instance type.\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  FunctionType ct = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // NoObjectType implements FunctionType so it can still construct.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      } else {\n        ct = null;  // not really a constructor\n      }\n    }\n  }\n  n.setJSType(type);\n\n  // If we know the FunctionType of the constructor, do backwards\u2010inference\n  // on its parameters.  Otherwise just traverse the args normally.\n  if (ct != null) {\n    Iterator<JSType> paramIt = ct.getParameters().iterator();\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      JSType formalType = null;\n      if (paramIt.hasNext()) {\n        formalType = paramIt.next()\n                            .restrictByNotNullOrUndefined();\n        if (formalType.isUnknownType()) {\n          formalType = null;\n        }\n      }\n      if (formalType != null) {\n        // If the argument is a simple qualified name, narrow it:\n        String qname = arg.getQualifiedName();\n        if (qname != null) {\n          scope = scope.inferQualifiedName(qname, formalType);\n        }\n      }\n      scope = traverse(arg, scope);\n    }\n  } else {\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n  }\n\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}