{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          \n          // Handle constructor parameters for backwards type inference\n          FunctionType functionType = ct;\n          Iterator<Node> arguments = NodeUtil.getInvocationArgsAsIterable(n).iterator();\n          Iterator<Node> parameters = functionType.getParameters().iterator();\n          FlowScope fnScope = scope;\n          \n          // Match arguments to parameters and infer types from the function declaration\n          while (arguments.hasNext() && parameters.hasNext()) {\n            Node arg = arguments.next();\n            Node parameter = parameters.next();\n            \n            fnScope = traverse(arg, fnScope);\n            JSType paramType = parameter.getJSType();\n            \n            if (paramType != null && arg.getJSType() != null) {\n              inferPropertyTypesToMatchConstraint(arg.getJSType(), paramType);\n            }\n          }\n          \n          // Process any remaining arguments\n          while (arguments.hasNext()) {\n            fnScope = traverse(arguments.next(), fnScope);\n          }\n          \n          scope = fnScope;\n        }\n      }\n    }\n    n.setJSType(type);\n    \n    // Skip argument traversal as we've already done it above\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}