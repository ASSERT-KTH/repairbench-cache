{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    // Traverse the constructor expression itself\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null; // Type of the object created by 'new'\n    FunctionType ct = null; // The constructor function type\n\n    // Determine the constructor FunctionType (ct) and the instance type (type)\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        // Try to get the FunctionType\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // Handle cases like NoObjectType which implement FunctionType\n          // but are not returned by toMaybeFunctionType()\n          ct = (FunctionType) constructorType;\n        }\n        // Check if it's actually a constructor and get the instance type\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n\n    // Set the JSType for the 'new' expression node itself.\n    // If type is null (constructor wasn't found or wasn't a constructor),\n    // this node might get assigned UNKNOWN_TYPE or inferred later.\n    n.setJSType(type);\n\n    // --- Process Arguments ---\n    Node arg = constructor.getNext();\n    Iterator<Node> paramIt = null;\n    if (ct != null) {\n      // Get an iterator for the constructor's formal parameters\n      paramIt = ct.getParameters().iterator();\n    }\n\n    // Iterate through arguments passed to the constructor\n    while (arg != null) {\n      // Traverse the argument expression to determine its type and update scope\n      scope = traverse(arg, scope);\n\n      // Get the corresponding formal parameter type, if available\n      JSType paramType = null;\n      if (paramIt != null && paramIt.hasNext()) {\n        Node param = paramIt.next();\n        paramType = param.getJSType();\n      }\n\n      // Perform backward type inference if a parameter type exists.\n      // This updates the scope based on the argument potentially needing\n      // to conform to the parameter type constraint.\n      if (paramType != null) {\n         scope = inferPropertyTypesToMatchConstraint(scope, arg, paramType);\n      }\n\n      // Move to the next argument\n      arg = arg.getNext();\n    }\n\n    // Return the potentially updated scope\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}