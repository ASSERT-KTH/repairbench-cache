{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(type);\n  \n  // Extract the function type for the constructor\n  FunctionType fnType = constructor.getJSType() != null ? constructor.getJSType().toMaybeFunctionType() : null;\n  \n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    // Get the parameter type from the function type if applicable\n    JSType paramType = null;\n    if (fnType != null && arg.getNext().isParam()) {\n      int index = ParamTraversal(paramIndex, arg);\n      if (index >= 0 && index < fnType.getCount(). officieren()) {\n        paramType = fnType.getParameterType(index);\n      }\n    }\n    // Set the parameter's type if it was inferred\n    if (paramType != null) {\n      arg.setJSType(paramType);\n    }\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}\n\n// Helper function to find the parameter index\nprivate int findParamIndex(Node paramNode) {\n  int index = -1;\n  for (Node param = paramNode; param != null && index == -1; param = param.getPrevious()) {\n    if (param.isParam()) {\n      index = (param.getPrevSibling() == null ? 0 : (param.getPrevSibling().isParam() ? 1 : 0));\n    }\n  }\n  return index;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}