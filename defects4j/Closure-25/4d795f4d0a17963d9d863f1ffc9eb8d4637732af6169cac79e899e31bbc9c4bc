{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    FunctionType ct = null; // Declare ct here so it's accessible for argument processing\n\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n\n    // After determining the constructor's type and the new object's type,\n    // process the arguments. This is where backward inference needs to happen.\n    Node arg = constructor.getNext();\n    if (ct != null && ct.isConstructor()) {\n      // If we have a valid constructor type, we can infer types for its arguments.\n      ImmutableList<Node> parameters = ct.getParameters();\n      for (int i = 0; arg != null; arg = arg.getNext(), ++i) {\n        JSType paramType = null;\n        if (i < parameters.size()) {\n          paramType = parameters.get(i).getJSType();\n        } else if (ct.isVarArgs()) {\n          // If there are more arguments than declared parameters and the function\n          // accepts variable arguments, use the var_args type.\n          paramType = ct.getVarArgsType();\n        }\n        // If paramType remains null (e.g., more arguments than parameters and not var_args),\n        // no specific type is expected for this argument from the constructor.\n\n        if (paramType != null) {\n          // This is the key step for backward type inference:\n          // Unify the argument's current type with the expected parameter type.\n          // This updates the type of 'arg' within the flow scope.\n          scope = unifyTypeOfArgument(scope, arg, paramType);\n        }\n        // After potentially updating the scope for backward inference,\n        // traverse the argument node itself to propagate types within the argument expression.\n        scope = traverse(arg, scope);\n      }\n    } else {\n      // If constructorType was not a constructor, or was unknown,\n      // we cannot do backward inference. Just traverse arguments normally.\n      for (; arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n      }\n    }\n    return scope;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}