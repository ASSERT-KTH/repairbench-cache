{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  FunctionType ct = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(type);\n  Node callTarget = constructor;\n  Node argNode = callTarget.getNext();\n  boolean updatedParameters = false;\n  while (argNode != null) {\n    scope = traverse(argNode, scope);\n    // Backward type inference from actual argument to formal parameter.\n    if (ct != null) {\n      JSType paramType = ct.getParameterType(argNode);\n      if (paramType != null && !paramType.isUnknownType()) {\n        updatedParameters = true;\n        // Update with the inferred argument type\n        argNode.getJSType()\n            .restrictByNotNullOrUndefined()\n            .inferPropertyTypesTo(argNode, paramType);\n      }\n    }\n    argNode = argNode.getNext();\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}