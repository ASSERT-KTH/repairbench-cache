{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    \n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                \n                // Apply backward inference to constructor parameters\n                int paramCount = ct.getParameters().size();\n                int argCount = n.getChildCount() - 1;\n                if (paramCount > 0 && argCount > 0) {\n                    Iterator<Parameter> parameters = ct.getParameters().iterator();\n                    Node arg = constructor.getNext();\n                    int i = 0;\n                    while (parameters.hasNext() && arg != null) {\n                        Parameter parameter = parameters.next();\n                        JSType paramType = parameter.getJSType();\n                        if (paramType != null) {\n                            scope = traverse(arg, scope);\n                            updateScopeForTypeChange(scope, arg, arg.getJSType(), paramType);\n                        }\n                        arg = arg.getNext();\n                        i++;\n                    }\n                }\n            }\n        }\n    }\n    \n    n.setJSType(type);\n    \n    // Process any remaining arguments\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        if (arg.getJSType() == null) {\n            scope = traverse(arg, scope);\n        }\n    }\n    \n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}