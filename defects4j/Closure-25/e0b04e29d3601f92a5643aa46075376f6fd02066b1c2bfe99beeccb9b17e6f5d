{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n            }\n        }\n    }\n    n.setJSType(type);\n    \n    // Infer types for arguments\n    Node arg = constructor.getNext();\n    if (arg != null) {\n        JSType inferredArgType = null;\n        if (constructorType instanceof FunctionType) {\n            FunctionType ctorFunction = (FunctionType) constructorType;\n            Node parameters = ctorFunction.getParametersNode();\n            if (parameters != null) {\n                for (Node param = parameters.getFirstChild(); param != null && arg != null; param = param.getNext(), arg = arg.getNext()) {\n                    JSType paramType = param.getJSType();\n                    if (paramType != null) {\n                        inferredArgType = paramType.getGreatestSubtype(scope.getTypeOf(arg));\n                        scope = scope.inferSlotType(arg, inferredArgType);\n                    }\n                }\n            }\n        }\n        // Continue traversing remaining arguments if any\n        for (; arg != null; arg = arg.getNext()) {\n            scope = traverse(arg, scope);\n        }\n    }\n\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}