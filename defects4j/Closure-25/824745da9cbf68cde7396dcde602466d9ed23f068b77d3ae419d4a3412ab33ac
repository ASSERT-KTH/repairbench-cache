{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  // First, traverse the constructor expression itself.\n  scope = traverse(constructor, scope);\n\n  // Figure out the instantiated type.\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // In some cases (e.g. NoObjectType) toMaybeFunctionType()\n        // returns null even though it is a FunctionType.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        // --- BEGIN FIX: backward\u2010infer the formal parameter types onto the args ---\n        // This will refine the types of the actual argument expressions\n        // (e.g. give `y` its {foo:(number|undefined)} type in `new F(y)`).\n        scope = inferParameterTypes(\n            ct,\n            NodeUtil.getInvocationArgs(n),\n            scope);\n        // --- END FIX ---\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(type);\n\n  // Finally, traverse the \u201cnew\u201d arguments in the (possibly) refined scope.\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}