{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    Node firstArg = constructor.getNext();\n    FunctionType ct = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n\n    // Backward propagation: propagate formal parameter type backwards to actual arguments in 'new'.\n    if (ct != null && firstArg != null) {\n      Node argNode = firstArg;\n      ImmutableList<JSType> paramTypes = ct.getParameters();\n      int paramIndex = 0;\n      while (argNode != null && paramIndex < paramTypes.size()) {\n        // Get the formal parameter type.\n        JSType paramType = paramTypes.get(paramIndex);\n        // Use backwards inference to restrict the argument node type.\n        backwardsInferType(argNode, scope, paramType, paramType);\n        argNode = argNode.getNext();\n        paramIndex++;\n      }\n    }\n\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}