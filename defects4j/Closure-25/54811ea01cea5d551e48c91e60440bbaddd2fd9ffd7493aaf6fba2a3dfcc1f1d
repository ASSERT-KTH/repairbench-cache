{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  // Evaluate the constructor expression first.\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n\n  // Figure out the instance type produced by \"new\".\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  FunctionType ct = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // NoObjectType implements FunctionType but toMaybeFunctionType() returns null.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(type);\n\n  // BACKWARDS INFERENCE: Propagate declared parameter types into the arguments.\n  if (ct != null) {\n    Node params = ct.getParameters();\n    if (params != null) {\n      Node arg = constructor.getNext();\n      for (Node param = params.getFirstChild();\n           param != null && arg != null;\n           param = param.getNext(), arg = arg.getNext()) {\n        JSType pType = param.getJSType();\n        if (pType != null && !pType.isUnknownType()) {\n          // Temporarily tag the argument with the expected type;\n          // traverse(arg, ...) will then record the refinement.\n          arg.setJSType(pType);\n        }\n      }\n    }\n  }\n\n  // Now traverse each argument in turn (with any refinements applied).\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}