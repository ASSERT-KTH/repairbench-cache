{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  FunctionType ct = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // Sometimes a NoObjectType will implement FunctionType even though\n        // toMaybeFunctionType returns null.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(type);\n  \n  // Traverse all argument nodes.\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  \n  // BACKWARD INFERENCE: Propagate parameter types from the constructor\n  // to the call arguments. This lets us infer, for example, that in\n  //    new F(y);\n  // if F is declared as\n  //    /** @constructor @param {{foo: (number|undefined)}} x */\n  // then y will be given the type {foo: (number|undefined)}.\n  if (ct != null && ct.isConstructor()) {\n    int index = 0;\n    // Iterate again over the arguments.\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), index++) {\n      JSType expectedType = ct.getParameterType(index);\n      if (expectedType != null) {\n        // inferSlot (or an equivalent method on FlowScope) will update the type\n        // for the L-value (for example, a NAME node) during backwards type inference.\n        scope = scope.inferSlot(arg, expectedType);\n      }\n    }\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}