{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  // Traverse the constructor expression first.\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n\n  // Figure out the instantiated type of the \"new\" expression.\n  JSType constructorType = constructor.getJSType();\n  JSType instanceType = null;\n  FunctionType ct = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      instanceType = getNativeType(UNKNOWN_TYPE);\n    } else {\n      ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // handle the NoObjectType\u2010as\u2010FunctionType case\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        instanceType = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(instanceType);\n\n  // --- START BACKWARD INFERENCE FOR \"new\" ARGUMENTS ---\n  // If we have a concrete ctor signature, try to refine each arg\n  // based on the declared @param type.\n  if (ct != null) {\n    List<JSType> paramTypes = ct.getParameters();\n    int i = 0;\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), i++) {\n      if (i < paramTypes.size()) {\n        JSType formal = paramTypes.get(i);\n        if (formal != null && !formal.isUnknownType()) {\n          // Try to get a qualified name for this arg (e.g. \"y\" or \"obj.prop\")\n          FlowScope.QualifiedName qname = FlowScope.QualifiedName.of(arg);\n          if (qname != null) {\n            // Refine the flow\u2010scope binding at this call site.\n            scope = scope.inferQualifiedSlot(qname, formal, /* equalityComparison= */ false);\n          }\n        }\n      }\n    }\n  }\n  // --- END BACKWARD INFERENCE ---\n\n  // Now traverse the arguments normally.\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}