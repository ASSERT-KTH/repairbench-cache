{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n\n    // Traverse arguments and apply constructor parameter types to them\n    int i = 0;\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      // Traverse the argument to get its type\n      scope = traverse(arg, scope);\n\n      // If we have a constructor type and parameter types, apply them\n      if (constructorType != null && ct != null) {\n        if (i < ct.getParameters().size()) {\n          JSType paramType = ct.getParameters().get(i).getType();\n          if (paramType != null) {\n            // Meet the argument's current type with the parameter type\n            JSType currentType = arg.getJSType();\n            if (currentType != null) {\n              JSType joinedType = currentType.getLeastSupertype(paramType);\n              arg.setJSType(joinedType);\n            }\n          }\n        }\n      }\n      i++;\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}