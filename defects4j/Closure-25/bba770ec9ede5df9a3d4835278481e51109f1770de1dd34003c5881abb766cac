{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Backwards inference: if the constructor is called with 'new', its\n          // parameter type is inferred from the type of the argument.\n          FunctionType ctorType = ct.toConstructorType();\n          Iterator<Node> paramIter = ctorType.getParameters().iterator();\n          for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n            scope = traverse(arg, scope);\n            if (!paramIter.hasNext()) {\n              break;\n            }\n            Node param = paramIter.next();\n            // If the parameter is not declared or has a loose type, tighten it.\n            JSType paramType = param.getJSType();\n            if (paramType == null || paramType.isUnknownType() || paramType.isAllType()) {\n              paramType = getNativeType(JSTypeNative.NO_TYPE);\n            }\n            JSType argType = arg.getJSType();\n            if (argType != null) {\n              param.setJSType(paramType.getLeastSupertype(argType));\n            }\n          }\n          // No need to traverse the rest of the arguments.\n          for (; arg != null; arg = arg.getNext()) {\n            scope = traverse(arg, scope);\n          }\n          return scope;\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}