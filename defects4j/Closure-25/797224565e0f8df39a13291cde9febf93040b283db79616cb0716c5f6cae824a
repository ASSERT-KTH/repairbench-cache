{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  // Traverse the constructor expression first.\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n\n  // Compute the type of the \"new\" expression.\n  JSType constructorType = constructor.getJSType();\n  JSType instanceType = null;\n  FunctionType ctorFn = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      instanceType = getNativeType(UNKNOWN_TYPE);\n    } else {\n      // Try to get the FunctionType representing the constructor.\n      ctorFn = constructorType.toMaybeFunctionType();\n      if (ctorFn == null && constructorType instanceof FunctionType) {\n        ctorFn = (FunctionType) constructorType;\n      }\n      if (ctorFn != null && ctorFn.isConstructor()) {\n        instanceType = ctorFn.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(instanceType);\n\n  // Forward-traverse the new-expression arguments.\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n\n  // Backward-infer argument types: if a parameter has a declared type,\n  // refine the corresponding argument's type in the current scope.\n  if (ctorFn != null && ctorFn.isConstructor()) {\n    int i = 0;\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), i++) {\n      JSType expected = ctorFn.getParameterType(i);\n      if (expected != null && arg.isName()) {\n        // Refine simple name arguments to the expected parameter type.\n        scope = scope.assignQualifiedName(arg.getString(), expected);\n      }\n    }\n  }\n\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}