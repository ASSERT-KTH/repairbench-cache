{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    FunctionType ct = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n    \n    if (ct != null && ct.isConstructor()) {\n      Node params = ct.getParametersNode();\n      int paramIndex = 0;\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        JSType expectedType = null;\n        if (params != null) {\n          Node param = params.getFirstChild();\n          for (int i = 0; i < paramIndex; i++) {\n            param = param.getNext();\n            if (param == null) break;\n          }\n          if (param != null) {\n            expectedType = param.getJSType();\n          }\n        }\n        scope = traverse(arg, scope, expectedType);\n        paramIndex++;\n      }\n    } else {\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n      }\n    }\n    \n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}