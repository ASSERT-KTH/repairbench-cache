{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    FunctionType ct = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n\n    Node callTarget = constructor;\n    int argIndex = 0;\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), argIndex++) {\n      // If we know the constructor and its parameter types, do backwards inference.\n      if (ct != null && ct.isConstructor()) {\n        JSType paramType = null;\n        // For backward inference, match parameters to arguments.\n        if (ct.getParameters() != null) {\n          Node paramNode = ct.getParameters().getFirstChild();\n          for (int i = 0; i < argIndex && paramNode != null; ++i) {\n            paramNode = paramNode.getNext();\n          }\n          if (paramNode != null) {\n            paramType = paramNode.getJSType();\n          } else {\n            // If there are less parameters than arguments, the trailing params\n            // may be a var_args node; use its declared type if so.\n            if (ct.getParameters().hasVarArgs()) {\n              paramType = ct.getParameters().getJSType();\n            }\n          }\n        }\n        scope = traverseWithExpectedType(arg, paramType, scope);\n      } else {\n        // No known param type; regular traversal.\n        scope = traverse(arg, scope);\n      }\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}