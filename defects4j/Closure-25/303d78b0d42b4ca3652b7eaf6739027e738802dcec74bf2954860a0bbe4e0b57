{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    // Traverse arguments first to enable backwards inference on them.\n    // In a call like: new F(y), traversing 'y' before resolving the constructor type\n    // allows backwards inference to propagate expected parameter types to 'y'.\n    Node lastArg = null;\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      lastArg = arg;\n      scope = traverse(arg, scope);\n    }\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n\n          // Add backwards inference: update argument types based on constructor param types.\n          FunctionType functionType = ct;\n          Node param = constructor.getNext();\n          int i = 0;\n          ImmutableList<JSType> paramTypes = functionType.getNormalizedArgumentTypes();\n          for (JSType paramType : paramTypes) {\n            if (param == null) {\n              break;\n            }\n            JSType argType = param.getJSType();\n            if (argType != null && !paramType.isUnknownType()) {\n              // Use backwards inference to update the type of the argument variable\n              updateTypeOfVariable(param, paramType, scope);\n            }\n            param = param.getNext();\n            i++;\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}