{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n\n    // Extract the parameter types from the constructor type.\n    List<JSType> paramTypes = null;\n    if (constructorType != null) {\n        FunctionType funcType = constructorType.toMaybeFunctionType();\n        if (funcType == null && constructorType instanceof FunctionType) {\n            funcType = (FunctionType) constructorType;\n        }\n        if (funcType != null) {\n            paramTypes = funcType.getParameters();\n        }\n    }\n\n    int paramIndex = 0;\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        if (paramTypes != null && paramIndex < paramTypes.size()) {\n            JSType expectedType = paramTypes.get(paramIndex);\n            JSType currentArgType = arg.getJSType();\n            if (currentArgType == null) {\n                arg.setJSType(expectedType);\n            } else {\n                // Intersect the current type with the expected parameter type\n                arg.setJSType(JSType.createIntersection(currentArgType, expectedType));\n            }\n        }\n        scope = traverse(arg, scope);\n        paramIndex++;\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}