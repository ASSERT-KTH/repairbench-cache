{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Add parameter types for backwards inference\n          if (n.hasChildren() && n.getChildCount() > 1) {\n            Node argNode = constructor.getNext();\n            int paramIndex = 0;\n            while (argNode != null) {\n              if (paramIndex < ct.getParametersCount()) {\n                JSType paramType = ct.getParameterType(paramIndex);\n                if (paramType != null) {\n                  // Apply the parameter type to the argument\n                  JSType argType = argNode.getJSType();\n                  if (argType != null) {\n                    // Union the expected parameter type with the current argument type\n                    argNode.setJSType(argType.getLeastSupertype(paramType));\n                  } else {\n                    argNode.setJSType(paramType);\n                  }\n                }\n              }\n              argNode = argNode.getNext();\n              paramIndex++;\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}