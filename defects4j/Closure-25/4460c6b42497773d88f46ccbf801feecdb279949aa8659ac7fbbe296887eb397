{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Handle parameter type inference\n          Node args = constructor.getNext();\n          if (args != null) {\n            FunctionParamBuilder paramBuilder = new FunctionParamBuilder(ct);\n            if (paramBuilder.hasKnownType()) {\n              Iterator<Node> arguments = args.children().iterator();\n              Iterator<JSType> parameters = paramBuilder.build().getTypes().iterator();\n              while (arguments.hasNext() && parameters.hasNext()) {\n                Node arg = arguments.next();\n                JSType paramType = parameters.next();\n                if (paramType != null) {\n                  scope.inferQualifiedSlot(arg, arg, paramType, paramType);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}