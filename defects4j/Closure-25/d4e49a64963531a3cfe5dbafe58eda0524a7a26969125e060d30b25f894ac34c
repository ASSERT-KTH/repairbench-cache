{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  \n  FunctionType ct = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  \n  n.setJSType(type);\n  \n  // Handle constructor arguments\n  Node firstArg = constructor.getNext();\n  if (ct != null && firstArg != null) {\n    FunctionType.Parameter param = ct.getParameters().get(0);\n    if (param != null) {\n      scope = traverse(firstArg, scope);\n      JSType paramType = param.getJSType();\n      if (paramType != null) {\n        firstArg.setJSType(paramType);\n        scope = maybeBackwardInferenceFromRHS(firstArg, scope);\n      }\n      // Handle remaining arguments\n      for (Node arg = firstArg.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n      }\n      return scope;\n    }\n  }\n  \n  // If no constructor type is found or no parameters exist, just traverse the arguments\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}