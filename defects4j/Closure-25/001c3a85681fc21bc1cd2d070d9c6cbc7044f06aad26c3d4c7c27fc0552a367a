{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Get the function parameters and set expected types on arguments\n          List<JSType> paramTypes = ct.getParameterTypes();\n          int paramCount = 0;\n          for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n            if (paramCount < paramTypes.size()) {\n              JSType paramType = paramTypes.get(paramCount);\n              arg.setJSType(paramType);\n            }\n            scope = traverse(arg, scope);\n            paramCount++;\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}