{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n        \n        // Apply type information from the constructor parameters to the arguments\n        Iterator<Node> arguments = NodeUtil.getChildIterator(n, false);\n        arguments.next(); // Skip the constructor.\n        if (arguments.hasNext()) {\n          Iterator<Node> parameters = ct.getParameters().iterator();\n          while (arguments.hasNext() && parameters.hasNext()) {\n            Node arg = arguments.next();\n            JSType paramType = parameters.next().getJSType();\n            if (paramType != null) {\n              // Reverse-flow type information from parameter to argument\n              arg.setJSType(paramType);\n              scope = reverseFlow(scope, arg, paramType);\n            }\n          }\n        }\n      }\n    }\n  }\n  n.setJSType(type);\n  \n  // Still need to traverse the arguments to build scopes\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}