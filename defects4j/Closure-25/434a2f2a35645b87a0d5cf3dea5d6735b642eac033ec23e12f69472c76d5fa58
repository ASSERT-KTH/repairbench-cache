{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n// buggy code\n//    Node constructor = n.getFirstChild();\n//    scope = traverse(constructor, scope);\n//    JSType constructorType = constructor.getJSType();\n//    JSType type = null;\n//    if (constructorType != null) {\n//      constructorType = constructorType.restrictByNotNullOrUndefined();\n//      if (constructorType.isUnknownType()) {\n//        type = getNativeType(UNKNOWN_TYPE);\n//      } else {\n//        FunctionType ct = constructorType.toMaybeFunctionType();\n//        if (ct == null && constructorType instanceof FunctionType) {\n//          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n//          // return null. But NoObjectType implements the FunctionType\n//          // interface, precisely because it can validly construct objects.\n//          ct = (FunctionType) constructorType;\n//        }\n//        if (ct != null && ct.isConstructor()) {\n//          type = ct.getInstanceType();\n//        }\n//      }\n//    }\n//    n.setJSType(type);\n//    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n//      scope = traverse(arg, scope);\n//    }\n    Node constructor = n.getFirstChild();\n    if (constructor != null) {\n      scope = traverse(constructor, scope);\n      JSType constructorType = constructor.getJSType();\n      JSType type = null;\n      if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n          type = getNativeType(UNKNOWN_TYPE);\n        } else {\n          FunctionType ct = constructorType.toMaybeFunctionType();\n          if (ct == null && constructorType instanceof FunctionType) {\n            // If constructorType is a NoObjectType, then toMaybeFunctionType will\n            // return null. But NoObjectType implements the FunctionType\n            // interface, precisely because it can validly construct objects.\n            ct = (FunctionType) constructorType;\n          }\n          if (ct != null && ct.isConstructor()) {\n            type = ct.getInstanceType();\n          }\n        }\n      }\n      n.setJSType(type);\n    }\n   \n    return scope;\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}