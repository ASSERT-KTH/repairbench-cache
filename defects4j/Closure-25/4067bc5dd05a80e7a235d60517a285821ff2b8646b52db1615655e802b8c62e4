{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                // Extract parameter types from the constructor function\n                List<JSType> paramTypes = ct.getParams() == null ? ImmutableList.of() : FluentIterable.from(ct.getParams())\n                        .transform(Parameter::getType)\n                        .toList();\n                \n                // Process each argument with its corresponding parameter type\n                int paramIndex = 0;\n                Node arg = constructor.getNext();\n                while (arg != null) {\n                    if (paramIndex < paramTypes.size()) {\n                        JSType paramType = paramTypes.get(paramIndex);\n                        // Check if the argument is a variable and set its type in scope\n                        if (arg.isName()) {\n                            String varName = arg.getString();\n                            if (scope.lookup(varName) == null || scope.lookup(varName).isUnknownType()) {\n                                scope = scope.add(varName, paramType);\n                            }\n                        } else {\n                            // For other types, set JSType directly\n                            arg.setJSType(paramType);\n                        }\n                    }\n                    scope = traverse(arg, scope);\n                    arg = arg.getNext();\n                    paramIndex++;\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}