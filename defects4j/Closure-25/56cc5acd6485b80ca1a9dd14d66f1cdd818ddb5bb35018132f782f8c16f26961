{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    FunctionType ct = null; // Declare ct here so it's accessible later\n\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        ct = constructorType.toMaybeFunctionType(); // Assign ct here\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n\n    // Get formal parameters for backward inference if ct is a constructor.\n    Node formalParam = null;\n    if (ct != null && ct.isConstructor()) {\n        formalParam = ct.getParametersNode();\n    }\n    Node currentParam = (formalParam == null) ? null : formalParam.getFirstChild();\n\n    // Loop through arguments, performing both forward and backward inference.\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope); // Forward inference: traverse the argument itself.\n\n      // Backward inference: If we have a constructor function type, propagate parameter types to arguments.\n      if (ct != null && ct.isConstructor()) {\n          if (currentParam != null) {\n            scope.inferPropertyTypes(arg, currentParam.getJSType());\n            currentParam = currentParam.getNext();\n          } else if (ct.isVarArgs()) {\n            scope.inferPropertyTypes(arg, ct.getRestOfParametersType());\n          }\n      }\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}