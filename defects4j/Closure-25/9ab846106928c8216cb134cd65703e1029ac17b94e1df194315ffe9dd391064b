{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n        // Backwards inference: if the result of 'new F(y)' is assigned to a variable,\n        // we can infer that 'y' is a valid argument to 'F'.\n        int paramCount = ct.getParameters().size();\n        int argCount = n.getChildCount() - 1;\n        if (paramCount > 0 && argCount >= paramCount - 1) {\n          Node lastParam = ct.getParameters().get(paramCount - 1);\n          if (lastParam.isVarArgs()) {\n            // var args can take any number of arguments\n            argCount = paramCount;\n          }\n          Node arg = n.getSecondChild();\n          for (int i = 0; i < argCount; i++) {\n            if (arg != null) {\n              scope = traverse(arg, scope);\n              if (i < paramCount) {\n                JSType paramType = ct.getParameters().get(i).getJSType();\n                if (paramType != null) {\n                  arg.setJSType(paramType);\n                  scope = updateScopeForTypeCheck(scope, arg, paramType);\n                }\n              }\n              arg = arg.getNext();\n            }\n          }\n          // continue with the rest of the arguments\n          for (; arg != null; arg = arg.getNext()) {\n            scope = traverse(arg, scope);\n          }\n          return scope;\n        }\n      }\n    }\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}