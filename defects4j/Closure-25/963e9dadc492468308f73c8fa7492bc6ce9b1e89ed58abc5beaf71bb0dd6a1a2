{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Handle parameter types from constructor\n          if (ct.getParametersCount() > 0 && n.hasChildren()) {\n            Node args = constructor.getNext();\n            if (args != null) {\n              // For each parameter in constructor, update the corresponding argument's type\n              int i = 0;\n              for (JSType paramType : ct.getParameters()) {\n                if (i < n.getChildCount() - 1) {\n                  Node arg = args;\n                  for (int j = 0; j < i; j++) {\n                    arg = arg.getNext();\n                  }\n                  if (arg != null) {\n                    JSType argType = arg.getJSType();\n                    if (argType != null && paramType != null) {\n                      // Update the argument's type based on parameter type\n                      arg.setJSType(argType.getLeastSupertype(paramType));\n                    }\n                  }\n                }\n                i++;\n              }\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}