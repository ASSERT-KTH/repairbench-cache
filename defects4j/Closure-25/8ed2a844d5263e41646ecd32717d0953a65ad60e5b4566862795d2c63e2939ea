{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    FunctionType ct = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n    Node arg = constructor.getNext();\n    if (ct != null && ct.isConstructor()) {\n      List<JSType> paramTypes = ct.getParameters();\n      int paramIndex = 0;\n      while (arg != null && paramIndex < paramTypes.size()) {\n        JSType expectedType = paramTypes.get(paramIndex);\n        scope = traverse(arg, scope, expectedType);\n        arg = arg.getNext();\n        paramIndex++;\n      }\n      while (arg != null) {\n        scope = traverse(arg, scope);\n        arg = arg.getNext();\n      }\n    } else {\n      while (arg != null) {\n        scope = traverse(arg, scope);\n        arg = arg.getNext();\n      }\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}