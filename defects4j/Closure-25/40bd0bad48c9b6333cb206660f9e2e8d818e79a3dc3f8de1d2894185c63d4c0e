{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Backwards inference: if the result of `new F(y)` is a known type,\n          // then we know that the parameter type of F must be a supertype of the type of y.\n          if (n.getFirstFirstChild().isThis()) {\n            // Don't do backwards inference if the ctor call is a super() call.\n          } else if (n.getJSType() != null && !n.getJSType().isUnknownType()) {\n            // If the result of 'new F(y)' is not unknown, use it to infer the type of y.\n            FunctionType fnType = ct.getTypeOfThis();\n            if (fnType.isConstructor() && fnType.getParameters().size() > 0) {\n              Node argumentNode = constructor.getNext();\n              if (argumentNode != null) {\n                JSType argumentType = argumentNode.getJSType();\n                if (argumentType != null) {\n                  // Get the type of the first parameter\n                  JSType parameterType = fnType.getParameterType(0);\n                  // Infer the type of y by making it a subtype of the parameter type\n                  argumentType = argumentType.getGreatestSubtype(parameterType);\n                  argumentNode.setJSType(argumentType);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}