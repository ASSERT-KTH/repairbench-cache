{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    FunctionType ct = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n    Node callTarget = constructor;\n    Node argNode = callTarget.getNext();\n    // Traverse the arguments\n    int i = 0;\n    while (argNode != null) {\n      scope = traverse(argNode, scope);\n\n      if (ct != null && ct.getSource() != null) {\n        JSType paramType = ct.getTypeOfThis(); // default fallback\n        if (ct.getParameters() != null) {\n          Node paramNode = ct.getParameters().getFirstChild();\n          int j = 0;\n          while (paramNode != null && j < i) {\n            paramNode = paramNode.getNext();\n            j++;\n          }\n          if (paramNode != null) {\n            paramType = paramNode.getJSType();\n          }\n        }\n        if (paramType != null) {\n          backwardsInferenceFromCallSite(argNode, paramType);\n        }\n      }\n\n      argNode = argNode.getNext();\n      i++;\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}