{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    FunctionType ct = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n\n    Node callarg = constructor.getNext();\n    for (int i = 0; callarg != null; i++, callarg = callarg.getNext()) {\n      scope = traverse(callarg, scope);\n      if (ct != null) {\n        // Attempt backwards inference on the argument.\n        JSType paramType = ct.getFormalType(i);\n        if (paramType != null) {\n          // loosen to get optionality right\n          paramType = paramType.getGreatestSubtype(getNativeType(OBJECT_TYPE));\n          reverseInfer(callarg, paramType);\n        }\n      }\n    }\n\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}