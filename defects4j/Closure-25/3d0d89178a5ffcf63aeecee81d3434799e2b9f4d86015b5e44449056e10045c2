{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  // Traverse the constructor expression first.\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n\n  // Figure out what the \"new\" yields, and collect the FunctionType if available.\n  JSType constructorType = constructor.getJSType();\n  FunctionType ctorFn = null;\n  JSType instanceType = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      instanceType = getNativeType(UNKNOWN_TYPE);\n    } else {\n      ctorFn = constructorType.toMaybeFunctionType();\n      if (ctorFn == null && constructorType instanceof FunctionType) {\n        // NoObjectType implements FunctionType so that it can still construct.\n        ctorFn = (FunctionType) constructorType;\n      }\n      if (ctorFn != null && ctorFn.isConstructor()) {\n        instanceType = ctorFn.getInstanceType();\n      } else {\n        // Not really a constructor; drop it.\n        ctorFn = null;\n      }\n    }\n  }\n  n.setJSType(instanceType);\n\n  // Now traverse each argument and\u2014if we have a constructor signature\u2014\n  // do backwards inference from @param to the actual.\n  int i = 0;\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), i++) {\n    scope = traverse(arg, scope);\n    if (ctorFn != null) {\n      // Infer the i-th parameter's annotated type, if any.\n      JSType expected = ctorFn.getParameterType(i);\n      if (expected != null) {\n        // Assign (narrow) the argument to match the @param.\n        scope = assign(scope, arg, expected);\n      }\n    }\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}