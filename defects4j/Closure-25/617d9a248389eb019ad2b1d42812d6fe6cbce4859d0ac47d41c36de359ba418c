{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Add backward inference for constructor parameters\n          if (type != null) {\n            FunctionType functionType = ct;\n            int paramCount = Math.min(n.getChildCount() - 1, functionType.getParameters().size());\n            for (int i = 0; i < paramCount; i++) {\n              Node arg = constructor.getNext().getChildAt(i);\n              if (arg != null) {\n                JSType paramType = functionType.getParameters().get(i);\n                if (paramType != null) {\n                  // Update the argument type based on the constructor's parameter type\n                  JSType currentArgType = arg.getJSType();\n                  if (currentArgType == null) {\n                    arg.setJSType(paramType);\n                  } else {\n                    // Combine the types\n                    arg.setJSType(currentArgType.getLeastCommonSupertype(paramType));\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}