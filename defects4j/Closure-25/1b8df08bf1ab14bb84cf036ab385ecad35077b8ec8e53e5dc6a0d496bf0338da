{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  FunctionType ct = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // When constructorType is a NoObjectType, toMaybeFunctionType returns null\n        // even though it implements FunctionType.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(type);\n  \n  // Process arguments: if we know the constructor type, propagate the formal parameter type\n  // back to the argument for backwards inference.\n  Node arg = constructor.getNext();\n  int argIndex = 0;\n  for (; arg != null; arg = arg.getNext(), argIndex++) {\n    if (ct != null && ct.isConstructor()) {\n      JSType expectedArgType = ct.getParameterType(argIndex);\n      if (expectedArgType != null) {\n        // Propagate the expected type on the argument so that backward inference\n        // will refine its type (e.g. turning {} into {foo: (number|undefined)}).\n        arg.setJSType(expectedArgType);\n      }\n    }\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}