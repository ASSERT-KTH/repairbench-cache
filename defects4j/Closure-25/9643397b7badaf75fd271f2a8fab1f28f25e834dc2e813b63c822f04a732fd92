{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n  Node constructor = n.getFirstChild();\n  // Get the arguments *before* traversing children\n  List<Node> arguments = new ArrayList<>();\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    arguments.add(arg);\n  }\n\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n\n        // Backwards type inference: propagate constructor argument types\n        // from the FunctionType's parameter types to the provided arguments\n        // (if present and type information is known)\n        Node paramNode = ct.getParameters() == null ? null : ct.getParameters().getFirstChild();\n        for (int i = 0; i < arguments.size() && paramNode != null; i++, paramNode = paramNode.getNext()) {\n          Node arg = arguments.get(i);\n          JSType paramType = paramNode.getJSType();\n          if (paramType != null) {\n            backwardInferenceFromCallSite(arg, paramType, scope);\n          }\n        }\n      }\n    }\n  }\n  n.setJSType(type);\n\n  // Traverse the argument children after backward type inference\n  for (Node arg : arguments) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}