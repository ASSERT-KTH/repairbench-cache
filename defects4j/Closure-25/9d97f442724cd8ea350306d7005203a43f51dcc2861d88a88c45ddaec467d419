{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                // Infer the parameter types from the arguments\n                if (type != null && type.isObject()) {\n                    ObjectType objType = type.toMaybeObjectType();\n                    if (objType != null) {\n                        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n                            JSType argType = arg.getJSType();\n                            if (argType != null) {\n                                // Update the parameter types based on the argument types\n                                for (String prop : objType.getOwnPropertyNames()) {\n                                    JSType propType = objType.getPropertyType(prop);\n                                    if (propType != null && propType.isUnionType()) {\n                                        UnionType unionType = propType.toMaybeUnionType();\n                                        if (unionType != null) {\n                                            unionType = unionType.restrictByNotNullOrUndefined();\n                                            if (unionType.isSubtype(argType)) {\n                                                objType = objType.withPropertyType(prop, argType);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        type = objType;\n                    }\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}