{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  // First do the usual forward traversal on the constructor expression.\n  scope = traverse(constructor, scope);\n\n  // Compute the result type of `new`\n  JSType constructorType = constructor.getJSType();\n  JSType newType = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      newType = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // NoObjectType implements FunctionType so we still want to treat\n        // it as a constructor if it was annotated that way.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        // Forward inference: the type of the `new` expression itself\n        newType = ct.getInstanceType();\n\n        // Backward inference: use the declared parameter types to\n        // refine the actual argument slots before we traverse them.\n        Node arg = constructor.getNext();\n        for (int i = 0; arg != null; i++, arg = arg.getNext()) {\n          JSType formal = ct.getParameterType(i);\n          if (formal != null) {\n            // inferSlotType will meet the existing type of `arg` with `formal`\n            scope = scope.inferSlotType(arg, formal);\n          }\n        }\n      }\n    }\n  }\n\n  // Assign the computed type to the `new` node.\n  n.setJSType(newType);\n\n  // Now traverse the arguments under the (possibly) refined scope.\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}