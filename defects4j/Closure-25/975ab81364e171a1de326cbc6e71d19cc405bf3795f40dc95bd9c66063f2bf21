{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n            }\n        }\n    }\n    n.setJSType(type);\n    \n    // Perform backwards inference for the arguments of the constructor\n    Node arg = constructor.getNext();\n    if (arg != null) {\n        JSType inferredType = type;\n        while (arg != null) {\n            if (inferredType != null && inferredType.isSubtype(getNativeType(OBJECT_TYPE))) {\n                ObjectType objType = (ObjectType) inferredType;\n                String propName = arg.getString();\n                JSType propType = objType.getPropertyType(propName);\n                if (propType != null) {\n                    scope = inferPropertyTypes(arg, propType, scope);\n                }\n            }\n            arg = arg.getNext();\n        }\n    }\n    \n    return scope;\n}\n\nprivate FlowScope inferPropertyTypes(Node arg, JSType propType, FlowScope scope) {\n    // Infer the type of the argument based on the property type\n    JSType argType = arg.getJSType();\n    if (argType == null || argType.isUnknownType()) {\n        arg.setJSType(propType);\n        scope = scope.inferSlotType(arg, propType);\n    } else if (!argType.isSubtype(propType)) {\n        // If the argument type is not a subtype of the property type, refine the argument type\n        arg.setJSType(propType.getLeastSupertype(argType));\n        scope = scope.inferSlotType(arg, propType.getLeastSupertype(argType));\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}