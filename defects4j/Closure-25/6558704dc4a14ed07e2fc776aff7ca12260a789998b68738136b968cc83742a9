{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  FunctionType ct = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // Handle types that implement FunctionType even though\n        // toMaybeFunctionType returns null.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(type);\n\n  // Backward propagate parameter types into the arguments.\n  // For each argument, if we have a function type with a declared parameter,\n  // traverse the argument node with the expected parameter type.\n  int i = 0;\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), i++) {\n    JSType expected = (ct != null && ct.isConstructor()) ? ct.getParameterType(i) : null;\n    if (expected != null) {\n      scope = traverse(arg, scope, expected);\n    } else {\n      scope = traverse(arg, scope);\n    }\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}