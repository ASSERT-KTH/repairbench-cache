{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // Ensure ct is set even if constructorType is a NoObjectType\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Get the parameter types of the constructor\n          List<JSType> parameterTypes = ct.getParameterTypes();\n          int paramIndex = 0;\n          // Process each argument of the new expression\n          for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n              if (paramIndex < parameterTypes.size()) {\n                  // Set the expected type for the argument\n                  JSType expectedType = parameterTypes.get(paramIndex);\n                  arg.setJSType(expectedType);\n              }\n              scope = traverse(arg, scope);\n              paramIndex++;\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}