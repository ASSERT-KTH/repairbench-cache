{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    // Traverse the constructor expression first.\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    // Figure out the new-expression's result type, and collect\n    // its formal parameter nodes for backward inference.\n    JSType constructorType = constructor.getJSType();\n    JSType instanceType = null;\n    Iterable<Node> formals = null;\n    FunctionType ct = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        instanceType = getNativeType(UNKNOWN_TYPE);\n      } else {\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          instanceType = ct.getInstanceType();\n          formals = ct.getParameters();\n        }\n      }\n    }\n    // Record the type of the `new` expression.\n    n.setJSType(instanceType);\n\n    // Now traverse the arguments, passing each through the contextual\n    // type of its corresponding formal (if available).\n    if (formals != null) {\n      Iterator<Node> fit = formals.iterator();\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        if (fit.hasNext()) {\n          Node formal = fit.next();\n          JSType formalType = formal.getJSType();\n          if (formalType != null) {\n            formalType = formalType.restrictByNotNullOrUndefined();\n            if (!formalType.isUnknownType()) {\n              scope = traverse(arg, scope.withContextualType(formalType));\n              continue;\n            }\n          }\n        }\n        scope = traverse(arg, scope);\n      }\n    } else {\n      // No constructor signature => just traverse normally.\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n      }\n    }\n\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}