{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n        // Backwards inference.\n        int paramNum = 0;\n        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n          scope = traverse(arg, scope);\n          if (ct.hasParameters() && (paramNum < ct.getParameters().size())) {\n            Node formalParam = ct.getParameters().get(paramNum).getNode();\n            if (formalParam.getJSType() != null) {\n              // NOTE: We could do much, much better here by\n              // being more aware of the expected type.\n              arg.inferType(getTypeInferenceEngine(), formalParam.getJSType());\n            }\n          }\n          paramNum++;\n        }\n        return scope;\n      }\n    }\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}