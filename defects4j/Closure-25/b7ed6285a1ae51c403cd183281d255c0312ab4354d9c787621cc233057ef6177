{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          if (type != null) {\n            // Apply backwards inference for constructor arguments\n            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n              if (arg.getJSType() == null) {\n                // If argument type is not yet set, infer it from constructor parameter\n                FunctionType fnType = constructorType.toMaybeFunctionType();\n                if (fnType != null) {\n                  int paramCount = fnType.getParameters().size();\n                  int argIndex = 0;\n                  for (Node currentArg = constructor.getNext();\n                       currentArg != null && argIndex < paramCount;\n                       currentArg = currentArg.getNext(), argIndex++) {\n                    JSType paramType = fnType.getParameters().get(argIndex);\n                    if (paramType != null) {\n                      currentArg.setJSType(paramType);\n                    }\n                  }\n                  break; // Only need to do this once\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}