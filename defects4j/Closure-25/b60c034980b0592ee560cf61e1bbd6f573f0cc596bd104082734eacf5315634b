{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                // Backwards inference.\n                int paramNum = 0;\n                for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), paramNum++) {\n                    Node formalParam = ct.getParameter(paramNum);\n                    JSType formalParamType = formalParam != null ? formalParam.getJSType() : null;\n                    if (formalParamType != null && !formalParamType.isUnknownType()) {\n                        scope = traverseBackwards(arg, scope, formalParamType);\n                    } else {\n                        scope = traverse(arg, scope);\n                    }\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}