{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                // If constructorType is a NoObjectType, then toMaybeFunctionType will\n                // return null. But NoObjectType implements the FunctionType\n                // interface, precisely because it can validly construct objects.\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n                // Infer type for arguments\n                Node arg = constructor.getNext();\n                if (arg != null) {\n                    JSType[] argTypes = ct.getParameterTypes();\n                    for (int i = 0; i < argTypes.length && arg != null; i++, arg = arg.getNext()) {\n                        JSType argType = argTypes[i];\n                        if (argType != null) {\n                            scope = inferTypesForNode(arg, argType, scope);\n                        }\n                        scope = traverse(arg, scope);\n                    }\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    return scope;\n}\n\nprivate FlowScope inferTypesForNode(Node node, JSType type, FlowScope scope) {\n    if (node.isAssign() && node.getFirstChild().isName()) {\n        String varName = node.getFirstChild().getString();\n        scope.inferSlotType(varName, type);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}