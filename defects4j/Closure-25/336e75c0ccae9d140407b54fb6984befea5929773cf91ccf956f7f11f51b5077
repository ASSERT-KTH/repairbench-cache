{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n\n                // Perform backwards inference on arguments\n                Node arg = constructor.getNext();\n                if (arg != null) {\n                    FunctionType callTarget = ct;\n                    Iterator<Node> paramIt = callTarget.getParameters().iterator();\n                    for (Node argNode = arg; argNode != null; argNode = argNode.getNext()) {\n                        scope = traverse(argNode, scope);\n                        if (paramIt.hasNext()) {\n                            Node paramNode = paramIt.next();\n                            JSType paramType = paramNode.getJSType();\n                            JSType argType = argNode.getJSType();\n                            if (paramType != null && argType != null) {\n                                JSType restricted = paramType.restrictByNotNullOrUndefined();\n                                if (!restricted.isUnknownType()) {\n                                    argNode.setJSType(restricted.getGreatestSubtype(argType));\n                                }\n                            }\n                        } else {\n                            scope = traverse(argNode, scope);\n                        }\n                    }\n                    // Skip the default argument traversal since already done\n                    return scope;\n                }\n            }\n        }\n    }\n\n    n.setJSType(type);\n    // Fall-back argument traversal when no backward inference\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}