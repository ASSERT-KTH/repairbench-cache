{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  FunctionType ct = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  n.setJSType(type);\n\n  // Propagate formal parameter types to the actual arguments so that backwards\n  // inference updates them (e.g. inferring properties on object literals passed\n  // to a constructor).\n  Node arg = constructor.getNext();\n  if (ct != null) {\n    int index = 0;\n    while (arg != null) {\n      // If we have a corresponding formal parameter type, use it as the expected type.\n      JSType expectedType = (index < ct.getParameters().size())\n          ? ct.getParameterType(index) : null;\n      scope = traverse(arg, scope, expectedType);\n      arg = arg.getNext();\n      index++;\n    }\n  } else {\n    for (; arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}