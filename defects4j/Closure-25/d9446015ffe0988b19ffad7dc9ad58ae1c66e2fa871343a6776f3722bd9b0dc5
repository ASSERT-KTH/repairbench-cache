{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n\n          // Backwards inference for arguments to the constructor.\n          // Propagate expected type information from function param.\n          Node arg = constructor.getNext();\n          for (int i = 0; arg != null; i++, arg = arg.getNext()) {\n            JSType paramType = ct.getTypeOfThis();\n            if (ct.getParameters() != null) {\n              Node paramNode = ct.getParameters().getFirstChild();\n              for (int pi = 0; pi < i && paramNode != null; pi++) {\n                paramNode = paramNode.getNext();\n              }\n              if (paramNode != null && paramNode.getJSType() != null) {\n                paramType = paramNode.getJSType();\n              }\n            }\n            scope = traverseWithinFunction(arg, scope, paramType);\n          }\n          // Finished processing args above\n          n.setJSType(type);\n          return scope;\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}