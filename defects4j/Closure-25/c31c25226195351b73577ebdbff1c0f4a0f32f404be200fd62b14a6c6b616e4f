{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    JSType type = null;\n\n    // First, process arguments to allow backwards inference before traversing the constructor\n    List<Node> args = new ArrayList<>();\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      args.add(arg);\n    }\n    // Traverse arguments first (backwards inference happens here)\n    for (Node arg : args) {\n      scope = traverse(arg, scope);\n    }\n    // Now traverse the constructor\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}