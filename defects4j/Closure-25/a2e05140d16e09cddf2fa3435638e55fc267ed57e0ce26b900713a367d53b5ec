{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Propagate parameter types for backwards inference\n          if (n.hasChildren() && constructor.hasChildren()) {\n            Node constructorCall = constructor;\n            Node newCall = n;\n            int paramCount = 0;\n            // Skip the constructor's 'this' parameter if it's a FUNCTION node\n            if (constructor.isFunction()) {\n              paramCount = constructor.getChildCount() - 2; // first 2 are name and block\n            } else {\n              paramCount = constructor.getChildCount();\n            }\n\n            // The first child of new is the constructor, subsequent children are args\n            int argIndex = 0;\n            Node arg = constructor.getNext();\n            while (arg != null) {\n              if (argIndex < paramCount) {\n                JSType paramType = ct.getParameterType(argIndex);\n                if (paramType != null && !paramType.isUnknownType()) {\n                  // Infer the argument type from the parameter type\n                  arg.setJSType(paramType);\n                }\n              }\n              argIndex++;\n              arg = arg.getNext();\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}