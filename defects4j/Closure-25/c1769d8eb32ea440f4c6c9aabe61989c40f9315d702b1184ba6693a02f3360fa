{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    // Traverse arguments first to enable backwards inference before type is fixed.\n    Node argStart = constructor.getNext();\n    List<Node> args = new ArrayList<>();\n    for (Node arg = argStart; arg != null; arg = arg.getNext()) {\n      args.add(arg);\n    }\n    // Traverse arguments first.\n    for (Node arg : args) {\n      scope = traverse(arg, scope);\n    }\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          // Backwards inference from arguments to parameter types.\n          ct.inferJsDocInfoForCall(n, args.toArray(new Node[0]), this);\n        }\n      }\n    }\n    n.setJSType(type);\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}