{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  // Traverse the \"new\" expression's constructor\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n\n  // Figure out the instantiated type\n  JSType constructorType = constructor.getJSType();\n  JSType newExprType = null;\n  FunctionType ctorFn = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      newExprType = getNativeType(UNKNOWN_TYPE);\n    } else {\n      ctorFn = constructorType.toMaybeFunctionType();\n      if (ctorFn == null && constructorType instanceof FunctionType) {\n        ctorFn = (FunctionType) constructorType;\n      }\n      if (ctorFn != null && ctorFn.isConstructor()) {\n        newExprType = ctorFn.getInstanceType();\n      } else {\n        ctorFn = null;  // not actually a constructor\n      }\n    }\n  }\n  n.setJSType(newExprType);\n\n  // Now traverse and (backwards) infer each argument\n  int i = 0;\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), i++) {\n    scope = traverse(arg, scope);\n    if (ctorFn != null) {\n      JSType paramType = ctorFn.getParameterType(i);\n      if (paramType != null) {\n        // Propagate the parameter's declared type back into the argument\n        scope = assignToLValue(arg, paramType, scope);\n        arg.setJSType(paramType);\n      }\n    }\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}