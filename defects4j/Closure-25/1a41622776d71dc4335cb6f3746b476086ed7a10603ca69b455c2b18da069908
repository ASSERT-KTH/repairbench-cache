{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    // First pass: traverse all arguments to get their types\n    List<Node> args = new ArrayList<>();\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      args.add(arg);\n      scope = traverse(arg, scope);\n    }\n\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n\n          // Infer parameter types from argument types\n          if (ct.hasParameterInformation()) {\n            int paramCount = ct.getParametersCount();\n            for (int i = 0; i < args.size() && i < paramCount; i++) {\n              Node arg = args.get(i);\n              JSType argType = arg.getJSType();\n              if (argType != null) {\n                FunctionParamType paramType = ct.getParameterType(i);\n                if (paramType != null && paramType.getType() != null) {\n                  // Update parameter type with argument type information\n                  JSType paramTypeToUpdate = ct.getParameterType(i).getType();\n                  if (paramTypeToUpdate != null && !paramTypeToUpdate.isUnknownType()) {\n                    // Merge the argument type with the parameter type\n                    JSType refinedType = paramTypeToUpdate.meet(argType);\n                    if (paramType != null && refinedType != null) {\n                      ct = ct.withParameterType(i,\n                          paramType.withType(refinedType));\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n\n    // Traverse arguments again to propagate the refined types\n    for (Node arg : args) {\n      scope = traverse(arg, scope);\n    }\n\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}