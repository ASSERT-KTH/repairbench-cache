{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n        \n        // Apply backwards inference to match constructor parameters\n        Node firstArg = constructor.getNext();\n        if (firstArg != null) {\n          FunctionType.Parameter param = ct.getFirstParameter();\n          if (param != null) {\n            JSType paramType = param.getJSType();\n            if (paramType != null) {\n              scope = traverseWithinNew(firstArg, scope, paramType);\n            }\n          }\n          // Handle remaining parameters\n          Node arg = firstArg.getNext();\n          int i = 1;\n          while (arg != null) {\n            param = ct.getParameter(i);\n            if (param != null) {\n              JSType paramType = param.getJSType();\n              if (paramType != null) {\n                scope = traverseWithinNew(arg, scope, paramType);\n              }\n            }\n            arg = arg.getNext();\n            i++;\n          }\n        }\n      }\n    }\n  }\n  n.setJSType(type);\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}