{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  FunctionType ct = null;\n\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n\n  n.setJSType(type);\n\n  // Traverse argument expressions\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n\n  // Backwards-propagate expected argument types\n  if (ct != null && ct.isConstructor()) {\n    Iterator<Node> params = ct.getParameters() != null ? ct.getParameters().iterator() : null;\n    Node argNode = constructor.getNext();\n    while (argNode != null) {\n      JSType expectedType = null;\n      if (params != null && params.hasNext()) {\n        Node paramNode = params.next();\n        if (paramNode.getJSType() != null) {\n          expectedType = paramNode.getJSType();\n        }\n      }\n      if (expectedType != null) {\n        backwardInference(argNode, expectedType);\n      }\n      argNode = argNode.getNext();\n    }\n  }\n\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}