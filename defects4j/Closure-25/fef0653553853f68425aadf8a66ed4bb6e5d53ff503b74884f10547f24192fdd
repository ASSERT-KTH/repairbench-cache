{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n        // Backwards inference: if the result of `new F(y)` has a type,\n        // then `y` must be a valid argument to the (possibly unknown) constructor F.\n        // TODO(b/117621661): this is a very incomplete handling of backwards inference for constructors.\n        // It doesn't handle multiple arguments or cases where `F` is declared as a variable rather than a function.\n        Node argument = constructor.getNext();\n        if (argument != null && argument.getNext() == null) {\n          JSType parameterType = ct.getParameterType();\n          if (parameterType != null) {\n            scope = traverseBackwards(argument, parameterType, scope);\n          }\n        }\n      }\n    }\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}