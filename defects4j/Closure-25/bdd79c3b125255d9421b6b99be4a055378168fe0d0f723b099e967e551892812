{
    "generation": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    // Declare ct here so it's available for processing arguments later.\n    FunctionType ct = null;\n\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n\n    int argIndex = 0; // Tracks the current argument's position relative to the constructor's parameters\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      JSType constraintType = null;\n      // Only constrain arguments if we have a valid constructor function type\n      if (ct != null && ct.isConstructor()) {\n        // Match arguments with parameters to get the expected type\n        if (argIndex < ct.getParameters().size()) {\n          Node param = ct.getParameters().get(argIndex);\n          constraintType = param.getJSType();\n        } else if (ct.isVarArgs()) {\n          // If it's a var_args function, all arguments beyond fixed parameters\n          // should match the var_args type. The traverse method will handle\n          // unwrapping the ArrayType for individual arguments if needed.\n          Node varArgsParam = ct.getParameters().get(ct.getParameters().size() - 1);\n          constraintType = varArgsParam.getJSType();\n        }\n      }\n\n      if (constraintType != null) {\n        // Traverse the argument node, constraining its type by the parameter type\n        scope = traverse(arg, scope, constraintType);\n      } else {\n        // Traverse without a specific constraint if no parameter type is available\n        scope = traverse(arg, scope);\n      }\n      argIndex++;\n    }\n    return scope;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}