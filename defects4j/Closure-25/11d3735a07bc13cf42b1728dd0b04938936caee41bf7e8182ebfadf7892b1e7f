{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  \n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      \n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n        \n        // Match actual parameters against formal parameters\n        for (Node arg = constructor.getNext(), param = ct.getParameters().listIterator(0);\n             arg != null && param != null;\n             arg = arg.getNext(), param = param.getNext()) {\n          scope = traverse(arg, scope);\n          JSType paramType = param.getJSType();\n          if (paramType != null) {\n            scope = reverseFlowTypeDetermination(arg, scope, paramType);\n          }\n        }\n        // Handle any remaining arguments\n        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n          if (scope == null) {\n            scope = traverse(arg, scope);\n          }\n        }\n        n.setJSType(type);\n        return scope;\n      }\n    }\n  }\n  \n  n.setJSType(type);\n  // Process arguments if we couldn't determine the function\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}