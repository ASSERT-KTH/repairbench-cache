{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n        // Backwards inference: If the result of 'new F(y)' is assigned to a variable,\n        // we want to update the type of 'y' based on the type of 'F's parameter.\n        int paramIndex = 0;\n        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), paramIndex++) {\n          scope = traverse(arg, scope);\n          // If the argument is a formal parameter, update its type.\n          if (arg.isName()) {\n            String name = arg.getString();\n            JSType paramType = ct.getParameterTypeAt(paramIndex);\n            if (paramType != null && scope.hasSlot(name)) {\n              TypedVar var = scope.getVar(name);\n              if (var != null) {\n                var.getType().restrictByNotNullOrUndefined();\n                JSType restricted = var.getType().getRestrictedTypeGivenToOtherType(paramType);\n                scope = updateScopeType(scope, arg, restricted);\n              }\n            }\n          }\n        }\n        return scope;\n      }\n    }\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}