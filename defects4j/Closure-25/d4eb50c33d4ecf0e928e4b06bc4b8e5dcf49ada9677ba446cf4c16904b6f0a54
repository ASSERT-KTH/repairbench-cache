{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            FunctionType ct = constructorType.toMaybeFunctionType();\n            if (ct == null && constructorType instanceof FunctionType) {\n                ct = (FunctionType) constructorType;\n            }\n            if (ct != null && ct.isConstructor()) {\n                type = ct.getInstanceType();\n\n                // perform backwards inference from parameter types\n                Node callTarget = constructor;\n                Node argNode = callTarget.getNext();\n                int paramIdx = 0;\n\n                for (Node param : ct.getParameters()) {\n                    if (argNode == null) {\n                        break;\n                    }\n                    JSType paramType = param.getJSType();\n                    if (paramType != null) {\n                        backwardInferType(argNode, scope, paramType);\n                    }\n                    argNode = argNode.getNext();\n                    paramIdx++;\n                }\n            }\n        }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}