{
    "generation": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n\n        // Process constructor arguments to infer parameter types\n        Node arg = constructor.getNext();\n        if (ct != null && ct.isConstructor()) {\n          FunctionType functionType = ct;\n          if (functionType.getParameters() != null) {\n            int paramIndex = 0;\n            while (arg != null && paramIndex < functionType.getParameters().size()) {\n              scope = traverse(arg, scope);\n              JSType paramType = functionType.getParameters().get(paramIndex++);\n              if (paramType != null && !paramType.isUnknownType()) {\n                // Apply the parameter type to the argument\n                arg.setJSType(paramType);\n              }\n              arg = arg.getNext();\n            }\n          }\n        }\n\n        // Process remaining arguments\n        while (arg != null) {\n          scope = traverse(arg, scope);\n          arg = arg.getNext();\n        }\n      }\n    } else {\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n      }\n    }\n\n    n.setJSType(type);\n    return scope;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}