{
    "generation": "/**\n * This method attempts to find two values a and b satisfying\n *   lowerBound <= a < initial < b <= upperBound\n * and f(a) * f(b) <= 0.  If f is continuous on [a,b], this means\n * a and b bracket a root of f.\n * <p>\n * The algorithm starts by setting a := initial; b := initial,\n * examines the value of the function at a and b, and keeps moving\n * the endpoints out by one unit each time through a loop that\n * terminates when one of the following happens:\n * <ul>\n *   <li> f(a) * f(b) <= 0 -- success!</li>\n *   <li> a = lower and b = upper -- ConvergenceException</li>\n *   <li> maximumIterations iterations elapse -- ConvergenceException</li>\n * </ul>\n *\n * @param function the function\n * @param initial initial midpoint of interval being expanded to\n *                bracket a root\n * @param lowerBound lower bound (a is never lower than this value)\n * @param upperBound upper bound (b never is greater than this value)\n * @param maximumIterations maximum number of iterations to perform\n * @return a two element array holding {a, b}.\n * @throws ConvergenceException if the algorithm fails to find a and b\n *                              satisfying the desired conditions\n * @throws FunctionEvaluationException if an error occurs evaluating the function\n * @throws IllegalArgumentException if function is null, maximumIterations\n *                                  is not positive, or initial is not\n *                                  between lowerBound and upperBound\n */\npublic static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound,\n        int maximumIterations)\n        throws ConvergenceException, FunctionEvaluationException {\n\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\",\n                lowerBound, initial, upperBound);\n    }\n\n    double a = initial;\n    double b = initial;\n    double fa = Double.NaN;\n    double fb = Double.NaN;\n    int numIterations = 0;\n\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++;\n    } while (fa * fb > 0.0\n             && numIterations < maximumIterations\n             && (a > lowerBound || b < upperBound));\n\n    // Accept bracket if f(a)*f(b) <= 0.  Only fail when product is strictly positive.\n    if (fa * fb > 0.0) {\n        throw new ConvergenceException(\n            \"number of iterations={0}, maximum iterations={1}, \" +\n            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n            \"final b value={6}, f(a)={7}, f(b)={8}\",\n            numIterations, maximumIterations, initial,\n            lowerBound, upperBound, a, b, fa, fb);\n    }\n\n    return new double[] { a, b };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}