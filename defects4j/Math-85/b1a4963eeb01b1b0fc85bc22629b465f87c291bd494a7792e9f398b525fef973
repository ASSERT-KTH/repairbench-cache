{
    "generation": "/**\n * This method attempts to find two values a and b satisfying\n *   lowerBound <= a < initial < b <= upperBound\n * and\n *   f(a) * f(b) <= 0\n * If f is continuous on [a,b], this means that a and b bracket a root of f.\n * The algorithm starts by setting a := initial, b := initial,\n * then in each iteration moves\n *   a := max(a - 1, lowerBound),\n *   b := min(b + 1, upperBound),\n * and stops when one of:\n *   f(a)*f(b) <= 0  -- success!\n *   a == lowerBound && b == upperBound -- ConvergenceException\n *   maximumIterations iterations elapse       -- ConvergenceException\n *\n * @param function the function to bracket\n * @param initial initial midpoint of interval expansion\n * @param lowerBound lower bound (a is never below this)\n * @param upperBound upper bound (b is never above this)\n * @param maximumIterations maximum # of expansions allowed\n * @return a two-element array {a,b} bracketing a root\n * @throws ConvergenceException if bracketing fails\n * @throws FunctionEvaluationException if function evaluation fails\n * @throws IllegalArgumentException if arguments are invalid\n */\npublic static double[] bracket(UnivariateRealFunction function,\n                               double initial, double lowerBound, double upperBound,\n                               int maximumIterations)\n    throws ConvergenceException, FunctionEvaluationException {\n\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\n            \"function is null\");\n    }\n    if (maximumIterations <= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n            \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n            \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n            lowerBound, initial, upperBound);\n    }\n\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0;\n\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++;\n    } while ((fa * fb > 0.0)\n             && (numIterations < maximumIterations)\n             && ((a > lowerBound) || (b < upperBound)));\n\n    // Success if f(a)*f(b) <= 0; failure only if > 0\n    if (fa * fb > 0.0) {\n        throw new ConvergenceException(\n            \"number of iterations={0}, maximum iterations={1}, \" +\n            \"initial={2}, lower bound={3}, upper bound={4}, \" +\n            \"final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\",\n            numIterations, maximumIterations, initial,\n            lowerBound, upperBound, a, b, fa, fb);\n    }\n\n    return new double[] { a, b };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}