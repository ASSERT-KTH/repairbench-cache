{
    "generation": "    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                try {\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                } catch (MalformedURLException ex) {\n                    return \"\";\n                }\n            }\n            try {\n                // handle the special case of a relative URL starting with a query parameter\n                if (relUrl.startsWith(\"?\")) {\n                    String basePath = base.getPath();\n                    String baseUrl = base.toExternalForm();\n                    if (basePath.contains(\"/\")) {\n                        baseUrl = baseUrl.substring(0, baseUrl.lastIndexOf('/') + 1);\n                    } else {\n                        baseUrl = baseUrl.substring(0, baseUrl.length() - (base.getQuery() != null ? base.getQuery().length() + 1 : 0));\n                    }\n                    return baseUrl + relUrl;\n                } else {\n                    // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n                    URL abs = new URL(base, relUrl);\n                    return abs.toExternalForm();\n                }\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}