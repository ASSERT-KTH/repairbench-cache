{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        try {\n            URL base;\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n\n            // Fix for Java's URL(String, String) behavior for relative queries\n            // If relUrl starts with '?' and baseUri contains a path, preserve the path\n            if (relUrl.startsWith(\"?\")) {\n                String basePath = base.getPath();\n                if (basePath == null || basePath.isEmpty()) {\n                    basePath = \"/\";\n                }\n                StringBuilder sb = new StringBuilder();\n                sb.append(base.getProtocol()).append(\"://\").append(base.getHost());\n                if (base.getPort() != -1) {\n                    sb.append(\":\").append(base.getPort());\n                }\n                sb.append(basePath).append(relUrl);\n                return sb.toString();\n            }\n\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}