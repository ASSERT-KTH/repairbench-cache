{
    "generation": "    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n\n                // Workaround for Java URL's incorrect handling of relative queries/fragments:\n                // If the relative URL starts with '?' or '#', Java incorrectly resolves it against\n                // the directory part of the base, instead of the full path.\n                // E.g. base: http://jsoup.org/path/file?bar, rel: ?foo -> Java resolves to http://jsoup.org/path/?foo\n                // Desired: http://jsoup.org/path/file?foo\n                if (relUrl.startsWith(\"?\") || relUrl.startsWith(\"#\")) {\n                    // Reconstruct the base URL without its query and fragment components,\n                    // ensuring we keep the full path.\n                    StringBuilder baseBuilder = new StringBuilder();\n                    baseBuilder.append(base.getProtocol()).append(\"://\");\n                    if (base.getHost() != null && !base.getHost().isEmpty()) {\n                        baseBuilder.append(base.getHost());\n                    }\n                    if (base.getPort() != -1) {\n                        baseBuilder.append(\":\").append(base.getPort());\n                    }\n                    // Append the path, which includes the last path segment (e.g., \"file\")\n                    baseBuilder.append(base.getPath()); \n\n                    String baseNoQueryFragment = baseBuilder.toString();\n                    \n                    // Now, form the absolute URL by combining this reconstructed base with the relative URL.\n                    URL abs = new URL(baseNoQueryFragment + relUrl);\n                    return abs.toExternalForm();\n                } else {\n                    // For typical relative paths, or absolute URLs, Java's URL constructor works as expected.\n                    URL abs = new URL(base, relUrl);\n                    return abs.toExternalForm();\n                }\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}