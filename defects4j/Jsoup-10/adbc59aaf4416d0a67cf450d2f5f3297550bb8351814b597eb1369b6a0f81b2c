{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround for Java URL resolution when relUrl is a query (starts with '?')\n            if (relUrl.startsWith(\"?\")) {\n                String baseUrlString = base.toExternalForm();\n                int q = baseUrlString.indexOf('?');\n                if (q != -1) {\n                    baseUrlString = baseUrlString.substring(0, q);\n                }\n                // Ensure baseUrlString ends with a path segment\n                if (!baseUrlString.endsWith(\"/\")) {\n                    baseUrlString = baseUrlString;\n                }\n                relUrl = baseUrlString + relUrl;\n                return relUrl;\n            }\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}