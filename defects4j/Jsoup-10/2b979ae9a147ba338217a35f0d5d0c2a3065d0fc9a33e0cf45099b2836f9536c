{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n\n            // Special handling for relative query (like \"?foo\")\n            if (relUrl.startsWith(\"?\")) {\n                String baseUrl = base.toExternalForm();\n                int q = baseUrl.indexOf('?');\n                if (q != -1) {\n                    baseUrl = baseUrl.substring(0, q);\n                }\n                // Remove trailing '#' fragment if present\n                int hash = baseUrl.indexOf('#');\n                if (hash != -1) {\n                    baseUrl = baseUrl.substring(0, hash);\n                }\n                relUrl = baseUrl + relUrl;\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}