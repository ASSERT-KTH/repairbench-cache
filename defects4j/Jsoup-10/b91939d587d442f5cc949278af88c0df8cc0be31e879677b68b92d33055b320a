{
    "generation": "    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey); // Get the attribute value\n        if (!hasAttr(attributeKey)) { // Check if the attribute exists at all\n            return \"\"; // nothing to make absolute with if attribute is missing\n        }\n        \n        // 1. Try to parse relUrl as absolute first. If it succeeds, it's already absolute.\n        // This handles schemes like http://, https://, ftp://, data:, etc.\n        // Also, it prevents new URL(base, \"http://example.com\") from resolving incorrectly if base is valid.\n        try {\n            URL abs = new URL(relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            // relUrl is not absolute (or is a protocol-relative URL like //host/path),\n            // proceed to resolve it against baseUri\n        }\n\n        // 2. relUrl is relative. Now, attempt to resolve it against the element's base URI.\n        URL base;\n        try {\n            base = new URL(baseUri); // baseUri is a field\n        } catch (MalformedURLException e) {\n            // The baseUri itself is malformed, so we cannot make relUrl absolute.\n            return \"\";\n        }\n\n        // 3. Special handling for relative query URLs (e.g., \"?foo\"):\n        // Java's URL(base, \"?foo\") constructor resolves such URLs against the directory part of the base,\n        // effectively stripping the filename from the base URI.\n        // E.g., new URL(\"http://jsoup.org/path/file?bar\", \"?foo\") -> \"http://jsoup.org/path/?foo\"\n        // We want to preserve the filename part of the base URI when appending a new query.\n        if (relUrl.startsWith(\"?\")) {\n            String baseExternalForm = base.toExternalForm();\n            int queryIdx = baseExternalForm.indexOf('?');\n            if (queryIdx != -1) {\n                // Remove any existing query from the base URI to append the new query.\n                baseExternalForm = baseExternalForm.substring(0, queryIdx);\n            }\n            // Now baseExternalForm is \"http://jsoup.org/path/file\" (if original was \"/path/file?bar\")\n            // or \"http://example.com/\" (if original was \"http://example.com/?bar\")\n            // Append the relative query (e.g., \"?foo\") to this base path.\n            try {\n                URL abs = new URL(baseExternalForm + relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                // This exception should be rare here if baseExternalForm was derived from a valid URL.\n                return \"\"; \n            }\n        }\n        \n        // 4. For all other types of relative URLs (e.g., \"bar.html\", \"../foo\", \"/path/to/file\", \"//host/path\"),\n        // Java's URL(URL context, String spec) constructor typically works correctly.\n        try {\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            // If resolution fails for other reasons, return empty string.\n            return \"\";\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}