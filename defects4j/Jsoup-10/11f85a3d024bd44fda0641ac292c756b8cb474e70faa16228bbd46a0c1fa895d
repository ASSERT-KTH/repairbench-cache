{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        try {\n            URL base = new URL(baseUri);\n            // Special handling for relative query string against a base with a path and query:\n            // if relUrl starts with '?' and baseUri has path, build manually\n            if (relUrl.startsWith(\"?\")) {\n                String path = base.getPath();\n                if (path == null || path.isEmpty()) {\n                    path = \"/\";\n                }\n                String protocol = base.getProtocol();\n                String host = base.getHost();\n                int port = base.getPort();\n                StringBuilder sb = new StringBuilder();\n                sb.append(protocol).append(\"://\").append(host);\n                if (port != -1) {\n                    sb.append(\":\").append(port);\n                }\n                sb.append(path).append(relUrl);\n                return sb.toString();\n            }\n            // Fix for when a relative path with a query string loses its filename (Java's URL class issue)\n            if (relUrl.contains(\"?\") && !relUrl.startsWith(\"http\") && !relUrl.startsWith(\"/\")) {\n                int qIdx = relUrl.indexOf('?');\n                String relPath = relUrl.substring(0, qIdx);\n                String relQuery = relUrl.substring(qIdx);\n\n                String basePath = base.getPath();\n                if (basePath == null || basePath.isEmpty()) {\n                    basePath = \"/\";\n                }\n                int lastSlash = basePath.lastIndexOf('/');\n                String resolvedPath;\n                if (lastSlash == -1) {\n                    resolvedPath = \"/\" + relPath;\n                } else {\n                    resolvedPath = basePath.substring(0, lastSlash+1) + relPath;\n                }\n                String protocol = base.getProtocol();\n                String host = base.getHost();\n                int port = base.getPort();\n                StringBuilder sb = new StringBuilder();\n                sb.append(protocol).append(\"://\").append(host);\n                if (port != -1) {\n                    sb.append(\":\").append(port);\n                }\n                sb.append(resolvedPath).append(relQuery);\n                return sb.toString();\n            }\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            // try if it's already absolute\n            try {\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException ex) {\n                return \"\";\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}