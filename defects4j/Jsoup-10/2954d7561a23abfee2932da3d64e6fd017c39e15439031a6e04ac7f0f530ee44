{
    "generation": "    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        }\n\n        try {\n            URL base;\n            // First, try to parse the base URI.\n            // If baseUri is malformed, then the attribute could still be an absolute URL on its own.\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // baseUri is not a valid URL. Attempt to parse relUrl as an absolute URL.\n                try {\n                    URL abs = new URL(relUrl); // If relUrl is also not a valid URL, this will throw.\n                    return abs.toExternalForm();\n                } catch (MalformedURLException e2) {\n                    return \"\"; // Both baseUri and relUrl are malformed or unresolvable.\n                }\n            }\n\n            // At this point, 'base' is a valid URL object.\n            String absUrl;\n            if (relUrl.startsWith(\"?\")) {\n                // Special handling for relative URLs that are just a query string.\n                // Java's URL constructor resolves \"?query\" against the *directory* of the base URL,\n                // potentially stripping the file part if the base URL points to a file.\n                // E.g., new URL(\"http://host/path/file?old\", \"?new\") becomes \"http://host/path/?new\"\n                // We want \"http://host/path/file?new\".\n                \n                // Get the external form of the base URL, and remove its query part if present.\n                String baseNoQuery = base.toExternalForm();\n                int qIdx = baseNoQuery.indexOf('?');\n                if (qIdx != -1) {\n                    baseNoQuery = baseNoQuery.substring(0, qIdx);\n                }\n                // Construct a new URL by appending the new query to the base (without its old query).\n                absUrl = new URL(baseNoQuery + relUrl).toExternalForm();\n            } else {\n                // For other types of relative URLs (e.g., \"path/file\", \"/path/file\", \"//host/path\"),\n                // Java's URL constructor usually handles resolution correctly.\n                // E.g., for \"bar.html?foo\" with base \"http://jsoup.org/path/file?bar\",\n                // it correctly resolves to \"http://jsoup.org/path/bar.html?foo\".\n                absUrl = new URL(base, relUrl).toExternalForm();\n            }\n            return absUrl;\n\n        } catch (MalformedURLException e) {\n            // Catch any MalformedURLException that might occur during the final URL construction\n            // (e.g., from baseNoQuery + relUrl) or from new URL(base, relUrl) if it somehow still fails\n            // for an unexpected reason.\n            return \"\";\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}