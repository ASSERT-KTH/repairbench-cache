{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        try {\n            URL base = new URL(baseUri);\n            // Handle relative URL's query correctly by appending it after the path of the base\n            if (relUrl.contains(\"?\")) {\n                String path = base.getPath();\n                String query = base.getQuery();\n                if (query == null) {\n                    query = \"\";\n                }\n                String[] relParts = relUrl.split(\"\\\\?\", 2);\n                String relPath = relParts[0];\n                String relQuery = relParts[1];\n                \n                // Combine the base's path and the relative path properly\n                String combinedPath = new URL(new URL(base.getProtocol(), base.getHost(), base.getPort(), path), relPath).getPath();\n                \n                // Combine the queries. If the relative query exists, it takes precedence\n                String fullQuery = query.isEmpty() ? relQuery : (query + \"&\" + relQuery);\n                \n                // Rebuild the URL with the combined path and query\n                return new URL(base.getProtocol(), base.getHost(), base.getPort(), combinedPath, new URLQueryParameterSerializer(), fullQuery).toExternalForm();\n            } else {\n                // Use the standard URL constructor if no query in relative URL\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            }\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}