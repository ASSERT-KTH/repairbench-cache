{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        try {\n            try {\n                URL base = new URL(baseUri);\n\n                // Workaround for java.net.URL issue with relative queries:\n                // If relUrl starts with \"?\" or \"#\", resolve against base.getPath()\n                if (relUrl.startsWith(\"?\") || relUrl.startsWith(\"#\")) {\n                    String basePath = base.getProtocol() + \"://\" + base.getHost();\n                    if (base.getPort() != -1 && base.getPort() != base.getDefaultPort()) {\n                        basePath += \":\" + base.getPort();\n                    }\n                    basePath += base.getPath().isEmpty() ? \"/\" : base.getPath();\n                    URL abs = new URL(basePath + relUrl);\n                    return abs.toExternalForm();\n                }\n\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                // The base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}