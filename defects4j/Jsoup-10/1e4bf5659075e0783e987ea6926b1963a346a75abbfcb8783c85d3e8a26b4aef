{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            base = new URL(baseUri);\n        } catch (MalformedURLException e) {\n            // the base is unsuitable, but the attribute may be abs on its own, so try that\n            try {\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException ex) {\n                return \"\";\n            }\n        }\n\n        // Handle the case where the relative URL is just a query string\n        if (relUrl.startsWith(\"?\")) {\n            return base.getProtocol() + \"://\" + base.getHost() + base.getPath() + relUrl;\n        }\n\n        // Handle the case where the relative URL is a path with a query string\n        if (relUrl.contains(\"?\")) {\n            String path = relUrl.substring(0, relUrl.indexOf(\"?\"));\n            String query = relUrl.substring(relUrl.indexOf(\"?\"));\n            try {\n                URL abs = new URL(base, path);\n                return abs.toExternalForm() + query;\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n\n        // Default case: use the URL constructor\n        try {\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}