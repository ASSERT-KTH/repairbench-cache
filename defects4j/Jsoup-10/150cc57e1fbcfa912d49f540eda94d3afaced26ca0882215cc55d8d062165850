{
    "generation": "    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // Handle relative URLs starting with '?' to preserve the base path\n                if (relUrl.startsWith(\"?\")) {\n                    try {\n                        URI baseUri = base.toURI();\n                        String path = baseUri.getPath() == null ? \"\" : baseUri.getPath();\n                        // Construct the URI with the base's components and the new query\n                        URI absUri = new URI(\n                            baseUri.getScheme(), \n                            baseUri.getAuthority(), \n                            path, \n                            relUrl.substring(1), // query without leading '?'\n                            null // fragment\n                        );\n                        return absUri.toURL().toExternalForm();\n                    } catch (URISyntaxException | MalformedURLException ex) {\n                        return \"\";\n                    }\n                }\n                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}