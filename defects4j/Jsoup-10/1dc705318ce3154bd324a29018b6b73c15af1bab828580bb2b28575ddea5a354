{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            base = new URL(baseUri);\n        } catch (MalformedURLException e) {\n            // the base is unsuitable, but the attribute may be abs on its own, so try that\n            try {\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException ex) {\n                return \"\";\n            }\n        }\n\n        // Manually construct the absolute URL\n        String basePath = base.getProtocol() + \"://\" + base.getHost();\n        if (base.getPort() != -1) {\n            basePath += \":\" + base.getPort();\n        }\n        basePath += base.getPath();\n\n        if (relUrl.startsWith(\"/\")) {\n            // Absolute path relative to the base URL\n            return basePath + relUrl;\n        } else if (relUrl.startsWith(\"?\")) {\n            // Relative query string\n            return basePath + relUrl;\n        } else {\n            // Relative path\n            String[] baseSegments = basePath.split(\"/\");\n            String[] relSegments = relUrl.split(\"/\");\n            StringBuilder absPath = new StringBuilder();\n\n            for (String segment : relSegments) {\n                if (segment.equals(\"..\")) {\n                    if (baseSegments.length > 0) {\n                        baseSegments[baseSegments.length - 1] = \"\";\n                    }\n                } else if (segment.equals(\".\") || segment.isEmpty()) {\n                    // Ignore current directory and empty segments\n                } else {\n                    baseSegments[baseSegments.length - 1] = segment;\n                    baseSegments = Arrays.copyOf(baseSegments, baseSegments.length + 1);\n                }\n            }\n\n            for (String segment : baseSegments) {\n                if (!segment.isEmpty()) {\n                    absPath.append(\"/\").append(segment);\n                }\n            }\n\n            return basePath + absPath.toString() + (relUrl.contains(\"?\") ? \"\" : relUrl.substring(relUrl.indexOf(\"?\")));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}