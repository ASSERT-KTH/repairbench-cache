{
    "generation": "    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n                if (relUrl.startsWith(\"?\")) {\n                    // special case for query strings - append to current path\n                    String basePath = base.getPath();\n                    if (base.getQuery() != null) {\n                        basePath += \"?\" + base.getQuery();\n                    }\n                    int lastSlash = basePath.lastIndexOf('/');\n                    if (lastSlash != -1) {\n                        basePath = basePath.substring(0, lastSlash + 1);\n                    }\n                    relUrl = basePath + relUrl.substring(1);\n                }\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}