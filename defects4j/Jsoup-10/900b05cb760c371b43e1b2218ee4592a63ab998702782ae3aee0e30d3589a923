{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n\n            // Special workaround for relative query: \"?foo\" should be appended to the file, \n            // but java.net.URL(\"http://host/path/file?bar\", \"?foo\") returns just the path root with the query (\"http://host/path/?foo\")\n            if (relUrl.startsWith(\"?\")) {\n                String baseUrlStr = base.toExternalForm();\n                StringBuilder sb = new StringBuilder();\n                int q = baseUrlStr.indexOf('?');\n                if (q != -1) {\n                    sb.append(baseUrlStr, 0, q); // up to, not including '?'\n                } else {\n                    sb.append(baseUrlStr);\n                }\n                sb.append(relUrl); // append the new query (which includes the '?')\n                return sb.toString();\n            }\n\n            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}