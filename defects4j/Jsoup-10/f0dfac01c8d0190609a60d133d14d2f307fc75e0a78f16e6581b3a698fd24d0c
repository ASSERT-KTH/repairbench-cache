{
    "generation": "    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                URL abs;\n                // Workaround for cases where relative URL is a query and base path lacks trailing /\n                if (relUrl.startsWith(\"?\") && !base.getPath().endsWith(\"/\")) {\n                    try {\n                        URI baseUri = base.toURI();\n                        String query = relUrl.substring(1);\n                        URI newUri = new URI(\n                            baseUri.getScheme(),\n                            baseUri.getAuthority(),\n                            baseUri.getPath(),\n                            query,\n                            null\n                        );\n                        abs = new URL(newUri.toString());\n                    } catch (URISyntaxException e) {\n                        throw new MalformedURLException(e.getMessage());\n                    }\n                } else {\n                    abs = new URL(base, relUrl);\n                }\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}