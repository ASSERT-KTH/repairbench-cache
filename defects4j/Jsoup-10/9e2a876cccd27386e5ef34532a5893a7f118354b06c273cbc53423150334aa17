{
    "generation": "    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            try {\n                URL base;\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // The base URI is malformed, so we cannot resolve relative URLs against it.\n                    // Try to parse relUrl as an absolute URL itself.\n                    try {\n                        URL abs = new URL(relUrl);\n                        return abs.toExternalForm();\n                    } catch (MalformedURLException e2) {\n                        // relUrl is also malformed or not an absolute URL, so return empty string.\n                        return \"\";\n                    }\n                }\n\n                // Workaround for Java's URL constructor's behavior when relUrl is a query string\n                // and base has a path with a filename.\n                // e.g. base=http://host/path/file?q, rel=?newq -> Java produces http://host/path/?newq\n                // We want: http://host/path/file?newq\n                if (relUrl.startsWith(\"?\")) {\n                    // Construct a new URL from base parts (scheme, host, port, path)\n                    // effectively removing any query/fragment from the base for resolution.\n                    // This results in a URL like http://host/path/file\n                    URL baseForQueryResolution = new URL(base.getProtocol(), base.getHost(), base.getPort(), base.getPath());\n                    \n                    // Directly append the query string to this \"cleaned\" base URL's external form.\n                    // This avoids Java's problematic resolution logic for query-only relative URLs.\n                    return baseForQueryResolution.toExternalForm() + relUrl;\n                } else {\n                    // For other relative URLs, use standard Java URL resolution.\n                    URL abs = new URL(base, relUrl);\n                    return abs.toExternalForm();\n                }\n            } catch (MalformedURLException e) {\n                // This catch handles MalformedURLException from the final new URL(base, relUrl)\n                // or if any other URL constructor throws it unexpectedly.\n                return \"\";\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}