{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        try {\n            try {\n                URL base = new URL(baseUri);\n\n                // Patch: handle relative URLs with query string (e.g. \"?foo\") properly\n                // Java's URL(base, \"?foo\") produces \"http://jsoup.org/path/?foo\" instead of \"http://jsoup.org/path/file?foo\"\n                if (relUrl.startsWith(\"?\")) {\n                    String baseUrlStr = base.toExternalForm();\n                    int hashIdx = baseUrlStr.indexOf('#');\n                    if (hashIdx != -1) {\n                        baseUrlStr = baseUrlStr.substring(0, hashIdx); // strip out any fragment\n                    }\n                    int qIdx = baseUrlStr.indexOf('?');\n                    if (qIdx != -1) {\n                        baseUrlStr = baseUrlStr.substring(0, qIdx); // strip out any query already present\n                    }\n                    // Remove any trailing slash if base is a file, leave if directory. Only strip if not at domain root.\n                    if (!baseUrlStr.endsWith(\"/\")) {\n                        // valid file URL, keep as is\n                    }\n                    // Append new query\n                    return baseUrlStr + relUrl;\n                }\n\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}