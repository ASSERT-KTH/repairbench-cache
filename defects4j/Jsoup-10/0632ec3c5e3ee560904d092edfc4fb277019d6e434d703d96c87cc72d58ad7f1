{
    "generation": "    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            URL base;\n            try {\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n                // Handle relative URLs starting with '?' to preserve the base path\n                if (relUrl.startsWith(\"?\")) {\n                    String baseString = base.toExternalForm();\n                    int queryPos = baseString.indexOf('?');\n                    int hashPos = baseString.indexOf('#', queryPos != -1 ? queryPos : 0);\n                    int end = queryPos != -1 ? queryPos : hashPos;\n                    if (end == -1) {\n                        end = baseString.length();\n                    }\n                    String newUrlString = baseString.substring(0, end) + relUrl;\n                    try {\n                        URL abs = new URL(newUrlString);\n                        return abs.toExternalForm();\n                    } catch (MalformedURLException ex) {\n                        return \"\";\n                    }\n                } else {\n                    URL abs = new URL(base, relUrl);\n                    return abs.toExternalForm();\n                }\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}