{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            base = new URL(baseUri);\n        } catch (MalformedURLException e) {\n            // the base is unsuitable, but the attribute may be abs on its own, so try that\n            try {\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException ex) {\n                return \"\";\n            }\n        }\n\n        // Manually handle the query parameters to ensure they are appended correctly\n        String basePath = base.getPath();\n        String baseQuery = base.getQuery();\n        String baseRef = base.getRef();\n\n        if (relUrl.startsWith(\"?\")) {\n            // Handle relative query\n            StringBuilder sb = new StringBuilder(base.getProtocol());\n            sb.append(\"://\").append(base.getHost());\n            if (base.getPort() != -1) {\n                sb.append(\":\").append(base.getPort());\n            }\n            sb.append(basePath).append(relUrl);\n            if (baseQuery != null) {\n                sb.append(\"&\").append(baseQuery);\n            }\n            if (baseRef != null) {\n                sb.append(\"#\").append(baseRef);\n            }\n            return sb.toString();\n        }\n\n        // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n        URL abs;\n        try {\n            abs = new URL(base, relUrl);\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n        return abs.toExternalForm();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}