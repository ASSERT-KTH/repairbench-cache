{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // Workaround for Java's URL handling of relative queries: if relUrl starts with '?' (i.e. \"?foo\")\n            if (relUrl.startsWith(\"?\")) {\n                String basePath = base.getPath();\n                // Remove possible empty path (i.e. if base URI ends with '/')\n                if (basePath == null || basePath.isEmpty()) {\n                    basePath = \"/\";\n                }\n                String absUrl = base.getProtocol() + \"://\" + base.getHost()\n                    + (base.getPort() != -1 ? \":\" + base.getPort() : \"\")\n                    + basePath + relUrl;\n                return absUrl;\n            }\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}