{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            // workaround for Java's URL normalization which drops the file when resolving relative queries\n            if (relUrl.startsWith(\"?\")) {\n                // construct a new URL manually to retain the path of 'base' and override the query\n                String path = base.getPath();\n                if (path == null || path.isEmpty())\n                    path = \"/\";\n                String newUrl = base.getProtocol() + \"://\" + base.getAuthority() + path + relUrl;\n                return newUrl;\n            }\n            URL abs = new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}