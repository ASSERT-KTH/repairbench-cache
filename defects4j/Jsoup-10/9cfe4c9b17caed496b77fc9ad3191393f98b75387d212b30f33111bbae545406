{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                try {\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                } catch (MalformedURLException ex) {\n                    return \"\";\n                }\n            }\n            // handle relative URLs more carefully\n            if (relUrl.startsWith(\"?\")) {\n                // special case for query strings - they should be appended to the base URL's path, not replace it\n                String basePath = base.getPath();\n                String baseQuery = base.getQuery();\n                String file = base.getFile();\n                int queryStart = file.indexOf('?');\n                String path = queryStart != -1 ? file.substring(0, queryStart) : file;\n                URL abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), path + relUrl);\n                return abs.toExternalForm();\n            } else {\n                // normal case\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            }\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}