{
    "generation": "    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            try {\n                URL base;\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    URL abs = new URL(relUrl);\n                    return abs.toExternalForm();\n                }\n\n                // Workaround for Java's URL(URL, String) resolving relative query strings incorrectly\n                // if the base URL's path points to a file (e.g., \"http://host/path/file\" + \"?query\" -> \"http://host/path/?query\").\n                // It should preserve the filename.\n                // This fix applies when relUrl is *only* a query string, and base has a non-empty path that doesn't end in a slash.\n                if (relUrl.startsWith(\"?\") && !base.getPath().isEmpty() && !base.getPath().endsWith(\"/\")) {\n                    // Manually reconstruct the URL string to keep the filename part of the path before the query.\n                    StringBuilder absUrlBuilder = new StringBuilder();\n                    absUrlBuilder.append(base.getProtocol()).append(\"://\");\n                    absUrlBuilder.append(base.getAuthority()); // Includes host and port\n\n                    String path = base.getPath();\n                    // path will not be null, but could be empty string for root URLs (e.g. \"http://host\")\n                    if (!path.isEmpty()) {\n                        absUrlBuilder.append(path);\n                    }\n                    absUrlBuilder.append(relUrl); // Append the new query string\n                    return new URL(absUrlBuilder.toString()).toExternalForm();\n                } else {\n                    // For all other cases, rely on Java's URL constructor.\n                    URL abs = new URL(base, relUrl);\n                    return abs.toExternalForm();\n                }\n            } catch (MalformedURLException e) {\n                return \"\"; // relUrl could not be made absolute\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}