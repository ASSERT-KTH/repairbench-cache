{
    "generation": "    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        String relUrl = attr(attributeKey);\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        } else {\n            try {\n                URL base;\n                try {\n                    base = new URL(baseUri);\n                } catch (MalformedURLException e) {\n                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                    // If it's a relative URL, and base is bad, it can't be made absolute\n                    URL abs = new URL(relUrl); // this will throw if relUrl is not abs\n                    return abs.toExternalForm();\n                }\n\n                // workaround: java.net.URL resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired\n                // If the relative URL is just a query string (starts with '?'), and the base URL has a filename\n                // (i.e., its path does not end with '/'), the Java URL constructor drops the filename.\n                // We need to preserve the filename when resolving query strings.\n                if (relUrl.startsWith(\"?\") && !base.getPath().endsWith(\"/\")) {\n                    // Construct the URL by appending the new query string to the base URL's path and filename,\n                    // effectively replacing any existing query/fragment in the base URL.\n                    StringBuilder sb = new StringBuilder();\n                    sb.append(base.getProtocol()).append(\"://\").append(base.getAuthority());\n                    sb.append(base.getPath()); // This includes the filename if present\n                    sb.append(relUrl); // Append the new query string\n\n                    // Re-parse the constructed string to ensure it's a valid and normalized URL.\n                    return new URL(sb.toString()).toExternalForm();\n                }\n\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                return \"\";\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}