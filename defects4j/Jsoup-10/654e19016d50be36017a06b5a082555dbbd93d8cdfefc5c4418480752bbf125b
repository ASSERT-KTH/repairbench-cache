{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        URL base;\n        try {\n            try {\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n\n            // Check if relUrl is a query string only (starts with '?', no path)\n            if (relUrl.startsWith(\"?\")) {\n                // Resolve the path relative to baseUri\n                String baseUrlString = base.toExternalForm();\n                int qPos = baseUrlString.indexOf('?');\n                if (qPos != -1) {\n                    baseUrlString = baseUrlString.substring(0, qPos); // strip existing query\n                }\n                if (!baseUrlString.endsWith(\"/\")) {\n                    // Find last slash after protocol to preserve path\n                    int lastSlash = baseUrlString.lastIndexOf('/');\n                    if (lastSlash > baseUrlString.indexOf(\"//\") + 1) {\n                        baseUrlString = baseUrlString.substring(0, lastSlash + 1) + baseUrlString.substring(lastSlash + 1);\n                    }\n                }\n                // Append the new query\n                return baseUrlString + relUrl;\n            } else {\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            }\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}