{
    "generation": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n\n    String relUrl = attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\"; // nothing to make absolute with\n    } else {\n        if (baseUri == null) {\n            return \"\";\n        }\n        try {\n            try {\n                // Special handling for a relative query string like \"?foo\"\n                if (relUrl.startsWith(\"?\")) {\n                    URL base = new URL(baseUri);\n                    String basePath = base.getPath();\n                    // Remove trailing '/' from basePath if present and not root\n                    if (basePath == null || basePath.isEmpty()) {\n                        basePath = \"/\";\n                    }\n                    // If basePath does not end with '/', retain as is (don't chop last token, unlike URL normally does)\n                    String abs = base.getProtocol() + \"://\" + base.getHost()\n                        + (base.getPort() != -1 ? \":\" + base.getPort() : \"\")\n                        + basePath\n                        + relUrl;\n                    return abs;\n                }\n\n                URL base = new URL(baseUri);\n                URL abs = new URL(base, relUrl);\n                return abs.toExternalForm();\n            } catch (MalformedURLException e) {\n                // the base is unsuitable, but the attribute may be abs on its own, so try that\n                URL abs = new URL(relUrl);\n                return abs.toExternalForm();\n            }\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}