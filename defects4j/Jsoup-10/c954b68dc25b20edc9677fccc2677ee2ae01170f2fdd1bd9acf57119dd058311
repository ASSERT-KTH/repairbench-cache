{
    "generation": "import org.jsoup.helper.Validate; // Ensure this import is present\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\n// ... other imports ...\n\n    /**\n     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n     * <code>&lt;img src></code>).\n     * <p/>\n     * E.g.: <code>String absUrl = linkEl.absUrl(\"href\");</code>\n     * <p/>\n     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n     * absolute using that.\n     * <p/>\n     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:\n     * <code>String absUrl = linkEl.attr(\"abs:href\");</code>\n     *\n     * @param attributeKey The attribute key\n     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n     * could not be made successfully into a URL.\n     * @see #attr\n     * @see java.net.URL#URL(java.net.URL, String)\n     */\n    public String absUrl(String attributeKey) {\n        Validate.notEmpty(attributeKey);\n\n        if (!hasAttr(attributeKey)) {\n            return \"\"; // nothing to make absolute with\n        }\n\n        String relUrl = attr(attributeKey);\n        URL resolvedUrl;\n\n        try {\n            // Attempt 1: Try parsing relUrl as an absolute URL. If it is, return it directly.\n            try {\n                resolvedUrl = new URL(relUrl);\n                // If parsing succeeded without throwing MalformedURLException, it's an absolute URL.\n                return resolvedUrl.toExternalForm();\n            } catch (MalformedURLException e) {\n                // It's not an absolute URL, so proceed to resolve against baseUri.\n            }\n\n            // Attempt 2: Resolve against baseUri.\n            if (baseUri == null || baseUri.isEmpty()) {\n                return \"\"; // No base URI to resolve against.\n            }\n\n            URL base;\n            try {\n                // Parse the baseUri. If it's invalid, we can't resolve relative URLs.\n                base = new URL(baseUri);\n            } catch (MalformedURLException e) {\n                // Base URI is malformed, cannot resolve.\n                return \"\";\n            }\n\n            // Special handling for relative URLs starting with \"?query\".\n            // The standard URL(base, rel) constructor handles this case incorrectly for base URLs with path filenames\n            // (e.g., http://a/b/c + ?q resolves to http://a/b/?q instead of http://a/b/c?q).\n            if (relUrl.startsWith(\"?\")) {\n                // Manually construct the URL: take the base URL string up to the first '?' or '#', then append relUrl.\n                String baseUrlString = base.toExternalForm();\n                int queryIndex = baseUrlString.lastIndexOf('?');\n                String basePrefix = baseUrlString; // Start with the full base URL string\n                if (queryIndex != -1) {\n                    // If there's a query, strip it from the base prefix\n                    basePrefix = baseUrlString.substring(0, queryIndex);\n                }\n                // Also handle fragment identifier in base URL string: strip it if present\n                int fragIndex = basePrefix.lastIndexOf('#');\n                if (fragIndex != -1) {\n                    basePrefix = basePrefix.substring(0, fragIndex);\n                }\n                // Append the relative query string (relUrl) to the processed base prefix\n                resolvedUrl = new URL(basePrefix + relUrl); // This combination might still be malformed\n            } else {\n                // Standard resolution using the URL constructor for all other relative URLs\n                // (e.g., \"foo.html\", \"../bar\", \"//example.com/\").\n                resolvedUrl = new URL(base, relUrl); // This constructor handles context resolution\n            }\n\n            // If resolution (either manual or standard) succeeded, return the external form.\n            return resolvedUrl.toExternalForm();\n\n        } catch (MalformedURLException e) {\n            // Catch MalformedURLException from either new URL(baseUri), new URL(basePrefix + relUrl), or new URL(base, relUrl).\n            // Indicates an inability to form a valid absolute URL.\n            return \"\";\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}