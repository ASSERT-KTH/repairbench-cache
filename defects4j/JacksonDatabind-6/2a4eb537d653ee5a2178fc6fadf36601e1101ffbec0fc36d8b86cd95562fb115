{
    "generation": "@Override\nprotected Date parseAsISO8601(String dateStr, ParsePosition pos) {\n    String str = dateStr;\n    int len = str.length();\n    char last = str.charAt(len - 1);\n\n    // 1) Plain date \"yyyy-MM-dd\"\n    if (len <= 10 && Character.isDigit(last)) {\n        DateFormat df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(\n                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,\n                _timezone, _locale);\n        }\n        return df.parse(str, pos);\n    }\n\n    // 2) Split off timezone (either 'Z' or \"+/-hh[:]?mm\")\n    boolean hasZ = (last == 'Z');\n    int tzIndex = -1;\n    if (!hasZ) {\n        int plus  = str.lastIndexOf('+');\n        int minus = str.lastIndexOf('-');\n        tzIndex = Math.max(plus, minus);\n        // ignore date\u2010part hyphens\n        int tPos = str.indexOf('T');\n        if (tzIndex <= tPos) {\n            tzIndex = -1;\n        }\n    }\n\n    String dateTime;\n    String tz;\n    if (hasZ) {\n        dateTime = str.substring(0, len - 1);\n        tz = \"Z\";\n    } else if (tzIndex > 0) {\n        dateTime = str.substring(0, tzIndex);\n        tz       = str.substring(tzIndex);\n    } else {\n        // no explicit timezone: assume Z\n        dateTime = str;\n        tz       = \"Z\";\n    }\n\n    // 3) Normalize timezone string to either 'Z' or \"+hhmm\"/\"-hhmm\"\n    if (!\"Z\".equals(tz)) {\n        // remove optional colon in offset\n        if (tz.length() > 3 && tz.charAt(3) == ':') {\n            tz = tz.substring(0, 3) + tz.substring(4);\n        }\n        // if only \"+hh\" or \"-hh\", append \"00\"\n        if (tz.length() == 3) {\n            tz = tz + \"00\";\n        }\n    }\n\n    // 4) Normalize the time\u2010part: ensure seconds and 3\u2010digit milliseconds\n    int tPos = dateTime.indexOf('T');\n    if (tPos >= 0) {\n        String prefix = dateTime.substring(0, tPos + 1);\n        String rest   = dateTime.substring(tPos + 1);\n        String main;\n        String frac = null;\n\n        int dot = rest.indexOf('.');\n        if (dot >= 0) {\n            main = rest.substring(0, dot);\n            frac = rest.substring(dot + 1);\n        } else {\n            main = rest;\n        }\n\n        // ensure seconds present\n        int colonCount = 0;\n        for (int i = 0; i < main.length(); i++) {\n            if (main.charAt(i) == ':') {\n                colonCount++;\n            }\n        }\n        if (colonCount == 1) {\n            // only \"hh:mm\" \u2192 add \":00\"\n            main = main + \":00\";\n        }\n\n        // normalize fractional part to exactly 3 digits\n        if (frac == null) {\n            frac = \"000\";\n        } else if (frac.length() == 1) {\n            frac = frac + \"00\";\n        } else if (frac.length() == 2) {\n            frac = frac + \"0\";\n        } else if (frac.length() > 3) {\n            frac = frac.substring(0, 3);\n        }\n\n        dateTime = prefix + main + \".\" + frac;\n    }\n\n    // 5) Reconstruct full ISO string\n    String normalized = dateTime + tz;\n\n    // 6) Pick the right formatter\n    DateFormat df;\n    if (\"Z\".equals(tz)) {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(\n                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                _timezone, _locale);\n        }\n    } else {\n        df = _formatISO8601;\n        if (df == null) {\n            df = _formatISO8601 = _cloneFormat(\n                DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                _timezone, _locale);\n        }\n    }\n    return df.parse(normalized, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}