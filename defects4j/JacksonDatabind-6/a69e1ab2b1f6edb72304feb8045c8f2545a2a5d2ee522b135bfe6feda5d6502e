{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos) {\n    int len = dateStr.length();\n    char last = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // plain date, e.g. \"yyyy-MM-dd\"\n    if (len <= 10 && Character.isDigit(last)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(\n                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,\n                _timezone, _locale\n            );\n        }\n    }\n    // ends-with-Z (Zulu) form\n    else if (last == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(\n                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                _timezone, _locale\n            );\n        }\n        // might be missing milliseconds, e.g. \"yyyy-MM-ddTHH:mmZ\" or \"...HH:mm:ssZ\"\n        // we ensure \".000\" is there\n        if (dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        }\n    }\n    // has a timezone offset (\"+hh:mm\" or \"-hh:mm\") or none\n    else {\n        if (hasTimeZone(dateStr)) {\n            // strip optional colon in timezone offset\n            int tzColon = dateStr.length() - 3;\n            char tzC = dateStr.charAt(tzColon);\n            if (tzC == ':') {\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(tzColon, tzColon + 1);\n                dateStr = sb.toString();\n            } else if (tzC == '+' || tzC == '-') {\n                // \"+hh\" => \"+hh00\"\n                dateStr = dateStr + \"00\";\n            }\n            // split off the timezone offset\n            int total = dateStr.length();\n            String tzOffset = dateStr.substring(total - 5);\n            String core = dateStr.substring(0, total - 5);\n\n            // split date/time at the 'T'\n            int tPos = core.indexOf('T');\n            String datePart = core.substring(0, tPos + 1);\n            String timePart = core.substring(tPos + 1);\n\n            // separate seconds and fractional\n            String secondsPart;\n            String fracPart = \"\";\n            int dot = timePart.indexOf('.');\n            if (dot >= 0) {\n                secondsPart = timePart.substring(0, dot);\n                fracPart = timePart.substring(dot + 1);\n            } else {\n                secondsPart = timePart;\n            }\n            // if only \"HH:mm\", add \":00\"\n            if (secondsPart.indexOf(':') == secondsPart.lastIndexOf(':')) {\n                secondsPart = secondsPart + \":00\";\n            }\n            // normalize fraction to exactly 3 digits\n            if (dot < 0) {\n                fracPart = \"000\";\n            } else {\n                if (fracPart.length() == 1) {\n                    fracPart = fracPart + \"00\";\n                } else if (fracPart.length() == 2) {\n                    fracPart = fracPart + \"0\";\n                } else if (fracPart.length() > 3) {\n                    fracPart = fracPart.substring(0, 3);\n                }\n            }\n            // rebuild canonical ISO8601 with \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"\n            StringBuilder sb = new StringBuilder();\n            sb.append(datePart)\n              .append(secondsPart)\n              .append('.')\n              .append(fracPart)\n              .append(tzOffset);\n            dateStr = sb.toString();\n\n            df = _formatISO8601;\n            if (df == null) {\n                df = _formatISO8601 = _cloneFormat(\n                    DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                    _timezone, _locale\n                );\n            }\n        } else {\n            // no timezone at all: treat as Zulu after fixing time\n            int tPos = dateStr.indexOf('T');\n            String datePart = (tPos >= 0) ? dateStr.substring(0, tPos + 1) : dateStr;\n            String timePart = (tPos >= 0) ? dateStr.substring(tPos + 1) : \"\";\n\n            String secondsPart;\n            String fracPart = \"\";\n            int dot = timePart.indexOf('.');\n            if (dot >= 0) {\n                secondsPart = timePart.substring(0, dot);\n                fracPart = timePart.substring(dot + 1);\n            } else {\n                secondsPart = timePart;\n            }\n            if (secondsPart.indexOf(':') == secondsPart.lastIndexOf(':')) {\n                secondsPart = secondsPart + \":00\";\n            }\n            if (dot < 0) {\n                fracPart = \"000\";\n            } else {\n                if (fracPart.length() == 1) {\n                    fracPart = fracPart + \"00\";\n                } else if (fracPart.length() == 2) {\n                    fracPart = fracPart + \"0\";\n                } else if (fracPart.length() > 3) {\n                    fracPart = fracPart.substring(0, 3);\n                }\n            }\n            StringBuilder sb = new StringBuilder();\n            sb.append(datePart)\n              .append(secondsPart)\n              .append('.')\n              .append(fracPart)\n              .append('Z');\n            dateStr = sb.toString();\n\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(\n                    DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                    _timezone, _locale\n                );\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}