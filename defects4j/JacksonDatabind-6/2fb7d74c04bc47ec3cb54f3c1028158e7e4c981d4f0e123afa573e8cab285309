{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n     * quite simple because we already set date format timezone to be\n     * GMT, and hence can just strip out 'Z' altogether\n     */\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            // Determine the offset position for timezone\n            int tzIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n            if (tzIndex > 0) {\n                // Remove the colon in the timezone if present, e.g. \"+01:00\" \u2192 \"+0100\"\n                if (tzIndex + 3 < dateStr.length() && dateStr.charAt(tzIndex + 3) == ':') {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.deleteCharAt(tzIndex + 3);\n                    dateStr = sb.toString();\n                }\n                // If missing minutes, append \"00\"\n                else if (dateStr.length() - tzIndex <= 3) {\n                    dateStr = dateStr + \"00\";\n                }\n            }\n\n            // Now, handle milliseconds and missing seconds\n            // Find the time part in the string: find where 'T' is, that's start of time\n            int tIndex = dateStr.indexOf('T');\n            if (tIndex >= 0) {\n                // Find start of timezone offset or end of string\n                int timeEndIndex = dateStr.length();\n                if (tzIndex > tIndex) {\n                    timeEndIndex = tzIndex;\n                }\n                // Now scan for seconds portion\n                int colon2 = dateStr.indexOf(':', dateStr.indexOf(':', tIndex + 1) + 1);\n                // colon2: Index after \"HH:mm:\", so it's after seconds, OR -1 if missing\n                boolean hasSeconds = (colon2 != -1 && colon2 < timeEndIndex);\n\n                StringBuilder sb = new StringBuilder(dateStr);\n                int millisPos = -1;\n                boolean hasMillis = false;\n                // Find decimal point for millis (if it exists before timezone)\n                int dotIndex = sb.indexOf(\".\", tIndex);\n                if (dotIndex > -1 && dotIndex < timeEndIndex) {\n                    hasMillis = true;\n                    millisPos = dotIndex;\n                }\n\n                // If we have no seconds (ie, \"1997-07-16T19:20\" or \"19:20+01:00\" or similar)\n                if (!hasSeconds) {\n                    // Insert seconds after minutes\n                    int insertPos = dateStr.indexOf(':', tIndex + 1) + 3; // skip \":mm\"\n                    if (insertPos <= tIndex + 1 || insertPos > timeEndIndex)\n                        insertPos = timeEndIndex;\n                    sb.insert(insertPos, \":00\");\n                    timeEndIndex += 3;\n                    if (millisPos >= insertPos) millisPos += 3;\n                }\n\n                // Now handle milliseconds -- pad or set as needed\n                // Refetch dotIndex (might relocate after possible insert)\n                dotIndex = sb.indexOf(\".\", tIndex);\n                if (dotIndex > -1 && dotIndex < timeEndIndex) {\n                    // There are already milliseconds in original or modified string\n                    int msStart = dotIndex + 1;\n                    int msEnd = msStart;\n                    while (msEnd < sb.length() && Character.isDigit(sb.charAt(msEnd))) {\n                        msEnd++;\n                    }\n                    int msLen = msEnd - msStart;\n                    if (msLen < 3) {\n                        for (int i = 0; i < 3 - msLen; ++i) {\n                            sb.insert(msEnd, '0');\n                        }\n                        // Don't need to update msEnd/timeEndIndex for anything after ms\n                    } else if (msLen > 3) {\n                        // truncate if too long\n                        sb.delete(msStart + 3, msEnd);\n                    }\n                } else {\n                    // No dot, so insert \".000\" after seconds\n                    // Find seconds start: after first \":\" after the minutes (thus after \"T\"),\n                    // and possibly after inserted \":00\"\n                    int secIndex = sb.indexOf(\":\", tIndex + 1);\n                    secIndex = sb.indexOf(\":\", secIndex + 1); // find second ':'\n                    if (secIndex > -1 && secIndex + 3 <= sb.length()) {\n                        sb.insert(secIndex + 3, \".000\");\n                    }\n                }\n\n                dateStr = sb.toString();\n            }\n\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}