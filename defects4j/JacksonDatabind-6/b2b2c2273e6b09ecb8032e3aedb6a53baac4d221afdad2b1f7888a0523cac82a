{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos) {\n    int len = dateStr.length();\n    DateFormat df;\n    char c = dateStr.charAt(len - 1);\n\n    // For plain date formats (e.g. \"yyyy-MM-dd\")\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n        return df.parse(dateStr, pos);\n    }\n\n    // Force presence of a 'T'\n    int tIndex = dateStr.indexOf('T');\n    if (tIndex < 0) { // fallback to plain date parser\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n        return df.parse(dateStr, pos);\n    }\n\n    // Determine timezone: ends with 'Z' or has an explicit offset\n    boolean isZulu = (c == 'Z');\n    String timePortion;  // portion between 'T' and timezone offset\n    String zonePortion;  // the timezone part (either \"Z\" or \"+0100\"/\"-0500\", etc.)\n\n    if (isZulu) {\n        zonePortion = \"Z\";\n        timePortion = dateStr.substring(tIndex + 1, len - 1);\n    } else if (hasTimeZone(dateStr)) {\n        // Normalize timezone: remove the optional colon if present (e.g. +01:00 -> +0100)\n        if (dateStr.charAt(len - 3) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.deleteCharAt(len - 3);\n            dateStr = sb.toString();\n            len = dateStr.length();\n        } else if (dateStr.charAt(len - 3) == '+' || dateStr.charAt(len - 3) == '-') {\n            // Missing minutes? Append \"00\"\n            dateStr += \"00\";\n            len = dateStr.length();\n        }\n        zonePortion = dateStr.substring(len - 5);\n        timePortion = dateStr.substring(tIndex + 1, len - 5);\n    } else { // no timezone indicator; assume Zulu\n        zonePortion = \"Z\";\n        timePortion = dateStr.substring(tIndex + 1);\n    }\n\n    // Now fix the time portion so that it conforms to \"HH:mm:ss.SSS\"\n    // It might be \"HH:mm\" (missing seconds) or have a seconds part with partial milliseconds.\n    String fixedTimePortion;\n    String[] parts = timePortion.split(\":\");\n    if (parts.length == 2) {\n        // No seconds (e.g. \"19:20\") -> add seconds and milliseconds.\n        fixedTimePortion = parts[0] + \":\" + parts[1] + \":00.000\";\n    } else if (parts.length >= 3) {\n        // There is a seconds part; it may contain a fractional component.\n        String secPart = parts[2];\n        String sec, frac;\n        int dotIndex = secPart.indexOf('.');\n        if (dotIndex < 0) {\n            sec = secPart;\n            frac = \"000\";\n        } else {\n            sec = secPart.substring(0, dotIndex);\n            frac = secPart.substring(dotIndex + 1);\n            // Pad (or trim) the fractional seconds to exactly 3 digits.\n            if (frac.length() == 1) {\n                frac = frac + \"00\";\n            } else if (frac.length() == 2) {\n                frac = frac + \"0\";\n            } else if (frac.length() > 3) {\n                frac = frac.substring(0, 3);\n            }\n        }\n        // Default seconds if empty.\n        if (sec.isEmpty()) {\n            sec = \"00\";\n        }\n        fixedTimePortion = parts[0] + \":\" + parts[1] + \":\" + sec + \".\" + frac;\n    } else { \n        // Fallback: leave as-is \n        fixedTimePortion = timePortion;\n    }\n\n    // Reassemble the adjusted date string.\n    String fixedDateStr = dateStr.substring(0, tIndex + 1) + fixedTimePortion + zonePortion;\n\n    // Use the proper DateFormat instance.\n    if (isZulu || zonePortion.equals(\"Z\")) {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                    _timezone, _locale);\n        }\n    } else {\n        df = _formatISO8601;\n        if (df == null) {\n            df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                    _timezone, _locale);\n        }\n    }\n    return df.parse(fixedDateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}