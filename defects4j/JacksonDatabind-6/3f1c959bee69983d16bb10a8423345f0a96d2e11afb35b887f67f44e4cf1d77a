{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            // Fix optional colon in timezone\n            c = dateStr.charAt(len-3);\n            if (c == ':') { // remove optional colon\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len-3, len-2);\n                dateStr = sb.toString();\n                len = dateStr.length();\n            } else if (c == '+' || c == '-') { // missing minutes\n                dateStr += \"00\";\n                len = dateStr.length();\n            }\n\n            // Handle partial milliseconds, or missing seconds/milliseconds\n            // Find the time offset start\n            int tzIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n            int milliStart = dateStr.lastIndexOf('.');\n            int colon2 = dateStr.lastIndexOf(':');\n            // The offset is always at the end (e.g., -0500 or +0230)\n            // Try to locate milliseconds or insert them\n            if (colon2 >= 0 && (tzIndex > colon2) && (milliStart == -1 || milliStart < colon2)) {\n                // No milliseconds: insert .000 before offset\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(tzIndex, \".000\");\n                dateStr = sb.toString();\n            } else if (milliStart > colon2) {\n                // Has . after seconds, see how many digits\n                int msDigits = 0;\n                int i = milliStart + 1;\n                while (i < tzIndex && Character.isDigit(dateStr.charAt(i))) {\n                    msDigits++;\n                    i++;\n                }\n                if (msDigits > 0 && msDigits < 3) {\n                    // Need to pad with zeros\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int pad = 0; pad < 3 - msDigits; ++pad) {\n                        sb.insert(milliStart + 1 + msDigits + pad, '0');\n                    }\n                    dateStr = sb.toString();\n                } else if (msDigits == 0) {\n                    // Just a dot but no digits! Add 000.\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(milliStart + 1, \"000\");\n                    dateStr = sb.toString();\n                }\n            } else if (colon2 >= 0 && colon2 == tzIndex - 3) {\n                // Possibly missing seconds (e.g. 19:20+0100)\n                // Insert ':00.000' before offset\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(tzIndex, \":00.000\");\n                dateStr = sb.toString();\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int tIndex = dateStr.lastIndexOf('T');\n            int timeLen = (tIndex < 0) ? 0 : (len - tIndex - 1);\n            if (timeLen > 0) {\n                int dotIndex = dateStr.indexOf('.', tIndex);\n                int colonCount = 0, idx = tIndex + 1;\n                for (; idx < len; ++idx) {\n                    if (dateStr.charAt(idx) == ':') ++colonCount;\n                }\n                if (colonCount == 1) {\n                    sb.append(\":00.000\");\n                } else {\n                    // has at least HH:mm:ss\n                    if (dotIndex < 0) {\n                        sb.append(\".000\");\n                    } else {\n                        int msDigits = len - dotIndex - 1;\n                        if (msDigits > 0 && msDigits < 3) {\n                            for (int pad = 0; pad < 3 - msDigits; ++pad) {\n                                sb.append('0');\n                            }\n                        }\n                    }\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}