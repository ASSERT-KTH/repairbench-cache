{
    "generation": "    protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n    {\n        /* 21-May-2009, tatu: DateFormat has very strict handling of\n         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n         */\n\n        /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n         * quite simple because we already set date format timezone to be\n         * GMT, and hence can just strip out 'Z' altogether\n         */\n        int len = dateStr.length();\n        char c = dateStr.charAt(len-1);\n        DateFormat df;\n\n        // [JACKSON-200]: need to support \"plain\" date...\n        if (len <= 10 && Character.isDigit(c)) {\n            df = _formatPlain;\n            if (df == null) {\n                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n            }\n        } else if (c == 'Z') {\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n            }\n            // [JACKSON-334]: may be missing milliseconds... if so, add\n            if (dateStr.charAt(len-4) == ':') {\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(len-1, \".000\");\n                dateStr = sb.toString();\n            }\n        } else {\n            // Let's see if we have timezone indicator or not...\n            if (hasTimeZone(dateStr)) {\n                // Milliseconds partial or missing; and even seconds are optional\n                int dot = dateStr.indexOf('.');\n                int tzIndex = hasTimeZone(dateStr, len);\n\n                if (dot < 0) { // no fractional seconds\n                    int withoutTZ = (tzIndex < 0) ? len : tzIndex;\n                    if (withoutTZ == len - 6 && dateStr.charAt(withoutTZ -1) == ':') {\n                        dateStr = dateStr.substring(0, withoutTZ -1) + dateStr.substring(withoutTZ);\n                    }\n                } else {\n                    // fix fractional seconds\n                    int millisEnd = (tzIndex < 0) ? len : tzIndex;\n                    int fractionalLength = millisEnd - (dot + 1);\n\n                    if (fractionalLength == 1) {\n                        dateStr = dateStr.substring(0, millisEnd) + \"00\" + dateStr.substring(millisEnd);\n                    } else if (fractionalLength == 2) {\n                        dateStr = dateStr.substring(0, millisEnd) + \"0\" + dateStr.substring(millisEnd);\n                    }\n                }\n                if (tzIndex > 0 && dateStr.charAt(tzIndex - 3) == ':') { // remove optional colon\n                    dateStr = dateStr.substring(0, tzIndex - 3) + dateStr.substring(tzIndex - 2);\n                }\n                df = _formatISO8601;\n                if (_formatISO8601 == null) {\n                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n                }\n            } else {\n                // If not, plain date. Easiest to just patch 'Z' in the end?\n                StringBuilder sb = new StringBuilder(dateStr);\n                // And possible also millisecond part if missing\n                int timeLen = len - dateStr.lastIndexOf('T') - 1;\n                if (timeLen <= 8) {\n                        sb.append(\".000\");\n                }\n                sb.append('Z');\n                dateStr = sb.toString();\n                df = _formatISO8601_z;\n                if (df == null) {\n                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                            _timezone, _locale);\n                }\n            }\n        }\n        return df.parse(dateStr, pos);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}