{
    "generation": "    protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n    {\n        /* 21-May-2009, tatu: DateFormat has very strict handling of\n         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n         */\n\n        /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n         * quite simple because we already set date format timezone to be\n         * GMT, and hence can just strip out 'Z' altogether\n         */\n        int len = dateStr.length();\n        char c = dateStr.charAt(len-1);\n        DateFormat df;\n\n        // [JACKSON-200]: need to support \"plain\" date...\n        if (len <= 10 && Character.isDigit(c)) { // Handles yyyy-MM-dd\n            df = _formatPlain;\n            if (df == null) {\n                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n            }\n        } else if (c == 'Z') { // Handles yyyy-MM-dd'T'HH:mm:ss.SSS'Z' or variations\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n            }\n            \n            StringBuilder sb = new StringBuilder(dateStr);\n            int tIndex = sb.lastIndexOf('T');\n            if (tIndex > 0) { // If time part exists\n                int timePartEnd = sb.length() - 1; // End of time part is just before 'Z'\n                int millisDotIndex = sb.lastIndexOf('.', timePartEnd - 1); // Search for '.' in the time part (before 'Z')\n\n                if (millisDotIndex > tIndex) { // Milliseconds part exists, potentially partial (e.g., ...ss.X)\n                    int numMillisDigits = timePartEnd - (millisDotIndex + 1);\n                    if (numMillisDigits < 3) {\n                        for (int i = 0; i < (3 - numMillisDigits); ++i) {\n                            sb.insert(timePartEnd, '0'); // Pad with zeros before 'Z'\n                            timePartEnd++; // Adjust insertion point for subsequent padding\n                        }\n                    }\n                } else { // No milliseconds dot found. Add .000 or :00.000\n                    // Check if seconds are missing (e.g., HH:mm)\n                    // timePartEnd is the index of 'Z', so time part ends at timePartEnd-1\n                    String timeValue = sb.substring(tIndex + 1, timePartEnd); // Extract time part (HH:mm or HH:mm:ss)\n                    if (timeValue.length() == 5) { // HH:mm\n                        sb.insert(timePartEnd, \":00.000\"); // Add seconds and milliseconds before 'Z'\n                    } else if (timeValue.length() == 8) { // HH:mm:ss\n                        sb.insert(timePartEnd, \".000\"); // Add milliseconds before 'Z'\n                    }\n                }\n            }\n            dateStr = sb.toString();\n        } else { // Let's see if we have timezone indicator or not...\n            if (hasTimeZone(dateStr)) {\n                StringBuilder sb = new StringBuilder(dateStr);\n                \n                // 1. Normalize timezone offset (e.g., remove colon, add '00' if needed)\n                int tzOffsetStart = -1; // index of '+' or '-'\n                for (int i = sb.length() - 1; i >= 0; --i) {\n                    char ch = sb.charAt(i);\n                    if (ch == '+' || ch == '-') {\n                        tzOffsetStart = i;\n                        break;\n                    }\n                }\n\n                if (tzOffsetStart > 0) {\n                    // Check for colon in timezone offset (+HH:mm)\n                    if (sb.charAt(tzOffsetStart + 3) == ':') {\n                        sb.deleteCharAt(tzOffsetStart + 3); // Remove colon\n                    } else if (sb.length() == tzOffsetStart + 3) { // e.g., +HH, missing minutes\n                        sb.append(\"00\"); // Append '00'\n                    }\n                }\n                \n                // 2. Handle missing/partial seconds and milliseconds\n                int tIndex = sb.lastIndexOf('T');\n                if (tIndex > 0) { // Should always be true for ISO8601 with time\n                    // The timezone offset (after normalization) starts at tzOffsetStart.\n                    // The time part ends at tzOffsetStart - 1.\n                    \n                    // Re-locate tzOffsetStart as sb might have changed length due to timezone normalization\n                    // This is crucial if dateStr has changed length.\n                    tzOffsetStart = -1;\n                    for (int i = sb.length() - 1; i >= 0; --i) {\n                        char ch = sb.charAt(i);\n                        if (ch == '+' || ch == '-') {\n                            tzOffsetStart = i;\n                            break;\n                        }\n                    }\n                    if (tzOffsetStart == -1) { // Should not happen if hasTimeZone is true and date is valid\n                        // Fallback or error handling\n                        return null; // or throw exception, but current API returns null\n                    }\n                    \n                    int timePartEnd = tzOffsetStart; // This is the insertion point before the timezone offset\n\n                    int millisDotIndex = sb.lastIndexOf('.', timePartEnd - 1); // Search for '.' before TZ offset\n\n                    if (millisDotIndex > tIndex) { // Milliseconds part exists (e.g., ...ss.X...)\n                        int numMillisDigits = timePartEnd - (millisDotIndex + 1);\n                        if (numMillisDigits < 3) {\n                            for (int i = 0; i < (3 - numMillisDigits); ++i) {\n                                sb.insert(timePartEnd, '0');\n                            }\n                        }\n                    } else { // No milliseconds dot found. Add .000 or :00.000\n                        String timeValue = sb.substring(tIndex + 1, timePartEnd);\n                        if (timeValue.length() == 5) { // HH:mm\n                            sb.insert(timePartEnd, \":00.000\");\n                        } else if (timeValue.length() == 8) { // HH:mm:ss\n                            sb.insert(timePartEnd, \".000\");\n                        }\n                    }\n                }\n                dateStr = sb.toString();\n                \n                df = _formatISO8601;\n                if (_formatISO8601 == null) {\n                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n                }\n            } else { // No timezone, assume Z.\n                StringBuilder sb = new StringBuilder(dateStr);\n                int tIndex = sb.lastIndexOf('T');\n                if (tIndex > 0) { // If time part exists\n                    int timePartEnd = sb.length(); // End of time part is end of string before appending 'Z'\n                    int millisDotIndex = sb.lastIndexOf('.', timePartEnd - 1); // Search for '.' in the time part\n\n                    if (millisDotIndex > tIndex) { // Milliseconds exist, potentially partial\n                        int numMillisDigits = timePartEnd - (millisDotIndex + 1);\n                        if (numMillisDigits < 3) {\n                            for (int i = 0; i < (3 - numMillisDigits); ++i) {\n                                sb.insert(timePartEnd, '0'); // Pad with zeros at the end of time part\n                                timePartEnd++; // Adjust insertion point for subsequent inserts\n                            }\n                        }\n                    } else { // No milliseconds dot found. Add .000 or :00.000\n                        String timeValue = sb.substring(tIndex + 1, timePartEnd);\n                        if (timeValue.length() == 5) { // HH:mm\n                            sb.append(\":00.000\");\n                        } else if (timeValue.length() == 8) { // HH:mm:ss\n                            sb.append(\".000\");\n                        }\n                    }\n                }\n                sb.append('Z'); // Always append 'Z'\n                dateStr = sb.toString();\n                df = _formatISO8601_z;\n                if (df == null) {\n                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                            _timezone, _locale);\n                }\n            }\n        }\n        return df.parse(dateStr, pos);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}