{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        }\n        // handle partial milliseconds for Z case\n        int milliStart = dateStr.lastIndexOf('.');\n        if (milliStart > 0 && (len - milliStart - (c == 'Z' ? 2 : 1)) < 3) {\n            int insertZeros = 3 - (len - milliStart - 2);\n            StringBuilder sb = new StringBuilder(dateStr);\n            for (int i=0;i<insertZeros;i++) sb.insert(len-1, \"0\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            // Remove colon from timezone if present\n            if (len >= 6) {\n                c = dateStr.charAt(len-3);\n                if (c == ':') { // remove optional colon\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.delete(len-3, len-2);\n                    dateStr = sb.toString();\n                    len = dateStr.length();\n                } else if (c == '+' || c == '-') { // missing minutes\n                    // let's just append '00'\n                    dateStr += \"00\";\n                    len = dateStr.length();\n                }\n            }\n            // Insert missing seconds if only hours and minutes for time part\n            int tIndex = dateStr.indexOf('T');\n            int plusIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n            int tzOffset = (plusIndex > -1) ? plusIndex : len;\n            String timePart = tIndex >= 0 ? dateStr.substring(tIndex + 1, tzOffset) : \"\";\n            // timePart is like HH:mm or HH:mm:ss(.sss)\n            if (timePart.length() >= 5) {\n                if (timePart.charAt(2) == ':' && (timePart.length() == 5 || (timePart.length() > 5 && timePart.charAt(5) != ':'))) {\n                    // missing seconds, insert \":00\"\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(tIndex + 6, \":00\");\n                    dateStr = sb.toString();\n                    len = dateStr.length();\n                }\n            }\n            // Insert missing milliseconds if not present\n            // find location before timezone, in \"[.sss]([+-]hhmm)\"\n            timePart = tIndex >= 0 ? dateStr.substring(tIndex + 1, tzOffset) : \"\";\n            int secDot = timePart.indexOf('.');\n            int secLen = timePart.length();\n            if (timePart.length() >= 8) {\n                // time is HH:mm:ss(.sss) expectation\n                if (secDot > 0) {\n                    // partial or missing milliseconds, pad to 3 digits\n                    int fracStart = tIndex + 1 + secDot + 1;\n                    int fracEnd = fracStart;\n                    while (fracEnd < tzOffset && Character.isDigit(dateStr.charAt(fracEnd))) {\n                        fracEnd++;\n                    }\n                    int milliCount = fracEnd - fracStart;\n                    if (milliCount < 3) {\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        for (int i = 0; i < 3 - milliCount; ++i) {\n                            sb.insert(fracEnd, '0');\n                        }\n                        dateStr = sb.toString();\n                        len = dateStr.length();\n                    }\n                } else {\n                    // No milliseconds, insert \".000\" after seconds\n                    int secondEnd = tIndex + 1 + 8; // T + HH:mm:ss\n                    if (secondEnd <= tzOffset) {\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(secondEnd, \".000\");\n                        dateStr = sb.toString();\n                        len = dateStr.length();\n                    }\n                }\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Patch 'Z' in the end, and add millisecond part if missing\n            StringBuilder sb = new StringBuilder(dateStr);\n            int tIndex = dateStr.indexOf('T');\n            int timeLen = (tIndex < 0) ? 0 : (len - tIndex - 1);\n            if (tIndex >= 0 && timeLen > 0) {\n                String timePart = dateStr.substring(tIndex + 1);\n                int secDot = timePart.indexOf('.');\n                if (timePart.length() >= 8) {\n                    if (secDot > 0) {\n                        int milliCount = 0;\n                        int fracStart = secDot + 1;\n                        while (fracStart + milliCount < timePart.length() && Character.isDigit(timePart.charAt(fracStart + milliCount)))\n                            milliCount++;\n                        if (milliCount < 3) {\n                            int insertAt = tIndex + 1 + secDot + 1 + milliCount;\n                            for (int i = 0; i < 3 - milliCount; ++i)\n                                sb.insert(insertAt, '0');\n                        }\n                    } else {\n                        int insertAt = tIndex + 1 + 8;\n                        sb.insert(insertAt, \".000\");\n                    }\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}