{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            // Identify offset part: look for +/- in last 6 or last 5\n            int tzOffsetIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n            // Handle colon in offset, and possible missing minutes in offset\n            if (tzOffsetIndex != -1 && (tzOffsetIndex + 3 < dateStr.length()) && dateStr.charAt(tzOffsetIndex + 3) == ':') {\n                // Remove colon, e.g. +01:00 -> +0100\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.deleteCharAt(tzOffsetIndex + 3);\n                dateStr = sb.toString();\n                len = dateStr.length();\n            } else if (tzOffsetIndex != -1 && (tzOffsetIndex + 2 == dateStr.length() - 1)) {\n                // e.g. \"+01\" or \"-02\" at end; add minutes \"00\"\n                dateStr += \"00\";\n                len = dateStr.length();\n            }\n            // Ensure that seconds and milliseconds are present\n\n            // Start at the separator 'T', must be there for ISO8601 with time\n            int timeStart = dateStr.indexOf('T');\n            if (timeStart > 0) {\n                int timeLen = tzOffsetIndex != -1 ? tzOffsetIndex - (timeStart + 1) : len - (timeStart + 1);\n                String timePortion = dateStr.substring(timeStart + 1, timeStart + 1 + timeLen);\n                // timePortion might be e.g., \"19:20\", \"19:20:30\", \"19:20:30.45\"\n                int secSep = timePortion.indexOf(':', timePortion.indexOf(':') + 1);\n                boolean hasSeconds = (secSep != -1);\n                StringBuilder sb = new StringBuilder(dateStr);\n                int insertPos = tzOffsetIndex != -1 ? tzOffsetIndex : len;\n                if (!hasSeconds) {\n                    // Insert \":00\" before suffix (timezone).\n                    sb.insert(insertPos, \":00\");\n                    dateStr = sb.toString();\n                    // Now adjust variables since we changed the string\n                    len = dateStr.length();\n                    sb = new StringBuilder(dateStr);\n                    // Since we added 3 chars, we need to shift insertPos\n                    insertPos += 3;\n                }\n\n                // After possible addition of seconds, see if we have milliseconds\n                // Regex match for fractions: look for '.' after seconds\n                // Insert zeros until we have 3 digits after dot, or insert '.000' if missing\n\n                // Find the '.' after seconds, before timezone offset\n                int dotPos = -1;\n                int timeEnd = tzOffsetIndex != -1 ? tzOffsetIndex : sb.length();\n                for (int i = timeStart + 1; i < timeEnd; ++i) {\n                    if (sb.charAt(i) == '.') {\n                        dotPos = i;\n                        break;\n                    }\n                }\n                if (dotPos == -1) {\n                    // No dot, so insert \".000\" after seconds (which is after \":ss\")\n                    int secCount = 0, i = timeStart + 1;\n                    while (i < timeEnd && secCount < 2) {\n                        if (sb.charAt(i) == ':') {\n                            secCount++;\n                        }\n                        i++;\n                    }\n                    // After second ':', that's after seconds, so i points to insert position\n                    sb.insert(i, \".000\");\n                    dateStr = sb.toString();\n                } else {\n                    // Has dot, check how many digits in fraction, pad as necessary\n                    int milliStart = dotPos + 1;\n                    int milliEnd = milliStart;\n                    // Only consider up to 3 digits\n                    while (milliEnd < timeEnd && Character.isDigit(sb.charAt(milliEnd)) && milliEnd - milliStart < 3) {\n                        milliEnd++;\n                    }\n                    int milliDigits = milliEnd - milliStart;\n                    if (milliDigits < 3) {\n                        // Insert zeros (milliDigits >= 0)\n                        for (int j = 0; j < 3 - milliDigits; j++) {\n                            sb.insert(milliEnd, '0');\n                        }\n                        dateStr = sb.toString();\n                    } else if (milliDigits > 3) {\n                        // Truncate extra digits (should not occur in valid ISO, but guard)\n                        sb.delete(milliStart + 3, milliEnd);\n                        dateStr = sb.toString();\n                    }\n                }\n            }\n\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int tIndex = dateStr.lastIndexOf('T');\n            int timeLen = len - tIndex - 1;\n            if (tIndex >= 0 && timeLen <= 8) {\n                sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}