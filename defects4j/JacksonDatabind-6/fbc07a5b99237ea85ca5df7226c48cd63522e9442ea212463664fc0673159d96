{
    "generation": "    protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n    {\n        /* 21-May-2009, tatu: DateFormat has very strict handling of\n         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n         */\n\n        /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n         * quite simple because we already set date format timezone to be\n         * GMT, and hence can just strip out 'Z' altogether\n         */\n        int len = dateStr.length();\n        char c = dateStr.charAt(len-1);\n        DateFormat df;\n\n        // [JACKSON-200]: need to support \"plain\" date...\n        // Use a more robust check for plain date (no 'T' character)\n        if (len <= 10 && dateStr.indexOf('T') == -1) {\n            df = _formatPlain;\n            if (df == null) {\n                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n            }\n        } else if (c == 'Z') {\n            // Handle 'Z' (Zulu time)\n            StringBuilder sb = new StringBuilder(dateStr);\n            int tIndex = dateStr.indexOf('T');\n            int zIndex = len - 1; // index of 'Z'\n\n            // If 'T' is missing, the string is likely malformed for this format.\n            // However, assuming 'T' is present for standard ISO8601 with 'Z'.\n            if (tIndex != -1) {\n                // Check if seconds are missing (e.g. \"HH:MMZ\" -> \"HH:MM:00Z\")\n                // This is typically indicated by the string length after 'T' before 'Z' being 5 characters (HH:MM)\n                if (zIndex - (tIndex + 1) == 5) { // `dateStr.substring(tIndex+1, zIndex)` is \"HH:MM\"\n                    sb.insert(zIndex, \":00.000\"); // Add seconds and milliseconds\n                    dateStr = sb.toString();\n                } else {\n                    // Has seconds, now check milliseconds\n                    int dotIndex = dateStr.lastIndexOf('.', zIndex); // Search for dot before 'Z'\n                    // If dot is found and it's after the last colon in time (implies HH:MM:SS.f)\n                    if (dotIndex != -1 && dotIndex > dateStr.lastIndexOf(':', zIndex)) {\n                        int msLength = zIndex - (dotIndex + 1); // Length of 'f' part\n                        if (msLength < 3) {\n                            for (int i = 0; i < (3 - msLength); ++i) {\n                                sb.insert(zIndex, '0'); // Pad milliseconds with trailing zeros\n                            }\n                            dateStr = sb.toString();\n                        }\n                    } else { // Has seconds but no milliseconds (e.g. HH:MM:SSZ)\n                        // This applies if the last part before 'Z' is like \"SS\" (2 digits) preceded by ':'.\n                        // Check if the character before 'SSZ' is a colon.\n                        if (len >= 4 && dateStr.charAt(len - 4) == ':') { // Original JACKSON-334 check was for this.\n                             sb.insert(len - 1, \".000\"); // Add .000 before 'Z'\n                             dateStr = sb.toString();\n                        }\n                    }\n                }\n            }\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n            }\n        } else {\n            // Let's see if we have timezone indicator or not...\n            if (hasTimeZone(dateStr)) {\n                // Normalize timezone part first (remove colon, ensure +HHMM or -HHMM)\n                // Need to re-calculate len if string modified by these ops\n                int currentLen = dateStr.length();\n                char charBeforeTZDigits = dateStr.charAt(currentLen - 3); // character before +HH:MM / -HH:MM or +HHMM / -HHMM\n                StringBuilder sb = new StringBuilder(dateStr);\n\n                if (charBeforeTZDigits == ':') { // remove optional colon, e.g., +01:00 -> +0100\n                    sb.delete(currentLen - 3, currentLen - 2);\n                    dateStr = sb.toString();\n                } else if (charBeforeTZDigits == '+' || charBeforeTZDigits == '-') { // missing minutes, e.g., +HH -> +HH00\n                    sb.append(\"00\");\n                    dateStr = sb.toString();\n                }\n                currentLen = dateStr.length(); // Update len after timezone modification\n                \n                // Now, normalize the time part (seconds/milliseconds)\n                sb = new StringBuilder(dateStr); // Re-initialize StringBuilder for new string\n                int tIndex = dateStr.indexOf('T');\n                int tzOffsetStart = dateStr.lastIndexOf('+');\n                if (tzOffsetStart == -1) tzOffsetStart = dateStr.lastIndexOf('-');\n\n                // This should be the index just before the timezone offset (e.g., before '+0100')\n                int endOfTimePart = tzOffsetStart; \n\n                // Case 1: Missing seconds (e.g. \"HH:MM\")\n                // Length of HH:MM is 5. `endOfTimePart - (tIndex + 1)`\n                if (tIndex != -1 && (endOfTimePart - (tIndex + 1)) == 5) { \n                    sb.insert(endOfTimePart, \":00.000\");\n                    dateStr = sb.toString();\n                } else {\n                    // Case 2: Has seconds, check milliseconds\n                    // Find dot before TZ offset. Search limit is `endOfTimePart`\n                    int dotIndex = dateStr.lastIndexOf('.', endOfTimePart); \n                    // If dot is found and it's after the last colon in time (implies HH:MM:SS.f)\n                    if (dotIndex != -1 && dotIndex > dateStr.lastIndexOf(':', endOfTimePart)) {\n                        // Extract milliseconds string (part between dot and TZ offset)\n                        String msStr = dateStr.substring(dotIndex + 1, endOfTimePart);\n                        int msLength = msStr.length();\n                        if (msLength < 3) {\n                            for (int i = 0; i < (3 - msLength); ++i) {\n                                sb.insert(dotIndex + 1 + msLength, '0'); // Pad milliseconds with trailing zeros\n                            }\n                            dateStr = sb.toString();\n                        }\n                    } else {\n                        // Case 3: Has seconds, but no milliseconds (e.g. HH:MM:SS)\n                        // This applies if the last part before TZ offset is like \"SS\" (2 digits) preceded by ':'.\n                        if (endOfTimePart >= 3 && dateStr.charAt(endOfTimePart - 3) == ':') {\n                            sb.insert(endOfTimePart, \".000\");\n                            dateStr = sb.toString();\n                        }\n                    }\n                }\n                df = _formatISO8601;\n                if (_formatISO8601 == null) {\n                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n                }\n            } else { // No timezone indicator (e.g., \"YYYY-MM-DDTHH:MM\")\n                StringBuilder sb = new StringBuilder(dateStr);\n                int tIndex = dateStr.indexOf('T');\n                // The end of the time part is the end of the current string\n                int endOfTimePart = dateStr.length(); \n\n                // Case 1: Missing seconds (e.g. \"HH:MM\")\n                if (tIndex != -1 && (endOfTimePart - (tIndex + 1)) == 5) { \n                    sb.insert(endOfTimePart, \":00.000\");\n                    dateStr = sb.toString();\n                } else {\n                    // Case 2: Has seconds, check milliseconds\n                    int dotIndex = dateStr.lastIndexOf('.', endOfTimePart);\n                    if (dotIndex != -1 && dotIndex > dateStr.lastIndexOf(':', endOfTimePart)) {\n                        String msStr = dateStr.substring(dotIndex + 1, endOfTimePart);\n                        int msLength = msStr.length();\n                        if (msLength < 3) {\n                            for (int i = 0; i < (3 - msLength); ++i) {\n                                sb.insert(dotIndex + 1 + msLength, '0');\n                            }\n                            dateStr = sb.toString();\n                        }\n                    } else {\n                        // Case 3: Has seconds, but no milliseconds (e.g. HH:MM:SS)\n                        // This applies if the last part before end is like \"SS\" (2 digits) preceded by ':'.\n                        if (endOfTimePart >= 3 && dateStr.charAt(endOfTimePart - 3) == ':') {\n                            sb.insert(endOfTimePart, \".000\");\n                            dateStr = sb.toString();\n                        }\n                    }\n                }\n                // Finally, append 'Z' as per the logic for dates without explicit timezone.\n                // Rebuild StringBuilder if dateStr was modified\n                sb = new StringBuilder(dateStr); \n                sb.append('Z');\n                dateStr = sb.toString();\n\n                df = _formatISO8601_z;\n                if (df == null) {\n                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                            _timezone, _locale);\n                }\n            }\n        }\n        return df.parse(dateStr, pos);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}