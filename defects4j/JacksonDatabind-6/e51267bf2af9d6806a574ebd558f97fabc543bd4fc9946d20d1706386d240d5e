{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos) {\n    int len = dateStr.length();\n    DateFormat df;\n    // Case 1: Plain date (no time info)\n    if (len <= 10 && Character.isDigit(dateStr.charAt(len - 1))) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n        return df.parse(dateStr, pos);\n    }\n\n    // Local helper to \u201cnormalize\u201d the time part so that it always is in the form:\n    // HH:mm:ss.SSS   (i.e. if seconds are missing, add \":00\"; if fractional seconds are missing or partial, pad to 3 digits)\n    java.util.function.Function<String, String> normalizeTime = timePart -> {\n        // Count colons to check if seconds are provided.\n        int colonCount = 0;\n        for (int i = 0; i < timePart.length(); i++) {\n            if (timePart.charAt(i) == ':') {\n                colonCount++;\n            }\n        }\n        if (colonCount == 1) {\n            // Only hours and minutes provided; add seconds.\n            timePart = timePart + \":00\";\n        }\n        int dotIndex = timePart.indexOf('.');\n        if (dotIndex < 0) {\n            // No fractional part -> add .000\n            timePart = timePart + \".000\";\n        } else {\n            int fracDigits = timePart.length() - dotIndex - 1;\n            while (fracDigits < 3) {\n                timePart = timePart + \"0\";\n                fracDigits++;\n            }\n        }\n        return timePart;\n    };\n\n    // Case 2: If the date string ends with 'Z' (Zulu/GMT)\n    if (dateStr.charAt(len - 1) == 'Z') {\n        int tIndex = dateStr.indexOf('T');\n        String timePart = dateStr.substring(tIndex + 1, len - 1);\n        timePart = normalizeTime.apply(timePart);\n        dateStr = dateStr.substring(0, tIndex + 1) + timePart + \"Z\";\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        return df.parse(dateStr, pos);\n    }\n\n    // Case 3: Date string with a timezone offset (e.g. \"+01:00\" or \"-05:00\")\n    if (hasTimeZone(dateStr)) {\n        // Remove colon from timezone if present (e.g. convert \"+01:00\" to \"+0100\")\n        if (dateStr.length() >= 6 && dateStr.charAt(dateStr.length() - 3) == ':') {\n            dateStr = dateStr.substring(0, dateStr.length() - 3) + dateStr.substring(dateStr.length() - 2);\n        }\n        // In some cases the minutes in the zone are missing; append \"00\"\n        else if (dateStr.length() >= 5) {\n            char tzSign = dateStr.charAt(dateStr.length() - 5);\n            if (tzSign == '+' || tzSign == '-') {\n                dateStr = dateStr + \"00\";\n            }\n        }\n        int tIndex = dateStr.indexOf('T');\n        int tzIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n        if (tzIndex < 0) {\n            tzIndex = dateStr.length();\n        }\n        String timePart = dateStr.substring(tIndex + 1, tzIndex);\n        timePart = normalizeTime.apply(timePart);\n        dateStr = dateStr.substring(0, tIndex + 1) + timePart + dateStr.substring(tzIndex);\n        df = _formatISO8601;\n        if (_formatISO8601 == null) {\n            df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n        }\n        return df.parse(dateStr, pos);\n    }\n\n    // Case 4: No timezone indicator \u2013 treat as a plain date/time and append 'Z'\n    int tIndex = dateStr.indexOf('T');\n    String timePart = (tIndex >= 0) ? dateStr.substring(tIndex + 1) : \"\";\n    timePart = normalizeTime.apply(timePart);\n    if (tIndex >= 0) {\n        dateStr = dateStr.substring(0, tIndex + 1) + timePart + \"Z\";\n    } else {\n        dateStr = dateStr + \"T00:00:00.000Z\";\n    }\n    df = _formatISO8601_z;\n    if (df == null) {\n        df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}