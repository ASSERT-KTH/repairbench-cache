{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            // First, handle the timezone (remove colon, handle +hh or -hh format)\n            // and adjust any missing components for the time\n            \n            // Remove colon in offset if present: 2014-10-03T18:00:00.6-05:00\n            int tzIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n            if (tzIndex != -1 && (tzIndex + 3 < dateStr.length()) && dateStr.charAt(tzIndex + 3) == ':') {\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(tzIndex + 3, tzIndex + 4); // remove colon\n                dateStr = sb.toString();\n                len--;\n            } else if (tzIndex != -1 && dateStr.length() - tzIndex == 3) {\n                // Timezone given as +hh or -hh, missing minutes\n                dateStr += \"00\";\n                len += 2;\n            }\n\n            // Now handle milliseconds\n            // Look for the start of the timezone info\n            tzIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n            if (tzIndex == -1)\n                tzIndex = len;\n\n            // Now, parse for time section to possibly fill missing/malformed fields\n            // Regex: Look for \".s\" or \".ss\" (partial milliseconds)\n            int msStart = -1;\n            int msEnd = -1;\n            for (int i = tzIndex - 1; i >= 0; --i) {\n                char ch = dateStr.charAt(i);\n                if (ch == '.') {\n                    msStart = i;\n                    // scan for the end of milliseconds part (first non-digit)\n                    msEnd = msStart + 1;\n                    while (msEnd < tzIndex && Character.isDigit(dateStr.charAt(msEnd)))\n                        msEnd++;\n                    break;\n                }\n                // break out if reach a non-digit, non-colon, non-T, non-S\n                if (ch == 'T' || ch == ':')\n                    break;\n            }\n\n            StringBuilder sb = null;\n            if (msStart >= 0 && msEnd > msStart) {\n                int msLen = msEnd - (msStart + 1);\n                if (msLen < 3) {\n                    sb = new StringBuilder(dateStr);\n                    // Pad with zeros to make 3 digits\n                    for (int i = 0; i < 3 - msLen; ++i) {\n                        sb.insert(msEnd + i, '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            } else {\n                // missing milliseconds, so insert \".000\" before timezone\n                sb = new StringBuilder(dateStr);\n                int insertPos = tzIndex;\n                // Find the position before timezone sign\n                // Also, check if there's seconds\n                // Find 'T' and last ':' after T\n                int tIndex = dateStr.indexOf('T');\n                int secIndex = dateStr.lastIndexOf(':', tzIndex - 1);\n                boolean hasSeconds = (secIndex > tIndex);\n                if (!hasSeconds) {\n                    // Add \":00\" seconds\n                    sb.insert(insertPos, \":00.000\");\n                } else {\n                    sb.insert(insertPos, \".000\");\n                }\n                dateStr = sb.toString();\n            }\n\n            // Now, check if missing seconds part (format ends with ...:mm\u00b1hhmm)\n            // Already handled above if !hasSeconds\n\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int tIndex = dateStr.lastIndexOf('T');\n            int timeLen = len - tIndex - 1;\n            // timeLen == 5: HH:mm\n            // timeLen == 8: HH:mm:ss\n            // timeLen < 8: missing seconds or milliseconds\n            if (tIndex >= 0) {\n                // Find seconds\n                int secIndex = dateStr.indexOf(':', tIndex + 1);\n                secIndex = secIndex >= 0 ? dateStr.indexOf(':', secIndex + 1) : -1;\n                boolean hasSeconds = (secIndex > 0 && secIndex < len);\n                boolean hasMilliseconds = false;\n                if (hasSeconds) {\n                    int msDot = dateStr.indexOf('.', secIndex);\n                    hasMilliseconds = (msDot > secIndex && msDot < len);\n                }\n                if (!hasSeconds) {\n                    sb.append(\":00.000\");\n                } else if (!hasMilliseconds) {\n                    sb.append(\".000\");\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}