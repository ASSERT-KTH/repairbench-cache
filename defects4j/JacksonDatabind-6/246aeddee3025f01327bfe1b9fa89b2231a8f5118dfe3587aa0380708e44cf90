{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    }\n    // Case: ends with 'Z' (Zulu timezone)\n    else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                    _timezone, _locale);\n        }\n        // Remove the trailing 'Z' to work on the base time\n        String baseTime = dateStr.substring(0, len - 1);\n        // If time portion is missing seconds, add them.\n        int tIndex = baseTime.indexOf('T');\n        if (tIndex >= 0) {\n            String timePart = baseTime.substring(tIndex + 1);\n            int colonCount = 0;\n            for (int i = 0; i < timePart.length(); ++i) {\n                if (timePart.charAt(i) == ':') {\n                    ++colonCount;\n                }\n            }\n            if (colonCount == 1) { // only hours and minutes provided\n                baseTime += \":00\";\n            }\n        }\n        // Now fix fractional seconds: ensure exactly three digits\n        int dotIndex = baseTime.indexOf('.');\n        if (dotIndex < 0) {\n            baseTime += \".000\";\n        } else {\n            int fracLen = baseTime.length() - dotIndex - 1;\n            if (fracLen < 3) {\n                StringBuilder sb = new StringBuilder(baseTime);\n                for (int i = 0; i < 3 - fracLen; i++) {\n                    sb.append('0');\n                }\n                baseTime = sb.toString();\n            } else if (fracLen > 3) {\n                baseTime = baseTime.substring(0, dotIndex + 4);\n            }\n        }\n        dateStr = baseTime + \"Z\";\n    }\n    // Case: non-Z timezone (has '+' or '-' in it)\n    else if (hasTimeZone(dateStr)) {\n        // Normalize timezone: remove optional colon, or add missing minutes\n        if (dateStr.charAt(dateStr.length() - 3) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.deleteCharAt(dateStr.length() - 3);\n            dateStr = sb.toString();\n        } else if (dateStr.charAt(dateStr.length() - 3) == '+' ||\n                   dateStr.charAt(dateStr.length() - 3) == '-') {\n            dateStr += \"00\";\n        }\n        // Assume the timezone offset is the final 5 characters\n        int tzPos = dateStr.length() - 5;\n        String baseTime = dateStr.substring(0, tzPos);\n        // If seconds are missing (time part only has hour/minute), add seconds.\n        int tIndex = baseTime.indexOf('T');\n        if (tIndex >= 0) {\n            String timePart = baseTime.substring(tIndex + 1);\n            int colonCount = 0;\n            for (int i = 0; i < timePart.length(); ++i) {\n                if (timePart.charAt(i) == ':') {\n                    ++colonCount;\n                }\n            }\n            if (colonCount == 1) {\n                baseTime += \":00\";\n            }\n        }\n        // Fix fractional seconds if needed\n        int dotIndex = baseTime.indexOf('.');\n        if (dotIndex < 0) {\n            baseTime += \".000\";\n        } else {\n            int fracLen = baseTime.length() - dotIndex - 1;\n            if (fracLen < 3) {\n                StringBuilder sb = new StringBuilder(baseTime);\n                for (int i = 0; i < 3 - fracLen; i++) {\n                    sb.append('0');\n                }\n                baseTime = sb.toString();\n            } else if (fracLen > 3) {\n                baseTime = baseTime.substring(0, dotIndex + 4);\n            }\n        }\n        dateStr = baseTime + dateStr.substring(tzPos);\n        if (_formatISO8601 == null) {\n            _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                    _timezone, _locale);\n        }\n        df = _formatISO8601;\n    }\n    // Case: no timezone indicator; treat as plain and assume 'Z'\n    else {\n        StringBuilder sb = new StringBuilder(dateStr);\n        int tIndex = dateStr.indexOf('T');\n        if (tIndex >= 0) {\n            String timePart = dateStr.substring(tIndex + 1);\n            int colonCount = 0;\n            for (int i = 0; i < timePart.length(); ++i) {\n                if (timePart.charAt(i) == ':') {\n                    colonCount++;\n                }\n            }\n            if (colonCount == 1) {\n                sb.append(\":00\");\n            }\n            if (timePart.indexOf('.') < 0) {\n                sb.append(\".000\");\n            }\n        } else {\n            sb.append(\"T00:00:00.000\");\n        }\n        sb.append('Z');\n        dateStr = sb.toString();\n        if (_formatISO8601_z == null) {\n            _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                    _timezone, _locale);\n        }\n        df = _formatISO8601_z;\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}