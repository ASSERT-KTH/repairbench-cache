{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos) {\n    int len = dateStr.length();\n    char last = dateStr.charAt(len - 1);\n    DateFormat df;\n    // plain \"yyyy-MM-dd\"?\n    if (len <= 10 && Character.isDigit(last)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(\n                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,\n                _timezone, _locale);\n        }\n        return df.parse(dateStr, pos);\n    }\n    // split off timezone part\n    String main = dateStr;\n    String tz = null;\n    if (last == 'Z') {\n        main = dateStr.substring(0, len - 1);\n        tz = \"Z\";\n    } else {\n        int tPos = dateStr.indexOf('T');\n        if (tPos >= 0) {\n            int plus = dateStr.indexOf('+', tPos + 1);\n            int minus = dateStr.indexOf('-', tPos + 1);\n            int tzPos = -1;\n            if (plus > 0 && minus > 0) {\n                tzPos = Math.max(plus, minus);\n            } else if (plus > 0) {\n                tzPos = plus;\n            } else if (minus > 0) {\n                tzPos = minus;\n            }\n            if (tzPos > 0) {\n                main = dateStr.substring(0, tzPos);\n                tz = dateStr.substring(tzPos);\n            }\n        }\n    }\n    // normalize timezone string\n    String tzStr;\n    if (tz == null || tz.isEmpty()) {\n        tzStr = \"Z\";\n    } else if (\"Z\".equals(tz)) {\n        tzStr = \"Z\";\n    } else {\n        tzStr = tz.replace(\":\", \"\");\n        if (tzStr.length() == 3) { // +HH or -HH\n            tzStr = tzStr + \"00\";\n        }\n    }\n    // normalize the \"main\" part into hh:mm:ss.SSS\n    String datePart;\n    String timePart = null;\n    int tIndex = main.indexOf('T');\n    if (tIndex >= 0) {\n        datePart = main.substring(0, tIndex);\n        timePart = main.substring(tIndex + 1);\n    } else {\n        datePart = main;\n    }\n    String hour = \"00\", minute = \"00\", second = \"00\", frac = \"000\";\n    if (timePart != null) {\n        String[] parts = timePart.split(\":\", 3);\n        hour = parts[0];\n        if (parts.length > 1) {\n            minute = parts[1];\n        }\n        if (parts.length > 2) {\n            String secAndMs = parts[2];\n            int dot = secAndMs.indexOf('.');\n            if (dot < 0) {\n                second = secAndMs;\n            } else {\n                second = secAndMs.substring(0, dot);\n                frac = secAndMs.substring(dot + 1);\n            }\n        }\n    }\n    // pad hour/min/sec\n    if (hour.length() == 1) {\n        hour = \"0\" + hour;\n    }\n    if (minute.length() == 1) {\n        minute = \"0\" + minute;\n    }\n    if (second.length() == 0) {\n        second = \"00\";\n    } else if (second.length() == 1) {\n        second = \"0\" + second;\n    }\n    // pad or trim fraction to exactly 3 digits\n    if (frac.length() > 3) {\n        frac = frac.substring(0, 3);\n    } else if (frac.length() == 1) {\n        frac = frac + \"00\";\n    } else if (frac.length() == 2) {\n        frac = frac + \"0\";\n    } else if (frac.length() == 0) {\n        frac = \"000\";\n    }\n    // rebuild normalized string\n    StringBuilder sb = new StringBuilder(30);\n    sb.append(datePart)\n      .append('T').append(hour).append(':').append(minute)\n      .append(':').append(second).append('.').append(frac)\n      .append(tzStr);\n    String norm = sb.toString();\n    // choose correct DateFormat\n    if (\"Z\".equals(tzStr)) {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(\n                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                _timezone, _locale);\n        }\n    } else {\n        df = _formatISO8601;\n        if (df == null) {\n            df = _formatISO8601 = _cloneFormat(\n                DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                _timezone, _locale);\n        }\n    }\n    return df.parse(norm, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}