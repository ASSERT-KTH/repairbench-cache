{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n     * quite simple because we already set date format timezone to be\n     * GMT, and hence can just strip out 'Z' altogether\n     */\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len-3);\n            if (c == ':') { // remove optional colon\n                // remove colon\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len-3, len-2);\n                dateStr = sb.toString();\n            } else if (c == '+' || c == '-') { // missing minutes\n                // let's just append '00'\n                dateStr += \"00\";\n            }\n            len = dateStr.length(); // just in case we changed it\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n            return df.parse(dateStr, pos);\n        }\n\n        // Milliseconds partial or missing; and even seconds are optional\n        len = dateStr.length(); // might have changed due to timezone adjustment\n        int dotIx = dateStr.lastIndexOf('.');\n        // No seconds? Add them (with 0 for milliseconds)\n        if (dateStr.lastIndexOf(':') == len-3) {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.append(\":00\");\n            dateStr = sb.toString();\n            dotIx += 3; // so it is at the new end\n            len += 3;\n        }\n        // milliseconds?\n        if (dotIx > 0) {\n            // Need to normalize to 3 millis digits, may have less or more\n            StringBuilder sb = new StringBuilder(dateStr);\n            int fractLen = len - dotIx - 1;\n            if (fractLen < 3) {\n                do {\n                    sb.append('0');\n                    ++fractLen;\n                } while (fractLen < 3);\n                dateStr = sb.toString();\n            } else if (fractLen > 3) {\n                // truncate, but also need to round up if >= 0.5 (0.5, 0.500, 0.5000)\n                int ix = dotIx + 3;\n                // ok to use int directly here since number is < 1000\n                int extra = Integer.parseInt(dateStr.substring(ix, ix + 1));\n                if (extra >= 5) { // round up\n                    // Let's back up a bit to see if there are non-zero digits\n                    while (--ix > dotIx) {\n                        int digit = dateStr.charAt(ix);\n                        if (digit != '0' && digit != '.') {\n                            // Only round up to \".000\"; otherwise retain fractional part\n                            if (digit == '9') { // roll over to the next left digit\n                                sb = new StringBuilder(dateStr);\n                                sb.setCharAt(ix, '0');\n                                // carry forward\n                                while (--ix > dotIx) {\n                                    digit = sb.charAt(ix);\n                                    if (digit != '.') {\n                                        sb.setCharAt(ix, (char) (digit+1));\n                                        break;\n                                    }\n                                }\n                                dateStr = sb.toString();\n                            } else {\n                                sb = new StringBuilder(dateStr);\n                                sb.setCharAt(ix, (char) (digit+1));\n                                dateStr = sb.toString();\n                            }\n                            break;\n                        }\n                    }\n                }\n                dateStr = dateStr.substring(0, dotIx+3);\n            }\n        }\n        df = _formatISO8601;\n        if (_formatISO8601 == null) {\n            df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}