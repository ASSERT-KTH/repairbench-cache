{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        if (dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        } else if (dateStr.charAt(len - 5) == '.') {\n            // partial milliseconds before 'Z'\n            int fracLen = len - 1 - (len - 5);\n            StringBuilder sb = new StringBuilder(dateStr);\n            if (fracLen == 1) {\n                sb.insert(len - 1, \"00\"); // '.x' -> '.x00'\n            } else if (fracLen == 2) {\n                sb.insert(len - 1, \"0\"); // '.xx' -> '.xx0'\n            }\n            dateStr = sb.toString();\n        }\n    } else {\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len - 3);\n            if (c == ':') {\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len - 3, len - 2);\n                dateStr = sb.toString();\n            } else if (c == '+' || c == '-') {\n                dateStr += \"00\";\n            }\n            len = dateStr.length();\n\n            int tzOffsetStart = len - 5;\n            int fracEnd = tzOffsetStart;\n            int fracStart = -1;\n\n            // scan backwards to find '.' for fractional seconds, if any\n            for (int i = tzOffsetStart - 1; i >= 0; --i) {\n                char ch = dateStr.charAt(i);\n                if (ch == '.') {\n                    fracStart = i;\n                    break;\n                }\n                // stop if reach 'T' or any non-digit/non-dot char before milliseconds\n                if (!Character.isDigit(ch)) {\n                    break;\n                }\n            }\n\n            if (fracStart >= 0) {\n                int fracLen = fracEnd - fracStart - 1;\n                if (fracLen == 1) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(fracEnd, \"00\");\n                    dateStr = sb.toString();\n                } else if (fracLen == 2) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(fracEnd, \"0\");\n                    dateStr = sb.toString();\n                }\n            } else {\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(tzOffsetStart, \".000\");\n                dateStr = sb.toString();\n            }\n\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            StringBuilder sb = new StringBuilder(dateStr);\n            int timeLen = len - dateStr.lastIndexOf('T') -1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            } else if (dateStr.indexOf('.') >= 0) {\n                int dotIndex = dateStr.indexOf('.');\n                int fracLen = len - dotIndex -1;\n                if (fracLen == 1) {\n                    sb.append(\"00\");\n                } else if (fracLen == 2) {\n                    sb.append(\"0\");\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}