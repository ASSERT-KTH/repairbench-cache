{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    DateFormat df;\n\n    // 1. Handle \"plain\" dates (no time components)\n    if (len <= 10 && Character.isDigit(dateStr.charAt(len - 1))) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n        return df.parse(dateStr, pos);\n    }\n\n    // 2. Handle ISO8601 with trailing 'Z' (GMT)\n    char lastChar = dateStr.charAt(len - 1);\n    if (lastChar == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // Remove the trailing 'Z' to normalize the time part, then re-append it.\n        String withoutZ = dateStr.substring(0, len - 1);\n        int tIndex = withoutZ.indexOf('T');\n        if (tIndex >= 0) {\n            String datePart = withoutZ.substring(0, tIndex + 1);\n            String timePart = withoutZ.substring(tIndex + 1);\n            String[] parts = timePart.split(\":\");\n            String hour = parts[0];\n            String minute = parts.length > 1 ? parts[1] : \"00\";\n            String second = \"00\";\n            String frac = \"000\";\n            if (parts.length > 2) {\n                String secPart = parts[2];\n                int dotIndex = secPart.indexOf('.');\n                if (dotIndex >= 0) {\n                    second = secPart.substring(0, dotIndex);\n                    frac = secPart.substring(dotIndex + 1);\n                    if (frac.length() < 3) {\n                        frac = (frac + \"000\").substring(0, 3);\n                    } else if (frac.length() > 3) {\n                        frac = frac.substring(0, 3);\n                    }\n                } else {\n                    second = secPart;\n                }\n                if (second.length() == 0) {\n                    second = \"00\";\n                }\n            }\n            else { // no seconds provided; default to 00.000\n                second = \"00\";\n                frac = \"000\";\n            }\n            String normalizedTime = hour + \":\" + minute + \":\" + second + \".\" + frac;\n            dateStr = datePart + normalizedTime + \"Z\";\n        }\n        return df.parse(dateStr, pos);\n    }\n\n    // 3. Handle ISO8601 with explicit timezone (like \"+01:00\" or \"-05:00\")\n    if (hasTimeZone(dateStr)) {\n        // Remove the colon in the timezone part if present.\n        int sz = dateStr.length();\n        if (dateStr.charAt(sz - 3) == ':') {\n            dateStr = dateStr.substring(0, sz - 3) + dateStr.substring(sz - 2);\n            sz = dateStr.length();\n        }\n        else {\n            // In case minutes are omitted (e.g.: \"+01\"), append \"00\".\n            int plusIdx = dateStr.lastIndexOf('+');\n            int minusIdx = dateStr.lastIndexOf('-');\n            int idx = Math.max(plusIdx, minusIdx);\n            if (idx != -1 && dateStr.length() - idx == 3) {\n                dateStr += \"00\";\n                sz = dateStr.length();\n            }\n        }\n        // Separate the timezone (last 5 chars) from the rest.\n        String tz = dateStr.substring(sz - 5);\n        String core = dateStr.substring(0, sz - 5);\n        int tIndex = core.indexOf('T');\n        if (tIndex < 0) { // fallback \u2013 if no 'T', try plain format.\n            df = _formatPlain;\n            if (df == null) {\n                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n            }\n            return df.parse(dateStr, pos);\n        }\n        String datePart = core.substring(0, tIndex + 1);\n        String timePart = core.substring(tIndex + 1);\n        String[] parts = timePart.split(\":\");\n        String hour = parts[0];\n        String minute = parts.length > 1 ? parts[1] : \"00\";\n        String second = \"00\";\n        String frac = \"000\";\n        if (parts.length > 2) {\n            String secPart = parts[2];\n            int dotIndex = secPart.indexOf('.');\n            if (dotIndex >= 0) {\n                second = secPart.substring(0, dotIndex);\n                frac = secPart.substring(dotIndex + 1);\n                if (frac.length() < 3) {\n                    frac = (frac + \"000\").substring(0, 3);\n                } else if (frac.length() > 3) {\n                    frac = frac.substring(0, 3);\n                }\n            } else {\n                second = secPart;\n            }\n            if (second.length() == 0) {\n                second = \"00\";\n            }\n        }\n        else { // missing seconds; set to \"00.000\"\n            second = \"00\";\n            frac = \"000\";\n        }\n        String normalizedTime = hour + \":\" + minute + \":\" + second + \".\" + frac;\n        dateStr = datePart + normalizedTime + tz;\n        df = _formatISO8601;\n        if (df == null) {\n            df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n        }\n        return df.parse(dateStr, pos);\n    }\n\n    // 4. No timezone indicator \u2013 assume local/plain date, so append \".000Z\".\n    {\n        StringBuilder sb = new StringBuilder(dateStr);\n        int tPos = dateStr.indexOf('T');\n        int timeLen = tPos >= 0 ? dateStr.length() - tPos - 1 : 0;\n        if (timeLen <= 8) {\n            sb.append(\".000\");\n        }\n        sb.append('Z');\n        dateStr = sb.toString();\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        return df.parse(dateStr, pos);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}