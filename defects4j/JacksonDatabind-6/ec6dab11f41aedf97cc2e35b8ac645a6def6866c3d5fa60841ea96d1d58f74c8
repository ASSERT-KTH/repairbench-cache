{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        if (hasTimeZone(dateStr)) {\n            // Normalize timezone: remove optional colon in timezone offset or append missing minutes.\n            len = dateStr.length();\n            c = dateStr.charAt(len - 3);\n            if (c == ':') { // e.g. \"-05:00\" -> \"-0500\"\n                dateStr = dateStr.substring(0, len - 3) + dateStr.substring(len - 2);\n            } else if (c == '+' || c == '-') { // timezone missing minutes, e.g. \"+01\" -> \"+0100\"\n                dateStr += \"00\";\n            }\n            // Now, the last 5 characters are the timezone offset in \u00b1HHMM form.\n            int tzIndex = dateStr.length() - 5;\n            int dotIndex = dateStr.lastIndexOf('.', tzIndex);\n            if (dotIndex < 0) {\n                // No fractional seconds; insert \".000\" just before the timezone offset.\n                dateStr = dateStr.substring(0, tzIndex) + \".000\" + dateStr.substring(tzIndex);\n            } else {\n                // There is a fractional second part; pad it if it has less than 3 digits.\n                int fractionLen = tzIndex - dotIndex - 1;\n                if (fractionLen == 0) {\n                    dateStr = dateStr.substring(0, tzIndex) + \"000\" + dateStr.substring(tzIndex);\n                } else if (fractionLen == 1) {\n                    dateStr = dateStr.substring(0, tzIndex) + \"00\" + dateStr.substring(tzIndex);\n                } else if (fractionLen == 2) {\n                    dateStr = dateStr.substring(0, tzIndex) + \"0\" + dateStr.substring(tzIndex);\n                } else if (fractionLen > 3) {\n                    // In case there are more than three digits, truncate to three.\n                    dateStr = dateStr.substring(0, dotIndex + 1) + dateStr.substring(dotIndex + 1, dotIndex + 4)\n                            + dateStr.substring(tzIndex);\n                }\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // No timezone: treat it as a plain date but append missing fractional part and a 'Z'\n            StringBuilder sb = new StringBuilder(dateStr);\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}