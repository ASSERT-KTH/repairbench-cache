{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            int tzIndex = dateStr.length() - 6;\n            char tzSign = dateStr.charAt(tzIndex);\n            // Check for timezone in format \"+hh:mm\" or \"-hh:mm\"\n            if ((tzSign == '+' || tzSign == '-') && dateStr.charAt(dateStr.length() - 3) == ':') {\n                // Remove colon in timezone offset\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(dateStr.length() - 3, dateStr.length() - 2);\n                dateStr = sb.toString();\n            } else if ((tzSign == '+' || tzSign == '-') && (dateStr.length() - tzIndex) <= 3) {\n                // If timezone is like \"+hh\", append minutes\n                dateStr += \"00\";\n            }\n            // Ensure milliseconds, possibly partial\n            int timeStart = dateStr.indexOf('T');\n            int tzSignIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n            if (timeStart >= 0) {\n                int dotIdx = dateStr.indexOf('.', timeStart);\n                int secIdx = dateStr.indexOf(':', timeStart);\n                if (dotIdx >= 0 && (tzSignIndex < 0 || dotIdx < tzSignIndex)) {\n                    int msStart = dotIdx + 1;\n                    int msEnd = (tzSignIndex > 0) ? tzSignIndex : dateStr.length();\n                    int msLen = msEnd - msStart;\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    // Pad ms up to 3 digits\n                    if (msLen < 3) {\n                        for (int i = 0; i < 3 - msLen; ++i) {\n                            sb.insert(msEnd, \"0\");\n                        }\n                        dateStr = sb.toString();\n                    } else if (msLen > 3) {\n                        // Truncate ms if longer than 3\n                        sb.delete(msStart + 3, msEnd);\n                        dateStr = sb.toString();\n                    }\n                } else {\n                    // Add missing milliseconds: after seconds, before TZ\n                    // Find position after seconds\n                    int secondIdx = dateStr.indexOf(':', timeStart);\n                    if (secondIdx >= 0) {\n                        int nextColonIdx = dateStr.indexOf(':', secondIdx + 1);\n                        if (nextColonIdx >= 0) {\n                            int secEnd = nextColonIdx;\n                            // May also have no seconds, e.g. 'T12:34+00:00'\n                            secEnd = nextColonIdx + 3;\n                            // Actually, let's just search for the + or - (start of timezone)\n                            StringBuilder sb = new StringBuilder(dateStr);\n                            int tzIdx = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n                            // If have seconds but no dot, insert \".000\" after seconds\n                            if (tzIdx > 0) {\n                                sb.insert(tzIdx, \".000\");\n                            } else {\n                                sb.append(\".000\");\n                            }\n                            dateStr = sb.toString();\n                        } else {\n                            // Only hours and minutes, missing seconds\n                            StringBuilder sb = new StringBuilder(dateStr);\n                            int tzIdx = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n                            if (tzIdx > 0) {\n                                sb.insert(tzIdx, \":00.000\");\n                            } else {\n                                sb.append(\":00.000\");\n                            }\n                            dateStr = sb.toString();\n                        }\n                    } else {\n                        // Should not get here, but in case...\n                        if (!dateStr.contains(\":\")) {\n                            // No time component, just append \":00.000\"\n                            StringBuilder sb = new StringBuilder(dateStr);\n                            int tzIdx = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n                            if (tzIdx > 0) {\n                                sb.insert(tzIdx, \":00.000\");\n                            } else {\n                                sb.append(\":00.000\");\n                            }\n                            dateStr = sb.toString();\n                        }\n                    }\n                }\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date/time. Patch 'Z' at end? \n            StringBuilder sb = new StringBuilder(dateStr);\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8 && timeLen > 0) {\n                sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}