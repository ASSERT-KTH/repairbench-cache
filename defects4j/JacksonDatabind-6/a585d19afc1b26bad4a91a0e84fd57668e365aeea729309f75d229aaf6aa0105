{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n     * quite simple because we already set date format timezone to be\n     * GMT, and hence can just strip out 'Z' altogether\n     */\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        } else {\n            // Check for partial milliseconds (less than 3 digits)\n            int msecIdx = dateStr.indexOf('.');\n            if (msecIdx >= 0) {\n                int msecLen = len - 1 - msecIdx - 1; // -1 for 'Z', -1 for the decimal point\n                if (msecLen < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    // Pad with zeros\n                    for (int i = 0; i < 3 - msecLen; i++) {\n                        sb.insert(len - 1, '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            }\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            // Check for missing seconds or partial milliseconds\n            int tzIndex = dateStr.indexOf('-', 10);\n            if (tzIndex < 0) {\n                tzIndex = dateStr.indexOf('+', 10);\n            }\n            \n            if (tzIndex > 0) {\n                // Check for missing seconds (e.g., \"1997-07-16T19:20+01:00\")\n                int secIndex = dateStr.lastIndexOf(':', tzIndex);\n                if (secIndex > 0) {\n                    char secNextChar = dateStr.charAt(secIndex + 1);\n                    // No seconds part, insert \":00\"\n                    if (secNextChar == '+' || secNextChar == '-') {\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(secIndex + 1, \"00\");\n                        dateStr = sb.toString();\n                        len = dateStr.length();\n                    }\n                }\n                \n                // Check for partial milliseconds (e.g., \"2014-10-03T18:00:00.6-05:00\")\n                int msecIdx = dateStr.indexOf('.', 10);\n                if (msecIdx > 0) {\n                    int msecLen = tzIndex - msecIdx - 1;\n                    if (msecLen < 3) {\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        // Pad with zeros\n                        for (int i = 0; i < 3 - msecLen; i++) {\n                            sb.insert(tzIndex, '0');\n                        }\n                        dateStr = sb.toString();\n                        len = dateStr.length();\n                    }\n                }\n            }\n            \n            c = dateStr.charAt(len-3);\n            if (c == ':') { // remove optional colon\n                // remove colon\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len-3, len-2);\n                dateStr = sb.toString();\n            } else if (c == '+' || c == '-') { // missing minutes\n                // let's just append '00'\n                dateStr += \"00\";\n            }\n            \n            // Milliseconds missing completely\n            if (dateStr.indexOf('.') < 0) {\n                // Find the position before timezone indicator\n                int timeEndPos = len - 5; // -5 for timezone like \"-0500\"\n                if (timeEndPos > 0 && Character.isDigit(dateStr.charAt(timeEndPos - 1))) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(timeEndPos, \".000\");\n                    dateStr = sb.toString();\n                }\n            }\n            \n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                    sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}