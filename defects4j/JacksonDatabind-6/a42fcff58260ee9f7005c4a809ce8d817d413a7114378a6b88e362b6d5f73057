{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n     * quite simple because we already set date format timezone to be\n     * GMT, and hence can just strip out 'Z' altogether\n     */\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        } else {\n            // Also handle partial milliseconds\n            int dotIndex = dateStr.lastIndexOf('.');\n            if (dotIndex != -1) {\n                int millisLen = len - 1 - dotIndex - 1; // exclude 'Z'\n                if (millisLen < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    // Pad with zeros up to 3 digits\n                    for (int i = 0; i < (3 - millisLen); ++i) {\n                        sb.insert(len - 1, '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            }\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len - 3);\n            if (c == ':') { // remove optional colon\n                // remove colon\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len - 3, len - 2);\n                dateStr = sb.toString();\n            } else if (c == '+' || c == '-') { // missing minutes\n                // let's just append '00'\n                dateStr += \"00\";\n            }\n            // After timezone handling, recompute length\n            len = dateStr.length();\n            // pad missing seconds\n            int tIndex = dateStr.indexOf('T');\n            if (tIndex >= 0) {\n                int timeLen = len - tIndex - 1;\n                String timePart = dateStr.substring(tIndex + 1, len - 5); // exclude timezone offset\n                // Check if seconds are missing\n                int colonCount = 0;\n                for (int i = 0; i < timePart.length(); ++i) {\n                    if (timePart.charAt(i) == ':') {\n                        colonCount++;\n                    }\n                }\n                if (colonCount == 1) { // Missing seconds\n                    // Insert \":00\" before timezone offset\n                    int insertPos = len - 5;\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(insertPos, \":00\");\n                    dateStr = sb.toString();\n                    len = dateStr.length();\n                }\n            }\n            // Now handle milliseconds\n            int plusIndex = dateStr.lastIndexOf('+');\n            int minusIndex = dateStr.lastIndexOf('-');\n            int timezoneIndex = (plusIndex > minusIndex) ? plusIndex : minusIndex;\n            if (timezoneIndex == -1) {\n                timezoneIndex = len;\n            }\n            int dotIndex = dateStr.lastIndexOf('.', timezoneIndex);\n            if (dotIndex != -1) {\n                int millisEnd = timezoneIndex;\n                int millisLen = millisEnd - dotIndex -1;\n                if (millisLen < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int i = 0; i < (3 - millisLen); ++i) {\n                        sb.insert(dotIndex + 1 + millisLen, '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            } else {\n                // No milliseconds, so add \".000\" before timezone\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(timezoneIndex, \".000\");\n                dateStr = sb.toString();\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            } else {\n                int dotIndex = dateStr.lastIndexOf('.');\n                if (dotIndex != -1) {\n                    int millisLen = len - dotIndex - 1;\n                    if (millisLen < 3) {\n                        for (int i = 0; i < (3 - millisLen); ++i) {\n                            sb.append('0');\n                        }\n                    }\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}