{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // plain date only?\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // May be missing milliseconds? Add if necessary\n        if (dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        } else if (dateStr.charAt(len - 5) == '.') {\n            // Possibly partial milliseconds, pad to 3 digits\n            int milliStart = len - 5;\n            int milliEnd = len - 1; // before 'Z'\n            String millis = dateStr.substring(milliStart + 1, milliEnd);\n            if (millis.length() < 3) {\n                StringBuilder sb = new StringBuilder(dateStr);\n                for (int i = 0; i < 3 - millis.length(); i++) {\n                    sb.insert(len - 1, '0');\n                }\n                dateStr = sb.toString();\n            }\n        }\n    } else {\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len - 3);\n            if (c == ':') {\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len - 3, len - 2);\n                dateStr = sb.toString();\n                len = dateStr.length(); // update after change\n            } else if (c == '+' || c == '-') {\n                dateStr += \"00\";\n                len = dateStr.length();\n            }\n            // Now, check millisecond portion\n            // With timezone, offset is 5 chars long (e.g. -0500)\n            // So milliseconds end before that\n            char ch;\n            int tzOffsetIndex = len - 5;\n            // We need to find if there's ms, partial ms, or missing ms\n            int secEndIndex = tzOffsetIndex - 1; // before timezone sign\n            ch = dateStr.charAt(secEndIndex);\n            if (ch != '.') {\n                // missing milliseconds, insert \".000\" before offset\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(tzOffsetIndex, \".000\");\n                dateStr = sb.toString();\n            } else {\n                // partial milliseconds? pad to 3 digits\n                int milliStart = secEndIndex;\n                int milliEnd = tzOffsetIndex;\n                String millis = dateStr.substring(milliStart + 1, milliEnd);\n                if (millis.length() < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int i = 0; i < 3 - millis.length(); i++) {\n                        sb.insert(tzOffsetIndex, '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else { // no timezone, treat as 'Z'\n            StringBuilder sb = new StringBuilder(dateStr);\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) { // lacking millis\n                sb.append(\".000\");\n            } else {\n                int milliStart = dateStr.indexOf('.');\n                if (milliStart >= 0) {\n                    int milliDigits = len - milliStart - 1;\n                    if (milliDigits < 3) {\n                        for (int i = 0; i < 3 - milliDigits; i++) {\n                            sb.append('0');\n                        }\n                    }\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z,\n                        DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}