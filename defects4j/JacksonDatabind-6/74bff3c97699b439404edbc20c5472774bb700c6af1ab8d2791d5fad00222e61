{
    "generation": "@Override\nprotected Date parseAsISO8601(String dateStr, ParsePosition pos) {\n    int len = dateStr.length();\n    char last = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // 1) Plain date, no time part: \"yyyy-MM-dd\"\n    if (len <= 10 && Character.isDigit(last)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(\n                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,\n                _timezone, _locale\n            );\n        }\n        return df.parse(dateStr, pos);\n    }\n\n    // 2) Zulu (\"Z\") timezone\n    if (last == 'Z') {\n        String s = dateStr;\n        int dot = s.indexOf('.');\n        if (dot < 0) {\n            // no fractional seconds: insert \".000\" before 'Z'\n            s = s.substring(0, len - 1) + \".000Z\";\n        } else {\n            // pad or truncate fractional part to exactly 3 digits\n            String dateTime = s.substring(0, dot);\n            String frac     = s.substring(dot + 1, len - 1); // exclude 'Z'\n            StringBuilder sb = new StringBuilder(dateTime).append('.');\n            if (frac.length() == 3) {\n                sb.append(frac);\n            } else if (frac.length() < 3) {\n                sb.append(frac);\n                for (int i = frac.length(); i < 3; ++i) {\n                    sb.append('0');\n                }\n            } else {\n                sb.append(frac, 0, 3);\n            }\n            sb.append('Z');\n            s = sb.toString();\n        }\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(\n                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                _timezone, _locale\n            );\n        }\n        return df.parse(s, pos);\n    }\n\n    // 3) Timezone offset \"+HH:MM\" or \"-HH:MM\" etc.\n    if (hasTimeZone(dateStr)) {\n        String s = dateStr;\n        // find start of offset (first '+' or '-' after the 'T')\n        int t = s.indexOf('T');\n        int off = s.lastIndexOf('+');\n        int m   = s.lastIndexOf('-');\n        if (m > off && m > t) {\n            off = m;\n        }\n        String tz = s.substring(off);\n        // remove optional colon in offset: \"+HH:MM\" -> \"+HHMM\"\n        if (tz.length() > 5 && tz.charAt(3) == ':') {\n            tz = tz.substring(0, 3) + tz.substring(4);\n        } else if (tz.length() == 3) {\n            // offset like \"+H\" or \"-H\": append minutes \"00\"\n            tz = tz + \"00\";\n        }\n\n        // pad the time\u2010of\u2010day portion to \"HH:mm:ss.SSS\"\n        String base = s.substring(0, off);\n        int    tpos = base.indexOf('T');\n        String datePart = base.substring(0, tpos);\n        String timePart = base.substring(tpos + 1);\n\n        // split off seconds vs. fractional\n        String secsPart;\n        String fracPart = null;\n        int    dotPos   = timePart.indexOf('.');\n        if (dotPos >= 0) {\n            secsPart = timePart.substring(0, dotPos);\n            fracPart = timePart.substring(dotPos + 1);\n        } else {\n            secsPart = timePart;\n        }\n\n        // split HH:mm[:ss]\n        String[] parts = secsPart.split(\":\");\n        String hh = parts.length > 0 ? parts[0] : \"00\";\n        String mm = parts.length > 1 ? parts[1] : \"00\";\n        String ss = parts.length > 2 ? parts[2] : \"00\";\n\n        // build exactly 3\u2010digit millisecond\n        String msec;\n        if (fracPart == null) {\n            msec = \"000\";\n        } else if (fracPart.length() == 3) {\n            msec = fracPart;\n        } else if (fracPart.length() < 3) {\n            StringBuilder msb = new StringBuilder(fracPart);\n            while (msb.length() < 3) {\n                msb.append('0');\n            }\n            msec = msb.toString();\n        } else {\n            msec = fracPart.substring(0, 3);\n        }\n\n        // reassemble\n        base = datePart + \"T\" + hh + \":\" + mm + \":\" + ss + \".\" + msec;\n        s    = base + tz;\n\n        df = _formatISO8601;\n        if (df == null) {\n            df = _formatISO8601 = _cloneFormat(\n                DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                _timezone, _locale\n            );\n        }\n        return df.parse(s, pos);\n    }\n\n    // 4) No timezone at all: treat as Z\n    {\n        String s = dateStr;\n        int    tpos = s.indexOf('T');\n        if (tpos >= 0) {\n            String datePart = s.substring(0, tpos);\n            String timePart = s.substring(tpos + 1);\n\n            String secsPart;\n            String fracPart = null;\n            int    dotPos   = timePart.indexOf('.');\n            if (dotPos >= 0) {\n                secsPart = timePart.substring(0, dotPos);\n                fracPart = timePart.substring(dotPos + 1);\n            } else {\n                secsPart = timePart;\n            }\n\n            String[] parts = secsPart.split(\":\");\n            String hh = parts.length > 0 ? parts[0] : \"00\";\n            String mm = parts.length > 1 ? parts[1] : \"00\";\n            String ss = parts.length > 2 ? parts[2] : \"00\";\n\n            String msec;\n            if (fracPart == null) {\n                msec = \"000\";\n            } else if (fracPart.length() == 3) {\n                msec = fracPart;\n            } else if (fracPart.length() < 3) {\n                StringBuilder msb = new StringBuilder(fracPart);\n                while (msb.length() < 3) {\n                    msb.append('0');\n                }\n                msec = msb.toString();\n            } else {\n                msec = fracPart.substring(0, 3);\n            }\n\n            s = datePart + \"T\" + hh + \":\" + mm + \":\" + ss + \".\" + msec + \"Z\";\n        } else {\n            // no 'T', just a date\u2014append midnight\n            s = s + \"T00:00:00.000Z\";\n        }\n\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(\n                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                _timezone, _locale\n            );\n        }\n        return df.parse(s, pos);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}