{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            // Find index of timezone\n            int tzIndex = len - 6;\n            char sign = dateStr.charAt(tzIndex);\n            boolean hasColon = (dateStr.charAt(len-3) == ':');\n            String preTZ = dateStr.substring(0, tzIndex);\n            String tzPart;\n            if (hasColon) {\n                tzPart = dateStr.substring(tzIndex, len-3) + dateStr.substring(len-2);\n            } else {\n                tzPart = dateStr.substring(tzIndex);\n            }\n\n            // Split main date/time\n            int dotIdx = preTZ.lastIndexOf('.');\n            int tIdx = preTZ.lastIndexOf('T');\n            int secIdx = preTZ.lastIndexOf(':');\n\n            boolean hasMillis = (dotIdx > tIdx);\n            boolean hasSec = (secIdx > tIdx);\n            StringBuilder sb = new StringBuilder();\n            if (!hasSec) {\n                // Time is missing seconds; add \":00\"\n                sb.append(preTZ);\n                sb.append(\":00\");\n            } else {\n                sb.append(preTZ);\n            }\n            if (!hasMillis) {\n                // No milliseconds -- add default \".000\"\n                sb.append(\".000\");\n            } else {\n                // Handle partial milliseconds: pad to full 3 digits\n                int milliLen = preTZ.length() - dotIdx - 1;\n                if (milliLen < 3) {\n                    for (int i = 0; i < 3 - milliLen; ++i) {\n                        sb.append('0');\n                    }\n                }\n            }\n            sb.append(tzPart);\n            dateStr = sb.toString();\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}