{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n     * quite simple because we already set date format timezone to be\n     * GMT, and hence can just strip out 'Z' altogether\n     */\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            // Handle missing seconds - look for time zone marker after minutes\n            int tzsignIdx = dateStr.indexOf('-', 16); // default to not found\n            if (tzsignIdx < 0) { // try with '+' if not found\n                tzsignIdx = dateStr.indexOf('+', 16);\n            }\n            if (tzsignIdx >= 0) {\n                // Check if we're missing seconds\n                char secChar = dateStr.charAt(tzsignIdx-3);\n                if (secChar == ':' || Character.isDigit(secChar)) {\n                    // No problem, seconds exist\n                } else {\n                    // Missing seconds, insert \":00\"\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(tzsignIdx, \":00\");\n                    dateStr = sb.toString();\n                    // Update length after modification\n                    len = dateStr.length();\n                }\n            }\n            \n            // Now check for timezone formatting issues\n            c = dateStr.charAt(len-3);\n            if (c == ':') { // remove optional colon\n                // remove colon\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len-3, len-2);\n                dateStr = sb.toString();\n                len--; // update length after delete\n            } else if (c == '+' || c == '-') { // missing minutes\n                // let's just append '00'\n                dateStr += \"00\";\n                len += 2; // update length after append\n            }\n            \n            // Check for partial milliseconds (like .6 or .61 instead of .600 or .610)\n            int millisStart = dateStr.indexOf('.');\n            if (millisStart > 0) {\n                int tzIndex = Math.max(dateStr.indexOf('+', millisStart), dateStr.indexOf('-', millisStart));\n                if (tzIndex > 0) {\n                    int millisLen = tzIndex - millisStart - 1;\n                    if (millisLen > 0 && millisLen < 3) {\n                        // We have partial milliseconds, need to pad\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        while (millisLen < 3) {\n                            sb.insert(tzIndex, \"0\");\n                            millisLen++;\n                            tzIndex++;\n                        }\n                        dateStr = sb.toString();\n                        len = dateStr.length(); // update length\n                    }\n                }\n            } else {\n                // No milliseconds at all, do we need to add?\n                int timeIndex = dateStr.indexOf('T');\n                if (timeIndex > 0) {\n                    int tzIndex = Math.max(dateStr.indexOf('+', timeIndex), dateStr.indexOf('-', timeIndex));\n                    if (tzIndex > 0) {\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        // Count characters between T and timezone to determine if we're missing milliseconds\n                        if (dateStr.charAt(tzIndex-1) == '0' && dateStr.charAt(tzIndex-2) == '0' && dateStr.charAt(tzIndex-3) == ':') {\n                            sb.insert(tzIndex, \".000\");\n                            dateStr = sb.toString();\n                            len = dateStr.length(); // update length\n                        }\n                    }\n                }\n            }\n            \n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}