{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos) {\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        if (hasTimeZone(dateStr)) {\n            // First, fix up the timezone offset:\n            len = dateStr.length();\n            char tzIndicator = dateStr.charAt(len - 3);\n            if (tzIndicator == ':') { // Remove the colon in the timezone (e.g. \"+01:00\" -> \"+0100\")\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len - 3, len - 2);\n                dateStr = sb.toString();\n            } else if (tzIndicator == '+' || tzIndicator == '-') { \n                // If minutes are missing (e.g. \"+01\"), append \"00\" to make it proper (e.g. \"+0100\")\n                dateStr += \"00\";\n            }\n\n            // Now, normalize the time part to conform to \"HH:mm:ss.SSS\"\n            // We know that the timezone offset is in the last 5 characters (\u00b1HHMM).\n            int tIndex = dateStr.indexOf('T');\n            int tzIndex = dateStr.length() - 5;\n            String timePart = dateStr.substring(tIndex + 1, tzIndex);\n\n            // Count colons to detect if seconds are present.\n            int colonCount = 0;\n            for (int i = 0; i < timePart.length(); i++) {\n                if (timePart.charAt(i) == ':') {\n                    colonCount++;\n                }\n            }\n            String newTimePart = timePart;\n            if (colonCount == 1) {\n                // Time is of the form HH:mm; seconds are missing.\n                newTimePart = timePart + \":00.000\";\n            } else { // Assume timePart is HH:mm:ss or HH:mm:ss.xxx\n                int dotIndex = timePart.indexOf('.');\n                if (dotIndex < 0) {\n                    // No fraction, so append default milliseconds.\n                    newTimePart = timePart + \".000\";\n                } else {\n                    // Normalize fractional seconds to exactly three digits.\n                    String fraction = timePart.substring(dotIndex + 1);\n                    if (fraction.length() < 3) {\n                        while (fraction.length() < 3) {\n                            fraction = fraction + \"0\";\n                        }\n                    } else if (fraction.length() > 3) {\n                        fraction = fraction.substring(0, 3);\n                    }\n                    newTimePart = timePart.substring(0, dotIndex + 1) + fraction;\n                }\n            }\n            dateStr = dateStr.substring(0, tIndex + 1) + newTimePart + dateStr.substring(tzIndex);\n\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // No timezone indicator; assume plain date with time.\n            StringBuilder sb = new StringBuilder(dateStr);\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}