{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n     * quite simple because we already set date format timezone to be\n     * GMT, and hence can just strip out 'Z' altogether\n     */\n    int len = dateStr.length();\n    if (len == 0) {\n        return null;\n    }\n    char c = dateStr.charAt(len-1);\n    DateFormat df = null;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        int colonPos = dateStr.lastIndexOf(':');\n        int tPos = dateStr.lastIndexOf('T');\n        if (colonPos > tPos && colonPos == len-5) {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            // Handle timezone offset cases\n            int colonPos = dateStr.lastIndexOf(':');\n            int tPos = dateStr.lastIndexOf('T');\n\n            // Handle timezone formats like \"+01:00\" or \"-05:00\"\n            if (colonPos > tPos && colonPos == len-3) { // case where we have timezone like +01:00\n                // Check if seconds are missing (format like \"HH:mm+zz:zz\")\n                if (dateStr.length() == len) { // this condition was not needed, but we'll keep it\n                    String timePart = dateStr.substring(tPos+1, len-6);\n                    String[] timeParts = timePart.split(\":\");\n                    if (timeParts.length == 2) { // only hours:minutes\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(len-6, \":00\");\n                        dateStr = sb.toString();\n                    }\n                }\n            } else if (len >= 3 && (dateStr.charAt(len-3) == '+' || dateStr.charAt(len-3) == '-')) {\n                // Handle case like \"+0100\" by inserting colon\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(len-2, \":\");\n                dateStr = sb.toString();\n            }\n\n            // Handle milliseconds - look for fractional seconds\n            boolean hasMilliseconds = false;\n            int dotPos = dateStr.lastIndexOf('.');\n            if (dotPos > tPos) {\n                // Pad milliseconds to 3 digits if needed\n                int millisecondsLen = len - dotPos - 1;\n                if (millisecondsLen > 3) {\n                    millisecondLen = 3; // if more than 3 digits, we'll just take first 3\n                } else if (millisecondsLen < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    while (millisecondsLen < 3) {\n                        sb.insert(len, \"0\");\n                        millisecondsLen++;\n                    }\n                    dateStr = sb.toString();\n                }\n            } else {\n                // If no milliseconds, see if we should add .000\n                // Find the seconds position (if any)\n                int lastColon = dateStr.lastIndexOf(':');\n                if (lastColon > tPos) {\n                    String timePart = dateStr.substring(tPos+1);\n                    if (timePart.length() <= 5) { // HH:mm\n                        // Add seconds and milliseconds\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(lastColon+1, \":00.000\");\n                        dateStr = sb.toString();\n                    } else if (timePart.length() <= 8) { // HH:mm:ss\n                        // Add milliseconds\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(len-(len-lastColon-1-6), \".000\"); // -6 accounts for timezone part\n                        dateStr = sb.toString();\n                    }\n                }\n            }\n\n            // Handle regular ISO8601 with timezone\n            df = _formatISO8601;\n            if (df == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int tPos = dateStr.lastIndexOf('T');\n            if (tPos >= 0) {\n                int timeLen = len - tPos - 1;\n                if (timeLen <= 2) { // just hour\n                    sb.append(\":00:00.000\");\n                } else if (timeLen <= 5) { // hour:minute\n                    sb.append(\":00.000\");\n                } else if (timeLen <= 8) { // hour:minute:second\n                    sb.append(\".000\");\n                }\n            } else {\n                // no time part at all, add default time\n                sb.append(\"T00:00:00.000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n\n    // If we still don't have a date format, use plain format as fallback\n    if (df == null) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    }\n\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}