{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        } else {\n            // Check for partial milliseconds, e.g. \".6\" or \".61\"\n            int milliStart = dateStr.lastIndexOf('.');\n            if (milliStart > 0 && milliStart < len - 1) {\n                int milliDigits = len - 1 - milliStart - 1; // exclude trailing Z\n                if (milliDigits == 1) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(len - 1, \"00\");\n                    dateStr = sb.toString();\n                } else if (milliDigits == 2) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(len - 1, \"0\");\n                    dateStr = sb.toString();\n                }\n            }\n        }\n    } else {\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len - 3);\n            if (c == ':') { // remove optional colon\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len - 3, len - 2);\n                dateStr = sb.toString();\n                len = dateStr.length();\n            } else if (c == '+' || c == '-') { // missing minutes\n                dateStr += \"00\";\n                len = dateStr.length();\n            }\n            // May have partial milliseconds we need to pad\n            int milliStart = dateStr.lastIndexOf('.');\n            int tzOffset = dateStr.length() - (dateStr.charAt(dateStr.length() - 5) == '+' || dateStr.charAt(dateStr.length() - 5) == '-' ? 5 : 0);\n            if (milliStart > 0 && milliStart < tzOffset) {\n                int milliDigits = tzOffset - milliStart -1;\n                if (milliDigits == 1) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(milliStart + 2, \"00\");\n                    dateStr = sb.toString();\n                } else if (milliDigits == 2) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(milliStart + 3, \"0\");\n                    dateStr = sb.toString();\n                }\n                len = dateStr.length();\n            } else {\n                // Check if milliseconds missing entirely and seconds missing\n                int timePartStart = dateStr.indexOf('T');\n                if (timePartStart >= 0) {\n                    int plusPos = dateStr.length() - 5;\n                    int timePartLen = plusPos - timePartStart - 1;\n                    int colonCount = 0;\n                    for (int i = timePartStart +1; i < plusPos; ++i) {\n                        if (dateStr.charAt(i) == ':') {\n                            colonCount++;\n                        }\n                    }\n                    if (colonCount ==1) { // hours and minutes only, no seconds\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(plusPos, \":00.000\");\n                        dateStr = sb.toString();\n                        len = dateStr.length();\n                    } else if (colonCount ==2) { // has seconds, but missing milliseconds\n                        if (dateStr.charAt(plusPos -1) != '.' && dateStr.charAt(plusPos -2) != '.') {\n                            StringBuilder sb = new StringBuilder(dateStr);\n                            sb.insert(plusPos, \".000\");\n                            dateStr = sb.toString();\n                            len = dateStr.length();\n                        }\n                    }\n                }\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date, patch 'Z' and possibly milliseconds\n            StringBuilder sb = new StringBuilder(dateStr);\n            int timePos = dateStr.lastIndexOf('T');\n            if (timePos > -1) {\n                int afterT_len = len - timePos -1;\n                int colonCount = 0;\n                for (int i = timePos +1; i < len; ++i) {\n                    if (dateStr.charAt(i) == ':') {\n                        colonCount++;\n                    }\n                }\n                int milliStart = dateStr.lastIndexOf('.');\n                if (colonCount == 1) { // hours and minutes only\n                    sb.append(\":00.000Z\");\n                } else if (colonCount == 2) { // hours, minutes, seconds\n                    if (milliStart < 0 || milliStart < timePos) {\n                        sb.append(\".000Z\");\n                    } else {\n                        int milliDigits = len - milliStart -1;\n                        if (milliDigits == 1) {\n                            sb.append(\"00Z\");\n                        } else if (milliDigits == 2) {\n                            sb.append(\"0Z\");\n                        } else {\n                            sb.append('Z');\n                        }\n                    }\n                } else {\n                    sb.append('Z');\n                }\n            } else {\n                sb.append('Z');\n            }\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}