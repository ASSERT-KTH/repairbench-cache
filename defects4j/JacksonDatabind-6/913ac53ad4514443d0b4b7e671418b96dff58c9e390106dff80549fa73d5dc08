{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.length() > 4 && dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        }\n        // handle partial milliseconds: .S or .SS\n        dateStr = padMilliseconds(dateStr);\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len-3);\n            if (c == ':') { // remove optional colon\n                // remove colon\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len-3, len-2);\n                dateStr = sb.toString();\n            } else if (c == '+' || c == '-') { // missing minutes\n                // let's just append '00'\n                dateStr += \"00\";\n            }\n            // Milliseconds partial or missing; and even seconds are optional\n            len = dateStr.length();\n            // find if missing seconds part (i.e. ...T19:20+01:00) and pad :00 if so\n            int tzIndex = len - 5;\n            int sepT = dateStr.indexOf('T');\n            if (sepT > 0 && dateStr.charAt(sepT+3) == ':' && // Txx:yy...\n                (dateStr.charAt(sepT+6) == '+' || dateStr.charAt(sepT+6) == '-')) {\n                // only minutes provided, pad missing seconds as :00\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(sepT+6, \":00\");\n                dateStr = sb.toString();\n                len = dateStr.length();\n            }\n            // handle partial milliseconds: .S or .SS\n            dateStr = padMilliseconds(dateStr);\n\n            // If no milliseconds or partial, pad zeros as necessary\n            // (now covered by padMilliseconds)\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possibly also millisecond part if missing\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen > 0 && timeLen <= 8) {\n                int dotIdx = dateStr.indexOf('.', dateStr.lastIndexOf('T'));\n                if (dotIdx < 0) {\n                    sb.append(\".000\");\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            dateStr = padMilliseconds(dateStr);\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}\n\n/**\n * Pads milliseconds in ISO8601 string if present (.1, .12 -> .100, .120).\n * Only applies to the last period of the date string (fractional sec).\n */\nprivate String padMilliseconds(String dateStr) {\n    int tIndex = dateStr.lastIndexOf('T');\n    int dotIndex = dateStr.indexOf('.', tIndex > 0 ? tIndex : 0);\n    if (dotIndex >= 0) {\n        // Find end of number\n        int i = dotIndex + 1;\n        int length = dateStr.length();\n        while (i < length) {\n            char ch = dateStr.charAt(i);\n            if (ch < '0' || ch > '9') break;\n            i++;\n        }\n        int msDigits = i - (dotIndex + 1);\n        if (msDigits == 1) {\n            // .1 => .100\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(dotIndex + 2, \"00\");\n            return sb.toString();\n        } else if (msDigits == 2) {\n            // .12 => .120\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(dotIndex + 3, \"0\");\n            return sb.toString();\n        }\n    }\n    return dateStr;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}