{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        } else if (dateStr.charAt(len-5) == 'T') {\n            // missing milliseconds and seconds\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \":00.000\");\n            dateStr = sb.toString();\n        } else if (dateStr.charAt(len-8) == 'T') {\n            // missing milliseconds\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            int tzIndex = dateStr.lastIndexOf('+');\n            if (tzIndex < 0) {\n                tzIndex = dateStr.lastIndexOf('-');\n            }\n            // If timezone indicator exists, process\n            if (tzIndex >= 0) {\n                // Look for colon in timezone offset\n                if (tzIndex + 3 < dateStr.length() && dateStr.charAt(tzIndex + 3) == ':') {\n                    // Remove the colon\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.deleteCharAt(tzIndex + 3);\n                    dateStr = sb.toString();\n                    len = dateStr.length();\n                } else if (tzIndex + 3 == dateStr.length()) {\n                    // e.g.: 1997-07-16T19:20+01\n                    // Append \"00\"\n                    dateStr += \"00\";\n                    len = dateStr.length();\n                }\n                // Now, handle missing seconds and/or milliseconds\n                int timeStart = dateStr.indexOf('T');\n                int timeEnd = tzIndex;\n                String timePart = timeStart >= 0 ? dateStr.substring(timeStart + 1, timeEnd) : \"\";\n                // Expected: HH:mm[:ss][.SSS]\n                if (timePart.length() > 0) {\n                    String[] parts = timePart.split(\":\");\n                    if (parts.length == 2) {\n                        // missing seconds and milliseconds\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(tzIndex, \":00.000\");\n                        dateStr = sb.toString();\n                        len = dateStr.length();\n                    } else if (parts.length == 3) {\n                        // check for missing milliseconds or partial milliseconds\n                        int secDot = parts[2].indexOf('.');\n                        if (secDot < 0) {\n                            // no millis\n                            StringBuilder sb = new StringBuilder(dateStr);\n                            sb.insert(tzIndex, \".000\");\n                            dateStr = sb.toString();\n                            len = dateStr.length();\n                        } else {\n                            // has millis, but possibly not 3 digits\n                            int millisStart = timeStart + 1 + parts[0].length() + 1 + parts[1].length() + 1 + secDot + 2;\n                            int millisDigits = parts[2].length() - secDot - 1;\n                            if (millisDigits < 3) {\n                                StringBuilder sb = new StringBuilder(dateStr);\n                                for (int i = 0; i < 3 - millisDigits; ++i) {\n                                    sb.insert(tzIndex, \"0\");\n                                }\n                                dateStr = sb.toString();\n                                len = dateStr.length();\n                            } else if (millisDigits > 3) {\n                                // trim to 3 digits\n                                int extra = millisDigits - 3;\n                                StringBuilder sb = new StringBuilder(dateStr);\n                                sb.delete(millisStart + 3, millisStart + 3 + extra);\n                                dateStr = sb.toString();\n                                len = dateStr.length();\n                            }\n                        }\n                    }\n                }\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8 && dateStr.indexOf('.') < 0) {\n                sb.append(\".000\");\n            } else if (timeLen > 9) {\n                // could be missing fractional ms digits\n                int msStart = dateStr.indexOf('.');\n                if (msStart > 0) {\n                    int msDigits = len - msStart - 1;\n                    if (msDigits < 3) {\n                        for (int i = 0; i < 3 - msDigits; ++i) {\n                            sb.append('0');\n                        }\n                    } else if (msDigits > 3) {\n                        // trim extra ms digits\n                        sb.setLength(msStart + 4);\n                    }\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}