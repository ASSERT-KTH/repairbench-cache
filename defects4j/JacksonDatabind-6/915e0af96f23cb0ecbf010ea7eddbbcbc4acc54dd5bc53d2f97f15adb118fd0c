{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos) {\n    int len = dateStr.length();\n    char last = dateStr.charAt(len - 1);\n    // simple plain-date?\n    if (len <= 10 && Character.isDigit(last)) {\n        DateFormat df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(\n                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n        return df.parse(dateStr, pos);\n    }\n    // must have a 'T' for time\n    int tPos = dateStr.indexOf('T');\n    if (tPos < 0) {\n        // fallback to plain date if no time separator\n        DateFormat df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(\n                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n        return df.parse(dateStr, pos);\n    }\n    // split off date/time and zone\n    String datePart = dateStr.substring(0, tPos + 1);\n    String timePart;\n    String tzPart;\n    boolean useZulu = false;\n    if (last == 'Z') {\n        // explicit 'Z' \u2192 UTC\n        useZulu = true;\n        timePart = dateStr.substring(tPos + 1, len - 1);\n        tzPart = \"Z\";\n    } else {\n        // look for + or - after the 'T'\n        int plus = dateStr.lastIndexOf('+');\n        int minus = dateStr.lastIndexOf('-');\n        int signPos = (plus > tPos ? plus : -1);\n        if (minus > tPos && minus > signPos) {\n            signPos = minus;\n        }\n        if (signPos > tPos) {\n            timePart = dateStr.substring(tPos + 1, signPos);\n            String rawTz = dateStr.substring(signPos);\n            // normalize \"+HH\", \"+HH:MM\", or \"+HHMM\" into \"+HHMM\"\n            if (rawTz.length() == 3) { // \"+HH\"\n                tzPart = rawTz + \"00\";\n            } else if (rawTz.length() == 6 && rawTz.charAt(3) == ':') { // \"+HH:MM\"\n                tzPart = rawTz.substring(0, 3) + rawTz.substring(4);\n            } else {\n                tzPart = rawTz;\n            }\n        } else {\n            // no zone info: treat as UTC\n            useZulu = true;\n            timePart = dateStr.substring(tPos + 1);\n            tzPart = \"Z\";\n        }\n    }\n    // normalize time-part to \"HH:mm:ss.SSS\"\n    String canonicalTime;\n    int dot = timePart.indexOf('.');\n    if (dot >= 0) {\n        // has a fractional part\n        String secs = timePart.substring(0, dot);\n        String frac = timePart.substring(dot + 1);\n        // pad or truncate to exactly 3 digits\n        if (frac.length() >= 3) {\n            frac = frac.substring(0, 3);\n        } else if (frac.length() == 2) {\n            frac = frac + '0';\n        } else if (frac.length() == 1) {\n            frac = frac + \"00\";\n        } else {\n            frac = \"000\";\n        }\n        // if only \"HH:mm\" (one colon), add missing seconds\n        if (secs.indexOf(':') == secs.lastIndexOf(':')) {\n            secs = secs + \":00\";\n        }\n        canonicalTime = secs + \".\" + frac;\n    } else {\n        // no fractional part\n        int colonCount = 0;\n        for (int i = 0, n = timePart.length(); i < n; i++) {\n            if (timePart.charAt(i) == ':') {\n                colonCount++;\n            }\n        }\n        if (colonCount == 1) {\n            // \"HH:mm\" \u2192 add \":00.000\"\n            canonicalTime = timePart + \":00.000\";\n        } else {\n            // \"HH:mm:ss\" \u2192 add \".000\"\n            canonicalTime = timePart + \".000\";\n        }\n    }\n    // rebuild the full ISO string\n    StringBuilder sb = new StringBuilder(\n        datePart.length() + canonicalTime.length() + tzPart.length());\n    sb.append(datePart).append(canonicalTime).append(tzPart);\n    dateStr = sb.toString();\n    // pick the correct DateFormat\n    DateFormat df;\n    if (useZulu) {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(\n                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                _timezone, _locale);\n        }\n    } else {\n        df = _formatISO8601;\n        if (df == null) {\n            df = _formatISO8601 = _cloneFormat(\n                DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                _timezone, _locale);\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}