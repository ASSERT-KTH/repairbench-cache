{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n     * quite simple because we already set date format timezone to be\n     * GMT, and hence can just strip out 'Z' altogether\n     */\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        } else {\n            // handle partial milliseconds, like \"...:30.6Z\" -> \"...:30.600Z\"\n            int dotIdx = dateStr.lastIndexOf('.');\n            int zIdx = len-1;\n            if (dotIdx > 0 && dotIdx < zIdx) {\n                int msLen = zIdx - dotIdx - 1;\n                if (msLen > 0 && msLen < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int i = 0; i < 3 - msLen; ++i) {\n                        sb.insert(zIdx, '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            }\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len-3);\n            if (c == ':') { // remove optional colon\n                // remove colon\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len-3, len-2);\n                dateStr = sb.toString();\n                len = dateStr.length(); // update length as string is changed\n            } else if (c == '+' || c == '-') { // missing minutes\n                // let's just append '00'\n                dateStr += \"00\";\n                len = dateStr.length();\n            }\n            // Milliseconds partial or missing; and even seconds are optional\n\n            // Find main time part without timezone\n            int tzIdx = -1;\n            for (int i = dateStr.length()-1; i > 0; --i) {\n                char cc = dateStr.charAt(i);\n                if (cc == '+' || cc == '-') {\n                    tzIdx = i;\n                    break;\n                }\n            }\n            int timeEnd = (tzIdx < 0) ? dateStr.length() : tzIdx;\n            int msDotIdx = dateStr.lastIndexOf('.', timeEnd);\n            if (msDotIdx >= 0) {\n                int msEnd = msDotIdx + 1;\n                // Find milliseconds length\n                while (msEnd < timeEnd && Character.isDigit(dateStr.charAt(msEnd))) {\n                    msEnd++;\n                }\n                int msLen = msEnd - msDotIdx - 1;\n                if (msLen < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int i = 0; i < 3 - msLen; ++i) {\n                        sb.insert(msEnd, '0');\n                        msEnd++;\n                    }\n                    dateStr = sb.toString();\n                }\n            } else {\n                // Check if we have seconds\n                int tIdx = dateStr.indexOf('T');\n                if (tIdx >= 0) {\n                    int colon1 = dateStr.indexOf(':', tIdx);\n                    int colon2 = dateStr.indexOf(':', colon1 + 1);\n                    if (colon2 >= 0 && colon2 < timeEnd) {\n                        // Have seconds, just add \".000\" after seconds\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(colon2 + 3, \".000\");\n                        dateStr = sb.toString();\n                    } else if (colon1 >= 0 && colon1 < timeEnd) {\n                        // No seconds, add \":00.000\" after minutes\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(colon1 + 3, \":00.000\");\n                        dateStr = sb.toString();\n                    }\n                }\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            } else {\n                // handle partial milliseconds: e.g. \"2014-10-03T18:00:00.6\"\n                int dotIdx = dateStr.lastIndexOf('.');\n                if (dotIdx > 0 && dotIdx == len - (timeLen) && timeLen > 0) {\n                    int msLen = len - dotIdx - 1;\n                    if (msLen < 3) {\n                        for (int i = 0; i < 3 - msLen; ++i) {\n                            sb.append('0');\n                        }\n                    }\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}