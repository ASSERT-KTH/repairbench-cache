{
    "generation": "    protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n    {\n        /* 21-May-2009, tatu: DateFormat has very strict handling of\n         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n         */\n\n        /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n         * quite simple because we already set date format timezone to be\n         * GMT, and hence can just strip out 'Z' altogether\n         */\n        int len = dateStr.length();\n        char c = dateStr.charAt(len-1);\n        DateFormat df;\n\n        // [JACKSON-200]: need to support \"plain\" date...\n        if (len <= 10 && Character.isDigit(c)) {\n            df = _formatPlain;\n            if (df == null) {\n                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n            }\n        } else if (c == 'Z') {\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n            }\n            // [JACKSON-334]: may be missing milliseconds... if so, add\n            if (len > 4 && dateStr.charAt(len-4) == ':') {\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(len-1, \".000\");\n                dateStr = sb.toString();\n            }\n        } else {\n            // Let's see if we have timezone indicator or not...\n            if (hasTimeZone(dateStr)) {\n                int timeZoneOffsetIndex = findTimeZoneOffset(dateStr);\n                if (timeZoneOffsetIndex > 0) {\n                    //int timeLen = len - dateStr.lastIndexOf('T') - 1;\n                    if (dateStr.charAt(timeZoneOffsetIndex - 1) == ':') {\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.delete(timeZoneOffsetIndex - 1, timeZoneOffsetIndex);\n                        dateStr = sb.toString();\n                    }\n                    int secondsIndex = findLast(dateStr, ':', timeZoneOffsetIndex);\n                    if (secondsIndex > 0) {\n                        int dotIndex = findLast(dateStr, '.', timeZoneOffsetIndex);\n                         if (dotIndex < 0) {\n                            StringBuilder sb = new StringBuilder(dateStr);\n                            sb.insert(timeZoneOffsetIndex, \".000\");\n                            dateStr = sb.toString();\n                         } else {\n                             int millisLen = timeZoneOffsetIndex - dotIndex - 1;\n                             if (millisLen == 1) {\n                                 StringBuilder sb = new StringBuilder(dateStr);\n                                 sb.insert(timeZoneOffsetIndex, \"00\");\n                                 dateStr = sb.toString();\n                             } else if (millisLen == 2) {\n                                 StringBuilder sb = new StringBuilder(dateStr);\n                                 sb.insert(timeZoneOffsetIndex, \"0\");\n                                 dateStr = sb.toString();\n                             }\n                         }\n                    } else {\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        int tIndex = dateStr.indexOf('T');\n                        if (tIndex > 0) {\n                           sb.insert(timeZoneOffsetIndex, \":00:00.000\");\n                           dateStr = sb.toString();\n                        }\n                    }\n                }\n                df = _formatISO8601;\n                if (_formatISO8601 == null) {\n                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n                }\n            } else {\n                // If not, plain date. Easiest to just patch 'Z' in the end?\n                StringBuilder sb = new StringBuilder(dateStr);\n                // And possible also millisecond part if missing\n                int timeLen = len - dateStr.lastIndexOf('T') - 1;\n                if (timeLen <= 8) {\n                        sb.append(\".000\");\n                }\n                sb.append('Z');\n                dateStr = sb.toString();\n                df = _formatISO8601_z;\n                if (df == null) {\n                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                            _timezone, _locale);\n                }\n            }\n        }\n        return df.parse(dateStr, pos);\n    }\n\n    private int findTimeZoneOffset(String dateStr) {\n        int len = dateStr.length();\n        for (int i = len - 5; i >= 10; --i) {\n            char c = dateStr.charAt(i);\n            if (c == '+' || c == '-') {\n                return i;\n            }\n        }\n        return -1;\n    }\n    \n    private int findLast(String dateStr, char ch, int end) {\n        for (int i = end - 1; i >= 0; --i) {\n            if (dateStr.charAt(i) == ch) {\n                return i;\n            }\n        }\n        return -1;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}