{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n     * quite simple because we already set date format timezone to be\n     * GMT, and hence can just strip out 'Z' altogether\n     */\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            // Patch for offset and missing parts\n            int tzStart = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n            if (tzStart > 0) {\n                // tzStart points to + or -\n                if (dateStr.indexOf(':', tzStart) != -1) {\n                    // Remove colon in timezone\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.deleteCharAt(tzStart + 3);\n                    dateStr = sb.toString();\n                } else if (dateStr.length() - tzStart == 3) { // +hh or -hh, missing mm\n                    dateStr += \"00\";\n                }\n            }\n            // Find the 'T' position if present (time part)\n            int tIndex = dateStr.indexOf('T');\n            // Find the position of '.' (milliseconds)\n            int dotIndex = dateStr.indexOf('.', tIndex > -1 ? tIndex : 0);\n            int offsetLen = (dateStr.charAt(dateStr.length() - 5) == '+' || dateStr.charAt(dateStr.length() - 5) == '-')\n                    ? 5 : 0;\n\n            // Add seconds if missing\n            int timeLen = 0;\n            if (tIndex >= 0) {\n                int timeEnd = tzStart > 0 ? tzStart : dateStr.length();\n                String timePart = dateStr.substring(tIndex + 1, dotIndex > 0 ? dotIndex : timeEnd);\n                String[] parts = timePart.split(\":\");\n                if (parts.length == 1) { // Only hour\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    int insertPos = dotIndex > 0 ? dotIndex : (tzStart > 0 ? tzStart : dateStr.length());\n                    sb.insert(insertPos, \":00:00\");\n                    dateStr = sb.toString();\n                    dotIndex = dateStr.indexOf('.', tIndex > -1 ? tIndex : 0);\n                } else if (parts.length == 2) { // Hour:minute, missing seconds\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    int insertPos = dotIndex > 0 ? dotIndex : (tzStart > 0 ? tzStart : dateStr.length());\n                    sb.insert(insertPos, \":00\");\n                    dateStr = sb.toString();\n                    dotIndex = dateStr.indexOf('.', tIndex > -1 ? tIndex : 0);\n                }\n            }\n\n            // Update positions after patch\n            len = dateStr.length();\n            tzStart = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n\n            // Now, patch milliseconds to be exactly 3 digits if present,\n            // or add \".000\" if completely missing.\n            dotIndex = dateStr.indexOf('.', tIndex > -1 ? tIndex : 0);\n            if (dotIndex > -1) {\n                int msStart = dotIndex + 1;\n                int msEnd = msStart;\n                while (msEnd < len && Character.isDigit(dateStr.charAt(msEnd))) {\n                    msEnd++;\n                }\n                int msDigits = msEnd - msStart;\n                if (msDigits < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int i = 0; i < 3 - msDigits; ++i) {\n                        sb.insert(msEnd, '0');\n                    }\n                    dateStr = sb.toString();\n                } else if (msDigits > 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.delete(msStart + 3, msEnd);\n                    dateStr = sb.toString();\n                }\n            } else {\n                // If seconds are present, but missing milliseconds, insert \".000\"\n                // Insert just before timezone\n                int insertPos = (tzStart > 0) ? tzStart : len;\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(insertPos, \".000\");\n                dateStr = sb.toString();\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                    sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}