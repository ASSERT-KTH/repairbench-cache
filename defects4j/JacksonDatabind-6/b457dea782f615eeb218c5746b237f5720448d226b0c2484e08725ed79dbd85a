{
    "generation": "    protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n    {\n        /* 21-May-2009, tatu: DateFormat has very strict handling of\n         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n         */\n\n        /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n         * quite simple because we already set date format timezone to be\n         * GMT, and hence can just strip out 'Z' altogether\n         */\n        int len = dateStr.length();\n        char c = dateStr.charAt(len-1);\n        DateFormat df;\n\n        // [JACKSON-200]: need to support \"plain\" date...\n        if (len <= 10 && Character.isDigit(c)) {\n            df = _formatPlain;\n            if (df == null) {\n                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n            }\n        } else if (c == 'Z') {\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n            }\n            // [JACKSON-334]: may be missing milliseconds... if so, add\n            if (dateStr.charAt(len-4) == ':') {\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(len-1, \".000\");\n                dateStr = sb.toString();\n            }\n        } else {\n            // Let's see if we have timezone indicator or not...\n            if (hasTimeZone(dateStr)) {\n                c = dateStr.charAt(len-3);\n                if (c == ':') { // remove optional colon\n                    // remove colon\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.delete(len-3, len-2);\n                    dateStr = sb.toString();\n                } else if (c == '+' || c == '-') { // missing minutes\n                    // let's just append '00'\n                    dateStr += \"00\";\n                }\n                // Handle case where seconds are missing but timezone exists\n                int tIndex = dateStr.lastIndexOf('T');\n                if (tIndex > -1) {\n                    // Check if we have time part after 'T'\n                    int timePartLength = len - tIndex - 1;\n                    // Format is expected to be HH:mm or HH:mm:ss\n                    if (timePartLength == 5) { // HH:mm case (missing :ss)\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(tIndex + 6, \":00\"); // Insert seconds\n                        dateStr = sb.toString();\n                    }\n                    // If we have milliseconds but not all 3 digits (.sss or .ss or .s)\n                    int dotIndex = dateStr.indexOf('.', tIndex);\n                    if (dotIndex > -1) {\n                        int millisLength = dateFormatWithMillis(dotIndex, tIndex, dateStr);\n                        if (millisLength > 0 && millisLength < 3) {\n                            StringBuilder sb = new StringBuilder(dateStr);\n                            while (millisLength < 3) {\n                                sb.insert(dotIndex + millisLength + 1, '0');\n                                millisLength++;\n                            }\n                            dateStr = sb.toString();\n                        }\n                    } else {\n                        // Check if we might need to add milliseconds\n                        boolean hasSeconds = (dateStr.indexOf(':', tIndex + 3) != -1);\n                        if (hasSeconds) {\n                            // Check position of timezone marker\n                            int tzIndex = findTimezoneMarkers(dateStr);\n                            if (tzIndex > 0) {\n                                int dotInsertPos = tzIndex; // usually before timezone\n                                while (dotInsertPos > tIndex && Character.isDigit(dateStr.charAt(dotInsertPos-1))) {\n                                    dotInsertPos--;\n                                }\n                                if (dotInsertPos > tIndex && dateStr.charAt(dotInsertPos) != '.') {\n                                    StringBuilder sb = new StringBuilder(dateStr);\n                                    sb.insert(dotInsertPos, \".000\");\n                                    dateStr = sb.toString();\n                                }\n                            }\n                        }\n                    }\n                }\n                // Milliseconds partial or missing; and even seconds are optional\n                len = dateStr.length();\n                // remove 'T', '+'/'-' and 4-digit timezone-offset\n                c = dateStr.charAt(len-9);\n                if (Character.isDigit(c)) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(len-5, \".000\");\n                    dateStr = sb.toString();\n                }\n                df = _formatISO8601;\n                if (_formatISO8601 == null) {\n                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n                }\n            } else {\n                // If not, plain date. Easiest to just patch 'Z' in the end?\n                StringBuilder sb = new StringBuilder(dateStr);\n                // And possible also millisecond part if missing\n                int timeLen = len - dateStr.lastIndexOf('T') - 1;\n                if (timeLen <= 8) {\n                        sb.append(\".000\");\n                }\n                sb.append('Z');\n                dateStr = sb.toString();\n                df = _formatISO8601_z;\n                if (df == null) {\n                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                            _timezone, _locale);\n                }\n            }\n        }\n        return df.parse(dateStr, pos);\n    }\n\n    // Helper method to find timezone markers (+ or -)\n    private static int findTimezoneMarkers(String dateStr) {\n        int plus = dateStr.lastIndexOf('+');\n        int minus = dateStr.lastIndexOf('-');\n        if (plus > minus) {\n            return plus;\n        }\n        return minus;\n    }\n\n    // Helper method to check length of milliseconds\n    private static int dateFormatWithMillis(int dotIndex, int tIndex, String dateStr) {\n        // Check if there are any digits after dot\n        int endIndex = Math.min(dotIndex + 3, dateStr.length());\n        for (int i = dotIndex + 1; i < endIndex; i++) {\n            if (!Character.isDigit(dateStr.charAt(i))) {\n                return i - dotIndex - 1;\n            }\n        }\n        return endIndex - dotIndex - 1;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}