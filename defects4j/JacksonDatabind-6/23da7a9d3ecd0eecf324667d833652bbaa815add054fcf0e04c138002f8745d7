{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            // Normalize the offset by removing the colon, if necessary, and ensure minutes is present\n            int zIndex = dateStr.length() - 6;\n            char tzSep = dateStr.charAt(dateStr.length() - 3);\n            StringBuilder sb = new StringBuilder(dateStr);\n            if (tzSep == ':') {\n                sb.delete(dateStr.length() - 3, dateStr.length() - 2);\n                dateStr = sb.toString();\n            } else if (dateStr.charAt(dateStr.length() - 5) == '+' || dateStr.charAt(dateStr.length() - 5) == '-') {\n                // missing minutes, e.g. +01\n                dateStr += \"00\";\n                sb = new StringBuilder(dateStr);\n            }\n\n            // At this point, offset is correct. Now handle missing seconds and fractional seconds.\n            // Find the time part:\n            int tIndex = dateStr.indexOf('T');\n            int dotIndex = dateStr.indexOf('.', tIndex);\n            int plusIndex = dateStr.indexOf('+', tIndex);\n            int minusIndex = dateStr.indexOf('-', tIndex);\n            int tzIndex = (plusIndex > 0) ? plusIndex : ((minusIndex > tIndex) ? minusIndex : -1);\n            if (tzIndex < 0) {\n                tzIndex = dateStr.length();\n            }\n\n            int firstColonIdx = dateStr.indexOf(':', tIndex);\n            int secondColonIdx = (firstColonIdx >= 0) ? dateStr.indexOf(':', firstColonIdx + 1) : -1;\n\n            // 1. Ensure seconds\n            if (secondColonIdx > 0 && (dotIndex == -1 || secondColonIdx < dotIndex)) {\n                // Have at least HH:mm:ss...\n                int secondsEnd = secondColonIdx + 3; // HH:mm:ss\n                if (secondsEnd > tzIndex) secondsEnd = tzIndex;\n            } else if (firstColonIdx > 0 && (secondColonIdx == -1 || secondColonIdx > tzIndex)) {\n                // Only have HH:mm, not HH:mm:ss\n                // Need to insert :00 after minutes\n                int insertPos = firstColonIdx + 3;\n                if (insertPos > tzIndex) insertPos = tzIndex;\n                sb.insert(insertPos, \":00\");\n                dateStr = sb.toString();\n                // Recalc variables\n                dotIndex = dateStr.indexOf('.', tIndex);\n                plusIndex = dateStr.indexOf('+', tIndex);\n                minusIndex = dateStr.indexOf('-', tIndex);\n                tzIndex = (plusIndex > 0) ? plusIndex : ((minusIndex > tIndex) ? minusIndex : -1);\n                if (tzIndex < 0) {\n                    tzIndex = dateStr.length();\n                }\n            }\n\n            // 2. Pad milliseconds if present (e.g. .6, .61, .123)\n            dotIndex = dateStr.indexOf('.', tIndex);\n            if (dotIndex > 0 && dotIndex < tzIndex) {\n                int msEnd = dotIndex + 1;\n                while (msEnd < dateStr.length() && Character.isDigit(dateStr.charAt(msEnd)) && msEnd - dotIndex <= 3) {\n                    msEnd++;\n                }\n                int msDigits = msEnd - (dotIndex + 1);\n                if (msDigits < 3) {\n                    sb = new StringBuilder(dateStr);\n                    for (int i = 0; i < 3 - msDigits; ++i) {\n                        sb.insert(dotIndex + 1 + msDigits + i, '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            } else if (dotIndex < 0 && tIndex >= 0) {\n                // No milliseconds; find where to insert\n                plusIndex = dateStr.indexOf('+', tIndex);\n                minusIndex = dateStr.indexOf('-', tIndex);\n                tzIndex = (plusIndex > 0) ? plusIndex : ((minusIndex > tIndex) ? minusIndex : -1);\n                if (tzIndex < 0) {\n                    tzIndex = dateStr.length();\n                }\n                // Insert \".000\" before timezone\n                sb = new StringBuilder(dateStr);\n                sb.insert(tzIndex, \".000\");\n                dateStr = sb.toString();\n            }\n\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}