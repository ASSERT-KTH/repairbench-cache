{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos) {\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // Handle the case where seconds are missing\n        if (len >= 16 && dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        if (hasTimeZone(dateStr)) {\n            // Check for optional colon and missing minutes, and add if necessary\n            if (len >= 3) {\n                c = dateStr.charAt(len - 3);\n                if (c == ':') {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.delete(len - 3, len - 2);\n                    dateStr = sb.toString();\n                } else if (c == '+' || c == '-') {\n                    dateStr += \"00\";\n                }\n            }\n\n            // Handle partial or missing milliseconds\n            int secondsPos = dateStr.lastIndexOf(':');\n            if (secondsPos >= 0) {\n                int fractionPos = dateStr.indexOf('.', secondsPos);\n                if (fractionPos <= 0) {\n                    // Ensure at least three digits for milliseconds\n                    int milliStart = secondsPos + 1;\n                    int remaining = dateStr.length() - milliStart;\n                    if (remaining < 3) {\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(milliStart, \"000\");\n                        dateStr = sb.toString();\n                    }\n                }\n            }\n\n            df = _formatISO8601;\n            if (df == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // Append 'Z' and ensure milliseconds are present\n            StringBuilder sb = new StringBuilder(dateStr);\n            if (sb.indexOf(\"T\") >= 0) {\n                // Check if milliseconds are present\n                int tIndex = sb.indexOf('T');\n                int dotIndex = sb.indexOf('.', tIndex);\n                if (dotIndex == -1) {\n                    sb.append(\".000\");\n                }\n                sb.append('Z');\n            } else {\n                sb.append('T00:00:00.000Z');\n            }\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}