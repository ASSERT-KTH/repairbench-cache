{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        } else if (dateStr.charAt(len-5) == 'T') {\n            // If missing milliseconds, add\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        } else if (dateStr.charAt(len-5) == ':') {\n            // partial seconds\n            int dotIdx = dateStr.indexOf('.', len - 9);\n            if (dotIdx > 0) {\n                int msLen = len - 1 - dotIdx - 1;\n                if (msLen < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int i = 0; i < 3 - msLen; ++i)\n                        sb.insert(len - 1, '0');\n                    dateStr = sb.toString();\n                }\n            }\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            // Fix timezone: remove colon if present, also pad minutes if needed\n            int tzIndex = dateStr.length() - 6;\n            if (tzIndex > 0) {\n                if (dateStr.charAt(tzIndex) == '+' || dateStr.charAt(tzIndex) == '-') {\n                    // e.g., 2014-10-03T18:00:00.6-05:00\n                    // If minutes missing (like -05), append 00\n                    if (dateStr.charAt(dateStr.length()-3) == '+' || dateStr.charAt(dateStr.length()-3) == '-') {\n                        dateStr += \"00\";\n                    }\n                    // Remove colon in timezone\n                    else if (dateStr.charAt(dateStr.length()-3) == ':') {\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.delete(dateStr.length()-3, dateStr.length()-2);\n                        dateStr = sb.toString();\n                    }\n                }\n            }\n            // Milliseconds handling (partial or missing)\n            // Find the 'T'\n            int tPos = dateStr.indexOf('T');\n            if (tPos >= 0) {\n                // Find index before timezone part\n                int tzSignIdx = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n                int tzIdx = (tzSignIdx > 0) ? tzSignIdx : dateStr.length();\n                int dotIdx = dateStr.indexOf('.', tPos);\n                if (dotIdx > 0 && dotIdx < tzIdx) {\n                    // partial milliseconds\n                    int msLen = tzIdx - dotIdx - 1;\n                    if (msLen < 3) {\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        for (int i = 0; i < 3 - msLen; ++i)\n                            sb.insert(tzIdx, '0');\n                        dateStr = sb.toString();\n                    }\n                } else if (dotIdx < 0 && tPos < tzIdx) {\n                    // no milliseconds at all, add .000\n                    // Try to parse seconds position, see if no seconds\n                    int timeLen = tzIdx - tPos - 1;\n                    // If time string is HH:mm or HH:mm:ss we can add\n                    if (timeLen == 8 || timeLen == 5) {\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(tzIdx, \".000\");\n                        dateStr = sb.toString();\n                    }\n                }\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            int tPos = dateStr.indexOf('T');\n            if (tPos >= 0) {\n                int timeLen = len - tPos - 1;\n                // e.g. 'YYYY-MM-DDTHH:mm' (5) or 'YYYY-MM-DDTHH:mm:ss' (8)\n                if (timeLen == 5 || timeLen == 8) {\n                    sb.append(\".000\");\n                } else if (timeLen > 0) {\n                    // check if it contains partial milliseconds\n                    int dotIdx = dateStr.indexOf('.', tPos);\n                    if (dotIdx > 0) {\n                        int msLen = len - dotIdx - 1;\n                        if (msLen < 3) {\n                            for (int i = 0; i < 3 - msLen; ++i)\n                                sb.append('0');\n                        }\n                    }\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}