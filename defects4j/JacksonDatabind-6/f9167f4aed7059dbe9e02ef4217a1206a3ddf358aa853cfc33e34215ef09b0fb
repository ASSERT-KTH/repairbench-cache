{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n     * quite simple because we already set date format timezone to be\n     * GMT, and hence can just strip out 'Z' altogether\n     */\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        } else {\n            // Check for partial milliseconds, e.g., \".6Z\", \".61Z\"\n            int milliStart = dateStr.lastIndexOf('.');\n            if (milliStart >= 0 && milliStart < len - 2) {\n                String milliPart = dateStr.substring(milliStart + 1, len - 1); // exclude 'Z'\n                if (milliPart.length() > 0 && milliPart.length() < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int i = 0; i < 3 - milliPart.length(); i++) {\n                        sb.insert(len - 1, '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            }\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len-3);\n            if (c == ':') { // remove optional colon\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len-3, len-2);\n                dateStr = sb.toString();\n            } else if (c == '+' || c == '-') { // missing minutes\n                dateStr += \"00\";\n            }\n            len = dateStr.length();\n            // Milliseconds partial or missing; and even seconds may be missing\n\n            // find 'T'\n            int tIndex = dateStr.lastIndexOf('T');\n            int tzSign = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n            int milliStart = dateStr.lastIndexOf('.', tzSign - 1);\n            int colonAfterT = dateStr.indexOf(':', tIndex);\n            int secondColon = dateStr.indexOf(':', colonAfterT + 1);\n\n            StringBuilder sb = new StringBuilder(dateStr);\n\n            // Determine if seconds are missing, if time chunk exists\n            boolean hasSeconds = (secondColon > 0) && (secondColon < tzSign);\n            if (!hasSeconds && colonAfterT > 0 && colonAfterT < tzSign) {\n                // append seconds zero\n                sb.insert(tzSign, \":00\");\n                dateStr = sb.toString();\n                tzSign += 3;\n            }\n\n            // Update milli insertion point after possible seconds append\n            milliStart = sb.lastIndexOf(\".\", tzSign - 1);\n\n            // Check for missing milliseconds\n            if (milliStart < 0) {\n                sb.insert(tzSign, \".000\");\n            } else {\n                String milliPart = sb.substring(milliStart + 1, tzSign);\n                if (milliPart.length() > 0 && milliPart.length() < 3) {\n                    for (int i = 0; i < 3 - milliPart.length(); i++) {\n                        sb.insert(tzSign, '0');\n                    }\n                }\n            }\n            dateStr = sb.toString();\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            } else {\n                // handle potential partial milliseconds\n                int milliStart = dateStr.lastIndexOf('.');\n                if (milliStart >= 0 && milliStart > dateStr.lastIndexOf('T')) {\n                    String milliPart = dateStr.substring(milliStart + 1);\n                    if (milliPart.length() > 0 && milliPart.length() < 3) {\n                        for (int i = 0; i < 3 - milliPart.length(); i++) {\n                            sb.append('0');\n                        }\n                    }\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}