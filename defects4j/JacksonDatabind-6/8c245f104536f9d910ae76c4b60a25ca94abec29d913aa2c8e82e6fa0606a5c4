{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /* 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    /* First: do we have \"zulu\" format ('Z' == \"GMT\")? If yes, that's\n     * quite simple because we already set date format timezone to be\n     * GMT, and hence can just strip out 'Z' altogether\n     */\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len-3);\n            if (c == ':') { // remove optional colon\n                // remove colon\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len-3, len-2);\n                dateStr = sb.toString();\n            } else if (c == '+' || c == '-') { // missing minutes\n                // let's just append '00'\n                dateStr += \"00\";\n            }\n            \n            // Check if seconds are missing\n            int tIndex = dateStr.indexOf('T');\n            if (tIndex >= 0) {\n                int tzIndex = dateStr.indexOf('+', tIndex);\n                if (tzIndex < 0) {\n                    tzIndex = dateStr.indexOf('-', tIndex);\n                }\n                if (tzIndex >= 0) {\n                    // Count colons to determine if seconds are missing\n                    int colonCount = 0;\n                    for (int i = tIndex; i < tzIndex; i++) {\n                        if (dateStr.charAt(i) == ':') {\n                            colonCount++;\n                        }\n                    }\n                    if (colonCount < 2) {\n                        // Missing seconds (and maybe milliseconds)\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        // Insert at timezone position\n                        sb.insert(tzIndex, colonCount == 0 ? \":00:00.000\" : \":00.000\");\n                        dateStr = sb.toString();\n                        len = dateStr.length();\n                    }\n                }\n            }\n            \n            // Handle partial milliseconds\n            int millisIndex = dateStr.indexOf('.');\n            if (millisIndex > 0) {\n                int endMillis = -1;\n                // Find end of milliseconds part\n                for (int i = millisIndex + 1; i < dateStr.length(); i++) {\n                    if (!Character.isDigit(dateStr.charAt(i))) {\n                        endMillis = i;\n                        break;\n                    }\n                }\n                if (endMillis > 0) {\n                    int millisecondsLength = endMillis - millisIndex - 1;\n                    if (millisecondsLength < 3) {\n                        // Partial milliseconds, need to pad\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        // Pad with zeros\n                        for (int i = 0; i < 3 - millisecondsLength; i++) {\n                            sb.insert(endMillis, \"0\");\n                        }\n                        dateStr = sb.toString();\n                        len = dateStr.length();\n                    }\n                }\n            } else {\n                // Missing milliseconds part\n                int tzIndex = dateStr.indexOf('+', tIndex);\n                if (tzIndex < 0) {\n                    tzIndex = dateStr.indexOf('-', tIndex);\n                }\n                if (tzIndex > 0) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    sb.insert(tzIndex, \".000\");\n                    dateStr = sb.toString();\n                    len = dateStr.length();\n                }\n            }\n            \n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // And possible also millisecond part if missing\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}