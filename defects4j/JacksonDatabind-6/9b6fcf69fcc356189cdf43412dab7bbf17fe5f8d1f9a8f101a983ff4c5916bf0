{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos) {\n    int len = dateStr.length();\n    char last = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    // [JACKSON-200]: support plain date (\"yyyy-MM-dd\")\n    if (len <= 10 && Character.isDigit(last)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(\n                DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN,\n                _timezone, _locale\n            );\n        }\n        return df.parse(dateStr, pos);\n    }\n\n    // General ISO-8601: normalize into \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" or \"...'Z'\"\n    boolean hasTZ = false;\n    boolean zulu = false;\n    String tz = null;\n    String input = dateStr;\n\n    // 1) detect literal 'Z' (Zulu)\n    if (input.endsWith(\"Z\")) {\n        hasTZ = true;\n        zulu = true;\n        tz = \"Z\";\n        input = input.substring(0, input.length() - 1);\n    } else {\n        // 2) detect offset (+/-HH:mm or +/-HHmm or +/-HH)\n        int tzPos = -1;\n        int plus = input.lastIndexOf('+');\n        int minus = input.lastIndexOf('-');\n        if (plus > 10) {\n            tzPos = plus;\n        }\n        if (minus > 10 && minus > tzPos) {\n            tzPos = minus;\n        }\n        if (tzPos > 10) {\n            hasTZ = true;\n            tz = input.substring(tzPos);\n            input = input.substring(0, tzPos);\n        }\n    }\n\n    // split date and time parts\n    String datePart;\n    String timePart = null;\n    int tPos = input.indexOf('T');\n    if (tPos >= 0) {\n        datePart = input.substring(0, tPos);\n        timePart = input.substring(tPos + 1);\n    } else {\n        datePart = input;\n    }\n\n    // pick apart H, m, s, fraction\n    String hour = \"00\", minute = \"00\", second = \"00\", msec = \"000\";\n    if (timePart != null && !timePart.isEmpty()) {\n        String base = timePart;\n        String frac = null;\n        int dot = base.indexOf('.');\n        if (dot >= 0) {\n            frac = base.substring(dot + 1);\n            base = base.substring(0, dot);\n        }\n        String[] parts = base.split(\":\");\n        if (parts.length > 0) hour   = parts[0];\n        if (parts.length > 1) minute = parts[1];\n        if (parts.length > 2) second = parts[2];\n        if (frac != null && !frac.isEmpty()) {\n            // pad or truncate fraction to 3 digits\n            if (frac.length() == 1) {\n                msec = frac + \"00\";\n            } else if (frac.length() == 2) {\n                msec = frac + \"0\";\n            } else {\n                msec = frac.substring(0, 3);\n            }\n        }\n    }\n\n    // rebuild into full ISO-8601 string\n    StringBuilder sb = new StringBuilder(32);\n    sb.append(datePart)\n      .append('T')\n      .append(hour).append(':').append(minute).append(':').append(second)\n      .append('.').append(msec);\n\n    if (hasTZ) {\n        if (zulu) {\n            sb.append('Z');\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(\n                    DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                    _timezone, _locale\n                );\n            }\n        } else {\n            // normalize \"+HH:mm\" -> \"+HHmm\", \"+HH\" -> \"+HH00\"\n            String off = tz;\n            if (off.length() > 3 && off.charAt(3) == ':') {\n                off = off.substring(0, 3) + off.substring(4);\n            } else if (off.length() == 3) {\n                off = off + \"00\";\n            }\n            sb.append(off);\n            df = _formatISO8601;\n            if (df == null) {\n                df = _formatISO8601 = _cloneFormat(\n                    DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                    _timezone, _locale\n                );\n            }\n        }\n    } else {\n        // no timezone: assume Zulu\n        sb.append('Z');\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(\n                DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                _timezone, _locale\n            );\n        }\n    }\n\n    dateStr = sb.toString();\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}