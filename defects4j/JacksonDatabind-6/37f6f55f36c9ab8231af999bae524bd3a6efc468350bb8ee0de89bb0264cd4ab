{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        } else {\n            dateStr = padPartialMilliseconds(dateStr);\n        }\n    } else {\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len - 3);\n            if (c == ':') {\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len - 3, len - 2);\n                dateStr = sb.toString();\n            } else if (c == '+' || c == '-') {\n                dateStr += \"00\";\n            }\n            // Adjust length after potential modifications\n            len = dateStr.length();\n            dateStr = padPartialMilliseconds(dateStr);\n\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            StringBuilder sb = new StringBuilder(dateStr);\n            int timeLen = len - dateStr.lastIndexOf('T') - 1;\n            if (timeLen <= 8) {\n                sb.append(\".000\");\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}\n\n/**\n * If the given date string contains fractional seconds (milliseconds) whose\n * digits count is less than 3, pad with zeros to make 3 digits. If missing, add \".000\".\n */\nprivate String padPartialMilliseconds(String dateStr)\n{\n    int tzIndex = dateStr.lastIndexOf('+');\n    if (tzIndex < 0) {\n        tzIndex = dateStr.lastIndexOf('-');\n        if (tzIndex <= dateStr.lastIndexOf('T')) {  // timezone sign must be after 'T' separator\n            tzIndex = -1;\n        }\n    }\n    int fracStart = dateStr.indexOf('.', dateStr.indexOf('T'));\n    if (fracStart >= 0 && (tzIndex < 0 || fracStart < tzIndex)) {\n        int fracEnd = (tzIndex > 0) ? tzIndex : dateStr.length();\n        int fracLen = fracEnd - fracStart - 1;\n        if (fracLen < 3) {\n            StringBuilder sb = new StringBuilder(dateStr);\n            for (int i = 0; i < 3 - fracLen; ++i) {\n                sb.insert(fracEnd, '0');\n            }\n            dateStr = sb.toString();\n        }\n    } else {\n        // No fractional seconds; need to insert before timezone, or at end\n        StringBuilder sb = new StringBuilder(dateStr);\n        int insertPos = (tzIndex > 0) ? tzIndex : dateStr.length();\n        sb.insert(insertPos, \".000\");\n        dateStr = sb.toString();\n    }\n    return dateStr;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}