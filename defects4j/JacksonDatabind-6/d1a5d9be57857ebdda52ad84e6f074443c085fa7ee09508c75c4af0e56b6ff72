{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // Plain date (yyyy-MM-dd)\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        } else {\n            // check for partial milliseconds\n            int dotIndex = dateStr.lastIndexOf('.');\n            int zIndex = len - 1;\n            if (dotIndex != -1 && dotIndex < zIndex) {\n                int msLen = zIndex - dotIndex - 1;\n                if (msLen > 0 && msLen < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int i = 0; i < 3 - msLen; ++i) {\n                        sb.insert(zIndex, '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            }\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len-3);\n            if (c == ':') { // remove optional colon in timezone offset\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len-3, len-2);\n                dateStr = sb.toString();\n            } else if (c == '+' || c == '-') { // missing minutes in offset\n                dateStr += \"00\";\n            }\n            len = dateStr.length();\n\n            // Handle milliseconds: ensure we have 3 digits if milliseconds are present, or add \".000\" if missing\n            int tzIndex = len - 5; // after removing colon, timezone offset is always 5 chars\n            int dotIndex = dateStr.lastIndexOf('.', tzIndex-1);\n            if (dotIndex != -1 && dotIndex < tzIndex) {\n                int msLen = tzIndex - dotIndex - 1;\n                if (msLen > 0 && msLen < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int i = 0; i < 3 - msLen; ++i) {\n                        sb.insert(dotIndex + 1 + msLen, '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            } else {\n                // milliseconds missing, check if seconds are present\n                // find the position of the last ':' before timezone\n                int lastColon = dateStr.lastIndexOf(':', tzIndex-1);\n                if (lastColon != -1) {\n                    // if seconds are missing (i.e., there's only one colon in the time part)\n                    // e.g., \"1997-07-16T19:20+01:00\", needs to add \":00.000\"\n                    boolean secondsPresent = dateStr.lastIndexOf(':', lastColon - 1) != -1;\n                    if (!secondsPresent) {\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(tzIndex, \":00.000\");\n                        dateStr = sb.toString();\n                    } else {\n                        // seconds present, just add \".000\" after seconds\n                        StringBuilder sb = new StringBuilder(dateStr);\n                        sb.insert(tzIndex, \".000\");\n                        dateStr = sb.toString();\n                    }\n                }\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // No timezone: treat as if it's Zulu\n            StringBuilder sb = new StringBuilder(dateStr);\n            // find the position of 'T'\n            int tIndex = dateStr.indexOf('T');\n            int timeLen = len - tIndex - 1;\n            int dotIndex = dateStr.lastIndexOf('.');\n            int secSep = dateStr.lastIndexOf(':');\n            if (timeLen > 0) {\n                if (dotIndex > tIndex) {\n                    int msLen = len - dotIndex - 1;\n                    if (msLen > 0 && msLen < 3) {\n                        for (int i = 0; i < 3 - msLen; ++i) {\n                            sb.append('0');\n                        }\n                    }\n                } else {\n                    // add \".000\" after the seconds (if present), or \":00.000\" if seconds are missing\n                    int countColons = 0;\n                    for (int i = tIndex+1; i < len; ++i) {\n                        if (dateStr.charAt(i) == ':') {\n                            ++countColons;\n                        }\n                    }\n                    if (countColons == 1) {\n                        // only hours and minutes: add \":00.000\"\n                        sb.append(\":00.000\");\n                    } else {\n                        // seconds present: add \".000\"\n                        sb.append(\".000\");\n                    }\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}