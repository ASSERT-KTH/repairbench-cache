{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    int len = dateStr.length();\n    char c = dateStr.charAt(len - 1);\n    DateFormat df;\n\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len - 4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len - 1, \".000\");\n            dateStr = sb.toString();\n        } else {\n            // check for partial milliseconds, like \".6\" or \".61\"\n            int tzIdx = len - 1;\n            int dotIdx = dateStr.lastIndexOf('.', tzIdx);\n            if (dotIdx > 0) {\n                int msDigits = tzIdx - dotIdx - 1; // chars between '.' and 'Z'\n                if (msDigits > 0 && msDigits < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int i = 0; i < 3 - msDigits; ++i) {\n                        sb.insert(tzIdx, '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            }\n        }\n    } else {\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len - 3);\n            if (c == ':') {\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len - 3, len - 2);\n                dateStr = sb.toString();\n                len = dateStr.length();\n            } else if (c == '+' || c == '-') {\n                dateStr += \"00\";\n                len = dateStr.length();\n            }\n\n            // After timezone fixups, check for milliseconds\n            int tzStart = len - 5;\n            // look for '.' before tz offset\n            int dotIdx = dateStr.lastIndexOf('.', tzStart);\n            if (dotIdx > 0) {\n                int msDigits = tzStart - dotIdx - 1; // number of digits after '.'\n                if (msDigits > 0 && msDigits < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int i = 0; i < 3 - msDigits; ++i) {\n                        sb.insert(dotIdx + 1 + msDigits + i, '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            } else {\n                // no milliseconds present: insert \".000\" before timezone\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(tzStart, \".000\");\n                dateStr = sb.toString();\n            }\n\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n\n        } else { // No timezone\n            StringBuilder sb = new StringBuilder(dateStr);\n            int tIdx = dateStr.lastIndexOf('T');\n            int timeLen = len - tIdx - 1;\n            int dotIdx = dateStr.indexOf('.', tIdx);\n            if (dotIdx < 0) {\n                // no milliseconds, add \".000\"\n                sb.append(\".000\");\n            } else {\n                int msDigits = len - dotIdx - 1;\n                if (msDigits > 0 && msDigits < 3) {\n                    for (int i = 0; i < 3 - msDigits; ++i) {\n                        sb.append(\"0\");\n                    }\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}