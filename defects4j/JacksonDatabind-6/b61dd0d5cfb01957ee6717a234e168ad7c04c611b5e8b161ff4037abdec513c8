{
    "generation": "protected Date parseAsISO8601(String dateStr, ParsePosition pos)\n{\n    /*\n     * 21-May-2009, tatu: DateFormat has very strict handling of\n     * timezone  modifiers for ISO-8601. So we need to do some scrubbing.\n     */\n\n    int len = dateStr.length();\n    char c = dateStr.charAt(len-1);\n    DateFormat df;\n\n    // [JACKSON-200]: need to support \"plain\" date...\n    if (len <= 10 && Character.isDigit(c)) {\n        df = _formatPlain;\n        if (df == null) {\n            df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);\n        }\n    } else if (c == 'Z') {\n        df = _formatISO8601_z;\n        if (df == null) {\n            df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);\n        }\n        // [JACKSON-334]: may be missing milliseconds... if so, add\n        if (dateStr.charAt(len-4) == ':') {\n            StringBuilder sb = new StringBuilder(dateStr);\n            sb.insert(len-1, \".000\");\n            dateStr = sb.toString();\n        } else {\n            // Patch partial or missing milliseconds, e.g. \".6\", \".61\", \".123\"\n            dateStr = _padISO8601Millis(dateStr, len-1);\n        }\n    } else {\n        // Let's see if we have timezone indicator or not...\n        if (hasTimeZone(dateStr)) {\n            c = dateStr.charAt(len-3);\n            if (c == ':') { // remove optional colon\n                // remove colon\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.delete(len-3, len-2);\n                dateStr = sb.toString();\n            } else if (c == '+' || c == '-') { // missing minutes\n                // let's just append '00'\n                dateStr += \"00\";\n            }\n            // Now, patch partial or missing milliseconds\n            len = dateStr.length();\n            // Try to locate milliseconds part in \"yyyy-MM-dd'T'HH:mm:ss(.SSS)?Z\"\n            // and pad as needed to \".SSS\"\n            // Find start of timezone (either last '+' or '-' after time part)\n            int tzIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));\n            int dotIndex = dateStr.lastIndexOf('.', tzIndex != -1 ? tzIndex : dateStr.length());\n            int tIndex = dateStr.indexOf('T');\n            int colon2 = dateStr.indexOf(':', tIndex > 0 ? tIndex : 0); // find first colon after 'T'\n            boolean hasSecs = false;\n            // Check if seconds component exists\n            if (tIndex >= 0 && colon2 > tIndex) {\n                int colon3 = dateStr.indexOf(':', colon2 + 1);\n                hasSecs = (colon3 > colon2);\n            }\n            // 'dotIndex' is milliseconds, between last '.' and tz\n            if (dotIndex > 0 && dotIndex > tIndex) {\n                // Patch, if needed\n                String msPart = dateStr.substring(dotIndex + 1, (tzIndex > 0) ? tzIndex : dateStr.length());\n                if (msPart.length() < 3) {\n                    StringBuilder sb = new StringBuilder(dateStr);\n                    for (int i = msPart.length(); i < 3; ++i) {\n                        sb.insert(dotIndex + 1 + msPart.length(), '0');\n                    }\n                    dateStr = sb.toString();\n                }\n            } else if (hasSecs) { // has seconds, but missing milliseconds\n                // Insert \".000\" before timezone\n                int insertPos = (tzIndex > 0) ? tzIndex : dateStr.length();\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(insertPos, \".000\");\n                dateStr = sb.toString();\n            } else if (tIndex > 0) { // Has time but missing seconds: \"yyyy-MM-ddTHH:mm+01:00\"\n                // Insert \":00.000\" before timezone\n                int insertPos = (tzIndex > 0) ? tzIndex : dateStr.length();\n                StringBuilder sb = new StringBuilder(dateStr);\n                sb.insert(insertPos, \":00.000\");\n                dateStr = sb.toString();\n            }\n            df = _formatISO8601;\n            if (_formatISO8601 == null) {\n                df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n            }\n        } else {\n            // If not, plain date. Easiest to just patch 'Z' in the end?\n            StringBuilder sb = new StringBuilder(dateStr);\n            // Figure time part after 'T'\n            int tIndex = dateStr.indexOf('T');\n            int timeLen = (tIndex < 0) ? 0 : (len - tIndex - 1);\n            if (timeLen > 0) {\n                // Patch missing seconds\n                if (timeLen == 5) { // \"HH:mm\"\n                    sb.append(\":00.000\");\n                } else if (timeLen == 8) { // \"HH:mm:ss\"\n                    sb.append(\".000\");\n                } else {\n                    // Patch possible missing/partial ms\n                    int dotIndex = dateStr.indexOf('.', tIndex);\n                    if (dotIndex > 0) {\n                        String msPart = dateStr.substring(dotIndex + 1);\n                        if (msPart.length() < 3) {\n                            for (int i = msPart.length(); i < 3; ++i) {\n                                sb.append('0');\n                            }\n                        }\n                    } else {\n                        sb.append(\".000\");\n                    }\n                }\n            }\n            sb.append('Z');\n            dateStr = sb.toString();\n            df = _formatISO8601_z;\n            if (df == null) {\n                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,\n                        _timezone, _locale);\n            }\n        }\n    }\n    return df.parse(dateStr, pos);\n}\n\n// Helper to pad or normalize milliseconds if present and partial, else no-op.\n// Expects to be called with index of timezone offset ('Z', '+' or '-') or string length.\nprivate String _padISO8601Millis(String dateStr, int tzStart) {\n    // tzStart: index of 'Z', '+', or '-' (or end of string)\n    int dot = dateStr.lastIndexOf('.', tzStart - 1);\n    if (dot < 0) {\n        return dateStr;\n    }\n    int afterDot = dot + 1;\n    int msLen = tzStart - afterDot;\n    if (msLen == 0) {\n        return dateStr.substring(0, dot) + \".000\" + dateStr.substring(tzStart);\n    } else if (msLen == 1) {\n        return dateStr.substring(0, afterDot) + dateStr.charAt(afterDot) + \"00\" + dateStr.substring(tzStart);\n    } else if (msLen == 2) {\n        return dateStr.substring(0, afterDot) + dateStr.substring(afterDot, afterDot + 2) + \"0\" + dateStr.substring(tzStart);\n    } else if (msLen > 3) {\n        // truncate to three digits\n        return dateStr.substring(0, afterDot + 3) + dateStr.substring(tzStart);\n    }\n    return dateStr;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}