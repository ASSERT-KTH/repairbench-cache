{
    "generation": "    // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations\n    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n\n        boolean lastWasWhite = false;\n        boolean reachedNonWhite = false;\n        final EscapeMode escapeMode = out.escapeMode();\n        final CharsetEncoder encoder = out.encoder();\n        final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n        final Map<Character, String> map = escapeMode.getMap();\n        final int length = string.length();\n\n        int codePoint;\n        for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n            codePoint = string.codePointAt(offset);\n\n            if (normaliseWhite) {\n                if (StringUtil.isWhitespace(codePoint)) {\n                    if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                        continue;\n                    accum.append(' ');\n                    lastWasWhite = true;\n                    continue;\n                } else {\n                    lastWasWhite = false;\n                    reachedNonWhite = true;\n                }\n            }\n            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):\n            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                final char c = (char) codePoint;\n                boolean handled = true; // Will be false if needs default handling\n\n                // html specific and required escapes:\n                switch (c) {\n                    case '&':\n                        accum.append(\"&amp;\");\n                        break;\n                    case 0xA0: // nbsp\n                        if (escapeMode != EscapeMode.xhtml)\n                            accum.append(\"&nbsp;\");\n                        else\n                            // In XHTML, fall through to default handling to ensure it's okay to output (canEncode), otherwise use numeric entity\n                            handled = false;\n                        break;\n                    case '<':\n                        // escape < unless in attribute\n                        if (!inAttribute)\n                            accum.append(\"&lt;\");\n                        else\n                            // In attribute, fall through to default handling to ensure it's okay to output (canEncode)\n                           handled = false;\n                        break;\n                    case '>':\n                        // escape > unless in attribute\n                        if (!inAttribute)\n                            accum.append(\"&gt;\");\n                        else\n                            // In attribute, fall through to default handling to ensure it's okay to output (canEncode)\n                           handled = false;\n                        break;\n                    case '\"':\n                        // escape \" in attribute\n                        if (inAttribute)\n                            accum.append(\"&quot;\");\n                        else\n                            // Not in attribute, fall through to default handling to ensure it's okay to output (canEncode)\n                            handled = false;\n                        break;\n                    default:\n                        // Does not need specific handling, fall through to default handling\n                        handled = false;\n                        break;\n                }\n\n                // Default handling for characters that were not explicitly handled above\n                if (!handled) {\n                    if (canEncode(coreCharset, c, encoder))\n                        accum.append(c);\n                    else if (map.containsKey(c))\n                        accum.append('&').append(map.get(c)).append(';');\n                    else\n                        accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n                }\n            } else { // Supplementary character\n                final String c = new String(Character.toChars(codePoint));\n                // Check if character can be encoded directly (using fallback for simplicity)\n                if (encoder.canEncode(c))\n                    accum.append(c);\n                else // If not encodable, use numeric entity\n                    accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}