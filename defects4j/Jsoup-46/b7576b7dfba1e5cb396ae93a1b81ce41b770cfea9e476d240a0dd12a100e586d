{
    "generation": "    // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations\n    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n\n        boolean lastWasWhite = false;\n        boolean reachedNonWhite = false;\n        final EscapeMode escapeMode = out.escapeMode();\n        final CharsetEncoder encoder = out.encoder();\n        final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n        final Map<Character, String> map = escapeMode.getMap();\n        final int length = string.length();\n\n        int codePoint;\n        for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n            codePoint = string.codePointAt(offset);\n\n            if (normaliseWhite) {\n                if (StringUtil.isWhitespace(codePoint)) {\n                    if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                        continue;\n                    accum.append(' ');\n                    lastWasWhite = true;\n                    continue;\n                } else {\n                    lastWasWhite = false;\n                    reachedNonWhite = true;\n                }\n            }\n            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):\n            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                final char c = (char) codePoint;\n                // html specific and required escapes:\n                switch (c) {\n                    case '&':\n                        accum.append(\"&amp;\");\n                        break;\n                    case 0xA0: // non-breaking space\n                        if (escapeMode != EscapeMode.xhtml) {\n                            accum.append(\"&nbsp;\");\n                        } else {\n                            // In XHTML mode, only append the literal char if it can be encoded. Otherwise, use numeric entity.\n                            // Check if the character can be encoded in the target charset.\n                            if (canEncode(coreCharset, c, encoder)) {\n                                accum.append(c);\n                            } else {\n                                // Use numeric entity &#xa0; (or &#160;) if it cannot be encoded, e.g., in Shift_JIS.\n                                // Using hex format for consistency with the default fallback logic.\n                                accum.append(\"&#xa0;\");\n                            }\n                        }\n                        break;\n                    case '<':\n                        // In XML mode, need to preserve - but not encode - < in attributes; but do encode in non-attr\n                        if (escapeMode == EscapeMode.xhtml) {\n                            if (inAttribute)\n                                accum.append(c); // non encoded, needs to be parsed as-is by browser\n                            else\n                                accum.append(\"&lt;\");\n                        } else {\n                             // base mode: just escape in non-attr\n                             if (!inAttribute)\n                                 accum.append(\"&lt;\");\n                             else accum.append(c);\n                        }\n                        break;\n                    case '>':\n                        // In base mode, if in attribute, don't escape >\n                        // In XHTML mode, always escape >\n                        if (!inAttribute || escapeMode == EscapeMode.xhtml)\n                             accum.append(\"&gt;\");\n                         else\n                             accum.append(c);\n                        break;\n                    case '\"':\n                        if (inAttribute)\n                            accum.append(\"&quot;\");\n                        else\n                            accum.append(c);\n                        break;\n                    default:\n                        if (canEncode(coreCharset, c, encoder))\n                            accum.append(c);\n                        else if (map.containsKey(c))\n                            accum.append('&').append(map.get(c)).append(';');\n                        else\n                            accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n                }\n            } else {\n                final String c = new String(Character.toChars(codePoint));\n                if (encoder.canEncode(c)) // uses fallback encoder for simplicity\n                    accum.append(c);\n                else\n                    accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n            }\n        }\n    }\n\n    // Helper method assumed to exist, needed by the escape function\n    // (Exact implementation depends on the surrounding class structure, e.g., Entities.canEncode)\n    private static boolean canEncode(CoreCharset coreCharset, char c, CharsetEncoder encoder) {\n        // Implementation similar to jsoup's Entities.canEncode\n        switch (coreCharset) {\n            case ascii: return c < 0x80;\n            case utf_8: return true; // real implementation needs more nuance based on actual encoder\n            default: return encoder.canEncode(c);\n        }\n    }\n\n    // Stubs for nested types used in the method signature and body\n    // These would be defined elsewhere in the actual jsoup library\n    private static class Document {\n        static class OutputSettings {\n            EscapeMode escapeMode() { return EscapeMode.base; } // Placeholder\n            CharsetEncoder encoder() { return java.nio.charset.StandardCharsets.UTF_8.newEncoder(); } // Placeholder\n            java.nio.charset.Charset charset() { return java.nio.charset.StandardCharsets.UTF_8; } // Placeholder\n        }\n    }\n\n    private enum EscapeMode {\n        base, xhtml, extended; // Simplified names\n        Map<Character, String> getMap() { return java.util.Collections.emptyMap(); } // Placeholder\n    }\n\n    private enum CoreCharset {\n        ascii, utf_8, none;\n        static CoreCharset byName(String name) { // Simplified\n             if (name.equalsIgnoreCase(\"US-ASCII\")) return ascii;\n             if (name.equalsIgnoreCase(\"UTF-8\")) return utf_8;\n             return none;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}