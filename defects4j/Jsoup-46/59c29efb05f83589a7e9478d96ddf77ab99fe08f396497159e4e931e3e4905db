{
    "generation": "import java.nio.charset.Charset;\nimport java.nio.charset.CharsetEncoder;\nimport java.util.Map;\n\nimport org.jsoup.helper.StringUtil;\nimport org.jsoup.internal.Entities;\nimport org.jsoup.internal.Entities.CoreCharset;\nimport org.jsoup.internal.Entities.EscapeMode;\n\n// Assuming Document, OutputSettings are available in the context.\n// Placeholder for missing types to allow compilation checking.\nclass Document {\n    static class OutputSettings {\n        EscapeMode escapeMode() { return EscapeMode.base; }\n        CharsetEncoder encoder() { return Charset.forName(\"UTF-8\").newEncoder(); }\n        Charset charset() { return Charset.forName(\"UTF-8\"); }\n    }\n}\n\nclass Scratch {\n    // this method is ugly, and does a lot. but other breakups cause rescanning and stringbuilder generations\n    static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n\n        boolean lastWasWhite = false;\n        boolean reachedNonWhite = false;\n        final EscapeMode escapeMode = out.escapeMode();\n        final CharsetEncoder encoder = out.encoder();\n        final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n        final Map<Character, String> map = escapeMode.getMap();\n        final int length = string.length();\n\n        int codePoint;\n        for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n            codePoint = string.codePointAt(offset);\n\n            if (normaliseWhite) {\n                if (StringUtil.isWhitespace(codePoint)) {\n                    if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                        continue;\n                    accum.append(' ');\n                    lastWasWhite = true;\n                    continue;\n                } else {\n                    lastWasWhite = false;\n                    reachedNonWhite = true;\n                }\n            }\n            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):\n            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                final char c = (char) codePoint;\n                // html specific and required escapes:\n                switch (c) {\n                    case '&':\n                        accum.append(\"&amp;\");\n                        break;\n                    case 0xA0: // nbsp\n                        if (escapeMode != EscapeMode.xhtml) {\n                            accum.append(\"&nbsp;\");\n                            break; // only break if handled, otherwise fall through to default for xml mode\n                        }\n                        // if escapeMode == xhtml, fall through to default case, which will escape if invalid instead of outputting literal\n                    case '<':\n                        // escape < unless in attribute\n                        if (!inAttribute || escapeMode == EscapeMode.xhtml) // Fix: Also escape in XHTML attributes, which browsers tolerate but spec requires escaped\n                            accum.append(\"&lt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '>':\n                        // Note: not escaping > in attribute values, per spec\n                        if (!inAttribute)\n                            accum.append(\"&gt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '\"':\n                        if (inAttribute)\n                            accum.append(\"&quot;\");\n                        else\n                            accum.append(c);\n                        break;\n                    default:\n                        // handles OutputSettings.ESC.xhtml falling through for nbsp\n                        if (canEncode(coreCharset, c, encoder))\n                            accum.append(c);\n                        else if (map.containsKey(c))\n                            accum.append('&').append(map.get(c)).append(';');\n                        else\n                            accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n                }\n            } else {\n                final String c = new String(Character.toChars(codePoint));\n                if (encoder.canEncode(c)) // uses fallback encoder for simplicity\n                    accum.append(c);\n                else\n                    accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n            }\n        }\n    }\n\n    // Helper method provided by Entities - needed for the escape method. Assume it exists.\n    private static boolean canEncode(final CoreCharset charset, final char c, final CharsetEncoder fallback) {\n        if (charset == null) // non-core, use fallback\n             return fallback.canEncode(c);\n\n         switch (charset) {\n             case ascii:\n                 return c < 0x80;\n             case utf:\n                 return true; // real check done later by encoder\n             default:\n                 return fallback.canEncode(c);\n         }\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}