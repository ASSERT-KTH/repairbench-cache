{
    "generation": "    private Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        String key = tq.consumeAttributeKey();\n        String value = \"\";\n        boolean lookedForValue = false; // Track if we parsed a value associated with an equals sign\n        tq.consumeWhitespace();\n        if (tq.matchChomp(\"=\")) {\n            lookedForValue = true;\n            tq.consumeWhitespace();\n\n            if (tq.matchChomp(SQ)) {\n                value = tq.chompTo(SQ);\n            } else if (tq.matchChomp(DQ)) {\n                value = tq.chompTo(DQ);\n            } else {\n                StringBuilder valueAccum = new StringBuilder();\n                // no ' or \" to look for, so scan to end tag or space (or end of stream)\n                // Note: This condition is stricter than HTML5 spec allows (e.g., allows /).\n                // Maintaining original behavior for this fix.\n                while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                    valueAccum.append(tq.consume());\n                }\n                value = valueAccum.toString();\n            }\n            tq.consumeWhitespace(); // Consume any whitespace after the value\n        }\n        \n        if (key.length() != 0) {\n            // Ensure value is entity-decoded if necessary by using createFromEncoded\n            return Attribute.createFromEncoded(key, value);\n        } else {\n            // Key is empty. This could be due to =val, =\"\", ='val', or just junk chars.\n            // If we didn't look for a value (no '='), it means the character that stopped\n            // consumeAttributeKey() is still the current character. Consume it\n            // to prevent an infinite loop if it's not a relevant closing character.\n            // Do not consume if we are already at the end of the input.\n            if (!lookedForValue && !tq.isEmpty()) {\n                 // Check added to prevent StringIndexOutOfBoundsException\n                tq.consume();\n            }\n            // Return null because we couldn't form a valid attribute.\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}