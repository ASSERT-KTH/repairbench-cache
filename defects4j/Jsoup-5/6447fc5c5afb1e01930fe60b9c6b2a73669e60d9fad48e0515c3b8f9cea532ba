{
    "generation": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    // nothing left or at end of tag\n    if (tq.isEmpty() || tq.matchesAny(\"/>\", \">\")) {\n        return null;\n    }\n    // consume a potential key\n    String key = tq.consumeAttributeKey();\n    // if no key, skip stray '='+value or consume one char to recover\n    if (key.length() == 0) {\n        if (tq.matchChomp(\"=\")) {\n            // skip any value after '='\n            tq.consumeWhitespace();\n            if (tq.matchChomp(SQ)) {\n                tq.chompTo(SQ);\n                tq.matchChomp(SQ);\n            } else if (tq.matchChomp(DQ)) {\n                tq.chompTo(DQ);\n                tq.matchChomp(DQ);\n            } else {\n                while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                    tq.consume();\n                }\n            }\n        } else if (!tq.isEmpty()) {\n            tq.consume();\n        }\n        return null;\n    }\n    // parse optional value for a valid key\n    String value = \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"=\")) {\n        tq.consumeWhitespace();\n        if (tq.matchChomp(SQ)) {\n            // single-quoted\n            value = tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            // double-quoted\n            value = tq.chompTo(DQ);\n        } else {\n            // unquoted\n            StringBuilder sb = new StringBuilder();\n            while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                sb.append(tq.consume());\n            }\n            value = sb.toString();\n        }\n    }\n    // validate the key: must start with a letter, '_' or ':',\n    // subsequent chars may be letters, digits, '_', ':', '-', or '.'\n    char c0 = key.charAt(0);\n    if (!((c0 >= 'A' && c0 <= 'Z')\n        || (c0 >= 'a' && c0 <= 'z')\n        || c0 == '_'\n        || c0 == ':')) {\n        return null;\n    }\n    for (int i = 1; i < key.length(); i++) {\n        char c = key.charAt(i);\n        if (!((c >= 'A' && c <= 'Z')\n            || (c >= 'a' && c <= 'z')\n            || (c >= '0' && c <= '9')\n            || c == '_'\n            || c == ':'\n            || c == '-'\n            || c == '.')) {\n            return null;\n        }\n    }\n    return Attribute.createFromEncoded(key, value);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}