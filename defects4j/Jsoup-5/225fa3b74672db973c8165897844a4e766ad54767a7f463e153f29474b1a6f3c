{
    "generation": "    private Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        String key = tq.consumeAttributeKey();\n        String value = \"\";\n        tq.consumeWhitespace();\n        if (tq.matchChomp(\"=\")) {\n            tq.consumeWhitespace();\n\n            if (tq.matchChomp(SQ)) {\n                value = tq.chompTo(SQ);\n            } else if (tq.matchChomp(DQ)) {\n                value = tq.chompTo(DQ);\n            } else {\n                StringBuilder valueAccum = new StringBuilder();\n                // no ' or \" to look for, so scan to end tag or space (or end of stream)\n                // simplified condition compared to original jsoup (which uses matchesAnySorted) - but kept original logic\n                while (!tq.isEmpty() && !tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace()) {\n                    valueAccum.append(tq.consume());\n                }\n                value = valueAccum.toString();\n            }\n            tq.consumeWhitespace(); // consume whitespace after value\n        }\n        if (key.length() != 0)\n            // Note: key should be lower-cased, but this happens in Attribute constructor\n            return Attribute.createFromEncoded(key, value);\n        else {\n            // tq.consume(); // Removed: When key is empty, it means we hit a non-attribute char (like > or /) or EOF. Do not consume it here; the calling code (Tag parser) needs to handle it. Consuming here could lead to StringIndexOutOfBoundsException if tq is empty.\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}