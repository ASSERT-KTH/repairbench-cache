{
    "generation": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    // if next char is a '<', we're at the start of a new tag, so bail out\n    if (tq.isEmpty() || tq.matches(\"<\")) {\n        return null;\n    }\n\n    String key = tq.consumeAttributeKey();\n    String value = \"\";\n\n    // drop any \"attribute\" whose key starts with an invalid name-start character (e.g. dots)\n    if (key.length() > 0) {\n        char c0 = key.charAt(0);\n        if (!(Character.isLetterOrDigit(c0) || c0 == '_' || c0 == ':' || c0 == '-')) {\n            return null;\n        }\n    }\n\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"=\")) {\n        tq.consumeWhitespace();\n\n        if (tq.matchChomp(SQ)) {\n            value = tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            value = tq.chompTo(DQ);\n        } else {\n            StringBuilder valueAccum = new StringBuilder();\n            // no ' or \" to look for, so scan to end tag or space (or end-of-stream)\n            while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                valueAccum.append(tq.consume());\n            }\n            value = valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n\n    if (key.length() != 0) {\n        return Attribute.createFromEncoded(key, value);\n    } else {\n        // skip one character to avoid stalling, but only if there is one\n        if (!tq.isEmpty()) {\n            tq.consume();\n        }\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}