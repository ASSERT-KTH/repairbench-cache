{
    "generation": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    // read the key (may be empty if starts with = or invalid char)\n    String key = tq.consumeAttributeKey();\n    String value = \"\";\n    boolean hasEq = false;\n    tq.consumeWhitespace();\n    // if there's an \"=\", consume it and parse the value\n    if (tq.matchChomp(\"=\")) {\n        hasEq = true;\n        tq.consumeWhitespace();\n        if (tq.matchChomp(SQ)) {\n            value = tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            value = tq.chompTo(DQ);\n        } else {\n            StringBuilder valueAccum = new StringBuilder();\n            // no quote to look for, so scan to end tag or space (or end of stream)\n            while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                valueAccum.append(tq.consume());\n            }\n            value = valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    // if we have a non-empty key, verify it starts with a letter; else drop it\n    if (key.length() != 0) {\n        char c0 = key.charAt(0);\n        if (Character.isLetter(c0)) {\n            return Attribute.createFromEncoded(key, value);\n        } else {\n            return null;\n        }\n    } else {\n        // no key: if we didn't just consume an \"=\", skip one char to avoid stalling\n        if (!hasEq && !tq.isEmpty()) {\n            tq.consume();\n        }\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}