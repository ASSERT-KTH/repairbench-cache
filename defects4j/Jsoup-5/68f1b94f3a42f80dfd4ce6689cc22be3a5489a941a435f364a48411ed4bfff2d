{
    "generation": "private Attribute parseAttribute() {\n    // skip any leading whitespace\n    tq.consumeWhitespace();\n    // attempt to read a valid attribute key\n    String key = tq.consumeAttributeKey();\n    // placeholder for the attribute value\n    String value = \"\";\n\n    // if no key was read, skip the garbage up to whitespace or tag delimiter\n    if (key.length() == 0) {\n        while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n            tq.consume();\n        }\n        // also skip any trailing whitespace before returning\n        tq.consumeWhitespace();\n        return null;\n    }\n\n    // for a valid key, see if there's an '=' to read a value\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"=\")) {\n        tq.consumeWhitespace();\n        if (tq.matchChomp(SQ)) {\n            // single\u2010quoted value\n            value = tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            // double\u2010quoted value\n            value = tq.chompTo(DQ);\n        } else {\n            // unquoted value: read until whitespace or tag delimiter\n            StringBuilder accum = new StringBuilder();\n            while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                accum.append(tq.consume());\n            }\n            value = accum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n\n    return Attribute.createFromEncoded(key, value);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}