{
    "generation": "    private Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        String key = tq.consumeAttributeKey();\n        String value = \"\";\n        tq.consumeWhitespace();\n\n        // Introduce a flag to track if '=' was matched and consumed\n        boolean hasEq = tq.matchChomp(\"=\");\n\n        if (hasEq) {\n            tq.consumeWhitespace();\n\n            if (tq.matchChomp(SQ)) {\n                value = tq.chompTo(SQ);\n            } else if (tq.matchChomp(DQ)) {\n                value = tq.chompTo(DQ);\n            } else {\n                StringBuilder valueAccum = new StringBuilder();\n                // no ' or \" to look for, so scan to end tag or space (or end of stream)\n                while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                    valueAccum.append(tq.consume());\n                }\n                value = valueAccum.toString();\n            }\n            tq.consumeWhitespace();\n        }\n\n        if (key.length() != 0) {\n            return Attribute.createFromEncoded(key, value);\n        } else {\n            // Key is empty, indicating a malformed attribute.\n            // If an '=' was NOT present, we need to consume the character that prevented a key from being parsed (e.g., '/', '\"').\n            // We must also ensure the queue is not empty before attempting to consume.\n            if (!hasEq && !tq.isEmpty()) {\n                tq.consume();\n            }\n            // In either case (whether '=' was handled or not, or a junk character was consumed),\n            // we return null as no valid attribute key was found.\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}