{
    "generation": "    private Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        String key = tq.consumeAttributeKey();\n        String value = \"\";\n        boolean eqFound = false; // Flag to track if '=' was consumed\n        tq.consumeWhitespace();\n        if (tq.matchChomp(\"=\")) {\n            eqFound = true; // Mark that '=' was found and consumed\n            tq.consumeWhitespace();\n\n            if (tq.matchChomp(SQ)) {\n                value = tq.chompTo(SQ);\n            } else if (tq.matchChomp(DQ)) {\n                value = tq.chompTo(DQ);\n            } else {\n                StringBuilder valueAccum = new StringBuilder();\n                // no ' or \" to look for, so scan to end tag or space (or end of stream)\n                // Original loop condition: Scan until space, <, /, > or EOF\n                while (!tq.isEmpty() && !tq.matchesWhitespace() && !tq.matchesAny(\"<\", \"/>\", \">\")) {\n                    valueAccum.append(tq.consume());\n                }\n                value = valueAccum.toString();\n            }\n            tq.consumeWhitespace();\n        }\n        if (key.length() != 0)\n            return Attribute.createFromEncoded(key, value);\n        else {\n            // Key is empty. This means consumeAttributeKey() returned empty.\n            // If we found and consumed an equals sign ('=') followed by a value (e.g., <tag =val>),\n            // we've already processed the relevant parts. Don't consume anything further.\n            // If we did *not* find an equals sign (e.g., <tag .badkey>), it means the character\n            // immediately following the tag name or previous attribute was invalid as an attribute key start.\n            // In this case, consume that single character to make progress.\n            if (!eqFound && !tq.isEmpty()) { // Only consume if '=' was NOT found and the queue is not empty\n                tq.consume();\n            }\n            return null; // Return null as the attribute is invalid (empty key)\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}