{
    "generation": "private Attribute parseAttribute() {\n    // skip leading whitespace\n    tq.consumeWhitespace();\n\n    // read the attribute key, stopping at whitespace, '=', '/', '>', or '<'\n    StringBuilder keyBuilder = new StringBuilder();\n    while (!tq.isEmpty() && !tq.matchesWhitespace() && !tq.matchesAny(\"=\", \"/\", \">\", \"<\")) {\n        keyBuilder.append(tq.consume());\n    }\n    String key = keyBuilder.toString();\n\n    String value = \"\";\n    tq.consumeWhitespace();\n\n    // if there's an '=', read the value (quoted or unquoted)\n    if (tq.matchChomp(\"=\")) {\n        tq.consumeWhitespace();\n        if (tq.matchChomp(SQ)) {\n            value = tq.chompTo(SQ);\n            // note: do not insist on consuming the closing quote here\n        } else if (tq.matchChomp(DQ)) {\n            value = tq.chompTo(DQ);\n        } else {\n            StringBuilder valueBuilder = new StringBuilder();\n            // no quotes, scan until end tag, whitespace, or end of stream\n            while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                valueBuilder.append(tq.consume());\n            }\n            value = valueBuilder.toString();\n        }\n        tq.consumeWhitespace();\n    }\n\n    // drop attributes with empty or non\u2010letter/digit keys\n    if (key.length() == 0 || !Character.isLetterOrDigit(key.charAt(0))) {\n        // if the next char is a '>', consume it so we don't leave it hanging\n        if (tq.matchChomp(\">\")) {\n            // no-op\n        }\n        return null;\n    }\n\n    return Attribute.createFromEncoded(key, value);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}