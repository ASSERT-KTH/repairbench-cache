{
    "generation": "  /**\n   * Check whether there's any property conflict for for a particular super\n   * interface\n   * @param t The node traversal object that supplies context\n   * @param n The node being visited\n   * @param functionName The function name being checked\n   * @param properties The property names in the super interfaces that have\n   * been visited\n   * @param currentProperties The property names in the super interface\n   * that have been visited\n   * @param interfaceType The super interface that is being visited\n   */\n  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    // If interfaceType itself is null, which can happen if it comes from a\n    // badly resolved extended interface (e.g., in a recursive call),\n    // we should just return to avoid NullPointerException.\n    if (interfaceType == null) {\n      return;\n    }\n\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    Set<String> currentPropertyNames;\n    // This can be the case if interfaceType is proxy to a non-existent\n    // object (which is a bad type annotation, but shouldn't crash).\n    if (implicitProto == null) {\n      // If the implicit prototype is null, there are no own properties\n      // to check for this interface. Use an empty set.\n      currentPropertyNames = java.util.Collections.emptySet();\n    } else {\n      currentPropertyNames = implicitProto.getOwnPropertyNames();\n    }\n\n    for (String name : currentPropertyNames) {\n      ObjectType oType = properties.get(name);\n      if (oType != null) {\n        // Ensure property types are equivalent if the property exists in\n        // previously visited super interfaces.\n        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name))) {\n          compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));\n        }\n      }\n      // Add the property from the current interface to the map of properties\n      // from the current super interface chain.\n      currentProperties.put(name, interfaceType);\n    }\n\n    // Recursively check extended interfaces\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      // It's possible for iType to be null if a declared extended interface\n      // is non-existent or cannot be resolved, as seen in the failing test.\n      // We must check for null before recursing.\n      if (iType != null) {\n        checkInterfaceConflictProperties(t, n, functionName, properties,\n            currentProperties, iType);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}