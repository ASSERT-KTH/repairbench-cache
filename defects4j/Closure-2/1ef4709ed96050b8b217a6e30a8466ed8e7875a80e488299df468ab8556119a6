{
    "generation": "  /**\n   * Check whether there's any property conflict for for a particular super\n   * interface\n   * @param t The node traversal object that supplies context\n   * @param n The node being visited\n   * @param functionName The function name being checked\n   * @param properties The property names in the super interfaces that have\n   * been visited\n   * @param currentProperties The property names in the super interface\n   * that have been visited\n   * @param interfaceType The super interface that is being visited\n   */\n  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    Set<String> currentPropertyNames;\n    // This can be the case if interfaceType is proxy to a non-existent\n    // object (which is a bad type annotation, but shouldn't crash).\n    // If the implicit prototype is null, it means this interfaceType\n    // is likely invalid or a proxy to a non-existent object.\n    // In such cases, we should not attempt to get its own property names\n    // as it would lead to a NullPointerException. We treat it as having\n    // no properties for conflict checking purposes.\n    if (implicitProto == null) {\n      currentPropertyNames = java.util.Collections.emptySet();\n    } else {\n      currentPropertyNames = implicitProto.getOwnPropertyNames();\n    }\n\n    for (String name : currentPropertyNames) {\n      ObjectType oType = properties.get(name);\n      if (oType != null) {\n        // If implicitProto was not null, then interfaceType.getPropertyType(name)\n        // should generally return a non-null JSType for a property listed in\n        // currentPropertyNames. Similarly for oType.\n        // However, it's good practice to ensure they are not null before calling isEquivalentTo,\n        // although the primary NPE from the test case is addressed by the implicitProto check.\n        com.google.javascript.rhino.jstype.JSType interfacePropertyType = interfaceType.getPropertyType(name);\n        com.google.javascript.rhino.jstype.JSType existingPropertyType = oType.getPropertyType(name);\n\n        if (interfacePropertyType != null && existingPropertyType != null) {\n          if (!interfacePropertyType.isEquivalentTo(existingPropertyType)) {\n            compiler.report(\n                t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                    functionName, name, oType.toString(),\n                    interfaceType.toString()));\n          }\n        }\n      }\n      currentProperties.put(name, interfaceType);\n    }\n    // getCtorExtendedInterfaces() on ObjectType typically returns an empty list\n    // for unknown types, rather than null, so a null check here is usually not needed.\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}