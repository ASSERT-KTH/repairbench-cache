{
    "generation": "  /**\n   * Check whether there's any property conflict for for a particular super\n   * interface\n   * @param t The node traversal object that supplies context\n   * @param n The node being visited\n   * @param functionName The function name being checked\n   * @param properties The property names in the super interfaces that have\n   * been visited (from previous sibling branches).\n   * @param currentProperties The property names in the super interface\n   * hierarchy currently being visited.\n   * @param interfaceType The super interface that is being visited\n   */\n  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n\n    // Check if the implicit prototype is null. This can happen if the\n    // interfaceType is a proxy to a non-existent object (a bad type annotation).\n    // In this case, we shouldn't crash, and there are no properties to check.\n    if (implicitProto != null) {\n      Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n      for (String name : currentPropertyNames) {\n        ObjectType oType = properties.get(name);\n        // Check for conflict with a property from a previously visited branch.\n        if (oType != null) {\n          // Check if the property types are compatible.\n          if (!interfaceType.getPropertyType(name).isEquivalentTo(\n              oType.getPropertyType(name))) {\n            compiler.report(\n                t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                    functionName, name, oType.toString(),\n                    interfaceType.toString()));\n          }\n        }\n        // Record this property name and the interface it's from for the current branch.\n        currentProperties.put(name, interfaceType);\n      }\n    }\n\n    // Recursively check interfaces extended by the current one, even if the\n    // current interfaceType itself was problematic (e.g., non-existent).\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}