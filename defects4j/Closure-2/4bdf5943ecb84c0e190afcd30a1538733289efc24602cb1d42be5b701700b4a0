{
    "generation": "  /**\n   * Check whether there's any property conflict for for a particular super\n   * interface\n   * @param t The node traversal object that supplies context\n   * @param n The node being visited\n   * @param functionName The function name being checked\n   * @param properties The property names in the super interfaces that have\n   * been visited\n   * @param currentProperties The property names in the super interface\n   * that have been visited\n   * @param interfaceType The super interface that is being visited\n   */\n  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    // interfaceType might be null if it resolves to an unknown type.\n    // This can happen if an extended interface name is misspelled.\n    if (interfaceType == null) {\n      return; // Nothing to check.\n    }\n\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    // Check if the implicit prototype is null. This can happen if interfaceType\n    // is a proxy to a non-existent object (e.g., @extends {NotFound}),\n    // which is a bad type annotation, but shouldn't crash the compiler.\n    if (implicitProto != null) {\n      // Process properties only if the implicit prototype is available.\n      Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n      for (String name : currentPropertyNames) {\n        ObjectType oType = properties.get(name);\n        if (oType != null) {\n          // Check for incompatible property types. Use JSType's isEquivalentTo.\n          // Assume getPropertyType returns a valid JSType if the property name\n          // was retrieved from getOwnPropertyNames.\n          if (!interfaceType.getPropertyType(name).isEquivalentTo(\n              oType.getPropertyType(name))) {\n            compiler.report(\n                t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                    functionName, name, oType.toString(),\n                    interfaceType.toString()));\n          }\n        }\n        // Record this property and the interface it came from.\n        currentProperties.put(name, interfaceType);\n      }\n    }\n    // ImplicitProto might be null, but the interface might still nominally\n    // extend other interfaces (even if incorrectly typed). Recurse to check those.\n    // For example, /** @interface I extends DoesNotExist, RealInterface */\n    // We should still check RealInterface.\n    Iterable<ObjectType> extendedInterfaces = interfaceType.getCtorExtendedInterfaces();\n    // Check if the iterable itself is null for safety, although typically it should return an empty collection.\n    if (extendedInterfaces != null) {\n      for (ObjectType iType : extendedInterfaces) {\n        // The recursive call will handle null iType at its start.\n        checkInterfaceConflictProperties(t, n, functionName, properties,\n            currentProperties, iType);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}