{
    "generation": "private void checkInterfaceConflictProperties(\n    NodeTraversal t, Node n,\n    String functionName,\n    HashMap<String, ObjectType> properties,\n    HashMap<String, ObjectType> currentProperties,\n    ObjectType interfaceType) {\n  // Guard against a proxy for a non-existent interface:\n  if (interfaceType == null) {\n    return;\n  }\n  ObjectType implicitProto = interfaceType.getImplicitPrototype();\n  // This can be the case if interfaceType is proxy to a non-existent\n  // object (which is a bad type annotation, but shouldn't crash).\n  if (implicitProto == null) {\n    return;\n  }\n\n  for (String name : implicitProto.getOwnPropertyNames()) {\n    ObjectType oType = properties.get(name);\n    if (oType != null) {\n      if (!interfaceType.getPropertyType(name)\n                         .isEquivalentTo(oType.getPropertyType(name))) {\n        compiler.report(\n            t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                         functionName, name,\n                         oType.toString(),\n                         interfaceType.toString()));\n      }\n    }\n    currentProperties.put(name, interfaceType);\n  }\n\n  for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n    if (iType != null) {\n      checkInterfaceConflictProperties(\n          t, n, functionName, properties, currentProperties, iType);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}