{
    "generation": "/**\n * Check whether there's any property conflict for a particular super\n * interface\n * @param t The node traversal object that supplies context\n * @param n The node being visited\n * @param functionName The function name being checked\n * @param properties The property names in the super interfaces that have\n * been visited\n * @param currentProperties The property names in the super interface\n * that have been visited\n * @param interfaceType The super interface that is being visited\n */\nprivate void checkInterfaceConflictProperties(\n    NodeTraversal t, Node n, String functionName,\n    HashMap<String, ObjectType> properties,\n    HashMap<String, ObjectType> currentProperties,\n    ObjectType interfaceType) {\n  ObjectType implicitProto = interfaceType.getImplicitPrototype();\n  if (implicitProto == null) {\n    // Proxy for a non-existent interface; skip to avoid NPE.\n    return;\n  }\n  Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n  for (String name : currentPropertyNames) {\n    ObjectType oType = properties.get(name);\n    if (oType != null) {\n      if (!interfaceType.getPropertyType(name)\n                         .isEquivalentTo(oType.getPropertyType(name))) {\n        compiler.report(\n            t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                        functionName, name,\n                        oType.toString(), interfaceType.toString()));\n      }\n    }\n    currentProperties.put(name, interfaceType);\n  }\n  for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n    checkInterfaceConflictProperties(\n        t, n, functionName, properties, currentProperties, iType);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}