{
    "generation": "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n    String functionName, HashMap<String, ObjectType> properties,\n    HashMap<String, ObjectType> currentProperties,\n    ObjectType interfaceType) {\n  // If the interfaceType is a proxy for a non-existent object,\n  // getImplicitPrototype() may return null.  Just bail out in that case.\n  ObjectType implicitProto = interfaceType.getImplicitPrototype();\n  if (implicitProto == null) {\n    return;\n  }\n\n  // Otherwise, check all own properties on the implicit prototype.\n  for (String name : implicitProto.getOwnPropertyNames()) {\n    ObjectType prevType = properties.get(name);\n    if (prevType != null) {\n      if (!interfaceType.getPropertyType(name)\n            .isEquivalentTo(prevType.getPropertyType(name))) {\n        compiler.report(\n            t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                        functionName,\n                        name,\n                        prevType.toString(),\n                        interfaceType.toString()));\n      }\n    }\n    currentProperties.put(name, interfaceType);\n  }\n\n  // Recurse into any interfaces this one extends.\n  for (ObjectType superIface : interfaceType.getCtorExtendedInterfaces()) {\n    if (superIface != null) {\n      checkInterfaceConflictProperties(\n          t, n, functionName, properties, currentProperties, superIface);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}