{
    "generation": "  /**\n   * Check whether there's any property conflict for for a particular super\n   * interface\n   * @param t The node traversal object that supplies context\n   * @param n The node being visited\n   * @param functionName The function name being checked\n   * @param properties The property names in the super interfaces that have\n   * been visited\n   * @param currentProperties The property names in the super interface\n   * that have been visited\n   * @param interfaceType The super interface that is being visited\n   */\n  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n\n    // Get the implicit prototype. As per the comment in the original code,\n    // this can be null if interfaceType is a proxy to a non-existent object\n    // (a bad type annotation that shouldn't crash).\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    Set<String> currentPropertyNames;\n\n    if (implicitProto == null) {\n      // If the implicit prototype is null, it means this interface type\n      // represents a non-existent or invalid type. There are no actual\n      // properties to check for conflicts on this specific interface.\n      currentPropertyNames = java.util.Collections.emptySet();\n    } else {\n      // Otherwise, get the own property names from the implicit prototype.\n      currentPropertyNames = implicitProto.getOwnPropertyNames();\n    }\n\n    // Iterate through the current interface's properties to check for conflicts\n    for (String name : currentPropertyNames) {\n      ObjectType oType = properties.get(name);\n      if (oType != null) {\n        // Get the specific property types from both the current interface and\n        // the previously seen interface. These can be null if the property\n        // is not directly defined on the object type (e.g., inherited or absent).\n        JSType interfacePropertyType = interfaceType.getPropertyType(name);\n        JSType oPropertyType = oType.getPropertyType(name);\n\n        // Only compare if both property types are valid and non-null.\n        // If one is null, it signifies the property is not explicitly defined\n        // on that type in a way that allows direct comparison here.\n        if (interfacePropertyType != null && oPropertyType != null) {\n          if (!interfacePropertyType.isEquivalentTo(oPropertyType)) {\n            compiler.report(\n                t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                    functionName, name, oType.toString(),\n                    interfaceType.toString()));\n          }\n        }\n      }\n      currentProperties.put(name, interfaceType);\n    }\n\n    // Recursively check all extended interfaces.\n    // It's possible for getCtorExtendedInterfaces() to return a list\n    // that might contain null ObjectType elements if an extended interface\n    // annotation refers to a non-existent type. We must guard against this\n    // to prevent NullPointerExceptions in subsequent recursive calls.\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      if (iType != null) { // Crucial null check for the recursive argument\n        checkInterfaceConflictProperties(t, n, functionName, properties,\n            currentProperties, iType);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}