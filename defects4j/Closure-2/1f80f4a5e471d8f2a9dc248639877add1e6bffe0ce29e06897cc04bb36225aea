{
    "generation": "private void checkInterfaceConflictProperties(\n    NodeTraversal t, Node n,\n    String functionName,\n    HashMap<String, ObjectType> properties,\n    HashMap<String, ObjectType> currentProperties,\n    ObjectType interfaceType) {\n  // If this interfaceType is a proxy for a non\u2010existent type,\n  // its implicit prototype may be null.  Just skip it.\n  ObjectType implicitProto = interfaceType.getImplicitPrototype();\n  if (implicitProto == null) {\n    return;\n  }\n\n  Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n  for (String name : currentPropertyNames) {\n    ObjectType oType = properties.get(name);\n    if (oType != null) {\n      if (!interfaceType.getPropertyType(name)\n           .isEquivalentTo(oType.getPropertyType(name))) {\n        compiler.report(\n            t.makeError(\n                n,\n                INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                functionName,\n                name,\n                oType.toString(),\n                interfaceType.toString()));\n      }\n    }\n    currentProperties.put(name, interfaceType);\n  }\n\n  for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n    checkInterfaceConflictProperties(\n        t, n, functionName, properties, currentProperties, iType);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}