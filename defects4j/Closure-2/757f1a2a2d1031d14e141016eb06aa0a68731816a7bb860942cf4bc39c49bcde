{
    "generation": "  /**\n   * Check whether there's any property conflict for for a particular super\n   * interface\n   * @param t The node traversal object that supplies context\n   * @param n The node being visited\n   * @param functionName The function name being checked\n   * @param properties The property names in the super interfaces that have\n   * been visited\n   * @param currentProperties The property names in the super interface\n   * that have been visited\n   * @param interfaceType The super interface that is being visited\n   */\n  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    // This can be the case if interfaceType is proxy to a non-existent\n    // object (which is a bad type annotation, but shouldn't crash).\n    // Add null check for implicitProto before using it.\n    if (implicitProto != null) {\n      Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n      for (String name : currentPropertyNames) {\n        ObjectType oType = properties.get(name);\n        if (oType != null) {\n          // It's expected that getPropertyType returns a non-null JSType for a property\n          // that exists on the prototype chain. Also, JSType.isEquivalentTo()\n          // is generally designed to handle null arguments by returning false.\n          // The primary NPE fix targets the implicitProto.getOwnPropertyNames() call.\n          if (!interfaceType.getPropertyType(name).isEquivalentTo(\n              oType.getPropertyType(name))) {\n            compiler.report(\n                t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                    functionName, name, oType.toString(),\n                    interfaceType.toString()));\n          }\n        }\n        currentProperties.put(name, interfaceType);\n      }\n    }\n\n    // Now, handle the recursive calls for extended interfaces.\n    // interfaceType.getCtorExtendedInterfaces() might return a list containing nulls\n    // if the extended interface cannot be resolved (e.g., due to bad annotations like nonExistent1).\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      // Add null check for iType before making the recursive call.\n      if (iType != null) {\n        checkInterfaceConflictProperties(t, n, functionName, properties,\n            currentProperties, iType);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}