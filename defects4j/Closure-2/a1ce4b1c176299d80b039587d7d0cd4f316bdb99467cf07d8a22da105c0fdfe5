{
    "generation": "  /**\n   * Check whether there's any property conflict for for a particular super\n   * interface\n   * @param t The node traversal object that supplies context\n   * @param n The node being visited\n   * @param functionName The function name being checked\n   * @param properties The property names in the super interfaces that have\n   * been visited\n   * @param currentProperties The property names in the super interface\n   * that have been visited\n   * @param interfaceType The super interface that is being visited\n   */\n  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    // This can be the case if interfaceType is proxy to a non-existent\n    // object (which is a bad type annotation, but shouldn't crash).\n    if (implicitProto != null) { // Add null check for implicitProto\n      Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();\n      for (String name : currentPropertyNames) {\n        ObjectType oType = properties.get(name);\n        if (oType != null) {\n          // Check if the property types are equivalent. Use the JSType methods\n          // directly on the ObjectType representing the interface.\n          com.google.javascript.rhino.jstype.JSType propType = interfaceType.getPropertyType(name);\n          com.google.javascript.rhino.jstype.JSType oPropType = oType.getPropertyType(name);\n\n          // isEquivalentTo should handle unknown types gracefully, but checking\n          // for null might be necessary if getPropertyType can return null.\n          // Assuming getPropertyType returns non-null JSType or UnknownType.\n          if (!propType.isEquivalentTo(oPropType)) {\n            compiler.report(\n                t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                    functionName, name, oType.toString(),\n                    interfaceType.toString()));\n          }\n        }\n        // Record this interface as the source for this property name\n        currentProperties.put(name, interfaceType);\n      }\n    }\n    // Recursively check extended interfaces, even if the current one had a null prototype\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}