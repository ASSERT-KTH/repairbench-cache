{
    "generation": "  /**\n   * Check whether there's any property conflict for for a particular super\n   * interface\n   * @param t The node traversal object that supplies context\n   * @param n The node being visited\n   * @param functionName The function name being checked\n   * @param properties The property names in the super interfaces that have\n   * been visited\n   * @param currentProperties The property names in the super interface\n   * that have been visited\n   * @param interfaceType The super interface that is being visited\n   */\n  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    // interfaceType can be null if this interface is a proxy\n    // to a non-existent object (which is a bad type annotation, but shouldn't crash).\n    // It can also be null if the interface comes from a bad @extends clause.\n    if (interfaceType == null) {\n      return;\n    }\n\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    Set<String> currentPropertyNames;\n    // Check if implicitProto is null, which can happen for proxies to non-existent objects.\n    if (implicitProto != null) {\n      // This can be the case if interfaceType is proxy to a non-existent\n      // object (which is a bad type annotation, but shouldn't crash).\n      currentPropertyNames = implicitProto.getOwnPropertyNames();\n      for (String name : currentPropertyNames) {\n        ObjectType oType = properties.get(name);\n        if (oType != null) {\n          // Check for conflicts, but be robust against null property types\n          // which might occur in malformed types.\n          JSType propType1 = interfaceType.getPropertyType(name);\n          JSType propType2 = oType.getPropertyType(name);\n          boolean incompatible = false;\n          if (propType1 == null || propType2 == null) {\n              // If one is null and the other isn't, they are incompatible.\n              // If both are null, consider them equivalent for this check.\n              if (propType1 != propType2) {\n                  incompatible = true;\n              }\n          } else {\n              // Both are non-null, check equivalence.\n              if (!propType1.isEquivalentTo(propType2)) {\n                  incompatible = true;\n              }\n          }\n\n          if (incompatible) {\n            compiler.report(\n                t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                    functionName, name, oType.toString(),\n                    interfaceType.toString()));\n          }\n        }\n        currentProperties.put(name, interfaceType);\n      }\n    } // End of null check for implicitProto\n\n    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n      // Recursively check inherited interfaces. iType could also be null if\n      // an extended interface is non-existent. Handled by the null check at the start.\n      checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}