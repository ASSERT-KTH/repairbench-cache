{
    "generation": "/**\n * Check whether there's any property conflict for a particular super\n * interface\n * @param t The node traversal object that supplies context\n * @param n The node being visited\n * @param functionName The function name being checked\n * @param properties The property names in the super interfaces that have\n * been visited\n * @param currentProperties The property names in the super interface\n * that have been visited\n * @param interfaceType The super interface that is being visited\n */\nprivate void checkInterfaceConflictProperties(\n    NodeTraversal t, Node n, String functionName,\n    HashMap<String, ObjectType> properties,\n    HashMap<String, ObjectType> currentProperties,\n    ObjectType interfaceType) {\n  // Skip if this interfaceType is a proxy for a non\u2010existent type.\n  ObjectType implicitProto = interfaceType.getImplicitPrototype();\n  if (implicitProto != null) {\n    for (String name : implicitProto.getOwnPropertyNames()) {\n      ObjectType oType = properties.get(name);\n      if (oType != null) {\n        if (!interfaceType.getPropertyType(name)\n                          .isEquivalentTo(oType.getPropertyType(name))) {\n          compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name,\n                  oType.toString(),\n                  interfaceType.toString()));\n        }\n      }\n      currentProperties.put(name, interfaceType);\n    }\n  }\n  // Recurse into any extended interfaces\n  for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n    checkInterfaceConflictProperties(\n        t, n, functionName, properties, currentProperties, iType);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}