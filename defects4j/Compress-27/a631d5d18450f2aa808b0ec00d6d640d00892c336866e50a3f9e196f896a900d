{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle cases of leading NUL or all NULs\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // If all spaces, return 0\n        if (start == end) {\n            return 0L;\n        }\n\n        // Trim all trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids ...\n        // This loop needs to be careful about bounds checking.\n        int realEnd = end; // Store original end for exception message\n        byte trailer = buffer[realEnd - 1]; // Read last char initially\n\n        // Loop while the pointer hasn't reached the start and the character is NUL or space\n        while (start < realEnd && (trailer == 0 || trailer == ' ')) {\n            realEnd--;\n            // Ensure we don't read before the start or decrement end too much\n            if (start < realEnd) {\n                 trailer = buffer[realEnd - 1];\n            } else {\n                // If after trimming, start == realEnd, it means all were spaces/NULs\n                // from the initial start position onwards.\n                break;\n            }\n        }\n\n        // If after trimming leading spaces and trailing NUL/spaces,\n        // nothing is left, return 0. This handles inputs like \" \\0\" or \" \".\n        if (start == realEnd) {\n             return 0L;\n        }\n\n        // Now parse the digits between start and realEnd\n        for ( ;start < realEnd; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist, used by the original code for exceptions.\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) {\n        String M = \"Invalid byte \"+currentByte+\" at offset \"+(currentOffset - offset)+\" in '\";\n        try {\n            M += new String(buffer, offset, length, \"UTF-8\"); // Or appropriate encoding\n        } catch (Exception e) {\n             // Fallback or rethrow\n             M += \"[unparseable buffer content]\";\n        }\n        M += \"' len=\"+length;\n        return M;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}