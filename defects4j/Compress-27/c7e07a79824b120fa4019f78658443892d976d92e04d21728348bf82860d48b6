{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle cases of starting with NUL or all NULs\n        // Based on the test cases and Javadoc, this seems to be the intended behavior\n        // for fields that are effectively empty or represent zero.\n        boolean allNUL = true;\n        for (int i = start; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNUL = false;\n                break;\n            }\n        }\n        if (allNUL) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids ...\n        // This trimming logic might be overly aggressive for strict spec adherence,\n        // but it handles variations found in practice.\n        byte trailer = buffer[end - 1];\n        // Loop must check condition \"start < end\" first to avoid accessing buffer[end - 1]\n        // when end == start after trimming all characters.\n        while (start < end && (trailer == 0 || trailer == ' ')) {\n            end--;\n            // Recalculate trailer byte only if end is still greater than start\n            if (start < end) {\n                trailer = buffer[end - 1];\n            }\n        }\n\n        // After trimming spaces and NULs, if start == end, it signifies an empty field\n        // or a field containing only spaces/NULs. Treat this as 0.\n        if (start == end) {\n            // Previous logic threw an exception here, causing the test failure for {' ', 0}.\n            // Returning 0L aligns with the expected behavior for empty/all-space/all-NUL fields.\n             return 0L;\n        }\n\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                // Use a helper method for consistent exception messages might be cleaner,\n                // but sticking to the original structure for the fix.\n                // The original exceptionMessage helper wasn't provided, so creating a standard message.\n                throw new IllegalArgumentException(\n                        \"Invalid byte \" + currentByte + \" at offset \" + start +\n                        \" in '\" + new String(buffer, offset, length, java.nio.charset.StandardCharsets.UTF_8).replace(\"\\0\", \"{NUL}\") + // For display\n                        \"' len=\" + length);\n\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}