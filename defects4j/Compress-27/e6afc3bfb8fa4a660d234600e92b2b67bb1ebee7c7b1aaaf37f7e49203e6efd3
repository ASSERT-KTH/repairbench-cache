{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Detect leading NUL since Compress 1.4\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids ...\n        // However, some extensions use the whole field, so we don't\n        // require a trailing NUL or space if the trailing byte is\n        // an octal digit.\n        int     trailer = end - 1; // current index of trailing character\n        while (start < end && (buffer[trailer] == 0 || buffer[trailer] == ' ')) {\n            end--;\n            trailer--; // Point to the new trailing character\n            // If start == end, it means we saw only spaces and NULs\n            // which is valid (empty string parsing to 0)\n        }\n        // No need to check 'start == end' here anymore.\n        // If the string became empty after trimming, the loop below\n        // won't execute and result will be 0, which is correct.\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method used by exception reporting in the original code.\n    // Included here for context, but not part of the required fix output.\n    private static String exceptionMessage(byte[] buffer, final int offset,\n                                           final int length, int current, final byte currentByte) {\n        String string = new String(buffer, offset, length);\n        string = string.replace(\"\\0\", \"{NUL}\"); // Replace NULs to print string\n        final String s = \"Invalid byte \"+currentByte+\" at offset \"+(current-offset)+\" in '\"+string+\"' len=\"+length;\n        return s;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}