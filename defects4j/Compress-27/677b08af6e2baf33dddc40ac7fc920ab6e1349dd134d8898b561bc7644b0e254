{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Skip leading spaces and NULs\n    while (start < end && (buffer[start] == 0 || buffer[start] == ' ')) {\n        start++;\n    }\n\n    // If buffer is all NULs or spaces, return 0L\n    if (start == end) {\n        return 0L;\n    }\n\n    // Trim all trailing NULs and spaces.\n    int realEnd = end;\n    while (realEnd > start && (buffer[realEnd - 1] == 0 || buffer[realEnd - 1] == ' ')) {\n        realEnd--;\n    }\n\n    if (realEnd < start) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, (byte) 0));\n    }\n\n    for (int i = start; i < realEnd; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}