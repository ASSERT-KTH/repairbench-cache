{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long result = 0;\n        int end = offset + length;\n        int start = offset;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n        }\n\n        // Check for a leading NUL\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end && buffer[start] == ' ') {\n            start++;\n        }\n\n        // Find trailing space or NUL\n        if (end - 1 < start) {\n            throw new IllegalArgumentException(\"Buffer underflow\");\n        }\n        byte trailer = buffer[end - 1];\n        if (trailer == ' ' || trailer == 0) {\n            end--;\n            if (start == end) {\n                return 0L;\n            }\n        } else {\n            end--;\n        }\n\n        // Now parse digits between start and end\n        for (; start < end; start++) {\n            final byte currentByte = buffer[start];\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        \"Invalid byte \" + currentByte + \" at offset \" + start + \" in '\" +\n                                java.util.Arrays.toString(buffer) + \"'\");\n            }\n            result = (result << 3) | (currentByte - '0');\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}