{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // Skip leading spaces and NULs; treat all-zero/no digits as 0\n    while (start < end && (buffer[start] == 0 || buffer[start] == ' ')){\n        start++;\n    }\n\n    if (start == end) {\n        return 0L;\n    }\n\n    // Trim trailing spaces and NULs\n    byte trailer;\n    do {\n        trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--;\n        } else {\n            break;\n        }\n    } while (start < end);\n\n    if (start == end) {\n        return 0L;\n    }\n\n    for (; start < end; start++){\n        final byte b = buffer[start];\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, b));\n        }\n        result = (result << 3) + (b - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}