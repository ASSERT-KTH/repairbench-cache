{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // To work-around some tar implementations that insert a leading NUL\n        // this method returns 0 if it detects a leading NUL since Commons Compress 1.4.\n        // This check is now performed *after* skipping leading spaces,\n        // as a leading NUL can sometimes be preceded by spaces (e.g. {' ', 0}).\n        // Also, check start < end to prevent AIOOBE if the buffer is all spaces.\n        if (start < end && buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Trim all trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids ...\n        byte trailer = buffer[end - 1]; // Initialize with the last character in the original range\n        while (start < end && (trailer == 0 || trailer == ' ')) {\n            end--;\n            // If 'end' has reached 'start', all remaining content has been trimmed.\n            // Breaking here prevents trying to access buffer[end - 1], which would be buffer[start - 1]\n            // and potentially cause an ArrayIndexOutOfBoundsException.\n            if (start == end) {\n                break;\n            }\n            trailer = buffer[end - 1]; // Get the new character at the end for the next iteration.\n        }\n        if (start == end) { // All characters were trimmed, or no valid digits found after trimming.\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}