{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // If the first byte is NUL or space, return 0\n        if (buffer[start] == 0 || buffer[start] == ' ') {\n            // Check if all bytes are NUL or space\n            boolean allZeroOrSpace = true;\n            for (int i = start; i < end; i++) {\n                if (buffer[i] != 0 && buffer[i] != ' ') {\n                    allZeroOrSpace = false;\n                    break;\n                }\n            }\n            if (allZeroOrSpace) {\n                return 0L;\n            }\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids ...\n        // First check if the entire buffer is just NULs or spaces\n        boolean allTrailingZeroOrSpace = true;\n        for (int i = start; i < end; i++) {\n            if (buffer[i] != ' ' && buffer[i] != 0) {\n                allTrailingZeroOrSpace = false;\n                break;\n            }\n        }\n        if (allTrailingZeroOrSpace) {\n            return 0L;\n        }\n\n        // Now process the actual trailing spaces/NULs\n        byte trailer = buffer[end - 1];\n        while (start < end && (trailer == 0 || trailer == ' ')) {\n            end--;\n            trailer = buffer[end - 1];\n        }\n        if (start == end) {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}