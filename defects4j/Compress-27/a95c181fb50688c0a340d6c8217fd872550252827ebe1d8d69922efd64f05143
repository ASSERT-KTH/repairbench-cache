{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Accept all NUL input or leading NUL/space as \"0\"\n    boolean allNulsOrSpaces = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0 && buffer[i] != ' ') {\n            allNulsOrSpaces = false;\n            break;\n        }\n    }\n    if (allNulsOrSpaces) {\n        return 0L;\n    }\n    if (buffer[start] == 0 || buffer[start] == ' ') {\n        // skip all leading NULs and spaces\n        while (start < end && (buffer[start] == 0 || buffer[start] == ' ')) {\n            start++;\n        }\n        // all zeroes/spaces\n        if (start == end) {\n            return 0L;\n        }\n    }\n\n    // Find position where trailing NULs and spaces start\n    int trailerIndex = end - 1;\n    while (trailerIndex >= start && (buffer[trailerIndex] == 0 || buffer[trailerIndex] == ' ')) {\n        trailerIndex--;\n    }\n    int effectiveEnd = trailerIndex + 1;\n\n    // If input between start and effectiveEnd is empty, return 0L\n    if (start == effectiveEnd) {\n        return 0L;\n    }\n\n    for (; start < effectiveEnd; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}