{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Check if buffer is all NULs (including the case when length is 2)\n        boolean allNulls = true;\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNulls = false;\n                break;\n            }\n        }\n        if (allNulls) {\n            return 0L;\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end) {\n            if (buffer[start] == ' ') {\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Check if we've reached the end after skipping leading spaces\n        if (start >= end) {\n            return 0L;\n        }\n\n        // Trim trailing NULs and spaces\n        int originalEnd = end;\n        byte trailer = buffer[end - 1];\n        while (end > start && (trailer == 0 || trailer == ' ')) {\n            end--;\n            if (end > start) {\n                trailer = buffer[end - 1];\n            }\n        }\n\n        // If we've trimmed everything, return 0\n        if (start >= end) {\n            return 0L;\n        }\n\n        // Verify that there's at least one trailing space/NUL\n        if (end == originalEnd) {\n            // No trailing space/NUL was found\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n\n        // Parse the octal number\n        for (; start < end; start++) {\n            final byte currentByte = buffer[start];\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0');\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}