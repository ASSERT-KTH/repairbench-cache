{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    // Treat as 'all zero' (interpreted as 0L) if buffer[start] is 0 OR ' ' (to support ' ',0 and 0,' ' cases)\n    if ((buffer[start] == 0 || buffer[start] == ' ') \n        && (length == 2 || (\n            buffer[start] == 0 && buffer[start + 1] == ' ') \n            || (buffer[start] == ' ' && buffer[start + 1] == 0))) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' '){\n        start++;\n    }\n\n    // Allow all NULs/spaces (trailing) - if only NUL and/or space left, return 0\n    boolean allNulOrSpace = true;\n    for (int i = start; i < end; i++) {\n        if (buffer[i] != 0 && buffer[i] != ' ') {\n            allNulOrSpace = false;\n            break;\n        }\n    }\n    if (allNulOrSpace) {\n        return 0L;\n    }\n\n    // Trim all trailing NULs and spaces.\n    byte trailer;\n    if (end > start) {\n        trailer = buffer[end - 1];\n        while (start < end && (trailer == 0 || trailer == ' ')) {\n            end--;\n            if (end > start) {\n                trailer = buffer[end - 1];\n            }\n        }\n    }\n    if (start == end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, (byte) 0));\n    }\n\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        // CheckStyle:MagicNumber ON\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}