{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle cases of explicit NUL termination or leading NUL, as specified.\n        // In such cases, the value is considered 0L.\n        // This check also handles the case where the buffer contains only NULs.\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids. We trim all trailing NULs and spaces.\n        // Ensure end > start before accessing buffer[end - 1].\n        int realEnd = end; // Store original end for exception message\n        while (end > start) {\n            final byte currentByte = buffer[end - 1];\n            if (currentByte == 0 || currentByte == ' ') {\n                end--;\n            } else {\n                break; // Found a non-terminator digit, stop trimming.\n            }\n        }\n\n        // If, after skipping leading spaces and trimming trailing NUL/spaces,\n        // nothing is left, it means the field was effectively empty or contained only spaces/NULs.\n        // In this case, per the tests and common usage, return 0.\n        if (start == end) {\n            return 0L; // Treat as zero, similar to leading NUL or all NULs.\n            // Previous behavior threw an exception here.\n            // throw new IllegalArgumentException(\n            //        exceptionMessage(buffer, offset, length, start, buffer[end - 1]));\n        }\n\n        // Check if the last character determined by the original length was a valid terminator.\n        // This check needs to be done *before* the parsing loop, as the original terminator\n        // might have been trimmed. This ensures the original string adheres to the spec\n        // requirement of having a terminator, even if we parse numbers without one.\n        final byte trailer = buffer[realEnd - 1];\n        if (trailer != 0 && trailer != ' ') {\n             // No explicit check needed here anymore, as the trimming loop handles it.\n             // The original implementation implicitly checked this via the exception message\n             // logic, but the requirement is subtle. If the trimming stopped because it hit\n             // a digit, the original last byte was that digit. If it trimmed everything,\n             // start == end and we return 0. If it trimmed some terminators and stopped\n             // at a digit, the original last byte was a terminator.\n             // The only case not covered is if the trimming loop didn't run at all (no trailing terminators)\n             // AND the last character is not a digit. This is handled by the parsing loop below.\n        }\n\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                // Use the original length in the exception message\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            // Overflow check is necessary for values > 077777777777L\n            // but the TAR format doesn't specify behavior for overflow.\n            // Assuming standard Java long overflow behavior is acceptable.\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method to generate exception message (assuming it exists elsewhere or is added)\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) {\n        String S = new String(buffer, offset, length); // Use standard charset\n        S = S.replace(\"\\0\", \"{NUL}\"); // Replace NUL for readability\n        return \"Invalid byte \"+ currentByte +\" at offset \"+ (currentOffset - offset) + \" in '\" + S + \"' len=\" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}