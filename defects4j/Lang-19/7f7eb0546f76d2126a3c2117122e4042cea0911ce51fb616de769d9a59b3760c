{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -1 to ensure there is something after the &\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        if (start >= seqEnd) {\n            // nothing after '&#'\n            return 0;\n        }\n\n        boolean isHex = false;\n\n        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n            start++;\n            isHex = true;\n            if (start >= seqEnd) { \n                // nothing after '&#x'\n                return 0;\n            }\n        }\n\n        int end = start;\n\n        // Find the end of the number, terminated by a ';' or end of string or forbidden char\n        while (end < seqEnd) {\n            char c = input.charAt(end);\n            if (c == ';') {\n                break;\n            }\n            // stop parsing number if invalid char encountered\n            if (isHex) {\n                if (!((c >= '0' && c <= '9') ||\n                      (c >= 'a' && c <= 'f') ||\n                      (c >= 'A' && c <= 'F'))) {\n                    break;\n                }\n            } else {\n                if (!(c >= '0' && c <= '9')) {\n                    break;\n                }\n            }\n            end++;\n        }\n        if (end == start) {\n            // No digits found, e.g. '&#;' or '&#x;'\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String number = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Write the decoded character(s)\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        // if we ended on a semicolon, we need to absorb it\n        if (end < seqEnd && input.charAt(end) == ';') {\n            end++;\n        }\n\n        return end - index;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}