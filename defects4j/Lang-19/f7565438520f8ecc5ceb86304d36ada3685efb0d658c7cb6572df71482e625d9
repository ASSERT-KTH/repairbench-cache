{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int length = input.length();\n    if (input.charAt(index) == '&' && index + 1 < length && input.charAt(index + 1) == '#') {\n        int pos = index + 2;\n        boolean isHex = false;\n        // detect hex marker\n        if (pos < length) {\n            char c = input.charAt(pos);\n            if (c == 'x' || c == 'X') {\n                isHex = true;\n                pos++;\n            }\n        }\n        int start = pos;\n        int base = isHex ? 16 : 10;\n        // scan digits\n        while (pos < length) {\n            char c = input.charAt(pos);\n            if (Character.digit(c, base) < 0) {\n                break;\n            }\n            pos++;\n        }\n        // must have at least one digit\n        if (pos == start) {\n            return 0;\n        }\n        int end = pos;\n        // optional semicolon\n        if (pos < length && input.charAt(pos) == ';') {\n            pos++;\n        }\n        // parse the number\n        String number = input.subSequence(start, end).toString();\n        int entityValue;\n        try {\n            entityValue = Integer.parseInt(number, base);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n        // write the character(s)\n        if (entityValue > Character.MAX_VALUE) {\n            char[] chars = Character.toChars(entityValue);\n            out.write(chars[0]);\n            out.write(chars[1]);\n        } else {\n            out.write(entityValue);\n        }\n        // return characters consumed from input\n        return pos - index;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}