{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int pos = index + 2;\n        boolean isHex = false;\n\n        // Check for an optional 'x' or 'X'\n        if (pos < seqEnd) {\n            char c = input.charAt(pos);\n            if (c == 'x' || c == 'X') {\n                isHex = true;\n                pos++;\n            }\n        } else {\n            return 0;\n        }\n\n        // If no characters remain after \"&#\" (or \"&#x\"), nothing to translate.\n        if (pos >= seqEnd) {\n            return 0;\n        }\n\n        // Save the starting position of the numeric part.\n        int digitStart = pos;\n\n        // Consume every digit (hex or decimal) until a non-digit character or a semicolon is found.\n        while (pos < seqEnd) {\n            char currentChar = input.charAt(pos);\n            if (currentChar == ';') {\n                break;\n            }\n            if (isHex) {\n                if (!((currentChar >= '0' && currentChar <= '9') ||\n                      (currentChar >= 'a' && currentChar <= 'f') ||\n                      (currentChar >= 'A' && currentChar <= 'F'))) {\n                    break;\n                }\n            } else {\n                if (!(currentChar >= '0' && currentChar <= '9')) {\n                    break;\n                }\n            }\n            pos++;\n        }\n\n        // If no digits were found, this is not a valid entity.\n        if (pos == digitStart) {\n            return 0;\n        }\n\n        // Optionally consume a trailing semicolon.\n        if (pos < seqEnd && input.charAt(pos) == ';') {\n            pos++;\n        }\n\n        // Determine the end of the numeric part (without the semicolon if it was consumed).\n        int endOfNumber = (pos > digitStart && input.charAt(pos - 1) == ';') ? pos - 1 : pos;\n\n        // Parse the numerical value.\n        int entityValue;\n        try {\n            String number = input.subSequence(digitStart, endOfNumber).toString();\n            entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        // Output the translated character (or surrogate pair).\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n        return pos - index;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}