{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Must start with '&#'\n    if (input.charAt(index) != '&' || index >= seqEnd - 1 || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    int pos = index + 2; // position just after \"&#\"\n    boolean isHex = false;\n    if (pos < seqEnd) {\n        char ch = input.charAt(pos);\n        if (ch == 'x' || ch == 'X') {\n            isHex = true;\n            pos++;\n        }\n    } else {\n        return 0;\n    }\n    \n    // Remember where the digits start.\n    int numStart = pos;\n    if (numStart >= seqEnd) {\n        return 0;\n    }\n    \n    // Scan as many valid digits as possible.\n    // We stop when we hit a semicolon (which we do not consume here)\n    // or when the next character is not a valid digit in this numeral system.\n    while (pos < seqEnd) {\n        char c = input.charAt(pos);\n        if (c == ';') {\n            break;\n        }\n        boolean isDigit = isHex\n            ? ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))\n            : (c >= '0' && c <= '9');\n        if (!isDigit) {\n            break;\n        }\n        pos++;\n    }\n    \n    // If no digits were found, then it\u2019s not a valid entity.\n    if (pos == numStart) {\n        return 0;\n    }\n    \n    // Check for a semicolon terminator.\n    boolean hasSemicolon = pos < seqEnd && input.charAt(pos) == ';';\n    \n    // Convert the numeric string to a value.\n    String numberStr = input.subSequence(numStart, pos).toString();\n    int entityValue;\n    try {\n        entityValue = isHex ? Integer.parseInt(numberStr, 16) : Integer.parseInt(numberStr, 10);\n    } catch (NumberFormatException nfe) {\n        System.err.println(\"FAIL: \" + numberStr + \"[\" + numStart + \"][\" + pos + \"]\");\n        return 0;\n    }\n    \n    // Write out the decoded character(s)\n    if (entityValue > 0xFFFF) {\n        char[] chrs = Character.toChars(entityValue);\n        out.write(chrs[0]);\n        out.write(chrs[1]);\n    } else {\n        out.write(entityValue);\n    }\n    \n    // Return the number of characters consumed:\n    // if there was a semicolon, include it; otherwise, just the digits.\n    return hasSemicolon ? (pos + 1) - index : pos - index;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}