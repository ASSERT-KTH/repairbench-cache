{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int len = input.length();\n    // must start with \"&#\"\n    if (input.charAt(index) != '&' || index + 1 >= len || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    int pos = index + 2;\n    if (pos >= len) {\n        return 0;\n    }\n    // check for hex marker\n    boolean isHex = false;\n    char c = input.charAt(pos);\n    if (c == 'x' || c == 'X') {\n        isHex = true;\n        pos++;\n        if (pos >= len) {\n            return 0;\n        }\n    }\n    // scan digits\n    int start = pos;\n    while (pos < len) {\n        c = input.charAt(pos);\n        if (isHex) {\n            if ((c >= '0' && c <= '9') ||\n                (c >= 'a' && c <= 'f') ||\n                (c >= 'A' && c <= 'F')) {\n                pos++;\n                continue;\n            }\n        } else {\n            if (c >= '0' && c <= '9') {\n                pos++;\n                continue;\n            }\n        }\n        break;\n    }\n    // require at least one digit\n    if (pos == start) {\n        return 0;\n    }\n    // optional semicolon\n    boolean semi = false;\n    if (pos < len && input.charAt(pos) == ';') {\n        semi = true;\n    }\n    // parse the number\n    String num = input.subSequence(start, pos).toString();\n    int entityValue;\n    try {\n        entityValue = Integer.parseInt(num, isHex ? 16 : 10);\n    } catch (NumberFormatException nfe) {\n        return 0;\n    }\n    // output the character(s)\n    if (entityValue > 0xFFFF) {\n        char[] chrs = Character.toChars(entityValue);\n        out.write(chrs[0]);\n        out.write(chrs[1]);\n    } else {\n        out.write(entityValue);\n    }\n    // return the number of characters consumed\n    return (pos - index) + (semi ? 1 : 0);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}