{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -1 instead of -2, as we only need to check index +1 safely\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        if (start >= seqEnd) {\n            // Not enough chars after \"&#\", treat as normal text\n            return 0;\n        }\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            if (start >= seqEnd) {\n                // nothing after the x\n                return 0;\n            }\n        }\n\n        int end = start;\n\n        // scan until we find a ';' or hit the input limit\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        boolean semiNext = (end < seqEnd && input.charAt(end) == ';');\n\n        int numberEnd = semiNext ? end : end; // parse from start up to end\n\n        if (start == numberEnd) { // no content to parse\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String number = input.subSequence(start, numberEnd).toString();\n            if (number.isEmpty()) {\n                return 0;\n            }\n            entityValue = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        // compute number of characters consumed\n        return 2 + (numberEnd - (isHex ? start -1 : start)) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}