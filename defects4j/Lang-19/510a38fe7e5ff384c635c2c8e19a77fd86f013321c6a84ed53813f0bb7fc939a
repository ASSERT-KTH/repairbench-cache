{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Check for \"&#\" prefix and ensure there's at least one character after '#' for the entity value.\n        if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2; // Position after \"&#\"\n\n            // Check if there's anything after \"&#\"\n            // e.g., \"Test &#\" - In this case, 'start' would be 'seqEnd', leading to out-of-bounds.\n            if (start >= seqEnd) {\n                return 0;\n            }\n\n            boolean isHex = false;\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                // Check if there's anything after \"&#x\" or \"&#X\"\n                // e.g., \"Test &#x\" - 'start + 1' would be 'seqEnd', leading to out-of-bounds if not checked.\n                if (start + 1 >= seqEnd) {\n                    return 0;\n                }\n                start++; // Move 'start' past 'x' or 'X'\n                isHex = true;\n            }\n\n            int end = start;\n            // Find the end of the numeric entity.\n            // It stops at the first non-digit/non-hex-digit character, or a semicolon, or the end of the string.\n            while (end < seqEnd) {\n                char c = input.charAt(end);\n                if (c == ';') { // Found a semicolon, this is a valid end for the entity\n                    break;\n                }\n                if (isHex) {\n                    // Check if character is a valid hex digit\n                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {\n                        // Not a hex digit, so this is the end of the entity value (e.g., \"&#x30 not\")\n                        break;\n                    }\n                } else { // Decimal entity\n                    // Check if character is a valid decimal digit\n                    if (!(c >= '0' && c <= '9')) {\n                        // Not a decimal digit, so this is the end of the entity value (e.g., \"&#123 not\")\n                        break;\n                    }\n                }\n                end++;\n            }\n\n            // If no digits were found between start and end (e.g., \"&#x;\" or \"&#;\"),\n            // it's not a valid entity to translate.\n            if (start == end) {\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                // Extract the numeric part of the entity\n                String entityStr = input.subSequence(start, end).toString();\n                if (isHex) {\n                    entityValue = Integer.parseInt(entityStr, 16);\n                } else {\n                    entityValue = Integer.parseInt(entityStr, 10);\n                }\n            } catch (NumberFormatException nfe) {\n                // This catch handles cases where the extracted string (e.g., \"not\") isn't a valid number.\n                // While the loop conditions should ideally prevent this for well-formed inputs,\n                // it's kept for robustness.\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n                return 0;\n            }\n\n            // Write the translated character(s) to the output writer\n            if (entityValue > 0xFFFF) { // Character requires two chars (supplementary character)\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else { // Character can be represented by a single char\n                out.write(entityValue);\n            }\n\n            // Calculate the number of characters consumed from the input\n            // 2 for \"&#\"\n            // (end - start) for the numeric/hex digits\n            // 1 if 'x' or 'X' was present\n            int charsConsumed = 2 + (end - start) + (isHex ? 1 : 0);\n            \n            // If a semicolon was found at the end position, consume it as well\n            if (end < seqEnd && input.charAt(end) == ';') {\n                charsConsumed++;\n            }\n            return charsConsumed;\n        }\n        return 0; // Not an entity, consume 0 characters\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}