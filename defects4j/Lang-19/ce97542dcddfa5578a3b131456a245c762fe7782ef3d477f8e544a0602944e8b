{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= seqEnd) {\n            return 0;  // nothing after the '&#'\n        }\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            if (start >= seqEnd) {  // nothing after the '&#x'\n                return 0;\n            }\n        }\n\n        int end = start;\n        // Parse until we reach a semicolon, or end of input, or an invalid char\n        while (end < seqEnd) {\n            char c = input.charAt(end);\n            if (c == ';') {\n                break;\n            }\n            if (isHex) {\n                if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {\n                    break;  // invalid hex digit\n                }\n            } else {\n                if (!(c >= '0' && c <= '9')) {\n                    break;  // invalid decimal digit\n                }\n            }\n            end++;\n        }\n\n        if (end == start) {  // no digits\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String number = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch(NumberFormatException nfe) {\n            return 0;\n        }\n\n        if(entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        // Calculate consumed chars:\n        // '&#' -> 2\n        // optional 'x' -> isHex ? 1 : 0\n        // digits -> (end - start)\n        // optional ';' -> (input.charAt(end) == ';' ? 1 : 0)\n        int consumed = 2 + (isHex ? 1 : 0) + (end - start);\n        if (end < seqEnd && input.charAt(end) == ';') {\n            consumed++;\n        }\n\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}