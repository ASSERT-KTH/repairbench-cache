{
    "generation": "    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            if(start < seqEnd) {\n                char firstChar = input.charAt(start);\n                if(firstChar == 'x' || firstChar == 'X') {\n                    start++;\n                    isHex = true;\n                }\n            }\n\n            int end = start;\n            boolean foundSemicolon = false;\n            while(end < seqEnd) {\n                if(input.charAt(end) == ';') {\n                    foundSemicolon = true;\n                    break;\n                }\n                end++;\n            }\n\n            if(!foundSemicolon) {\n                return 0;\n            }\n\n            try {\n                String entityStr = input.subSequence(start, end).toString();\n                int base = isHex ? 16 : 10;\n                entityValue = Integer.parseInt(entityStr, base);\n            } catch(NumberFormatException nfe) {\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end + \"]\");\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}