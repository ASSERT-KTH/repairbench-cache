{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int seqEnd = input.length();\n    \n    // must start with \"&#\"\n    if (index >= seqEnd - 1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    \n    int start = index + 2;\n    if (start >= seqEnd) {\n        return 0;\n    }\n    \n    // Check for hexadecimal marker.\n    boolean isHex = false;\n    char marker = input.charAt(start);\n    if (marker == 'x' || marker == 'X') {\n        isHex = true;\n        start++;\n    }\n    if (start >= seqEnd) {\n        return 0;\n    }\n    \n    // Scan for valid number characters.\n    int pos = start;\n    if (isHex) {\n        while (pos < seqEnd) {\n            char c = input.charAt(pos);\n            if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {\n                pos++;\n            } else {\n                break;\n            }\n        }\n    } else {\n        while (pos < seqEnd && Character.isDigit(input.charAt(pos))) {\n            pos++;\n        }\n    }\n    \n    // There must be at least one digit.\n    if (pos == start) {\n        return 0;\n    }\n    \n    // If there is a trailing semicolon, consume it.\n    boolean terminatedWithSemicolon = false;\n    if (pos < seqEnd && input.charAt(pos) == ';') {\n        terminatedWithSemicolon = true;\n        pos++;\n    }\n    \n    // Build the numeric string.\n    String numberStr = input.subSequence(start, terminatedWithSemicolon ? pos - 1 : pos).toString();\n    int entityValue;\n    try {\n        entityValue = Integer.parseInt(numberStr, isHex ? 16 : 10);\n    } catch (NumberFormatException nfe) {\n        System.err.println(\"FAIL: \" + numberStr + \"[\" + start + \"][\" + pos + \"]\");\n        return 0;\n    }\n  \n    // Write out the character(s).\n    if (entityValue > 0xFFFF) {\n        char[] chrs = Character.toChars(entityValue);\n        out.write(chrs[0]);\n        out.write(chrs[1]);\n    } else {\n        out.write(entityValue);\n    }\n    \n    // Return the number of characters consumed.\n    return pos - index;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}