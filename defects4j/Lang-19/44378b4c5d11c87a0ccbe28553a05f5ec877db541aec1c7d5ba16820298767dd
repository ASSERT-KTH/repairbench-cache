{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Check for end-of-input after '&#'\n        if (start >= seqEnd) {\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            // Check for end-of-input after '&#x' or '&#X'\n            if (start >= seqEnd) {\n                return 0;\n            }\n        }\n\n        int end = start;\n        // Find the end of the entity (either ';' or end of input or non-digit/non-hex char)\n        while (end < seqEnd) {\n            char c = input.charAt(end);\n            if (c == ';') {\n                break;\n            }\n            // Check digit/hex according to mode\n            if (isHex) {\n                if (!((c >= '0' && c <= '9') ||\n                      (c >= 'a' && c <= 'f') ||\n                      (c >= 'A' && c <= 'F'))) {\n                    break;\n                }\n            } else {\n                if (!(c >= '0' && c <= '9')) {\n                    break;\n                }\n            }\n            end++;\n        }\n\n        // Do not accept empty digits\n        if (end == start) {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        int consumed = end - index;\n        if (end < seqEnd && input.charAt(end) == ';') {\n            consumed++; // include semicolon\n        }\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}