{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Must have at least two characters: '&' and '#'\n    if (index + 1 >= seqEnd || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    int i = index + 2;\n    boolean isHex = false;\n    // Check if it is a hex entity (i.e. starts with \"&#x\" or \"&#X\")\n    if (i < seqEnd) {\n        char ch = input.charAt(i);\n        if (ch == 'x' || ch == 'X') {\n            isHex = true;\n            i++;\n        }\n    } else {\n        return 0;\n    }\n    int digitStart = i;\n    // Consume all valid digits for the given numeral system.\n    while (i < seqEnd) {\n        char c = input.charAt(i);\n        if (isHex ? (Character.digit(c, 16) != -1) : Character.isDigit(c)) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    // If no digits were found, it is not a valid entity.\n    if (i == digitStart) {\n        return 0;\n    }\n    // Optionally consume a trailing semicolon if present.\n    boolean hasSemicolon = false;\n    if (i < seqEnd && input.charAt(i) == ';') {\n        hasSemicolon = true;\n        i++;\n    }\n    // Extract the numeric part (without the optional semicolon).\n    String numberStr = input.subSequence(digitStart, hasSemicolon ? i - 1 : i).toString();\n    int entityValue;\n    try {\n        entityValue = isHex ? Integer.parseInt(numberStr, 16) : Integer.parseInt(numberStr, 10);\n    } catch (NumberFormatException nfe) {\n        System.err.println(\"FAIL: \" + numberStr);\n        return 0;\n    }\n    // Write out the corresponding character(s).\n    if (entityValue > 0xFFFF) {\n        char[] chrs = Character.toChars(entityValue);\n        out.write(chrs[0]);\n        out.write(chrs[1]);\n    } else {\n        out.write(entityValue);\n    }\n    // Return the number of characters consumed.\n    return i - index;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}