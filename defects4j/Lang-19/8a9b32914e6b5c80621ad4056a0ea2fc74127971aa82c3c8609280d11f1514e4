{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    \n    // Uses -2 to ensure there is something after the &#\n    if (index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n        \n        if (start < seqEnd) {  // Check if there's a character after &#\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n            \n            int end = start;\n            // Look for the ending semicolon, but don't go past the end of the string\n            while (end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n            \n            // If we have at least one digit to parse\n            if (end > start) {\n                int entityValue;\n                try {\n                    if (isHex) {\n                        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                    } else {\n                        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                    }\n                } catch (NumberFormatException nfe) {\n                    System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n                    return 0;\n                }\n                \n                if (entityValue > 0xFFFF) {\n                    char[] chrs = Character.toChars(entityValue);\n                    out.write(chrs[0]);\n                    out.write(chrs[1]);\n                } else {\n                    out.write(entityValue);\n                }\n                \n                // Return the number of characters consumed\n                // Add 1 only if we found a semicolon\n                return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd ? 1 : 0);\n            }\n        }\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}