{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -1 to ensure there is something after the &\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= seqEnd) {\n            return 0; // nothing after &#\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            if (start >= seqEnd) {\n                return 0; // nothing after &#x\n            }\n        }\n\n        int end = start;\n        // Scan until ';' or invalid character/end of input\n        while (end < seqEnd && (('0' <= input.charAt(end) && input.charAt(end) <= '9') ||\n                (isHex && (('a' <= input.charAt(end) && input.charAt(end) <= 'f') ||\n                           ('A' <= input.charAt(end) && input.charAt(end) <= 'F'))))) {\n            end++;\n        }\n\n        // allow missing trailing ';', or have one\n        // if next char is ';', consume it, else don't\n        boolean semiColonPresent = end < seqEnd && input.charAt(end) == ';';\n        int entityEnd = semiColonPresent ? end : end; // stop at 'end' anyway\n        try {\n            if (end == start) {\n                return 0; // no digits after &# or &#x\n            }\n            int entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n            if (entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n        } catch (NumberFormatException nfe) {\n            return 0; // parse failed\n        }\n\n        // calculate consumed length\n        int consumed = 2; // \"&\" and \"#\"\n        consumed += (isHex ? 1 : 0); // x if hex\n        consumed += (end - start); // codepoint digits\n        if (semiColonPresent) {\n            consumed += 1; // semicolon\n        }\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}