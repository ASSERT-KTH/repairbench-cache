{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            if (start >= seqEnd) {\n                return 0;\n            }\n            boolean isHex = false;\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n                if (start >= seqEnd) {\n                    return 0;\n                }\n            }\n            int end = start;\n            while (end < seqEnd) {\n                char c = input.charAt(end);\n                if (c == ';') {\n                    break;\n                }\n                if (isHex) {\n                    if (Character.digit(c, 16) == -1) {\n                        break;\n                    }\n                } else {\n                    if (!Character.isDigit(c)) {\n                        break;\n                    }\n                }\n                end++;\n            }\n            int entityValue;\n            try {\n                String number = input.subSequence(start, end).toString();\n                if (isHex) {\n                    entityValue = Integer.parseInt(number, 16);\n                } else {\n                    entityValue = Integer.parseInt(number, 10);\n                }\n            } catch (NumberFormatException nfe) {\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n                return 0;\n            }\n            if (entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n            boolean semicolonFound = (end < seqEnd && input.charAt(end) == ';');\n            int semicolonLength = semicolonFound ? 1 : 0;\n            return 2 + (end - start) + (isHex ? 1 : 0) + semicolonLength;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}