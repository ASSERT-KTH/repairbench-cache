{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            if (start >= seqEnd) {\n                return 0;\n            }\n            boolean isHex = false;\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n                if (start >= seqEnd) {\n                    return 0;\n                }\n            }\n\n            int end = start;\n            while (end < seqEnd) {\n                char c = input.charAt(end);\n                boolean isDigit;\n                if (isHex) {\n                    isDigit = Character.isDigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n                } else {\n                    isDigit = Character.isDigit(c);\n                }\n                if (!isDigit) {\n                    break;\n                }\n                end++;\n            }\n\n            int originalEnd = end;\n            if (end < seqEnd && input.charAt(end) == ';') {\n                end++;\n            }\n\n            if (originalEnd == start) {\n                return 0;\n            }\n\n            try {\n                String numberStr = input.subSequence(start, originalEnd).toString();\n                int entityValue = isHex ? Integer.parseInt(numberStr, 16) : Integer.parseInt(numberStr, 10);\n\n                if (entityValue > 0xFFFF) {\n                    char[] chrs = Character.toChars(entityValue);\n                    out.write(chrs[0]);\n                    out.write(chrs[1]);\n                } else {\n                    out.write(entityValue);\n                }\n\n                return 2 + (originalEnd - start) + (isHex ? 1 : 0) + (end - originalEnd);\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}