{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n\n            // Check if there's any content after \"C&D#\"\n            if (start >= seqEnd) { // e.g., \"Test &#\"\n                return 0; // Not a valid numeric entity\n            }\n\n            boolean isHex = false;\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check if there's content after \"C&Dx\" or \"C&DX\"\n                if (start >= seqEnd) { // e.g., \"Test &#x\" or \"Test &#X\"\n                    return 0; // Not a valid numeric entity\n                }\n            }\n\n            int numericEnd = start;\n            // Find the end of the numeric sequence, stopping at the first non-digit\n            while (numericEnd < seqEnd) {\n                char ch = input.charAt(numericEnd);\n                if (isHex) {\n                    if (!((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) {\n                        break; // Not a hex digit\n                    }\n                } else { // Decimal\n                    if (!(ch >= '0' && ch <= '9')) {\n                        break; // Not a decimal digit\n                    }\n                }\n                numericEnd++;\n            }\n\n            // If no digits were found at all (e.g., \"&#;\" or \"&#x;\")\n            if (numericEnd == start) {\n                return 0;\n            }\n\n            // Now numericEnd points to the first non-digit char, or seqEnd.\n            // Check for semicolon immediately after the numeric part.\n            boolean semiColonFound = false;\n            if (numericEnd < seqEnd && input.charAt(numericEnd) == ';') {\n                semiColonFound = true;\n            }\n\n            int entityValue;\n            try {\n                // Parse the substring from 'start' to 'numericEnd'\n                // input.subSequence(start, numericEnd) extracts the numeric part\n                entityValue = Integer.parseInt(input.subSequence(start, numericEnd).toString(), isHex ? 16 : 10);\n            } catch(NumberFormatException nfe) {\n                // If parsing fails (e.g., non-numeric characters found within the expected number range),\n                // it's not a valid entity, so return 0 (no translation).\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            // Calculate the total number of characters consumed.\n            // This includes the \"&#\" prefix, the 'x' (if hex), the digits, and the optional semicolon.\n            return numericEnd - index + (semiColonFound ? 1 : 0);\n        }\n        return 0; // Not a numeric entity.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}