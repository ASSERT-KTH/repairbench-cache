{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Check that start is still in bounds\n        if (start >= seqEnd) {\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            // Check there's more than just an x after the &#\n            if (start >= seqEnd) {\n                return 0;\n            }\n        }\n\n        int end = start;\n        // Scan for the end of numbers, either up to ; or until number sequence ends or input runs out\n        while (end < seqEnd && ((isHex && ((input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n                                            (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n                                            (input.charAt(end) >= 'A' && input.charAt(end) <= 'F')))\n                                || (!isHex && (input.charAt(end) >= '0' && input.charAt(end) <= '9')))) {\n            end++;\n        }\n\n        // Check if there are no digits\n        if (end == start) {\n            return 0;\n        }\n\n        // If there is a semicolon, include it\n        boolean semiNext = (end < seqEnd) && (input.charAt(end) == ';');\n        int endValue = end; // exclusive for parse\n\n        int entityValue;\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, endValue).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, endValue).toString(), 10);\n            }\n        } catch (NumberFormatException nfe) {\n            //System.err.println(\"FAIL: \" + input.subSequence(start, endValue) + \"[\" + start + \"][\" + endValue + \"]\");\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        // Calculate how many characters were consumed:\n        // 1 for &, 1 for #, [1 for x|X if present], N for digits, [1 for ; if present]\n        return 2 + (isHex ? 1 : 0) + (end - start) + (semiNext ? 1 : 0);\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}