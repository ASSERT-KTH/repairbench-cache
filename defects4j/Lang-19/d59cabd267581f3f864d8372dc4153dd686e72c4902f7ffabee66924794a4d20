{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= seqEnd) {\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        if (start >= seqEnd) {\n            return 0; // nothing after '&#' or '&#x'\n        }\n\n        int end = start;\n        // Scan until semicolon or end of string\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        boolean hasSemicolon = false;\n        if (end < seqEnd && input.charAt(end) == ';') {\n            hasSemicolon = true;\n        }\n\n        // if end==seqEnd, this means no semicolon (unfinished entity), process anyway\n        String entityContent = input.subSequence(start, end).toString();\n        if (entityContent.isEmpty()) {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            entityValue = Integer.parseInt(entityContent, isHex ? 16 : 10);\n        } catch(NumberFormatException nfe) {\n            // invalid number\n            return 0;\n        }\n\n        if(entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        int consumedChars = end - index;\n        if (hasSemicolon) {\n            consumedChars +=1;\n        }\n        return consumedChars;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}