{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            if(start < seqEnd) {\n                char firstChar = input.charAt(start);\n                if(firstChar == 'x' || firstChar == 'X') {\n                    start++;\n                    isHex = true;\n                }\n\n                int end = start;\n                // Check if there's a semicolon in the remaining string\n                boolean foundSemicolon = false;\n                while(end < seqEnd) {\n                    if(input.charAt(end) == ';') {\n                        foundSemicolon = true;\n                        break;\n                    }\n                    end++;\n                }\n\n                // If no semicolon found, don't process (returns 0 at end)\n                if(!foundSemicolon) {\n                    return 0;\n                }\n\n                try {\n                    int entityValue;\n                    if(isHex) {\n                        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                    } else {\n                        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                    }\n\n                    if(entityValue > 0xFFFF) {\n                        char[] chrs = Character.toChars(entityValue);\n                        out.write(chrs[0]);\n                        out.write(chrs[1]);\n                    } else {\n                        out.write(entityValue);\n                    }\n\n                    return (end + 1) - index; // include the semicolon in the count\n                } catch(NumberFormatException nfe) {\n                    System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                    return 0;\n                }\n            }\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}