{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {\n        int pos = index + 2; // position right after \"&#\"\n        if (pos >= seqEnd) {\n            return 0;\n        }\n        boolean isHex = false;\n        char currentChar = input.charAt(pos);\n        if (currentChar == 'x' || currentChar == 'X') {\n            isHex = true;\n            pos++;\n            if (pos >= seqEnd) {\n                return 0;\n            }\n        }\n        int startDigits = pos;\n        // Scan for valid digits (hex or decimal) until a non-digit is encountered.\n        while (pos < seqEnd) {\n            char ch = input.charAt(pos);\n            if (isHex) {\n                if ((ch >= '0' && ch <= '9') ||\n                    (ch >= 'a' && ch <= 'f') ||\n                    (ch >= 'A' && ch <= 'F')) {\n                    pos++;\n                } else {\n                    break;\n                }\n            } else {\n                if (Character.isDigit(ch)) {\n                    pos++;\n                } else {\n                    break;\n                }\n            }\n        }\n        // No digits found means it's not a valid numeric entity.\n        if (pos == startDigits) {\n            return 0;\n        }\n        // Optionally, if a semicolon is present, consume it.\n        boolean semicolonFound = false;\n        if (pos < seqEnd && input.charAt(pos) == ';') {\n            semicolonFound = true;\n            pos++;\n        }\n        // Determine the numeric part substring.\n        String numStr = input.subSequence(startDigits, semicolonFound ? pos - 1 : pos).toString();\n        int entityValue;\n        try {\n            entityValue = isHex ? Integer.parseInt(numStr, 16)\n                                : Integer.parseInt(numStr, 10);\n        } catch(NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + numStr + \"[\" + startDigits + \"][\" + pos + \"]\");\n            return 0;\n        }\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n        return pos - index;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}