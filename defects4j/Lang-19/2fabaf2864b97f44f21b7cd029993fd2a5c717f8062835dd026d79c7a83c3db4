{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Check for '&#'\n        if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check if sequence is long enough for '#'\n            if (start >= seqEnd) {\n                // Input ends with \"&#\"\n                return 0;\n            }\n\n            // Check for 'x' or 'X'\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check if sequence is long enough after 'x'/'X'\n                if (start >= seqEnd) {\n                    // Input ends with \"&#x\" or \"&#X\"\n                    return 0;\n                }\n            }\n\n            int end = start;\n            // Find the end of the digits, stopping at non-digit/non-hex or end of input\n            while (end < seqEnd) {\n                char currentChar = input.charAt(end);\n                if (isHex) {\n                    if (!((currentChar >= '0' && currentChar <= '9') ||\n                          (currentChar >= 'a' && currentChar <= 'f') ||\n                          (currentChar >= 'A' && currentChar <= 'F'))) {\n                        break; // Not a hex digit\n                    }\n                } else {\n                    if (!(currentChar >= '0' && currentChar <= '9')) {\n                        break; // Not a decimal digit\n                    }\n                }\n                end++;\n            }\n\n            // Check if any digits were found\n            if (end == start) {\n                // No digits found after \"&#\" or \"&#x\" / \"&#X\"\n                return 0;\n            }\n\n            boolean hasSemicolon = false;\n            // Check for terminating semicolon\n            if (end < seqEnd && input.charAt(end) == ';') {\n                 hasSemicolon = true;\n            }\n\n\n            try {\n                int entityValue;\n                if (isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n\n                if (entityValue > 0xFFFF) {\n                    // Handle supplementary characters (outside BMP)\n                    char[] chrs = Character.toChars(entityValue);\n                    out.write(chrs[0]);\n                    out.write(chrs[1]);\n                } else {\n                    // Handle BMP characters\n                    // Note: Character.isValidCodePoint(entityValue) could be used for stricter validation,\n                    // but original code allowed any int value. We write even if it's 0.\n                    out.write(entityValue);\n                }\n\n                // Calculate consumed length: includes '&', '#', optional 'x'/'X', digits, and optional ';'\n                int consumedLength = (start - index) + (end - start) + (hasSemicolon ? 1 : 0);\n                // Which simplifies to: end - index + (hasSemicolon ? 1 : 0)\n\n                return consumedLength;\n\n            } catch (NumberFormatException nfe) {\n                // This might happen if the number is too large for an int, although unlikely for Unicode codepoints.\n                // Logically, the digit check prevents non-numeric chars from reaching parseInt.\n                // Return 0 to indicate no translation occurred, consistent with other failure paths.\n                // System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\"); // Original debug code\n                return 0;\n            }\n        }\n        // Input character at index was not the start of a numeric entity ('&#')\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}