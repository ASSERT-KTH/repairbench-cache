{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n        if (start < seqEnd) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                isHex = true;\n                start++;\n            }\n        } else {\n            return 0;\n        }\n        if (start >= seqEnd) {\n            return 0;\n        }\n        int pos = start;\n        // Consume all valid digits (hex or decimal)\n        while (pos < seqEnd) {\n            char current = input.charAt(pos);\n            if (isHex) {\n                if (!((current >= '0' && current <= '9')\n                        || (current >= 'a' && current <= 'f')\n                        || (current >= 'A' && current <= 'F'))) {\n                    break;\n                }\n            } else {\n                if (!Character.isDigit(current)) {\n                    break;\n                }\n            }\n            pos++;\n        }\n        // No digits found? Then it's not a valid numeric entity.\n        if (pos == start) {\n            return 0;\n        }\n        // Optionally, if there is a semicolon, include it.\n        boolean semicolon = false;\n        if (pos < seqEnd && input.charAt(pos) == ';') {\n            semicolon = true;\n            pos++;\n        }\n        // Parse the entity value from the digits found.\n        String number = input.subSequence(start, pos - (semicolon ? 1 : 0)).toString();\n        int entityValue;\n        try {\n            entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);\n        } catch (NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + number + \"[\" + start + \"][\" + (semicolon ? pos - 1 : pos) + \"]\");\n            return 0;\n        }\n        // Write the character(s) for the entity value.\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n        return pos - index;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}