{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int seqEnd = input.length();\n    if (input.charAt(index) != '&' || index + 1 >= seqEnd || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    int start = index + 2; // start of the numeric part\n    if (start >= seqEnd) {\n        return 0;\n    }\n    boolean isHex = false;\n    char potentialHex = input.charAt(start);\n    if (potentialHex == 'x' || potentialHex == 'X') {\n        isHex = true;\n        start++;\n        if (start >= seqEnd) {\n            return 0;\n        }\n    }\n    // Scan valid digits according to the radix (hex or decimal).\n    int pos = start;\n    if (isHex) {\n        while (pos < seqEnd) {\n            char c = input.charAt(pos);\n            if ((c >= '0' && c <= '9') ||\n                (c >= 'a' && c <= 'f') ||\n                (c >= 'A' && c <= 'F')) {\n                pos++;\n            } else {\n                break;\n            }\n        }\n    } else {\n        while (pos < seqEnd) {\n            char c = input.charAt(pos);\n            if (c >= '0' && c <= '9') {\n                pos++;\n            } else {\n                break;\n            }\n        }\n    }\n    // If no digits were found, it's not a valid entity.\n    if (pos == start) {\n        return 0;\n    }\n    // Optionally consume a trailing semicolon.\n    boolean semi = false;\n    if (pos < seqEnd && input.charAt(pos) == ';') {\n        semi = true;\n        pos++;\n    }\n    \n    // Obtain the number string (without the semicolon if it was present).\n    String numberStr = input.subSequence(start, pos - (semi ? 1 : 0)).toString();\n    int entityValue;\n    try {\n        entityValue = Integer.parseInt(numberStr, isHex ? 16 : 10);\n    } catch (NumberFormatException nfe) {\n        System.err.println(\"FAIL: \" + numberStr + \" [\" + start + \"][\" + (pos - (semi ? 1 : 0)) + \"]\");\n        return 0;\n    }\n    \n    if (entityValue > 0xFFFF) {\n        char[] chrs = Character.toChars(entityValue);\n        out.write(chrs[0]);\n        out.write(chrs[1]);\n    } else {\n        out.write(entityValue);\n    }\n    \n    return pos - index;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}