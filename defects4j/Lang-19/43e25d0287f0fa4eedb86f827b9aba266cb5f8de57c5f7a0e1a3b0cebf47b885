{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check if there's enough characters for at least the first digit/char after &#\n            if (start >= seqEnd) {\n                return 0; // Not a valid entity pattern (e.g., \"Test &#\")\n            }\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &#x\n                if (start >= seqEnd) {\n                    return 0; // Not a valid entity pattern (e.g., \"Test &#x\")\n                }\n            }\n\n            int end = start;\n            // Note that this supports character codes without a ; on the end.\n            // It stops at the first non-numeric/non-hex character or at a semicolon, or at the end of input.\n            while(end < seqEnd) {\n                char c = input.charAt(end);\n                if (c == ';') {\n                    break; // Semicolon terminates the entity\n                }\n                if (isHex) {\n                    // Check if it's a valid hex digit\n                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {\n                        break; // Not a hex digit, so entity ends here\n                    }\n                } else { // Decimal\n                    // Check if it's a valid decimal digit\n                    if (!(c >= '0' && c <= '9')) {\n                        break; // Not a decimal digit, so entity ends here\n                    }\n                }\n                end++;\n            }\n\n            int entityValue;\n            try {\n                // If start == end, it means there were no digits between &#(x) and the terminator/end.\n                // This would lead to Integer.parseInt(\"\") which throws NumberFormatException.\n                // The tests expect such cases to return 0, which is handled by the catch block.\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n            // System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\"); // Original debug print\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            // Calculate characters consumed:\n            // 2 for \"&#\"\n            // (isHex ? 1 : 0) for \"x\"\n            // (end - start) for the numeric part\n            // 1 for \";\" if it was present and consumed\n            int charsConsumed = 2 + (end - start) + (isHex ? 1 : 0);\n            if (end < seqEnd && input.charAt(end) == ';') {\n                charsConsumed += 1;\n            }\n            return charsConsumed;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}