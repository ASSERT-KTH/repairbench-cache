{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#.\n        // For example, if input is \"&#\", index + 2 would be out of bounds.\n        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &#\n                // If 'start' now points past the end of the sequence, it's just \"&#x\" or \"&#X\",\n                // which is not a complete entity, so return 0.\n                if (start >= seqEnd) {\n                    return 0;\n                }\n            }\n\n            int end = start;\n            // Note that this supports character codes without a ; on the end.\n            // The loop identifies the end of the numeric part of the entity by checking\n            // if the character is a valid digit (decimal or hex).\n            while (end < seqEnd) {\n                char c = input.charAt(end);\n                if (isHex) {\n                    // For hex, valid characters are '0'-'9', 'a'-'f', 'A'-'F'\n                    if (!Character.isDigit(c) && !((c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {\n                        // Found a non-hex-digit character, this is the end of the numeric part.\n                        break;\n                    }\n                } else { // Decimal\n                    // For decimal, valid characters are '0'-'9'\n                    if (!Character.isDigit(c)) {\n                        // Found a non-digit character, this is the end of the numeric part.\n                        break;\n                    }\n                }\n                end++;\n            }\n\n            int entityValue;\n            try {\n                // Parse the numeric part of the entity.\n                // If subSequence(start, end) is empty (e.g., for \"&#x;\" or \"&#;\"),\n                // Integer.parseInt will throw NumberFormatException, caught below.\n                if (isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                // If parsing fails (e.g., no digits found or invalid characters),\n                // treat it as not a valid entity and return 0.\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n                return 0;\n            }\n\n            // After parsing the numeric part, check for an optional semicolon.\n            // This is separate from the numeric parsing loop to handle cases where ';' is missing.\n            int consumedNumericChars = end - start;\n            int semicolonLength = 0;\n            if (end < seqEnd && input.charAt(end) == ';') {\n                semicolonLength = 1;\n            }\n\n            // Write the translated character(s)\n            if (entityValue > 0xFFFF) { // Handle surrogate pairs for Unicode supplementary characters\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else { // Basic Multilingual Plane (BMP) characters\n                out.write(entityValue);\n            }\n\n            // Calculate total characters consumed from the input:\n            // 2 for \"&#\"\n            // 1 for 'x' or 'X' if it was a hexadecimal entity\n            // The length of the numeric part (e.g., \"30\" in \"&#x30\")\n            // 1 for the optional semicolon\n            return 2 + (isHex ? 1 : 0) + consumedNumericChars + semicolonLength;\n        }\n        return 0; // Not an entity starting with \"&#\" or not enough characters to be one\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}