{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n\n        // Check for '&#' requires index+1 and index+2 to be valid at minimum\n        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check for 'x' or 'X' prefix for hexidecimal entities\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n                // Check if sequence terminates immediately after 'x' or 'X'\n                // e.g. \"&#x\" is incomplete\n                if (start == seqEnd) {\n                    return 0; // Incomplete entity, do not translate\n                }\n            }\n\n            int end = start;\n            // Find the end of the numeric part of the entity by scanning for valid digits\n            while (end < seqEnd) {\n                char c = input.charAt(end);\n                boolean isDigit;\n                if (isHex) {\n                    // Check for hex digit (0-9, a-f, A-F)\n                    isDigit = (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n                } else {\n                    // Check for decimal digit (0-9)\n                    isDigit = c >= '0' && c <= '9';\n                }\n\n                if (!isDigit) {\n                    break; // Found non-digit, marks the end of the numeric part\n                }\n                end++; // Move to the next character\n            }\n\n            // Check if any digits were actually found after \"&#\" or \"&#x\"\n            // e.g. \"&#;\" or \"&#x;\" or \"&# \" are invalid\n            if (end == start) {\n                return 0; // No digits found, incomplete/invalid entity\n            }\n\n            int entityValue;\n            try {\n                // Parse the numeric value from the identified sequence\n                CharSequence numericSequence = input.subSequence(start, end);\n                if (isHex) {\n                    entityValue = Integer.parseInt(numericSequence.toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(numericSequence.toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                // This case should be rare given the prior digit checks,\n                // but handles potential overflow or invalid format robustly.\n                return 0; // Failed to parse, treat as untranslatable\n            }\n\n            // Check if the entity is optionally terminated by a semicolon\n            boolean semiColonPresent = false;\n            if (end < seqEnd && input.charAt(end) == ';') {\n                semiColonPresent = true;\n            }\n\n            // Validate the parsed value as a Unicode code point and write to output\n            // Note: Character.isValidCodePoint handles negative values implicitly\n            if (Character.isValidCodePoint(entityValue)) {\n                if (entityValue > 0xFFFF) {\n                    // Supplementary character (requires two char surrogate pair)\n                    char[] chars = Character.toChars(entityValue);\n                    out.write(chars[0]);\n                    out.write(chars[1]);\n                } else {\n                    // Basic Multilingual Plane (BMP) character (single char)\n                    out.write((char) entityValue);\n                }\n            } else {\n                // Parsed value is not a valid Unicode code point\n                return 0; // Do not translate invalid code points\n            }\n\n            // Calculate the total number of characters consumed by the entity\n            // Consumed length = prefix (&# or &#x) + digits + optional semicolon\n            // Prefix length = start - index (2 or 3)\n            // Digits length = end - start\n            int consumedLength = (start - index) + (end - start);\n            if (semiColonPresent) {\n                consumedLength++; // Add 1 for the consumed semicolon\n            }\n            return consumedLength;\n\n        }\n        // The sequence at the current index does not start with \"&#\"\n        return 0; // Indicate that no translation occurred at this position\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}