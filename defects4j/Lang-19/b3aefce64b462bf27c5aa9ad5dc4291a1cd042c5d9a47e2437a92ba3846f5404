{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int len = input.length();\n    // Must start with \"&#\"\n    if (input.charAt(index) == '&' && index + 1 < len && input.charAt(index + 1) == '#') {\n        int i = index + 2;\n        boolean isHex = false;\n        // Check for optional hex indicator\n        if (i < len) {\n            char c = input.charAt(i);\n            if (c == 'x' || c == 'X') {\n                isHex = true;\n                i++;\n            }\n        } else {\n            // no room for digits\n            return 0;\n        }\n        int start = i;\n        int end = i;\n        // scan valid digits\n        while (end < len) {\n            char ch = input.charAt(end);\n            if (isHex) {\n                if ((ch >= '0' && ch <= '9') ||\n                    (ch >= 'a' && ch <= 'f') ||\n                    (ch >= 'A' && ch <= 'F')) {\n                    end++;\n                } else {\n                    break;\n                }\n            } else {\n                if (ch >= '0' && ch <= '9') {\n                    end++;\n                } else {\n                    break;\n                }\n            }\n        }\n        // must have at least one digit\n        if (end == start) {\n            return 0;\n        }\n        // optional semicolon\n        boolean semi = end < len && input.charAt(end) == ';';\n        String numSequence = input.subSequence(start, end).toString();\n        int value;\n        try {\n            value = Integer.parseInt(numSequence, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n        // write the character(s)\n        if (value > 0xFFFF) {\n            char[] chrs = Character.toChars(value);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(value);\n        }\n        // return how many input chars were consumed\n        // (end - index) covers '&', '#', optional 'x' and digits; plus one if ';'\n        return (end - index) + (semi ? 1 : 0);\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}