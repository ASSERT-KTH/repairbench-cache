{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int pos = index + 2;\n        boolean isHex = false;\n        if (pos < seqEnd) {\n            char ch = input.charAt(pos);\n            if (ch == 'x' || ch == 'X') {\n                isHex = true;\n                pos++;\n            }\n        }\n        int startDigits = pos;\n        // Scan as many valid digits as possible for the given radix.\n        while (pos < seqEnd) {\n            char ch = input.charAt(pos);\n            if (isHex\n                ? ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))\n                : (ch >= '0' && ch <= '9')) {\n                pos++;\n            } else {\n                break;\n            }\n        }\n        // If no digits were found, then it's not a valid numeric entity.\n        if (pos == startDigits) {\n            return 0;\n        }\n        // Optionally, if there's a trailing semicolon, consume it.\n        if (pos < seqEnd && input.charAt(pos) == ';') {\n            pos++;\n        }\n        // Get the numeric part (without the semicolon if it was present).\n        String number = (pos > startDigits && input.charAt(pos - 1) == ';')\n                        ? input.subSequence(startDigits, pos - 1).toString()\n                        : input.subSequence(startDigits, pos).toString();\n        int entityValue;\n        try {\n            entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n        if (entityValue > 0xFFFF) {\n            // Write high surrogate and low surrogate.\n            for (char c : Character.toChars(entityValue)) {\n                out.write(c);\n            }\n        } else {\n            out.write(entityValue);\n        }\n        // Return the number of characters consumed.\n        return pos - index;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}