{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int len = input.length();\n    if (input.charAt(index) == '&' && index + 1 < len && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n        // optional hex marker\n        if (start < len) {\n            char c = input.charAt(start);\n            if (c == 'x' || c == 'X') {\n                isHex = true;\n                start++;\n            }\n        }\n        // collect digits\n        int digitStart = start;\n        while (start < len) {\n            char c = input.charAt(start);\n            if ((c >= '0' && c <= '9')\n                || (isHex && ((c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')))) {\n                start++;\n            } else {\n                break;\n            }\n        }\n        // must have at least one digit\n        if (start == digitStart) {\n            return 0;\n        }\n        // optional semicolon\n        boolean semi = (start < len && input.charAt(start) == ';');\n        int numberEnd = start;\n        String num = input.subSequence(digitStart, numberEnd).toString();\n        int value;\n        try {\n            value = Integer.parseInt(num, isHex ? 16 : 10);\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n        // write output char(s)\n        if (value > 0xFFFF) {\n            char[] chars = Character.toChars(value);\n            out.write(chars[0]);\n            out.write(chars[1]);\n        } else {\n            out.write((char) value);\n        }\n        // return how many characters we consumed (&, #, maybe 'x', digits, and optional ';')\n        return (numberEnd - index) + (semi ? 1 : 0);\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}