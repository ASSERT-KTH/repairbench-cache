{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if(index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if(start < seqEnd) {\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n                // Check there's more than just an x after the &#\n            }\n        } else {\n            return 0;\n        }\n\n        int end = start;\n        // Note that this supports character codes without a ; on the end\n        while(end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if(end == start) {\n            return 0;\n        }\n\n        // Adjust end for missing semicolon at the end of the string\n        if(end == seqEnd && input.charAt(end - 1) != ';') {\n            // No terminating semicolon found, still valid\n        } else if(end < seqEnd && input.charAt(end) == ';') {\n            end++; // Include the semicolon in the count when returning\n        }\n\n        int entityValue;\n        try {\n            if(isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end == seqEnd ? end : end - 1).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end == seqEnd ? end : end - 1).toString(), 10);\n            }\n        } catch(NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + input.subSequence(start, end == seqEnd ? end : end - 1) + \"[\" + start +\"][\"+ (end == seqEnd ? end : end - 1) +\"]\");\n            return 0;\n        }\n\n        if(entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        return end - index;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}