{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // must start with \"&#\"\n    if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        if (start >= seqEnd) {\n            // no room for a digit or 'x'\n            return 0;\n        }\n        boolean isHex = false;\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            isHex = true;\n            start++;\n            if (start >= seqEnd) {\n                // no room for any hex digit\n                return 0;\n            }\n        }\n        // consume all valid digits (hex or decimal) up to an optional ';'\n        int end = start;\n        while (end < seqEnd) {\n            char c = input.charAt(end);\n            if (isHex\n                ? ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))\n                : (c >= '0' && c <= '9')) {\n                end++;\n            } else {\n                break;\n            }\n        }\n        if (end == start) {\n            // no digits found\n            return 0;\n        }\n        boolean hasSemicolon = (end < seqEnd && input.charAt(end) == ';');\n        // parse the number\n        String number = input.subSequence(start, end).toString();\n        int codepoint;\n        try {\n            codepoint = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch (NumberFormatException ex) {\n            return 0;\n        }\n        // write the character(s)\n        if (codepoint > 0xFFFF) {\n            char[] chrs = Character.toChars(codepoint);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(codepoint);\n        }\n        // return how many characters were consumed\n        return (end - index) + (hasSemicolon ? 1 : 0);\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}