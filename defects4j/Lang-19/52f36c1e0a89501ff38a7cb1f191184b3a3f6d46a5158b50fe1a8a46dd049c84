{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Look for \"&#\" at the current position\n    if (input.charAt(index) == '&'\n        && index + 1 < seqEnd\n        && input.charAt(index + 1) == '#') {\n        \n        int start = index + 2;\n        boolean isHex = false;\n        // Optional hex marker\n        if (start < seqEnd) {\n            char c = input.charAt(start);\n            if (c == 'x' || c == 'X') {\n                isHex = true;\n                start++;\n            }\n        }\n        // Parse digits (hex or decimal)\n        int pos = start;\n        while (pos < seqEnd) {\n            char ch = input.charAt(pos);\n            boolean validDigit = isHex\n                ? ((ch >= '0' && ch <= '9')\n                   || (ch >= 'a' && ch <= 'f')\n                   || (ch >= 'A' && ch <= 'F'))\n                : (ch >= '0' && ch <= '9');\n            if (validDigit) {\n                pos++;\n            } else {\n                break;\n            }\n        }\n        // Must have at least one digit\n        if (pos == start) {\n            return 0;\n        }\n        // Check for optional semicolon\n        boolean hasSemicolon = pos < seqEnd && input.charAt(pos) == ';';\n        // Extract the number string\n        String number = input.subSequence(start, pos).toString();\n        int codepoint;\n        try {\n            codepoint = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n        // Write out the character (handling supplementary if needed)\n        if (codepoint > 0xFFFF) {\n            char[] chars = Character.toChars(codepoint);\n            out.write(chars[0]);\n            out.write(chars[1]);\n        } else {\n            out.write(codepoint);\n        }\n        // Return how many characters we consumed (digits + optional 'x' + optional ';' + \"&#\")\n        return (pos - index) + (hasSemicolon ? 1 : 0);\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}