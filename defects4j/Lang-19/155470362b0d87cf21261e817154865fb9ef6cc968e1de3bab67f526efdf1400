{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if(start >= seqEnd) {\n            // &# at end of input\n            return 0;\n        }\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n\n            if(start >= seqEnd) {\n                // &#x at end of input\n                return 0;\n            }\n        }\n\n        int end = start;\n        // Note that this supports character codes without a ; on the end\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n        boolean hasSemi = (end < seqEnd && input.charAt(end) == ';');\n        // The numeric value is between start and end (end may be seqEnd if no semicolon)\n        // Only parse if there's at least one digit\n        if (start == end) {\n            // No digits present\n            return 0;\n        }\n        int entityValue;\n        try {\n            String number = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch(NumberFormatException nfe) {\n            // Invalid number\n            return 0;\n        }\n\n        if(entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        // compute consumed length: \"&\" + \"#\" + optional ('x'|'X') + digits + optional ';'\n        int consumed = 2; // &#\n        if (isHex) consumed++; // x\n        consumed += (end - start);\n        if (hasSemi) consumed++;\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}