{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Need at least \"&#\", one more for a digit or 'x'\n    if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n        // Optional hex marker\n        char first = input.charAt(start);\n        if (first == 'x' || first == 'X') {\n            isHex = true;\n            start++;\n        }\n        // Must have at least one digit after \"&#\" or \"&#x\"\n        if (start >= seqEnd) {\n            return 0;\n        }\n        int pos = start;\n        // Consume all valid digits\n        while (pos < seqEnd) {\n            char c = input.charAt(pos);\n            if (isHex \n                ? ((c >= '0' && c <= '9') ||\n                   (c >= 'a' && c <= 'f') ||\n                   (c >= 'A' && c <= 'F'))\n                : (c >= '0' && c <= '9')) {\n                pos++;\n            } else {\n                break;\n            }\n        }\n        // No digits means not a valid numeric entity\n        if (pos == start) {\n            return 0;\n        }\n        // Check for optional semicolon\n        boolean hasSemi = (pos < seqEnd && input.charAt(pos) == ';');\n        int numberEnd = pos;\n        String numStr = input.subSequence(start, numberEnd).toString();\n        int codePoint;\n        try {\n            codePoint = Integer.parseInt(numStr, isHex ? 16 : 10);\n        } catch (NumberFormatException ex) {\n            return 0;\n        }\n        // Write out the character(s)\n        if (codePoint > 0xFFFF) {\n            char[] chrs = Character.toChars(codePoint);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(codePoint);\n        }\n        // Return the number of characters consumed from the input\n        // (digits + optional 'x' + 2 for '&#' + optional ';')\n        return (numberEnd - index) + (hasSemi ? 1 : 0);\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}