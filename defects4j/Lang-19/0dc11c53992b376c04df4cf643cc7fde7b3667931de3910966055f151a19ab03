{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= seqEnd) {\n            // Nothing after &#\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            if (start >= seqEnd) {\n                // Only '&#x' - incomplete\n                return 0;\n            }\n        }\n\n        int end = start;\n        // Find the end of the number\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // If ';' was found, end points to it, otherwise it is seqEnd (past-the-end)\n\n        // At this point, if there's nothing between start and end, it's invalid\n        if (start == end) {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String entity = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(entity, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            // Invalid number\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        // Number of consumed characters:\n        // 2 - for \"&#\"\n        // (isHex ? 1 : 0) - for 'x' or 'X' if present\n        // (end - start) - for the number\n        // (end < seqEnd && input.charAt(end) == ';' ? 1 : 0) - for the semicolon, if present\n        int consumed = 2 + (isHex ? 1 : 0) + (end - start);\n        if (end < seqEnd && input.charAt(end) == ';') {\n            consumed += 1;\n        }\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}