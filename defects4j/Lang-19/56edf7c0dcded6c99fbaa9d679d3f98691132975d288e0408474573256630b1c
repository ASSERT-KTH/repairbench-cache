{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n\n        // Check for '&#' requires at least 3 characters total (&, #, digit)\n        // to be a potentially valid entity.\n        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check for 'x' or 'X' following \"&#\"\n            if (start < seqEnd) { // Ensure there is a character after &#\n                char firstChar = input.charAt(start);\n                if (firstChar == 'x' || firstChar == 'X') {\n                    start++; // Move past 'x'\n                    isHex = true;\n                    // Check there is at least one hex digit after &#x\n                    if (start == seqEnd) {\n                        return 0; // Input ends with \"&#x\"\n                    }\n                }\n                // If not 'x' or 'X', assume decimal entity.\n            } else {\n                 return 0; // Input ends with \"&#\"\n            }\n\n            int end = start;\n            // Find the end of the sequence of valid digits\n            while (end < seqEnd) {\n                char c = input.charAt(end);\n                boolean isDigit;\n                if (isHex) {\n                    // Check for valid hex digit\n                    isDigit = (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n                } else {\n                    // Check for valid decimal digit\n                    isDigit = c >= '0' && c <= '9';\n                }\n\n                if (!isDigit) {\n                    break; // Character is not a valid digit in the current mode, or end of input reached\n                }\n                end++; // Advance pointer past the current digit\n            }\n\n            // Check if any digits were parsed\n            if (end == start) {\n                 // No digits found after \"&#\" or \"&#x\"\n                 return 0;\n            }\n\n            int entityValue;\n            try {\n                // Parse the numeric value from the identified sequence of digits\n                String numStr = input.subSequence(start, end).toString();\n                if (isHex) {\n                    entityValue = Integer.parseInt(numStr, 16);\n                } else {\n                    entityValue = Integer.parseInt(numStr, 10);\n                }\n            } catch (NumberFormatException nfe) {\n                // This could happen if the number is too large to fit in an int,\n                // although the previous digit checks make invalid chars unlikely.\n                // Consider it untranslatable.\n                return 0;\n            }\n\n            // Write the character corresponding to the entity value\n            if(entityValue > 0xFFFF) {\n                // Handle supplementary characters (code points > U+FFFF)\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                // Handle BMP characters (code points <= U+FFFF), including null char for &#0;\n                out.write(entityValue);\n            }\n\n            // Check if the entity was terminated by a semicolon\n            boolean semiColonPresent = false;\n            if (end < seqEnd && input.charAt(end) == ';') {\n                semiColonPresent = true;\n            }\n\n            // Calculate the total number of characters consumed by the entity.\n            // This includes '&', '#', optional 'x', the digits found (up to 'end'),\n            // and the semicolon if it was present immediately after the digits.\n            // Length = (end - index) accounts for &, #, [x], digits.\n            // Add 1 if semicolon was consumed.\n            return end - index + (semiColonPresent ? 1 : 0);\n        }\n        // Input character at 'index' is not the start of a numeric entity ('&')\n        // or the sequence is too short.\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}