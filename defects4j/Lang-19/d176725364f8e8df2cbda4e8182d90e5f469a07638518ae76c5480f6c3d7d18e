{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -1 to ensure there is something after the &\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= seqEnd) { // '&#' at end of input, nothing more\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        if (start >= seqEnd) { // '&#x' at end of input, nothing more\n            return 0;\n        }\n\n        int end = start;\n\n        // Now, scan for digit chars (hex or decimal), potentially until end of input\n        while (end < seqEnd) {\n            char ch = input.charAt(end);\n            if (ch == ';') {\n                break;\n            }\n            if (isHex) {\n                if (!((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) {\n                    break; // non-hex digit terminates\n                }\n            } else {\n                if (!(ch >= '0' && ch <= '9')) {\n                    break; // non-digit terminates\n                }\n            }\n            end++;\n        }\n\n        if (end == start) {\n            // No numeric chars found\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        // Advance past consumed chars: \"&#\", optional 'x', digits, optional ';'\n        int consumed = 2 + (isHex ? 1 : 0) + (end - start);\n        if (end < seqEnd && input.charAt(end) == ';') {\n            consumed++;\n        }\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}