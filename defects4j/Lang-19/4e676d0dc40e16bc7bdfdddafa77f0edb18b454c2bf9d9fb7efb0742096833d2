{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int len = input.length();\n    // Look for \"&#\"\n    if (index + 2 >= len || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n    int i = index + 2;\n    boolean isHex = false;\n    // Optional hex marker\n    if (i < len) {\n        char c = input.charAt(i);\n        if (c == 'x' || c == 'X') {\n            isHex = true;\n            i++;\n        }\n    }\n    int digitStart = i;\n    // Must have at least one digit\n    if (digitStart >= len) {\n        return 0;\n    }\n    // Scan digits\n    if (isHex) {\n        while (i < len) {\n            char c = input.charAt(i);\n            if ((c >= '0' && c <= '9') ||\n                (c >= 'a' && c <= 'f') ||\n                (c >= 'A' && c <= 'F')) {\n                i++;\n            } else {\n                break;\n            }\n        }\n    } else {\n        while (i < len && Character.isDigit(input.charAt(i))) {\n            i++;\n        }\n    }\n    // No digits found?\n    if (i == digitStart) {\n        return 0;\n    }\n    // Optional semicolon\n    boolean hasSemi = false;\n    if (i < len && input.charAt(i) == ';') {\n        hasSemi = true;\n        i++;\n    }\n    // Extract the number text\n    String number = input.subSequence(digitStart, i - (hasSemi ? 1 : 0)).toString();\n    int entityValue;\n    try {\n        entityValue = Integer.parseInt(number, isHex ? 16 : 10);\n    } catch (NumberFormatException e) {\n        return 0;\n    }\n    // Write the character(s)\n    if (entityValue > 0xFFFF) {\n        char[] chrs = Character.toChars(entityValue);\n        out.write(chrs[0]);\n        out.write(chrs[1]);\n    } else {\n        out.write(entityValue);\n    }\n    // Return the number of characters consumed\n    return i - index;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}