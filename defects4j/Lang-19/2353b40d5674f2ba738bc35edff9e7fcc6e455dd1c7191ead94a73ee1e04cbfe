{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= seqEnd) {\n            // nothing after '&#'\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            if (start >= seqEnd) {\n                // nothing after '&#x'\n                return 0;\n            }\n        }\n\n        int end = start;\n        // find the end of the entity\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        boolean semicolonFound = (end < seqEnd) && (input.charAt(end) == ';');\n\n        // if no semicolon, adjust end back to last digit char\n        if (!semicolonFound) {\n            end = seqEnd;\n        }\n\n        String entity;\n        try {\n            entity = input.subSequence(start, end).toString();\n            if (entity.isEmpty()) {\n                return 0;\n            }\n            int entityValue = Integer.parseInt(entity, isHex ? 16 : 10);\n\n            if (entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            int consumed = end - index;\n            if (semicolonFound) {\n                consumed++; // account for semicolon\n            }\n\n            return consumed;\n        } catch (NumberFormatException nfe) {\n            // invalid number, do not translate\n            return 0;\n        } catch (IndexOutOfBoundsException ioobe) {\n            // defensive: shouldn't happen, but treat as no translation\n            return 0;\n        }\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}