{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= seqEnd) { // Prevent IndexOutOfBoundsException\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        if(start >= seqEnd) { // No digits after '&#' or '&#x'\n            return 0;\n        }\n\n        int end = start;\n\n        // scan until non-digit or ';' or end of input\n        while (end < seqEnd) {\n            char c = input.charAt(end);\n            if (c == ';') {\n                break;\n            }\n            if (isHex ? !Character.digit(c, 16) >= 0 : !Character.isDigit(c)) {\n                break;\n            }\n            end++;\n        }\n\n        if (end == start) { // No valid digits found\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String number = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        int consumed = 2 + (end - start);\n        if (isHex) {\n            consumed++;\n        }\n        if (end < seqEnd && input.charAt(end) == ';') {\n            consumed++;\n        }\n\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}