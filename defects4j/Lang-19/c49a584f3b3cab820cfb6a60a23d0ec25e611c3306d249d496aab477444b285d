{
    "generation": "    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        if (index >= seqEnd) {\n            return 0;\n        }\n        if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            if (start < seqEnd) {\n                char firstChar = input.charAt(start);\n                if (firstChar == 'x' || firstChar == 'X') {\n                    start++;\n                    isHex = true;\n                }\n            }\n\n            int end = start;\n            while (end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n\n            if (start >= end) {\n                return 0;\n            }\n\n            String entityStr = input.subSequence(start, end).toString();\n            try {\n                int base = isHex ? 16 : 10;\n                int entityValue = Integer.parseInt(entityStr, base);\n                \n                if (entityValue > 0xFFFF) {\n                    char[] chrs = Character.toChars(entityValue);\n                    out.write(chrs[0]);\n                    out.write(chrs[1]);\n                } else {\n                    out.write(entityValue);\n                }\n                \n                return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n            } catch (NumberFormatException e) {\n                // Invalid entity, return without processing\n                return 0;\n            }\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}