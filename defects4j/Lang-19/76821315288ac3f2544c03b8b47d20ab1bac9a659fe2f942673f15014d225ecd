{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Check if we have enough characters\n        if (start >= seqEnd) {\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            // Check if we have enough characters after the x/X\n            if (start >= seqEnd) {\n                return 0;\n            }\n        }\n\n        int end = start;\n        // Note that this supports character codes without a ; on the end\n        boolean hasSemicolon = false;\n        while(end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // If we found a semicolon, include it in the end position\n        if (end < seqEnd && input.charAt(end) == ';') {\n            hasSemicolon = true;\n        } else {\n            // If we didn't find a semicolon, end is already at seqEnd, but we might not have found a valid number\n            end = seqEnd;\n        }\n\n        // If we didn't move past the start, then we don't have a valid entity\n        if (end == start) {\n            return 0;\n        }\n\n        try {\n            String numberStr = input.subSequence(start, end).toString();\n            int entityValue;\n            if(isHex) {\n                entityValue = Integer.parseInt(numberStr, 16);\n            } else {\n                entityValue = Integer.parseInt(numberStr, 10);\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            // Calculate how many characters we processed:\n            // 2 for &#\n            // (end - start) for the number characters\n            // 1 if it was hex (for 'x' or 'X')\n            // 1 if there was a semicolon\n            int length = 2 + (end - start) + (isHex ? 1 : 0) + (hasSemicolon ? 1 : 0);\n            return length;\n        } catch(NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n            return 0;\n        }\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}