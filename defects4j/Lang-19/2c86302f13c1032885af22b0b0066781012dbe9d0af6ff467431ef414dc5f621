{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int len = input.length();\n    if (input.charAt(index) == '&' && index + 1 < len && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n        // optional hex marker\n        if (start < len) {\n            char c = input.charAt(start);\n            if (c == 'x' || c == 'X') {\n                isHex = true;\n                start++;\n            }\n        } else {\n            return 0;\n        }\n        // must have at least one digit after '&#' or '&#x'\n        if (start >= len) {\n            return 0;\n        }\n        // consume digits (and stop at ';' or first non\u2010digit)\n        int pos = start;\n        while (pos < len) {\n            char c = input.charAt(pos);\n            if (c == ';') {\n                break;\n            }\n            if (isHex ? Character.digit(c, 16) != -1 : (c >= '0' && c <= '9')) {\n                pos++;\n            } else {\n                break;\n            }\n        }\n        // no digits collected \u2192 not an entity\n        if (pos == start) {\n            return 0;\n        }\n        boolean hasSemicolon = pos < len && input.charAt(pos) == ';';\n        String number = input.subSequence(start, pos).toString();\n        int value;\n        try {\n            value = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch (NumberFormatException ex) {\n            return 0;\n        }\n        // write the character(s)\n        if (value > 0xFFFF) {\n            char[] chrs = Character.toChars(value);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write((char) value);\n        }\n        // return the count of chars consumed (include ';' if present)\n        return (pos - index) + (hasSemicolon ? 1 : 0);\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}