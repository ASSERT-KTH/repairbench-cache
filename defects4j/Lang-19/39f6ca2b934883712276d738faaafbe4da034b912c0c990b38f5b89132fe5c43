{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n\n            // Check if there's enough characters for at least a numeric entity (e.g., \"&#;\")\n            // This covers \"Test &#\"\n            if (start >= seqEnd) {\n                return 0;\n            }\n\n            boolean isHex = false;\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &# (e.g., \"Test &#x\")\n                if (start >= seqEnd) {\n                    return 0;\n                }\n            }\n\n            int end = start;\n            // Note that this supports character codes without a ; on the end.\n            // It will stop at a non-digit/non-hex character or the end of the input.\n            while(end < seqEnd) {\n                final char c = input.charAt(end);\n                if (c == ';') {\n                    // Semicolon found, this terminates the entity.\n                    break;\n                }\n                \n                // Check if character is a valid digit (decimal or hex)\n                boolean isDigit = Character.isDigit(c);\n                boolean isHexChar = (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n\n                if (isHex) {\n                    if (!isDigit && !isHexChar) {\n                        // Not a hex digit, and not a semicolon, so stop parsing the number.\n                        break;\n                    }\n                } else { // Decimal entity\n                    if (!isDigit) {\n                        // Not a decimal digit, and not a semicolon, so stop parsing the number.\n                        break;\n                    }\n                }\n                end++;\n            }\n\n            // If no numeric/hex characters were found after &# or &#x\n            // This covers \"&#;\" or \"&#x;\" (where 'end' would still be 'start' if only ';' follows)\n            // or \"&#abc\" or \"&#xabc\" (where 'end' would be 'start' if non-digit/hex follows)\n            if (end == start) {\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n            // This catch block is typically for debugging purposes or when parsing of valid number fails\n            // For valid but too large numbers, Integer.parseInt handles.\n            // For non-numeric content, the while loop should have already broken it.\n            // So, ideally this catch should not be hit for properly formatted entities ending before non-digits.\n            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\"); // Keep original debug line\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            // Calculate the number of characters consumed.\n            // This includes '&', '#', optional 'x', the numeric part, and optional ';'.\n            int charsConsumed = 2 + (isHex ? 1 : 0) + (end - start);\n\n            // If the loop stopped because of a semicolon, consume the semicolon.\n            // Check 'end < seqEnd' to ensure we don't access out of bounds if 'end' is 'seqEnd'.\n            if (end < seqEnd && input.charAt(end) == ';') {\n                charsConsumed++;\n            }\n\n            return charsConsumed;\n        }\n        return 0;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}