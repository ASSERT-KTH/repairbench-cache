{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // quick check for \"&#\"\n    if (input.charAt(index) == '&' && index + 1 < seqEnd && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n        // check for hex marker\n        if (start < seqEnd) {\n            char c = input.charAt(start);\n            if (c == 'x' || c == 'X') {\n                isHex = true;\n                start++;\n            }\n        } else {\n            return 0;\n        }\n        // must have at least one digit after '&#' or '&#x'\n        if (start >= seqEnd) {\n            return 0;\n        }\n        int pos = start;\n        boolean hasDigits = false;\n        boolean hasSemicolon = false;\n        // scan digits up to optional ';'\n        while (pos < seqEnd) {\n            char c = input.charAt(pos);\n            if (c == ';') {\n                hasSemicolon = true;\n                break;\n            }\n            int digit = Character.digit(c, isHex ? 16 : 10);\n            if (digit < 0) {\n                break;\n            }\n            hasDigits = true;\n            pos++;\n        }\n        if (!hasDigits) {\n            return 0;\n        }\n        // parse the number\n        int entityValue;\n        try {\n            entityValue = Integer.parseInt(\n                input.subSequence(start, pos).toString(),\n                isHex ? 16 : 10\n            );\n        } catch (NumberFormatException ex) {\n            return 0;\n        }\n        // write the character(s)\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n        // compute how many chars we consumed\n        int consumed = (pos - index) + (hasSemicolon ? 1 : 0);\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}