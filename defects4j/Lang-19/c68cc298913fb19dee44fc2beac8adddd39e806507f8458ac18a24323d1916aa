{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check for end out of bounds after '&#'\n            if (start >= seqEnd) {\n                return 0;\n            }\n\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check for end out of bounds after '&#x'\n                if (start >= seqEnd) {\n                    return 0;\n                }\n            }\n\n            int end = start;\n\n            // Find end of numeric entity - either semicolon or first non-numeric char or end of string\n            while (end < seqEnd) {\n                char ch = input.charAt(end);\n                if (ch == ';') {\n                    break;\n                }\n                if (isHex) {\n                    if (!(('0' <= ch && ch <= '9') || ('a' <= ch && ch <= 'f') || ('A' <= ch && ch <= 'F'))) {\n                        break;\n                    }\n                } else {\n                    if (!(('0' <= ch && ch <= '9'))) {\n                        break;\n                    }\n                }\n                end++;\n            }\n\n            if (end == start) {\n                // No digits\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                if (isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n                return 0;\n            }\n\n            if (entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            // If semicolon found, include it in consumed length\n            int consumed = end - index + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0);\n            return consumed;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}