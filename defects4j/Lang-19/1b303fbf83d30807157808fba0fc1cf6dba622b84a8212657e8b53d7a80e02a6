{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        if (start >= seqEnd) {\n            // Nothing after '&#', so not a valid numeric entity\n            return 0;\n        }\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n\n            // Check if we have at least one digit after x/X\n            if (start >= seqEnd) {\n                // Nothing after '&#x' or '&#X', so not a valid numeric entity\n                return 0;\n            }\n        }\n\n        int end = start;\n        // Note that this supports character codes without a ; on the end\n        // Only collect hex or decimal digits, stop on ';' or non-digit\n        while (end < seqEnd) {\n            char c = input.charAt(end);\n            if (c == ';') {\n                break;\n            }\n            if (isHex) {\n                if ( (c >= '0' && c <= '9') ||\n                     (c >= 'a' && c <= 'f') ||\n                     (c >= 'A' && c <= 'F')) {\n                    end++;\n                } else {\n                    break;\n                }\n            } else {\n                if (c >= '0' && c <= '9') {\n                    end++;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // Have to have at least one digit\n        if (end == start) {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String entityDigits = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(entityDigits, isHex ? 16 : 10);\n        } catch(NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n            return 0;\n        }\n\n        if(entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        // Compute total entity length:\n        // \"&\" + \"#\" + (possibly \"x\" or \"X\") + digits + optional \";\"\n        int consumed = 2 + (isHex ? 1 : 0) + (end - start);\n        if (end < seqEnd && input.charAt(end) == ';') {\n            consumed += 1;\n        }\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}