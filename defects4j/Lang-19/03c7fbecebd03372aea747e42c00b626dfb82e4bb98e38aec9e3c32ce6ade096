{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int pos = index + 2;\n        boolean isHex = false;\n        // Check for hex indicator\n        if (pos < seqEnd) {\n            char ch = input.charAt(pos);\n            if (ch == 'x' || ch == 'X') {\n                isHex = true;\n                pos++;\n            }\n        }\n        \n        int start = pos;\n        // If there are no characters after \"&#\" (or \"&#x\"), then nothing to do.\n        if (start >= seqEnd) {\n            return 0;\n        }\n        \n        // Read digits (for hex, only 0-9, a-f, A-F; for decimal, only digits)\n        while (pos < seqEnd) {\n            char current = input.charAt(pos);\n            if (current == ';') {\n                break;\n            }\n            if (isHex) {\n                if (!((current >= '0' && current <= '9')\n                        || (current >= 'a' && current <= 'f')\n                        || (current >= 'A' && current <= 'F'))) {\n                    break;\n                }\n            } else {\n                if (!Character.isDigit(current)) {\n                    break;\n                }\n            }\n            pos++;\n        }\n        \n        // If no valid digits were found, do not translate.\n        if (pos == start) {\n            return 0;\n        }\n        \n        // If a semicolon is present, consume it.\n        boolean terminated = pos < seqEnd && input.charAt(pos) == ';';\n        \n        String number = input.subSequence(start, pos).toString();\n        int entityValue;\n        try {\n            entityValue = Integer.parseInt(number, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n        \n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n        // Return characters consumed: if terminated, include the semicolon.\n        return (terminated ? pos + 1 : pos) - index;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}