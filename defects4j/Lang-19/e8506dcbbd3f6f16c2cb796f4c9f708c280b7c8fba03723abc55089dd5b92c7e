{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check if there's a character at 'start' (after &#)\n            // e.g., for \"Test &#\", start would be input.length(), causing IndexOutOfBoundsException\n            if (start >= seqEnd) {\n                return 0; // Not enough characters for a valid entity starting with &#\n            }\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &# (e.g., for \"Test &#x\")\n                // If 'x' is the last character, start would be input.length(), causing IndexOutOfBoundsException\n                if (start >= seqEnd) {\n                    return 0; // Not enough characters for a valid hex entity (no digits follow 'x')\n                }\n            }\n\n            int endOfNumber = start; // This will be the exclusive end for subSequence\n            boolean foundSemicolon = false;\n\n            // Find the end of the numeric/hex value.\n            // It either ends with a semicolon, or the first non-numeric/hex character, or the end of the string.\n            while(endOfNumber < seqEnd) {\n                char c = input.charAt(endOfNumber);\n                if (c == ';') {\n                    foundSemicolon = true;\n                    // Semicolon marks the explicit end of the number part.\n                    // We consume it, but it's not part of the parsed number itself.\n                    endOfNumber++; // Increment to include ';' in consumed length\n                    break;\n                }\n                // Check if the character is a valid digit for the current base\n                if (isHex) {\n                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {\n                        break; // Non-hex character marks the end of the number part\n                    }\n                } else { // Decimal\n                    if (!(c >= '0' && c <= '9')) {\n                        break; // Non-decimal character marks the end of the number part\n                    }\n                }\n                endOfNumber++;\n            }\n\n            // At this point, `endOfNumber` is the index of the first character *after* the numeric part.\n            // If a semicolon was found, `endOfNumber` is the index *after* the semicolon.\n            // `input.subSequence(start, parseEnd)` will be the string to parse.\n            int parseEnd = endOfNumber;\n            if (foundSemicolon) {\n                parseEnd--; // Exclude the semicolon from the part to be parsed as a number\n            }\n\n            // Handle cases where no digits were found between &#[x] and the end marker, e.g., \"&#x;\" or \"&#;\"\n            if (start == parseEnd) {\n                return 0; // No digits found, not a valid entity to translate\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, parseEnd).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, parseEnd).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                // Not a valid number entity (e.g., \"&#xnotanumber;\")\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            // Calculate consumed length:\n            // '&' (1 char)\n            // '#' (1 char)\n            // 'x' or 'X' (1 char, if isHex)\n            // Numeric digits (parseEnd - start chars)\n            // ';' (1 char, if foundSemicolon)\n            // The `endOfNumber` variable already correctly tracks the index after the last consumed character.\n            // The total consumed length is `endOfNumber - index`.\n            return endOfNumber - index;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}