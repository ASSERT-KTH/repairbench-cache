{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    \n    // Check if there's enough characters for a potential numeric entity\n    if (index >= seqEnd - 1) {\n        return 0;\n    }\n    \n    // First check for '&#'\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n        \n        // Make sure we're not at the end of the input\n        if (start < seqEnd) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n        }\n        \n        // Check if we still have characters to process\n        if (start >= seqEnd) {\n            return 0;\n        }\n        \n        int end = start;\n        // Find the end of the entity (either semicolon or end of input)\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n        \n        // If we didn't find anything to parse, return 0\n        if (end == start) {\n            return 0;\n        }\n        \n        int entityValue;\n        try {\n            if (isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch (NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n            return 0;\n        }\n        \n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n        \n        // Return the length, adding 1 for semi-colon only if it was present\n        return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd ? 1 : 0);\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}