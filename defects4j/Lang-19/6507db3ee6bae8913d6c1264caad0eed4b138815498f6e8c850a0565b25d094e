{
    "generation": "@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    final int seqEnd = input.length();\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int pos = index + 2;\n        boolean isHex = false;\n        // Check if there is an 'x' or 'X' to indicate hexadecimal.\n        if (pos < seqEnd) {\n            char ch = input.charAt(pos);\n            if (ch == 'x' || ch == 'X') {\n                isHex = true;\n                pos++;\n            }\n        }\n        // Remember where the digits start.\n        int digitsStart = pos;\n        // Read as many valid digits as possible.\n        while (pos < seqEnd) {\n            char ch = input.charAt(pos);\n            if (isHex ? ((ch >= '0' && ch <= '9')\n                        || (ch >= 'a' && ch <= 'f')\n                        || (ch >= 'A' && ch <= 'F'))\n                      : (ch >= '0' && ch <= '9')) {\n                pos++;\n            } else {\n                break;\n            }\n        }\n        // If no digits were found, do not translate.\n        if (pos == digitsStart) {\n            return 0;\n        }\n        // Optionally, allow a trailing ';'\n        boolean semicolonPresent = pos < seqEnd && input.charAt(pos) == ';';\n        if (semicolonPresent) {\n            pos++;\n        }\n        // The numeric part is the substring from digitsStart to (pos - 1 if ; was present, else pos).\n        int numberEnd = semicolonPresent ? pos - 1 : pos;\n        int entityValue;\n        try {\n            String numberStr = input.subSequence(digitsStart, numberEnd).toString();\n            entityValue = isHex ? Integer.parseInt(numberStr, 16)\n                                : Integer.parseInt(numberStr, 10);\n        } catch (NumberFormatException nfe) {\n            return 0;\n        }\n        // Write the character(s) represented by the Unicode code point.\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n        return pos - index;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}