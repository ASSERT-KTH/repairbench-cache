{
    "generation": "    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        if (index + 1 >= seqEnd) {\n            return 0;\n        }\n        if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            if (start < seqEnd) {\n                char firstChar = input.charAt(start);\n                if (firstChar == 'x' || firstChar == 'X') {\n                    start++;\n                    isHex = true;\n                }\n            }\n\n            int end = start;\n            while (end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n\n            if (end <= start) {\n                // No characters between start and end, invalid entity\n                return 0;\n            }\n\n            String entityStr = input.subSequence(start, end).toString();\n            if (entityStr.isEmpty()) {\n                return 0;\n            }\n\n            try {\n                int entityValue;\n                if (isHex) {\n                    entityValue = Integer.parseInt(entityStr, 16);\n                } else {\n                    entityValue = Integer.parseInt(entityStr, 10);\n                }\n\n                if (entityValue > 0xFFFF) {\n                    char[] chrs = Character.toChars(entityValue);\n                    if (chrs.length > 0) {\n                        out.write(chrs[0]);\n                        if (chrs.length > 1) {\n                            out.write(chrs[1]);\n                        }\n                    }\n                } else {\n                    out.write(entityValue);\n                }\n\n                return (end > start ? 1 : 0) + (isHex ? 1 : 0) + (end - start) + 1;\n            } catch (NumberFormatException nfe) {\n                // Log error and return 0 to ignore the entity\n                return 0;\n            }\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}