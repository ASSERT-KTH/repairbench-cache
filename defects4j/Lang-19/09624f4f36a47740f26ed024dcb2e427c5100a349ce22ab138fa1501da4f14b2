{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        if (start >= seqEnd) { // nothing after '&#'\n            return 0;\n        }\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            if (start >= seqEnd) { // nothing after '&#x'\n                return 0;\n            }\n        }\n\n        int end = start;\n        // Iterate through the characters for the entity value\n        while (end < seqEnd && input.charAt(end) != ';' &&\n               ((isHex && ((input.charAt(end) >= '0' && input.charAt(end) <= '9') || \n                           (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') || \n                           (input.charAt(end) >= 'A' && input.charAt(end) <= 'F'))) ||\n                (!isHex && (input.charAt(end) >= '0' && input.charAt(end) <= '9')))) {\n            end++;\n        }\n\n        if (end == start) { // No digits found\n            return 0;\n        }\n\n        // Now, end points to first non-number/non-hex char (may be ';' or end of string)\n        boolean hasSemiColon = (end < seqEnd && input.charAt(end) == ';');\n\n        int entityValue;\n        try {\n            String entity = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(entity, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            //System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        int consumed = 2 + (isHex ? 1 : 0) + (end - start);\n        if (hasSemiColon) {\n            consumed++; // for the ';'\n        }\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}