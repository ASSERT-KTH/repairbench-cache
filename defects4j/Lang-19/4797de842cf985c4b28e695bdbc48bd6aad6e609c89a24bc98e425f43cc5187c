{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(index + 1 >= seqEnd) {\n            return 0; // Not enough characters to be a valid entity\n        }\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            if(start >= seqEnd) {\n                return 0; // No characters after &#\n            }\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n                if(start >= seqEnd) {\n                    return 0; // No characters after &#x\n                }\n            }\n\n            int end = start;\n            // Note that this supports character codes without a ; on the end\n            while(end < seqEnd && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // If we didn't find a ; and we're at the end, use the end position as is\n            if(end >= seqEnd) {\n                end = seqEnd;\n            }\n\n            if(end <= start) {\n                return 0; // No digits to parse\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            // The length includes &#, the optional x/X, the number, and the optional ;\n            int consumedLength = 2 + (isHex ? 1 : 0) + (end - start);\n            // Include the semicolon if it was present\n            if(end < seqEnd && input.charAt(end) == ';') {\n                consumedLength += 1;\n            }\n            return consumedLength;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}