{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start >= seqEnd) { // Prevent out of bounds access for just '&#' at end\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        if (start >= seqEnd) { // Prevent out of bounds, i.e. input ends after '&#x'\n            return 0;\n        }\n\n        int end = start;\n        // Note that this supports character codes without a ; on the end\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // If we didn't find a semicolon, end will be seqEnd (out of bounds for charAt, so never actually read)\n        // Also, we want to ensure we have at least one digit\n        if (start == end) {\n            // No digits after \"&#\" or \"&#x\"\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String entityStr = input.subSequence(start, end).toString();\n            entityValue = Integer.parseInt(entityStr, isHex ? 16 : 10);\n        } catch (NumberFormatException nfe) {\n            // Fallback for badly formatted number\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        // Calculate how many characters we consumed:\n        // 2 for \"&#\", plus (end - (index+2)): number of digits (or digits + x), plus 1 if semicolon, plus 1 if isHex (\"x\")\n        int consumed = end - index;\n        if (end < seqEnd && input.charAt(end) == ';') {\n            consumed++; // include semicolon\n        }\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}