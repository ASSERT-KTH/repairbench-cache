{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n\n            // Check if there's any character after \"&#\".\n            // For example, if input is \"Test &#\", start would be equal to seqEnd, causing SIOOBE.\n            if (start >= seqEnd) {\n                return 0;\n            }\n\n            boolean isHex = false;\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                // If it's hex, ensure there's a character *after* 'x'/'X'.\n                // For example, if input is \"Test &#x\", start+1 would be equal to seqEnd, causing SIOOBE.\n                if (start + 1 >= seqEnd) {\n                    return 0;\n                }\n                start++; // Move past 'x' or 'X'\n                isHex = true;\n            }\n\n            int end = start;\n            // Note that this supports character codes without a ; on the end.\n            // It should stop at the first non-digit character (or non-hex digit for hex) or a semicolon.\n            while(end < seqEnd) {\n                char current = input.charAt(end);\n                if (current == ';') {\n                    break; // Found the end of the entity\n                }\n                // Check if current character is a valid digit for the base\n                if (isHex) {\n                    if (!((current >= '0' && current <= '9') ||\n                          (current >= 'a' && current <= 'f') ||\n                          (current >= 'A' && current <= 'F'))) {\n                        break; // Not a hex digit, stop parsing entity\n                    }\n                } else { // Decimal\n                    if (!(current >= '0' && current <= '9')) {\n                        break; // Not a decimal digit, stop parsing entity\n                    }\n                }\n                end++; // Valid character, continue\n            }\n\n            // If start == end, it means no digits were found (e.g., \"&#;\" or \"&#x;\").\n            // In these cases, it's not a valid numeric entity.\n            if (start == end) {\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                // If parsing fails, it's not a valid numeric entity. Return 0.\n                // The original code included a System.err.println which is typically for debugging.\n                // System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) { // Handles surrogate pairs for characters outside BMP (Basic Multilingual Plane)\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else { // Handles characters within BMP\n                out.write(entityValue);\n            }\n\n            // Calculate the number of characters consumed:\n            // 2 for \"&#\"\n            // (isHex ? 1 : 0) for 'x' or 'X' if present\n            // (end - start) for the numeric/hex digits parsed\n            // +1 if a semicolon was consumed\n            int charsConsumed = 2 + (isHex ? 1 : 0) + (end - start);\n            if (end < seqEnd && input.charAt(end) == ';') {\n                charsConsumed += 1; // Account for the semicolon\n            }\n            return charsConsumed;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}