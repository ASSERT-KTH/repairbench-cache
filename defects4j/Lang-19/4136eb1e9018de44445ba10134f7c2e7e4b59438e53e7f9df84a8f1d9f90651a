{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            // Check if there are enough characters for 'x' or the first digit\n            // This handles cases like \"Test &#\"\n            if (start >= seqEnd) {\n                return 0;\n            }\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &# (i.e., at least one digit)\n                // This handles cases like \"Test &#x\" or \"Test &#X\"\n                if (start >= seqEnd) {\n                    return 0;\n                }\n            }\n\n            int end = start;\n            // Loop while `end` is within bounds and the character is part of the numeric entity\n            while(end < seqEnd) {\n                char c = input.charAt(end);\n                boolean isDigitChar;\n                if (isHex) {\n                    isDigitChar = (c >= '0' && c <= '9') ||\n                                  (c >= 'a' && c <= 'f') ||\n                                  (c >= 'A' && c <= 'F');\n                } else {\n                    isDigitChar = (c >= '0' && c <= '9');\n                }\n\n                if (!isDigitChar) {\n                    // If it's not a digit, check if it's a semicolon.\n                    // If it is, consume it. If not, stop scanning for digits.\n                    if (c == ';') {\n                        end++; // consume the semicolon\n                    }\n                    break; // Stop scanning for digits (or hex digits)\n                }\n                end++; // continue scanning for digits (or hex digits)\n            }\n\n            // If start and end are the same, it means no valid number was found (e.g. &#; or &#x;)\n            // This also handles cases where no digits follow \"&#\" or \"&#x\"\n            if (end == start) {\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n            // System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0; // Return 0 if the parsed sequence is not a valid number\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            // The number of characters consumed from the input, starting from 'index'.\n            // 'end' is now the character *after* the full entity (including optional semicolon).\n            return end - index;\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}