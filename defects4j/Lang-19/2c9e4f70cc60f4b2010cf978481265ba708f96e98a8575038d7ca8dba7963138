{
    "generation": "/**\n * {@inheritDoc}\n */\n@Override\npublic int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &#\n    if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        // Check if we have enough characters after '&#'\n        if (start >= seqEnd) {\n            return 0;\n        }\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n            // Check there's more than just an x after the &#\n            if (start >= seqEnd) {\n                return 0;\n            }\n        }\n\n        int end = start;\n        // Note that this supports character codes without a ; on the end\n        // Find the end position (either ';' or end of string, or non-valid char)\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // If we reached ';' within bounds, parse up to end (exclusive), else up to the end of string\n        int parseEnd = (end < seqEnd && input.charAt(end) == ';') ? end : end;\n\n        // There must be at least one digit\n        if (parseEnd == start) {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            String number = input.subSequence(start, parseEnd).toString();\n            if(isHex) {\n                entityValue = Integer.parseInt(number, 16);\n            } else {\n                entityValue = Integer.parseInt(number, 10);\n            }\n        } catch(NumberFormatException nfe) {\n            // System.err.println(\"FAIL: \" + input.subSequence(start, parseEnd) + \"[\" + start +\"][\"+ parseEnd +\"]\");\n            return 0;\n        }\n\n        if(entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n        // Compute how many characters we consumed\n        // 2 for '&#', then (parseEnd - start) digits,\n        // + (isHex?1:0) if parsed x/X, +1 if ended with ';'\n        int consumed = 2 + (parseEnd - (index + 2)) + (isHex ? 1 : 0);\n        if (end < seqEnd && input.charAt(end) == ';') {\n            consumed++; // for the ';'\n        }\n        return consumed;\n    }\n    return 0;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}