{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n\n            // Check if there's any content after \"&#\"\n            // e.g., \"Test &#\" -> index=5, start=7. seqEnd=7. start >= seqEnd is true.\n            if (start >= seqEnd) {\n                return 0; // Malformed entity like \"Test &#\"\n            }\n\n            boolean isHex = false;\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &#\n                // e.g., \"Test &#x\" -> index=5, start was 7, becomes 8. seqEnd=8. start >= seqEnd is true.\n                if (start >= seqEnd) {\n                    return 0; // Malformed entity like \"Test &#x\"\n                }\n            }\n\n            int end = start;\n            // The loop should stop at the first non-numeric/non-hex character, or at a semicolon.\n            // It should also respect the end of the input sequence.\n            while(end < seqEnd) {\n                char c = input.charAt(end);\n                if (c == ';') {\n                    // Semicolon found, this is the end of the entity\n                    break;\n                }\n                if (isHex) {\n                    // For hex, allow '0'-'9', 'a'-'f', 'A'-'F'\n                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {\n                        // Not a hex digit, stop parsing the entity value\n                        break;\n                    }\n                } else { // Decimal\n                    // For decimal, allow '0'-'9'\n                    if (!(c >= '0' && c <= '9')) {\n                        // Not a decimal digit, stop parsing the entity value\n                        break;\n                    }\n                }\n                end++;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                // This entity did not contain a valid number, so it's not translated.\n                // The original code included System.err.println which is usually removed for production.\n                // System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            // Calculate consumed characters:\n            // 2 for \"&#\"\n            // (end - start) for the numeric part\n            // (isHex ? 1 : 0) for 'x' if present\n            // +1 for the ';' if it was present\n            int charsConsumed = 2 + (end - start) + (isHex ? 1 : 0);\n            if (end < seqEnd && input.charAt(end) == ';') {\n                charsConsumed += 1;\n            }\n            return charsConsumed;\n        }\n        return 0; // Not a numeric entity, return 0\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}