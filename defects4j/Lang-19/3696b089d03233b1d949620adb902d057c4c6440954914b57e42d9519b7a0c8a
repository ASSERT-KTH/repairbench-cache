{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Check for '&#'\n        // Uses -2 to ensure there is something after the &#\n        if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            // Check bounds: Is there anything after \"&#\"?\n            if (start == seqEnd) {\n                return 0; // Input is just \"&#\"\n            }\n\n            boolean isHex = false;\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n                // Check bounds: Is there anything after \"&#x\"?\n                if (start == seqEnd) {\n                    return 0; // Input is just \"&#x\" or \"&#X\"\n                }\n            }\n\n            int end = start;\n            // Find the end of the digits, stopping at bounds or non-digit.\n            // This loop advances 'end' as long as it finds valid digits for the base (10 or 16)\n            // and stays within the bounds of the input sequence.\n            while (end < seqEnd) {\n                char c = input.charAt(end);\n                if (isHex) {\n                    // Check for valid hex digit (0-9, a-f, A-F)\n                    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {\n                        end++;\n                    } else {\n                        break; // Not a hex digit, stop scanning\n                    }\n                } else {\n                    // Check for valid decimal digit (0-9)\n                    if (c >= '0' && c <= '9') {\n                        end++;\n                    } else {\n                        break; // Not a decimal digit, stop scanning\n                    }\n                }\n            }\n\n            // Check if any digits were found after \"&#\" or \"&#x\"\n            if (start == end) {\n                // No digits found, e.g., \"&#;\", \"&#x;\", \"&# non-digit\", \"&#x non-digit\"\n                // This is not a valid numeric entity sequence.\n                return 0;\n            }\n\n            // Check if the entity optionally ends with a semicolon.\n            // The semicolon is only considered part of the entity if it immediately follows the digits.\n            boolean semiColonPresent = (end < seqEnd && input.charAt(end) == ';');\n\n            int entityValue;\n            try {\n                // Parse the numeric value from the identified digit sequence\n                CharSequence numericSequence = input.subSequence(start, end);\n                if (isHex) {\n                    entityValue = Integer.parseInt(numericSequence.toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(numericSequence.toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                // This could happen if the number is extremely large (beyond Integer.MAX_VALUE)\n                // or theoretically if the digit check logic was flawed.\n                // The original code printed an error; maintain that behavior.\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                // Treat as untranslatable, return 0\n                return 0;\n            }\n\n            // Write the character(s) corresponding to the entity value.\n            // Handles supplementary characters (code points > 0xFFFF).\n            if (entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                // Handles BMP characters (including U+0000 if entityValue is 0).\n                out.write(entityValue);\n            }\n\n            // Calculate the total number of input characters consumed by this entity.\n            // Consumed = length of prefix ('&#' or '&#x/') + length of digits + 1 if semicolon was present.\n            int consumed = (start - index) // Length of prefix (2 or 3)\n                         + (end - start);  // Length of digits\n            if (semiColonPresent) {\n                // If a semicolon was present immediately after the digits, it's consumed.\n                consumed++;\n            }\n\n            return consumed;\n        }\n        // The sequence starting at 'index' does not begin with \"&#\", so it's not a numeric entity.\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}