{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Check bounds before accessing characters\n        if(index >= seqEnd - 1) {\n            return 0;\n        }\n\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            if(start < seqEnd) {\n                char firstChar = input.charAt(start);\n                if(firstChar == 'x' || firstChar == 'X') {\n                    start++;\n                    isHex = true;\n                }\n\n                int end = start;\n                // Find the end of the entity (either ';' or end of input)\n                while(end < seqEnd && input.charAt(end) != ';') {\n                    end++;\n                }\n\n                // If we didn't find a semicolon, use current end position (might be incomplete)\n                if(end >= seqEnd) {\n                    // Check if we have at least one character after start\n                    if(start >= seqEnd) {\n                        return 0; // incomplete entity\n                    }\n                    // Try to parse whatever we have\n                } else {\n                    // Include the semicolon in the length calculation\n                    end++;\n                }\n\n                // Ensure we don't exceed bounds when creating the substring\n                if(start < seqEnd && end <= seqEnd) {\n                    String numStr = input.subSequence(start, end).toString();\n                    try {\n                        if (numStr.isEmpty()) {\n                            return 0; // invalid entity\n                        }\n                        int entityValue;\n                        if(isHex) {\n                            entityValue = Integer.parseInt(numStr, 16);\n                        } else {\n                            entityValue = Integer.parseInt(numStr, 10);\n                        }\n\n                        if(entityValue > 0xFFFF) {\n                            char[] chrs = Character.toChars(entityValue);\n                            out.write(chrs[0]);\n                            out.write(chrs[1]);\n                        } else {\n                            out.write(entityValue);\n                        }\n                        return end - index;\n                    } catch(NumberFormatException nfe) {\n                        // Return 0 to skip this match if parsing fails\n                        return 0;\n                    }\n                }\n            }\n        }\n        return 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}