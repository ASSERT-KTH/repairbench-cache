{
    "generation": "void decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        byte b = in[inPos++];\n\n        if (b == PAD) {\n            eof = true;\n            break;\n        }\n\n        if (b >= 0 && b < DECODE_TABLE.length) {\n            int result = DECODE_TABLE[b];\n            if (result >= 0) {\n                modulus = (++modulus) % 4;\n                x = (x << 6) + result;\n\n                if (buffer == null || buffer.length - pos < decodeSize) {\n                    resizeBuffer();\n                }\n                if (modulus == 0) {\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    buffer[pos++] = (byte) (x & MASK_8BITS);\n                }\n            }\n        }\n        // Ignore other characters silently\n    }\n\n    // handle leftover bits at EOF\n    if (eof && modulus != 0) {\n        x = x << (6 * (4 - modulus));\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        switch (modulus) {\n            case 2:\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3:\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n            default:\n                // no valid leftover bits\n                break;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}