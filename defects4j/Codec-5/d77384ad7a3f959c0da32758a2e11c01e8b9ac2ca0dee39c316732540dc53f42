{
    "generation": "void decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (in == null) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            // We're done.\n            eof = true;\n            break;\n        } else {\n            int bUnsigned = b & 0xFF;\n            if (bUnsigned < DECODE_TABLE.length) {\n                int result = DECODE_TABLE[bUnsigned];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                        buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                        buffer[pos++] = (byte) (x & MASK_8BITS);\n                    }\n                }\n            }\n        }\n    }\n\n    // Two forms of EOF as far as base64 decoder is concerned: actual\n    // EOF (-1) and first time '=' character is encountered in stream.\n    // This approach makes the '=' padding characters completely optional.\n    if (eof && modulus != 0) {\n        // we ignore the possible partial last byte\n        x = x << 6;\n        switch (modulus) {\n            case 2:\n                x = x << 6;\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3:\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                break;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}