{
    "generation": "@Override\nvoid decode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        // Ensure we have room for the next up to 3 bytes\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        byte b = in[inPos++];\n        if (b == PAD) {\n            // Padding char means we're done\n            eof = true;\n            break;\n        }\n        // Ignore non\u2010Base64 bytes\n        if (b >= 0 && b < DECODE_TABLE.length) {\n            int result = DECODE_TABLE[b];\n            if (result >= 0) {\n                modulus = (++modulus) % 4;\n                x = (x << 6) + result;\n                if (modulus == 0) {\n                    // A full quartet gives us 3 bytes\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x >> 8)  & MASK_8BITS);\n                    buffer[pos++] = (byte)  (x        & MASK_8BITS);\n                }\n            }\n        }\n    }\n\n    // At EOF (or first '=') flush any remaining partial quartet\n    if (eof && modulus != 0) {\n        // Make sure there's room for the last bytes\n        if (buffer == null || buffer.length - pos < decodeSize) {\n            resizeBuffer();\n        }\n        x <<= 6;\n        switch (modulus) {\n            case 2:\n                // two Base64 chars -> one byte\n                x <<= 6;\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                break;\n            case 3:\n                // three Base64 chars -> two bytes\n                buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                buffer[pos++] = (byte) ((x >> 8)  & MASK_8BITS);\n                break;\n            default:\n                // modulus == 1 -> no output\n        }\n        modulus = 0;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}