{
    "generation": "    /**\n     * <p>\n     * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once\n     * with the data to decode, and once with inAvail set to \"-1\" to alert decoder that EOF has been reached. The \"-1\"\n     * call is not necessary when decoding, but it doesn't hurt, either.\n     * </p>\n     * <p>\n     * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are\n     * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,\n     * garbage-out philosophy: it will not check the provided data for validity.\n     * </p>\n     * <p>\n     * Thanks to \"commons\" project in ws.apache.org for the bitwise operations, and general approach.\n     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n     * </p>\n     * \n     * @param in\n     *            byte[] array of ascii data to base64 decode.\n     * @param inPos\n     *            Position to start reading data from.\n     * @param inAvail\n     *            Amount of bytes available from input for encoding.\n     */\n    void decode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        if (inAvail < 0) {\n            eof = true;\n        }\n        for (int i = 0; i < inAvail; i++) {\n            // Ensure buffer is large enough for decoding triplets\n            if (buffer == null || buffer.length - pos < decodeSize) {\n                resizeBuffer();\n            }\n            byte b = in[inPos++];\n            if (b == PAD) {\n                // We're done.\n                eof = true;\n                break;\n            } else {\n                if (b >= 0 && b < DECODE_TABLE.length) {\n                    int result = DECODE_TABLE[b];\n                    if (result >= 0) {\n                        modulus = (++modulus) % 4;\n                        x = (x << 6) + result;\n                        if (modulus == 0) {\n                            // Ensure buffer is large enough for the decoded triplet\n                            // (This check is repeated here because resizeBuffer() might have been called\n                            // unnecessarily if the first condition was true but the second was false.\n                            // Redundant check removed as it should be handled by the check at the start of the loop)\n                            // if (buffer == null || buffer.length - pos < decodeSize) {\n                            //     resizeBuffer();\n                            // }\n                            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                            buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                            buffer[pos++] = (byte) (x & MASK_8BITS);\n                        }\n                    }\n                }\n            }\n        }\n\n        // Two forms of EOF as far as base64 decoder is concerned: actual\n        // EOF (-1) and first time '=' character is encountered in stream.\n        // This approach makes the '=' padding characters completely optional.\n        if (eof && modulus != 0) {\n            // We may have unprocessed data left in the buffer.\n            // Ensure the buffer has capacity to write the final bytes.\n            if (buffer == null || buffer.length - pos < decodeSize) { // Use decodeSize, ensures capacity for up to 3 bytes, covers 1 or 2 needed here\n                resizeBuffer();\n            }\n\n            // The following check is necessary because resizeBuffer() could potentially fail\n            // or not allocate enough space in edge cases, though ideally it should handle this.\n            // However, the primary issue (NPE) is resolved by ensuring buffer is not null\n            // before attempting to write to it. A robust resizeBuffer() implementation is assumed.\n\n            x = x << 6;\n            switch (modulus) {\n                case 2 :\n                    x = x << 6;\n                    // We can't assume the buffer is large enough, check again for the specific bytes needed\n                    // (Simplified: the check before the switch ensures non-null and *some* capacity >= decodeSize)\n                    // if (buffer == null || buffer.length - pos < 1) { // Need 1 byte\n                    //     resizeBuffer(); // This call path might be complex if resize depends on decodeSize\n                    // }\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    break;\n                case 3 :\n                    // if (buffer == null || buffer.length - pos < 2) { // Need 2 bytes\n                    //     resizeBuffer();\n                    // }\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    break;\n            }\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}