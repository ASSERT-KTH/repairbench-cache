{
    "generation": "/**\n * Adds 1 to the frequency count for v.\n * <p>\n * If other objects have already been added to this Frequency, v must\n * be comparable to those that have already been added.\n * </p>\n * \n * @param v the value to add.\n * @throws IllegalArgumentException if <code>v</code> is not Comparable, \n *         or is not comparable with previous entries\n * @deprecated use {@link #addValue(Comparable)} instead\n */\n@Deprecated\n@SuppressWarnings(\"unchecked\")\npublic void addValue(Object v) {\n    if (!(v instanceof Comparable)) {\n        throw new IllegalArgumentException(\"Object is not Comparable\");\n    }\n    if (!this.values.isEmpty() && !((Comparable<Object>) this.values.iterator().next()).getClass().isInstance(v)) {\n        throw new IllegalArgumentException(\"Object is not comparable with previous entries\");\n    }\n    addValue((Comparable<Object>) v);            \n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}