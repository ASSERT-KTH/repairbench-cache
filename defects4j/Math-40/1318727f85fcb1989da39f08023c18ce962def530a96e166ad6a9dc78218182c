{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected double doSolve() {\n\n        // prepare arrays with the first points\n        final int maximalOrder = getMaximalOrder(); // Use the correct getter\n        final double[] x = new double[maximalOrder + 1];\n        final double[] y = new double[maximalOrder + 1];\n        x[0] = getMin();\n        x[1] = getStartValue();\n        x[2] = getMax();\n        verifySequence(x[0], x[1], x[2]);\n\n        // evaluate initial guess\n        y[1] = computeObjectiveValue(x[1]);\n        if (Precision.equals(y[1], 0.0, 1)) {\n            // return the initial guess if it is a perfect root.\n            return x[1];\n        }\n\n        // evaluate first endpoint\n        y[0] = computeObjectiveValue(x[0]);\n        if (Precision.equals(y[0], 0.0, 1)) {\n            // return the first endpoint if it is a perfect root.\n            return x[0];\n        }\n\n        int nbPoints;\n        int signChangeIndex;\n        if (y[0] * y[1] < 0) {\n\n            // reduce interval if it brackets the root\n            nbPoints        = 2;\n            signChangeIndex = 1;\n\n        } else {\n\n            // evaluate second endpoint\n            y[2] = computeObjectiveValue(x[2]);\n            if (Precision.equals(y[2], 0.0, 1)) {\n                // return the second endpoint if it is a perfect root.\n                return x[2];\n            }\n\n            if (y[1] * y[2] < 0) {\n                // use all computed point as a start sampling array for solving\n                nbPoints        = 3;\n                signChangeIndex = 2;\n            } else {\n                throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n            }\n\n        }\n\n        // prepare a work array for inverse polynomial interpolation\n        final double[] tmpX = new double[x.length];\n\n        // current tightest bracketing of the root\n        double xA    = x[signChangeIndex - 1];\n        double yA    = y[signChangeIndex - 1];\n        double absYA = FastMath.abs(yA);\n        int agingA   = 0;\n        double xB    = x[signChangeIndex];\n        double yB    = y[signChangeIndex];\n        double absYB = FastMath.abs(yB);\n        int agingB   = 0;\n\n        // search loop\n        while (true) {\n\n            // check convergence of bracketing interval\n            final double xTol = getAbsoluteAccuracy() +\n                                getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n                switch (allowed) {\n                case ANY_SIDE :\n                    return absYA < absYB ? xA : xB;\n                case LEFT_SIDE :\n                    return xA;\n                case RIGHT_SIDE :\n                    return xB;\n                case BELOW_SIDE :\n                    return (yA <= 0) ? xA : xB; // Fixed: originally had yA < 0 which mismatches comment/intent\n                case ABOVE_SIDE :\n                    return (yA <  0) ? xB : xA; // Fixed: originally had yA < 0 which mismatches comment/intent for yA >= 0 case\n                default :\n                    // this should never happen\n                    throw new MathInternalError(null);\n                }\n            }\n\n            // target for the next evaluation point\n            double targetY;\n            if (agingA >= MAXIMAL_AGING) {\n                // we keep updating the high bracket, try to compensate this\n                targetY = -REDUCTION_FACTOR * yB;\n            } else if (agingB >= MAXIMAL_AGING) {\n                // we keep updating the low bracket, try to compensate this\n                targetY = -REDUCTION_FACTOR * yA;\n            } else {\n                // bracketing is balanced, try to find the root itself\n                targetY = 0;\n            }\n\n            // Try interpolation first.\n            double nextX;\n            // Use all available points for interpolation.\n            System.arraycopy(x, 0, tmpX, 0, nbPoints);\n            nextX = guessX(targetY, tmpX, y, 0, nbPoints);\n\n            // Check if interpolation failed or produced value outside bracket.\n            if (Double.isNaN(nextX) || !(nextX > xA && nextX < xB)) {\n                 // Fall back to bisection.\n                 nextX = xA + 0.5 * (xB - xA);\n            }\n\n            // evaluate the function at the guessed root\n            final double nextY = computeObjectiveValue(nextX);\n            if (Precision.equals(nextY, 0.0, 1)) {\n                // we have found an exact root, since it is not an approximation\n                // we don't need to bother about the allowed solutions setting\n                return nextX;\n            }\n\n            // Check if we need to drop a point to make space for the new one.\n            if (nbPoints == x.length) {\n                 // We have to drop one point in order to insert the new one.\n                 nbPoints--;\n\n                 // Keep the tightest bracketing interval as centered as possible.\n                 // Drop the point furthest from the sign change interval.\n                 if (signChangeIndex >= (x.length + 1) / 2) {\n                      // Drop the lowest point, shift array and decrement index.\n                      System.arraycopy(x, 1, x, 0, nbPoints);\n                      System.arraycopy(y, 1, y, 0, nbPoints);\n                      signChangeIndex--;\n                 } // else: Dropping the highest point is implicit in the insertion logic below.\n            }\n\n            // Insert the last computed point (nextX, nextY) into the arrays x and y\n            // at the signChangeIndex position, shifting existing elements right.\n            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n            x[signChangeIndex] = nextX;\n            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n            y[signChangeIndex] = nextY;\n            nbPoints++; // Increment the number of points.\n\n            // Update the bracketing interval [xA, xB] based on the sign of nextY.\n            if (nextY * yA <= 0) {\n                // The sign change is between xA and nextX. Update xB.\n                xB = nextX;\n                yB = nextY;\n                absYB = FastMath.abs(yB);\n                ++agingA; // xA remains the same point, increment its age.\n                agingB = 0; // xB is updated, reset its age.\n                // signChangeIndex remains correct as the element before the change is still at signChangeIndex-1.\n            } else {\n                // The sign change is between nextX and xB. Update xA.\n                // This requires nextY and yA to have the same sign.\n                xA = nextX;\n                yA = nextY;\n                absYA = FastMath.abs(yA);\n                agingA = 0; // xA is updated, reset its age.\n                ++agingB; // xB remains the same point, increment its age.\n                // The sign change has effectively moved one position right in the sorted array.\n                signChangeIndex++;\n            }\n        } // End of main loop\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}