{
    "generation": "    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected double doSolve() {\n\n        // prepare arrays with the first points\n        final double[] x = new double[maximalOrder + 1];\n        final double[] y = new double[maximalOrder + 1];\n        x[0] = getMin();\n        x[1] = getStartValue();\n        x[2] = getMax();\n        verifySequence(x[0], x[1], x[2]);\n\n        // evaluate initial guess\n        y[1] = computeObjectiveValue(x[1]);\n        if (Precision.equals(y[1], 0.0, 1)) {\n            // return the initial guess if it is a perfect root.\n            return x[1];\n        }\n\n        // evaluate first endpoint\n        y[0] = computeObjectiveValue(x[0]);\n        if (Precision.equals(y[0], 0.0, 1)) {\n            // return the first endpoint if it is a perfect root.\n            return x[0];\n        }\n\n        int nbPoints;\n        int signChangeIndex;\n        if (y[0] * y[1] < 0) {\n\n            // reduce interval if it brackets the root\n            nbPoints        = 2;\n            signChangeIndex = 1;\n\n        } else {\n\n            // evaluate second endpoint\n            y[2] = computeObjectiveValue(x[2]);\n            if (Precision.equals(y[2], 0.0, 1)) {\n                // return the second endpoint if it is a perfect root.\n                return x[2];\n            }\n\n            if (y[1] * y[2] < 0) {\n                // use all computed point as a start sampling array for solving\n                nbPoints        = 3;\n                signChangeIndex = 2;\n            } else {\n                throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n            }\n\n        }\n\n        // prepare a work array for inverse polynomial interpolation\n        final double[] tmpX = new double[x.length];\n\n        // current tightest bracketing of the root\n        double xA    = x[signChangeIndex - 1];\n        double yA    = y[signChangeIndex - 1];\n        double absYA = FastMath.abs(yA);\n        int agingA   = 0;\n        double xB    = x[signChangeIndex];\n        double yB    = y[signChangeIndex];\n        double absYB = FastMath.abs(yB);\n        int agingB   = 0;\n\n        // search loop\n        while (true) {\n\n            // check convergence of bracketing interval\n            final double xTol = getAbsoluteAccuracy() +\n                                getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n                switch (allowed) {\n                case ANY_SIDE :\n                    return absYA < absYB ? xA : xB;\n                case LEFT_SIDE :\n                    return xA;\n                case RIGHT_SIDE :\n                    return xB;\n                case BELOW_SIDE :\n                    return (yA <= 0) ? xA : xB;\n                case ABOVE_SIDE :\n                    return (yA <  0) ? xB : xA;\n                default :\n                    // this should never happen\n                    throw new MathInternalError(null);\n                }\n            }\n\n            // target for the next evaluation point\n            double targetY;\n            if (agingA >= MAXIMAL_AGING) {\n                // we keep updating the high bracket, try to compensate this\n                targetY = -REDUCTION_FACTOR * yB;\n            } else if (agingB >= MAXIMAL_AGING) {\n                // we keep updating the low bracket, try to compensate this\n                targetY = -REDUCTION_FACTOR * yA;\n            } else {\n                // bracketing is balanced, try to find the root itself\n                targetY = 0;\n            }\n\n            // make a few attempts to guess a root,\n            double nextX;\n            int start = 0;\n            int end   = nbPoints;\n            do {\n\n                // guess a value for current target, using inverse polynomial interpolation\n                System.arraycopy(x, start, tmpX, start, end - start);\n                nextX = guessX(targetY, tmpX, y, start, end);\n\n                if (!((nextX > xA) && (nextX < xB))) {\n                    // the guessed root is not strictly inside of the tightest bracketing interval\n\n                    // the guessed root is either not strictly inside the interval or it\n                    // is a NaN (which occurs when some sampling points share the same y)\n                    // we try again with a lower interpolation order\n                    if (signChangeIndex - start >= end - signChangeIndex) {\n                        // we have more points before the sign change, drop the lowest point\n                        ++start;\n                    } else {\n                        // we have more points after sign change, drop the highest point\n                        --end;\n                    }\n\n                    // we need to do one more attempt\n                    nextX = Double.NaN;\n\n                }\n\n            } while (Double.isNaN(nextX) && (end - start > 1));\n\n            // Check if interpolation failed; if so, use bisection.\n            boolean useBisection = false;\n            if (Double.isNaN(nextX)) {\n                // fall back to bisection\n                nextX = xA + 0.5 * (xB - xA);\n                useBisection = true;\n                // Reset start/end to full range to avoid incorrect point dropping below\n                // start = 0; // Not needed, logic below handles useBisection correctly\n                // end = nbPoints;\n            }\n\n            // evaluate the function at the guessed root\n            final double nextY = computeObjectiveValue(nextX);\n            if (Precision.equals(nextY, 0.0, 1)) {\n                // we have found an exact root, since it is not an approximation\n                // we don't need to bother about the allowed solutions setting\n                return nextX;\n            }\n\n            // Point management: Update the set of points for future interpolations.\n\n            // Check if interpolation succeeded but used a reduced range [start, end).\n            // This implies some points were ignored during interpolation attempts.\n            // We permanently drop those points from our working set.\n            // This should only happen if we didn't fall back to bisection.\n            boolean interpolationUsedReducedPoints = !useBisection && (end - start != nbPoints);\n\n            if ((nbPoints > 2) && interpolationUsedReducedPoints) {\n                // Interpolation succeeded using points from index start to end-1.\n                // Drop points outside this range permanently.\n                nbPoints = end - start; // Adjust point count\n                System.arraycopy(x, start, x, 0, nbPoints); // Shift the kept points to the beginning\n                System.arraycopy(y, start, y, 0, nbPoints);\n                signChangeIndex -= start; // Adjust signChangeIndex relative to the new start (which is 0)\n            } else if (nbPoints == x.length) {\n                // Maximum number of points reached. Need to drop one point\n                // before inserting the new one (nextX, nextY).\n                nbPoints--; // Temporarily decrement nbPoints count.\n                // Try to keep the sign change index roughly centered.\n                if (signChangeIndex >= (x.length + 1) / 2) {\n                    // Drop the lowest point (at index 0).\n                    System.arraycopy(x, 1, x, 0, nbPoints); // Shift x[1..] left to x[0..]\n                    System.arraycopy(y, 1, y, 0, nbPoints); // Shift y[1..] left to y[0..]\n                    --signChangeIndex; // Adjust index since elements shifted left.\n                } // else {\n                  // Drop the highest point (at index nbPoints, which is x.length - 1).\n                  // This happens implicitly because the insertion logic below\n                  // will overwrite the last element when shifting points right.\n                // }\n            }\n            // Note: If neither of the above conditions is met (i.e., bisection was used,\n            // or interpolation used all points, or we have fewer than max points),\n            // no points are dropped here.\n\n            // insert the last computed point (nextX, nextY)\n            // Insert at signChangeIndex, shifting existing points from signChangeIndex onwards to the right.\n            // This maintains the property that xA is at signChangeIndex - 1 and xB is at signChangeIndex\n            // (or will be after the bracket update).\n            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n            x[signChangeIndex] = nextX;\n            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n            y[signChangeIndex] = nextY;\n            ++nbPoints; // Increment point count after successful insertion.\n\n            // update the bracketing interval and related state\n            if (nextY * yA <= 0) {\n                // the sign change occurs between xA and nextX\n                // the new interval is [xA, nextX]\n                xB = nextX; // Update xB\n                yB = nextY;\n                absYB = FastMath.abs(yB);\n                ++agingA;   // xA is Estimate unchanged endpoint, increment its age\n                agingB = 0; // xB is Estimate changed endpoint, reset its age\n                // signChangeIndex still points to the updated xB\n            } else {\n                // the sign change occurs between nextX and xB\n                // the new interval is [nextX, xB]\n                xA = nextX; // Update xA\n                yA = nextY;\n                absYA = FastMath.abs(yA);\n                agingA = 0; // xA is Estimate changed endpoint, reset its age\n                ++agingB;   // xB is Estimate unchanged endpoint, increment its age\n                // update the sign change index, as xB is now one position later in the array\n                signChangeIndex++;\n            }\n            // Continue the search loop\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}