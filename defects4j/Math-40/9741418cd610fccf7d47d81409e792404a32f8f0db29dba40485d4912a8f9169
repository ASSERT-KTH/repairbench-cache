{
    "generation": "@Override\nprotected double doSolve() {\n\n    // prepare arrays with the first points\n    final double[] x = new double[maximalOrder + 1];\n    final double[] y = new double[maximalOrder + 1];\n    x[0] = getMin();\n    x[1] = getStartValue();\n    x[2] = getMax();\n    verifySequence(x[0], x[1], x[2]);\n\n    // evaluate initial guess\n    y[1] = computeObjectiveValue(x[1]);\n    if (Precision.equals(y[1], 0.0, 1)) {\n        return x[1];\n    }\n\n    // evaluate first endpoint\n    y[0] = computeObjectiveValue(x[0]);\n    if (Precision.equals(y[0], 0.0, 1)) {\n        return x[0];\n    }\n\n    int nbPoints;\n    int signChangeIndex;\n    if (y[0] * y[1] < 0) {\n        nbPoints        = 2;\n        signChangeIndex = 1;\n    } else {\n        // evaluate second endpoint\n        y[2] = computeObjectiveValue(x[2]);\n        if (Precision.equals(y[2], 0.0, 1)) {\n            return x[2];\n        }\n        if (y[1] * y[2] < 0) {\n            nbPoints        = 3;\n            signChangeIndex = 2;\n        } else {\n            throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n        }\n    }\n\n    // prepare a work array for inverse polynomial interpolation\n    final double[] tmpX = new double[x.length];\n\n    // current tightest bracketing of the root\n    double xA    = x[signChangeIndex - 1];\n    double yA    = y[signChangeIndex - 1];\n    double absYA = FastMath.abs(yA);\n    int    agingA   = 0;\n    double xB    = x[signChangeIndex];\n    double yB    = y[signChangeIndex];\n    double absYB = FastMath.abs(yB);\n    int    agingB   = 0;\n\n    // search loop\n    while (true) {\n\n        // check convergence of bracketing interval\n        final double xTol = getAbsoluteAccuracy() +\n                            getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n        if (((xB - xA) <= xTol) ||\n            (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n            switch (allowed) {\n                case ANY_SIDE :\n                    return absYA < absYB ? xA : xB;\n                case LEFT_SIDE :\n                    return xA;\n                case RIGHT_SIDE :\n                    return xB;\n                case BELOW_SIDE :\n                    return (yA <= 0) ? xA : xB;\n                case ABOVE_SIDE :\n                    return (yA <  0) ? xB : xA;\n                default :\n                    // this should never happen\n                    throw new MathInternalError(null);\n            }\n        }\n\n        // decide next evaluation point\n        double nextX;\n        int start;\n        int end;\n        if (agingA >= MAXIMAL_AGING || agingB >= MAXIMAL_AGING) {\n            // if one side has not moved for too many iterations, fall back to bisection\n            nextX = 0.5 * (xA + xB);\n            start = signChangeIndex - 1;\n            end   = signChangeIndex;\n        } else {\n            // try inverse polynomial interpolation to y=0\n            final double targetY = 0;\n            start = 0;\n            end   = nbPoints;\n            do {\n                System.arraycopy(x, start, tmpX, start, end - start);\n                nextX = guessX(targetY, tmpX, y, start, end);\n                if (!((nextX > xA) && (nextX < xB))) {\n                    // interpolation went outside the bracket, reduce order\n                    if (signChangeIndex - start >= end - signChangeIndex) {\n                        ++start;\n                    } else {\n                        --end;\n                    }\n                    nextX = Double.NaN;\n                }\n            } while (Double.isNaN(nextX) && (end - start > 1));\n\n            if (Double.isNaN(nextX)) {\n                // interpolation failed or was invalid => bisection\n                nextX = 0.5 * (xA + xB);\n                start = signChangeIndex - 1;\n                end   = signChangeIndex;\n            }\n        }\n\n        // evaluate the function at the chosen point\n        final double nextY = computeObjectiveValue(nextX);\n        if (Precision.equals(nextY, 0.0, 1)) {\n            return nextX;\n        }\n\n        // adjust the stored sample points if some were dropped\n        if ((nbPoints > 2) && (end - start != nbPoints)) {\n            nbPoints = end - start;\n            System.arraycopy(x, start, x, 0, nbPoints);\n            System.arraycopy(y, start, y, 0, nbPoints);\n            signChangeIndex -= start;\n        } else if (nbPoints == x.length) {\n            // we have too many points, drop one\n            nbPoints--;\n            // keep the bracket centered\n            if (signChangeIndex >= (x.length + 1) / 2) {\n                System.arraycopy(x, 1, x, 0, nbPoints);\n                System.arraycopy(y, 1, y, 0, nbPoints);\n                --signChangeIndex;\n            }\n        }\n\n        // insert the new point\n        System.arraycopy(x, signChangeIndex,     x, signChangeIndex + 1, nbPoints - signChangeIndex);\n        x[signChangeIndex] = nextX;\n        System.arraycopy(y, signChangeIndex,     y, signChangeIndex + 1, nbPoints - signChangeIndex);\n        y[signChangeIndex] = nextY;\n        ++nbPoints;\n\n        // update the bracketing interval\n        if (nextY * yA <= 0) {\n            // sign change is to the left of nextX\n            xB    = nextX;\n            yB    = nextY;\n            absYB = FastMath.abs(yB);\n            ++agingA;\n            agingB = 0;\n        } else {\n            // sign change is to the right of nextX\n            xA    = nextX;\n            yA    = nextY;\n            absYA = FastMath.abs(yA);\n            agingA = 0;\n            ++agingB;\n            signChangeIndex++;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}