{
    "generation": "    /** Get a line with reversed direction.\n     * @return a new instance, with reversed direction\n     */\n    public Line revert() {\n        // The original line passes through 'zero' (point closest to origin)\n        // with direction 'direction' (normalized vector).\n        // The reverted line should represent the same geometric line but\n        // with the opposite direction vector, i.e., -direction.\n        // The point closest to the origin ('zero') should remain the same.\n\n        // The Line constructor Line(p1, p2) calculates the direction\n        // as normalize(p2 - p1) and recalculates the 'zero' point.\n        // Using Line(zero, zero.subtract(direction)) calculates delta = -direction.\n        // The constructor then calculates normalize(-direction). Due to floating point\n        // precision, this might not be bit-for-bit identical to direction.negate(),\n        // causing strict tests to fail.\n\n        // An alternative is to use two points symmetric around the current 'zero' point:\n        // p1 = zero + direction\n        // p2 = zero - direction\n        // The vector between these points is p2 - p1 = -2 * direction.\n        // The constructor will compute normalize(-2 * direction), which mathematically\n        // results in -direction (assuming 'direction' is normalized).\n        // The constructor will also recalculate the 'zero' point based on p1 and the new direction.\n        // Mathematically, this recalculation should yield the original 'zero' point.\n        // This approach might have slightly different numerical behavior.\n        final Line reverted = new Line(zero.add(direction), zero.subtract(direction));\n        return reverted;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}