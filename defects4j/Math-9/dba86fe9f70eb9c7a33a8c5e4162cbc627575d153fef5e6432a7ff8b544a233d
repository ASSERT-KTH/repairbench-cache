{
    "generation": "    /** Get a line with reversed direction.\n     * @return a new instance, with reversed direction\n     */\n    public Line revert() {\n        // The original implementation used the public constructor Line(p1, p2),\n        // which calculates the direction as (p2-p1).normalize().\n        // Even if (p2-p1) is already normalized (like -direction is),\n        // calling normalize() again can introduce small floating-point errors,\n        // causing the test to fail.\n        // The fix uses the private constructor Line(zero, direction) which\n        // directly assigns the direction without re-normalizing, assuming the\n        // provided direction is already normalized. Negating a normalized vector\n        // results in a normalized vector.\n        // The 'zero' point (point on the line closest to the origin) remains the same.\n        final Line reverted = new Line(this.zero, this.direction.negate());\n        return reverted;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}