{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip\n     * @return the number of bytes actually skipped\n     * @throws IOException if an I/O error occurs\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        // We want to track the original number to skip, as numToSkip will be decremented.\n        final long originalNumToSkip = numToSkip;\n\n        while (numToSkip > 0) {\n            long skipped = input.skip(numToSkip);\n            if (skipped > 0) {\n                numToSkip -= skipped;\n            } else if (skipped == 0) {\n                // InputStream#skip may return 0 if it cannot skip any\n                // bytes, e.g. when already at EOF, or if the\n                // implementation uses an internal buffer and all the\n                // requested bytes are in the buffer.\n                // Fall back to reading a single byte to make progress.\n                int b = input.read();\n                if (b == -1) { // EOF encountered.\n                    break;\n                }\n                // Successfully read one byte, decrement the count.\n                numToSkip--;\n            }\n            // A return value of < 0 is not possible according to the InputStream#skip contract.\n            // If an implementation violates this, the loop might behave unexpectedly.\n            // We stick to the contract here.\n        }\n            \n        // Return the total number of bytes skipped.\n        return originalNumToSkip - numToSkip;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}