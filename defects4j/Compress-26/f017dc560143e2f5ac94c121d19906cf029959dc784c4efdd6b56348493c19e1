{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip\n     * @return the number of bytes actually skipped\n     * @throws IOException\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        if (numToSkip <= 0) {\n            return 0;\n        }\n\n        long totalSkipped = 0;\n        while (totalSkipped < numToSkip) {\n            long remaining = numToSkip - totalSkipped;\n            long skipped = input.skip(remaining);\n\n            if (skipped == 0) {\n                // If skip() returned 0, it means either the stream has no more data\n                // or it cannot skip using its native mechanism (e.g., if the underlying\n                // stream's skip method is not implemented or returns 0 for other reasons).\n                // We fall back to reading byte by byte.\n                int readByte = input.read();\n                if (readByte == -1) { // End of stream has been reached\n                    break;\n                }\n                skipped = 1; // Successfully read one byte\n            }\n            totalSkipped += skipped;\n        }\n        return totalSkipped;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}