{
    "generation": "/**\n * Skips the given number of bytes by repeatedly invoking skip on\n * the given input stream if necessary.\n *\n * <p>In a case where the stream's skip() method returns 0 before\n * the requested number of bytes has been skip this implementation\n * will fall back to using the read() method.</p>\n *\n * <p>This method will only skip less than the requested number of\n * bytes if the end of the input stream has been reached.</p>\n *\n * @param input stream to skip bytes in\n * @param numToSkip the number of bytes to skip\n * @return the number of bytes actually skipped\n * @throws IOException\n */\npublic static long skip(InputStream input, long numToSkip) throws IOException {\n    long skippedTotal = 0;\n    long remaining = numToSkip;\n    while (remaining > 0) {\n        long skipped = input.skip(remaining);\n        if (skipped == 0) {\n            // Fall back to read if skip returns 0\n            int read = input.read();\n            if (read == -1) {\n                break; // EOF reached\n            }\n            skipped = 1; // we read one byte\n            skippedTotal++;\n            remaining--;\n        } else {\n            skippedTotal += skipped;\n            remaining -= skipped;\n        }\n    }\n    return skippedTotal;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}