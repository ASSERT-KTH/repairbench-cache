{
    "generation": "/**\n * Skips the given number of bytes by repeatedly invoking skip on\n * the given input stream if necessary.\n *\n * <p>In a case where the stream's skip() method returns 0 before\n * the requested number of bytes has been skipped, this implementation\n * will fall back to using the read() method.</p>\n *\n * <p>This method will only skip less than the requested number of\n * bytes if the end of the input stream has been reached.</p>\n *\n * @param input stream to skip bytes in\n * @param numToSkip the number of bytes to skip\n * @return the number of bytes actually skipped\n * @throws IOException\n */\npublic static long skip(InputStream input, long numToSkip) throws IOException {\n    long skipped = 0;\n    while (numToSkip > 0) {\n        long available = input.available();\n        if (available > 0 && available <= numToSkip) {\n            skipped += available;\n            numToSkip -= available;\n            input.skip(available);\n            continue;\n        }\n        \n        long s = input.skip(numToSkip);\n        if (s > 0) {\n            skipped += s;\n            numToSkip -= s;\n            continue;\n        }\n        \n        if (numToSkip > 0) {\n            byte[] buffer = new byte[(int) Math.min(numToSkip, 2048)];\n            int read = input.read(buffer);\n            if (read == -1) {\n                break;\n            }\n            skipped += read;\n            numToSkip -= read;\n        }\n    }\n    \n    return skipped;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}