{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip\n     * @return the number of bytes actually skipped\n     * @throws IOException if an I/O error occurs or the stream does not support seek\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        // We need to keep track of the original number requested, as numToSkip is modified\n        final long available = numToSkip;\n\n        while (numToSkip > 0) {\n            long skipped = input.skip(numToSkip);\n            if (skipped > 0) {\n                // Some bytes were successfully skipped\n                numToSkip -= skipped;\n            } else if (skipped == 0) {\n                // InputStream.skip() returned 0; this may mean\n                // that it's temporarily blocked, or that the\n                // underlying stream is buggy (like FilterInputStream),\n                // or that we are near EOF.\n                // Fall back to reading a single byte.\n                int b = input.read();\n                if (b == -1) {\n                    // Reached EOF, cannot skip anymore.\n                    break;\n                }\n                // Successfully read/skipped one byte.\n                numToSkip--;\n            }\n            // A negative return value from skip() is very unusual,\n            // but possible (see InputStream.skip Javadoc).\n            // It implies an error. If it happens, we break the loop.\n            // This implementation assumes skip() returns >= 0 as per common practice.\n            // If skip < 0 is encountered, the loop terminates and less than the requested\n            // amount might be skipped.\n             else { // skipped < 0\n                 break;\n             }\n        }\n\n        // Return the total number of bytes skipped, calculated by\n        // subtracting the remaining bytes from the initial request.\n        return available - numToSkip;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}