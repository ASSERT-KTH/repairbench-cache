{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip\n     * @return the number of bytes actually skipped\n     * @throws IOException if an I/O error occurs\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        // Store the original number to skip, as numToSkip will be decremented.\n        final long available = numToSkip;\n        // Loop while there are still bytes to skip.\n        while (numToSkip > 0) {\n            // Attempt to skip the remaining number of bytes.\n            long skipped = input.skip(numToSkip);\n            // If skip returns 0, it might mean EOF or that skip cannot skip more bytes\n            // without blocking (in specific stream implementations). Fallback to read().\n            if (skipped == 0) {\n                // Try reading a single byte.\n                int b = input.read();\n                // If read() returns -1, we have reached the end of the stream.\n                if (b == -1) {\n                    // Cannot skip anymore, break the loop.\n                    break;\n                }\n                // Successfully read (and thus skipped) one byte.\n                skipped = 1;\n            }\n            // Decrement the number of bytes remaining to be skipped.\n            numToSkip -= skipped;\n        }\n\n        // Return the total number of bytes actually skipped.\n        // This is calculated as the original number requested minus\n        // the number of bytes that could not be skipped.\n        return available - numToSkip;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}