{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip\n     * @return the number of bytes actually skipped\n     * @throws IOException\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        // totalSkipped tracks the number of bytes successfully skipped so far\n        long totalSkipped = 0; \n        \n        // Loop until we have skipped the requested number of bytes or reached end of stream\n        while (totalSkipped < numToSkip) {\n            // Calculate remaining bytes to skip\n            long remaining = numToSkip - totalSkipped;\n            \n            // Try to skip using the stream's skip() method\n            long skipped = input.skip(remaining);\n            \n            if (skipped == 0) {\n                // If skip() returned 0, it means it couldn't skip any bytes.\n                // This could be because the end of stream has been reached, \n                // or the stream's skip() implementation is unable to skip (e.g., for certain types of streams).\n                // As per documentation, we fall back to read() in this case.\n                \n                int b = input.read(); // Read one byte\n                if (b == -1) {\n                    // End of stream reached. Cannot skip any more bytes.\n                    break;\n                }\n                skipped = 1; // Successfully read one byte\n            }\n            \n            // Add the number of bytes skipped in this iteration to the total\n            totalSkipped += skipped;\n        }\n            \n        return totalSkipped;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}