{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip\n     * @return the number of bytes actually skipped\n     * @throws IOException\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        long totalSkipped = 0;\n        while (totalSkipped < numToSkip) {\n            long remaining = numToSkip - totalSkipped;\n            long skipped = input.skip(remaining); // Try to skip the remaining bytes\n\n            if (skipped == 0) {\n                // If skip() returns 0, it may not mean EOF. It can happen if the stream\n                // does not support skip() or returns 0 even when bytes are available.\n                // In such cases, fall back to reading a single byte to ensure progress\n                // or detect the actual end of the stream.\n                int b = input.read();\n                if (b == -1) {\n                    // End of stream reached\n                    break;\n                }\n                // Successfully read one byte, count it as skipped\n                skipped = 1;\n            }\n            // Accumulate the bytes that were actually skipped (either via skip() or read())\n            totalSkipped += skipped;\n        }\n            \n        return totalSkipped;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}