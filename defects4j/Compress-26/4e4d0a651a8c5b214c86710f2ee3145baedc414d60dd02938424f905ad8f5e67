{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip. Must be non-negative.\n     * @return the number of bytes actually skipped\n     * @throws IOException if the stream is closed or another IOException occurs.\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        // Based on the contract of InputStream.skip, it might skip 0 bytes.\n        // See https://bugs.openjdk.java.net/browse/JDK-6222822\n        // Fall back to read() if skip() returns 0.\n        long remaining = numToSkip;\n        while (remaining > 0) {\n            long skipped = input.skip(remaining);\n            if (skipped > 0) {\n                // Successfully skipped some bytes\n                remaining -= skipped;\n            } else if (skipped == 0) {\n                // skip() returned 0. This may mean temporary unavailability\n                // or end of stream. Fall back to reading a single byte.\n                int b = input.read();\n                if (b == -1) { // End of stream reached\n                    break; // Cannot skip anymore\n                }\n                // Successfully read and discarded one byte\n                remaining--;\n            }\n            // InputStream.skip() should not return negative values, but if it does,\n            // this loop might misbehave. However, standard implementations follow\n            // the contract of returning non-negative values. We proceed assuming\n            // skip returns >= 0.\n        }\n        // Return the total number of bytes actually skipped\n        return numToSkip - remaining;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}