{
    "generation": "    /**\n     * Skips the given number of bytes by repeatedly invoking skip on\n     * the given input stream if necessary.\n     *\n     * <p>In a case where the stream's skip() method returns 0 before\n     * the requested number of bytes has been skip this implementation\n     * will fall back to using the read() method.</p>\n     *\n     * <p>This method will only skip less than the requested number of\n     * bytes if the end of the input stream has been reached.</p>\n     *\n     * @param input stream to skip bytes in\n     * @param numToSkip the number of bytes to skip\n     * @return the number of bytes actually skipped\n     * @throws IOException\n     */\n    public static long skip(InputStream input, long numToSkip) throws IOException {\n        long totalSkipped = 0;\n        // Use a temporary buffer for reading when skip() returns 0.\n        // A common buffer size like 4KB is chosen for efficiency.\n        byte[] skipBuffer = new byte[4096]; \n\n        while (numToSkip > 0) {\n            long currentSkipped = input.skip(numToSkip);\n            if (currentSkipped > 0) {\n                // If skip() successfully skipped some bytes, update counts\n                numToSkip -= currentSkipped;\n                totalSkipped += currentSkipped;\n            } else {\n                // If skip() returned 0 (or less), fall back to read().\n                // Read up to 'numToSkip' bytes, but capped by the buffer size.\n                int bytesRead = input.read(skipBuffer, 0, (int) Math.min(numToSkip, skipBuffer.length));\n                if (bytesRead == -1) {\n                    // End of stream has been reached\n                    break;\n                }\n                // If read() successfully read some bytes, update counts\n                numToSkip -= bytesRead;\n                totalSkipped += bytesRead;\n            }\n        }\n            \n        return totalSkipped;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}