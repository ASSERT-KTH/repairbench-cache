{
    "generation": "    /**\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n     *     (that way the maxDenominator has no effect).\n     * OR\n     *   - a valid maxDenominator value and the epsilon value set to zero\n     *     (that way epsilon only has effect if there is an exact match before\n     *     the maxDenominator value is reached).\n     * </p><p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     *     https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxDenominator maximum denominator value allowed.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge or overflowed.\n     */\n    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        // Check for overflow in the integer part\n        // Ensure a0 is within the range [Integer.MIN_VALUE, Integer.MAX_VALUE]\n        if (a0 < -overflow - 1 || a0 > overflow) { // Changed condition\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            // a0 is within integer range, safe to cast.\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            // Handle potential infinity case if r0 - a0 is zero due to precision loss\n            if (Double.isInfinite(r1)) {\n                 // Cannot compute best convergent, throw exception or return previous?\n                 // Existing code would lead to a large a1, potential overflow later.\n                 // Let's check if this case leads to an issue. If a1 becomes Long.MAX_VALUE.\n                 // If value is very close to an integer, the initial check should handle it.\n                 // If value is very close to a rational, r0-a0 might become tiny.\n                 // Let the calculation proceed, overflow check should handle it.\n                if (Double.isNaN(r1)) {\n                    // Avoid NaN values propagating. Should not happen normally.\n                    throw new FractionConversionException(value, p1, q1); // Use last valid convergent\n                }\n            }\n            long a1 = (long)FastMath.floor(r1);\n\n            // Compute next numerator and denominator using long arithmetic\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n\n            // Check for potential overflow storing p2 or q2 in int.\n            // Check if p2 or q2 exceeds the bounds of Integer.\n            // Denominator q2 should remain positive.\n            if ((p2 > overflow) || (p2 < -overflow - 1) || (q2 > overflow)) { // Added check for p2 < Integer.MIN_VALUE\n                // Detect overflow in numerator or denominator.\n                // Note: This check assumes the long calculation itself did not overflow\n                // in a way that masks this condition (e.g., wrap-around into int range).\n                // However, this covers more cases than the original check.\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            double convergent = (double)p2 / (double)q2;\n            // Check convergence criteria\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                // Continue iterations: update convergents\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                // Met stopping condition (max iterations, epsilon tolerance, or max denominator)\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            // Failed to converge within maxIterations\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        // Decide which convergent to use based on why the loop stopped.\n        // If stopped due to q2 >= maxDenominator, use previous convergent (p1, q1).\n        // Otherwise, use the last calculated convergent (p2, q2).\n        if (q2 < maxDenominator) {\n            // p2 and q2 passed the overflow check inside the loop, safe to cast.\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            // p1 and q1 were the results from the previous iteration (or initial state),\n            // and must have passed the overflow check then. Safe to cast.\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}