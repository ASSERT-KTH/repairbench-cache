{
    "generation": "    /**\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n     *     (that way the maxDenominator has no effect).\n     * OR\n     *   - a valid maxDenominator value and the epsilon value set to zero\n     *     (that way epsilon only has effect if there is an exact match before\n     *     the maxDenominator value is reached).\n     * </p><p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     *     https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxDenominator maximum denominator value allowed.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     */\n    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        // Use long for intermediate calculations to prevent overflow before checking against int bounds.\n        final long maxIntValue = Integer.MAX_VALUE;\n        final long minIntValue = Integer.MIN_VALUE;\n\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n\n        // Check initial a0 for overflow against int bounds.\n        // a0 must fit into an int, as it will be the numerator if the value is an almost-integer.\n        if (a0 > maxIntValue || a0 < minIntValue) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        // The cast to int here is safe because a0 has already been checked against int bounds.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2;\n        long q2;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long)FastMath.floor(r1);\n\n            // Compute the new convergent terms p2 and q2\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n\n            // Check if p2 or q2 exceed int bounds.\n            // Denominators (q values) must also be positive.\n            // In a well-behaved continued fraction algorithm where a_i (i >= 1) are positive,\n            // q_i values are also positive and increasing, so q2 < 0 or q2 == 0 should not occur.\n            if ((p2 > maxIntValue || p2 < minIntValue) ||\n                (q2 > maxIntValue || q2 < minIntValue)) {\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            double convergent = (double)p2 / (double)q2;\n\n            // Stop condition:\n            // 1. Max iterations reached\n            // 2. Convergent is close enough to value (abs error <= epsilon)\n            // 3. Denominator exceeds maxDenominator (q2 >= maxDenominator)\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        // If maxIterations is reached, it means we couldn't converge within the limits.\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        // Select the best approximation:\n        // If the last computed convergent (p2/q2) has a denominator within limits, use it.\n        // Otherwise, use the previous one (p1/q1).\n        // Both p1, q1 and p2, q2 would have passed the int overflow checks in their respective iterations.\n        if (q2 < maxDenominator) {\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}