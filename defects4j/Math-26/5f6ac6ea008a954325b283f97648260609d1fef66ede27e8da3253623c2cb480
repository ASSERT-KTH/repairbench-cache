{
    "generation": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n    throws FractionConversionException\n{\n    long overflow = Integer.MAX_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n\n    // Check overflow on initial integer part\n    if ((a0 > overflow) || (a0 < -overflow)) {\n        throw new FractionConversionException(value, a0, 1L);\n    }\n\n    // handle approximate integers immediately\n    if (FastMath.abs(a0 - value) < epsilon) {\n        if (a0 > overflow || a0 < -overflow) {\n            throw new FractionConversionException(value, a0, 1L);\n        }\n        this.numerator = (int) a0;\n        this.denominator = 1;\n        return;\n    }\n\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n\n    long p2 = 0;\n    long q2 = 1;\n\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        double r1 = 1.0 / (r0 - a0);\n\n        // check for division by zero, which can cause a1 to overflow\n        if (Double.isInfinite(r1)) {\n            break;\n        }\n\n        long a1 = (long) FastMath.floor(r1);\n\n        p2 = a1 * p1 + p0;\n        q2 = a1 * q1 + q0;\n\n        if ((p2 > overflow || q2 > overflow || p2 < -overflow || q2 < 0)) {\n            break; // cannot continue, we expect an overflow or denominator exceeding limits\n        }\n\n        double convergent = (double) p2 / (double) q2;\n        if (n < maxIterations &&\n            FastMath.abs(convergent - value) > epsilon &&\n            q2 <= maxDenominator) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n\n    // Determine which of p1/q1 or p2/q2 is better, including overflow checks\n    if ((q2 <= maxDenominator) && (q2 > 0) && (p2 <= overflow) && (p2 >= -overflow)) {\n        this.numerator = (int) p2;\n        this.denominator = (int) q2;\n    } else if ((q1 <= maxDenominator) && (q1 > 0) && (p1 <= overflow) && (p1 >= -overflow)) {\n        this.numerator = (int) p1;\n        this.denominator = (int) q1;\n    } else {\n        // both denominators overflowed or invalid, throw exception\n        throw new FractionConversionException(value, p1, q1);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}