{
    "generation": "/**\n * Create a fraction given the double value and either the maximum error\n * allowed or the maximum number of denominator digits.\n * <p>\n *\n * NOTE: This constructor is called with EITHER\n *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n *     (that way the maxDenominator has no effect).\n * OR\n *   - a valid maxDenominator value and the epsilon value set to zero\n *     (that way epsilon only has effect if there is an exact match before\n *     the maxDenominator value is reached).\n * </p><p>\n *\n * It has been done this way so that the same code can be (re)used for both\n * scenarios. However this could be confusing to users if it were part of\n * the public API and this constructor should therefore remain PRIVATE.\n * </p>\n *\n * See JIRA issue ticket MATH-181 for more details:\n *\n *     https://issues.apache.org/jira/browse/MATH-181\n *\n * @param value the double value to convert to a fraction.\n * @param epsilon maximum error allowed.  The resulting fraction is within\n *        {@code epsilon} of {@code value}, in absolute terms.\n * @param maxDenominator maximum denominator value allowed.\n * @param maxIterations maximum number of convergents\n * @throws FractionConversionException if the continued fraction failed to\n *         converge or if any intermediate numerator or denominator exceeds\n *         the range of a 32-bit int.\n */\nprivate Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n    throws FractionConversionException {\n\n    long maxInt = Integer.MAX_VALUE;\n    long minInt = Integer.MIN_VALUE;\n\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    // catch initial integer part overflow (both positive and negative)\n    if (a0 > maxInt || a0 < minInt) {\n        throw new FractionConversionException(value, a0, 1L);\n    }\n\n    // check for (almost) integer arguments, which should not go to iterations.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        this.numerator = (int) a0;\n        this.denominator = 1;\n        return;\n    }\n\n    long p0 = 1;\n    long q0 = 0;\n    long p1 = a0;\n    long q1 = 1;\n\n    long p2 = 0;\n    long q2 = 1;\n\n    int n = 0;\n    while (true) {\n        ++n;\n        double r1 = 1.0 / (r0 - a0);\n        long a1 = (long) FastMath.floor(r1);\n\n        p2 = a1 * p1 + p0;\n        q2 = a1 * q1 + q0;\n        // catch overflow of numerator or denominator (both signs for numerator)\n        if (p2 > maxInt || p2 < minInt || q2 > maxInt) {\n            throw new FractionConversionException(value, p2, q2);\n        }\n\n        double convergent = (double) p2 / (double) q2;\n        if (n < maxIterations &&\n            FastMath.abs(convergent - value) > epsilon &&\n            q2 < maxDenominator) {\n\n            // prepare next iteration\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n\n        } else {\n            // either converged within epsilon, or hit maxIterations, or hit maxDenominator\n            break;\n        }\n    }\n\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n\n    // pick the best convergent respecting the denominator bound\n    if (q2 < maxDenominator) {\n        this.numerator   = (int) p2;\n        this.denominator = (int) q2;\n    } else {\n        this.numerator   = (int) p1;\n        this.denominator = (int) q1;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}