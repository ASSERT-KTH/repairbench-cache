{
    "generation": "    /**\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n     *     (that way the maxDenominator has no effect).\n     * OR\n     *   - a valid maxDenominator value and the epsilon value set to zero\n     *     (that way epsilon only has effect if there is an exact match before\n     *     the maxDenominator value is reached).\n     * </p><p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     *     https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxDenominator maximum denominator value allowed.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     */\n    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        double r1 = r0 - a0;\n        if (r1 == 0.0) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n        long p0 = 0;\n        long p1 = 1;\n        long q0 = 1;\n        long q1 = 0;\n        int n = 0;\n        boolean stop = false;\n        do {\n            n++;\n            long a1 = (long)FastMath.floor(1.0 / r1);\n            long p2 = a1 * p1 + p0;\n            if (p2 > overflow) {\n                throw new FractionConversionException(value, p2, q2);\n            }\n            long q2 = a1 * q1 + q0;\n            if (q2 > overflow) {\n                throw new FractionConversionException(value, p2, q2);\n            }\n            double r2 = r1 - 1.0 / a1;\n            if (r2 == 0.0) {\n                this.numerator = (int) p2;\n                this.denominator = (int) q2;\n                return;\n            }\n            if (r2 < r1) {\n                r1 = r2;\n                a0 = a1;\n            } else {\n                throw new FractionConversionException(value, p2, q2);\n            }\n            double convergent = (double)p2 / (double)q2;\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n        if (q2 < maxDenominator) {\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}