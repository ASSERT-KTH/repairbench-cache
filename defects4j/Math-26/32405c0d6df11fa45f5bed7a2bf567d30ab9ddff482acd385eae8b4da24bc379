{
    "generation": "/**\n * Create a fraction given the double value and either the maximum error\n * allowed or the maximum number of denominator digits.\n *\n * NOTE: This constructor is called with EITHER\n *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n *     (that way the maxDenominator has no effect).\n * OR\n *   - a valid maxDenominator value and the epsilon value set to zero\n *     (that way epsilon only has effect if there is an exact match before\n *     the maxDenominator value is reached).\n *\n * @param value the double value to convert to a fraction.\n * @param epsilon maximum error allowed.  The resulting fraction is within\n *        {@code epsilon} of {@code value}, in absolute terms.\n * @param maxDenominator maximum denominator value allowed.\n * @param maxIterations maximum number of convergents\n * @throws FractionConversionException if the continued fraction failed to\n *         converge or if an intermediate numerator/denominator overflows int.\n */\nprivate Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n    throws FractionConversionException {\n\n    // bounds for a valid int\n    final long MAX_INT = Integer.MAX_VALUE;\n    final long MIN_INT = Integer.MIN_VALUE;\n\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    // check overflow of integer part\n    if (a0 > MAX_INT || a0 < MIN_INT) {\n        throw new FractionConversionException(value, a0, 1L);\n    }\n\n    // if value is (almost) integer, we're done\n    if (FastMath.abs(a0 - value) < epsilon) {\n        this.numerator   = (int) a0;\n        this.denominator = 1;\n        return;\n    }\n\n    // initialize the continued fraction expansion\n    long p0 = 1, q0 = 0;\n    long p1 = a0, q1 = 1;\n    long p2 = 0, q2 = 1;\n\n    int n = 0;\n    double r1;\n    long a1;\n\n    while (true) {\n        n++;\n        r1 = 1.0 / (r0 - a0);\n        a1 = (long) FastMath.floor(r1);\n\n        p2 = a1 * p1 + p0;\n        q2 = a1 * q1 + q0;\n\n        // check overflow of intermediate numerator/denominator\n        if (p2 > MAX_INT || p2 < MIN_INT || q2 > MAX_INT || q2 < MIN_INT) {\n            throw new FractionConversionException(value, p2, q2);\n        }\n\n        double convergent = (double) p2 / (double) q2;\n        // decide whether to continue\n        if (n < maxIterations &&\n            FastMath.abs(convergent - value) > epsilon &&\n            q2 < maxDenominator) {\n\n            // shift variables for next iteration\n            p0 = p1; q0 = q1;\n            p1 = p2; q1 = q2;\n            a0 = a1;\n            r0 = r1;\n\n        } else {\n            // either converged, hit maxIterations, or denominator bound\n            break;\n        }\n    }\n\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n\n    // select the best convergent\n    if (q2 < maxDenominator) {\n        this.numerator   = (int) p2;\n        this.denominator = (int) q2;\n    } else {\n        this.numerator   = (int) p1;\n        this.denominator = (int) q1;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}