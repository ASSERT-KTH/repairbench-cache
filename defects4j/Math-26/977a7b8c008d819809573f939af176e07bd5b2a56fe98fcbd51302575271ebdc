{
    "generation": "    /**\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n     *     (that way the maxDenominator has no effect).\n     * OR\n     *   - a valid maxDenominator value and the epsilon value set to zero\n     *     (that way epsilon only has effect if there is an exact match before\n     *     the maxDenominator value is reached).\n     * </p><p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     *     https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxDenominator maximum denominator value allowed.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     */\n    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        // 'overflow' variable name is misleading, it should be intLimit\n        // We use intLimit to explicitly check against Integer.MAX_VALUE and Integer.MIN_VALUE\n        long intLimit = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n\n        // Check if the initial integer part itself overflows an int\n        if (a0 < Integer.MIN_VALUE || a0 > intLimit) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long)FastMath.floor(r1);\n            // a1 is guaranteed to be >= 1 here because r0 - a0 is (value - floor(value)),\n            // which is strictly between 0 and 1 for non-integer values (handled by epsilon check)\n            // so 1/(r0 - a0) > 1.\n\n            // Compute p2 = (a1 * p1) + p0;\n            // Need to check for long overflow in multiplication and addition.\n            // p1 and p0 can be negative based on prior values.\n            long p2_prod;\n            if (a1 == 0) { // Should not happen based on a1 >= 1.\n                p2_prod = 0;\n            } else if (p1 > 0) {\n                if (a1 > Long.MAX_VALUE / p1) { // Positive multiplication overflow\n                    throw new FractionConversionException(value, a1, p1);\n                }\n                p2_prod = a1 * p1;\n            } else { // p1 <= 0\n                if (p1 < Long.MIN_VALUE / a1) { // Negative multiplication overflow\n                    throw new FractionConversionException(value, a1, p1);\n                }\n                p2_prod = a1 * p1;\n            }\n            \n            // Check for addition overflow for p2_prod + p0\n            if (p2_prod > 0 && p0 > 0) {\n                if (p2_prod > Long.MAX_VALUE - p0) { // Positive addition overflow\n                    throw new FractionConversionException(value, p2_prod, p0);\n                }\n            } else if (p2_prod < 0 && p0 < 0) {\n                if (p2_prod < Long.MIN_VALUE - p0) { // Negative addition overflow\n                    throw new FractionConversionException(value, p2_prod, p0);\n                }\n            }\n            p2 = p2_prod + p0;\n\n            // Compute q2 = (a1 * q1) + q0;\n            // q1 and q0 are always non-negative (q0 starts at 0, q1 at 1, subsequent q values are positive).\n            // So a1 * q1 and (a1 * q1) + q0 will always be non-negative.\n            long q2_prod;\n            if (q1 > Long.MAX_VALUE / a1) { // Positive multiplication overflow\n                throw new FractionConversionException(value, a1, q1);\n            }\n            q2_prod = a1 * q1;\n            if (q2_prod > Long.MAX_VALUE - q0) { // Positive addition overflow\n                throw new FractionConversionException(value, q2_prod, q0);\n            }\n            q2 = q2_prod + q0;\n\n            // Now, p2 and q2 are guaranteed to be mathematically correct long values.\n            // Check if they fit within the Integer.MIN_VALUE and Integer.MAX_VALUE range.\n            if (p2 < Integer.MIN_VALUE || p2 > intLimit ||\n                q2 < Integer.MIN_VALUE || q2 > intLimit) {\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            double convergent = (double)p2 / (double)q2;\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n            q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        // The values p2, q2, p1, q1 have already been checked to fit into int range\n        // in the loop before they become candidate for assignment.\n        if (q2 < maxDenominator) {\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}