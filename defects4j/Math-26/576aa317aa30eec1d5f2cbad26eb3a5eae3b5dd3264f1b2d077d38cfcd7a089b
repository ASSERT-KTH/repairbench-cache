{
    "generation": "    /**\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n     *     (that way the maxDenominator has no effect).\n     * OR\n     *   - a valid maxDenominator value and the epsilon value set to zero\n     *     (that way epsilon only has effect if there is an exact match before\n     *     the maxDenominator value is reached).\n     * </p><p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     *     https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxDenominator maximum denominator value allowed.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     */\n    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        // The original `long overflow = Integer.MAX_VALUE;` was insufficient\n        // as it only checked for positive overflow. Numerators and denominators\n        // must fit within `int` range, including negative values.\n        // We will directly use Integer.MAX_VALUE and Integer.MIN_VALUE for bounds checking.\n\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        \n        // Check if the initial integer part `a0` exceeds the int range.\n        // This `a0` will be the numerator if the value is an integer (or close to it)\n        // or an intermediate `p1` for the first iteration.\n        if (a0 > Integer.MAX_VALUE || a0 < Integer.MIN_VALUE) {\n            throw new FractionConversionException(value, a0, 1L);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0; // Safe cast due to check above\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0; // p1 starts as a0, so it's already checked to fit in int\n        long q1 = 1;\n\n        long p2; // numerator candidate\n        long q2; // denominator candidate\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long)FastMath.floor(r1);\n            \n            // Calculate next convergent (p2/q2)\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n\n            // Check for overflow before p2/q2 are used or assigned to int\n            // Both numerator and denominator must fit in int.\n            if (p2 > Integer.MAX_VALUE || p2 < Integer.MIN_VALUE ||\n                q2 > Integer.MAX_VALUE || q2 < Integer.MIN_VALUE) {\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            double convergent = (double)p2 / (double)q2;\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                // Continue iteration: update previous terms\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1; // The `a0` here is the new coefficient for the next iteration (a_n+1)\n                         // It can be large, but it's not directly stored as a numerator/denominator.\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        // Select the convergent that satisfies maxDenominator criteria.\n        // If q2 exceeds maxDenominator, or is not positive, use the previous convergent (p1/q1).\n        // Note: q2 cannot be zero or negative in typical continued fraction computations for positive value.\n        // For negative values, q2 also remains positive.\n        if (q2 < maxDenominator) {\n            this.numerator = (int) p2; // p2 and q2 are guaranteed to fit in int due to earlier checks\n            this.denominator = (int) q2;\n        } else {\n            this.numerator = (int) p1; // p1 and q1 are guaranteed to fit in int from previous iteration or initialization\n            this.denominator = (int) q1;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}