{
    "generation": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n    throws FractionConversionException {\n    long maxInt = Integer.MAX_VALUE;\n    long minInt = Integer.MIN_VALUE;\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n    // Check both upper and lower bounds.\n    if (a0 > maxInt || a0 < minInt) {\n        throw new FractionConversionException(value, a0, 1L);\n    }\n    // If value is (almost) an integer, return it immediately.\n    if (FastMath.abs(a0 - value) < epsilon) {\n        this.numerator = (int) a0;\n        this.denominator = 1;\n        return;\n    }\n\n    long p0 = 1, q0 = 0;\n    long p1 = a0, q1 = 1;\n    long p2 = 0, q2 = 1;\n\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        double r1 = 1.0 / (r0 - a0);\n        long a1 = (long) FastMath.floor(r1);\n        p2 = (a1 * p1) + p0;\n        q2 = (a1 * q1) + q0;\n        // Check that numerator and denominator are within integer bounds.\n        if (p2 > maxInt || p2 < minInt || q2 > maxInt) {\n            throw new FractionConversionException(value, p2, q2);\n        }\n\n        double convergent = (double) p2 / (double) q2;\n        // Continue only if we haven't exceeded maxIterations, the error is still too high,\n        // and the new denominator is still below the allowed maximum.\n        if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n\n    if (q2 < maxDenominator) {\n        this.numerator = (int) p2;\n        this.denominator = (int) q2;\n    } else {\n        this.numerator = (int) p1;\n        this.denominator = (int) q1;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}