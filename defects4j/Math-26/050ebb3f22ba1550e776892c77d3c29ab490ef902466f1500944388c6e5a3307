{
    "generation": "import org.apache.commons.math3.exception.MathIllegalStateException; // Assuming this might be needed, though not used in final code\nimport org.apache.commons.math3.exception.util.LocalizedFormats; // Assuming this might be needed, though not used in final code\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.FieldElement; // Interface placeholder\nimport java.io.Serializable; // Interface placeholder\n\n// Dummy Exception class for compilation context\nclass FractionConversionException extends Exception {\n    private static final long serialVersionUID = 1L; // Added for Serializable\n    public FractionConversionException(double value, int maxIterations) { super(\"Failed to convert \" + value + \" after \" + maxIterations + \" iterations\"); }\n    public FractionConversionException(double value, long p, long q) { super(\"Overflow trying to convert \" + value + \" to fraction (\" + p + \"/\" + q + \")\");}\n}\n\n// Dummy Fraction class context\nabstract class FractionBase // Using abstract base to avoid implementing all methods\n    extends Number\n    implements FieldElement<FractionBase>, Comparable<FractionBase>, Serializable {\n        protected int numerator;\n        protected int denominator;\n\n        // Need dummy methods required by Number if not abstract\n        @Override public int intValue() { return numerator/denominator; }\n        @Override public long longValue() { return (long) numerator/denominator; }\n        @Override public float floatValue() { return (float) numerator/denominator; }\n        @Override public double doubleValue() { return (double) numerator/denominator; }\n\n        // Need dummy methods required by Comparable if not abstract\n        @Override public int compareTo(FractionBase other) { return Double.compare(this.doubleValue(), other.doubleValue()); }\n    }\n\n\npublic class Fraction extends FractionBase { // Actual class containing the method\n\n    /**\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n     *     (that way the maxDenominator has no effect).\n     * OR\n     *   - a valid maxDenominator value and the epsilon value set to zero\n     *     (that way epsilon only has effect if there is an exact match before\n     *     the maxDenominator value is reached).\n     * </p><p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     *     https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxDenominator maximum denominator value allowed.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge or overflowed.\n     */\n    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        // Use Integer constants for clarity and correctness regarding int range.\n        long overflow = Integer.MAX_VALUE;\n        long underflow = Integer.MIN_VALUE;\n\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        // Check if the integer part a0 is outside the range of representable integers.\n        if (a0 > overflow || a0 < underflow) { // FIX 1: Check both positive and negative bounds\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // Check for values that are already very close to an integer.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            // The initial check ensures a0 fits in an int.\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        // Initialization for continued fraction algorithm\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        // Start with the first convergent a0/1\n        long p2 = p1;\n        long q2 = q1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            // Calculate next term in continued fraction expansion\n            // Potential division by zero if r0 - a0 is zero, but FastMath.abs(a0 - value) < epsilon check handles exact integers.\n            // If value is very close to a0 but not within epsilon, r0-a0 is small, r1 large.\n            double r1 = 1.0 / (r0 - a0);\n            // Check for potential overflow creating a1\n            if (r1 > Long.MAX_VALUE) {\n                 // This implies a1 will be Long.MAX_VALUE, potentially leading to overflow\n                 // downstream. The check on p2/q2 below should handle it.\n            }\n            long a1 = (long)FastMath.floor(r1);\n\n            // Calculate next convergent (p2/q2) using recurrence relation\n            // Check for potential overflow during the calculation itself, though Java's long\n            // arithmetic wraps around. The check after calculation is more practical.\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n\n            // Check if the calculated convergent numerator or denominator exceeds integer limits.\n            // Denominator qn is always positive and increasing for n >= 1.\n            if (p2 > overflow || p2 < underflow || q2 > overflow) { // FIX 2: Check p2 against underflow and q2 against overflow\n                // If overflow occurs, throw exception reporting the values p2, q2 that caused it.\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            // Check termination conditions\n            double convergent = (double)p2 / (double)q2;\n\n            // The loop should continue if:\n            // - Iteration limit not reached AND\n            // - Error is greater than epsilon AND\n            // - Denominator is less than maxDenominator limit\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                // Update variables for the next iteration\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                // One of the termination conditions is met, stop the loop.\n                stop = true;\n            }\n        } while (!stop);\n\n        // Post-loop: Determine the result based on why the loop terminated.\n        if (n >= maxIterations) {\n            // Loop terminated because the maximum number of iterations was reached.\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        // Loop terminated early (n < maxIterations).\n        // Reason must be convergence (epsilon) or denominator limit (maxDenominator).\n        if (q2 < maxDenominator) {\n            // Denominator q2 is within the limit.\n            // This implies the loop stopped because the epsilon convergence criterion was met\n            // (FastMath.abs(convergent - value) <= epsilon).\n            // Result is the last calculated convergent p2/q2.\n            // Casts are safe due to the overflow check within the loop.\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            // Denominator q2 reached or exceeded the limit (q2 >= maxDenominator).\n            // The loop stopped because of the denominator constraint.\n            // The best result adhering to the constraint is the *previous* convergent p1/q1.\n            // Casts are safe because p1/q1 were checked for overflow in the previous iteration.\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n    }\n    // Dummy constructor to satisfy abstract class if needed, or for instantiation\n    public Fraction() { this.numerator=0; this.denominator=1; }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}