{
    "generation": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n    throws FractionConversionException {\n    // we will not allow any intermediate numerator or denominator\n    // to exceed the bounds of an int.\n    long overflow = Integer.MAX_VALUE;\n\n    double r0 = value;\n    long a0 = (long) FastMath.floor(r0);\n\n    // check if the integer part itself is too big (positively or negatively)\n    if (a0 > overflow || a0 < -overflow) {\n        throw new FractionConversionException(value, a0, 1L);\n    }\n\n    // if it's (almost) an integer, just return that\n    if (FastMath.abs(a0 - value) < epsilon) {\n        this.numerator = (int) a0;\n        this.denominator = 1;\n        return;\n    }\n\n    // continued fraction convergents\n    long p0 = 1, p1 = a0;\n    long q0 = 0, q1 = 1;\n    long p2 = 0, q2 = 1;\n    int n = 0;\n    boolean stop = false;\n\n    do {\n        ++n;\n        double r1 = 1.0 / (r0 - a0);\n        long a1 = (long) FastMath.floor(r1);\n\n        p2 = a1 * p1 + p0;\n        q2 = a1 * q1 + q0;\n\n        // check for overflow in numerator or denominator\n        if (p2 > overflow || p2 < -overflow || q2 > overflow) {\n            throw new FractionConversionException(value, p2, q2);\n        }\n\n        double convergent = (double) p2 / (double) q2;\n        if (n < maxIterations &&\n            FastMath.abs(convergent - value) > epsilon &&\n            q2 < maxDenominator) {\n            // shift the previous two convergents\n            p0 = p1;  p1 = p2;\n            q0 = q1;  q1 = q2;\n            a0 = a1;\n            r0 = r1;\n        } else {\n            stop = true;\n        }\n    } while (!stop);\n\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n\n    // choose the best of the last two convergents\n    if (q2 < maxDenominator) {\n        this.numerator   = (int) p2;\n        this.denominator = (int) q2;\n    } else {\n        this.numerator   = (int) p1;\n        this.denominator = (int) q1;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}