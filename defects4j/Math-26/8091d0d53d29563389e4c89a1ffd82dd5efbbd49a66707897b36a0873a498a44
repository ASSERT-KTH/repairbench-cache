{
    "generation": "    /**\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n     *     (that way the maxDenominator has no effect).\n     * OR\n     *   - a valid maxDenominator value and the epsilon value set to zero\n     *     (that way epsilon only has effect if there is an exact match before\n     *     the maxDenominator value is reached).\n     * </p><p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     *     https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxDenominator maximum denominator value allowed.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     */\n    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        // Removed 'long overflow = Integer.MAX_VALUE;' as it's insufficient for both positive and negative int range checks.\n\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        // Check for integer overflow/underflow for the initial integer part.\n        // Numerator/denominator must fit in an int.\n        if (a0 > Integer.MAX_VALUE || a0 < Integer.MIN_VALUE) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations. If a0 is out of int range, the above check would\n        // have already thrown an exception. So, if we reach this point, a0 is\n        // guaranteed to be within int range.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long)FastMath.floor(r1);\n\n            // Compute next convergent (p2/q2)\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n\n            // Check for overflow/underflow of the numerator and denominator.\n            // If p2 or q2 exceed int range, throw an exception.\n            if (p2 > Integer.MAX_VALUE || p2 < Integer.MIN_VALUE ||\n                q2 > Integer.MAX_VALUE || q2 < Integer.MIN_VALUE) {\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            double convergent = (double)p2 / (double)q2;\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        // Final assignment: check the chosen convergent (p2/q2 or p1/q1)\n        // one last time before casting to int.\n        // This is a defensive check; ideally, the loop condition should\n        // have caught any overflow earlier.\n        if (q2 < maxDenominator) {\n            if (p2 > Integer.MAX_VALUE || p2 < Integer.MIN_VALUE ||\n                q2 > Integer.MAX_VALUE || q2 < Integer.MIN_VALUE) {\n                throw new FractionConversionException(value, p2, q2);\n            }\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            if (p1 > Integer.MAX_VALUE || p1 < Integer.MIN_VALUE ||\n                q1 > Integer.MAX_VALUE || q1 < Integer.MIN_VALUE) {\n                throw new FractionConversionException(value, p1, q1);\n            }\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}