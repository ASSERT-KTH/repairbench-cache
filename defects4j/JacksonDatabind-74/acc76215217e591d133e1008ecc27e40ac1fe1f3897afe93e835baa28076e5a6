{
    "generation": "    // off-lined to keep main method lean and mean...\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n            TokenBuffer tb) throws IOException\n    {\n        // As per [databind#1533], check for empty string should be delegated properly\n        // BEFORE trying default implementation or natural types\n        if (p.hasToken(JsonToken.VALUE_STRING)) {\n            String str = p.getText();\n            // Note: cannot use `p.getText().isEmpty()` as that could advance parser\n            if (str.isEmpty() && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                 return null;\n            }\n        }\n\n        // As per [JACKSON-614], may have default implementation to use\n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            if (tb != null) {\n                tb.writeEndObject();\n                p = tb.asParser(p);\n                // must move to point to the first token:\n                p.nextToken();\n            }\n            return deser.deserialize(p, ctxt);\n        }\n        // or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n        // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromAny(p, ctxt);\n        }\n\n        // 17-Jan-2018, tatu: Add specialized handling for `null`? Seems unlikely\n        //   to pass related checks above, but...\n        // NOTE: Do NOT use `p.hasToken()` as that cannot distinguish between `null` available\n        //   and no token available.\n        if (p.getCurrentToken() == JsonToken.VALUE_EMBEDDED_OBJECT) {\n           Object ob = p.getEmbeddedObject();\n           if (ob == null) {\n              // 02-Mar-2018, tatu: as per [databind#1899] need to return `null` here\n              return null;\n           }\n           // 04-Sep-2019, tatu: [databind#2430]: need to allow compatible type as well\n           if (_baseType.getRawClass().isAssignableFrom(ob.getClass())) {\n               return ob;\n           }\n        }\n\n        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n        return null;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}