{
    "generation": "    // off-lined to keep main method lean and mean...\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n            TokenBuffer tb) throws IOException\n    {\n        // [databind#1533]: May need special handling for empty String as null\n        // NOTE: only handles empty string; null handled earlier upstream\n        // Check must be performed specifically for VALUE_STRING, considering it is the current token\n        // 11-Jun-2020, tatu: In case of `null` property value, we expect null token;\n        //    but with empty String, may get `VALUE_STRING` instead. Need to handle.\n        if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n            JsonToken t = p.currentToken();\n            if (t == JsonToken.VALUE_STRING) {\n                String str = p.getText().trim();\n                if (str.isEmpty()) {\n                    return null;\n                }\n            }\n        }\n\n        // As per [JACKSON-614], may have default implementation to use\n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            if (tb != null) {\n                tb.writeEndObject();\n                p = tb.asParser(p);\n                // must move to point to the first token:\n                p.nextToken();\n            }\n            return deser.deserialize(p, ctxt);\n        }\n        // or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n        // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n        if (p.currentToken() == JsonToken.START_ARRAY) { // Use currentToken() for safety\n            return super.deserializeTypedFromAny(p, ctxt);\n        }\n        // 16-Feb-2018, tatu: As per [databind#1898], should use `reportMissingTypeId`\n        // 11-Jun-2020, tatu: ... or maybe `handleMissingTypeId`? For now, leave as is\n        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n        return null; // never gets here\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}