{
    "generation": "// off-lined to keep main method lean and mean...\n@SuppressWarnings(\"resource\")\nprotected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n        TokenBuffer tb) throws IOException\n{\n    // As per [JACKSON-614], may have default implementation to use\n    JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n    if (deser != null) {\n        if (tb != null) {\n            tb.writeEndObject();\n            p = tb.asParser(p);\n            // must move to point to the first token:\n            p.nextToken();\n        }\n        // Also: [databind#1533]: allow default deserializer to handle empty String as well\n        if (p.getCurrentToken() == JsonToken.VALUE_STRING && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n            String str = p.getText();\n            if (str.length() == 0) {\n                return null;\n            }\n        }\n        return deser.deserialize(p, ctxt);\n    }\n    // or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\n    Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n    if (result != null) {\n        return result;\n    }\n    // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n    if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n        return super.deserializeTypedFromAny(p, ctxt);\n    }\n    // Change [databind#2286]: try to give more contextual info\n    ctxt.reportWrongTokenException(this, JsonToken.FIELD_NAME,\n            \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}