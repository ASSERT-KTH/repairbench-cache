{
    "generation": "protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n        TokenBuffer tb) throws IOException\n{\n    JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n    if (deser != null) {\n        if (tb != null) {\n            tb.writeEndObject();\n            p = tb.asParser(p);\n            p.nextToken();\n        }\n        return deser.deserialize(p, ctxt);\n    }\n    Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n    if (result != null) {\n        return result;\n    }\n    // Check if current token is a string and is empty\n    if (p.getCurrentToken() == JsonToken.VALUE_STRING && p.getValueAsString().isEmpty()) {\n        return null;\n    }\n    if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n        return super.deserializeTypedFromAny(p, ctxt);\n    }\n    ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n            \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}