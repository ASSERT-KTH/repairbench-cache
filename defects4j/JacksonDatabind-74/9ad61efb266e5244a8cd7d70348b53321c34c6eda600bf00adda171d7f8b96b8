{
    "generation": "    // off-lined to keep main method lean and mean...\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n            TokenBuffer tb) throws IOException\n    {\n        // As per [JACKSON-614], may have default implementation to use\n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            if (tb != null) {\n                // Should only be used if we had buffered content (e.g. from AsProperty)\n                // that now needs to be re-parsed as the full content.\n                //\n                // !!! NOTE: This `writeEndObject()` is only correct if the buffered\n                // content actually started an object. In cases where the content\n                // could be a scalar or array, this might be incorrect.\n                // However, this method is typically called after the type id\n                // is missing from an object (AsProperty case), so likely fine.\n                tb.writeEndObject();\n                p = tb.asParser(p);\n                // must move to point to the first token:\n                p.nextToken();\n            }\n            return deser.deserialize(p, ctxt);\n        }\n\n        // [databind#1533]: Allow empty String as null for polymorphic types\n        // This check must happen BEFORE TypeDeserializer.deserializeIfNatural,\n        // as deserializeIfNatural might return \"\" for a String type, which\n        // would then fail the check in the caller context if it's not String.class\n        // and expecting null when ACCEPT_EMPTY_STRING_AS_NULL_OBJECT is enabled.\n        if (p.getCurrentToken() == JsonToken.VALUE_STRING\n                && p.getTextLength() == 0) {\n            // If the base type is String, it should deserialize to an empty string, not null.\n            // So we only apply this logic if the base type is NOT String\n            if (!String.class.isAssignableFrom(_baseType)) {\n                if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                    return null;\n                }\n            }\n        }\n\n        // or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n        // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromAny(p, ctxt);\n        }\n        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}