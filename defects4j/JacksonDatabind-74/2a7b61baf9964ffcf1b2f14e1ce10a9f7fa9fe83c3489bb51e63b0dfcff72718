{
    "generation": "    // off-lined to keep main method lean and mean...\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n            TokenBuffer tb) throws IOException\n    {\n        // As per [JACKSON-614], may have default implementation to use\n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            if (tb != null) {\n                tb.writeEndObject();\n                p = tb.asParser(p);\n                // must move to point to the first token:\n                p.nextToken();\n            }\n            return deser.deserialize(p, ctxt);\n        }\n        // or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n\n        // [databind#1533]: May map empty String to null, if enabled\n        if (p.getCurrentToken() == JsonToken.VALUE_STRING) {\n            // Cant check for \"\" + ACCEPT_EMPTY_STRING_AS_NULL_OBJECT without this:\n             if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                 String str = p.getText();\n                 if (str.isEmpty()) {\n                     return null;\n                 }\n             }\n        }\n\n        // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromAny(p, ctxt);\n        }\n        // 20-May-2020, tatu: As per [databind#2777], need to ensure we handle BUFFERING\n        //   correctly (don't consume token that belongs to value)\n        //   (but only applies if buffering occurred)\n        if (tb != null) { // only matters if we are buffering\n             // Is this even possible? It ought to mean we were buffering a scalar...\n             // This seems like it should perhaps lead to an exception?\n             // Specifically: we seem to be inside a `{}` structure (implicit or explicit),\n             // and we were trying to buffer. But we are hitting a scalar token?\n             // This would seem to require input like:\n             //\n             //   { \"prop\" : 123 }\n             //\n             // which would seem broken...\n\n             // ... but perhaps not. Consider case of `@JsonTypeInfo(use = DEDUCTION)` ?\n             // (although why would we get here?)\n\n             // For now let's assume things are fine... ?\n        }\n\n        // Hitting this point means that we are missing the type property\n        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}