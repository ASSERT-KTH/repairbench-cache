{
    "generation": "    // off-lined to keep main method lean and mean...\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n            TokenBuffer tb) throws IOException\n    {\n        // As per [JACKSON-614], may have default implementation to use\n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            // If we have buffer, must use copy marker\n            JsonParser p2 = p; // use method parameter name 'p' for buffer parser if needed\n            if (tb != null) {\n                // Must be done before trying to deserialize:\n                tb.writeEndObject();\n                p2 = tb.asParser(p);\n                // must move to point to the first token:\n                p2.nextToken();\n            }\n            try {\n                // Ok, let's try using default implementation\n                return deser.deserialize(p2, ctxt);\n            } catch (Exception e) {\n                // 03-Nov-2017, tatu: As per [databind#1533], need to be careful...\n                // Intercept and check for explicit `null` from empty String value?\n                // (note: we are only called if JsonTypeInfo.As.PROPERTY handling fails)\n                if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                    // Need to use a copy for introspection, to avoid interference with fallbacks\n                    // Also, need to START with buffer/existing parser: does not consume token from `p`\n                    // 18-Nov-2017, tatu: NOTE! This is messy, likely to break for cases where there are\n                    //    multiple properties, OR if value itself is structured. But has to do for now.\n                    JsonParser p3 = (tb == null) ? p : tb.asParser(p);\n                    if (p3.nextToken() == JsonToken.VALUE_STRING) {\n                        if (p3.getText().isEmpty()) {\n                            if (p3.nextToken() == null) { // end of input? Or just buffer...\n                                return null;\n                            }\n                        }\n                    }\n                }\n                // If exception is not handled, fall through to default error reporting:\n                // also, need to simply call method itself, not throw here\n                // Fall through to error reporting below? Or re-throw? Let's fall through for now.\n                // ... fall through to outside catches looks necessary, actually...\n                // But, nope, return path is just null return, apparently. Do that. Seems wrong tho.\n                // ... and finally, let's try re-throwing, to see what happens: maybe the intent is\n                // that the original failure should propagate.\n                 throw JsonMappingException.wrapWithPath(e, deser.handledType(), 0);\n            }\n        }\n        // or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n        // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromAny(p, ctxt);\n        }\n        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n        return null;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}