{
    "generation": "    // off-lined to keep main method lean and mean...\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n            TokenBuffer tb) throws IOException\n    {\n        // As per [JACKSON-614], may have default implementation to use\n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            if (tb != null) {\n                tb.writeEndObject();\n                p = tb.asParser(p);\n                // must move to point to the first token:\n                p.nextToken();\n            }\n            return deser.deserialize(p, ctxt);\n        }\n        // or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n\n        // [databind#1533]: If `deserializeIfNatural` returned `null` (because `_baseType`\n        // is not `String.class`), but the current token is `\"\"` and `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT`\n        // is enabled, we should treat this as a `null` object.\n        // `deserializeIfNatural` itself performs this check, but returns `null`\n        // to indicate it couldn't fully deserialize to the `_baseType`.\n        // The calling context needs to explicitly return `null` if this specific `null`\n        // condition (empty string to null object) was met.\n        if (p.getCurrentToken() == JsonToken.VALUE_STRING) {\n            String text = p.getText();\n            if (text.isEmpty()) {\n                if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                    return null;\n                }\n            }\n        }\n\n        // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromAny(p, ctxt);\n        }\n        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}