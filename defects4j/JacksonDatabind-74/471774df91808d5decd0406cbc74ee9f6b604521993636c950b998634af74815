{
    "generation": "    // off-lined to keep main method lean and mean...\n    @SuppressWarnings(\"resource\")\n    protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,\n            TokenBuffer tb) throws IOException\n    {\n        // First, check for `ACCEPT_EMPTY_STRING_AS_NULL_OBJECT` feature for empty String values.\n        // This is typically handled by regular deserializers. However, in polymorphic deserialization\n        // where a type id is expected but not found, and no default implementation is applicable\n        // or a \"natural\" type is not recognized, an empty string could lead to a `reportWrongTokenException`.\n        // If the feature is enabled and the value is an empty string, and the target type is not\n        // String.class (for which `\"\"` is a valid non-null value), we should return null.\n        if (p.getCurrentToken() == JsonToken.VALUE_STRING\n                && p.getText().isEmpty()) {\n            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)\n                && !String.class.isAssignableFrom(_baseType)) {\n                return null;\n            }\n        }\n\n        // As per [JACKSON-614], may have default implementation to use\n        JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);\n        if (deser != null) {\n            if (tb != null) {\n                // IMPORTANT: This specific `writeEndObject()` operation on `tb` is unusual\n                // and depends heavily on how `tb` is pre-populated in specific `TypeDeserializer`\n                // implementations (e.g., if it only contains start-object and fields, but not end-object).\n                // It is kept as-is as it's not the cause of the current reported issue.\n                tb.writeEndObject();\n                p = tb.asParser(p);\n                // must move to point to the first token:\n                p.nextToken();\n            }\n            return deser.deserialize(p, ctxt);\n        }\n        // or, perhaps we just bumped into a \"natural\" value (boolean/int/double/String)?\n        Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);\n        if (result != null) {\n            return result;\n        }\n        // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n        if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n            return super.deserializeTypedFromAny(p, ctxt);\n        }\n        ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}