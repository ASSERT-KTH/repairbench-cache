{
    "generation": "    /**\n     * Helper method used by standard deserializer.\n     * \n     * @since 2.3\n     */\n    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n    {\n        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from\n         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need\n         *    to assume one did exist.\n         */\n        JsonToken t = jp.getCurrentToken();\n\n        // If the current token is FIELD_NAME, we need to implicitly wrap it in START_OBJECT / END_OBJECT\n        if (t == JsonToken.FIELD_NAME) {\n            // This 'this' is the TokenBuffer instance we are building.\n            this.writeStartObject(); // Add the implicit START_OBJECT\n\n            // copyCurrentStructure(jp) when jp is FIELD_NAME in this version of TokenBuffer\n            // (due to its 'else' block calling copyCurrentEvent) only writes the FIELD_NAME itself,\n            // and does NOT advance the parser to the value, nor does it handle the implicit object wrapping.\n            // So, we handle it manually here:\n            this.copyCurrentEvent(jp); // Write the FIELD_NAME\n\n            // Advance the parser to the value of the field (e.g., START_OBJECT, VALUE_STRING, etc.)\n            jp.nextToken();\n\n            // Now, copy the value structure. This will be handled correctly by copyCurrentStructure\n            // because `jp` is now positioned at the start of the value (a container or a scalar),\n            // which `copyCurrentStructure` knows how to copy entirely.\n            this.copyCurrentStructure(jp);\n\n            this.writeEndObject(); // Add the implicit END_OBJECT\n        } else {\n            // For all other cases (START_OBJECT, START_ARRAY, or scalar values like VALUE_STRING, VALUE_NUMBER_INT),\n            // copyCurrentStructure(jp) should copy the entire structure correctly based on its current position.\n            this.copyCurrentStructure(jp);\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}