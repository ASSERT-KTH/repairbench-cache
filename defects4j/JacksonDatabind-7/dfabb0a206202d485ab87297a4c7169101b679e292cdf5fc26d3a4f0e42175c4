{
    "generation": "    /**\n     * Helper method used by standard deserializer.\n     * \n     * @since 2.3\n     */\n    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n    {\n        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from\n         *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need\n         *    to assume one did exist.\n         */\n        if (jp.getCurrentToken() == JsonToken.FIELD_NAME) {\n            // If starting from a FIELD_NAME, we need to implicitly wrap it in an object structure.\n            // 'this' refers to the TokenBuffer instance being built.\n            writeStartObject(); \n            // Now copy the field name and its value structure into the buffer.\n            // This will also advance the parser past the value.\n            copyCurrentStructure(jp);\n            // Close the implicitly added object.\n            writeEndObject();\n        } else {\n            // For other token types (START_OBJECT, START_ARRAY, or scalar values),\n            // simply copy the current structure as usual.\n            copyCurrentStructure(jp);\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}