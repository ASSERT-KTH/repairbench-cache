{
    "generation": "    /**\n     * Helper method used by standard deserializer.\n     * \n     * @since 2.3\n     */\n    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n    {\n        JsonToken t = jp.getCurrentToken();\n\n        // 28-Oct-2014, tatu: As per #592, need to support a special case of starting from\n        //    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need\n        //    to assume one did exist.\n        if (t == JsonToken.FIELD_NAME) {\n            writeStartObject();\n            while (t == JsonToken.FIELD_NAME) {\n                // copyCurrentStructure(jp) copies FIELD_NAME and its value,\n                // and then advances jp past that value.\n                copyCurrentStructure(jp); \n                t = jp.getCurrentToken(); // get the token after copying the current field/value\n            }\n            writeEndObject();\n        } else {\n            // For all other cases (START_OBJECT, START_ARRAY, scalar values),\n            // copyCurrentStructure should correctly copy the entire current value\n            // including its start/end tokens if applicable.\n            copyCurrentStructure(jp);\n        }\n        return this;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}