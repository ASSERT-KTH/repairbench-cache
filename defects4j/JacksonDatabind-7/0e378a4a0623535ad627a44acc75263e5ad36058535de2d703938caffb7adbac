{
    "generation": "    /**\n     * Helper method used by standard deserializer.\n     * \n     * @since 2.3\n     */\n    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n    {\n        /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from\n         *    FIELD_NAME. This occurs when a delegate deserializer (like TokenBuffer's)\n         *    is invoked for a root-level or embedded object, but the parser has already\n         *    advanced past the START_OBJECT token, leaving it positioned at the first\n         *    FIELD_NAME. In such cases, we need to implicitly add the START_OBJECT\n         *    to ensure the TokenBuffer's content is a complete JSON object.\n         */\n        JsonToken t = jp.getCurrentToken();\n\n        if (t == JsonToken.FIELD_NAME) {\n            // If the parser is currently at FIELD_NAME, it implies an object is being read\n            // but the START_OBJECT token was consumed before this deserialize method was called.\n            // We need to implicitly write the START_OBJECT token into this TokenBuffer\n            // before copying the rest of the structure.\n            writeStartObject();\n            // Then copy the rest of the structure, which will start from the current FIELD_NAME\n            // and include all fields and values until the matching END_OBJECT.\n            copyCurrentStructure(jp);\n        } else {\n            // For all other cases (e.g., current token is START_OBJECT, START_ARRAY,\n            // or a scalar value), simply copy the current structure directly as is.\n            copyCurrentStructure(jp);\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}