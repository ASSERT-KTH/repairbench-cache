{
    "generation": "    /**\n     * Helper method used by standard deserializer.\n     * \n     * @since 2.3\n     */\n    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n    {\n        JsonToken t = jp.getCurrentToken();\n\n        // 09-Apr-2014, tatu: As per #592, need to support a special case of starting from\n        //    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need\n        //    to assume one did exist.\n        if (t == JsonToken.START_OBJECT || t == JsonToken.START_ARRAY) {\n            // Standard case: parser is at the beginning of an object or array,\n            // copy the entire structure including its start/end markers.\n            copyCurrentStructure(jp); \n        } else if (t == JsonToken.FIELD_NAME) {\n            // Special case for #592: current token is FIELD_NAME.\n            // This implies an implicit START_OBJECT was consumed by a creator/handler\n            // and the TokenBuffer should re-wrap the content as an object containing\n            // all subsequent field-value pairs until the logical end of the object.\n            writeStartObject(); // Prepend implicit object start\n            // Loop through all fields of this implicit object\n            while (t == JsonToken.FIELD_NAME) {\n                copyCurrentEvent(jp); // Copies FIELD_NAME, advances parser to its value\n                copyCurrentStructure(jp); // Copies the VALUE (scalar, object, or array), advances parser to next FIELD_NAME or END_OBJECT\n                t = jp.getCurrentToken(); // Get next token for loop condition\n            }\n            writeEndObject(); // Append implicit object end\n        } else { // Otherwise, must be a scalar value (String, Number, Boolean, Null)\n            // Just copy the single current scalar event.\n            copyCurrentStructure(jp); // This method internally calls copyCurrentEvent for scalars\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}