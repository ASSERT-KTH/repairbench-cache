{
    "generation": "    /**\n     * Helper method used by standard deserializer.\n     * \n     * @since 2.3\n     */\n    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n    {\n        // Get the current token from the input parser.\n        JsonToken t = jp.getCurrentToken();\n\n        /*\n         * 28-Oct-2014, tatu: As per #592, need to support a special case of starting from\n         * FIELD_NAME. This occurs when a TokenBuffer is used to capture \"unrecognized\"\n         * properties or as a delegate for a sub-object within an existing object.\n         * In such a case, the START_OBJECT token has already been consumed (or is implicit),\n         * and the TokenBuffer should encapsulate the remaining properties as its own object.\n         */\n        if (t == JsonToken.FIELD_NAME) {\n            // If the parser is at a FIELD_NAME, we need to implicitly wrap the content\n            // within a START_OBJECT and END_OBJECT in the TokenBuffer.\n            writeStartObject();\n            \n            // Loop and copy all subsequent FIELD_NAME/VALUE pairs until the parser\n            // moves out of the current object scope (i.e., hits an END_OBJECT of the parent,\n            // or the end of stream).\n            // copyCurrentStructure(jp) is used here because when at FIELD_NAME, it copies\n            // both the field name and its value (which could be a scalar, array, or object),\n            // and advances the parser past that entire structure.\n            while (t == JsonToken.FIELD_NAME) {\n                copyCurrentStructure(jp); // Copies the field name and its value\n                t = jp.getCurrentToken();  // Advance and get the next token\n            }\n            // After copying all relevant fields, close the implicit object.\n            writeEndObject();\n        } else {\n            // For all other cases (START_OBJECT, START_ARRAY, or scalar values),\n            // simply copy the current structure as-is.\n            // copyCurrentStructure(jp) will correctly handle nested structures\n            // (objects and arrays) by consuming all their tokens until the matching END_OBJECT/END_ARRAY.\n            copyCurrentStructure(jp);\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}