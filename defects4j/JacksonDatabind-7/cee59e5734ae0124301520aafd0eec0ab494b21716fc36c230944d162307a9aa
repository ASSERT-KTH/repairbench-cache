{
    "generation": "    /**\n     * Helper method used by standard deserializer.\n     * \n     * @since 2.3\n     */\n    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n    {\n        // 28-Oct-2014, tatu: As per #592, need to support a special case of starting from\n        //    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need\n        //    to assume one did exist.\n        // 17-Aug-2017, tatu: ... also potentially START_ARRAY? (Not sure if needed)\n\n        JsonToken t = jp.currentToken();\n        // If we are starting implicitly (current token is FIELD_NAME),\n        // need to manually add START_OBJECT.\n        if (t == JsonToken.FIELD_NAME) {\n            // First, write the implied START_OBJECT:\n            writeStartObject();\n            // Then copy the actual token, which is FIELD_NAME, and rest of contents\n            copyCurrentStructure(jp);\n        } else {\n            // NOTE: jp may point to START_OBJECT / START_ARRAY, or a scalar value.\n            // We must copy whatever is the current token and contained structure.\n            copyCurrentStructure(jp);\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}