{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        // Special handling for MonthDay (no year) - adjust day if invalid in target month\n        if (partial.size() == 2 &&\n            partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) &&\n            partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth())) {\n\n            // Use a leap year as a base so 2-29 is a valid day\n            int baseYear = 2004;\n            int month = values[0];\n            int day = values[1];\n\n            // Compose base instant (using fixed leap year 2004)\n            long instant = iChronology.getDateTimeMillis(baseYear, month, day, 0, 0, 0, 0);\n\n            // Add value to the target field\n            instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, valueToAdd);\n\n            // Get the year, month, day after addition\n            int newMonth = iChronology.monthOfYear().get(instant);\n            int newDay = iChronology.dayOfMonth().get(instant);\n\n            // Defensive: Clamp day if it exceeds max for resulting month in BASE year\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(baseYear, newMonth);\n            if (newDay > maxDay) {\n                newDay = maxDay;\n            }\n\n            return new int[] { newMonth, newDay };\n        } else {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}