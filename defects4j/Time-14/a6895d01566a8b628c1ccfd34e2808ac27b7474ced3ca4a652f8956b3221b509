{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            // Handle the case where the field is not contiguous\n            int[] newValues = new int[values.length];\n            System.arraycopy(values, 0, newValues, 0, values.length);\n\n            // Adjust the field value\n            newValues[fieldIndex] += valueToAdd;\n\n            // Handle end-of-month adjustments\n            if (fieldIndex == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n                int month = newValues[fieldIndex];\n                int year = newValues[DateTimeFieldType.year().getFieldIndex()];\n                int dayOfMonth = newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n                int maxDayOfMonth = iChronology.monthLength(year, month);\n\n                if (dayOfMonth > maxDayOfMonth) {\n                    newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = maxDayOfMonth;\n                }\n            }\n\n            return newValues;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}