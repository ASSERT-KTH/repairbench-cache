{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            // MonthDay doesn't contain a year, but calculations involving dayOfMonth\n            // and monthOfYear (especially Feb 29th and month-end adjustments)\n            // require a year context. Using a fixed leap year (e.g., 2000) for the\n            // internal instant representation ensures that Feb 29th is a valid day\n            // and allows month-end adjustments to behave consistently (e.g., March 31\n            // becomes Feb 29 in a leap year context, rather than Feb 28).\n            long instant = iChronology.getDateTimeMillis(2000, 1, 1, 0); // Use a leap year as a base for calculations\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            // Now 'instant' holds the date in year 2000 (e.g., 2000-02-29 if original values were [2,29]).\n            // Perform the addition using the field's specific add method.\n            // This 'add' refers to the add(long instant, int value) method of this DateTimeField.\n            instant = add(instant, valueToAdd);\n            // Convert the resulting instant back to the MonthDay partial, extracting month and day.\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}