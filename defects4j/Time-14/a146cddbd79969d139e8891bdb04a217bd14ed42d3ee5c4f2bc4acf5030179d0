{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    if (partial instanceof MonthDay) {\n        // special case for MonthDay to ensure that day 29 in February is handled correctly\n        int[] newValues = new int[values.length];\n        System.arraycopy(values, 0, newValues, 0, values.length);\n        \n        DateTimeField monthField = partial.getFieldType(0).getField(iChronology);\n        DateTimeField dayField = partial.getFieldType(1).getField(iChronology);\n        \n        int month = values[0];\n        int day = values[1];\n        \n        month = monthField.add(month, valueToAdd);\n        if (month <= 0) {\n            month = 12 + (month % 12);\n        } else if (month > 12) {\n            month = ((month - 1) % 12) + 1;\n        }\n        \n        int maxDay = dayField.getMaximumValue(month);\n        day = Math.min(day, maxDay);\n        \n        newValues[0] = month;\n        newValues[1] = day;\n        return newValues;\n    }\n    \n    // Regular case for other types\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}