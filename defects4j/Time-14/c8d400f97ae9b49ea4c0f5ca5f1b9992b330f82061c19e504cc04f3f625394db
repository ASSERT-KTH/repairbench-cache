{
    "generation": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        // Ensure the resulting date is valid\n        return iChronology.get(partial, instant);\n    } else {\n        // Handle the case where the partial is not contiguous\n        int[] newValues = Arrays.copyOf(values, values.length);\n        int fieldValue = newValues[fieldIndex];\n        fieldValue += valueToAdd;\n        newValues[fieldIndex] = fieldValue;\n\n        // Adjust for end-of-month and leap year issues\n        if (partial.getFieldType(fieldIndex).isSupported()) {\n            DateTimeField field = partial.getFieldType(fieldIndex).getField(iChronology);\n            if (field.isLeap(fieldValue)) {\n                // Handle leap year adjustments\n                newValues[fieldIndex] = field.getLeapMaximumValue();\n            } else {\n                // Handle end-of-month adjustments\n                newValues[fieldIndex] = field.getMaximumValue();\n            }\n        }\n\n        return newValues;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}