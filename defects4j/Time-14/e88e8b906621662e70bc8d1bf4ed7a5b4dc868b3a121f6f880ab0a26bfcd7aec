{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // Logic requires contiguous fields, implicitly handles MonthDay logic.\n        // It specifically needs to handle MonthDay where the date adjustment\n        // happens around Feb 29th in a leap year. The base instant calculation\n        // must use a leap year to ensure Feb 29th is valid.\n        if (DateTimeUtils.isContiguous(partial)) {\n            // Use a fixed known leap year (e.g., 2004) to properly handle Feb 29.\n            // Calculate the instant based on the partial fields set into the reference leap year.\n            // Use 2004-01-01 as the base. Note: This assumes the chronology is year-based.\n            // This choice is somewhat arbitrary but resolves Feb 29 issues encountered with epoch base (1970).\n            long instant = iChronology.getDateTimeMillis(2004, 1, 1, 0); // Start of a known leap year\n\n            // Set the partial fields onto this base instant.\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n\n            // Add the value to the specified field.\n            instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, valueToAdd);\n\n            // Extract the new field values from the resulting instant.\n            return iChronology.get(partial, instant);\n        } else {\n            // Fallback to superclass logic if fields are not contiguous.\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}