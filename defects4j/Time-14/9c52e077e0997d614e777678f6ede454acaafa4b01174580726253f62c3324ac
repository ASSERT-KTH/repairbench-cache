{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    if (partial instanceof MonthDay) {\n        // special case for MonthDay to ensure leap day handling works correctly\n        DateTimeField monthField = iChronology.monthOfYear();\n        DateTimeField dayField = iChronology.dayOfMonth();\n        \n        if (monthField.equals(partial.getFieldType(0).getField(iChronology))) {\n            // MonthDay is organized as month then day\n            int oldMonth = values[0];\n            int oldDay = values[1];\n            \n            // Add to the field at specified index\n            if (fieldIndex == 0) {\n                // We're adding to the month field\n                int newMonth = ((oldMonth - 1) + valueToAdd) % 12 + 1;\n                if (newMonth <= 0) {\n                    newMonth += 12;\n                }\n                \n                // Check if day is valid in the new month\n                int maxDay = dayField.getMaximumValue(newMonth);\n                int newDay = Math.min(oldDay, maxDay);\n                \n                values[0] = newMonth;\n                values[1] = newDay;\n                return values;\n            }\n        }\n    }\n    \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}