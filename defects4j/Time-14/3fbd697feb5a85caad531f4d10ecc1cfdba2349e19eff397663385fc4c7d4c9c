{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            int[] result = iChronology.get(partial, instant);\n\n            // Handle February 29th case when adding months\n            if (partial instanceof MonthDay) {\n                int month = result[0];\n                int day = result[1];\n                if (month == 2 && day == 29) {\n                    // Check if the resulting year is not a leap year\n                    int year = iChronology.year().get(instant);\n                    if (!iChronology.year().isLeap(year)) {\n                        // Adjust to February 28th\n                        result[1] = 28;\n                    }\n                } else if (month == 2 && day == 28) {\n                    // Check if we're coming from a leap day addition\n                    int year = iChronology.year().get(instant);\n                    if (iChronology.year().isLeap(year)) {\n                        // Adjust to February 29th\n                        result[1] = 29;\n                    }\n                }\n            }\n            return result;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}