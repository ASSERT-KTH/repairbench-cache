{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        if (valueToAdd == 0) {\n            return values;\n        }\n        \n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            \n            // Handle month addition specially to preserve day-of-month where possible\n            if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear()) {\n                int newMonth = values[fieldIndex] + valueToAdd;\n                // Adjust for year wraparound\n                while (newMonth < 1) {\n                    newMonth += 12;\n                }\n                while (newMonth > 12) {\n                    newMonth -= 12;\n                }\n                \n                // Check if the day exists in the new month\n                int day = values[1];\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                if (day > maxDay) {\n                    day = maxDay;\n                }\n                \n                values[0] = newMonth;\n                values[1] = day;\n                return values;\n            } else {\n                instant = add(instant, valueToAdd);\n                return iChronology.get(partial, instant);\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}