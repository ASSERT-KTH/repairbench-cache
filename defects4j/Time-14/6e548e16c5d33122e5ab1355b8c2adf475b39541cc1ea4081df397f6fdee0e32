{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n\n            // Get the new values from the adjusted instant\n            int[] newValues = iChronology.get(partial, instant);\n\n            // Handle day adjustment for months with fewer days\n            if (partial instanceof MonthDay &&\n                (partial.getFieldType(0) instanceof MonthOfYearFieldType ||\n                 partial.getFieldType(1) instanceof MonthOfYearFieldType)) {\n                int monthIndex = (partial.getFieldType(0) instanceof MonthOfYearFieldType) ? 0 : 1;\n                int dayIndex = (monthIndex == 0) ? 1 : 0;\n\n                int originalMonth = values[monthIndex];\n                int newMonth = newValues[monthIndex];\n                int day = newValues[dayIndex];\n\n                // If moving from February in a leap year to a non-leap year February\n                if (originalMonth == 2 && values[dayIndex] == 29 &&\n                    newMonth == 2 && day == 28) {\n                    newValues[dayIndex] = 29; // Force the day to remain 29\n                    // Check if the year is a leap year\n                    long tempInstant = instant;\n                    int year = iChronology.year().get(tempInstant);\n                    if (!iChronology.year().isLeap(year)) {\n                        // If not a leap year, adjust to last day of February\n                        newValues[dayIndex] = 28;\n                    }\n                } else {\n                    // General case: if day is now invalid for the new month, adjust\n                    int maxDay = iChronology.getDaysInMonthMax(newMonth);\n                    if (day > maxDay) {\n                        newValues[dayIndex] = maxDay;\n                    }\n                }\n            }\n            return newValues;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}