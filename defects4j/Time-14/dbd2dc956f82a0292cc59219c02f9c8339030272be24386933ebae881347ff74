{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n\n        // If partial is a MonthDay and day is 29, 30 or 31, we need special handling\n        if (partial instanceof MonthDay) {\n            int month = 0;\n            int day = 0;\n            // Find month and day in the fields array\n            for (int i = 0; i < partial.size(); i++) {\n                if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n                    month = values[i];\n                } else if (partial.getFieldType(i) == DateTimeFieldType.dayOfMonth()) {\n                    day = values[i];\n                }\n            }\n\n            // Special handling for day values that might be adjusted\n            if (day >= 29) {\n                try {\n                    // Try the normal approach\n                    if (DateTimeUtils.isContiguous(partial)) {\n                        long instant = 0L;\n                        for (int i = 0, isize = partial.size(); i < isize; i++) {\n                            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                        }\n                        instant = add(instant, valueToAdd);\n                        return iChronology.get(partial, instant);\n                    } else {\n                        return super.add(partial, fieldIndex, values, valueToAdd);\n                    }\n                } catch (IllegalFieldValueException e) {\n                    // If it fails, adjust the day first\n                    // Get maximum days for the target month\n                    int targetMonth = month;\n                    int targetDay = day;\n\n                    // Calculate the new month after addition\n                    // For simplicity, we'll use the current year (2000 which is a leap year)\n                    // to get correct month boundaries\n                    long testInstant = iChronology.withZone(DateTimeZone.UTC).setYear(2000, 0, 0).getMillis();\n                    testInstant = iChronology.monthOfYear().set(testInstant, targetMonth + valueToAdd);\n                    int maxDay = iChronology.dayOfMonth().getMaximumValue(testInstant);\n\n                    // If the original day is larger than the target month's max day,\n                    // set it to the last day of the month\n                    if (targetDay > maxDay) {\n                        targetDay = maxDay;\n                    }\n\n                    // Rebuild the values array with adjusted day\n                    int[] newValues = values.clone();\n                    for (int i = 0; i < newValues.length; i++) {\n                        if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n                            newValues[i] = targetMonth + valueToAdd;\n                        } else if (partial.getFieldType(i) == DateTimeFieldType.dayOfMonth()) {\n                            newValues[i] = targetDay;\n                        }\n                    }\n\n                    // For non-contiguous fields or cases where we needed to adjust,\n                    // return the adjusted values\n                    return newValues;\n                }\n            }\n        }\n\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}