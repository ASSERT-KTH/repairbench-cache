{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        \n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            \n            // Special handling for month-day fields to preserve day-of-month when possible\n            if (partial instanceof MonthDay) {\n                int month = values[0];\n                int day = values[1];\n                if (month == 2 && day == 29) {\n                    // When adding months to Feb 29, try to keep the day as 29 if possible\n                    instant = iChronology.dayOfMonth().set(instant, 1); // temporarily set to valid day\n                    instant = add(instant, valueToAdd);\n                    int newMonth = iChronology.monthOfYear().get(instant);\n                    int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                    day = Math.min(29, maxDay);\n                    instant = iChronology.monthOfYear().set(instant, newMonth);\n                    instant = iChronology.dayOfMonth().set(instant, day);\n                    return iChronology.get(partial, instant);\n                }\n            }\n            \n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}