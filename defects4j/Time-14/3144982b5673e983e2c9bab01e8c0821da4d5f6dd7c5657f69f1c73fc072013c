{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        \n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            \n            // Get the new instant after adding the value\n            instant = add(instant, valueToAdd);\n            \n            // Get the new values from the instant\n            int[] newValues = iChronology.get(partial, instant);\n            \n            // If we're dealing with month-day and the day is invalid for the month,\n            // adjust it to the last valid day of the month\n            if (partial instanceof MonthDay) {\n                DateTimeField dayField = iChronology.dayOfMonth();\n                DateTimeField monthField = iChronology.monthOfYear();\n                int month = monthField.get(instant);\n                int maxDay = dayField.getMaximumValue(instant);\n                if (newValues[1] > maxDay) {\n                    newValues[1] = maxDay;\n                }\n            }\n            \n            return newValues;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}