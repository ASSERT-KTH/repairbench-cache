{
    "generation": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n\n        // Adjust the day of month for leap years and end of month cases\n        if (fieldIndex == Chronology.DAY_OF_MONTH) {\n            int dayOfMonth = values[fieldIndex];\n            int month = values[Chronology.MONTH_OF_YEAR];\n            int year = values[Chronology.YEAR];\n\n            // Check if the day of month is out of range for the given month\n            if (dayOfMonth > iChronology.getMonthLength(year, month)) {\n                dayOfMonth = iChronology.getMonthLength(year, month);\n            }\n\n            values[fieldIndex] = dayOfMonth;\n        }\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}