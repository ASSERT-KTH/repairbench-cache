{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] newValues = iChronology.get(partial, instant);\n\n        // adjust for MonthDay-like structures where day may be invalid due to end of month handling\n        DateTimeField field = partial.getField(fieldIndex);\n        int max = field.getMaximumValue(instant);\n        if (newValues[fieldIndex] > max) {\n            newValues[fieldIndex] = max;\n            // Re-set lower-order fields to adjust instant accordingly\n            // e.g., day overflow in Feb after month addition\n            instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DateTimeField f = partial.getField(i);\n                int v = newValues[i];\n                // clamp current field if necessary\n                if (i == fieldIndex) {\n                    v = newValues[i]; // already clamped day\n                } else if (i > fieldIndex) {\n                    int maxVal = f.getMaximumValue(instant);\n                    if (newValues[i] > maxVal) {\n                        v = maxVal;\n                    }\n                }\n                instant = f.set(instant, v);\n            }\n            newValues = iChronology.get(partial, instant);\n        }\n\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}