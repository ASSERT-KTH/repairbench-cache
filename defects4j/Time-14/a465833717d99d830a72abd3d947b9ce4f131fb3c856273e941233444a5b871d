{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    // Use a temporary DateTime to handle the calculation\n    if (partial instanceof MonthDay) {\n        // Create a base year that's a leap year (2000 is a leap year)\n        int year = 2000;\n        \n        // Create a DateTime with the MonthDay values in the leap year\n        LocalDateTime dt = new LocalDateTime(\n            year, values[0], values[1], 0, 0, 0, 0, iChronology);\n        \n        // Perform the calculation\n        dt = dt.withFieldAdded(DurationFieldType.months(), valueToAdd);\n        \n        // Extract the results\n        return new int[] {dt.getMonthOfYear(), dt.getDayOfMonth()};\n    }\n    \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}