{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        // If there's no year field but a dayOfMonth > 28, use a leap-year base\n        boolean needLeap = false;\n        DateTimeFieldType monthType = DateTimeFieldType.monthOfYear();\n        DateTimeFieldType dayType   = DateTimeFieldType.dayOfMonth();\n        if (partial.getFieldType(0).equals(monthType)) {\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (partial.getFieldType(i).equals(dayType) && values[i] > 28) {\n                    needLeap = true;\n                    break;\n                }\n            }\n        }\n        if (needLeap) {\n            // Pick a leap year (2000) so Feb 29 is valid\n            instant = iChronology.year().set(instant, 2000);\n        }\n        // Set all the partial fields into the instant\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // Perform the add on the instant and extract fields back\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}