{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] newValues = iChronology.get(partial, instant);\n\n        // Check if dayOfMonth exists in partial\n        for (int i = 0; i < partial.size(); i++) {\n            DateTimeFieldType fieldType = partial.getFieldType(i);\n            if (fieldType == DateTimeFieldType.monthOfYear()) {\n                int newMonth = newValues[i];\n                for (int j = 0; j < partial.size(); j++) {\n                    if (partial.getFieldType(j) == DateTimeFieldType.dayOfMonth()) {\n                        int maxDay = iChronology.dayOfMonth().getMaximumValue(0L, newValues);\n                        newValues[j] = Math.min(newValues[j], maxDay);\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}