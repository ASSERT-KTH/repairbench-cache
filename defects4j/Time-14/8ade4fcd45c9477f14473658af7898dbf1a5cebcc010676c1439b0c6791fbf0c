{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    // Check if partial is non-contiguous - in that case use superclass\n    if (!DateTimeUtils.isContiguous(partial)) {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n    \n    if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())) {\n        // This is a special case for MonthDay fields\n        DurationField field = getField().getDurationField();\n        int[] newValues = new int[values.length];\n        System.arraycopy(values, 0, newValues, 0, values.length);\n        \n        // Get proper month and day values\n        int curMonth = newValues[0];\n        newValues[0] = getFieldIndex(curMonth, valueToAdd);\n        \n        // Adjust the day if needed for the new month length\n        if (partial.size() > 1 && partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth())) {\n            int curDay = newValues[1];\n            int maxDay = iChronology.getDaysInMonthMax(newValues[0]);\n            if (curDay > maxDay) {\n                newValues[1] = maxDay;\n            }\n        }\n        \n        return newValues;\n    } else {\n        // For other types, use the standard approach\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}