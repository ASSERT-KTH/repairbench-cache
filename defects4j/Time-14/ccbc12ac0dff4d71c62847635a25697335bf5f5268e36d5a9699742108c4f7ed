{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    if (partial instanceof MonthDay) {\n        // Special handling for MonthDay to properly handle leap years\n        // Create a copy of the values since we'll be modifying them\n        int[] newValues = new int[values.length];\n        System.arraycopy(values, 0, newValues, 0, values.length);\n        \n        // Update the month value\n        int curMonth = newValues[0];\n        curMonth = curMonth + valueToAdd;\n        \n        // Normalize the month value (1-12)\n        while (curMonth <= 0) {\n            curMonth += 12;\n        }\n        while (curMonth > 12) {\n            curMonth -= 12;\n        }\n        \n        newValues[0] = curMonth;\n        \n        // Check if day is valid in the new month\n        int day = newValues[1];\n        int maxDay = iChronology.dayOfMonth().getMaximumValue(0, newValues);\n        if (day > maxDay) {\n            newValues[1] = maxDay;\n        }\n        \n        return newValues;\n    } else if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}