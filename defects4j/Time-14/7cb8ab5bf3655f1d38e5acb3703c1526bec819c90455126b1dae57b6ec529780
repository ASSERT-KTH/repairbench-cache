{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n\n            // Get the partial values after addition\n            int[] newValues = iChronology.get(partial, instant);\n\n            // For month-day case, handle invalid days (like Feb 29 in non-leap years)\n            if (partial.size() == 2 &&\n                partial.getFieldType(0).equals(monthOfYear()) &&\n                partial.getFieldType(1).equals(dayOfMonth())) {\n                int year = 2000; // Use a leap year as base\n                long testInstant = iChronology.year().set(0L, year);\n                testInstant = iChronology.monthOfYear().set(testInstant, newValues[0]);\n                try {\n                    testInstant = iChronology.dayOfMonth().set(testInstant, newValues[1]);\n                } catch (IllegalFieldValueException ex) {\n                    // If the day is invalid (like Feb 29 in non-leap year), use the last day of month\n                    int daysInMonth = iChronology.getDaysInMonth(partial.getFieldType(0), newValues[0], year);\n                    newValues[1] = daysInMonth;\n                }\n            }\n            return newValues;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}