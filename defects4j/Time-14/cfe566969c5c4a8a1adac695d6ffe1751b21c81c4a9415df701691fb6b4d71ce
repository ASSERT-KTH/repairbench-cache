{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        \n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            \n            // Special handling for month-day fields\n            if (partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) {\n                // Get the current month and day\n                int month = values[0];\n                int day = values[1];\n                \n                // Calculate new month\n                int newMonth = month + valueToAdd;\n                newMonth = ((newMonth - 1) % 12) + 1;\n                if (newMonth < 1) {\n                    newMonth += 12;\n                }\n                \n                // Adjust day if necessary (e.g., Feb 29 -> Mar 29)\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                if (day > maxDay) {\n                    day = maxDay;\n                }\n                \n                return new int[] {newMonth, day};\n            }\n            \n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}