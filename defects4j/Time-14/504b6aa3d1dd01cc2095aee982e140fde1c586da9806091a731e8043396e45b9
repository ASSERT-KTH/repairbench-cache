{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    if (partial instanceof MonthDay) {\n        // Special handling for MonthDay to deal with leap year issues\n        int[] newValues = new int[values.length];\n        System.arraycopy(values, 0, newValues, 0, values.length);\n        \n        // Add the value\n        newValues[fieldIndex] = newValues[fieldIndex] + valueToAdd;\n        \n        // Check if this is a month field and we're dealing with Feb 29\n        if (fieldIndex == 0 && partial.size() >= 2 && newValues[1] == 29 && newValues[0] == 2) {\n            // We're dealing with Feb 29, which is valid, so return as is\n            return newValues;\n        }\n    }\n    \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}