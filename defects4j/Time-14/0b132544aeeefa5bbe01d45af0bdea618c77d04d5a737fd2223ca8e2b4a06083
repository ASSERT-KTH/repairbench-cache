{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        // Special handling for MonthDay-like partials\n        boolean isMonthDay = (partial.size() == 2\n            && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())\n            && partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth()));\n        if (isMonthDay) {\n            int origMonth = values[0];\n            int origDay = values[1];\n            Chronology chrono = iChronology.withUTC();\n            int baseYear = 2000; // leap year\n\n            // Avoid setting 2/29 in non-leap years by using leap year as base\n            LocalDate baseDate = new LocalDate(baseYear, origMonth, origDay, chrono);\n\n            LocalDate added = null;\n            if (fieldIndex == 0) { // adding months\n                added = baseDate.plusMonths(valueToAdd);\n            } else if (fieldIndex == 1) { // adding days\n                added = baseDate.plusDays(valueToAdd);\n            } else {\n                // fallback: just set field simply\n                long instant = 0L;\n                for (int i = 0, isize = partial.size(); i < isize; i++) {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n                instant = add(instant, valueToAdd);\n                return iChronology.get(partial, instant);\n            }\n            // Return the [month, day] array for the resulting date\n            return new int[] { added.getMonthOfYear(), added.getDayOfMonth() };\n        } else {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}