{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n\n            // Adjust the instant for the valueToAdd\n            long newInstant = add(instant, valueToAdd);\n\n            // Ensure the day of the month is valid after the adjustment\n            int month = iChronology.get(iChronology.monthOfYear(), newInstant);\n            int maxDayOfMonth = iChronology.getMaximumValueInMonth(iChronology.dayOfMonth(), month, newInstant);\n            int dayOfMonth = iChronology.get(iChronology.dayOfMonth(), newInstant);\n\n            if (dayOfMonth > maxDayOfMonth) {\n                dayOfMonth = maxDayOfMonth;\n                newInstant = iChronology.set(iChronology.dayOfMonth(), dayOfMonth, newInstant);\n            }\n\n            return iChronology.get(partial, newInstant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}