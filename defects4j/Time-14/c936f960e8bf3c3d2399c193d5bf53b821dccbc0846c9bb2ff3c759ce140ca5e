{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        \n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            \n            // Handle leap day cases specially\n            if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear() && \n                partial.get(DateTimeFieldType.dayOfMonth()) == 29 && \n                partial.get(DateTimeFieldType.monthOfYear()) == 2) {\n                instant = iChronology.monthOfYear().add(instant, valueToAdd);\n                // Adjust to last day of month if needed\n                int newMonth = iChronology.monthOfYear().get(instant);\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                if (maxDay < 29) {\n                    instant = iChronology.dayOfMonth().set(instant, maxDay);\n                }\n                return iChronology.get(partial, instant);\n            }\n            \n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}