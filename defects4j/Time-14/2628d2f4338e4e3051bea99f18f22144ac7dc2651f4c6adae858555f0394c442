{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        int[] newValues = iChronology.get(partial, instant);\n        // adjust day-of-month if needed\n        DateTimeField field = partial.getField(fieldIndex);\n        if (field.getDurationField().getType().getName().equals(\"months\") || \n            field.getDurationField().getType().getName().equals(\"days\")) {\n            int newDay = newValues[partial.size() - 1]; // usually the last is dayOfMonth\n            int newMonth = newValues[partial.indexOf(DateTimeFieldType.monthOfYear())];\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n            if (newDay > maxDay) {\n                newValues[partial.size() - 1] = maxDay;\n            }\n        }\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}