{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            // When converting a MonthDay (or similar partial without a year) to an instant,\n            // a reference year must be used. The default base instant (0L, Jan 1, 1970) is\n            // not a leap year, which causes issues when handling February 29 or month-end adjustments.\n            // MonthDay typically uses a leap year (e.g., 2000 for ISOChronology) as its base year\n            // for internal calculations involving dayOfMonth and monthOfYear fields\n            // to correctly handle leap days and end-of-month adjustments.\n            long instant = iChronology.getDateTimeMillis(2000, 1, 1, 0, 0, 0, 0L); // Use a leap year (2000 for ISO) as base\n            \n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd); // This calls the specific field's add method\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}