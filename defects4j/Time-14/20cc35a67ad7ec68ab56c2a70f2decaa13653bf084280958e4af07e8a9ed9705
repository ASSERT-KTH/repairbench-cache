{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            int[] result = iChronology.get(partial, instant);\n            // Validate the result to handle edge cases like leap years and end of month adjustments\n            for (int i = 0; i < partial.size(); i++) {\n                DateTimeField field = partial.getFieldType(i).getField(iChronology);\n                int value = result[i];\n                if (!field.isLenient() && !field.isValidValue(result[i])) {\n                    result[i] = field.getMaximumValue();\n                    if (!field.isValidValue(result[i])) {\n                        result[i] = field.getMinimumValue();\n                    }\n                }\n            }\n            return result;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}