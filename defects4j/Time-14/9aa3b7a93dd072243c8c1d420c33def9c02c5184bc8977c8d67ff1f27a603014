{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        if (valueToAdd == 0) {\n            return values;\n        }\n        \n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            \n            // Special handling for MonthDay\n            if (partial instanceof MonthDay) {\n                int month = values[0];\n                int day = values[1];\n                if (month == 2 && day == 29) {\n                    // For leap day, first try to add normally\n                    try {\n                        instant = add(instant, valueToAdd);\n                        return iChronology.get(partial, instant);\n                    } catch (IllegalFieldValueException e) {\n                        // If fails, adjust to last day of month\n                        instant = add(instant, valueToAdd);\n                        DateTimeField field = iChronology.dayOfMonth();\n                        instant = field.set(instant, field.getMaximumValue(instant));\n                        return iChronology.get(partial, instant);\n                    }\n                }\n            }\n            \n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}