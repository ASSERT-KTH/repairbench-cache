{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        // Find a leap year as a safe base instant for MonthDay composition (year is not used/output)\n        // Use 2004 as a leap year\n        int baseYear = 2004;\n        // Compose a LocalDate with these values\n        int[] newValues = values.clone();\n        DurationFieldType type = partial.getFieldType(fieldIndex).getDurationType();\n        org.joda.time.LocalDate base = null;\n        if (partial.size() == 2 &&\n            partial.getFieldType(0) == DateTimeFieldType.monthOfYear() &&\n            partial.getFieldType(1) == DateTimeFieldType.dayOfMonth()) {\n            // Compose as LocalDate(month, day, in baseYear)\n            int month = values[0];\n            int day = values[1];\n\n            // Adjust month if we're adding months\n            if (type == DurationFieldType.months()) {\n                month += valueToAdd;\n            } else if (type == DurationFieldType.days()) {\n                // ok, we'll add via LocalDate.plusDays below\n            }\n\n            // Clamp for valid months\n            while (month < 1) {\n                month += 12;\n                baseYear -= 1;\n            }\n            while (month > 12) {\n                month -= 12;\n                baseYear += 1;\n            }\n\n            // Clamp for valid days in month (allow construction, fallback to end-of-month)\n            int maxDay = ISOChronology.getInstanceUTC().dayOfMonth().getMaximumValue(baseYear, month);\n            if (day > maxDay) day = maxDay;\n\n            base = new org.joda.time.LocalDate(baseYear, month, day, ISOChronology.getInstanceUTC());\n\n            if (type == DurationFieldType.months()) {\n                base = base.plusMonths(0); // already added above on 'month'\n            } else if (type == DurationFieldType.days()) {\n                base = base.plusDays(valueToAdd);\n            } else {\n                base = base.withFieldAdded(partial.getFieldType(fieldIndex), valueToAdd);\n            }\n\n            // Now, extract result\n            newValues[0] = base.getMonthOfYear();\n            newValues[1] = base.getDayOfMonth();\n            return newValues;\n        } else {\n            // fallback to using instant calculation as before\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}