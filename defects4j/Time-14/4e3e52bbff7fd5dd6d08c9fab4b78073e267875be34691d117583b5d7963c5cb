{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n\n            // Check if the partial includes a year field\n            boolean hasYear = false;\n            for (int i = 0; i < partial.size(); i++) {\n                DateTimeFieldType fieldType = partial.getFieldType(i);\n                if (fieldType == DateTimeFieldType.year()) {\n                    hasYear = true;\n                    break;\n                }\n            }\n\n            // If there's no year, set it to a leap year to handle February 29th correctly\n            if (!hasYear) {\n                instant = iChronology.year().set(instant, 2000); // 2000 is a leap year\n            }\n\n            // Set the fields from the partial values\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DateTimeFieldType fieldType = partial.getFieldType(i);\n                DateTimeField field = fieldType.getField(iChronology);\n                instant = field.set(instant, values[i]);\n            }\n\n            // Perform the addition\n            instant = add(instant, valueToAdd);\n\n            // Convert the instant back to the partial's values\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}