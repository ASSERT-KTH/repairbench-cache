{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // Special handling for continuous partials like MonthDay or YearMonth.\n        // Uses an instant calculation based on a leap year to handle Feb 29 properly.\n        if (DateTimeUtils.isContiguous(partial)) {\n            // Use year 4 as a representative leap year for calculations.\n            // Year 4 is a leap year in ISO chronology and related Gregorian chronologies.\n            // Using a known leap year avoids issues with setting Feb 29 onto a non-leap year\n            // context like 1970 (epoch), which was the cause of previous bugs.\n            // Note: Assumes the chronology behaves reasonably around year 4.\n            // Get the chronology instance associated with this method.\n            Chronology chrono = getChronology();\n            long instant = chrono.getDateTimeMillis(4, 1, 1, 0); // Jan 1st, Year 4\n\n            // Set the partial's fields onto this leap-year based instant\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(chrono).set(instant, values[i]);\n            }\n\n            // Perform the addition using the field's add method on the instant\n            DateTimeField field = partial.getFieldType(fieldIndex).getField(chrono);\n            instant = field.add(instant, valueToAdd);\n\n            // Extract the new values from the modified instant\n            return chrono.get(partial, instant);\n        } else {\n            // Fallback to the field's own add method for non-contiguous partials.\n            // The super.add call in the original code was incorrect as BaseChronology extends Object.\n            DateTimeField field = partial.getFieldType(fieldIndex).getField(getChronology());\n            return field.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}