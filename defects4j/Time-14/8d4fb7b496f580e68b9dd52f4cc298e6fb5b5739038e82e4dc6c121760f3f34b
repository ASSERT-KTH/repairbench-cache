{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        // Determine if the operation is on a MonthDay-like partial (no year)\n        // If so, handle end-of-month adjustment for leap day/month transitions.\n        boolean isMonthDay = (partial.size() == 2\n            && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())\n            && partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth()));\n\n        if (isMonthDay && (fieldIndex == 0 || fieldIndex == 1)) {\n            int month = values[0];\n            int day = values[1];\n            // Use a reference leap year for correct leap-day handling\n            int referenceYear = 2000;\n            // Create a LocalDate in the reference year\n            org.joda.time.LocalDate date = new org.joda.time.LocalDate(referenceYear, month, day, iChronology);\n            if (fieldIndex == 0) {\n                // Adding to monthOfYear\n                date = date.plusMonths(valueToAdd);\n            } else if (fieldIndex == 1) {\n                // Adding to dayOfMonth\n                date = date.plusDays(valueToAdd);\n            }\n            return new int[] {date.getMonthOfYear(), date.getDayOfMonth()};\n        }\n\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}