{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            // MonthDay (and other contiguous partials without a year field like DayOfMonth)\n            // typically use a fixed reference year for calculations that involve converting\n            // to/from a full instant (milliseconds since epoch).\n            // The default 0L instant corresponds to 1970-01-01, which is not a leap year.\n            // If the partial includes a Feb 29th, applying it to a non-leap year\n            // will cause an IllegalFieldValueException.\n            // Joda-Time's MonthDay uses 2000 as its reference year (which is a leap year).\n            // We initialize the instant using this reference year to ensure Feb 29th is valid.\n            long instant = iChronology.getDateTimeMillis(2000, 1, 1, 0, 0, 0, 0);\n\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                // Apply the current values of the partial to the reference instant\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            // Now perform the addition on the constructed instant\n            // This `add` call refers to the `public long add(long instant, int valueToAdd)`\n            // method of this (DateTimeField) class, which handles the actual field arithmetic.\n            instant = add(instant, valueToAdd);\n            // Convert the resulting instant back to the partial's field values\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}