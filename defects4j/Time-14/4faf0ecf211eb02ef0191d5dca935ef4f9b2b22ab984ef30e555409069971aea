{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        // Rebuild the instant from a \"leap-safe\" year so that day-of-month like 29 fits any month\n        // Using 2004 as a leap year base\n        long leapYear = 2004L;\n        Chronology chrono = iChronology.withUTC();\n        DateTimeField[] fields = new DateTimeField[partial.size()];\n        for (int i = 0; i < partial.size(); i++) {\n            fields[i] = partial.getFieldType(i).getField(chrono);\n        }\n        // Set up the array for the leap-safe year\n        int[] newValues = Arrays.copyOf(values, values.length);\n        boolean hasMonth = false, hasDay = false;\n        for (int i = 0; i < partial.size(); i++) {\n            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                newValues[i] = values[i];\n                hasMonth = true;\n            }\n            if (partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth())) {\n                hasDay = true;\n            }\n        }\n        long instant = chrono.getDateTimeMillis(\n            (int) leapYear,\n            hasMonth ? (partial.isSupported(DateTimeFieldType.monthOfYear()) ? partial.get(DateTimeFieldType.monthOfYear()) : 1) : 1,\n            hasDay ? (partial.isSupported(DateTimeFieldType.dayOfMonth()) ? partial.get(DateTimeFieldType.dayOfMonth()) : 1) : 1,\n            0, 0, 0, 0\n        );\n\n        // Set the fields for all others (e.g., month, day)\n        for (int i = 0; i < partial.size(); i++) {\n            if (!(partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear()) ||\n                  partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth()))) {\n                instant = fields[i].set(instant, values[i]);\n            }\n        }\n        // Add to the correct field\n        instant = fields[fieldIndex].add(instant, valueToAdd);\n\n        // Extract results in that leap year (so day-of-month is always possible)\n        int[] result = chrono.get(partial, instant);\n\n        // Now for month-day, update to use the real returned fields but with the actual chronology (not leap year)\n        // Don't \"correct\" day-of-month except for overly large values\n        for (int i = 0; i < partial.size(); i++) {\n            if (partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth())) {\n                // Clamp the day to the max value for the target month/year if needed\n                int month = 1;\n                int day = result[i];\n                for (int j = 0; j < partial.size(); j++) {\n                    if (partial.getFieldType(j).equals(DateTimeFieldType.monthOfYear())) {\n                        month = result[j];\n                    }\n                }\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(leapYear, month);\n                if (day > maxDay) {\n                    result[i] = maxDay;\n                }\n            }\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}