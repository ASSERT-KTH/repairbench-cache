{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // Store original day-of-month if available\n        DateTimeField field = partial.getField(fieldIndex);\n        int originalDom = 0;\n        boolean isMonthLike = false;\n        for (int i = 0; i < partial.size(); i++) {\n            DateTimeField f = partial.getField(i);\n            if (\"dayOfMonth\".equals(f.getName())) {\n                originalDom = values[i];\n                isMonthLike = true;\n                break;\n            }\n        }\n        instant = add(instant, valueToAdd);\n        int[] result = iChronology.get(partial, instant);\n\n        // If the partial has a dayOfMonth, and the day dropped (e.g. 31->28),\n        // then adjust back up if possible to match originalDom\n        if (isMonthLike) {\n            for (int i = 0; i < partial.size(); i++) {\n                DateTimeField f = partial.getField(i);\n                if (\"dayOfMonth\".equals(f.getName())) {\n                    int max = f.getMaximumValue(instant);\n                    if (originalDom > max) {\n                        result[i] = max;\n                    } else {\n                        result[i] = originalDom;\n                    }\n                    break;\n                }\n            }\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}