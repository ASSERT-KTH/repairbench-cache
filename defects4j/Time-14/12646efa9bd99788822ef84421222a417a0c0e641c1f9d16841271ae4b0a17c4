{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        \n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            \n            // Handle leap day cases\n            if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear()) {\n                // When adding months, we want to preserve the day if possible\n                instant = add(instant, valueToAdd);\n                // Get the new month-day combination\n                int newMonth = iChronology.monthOfYear().get(instant);\n                int newDay = iChronology.dayOfMonth().get(instant);\n                // If original was Feb 29, adjust to last day of month if needed\n                if (values[0] == 2 && values[1] == 29 && newDay < 29) {\n                    instant = iChronology.dayOfMonth().set(instant, \n                        iChronology.dayOfMonth().getMaximumValue(instant));\n                }\n            } else {\n                // For day additions, just do normal addition\n                instant = add(instant, valueToAdd);\n            }\n            \n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}