{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        // set instant from start fields\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // add to target field\n        instant = add(instant, valueToAdd);\n        int[] newValues = iChronology.get(partial, instant);\n\n        // special fix for MonthDay-like cases (partial without year)\n        DateTimeField addedField = partial.getField(fieldIndex);\n        // check end-of-month adjustment if adding to month or year (but no year in MonthDay)\n        if (partial.size() >= 2) {\n            DateTimeField monthField = null;\n            DateTimeField domField = null;\n            for (int i = 0; i < partial.size(); i++) {\n                DateTimeField fld = partial.getField(i);\n                if (\"monthOfYear\".equals(fld.getName())) {\n                    monthField = fld;\n                }\n                if (\"dayOfMonth\".equals(fld.getName())) {\n                    domField = fld;\n                }\n            }\n            if (monthField != null && domField != null) {\n                int monthIndex = -1;\n                int domIndex = -1;\n                for (int i = 0; i < partial.size(); i++) {\n                    if (partial.getField(i).equals(monthField)) {\n                        monthIndex = i;\n                    }\n                    if (partial.getField(i).equals(domField)) {\n                        domIndex = i;\n                    }\n                }\n                if (monthIndex != -1 && domIndex != -1) {\n                    int month = newValues[monthIndex];\n                    int day = newValues[domIndex];\n                    int maxDom = monthField.getDurationField().getField(iChronology)\n                        .getMaximumValue(instant);\n                    try {\n                        maxDom = iChronology.dayOfMonth().getMaximumValue(0L, month);\n                    } catch (Exception e) {\n                        maxDom = 28; // fallback\n                    }\n                    if (day > maxDom) {\n                        newValues[domIndex] = maxDom;\n                    }\n                }\n            }\n        }\n\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}