{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            // MonthDay (and similar partials that lack a year field but deal with month/day)\n            // requires a consistent year context for calculations, especially for Feb 29\n            // and end-of-month adjustments. The default instant (0L = 1970-01-01) is\n            // not a leap year, causing issues.\n            // We use a known leap year (2000) as the base for the instant to ensure\n            // correct behavior for Feb 29 and month-end truncations.\n            \n            // Start with Jan 1, 2000 (a leap year) as the base instant.\n            long instant = iChronology.getDateTimeMillis(2000, 1, 1, 0); \n            \n            // Populate the instant with the values from the partial.\n            // This ensures that even if partial represents Feb 29, it's set against\n            // a leap year backdrop, making it valid.\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n\n            // Now, 'instant' safely represents the partial's date within a leap year context.\n            // Apply the addition using the appropriate field (determined by fieldIndex).\n            org.joda.time.DurationField field = partial.getFieldType(fieldIndex).getDurationType().getField(iChronology);\n            instant = field.add(instant, valueToAdd);\n\n            // Convert the resulting instant back to the partial's fields.\n            // iChronology.get(partial, instant) will correctly extract month and day,\n            // handling month-end truncations based on the actual date represented by 'instant'.\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}