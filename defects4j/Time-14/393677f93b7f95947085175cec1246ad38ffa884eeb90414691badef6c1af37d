{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n\n        // Try getting the new values first with normal behavior\n        int[] newValues = iChronology.get(partial, instant);\n\n        // Handle special cases for month-day when adding months\n        if (partial instanceof MonthDay Bureau) {\n            int oldMonth = values[0];\n            int newMonth = newValues[0];\n            int oldDay = values[1];\n            int newDay = newValues[1];\n\n            // Check if day was adjusted (e.g., Feb 29 -> Feb 28)\n            if (oldDay != newDay) {\n                // Try to get the last day of the target month\n                int lastDayOfNewMonth = iChronology.getDateMidnight(newMonth, 1, 0).month().getMaximumValue();\n                if (oldDay > lastDayOfNewMonth) {\n                    // This is expected adjustment (e.g., Jan 31 -> Feb 28/29)\n                    newValues[1] = lastDayOfNewMonth;\n                } else {\n                    // This might be a leap day issue, try to preserve the original day\n                    // Find a year where the original month/day is valid and use that as base\n                    int baseYear = 2004; // leap year\n                    long baseInstant = iChronology.getDateMidnight(baseYear, oldMonth, oldDay).getMillis();\n                    // Add the months to this base date\n                    long adjustedInstant = add(baseInstant, valueToAdd);\n                    // Get just the month and day\n                    newValues = iChronology.get(partial, adjustedInstant);\n                }\n            }\n        }\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}