{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // Remember original day of month if present\n        int originalDom = -1;\n        DateTimeField monthField = partial.getField(fieldIndex);\n        DateTimeField dayOfMonthField = null;\n        for (int i = 0; i < partial.size(); i++) {\n            DateTimeField f = partial.getField(i);\n            if (\"dayOfMonth\".equals(f.getName())) {\n                dayOfMonthField = f;\n                originalDom = values[i];\n                break;\n            }\n        }\n        instant = monthField.add(instant, valueToAdd);\n        if (dayOfMonthField != null) {\n            int newMaxDom = dayOfMonthField.getMaximumValue(instant);\n            if (originalDom > newMaxDom) {\n                // set to last day of month after addition\n                instant = dayOfMonthField.set(instant, newMaxDom);\n            } else {\n                instant = dayOfMonthField.set(instant, originalDom);\n            }\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}