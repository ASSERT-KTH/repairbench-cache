{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            // MonthDay is a special partial that needs to handle leap year rules correctly\n            // without being bound to a specific year's leap status.\n            // To do this, we use a fixed leap year (e.g., 2000) as the base for calculations.\n            // The specific year (2000) does not affect the final MonthDay value,\n            // only its leap status is important for day-of-month adjustments.\n\n            // Initialize an instant using a leap year (e.g., 2000)\n            // This ensures Feb 29 can always be created and used in intermediate calculations.\n            long instant = iChronology.getDateTimeMillis(2000, 1, 1, 0);\n\n            // Set the existing values of the partial (month, day) onto this base instant.\n            // This will correctly create an instant like 2000-02-29 or 2000-03-31, etc.\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n\n            // Perform the addition using the field's `add(long, int)` method.\n            // This `add` method implicitly handles month-end adjustments (e.g., Mar 31 + 1 month -> Apr 30).\n            // Because the base year (2000) is a leap year, it will correctly allow Feb 29 when applicable.\n            instant = add(instant, valueToAdd);\n\n            // Extract the new values (month and day) from the modified instant.\n            // The chronology will correctly extract the month and day from the 2000-based instant.\n            return iChronology.get(partial, instant);\n        } else {\n            // For non-contiguous partials, revert to the superclass's implementation.\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}