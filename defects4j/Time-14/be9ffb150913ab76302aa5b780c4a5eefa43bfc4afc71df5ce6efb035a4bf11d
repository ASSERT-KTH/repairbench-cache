{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            int[] result = iChronology.get(partial, instant);\n\n            // Handle leap day case (February 29)\n            if (partial instanceof MonthDay &&\n                values[1] == 29 && values[0] == 2 &&\n                result[1] != 29 && result[0] == 2) {\n                // If we ended up with February 28, adjust to last day of month\n                // This handles cases where we move from a leap year to non-leap year\n                int year = iChronology.year().get(instant);\n                int month = result[0];\n                int maxDay = iChronology.getDaysInMonthMax(year, month);\n                result[1] = Math.min(result[1], maxDay);\n            }\n            return result;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}