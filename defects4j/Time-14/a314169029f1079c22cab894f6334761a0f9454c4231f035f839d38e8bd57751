{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            int[] result = iChronology.get(partial, instant);\n\n            // Handle leap day adjustment\n            if (partial instanceof MonthDay && values[1] == 29 && values[0] == 2) {\n                // If we're dealing with February 29 and the result month isn't February\n                if (result[0] != 2) {\n                    // Check if the result day is 28 (meaning it was adjusted from 29)\n                    if (result[1] == 28) {\n                        // Try to get the last day of the month\n                        MonthDay md = new MonthDay(result[0], 1, iChronology);\n                        int lastDay = md.dayOfMonth().getMaximumValue();\n                        if (lastDay > 28) {\n                            result[1] = lastDay;\n                        }\n                    }\n                }\n            }\n            return result;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}