{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    if (partial instanceof MonthDay) {\n        // Handle special case of MonthDay with February 29\n        int[] newValues = new int[values.length];\n        System.arraycopy(values, 0, newValues, 0, values.length);\n        \n        DateTimeField monthField = partial.getFieldType(0).getField(iChronology);\n        DateTimeField dayField = partial.getFieldType(1).getField(iChronology);\n        \n        int month = monthField.add(values[0], valueToAdd);\n        int day = values[1];\n        \n        if (day > 28) {\n            int maxDay = dayField.getMaximumValue(month);\n            if (day > maxDay) {\n                day = maxDay;\n            }\n        }\n        \n        newValues[0] = month;\n        newValues[1] = day;\n        return newValues;\n    }\n    \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}