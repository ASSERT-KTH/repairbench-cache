{
    "generation": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n\n            // Adjust for leap year and end-of-month cases\n            int month = partial.getMonthOfYear();\n            int day = partial.getDayOfMonth();\n            int year = partial.getYear();\n\n            if (day == 29 && month == 2) {\n                if (iChronology.isLeapYear(year)) {\n                    // If the day is 29th of February in a leap year, ensure it stays valid\n                    instant = iChronology.getDateTime(instant).withDayOfMonth(29).getMillis();\n                } else {\n                    // If the day is 29th of February in a non-leap year, adjust to the last day of February\n                    instant = iChronology.getDateTime(instant).withDayOfMonth(iChronology.getMonthLength(2, year)).getMillis();\n                }\n            } else if (day > iChronology.getMonthLength(month, year)) {\n                // If the day is beyond the last day of the month, adjust to the last day of the month\n                instant = iChronology.getDateTime(instant).withDayOfMonth(iChronology.getMonthLength(month, year)).getMillis();\n            }\n\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}