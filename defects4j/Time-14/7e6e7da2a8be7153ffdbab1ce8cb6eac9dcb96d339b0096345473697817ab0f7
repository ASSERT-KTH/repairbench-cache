{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    if (partial instanceof MonthDay) {\n        // special case for MonthDay to ensure proper leap year handling\n        int[] newValues = new int[values.length];\n        System.arraycopy(values, 0, newValues, 0, values.length);\n        \n        DurationField field = getField(iChronology, fieldIndex).getDurationField();\n        int[] result = field.add(partial, fieldIndex, values, valueToAdd);\n        \n        // Ensure February 29 is respected when present in MonthDay values\n        if (partial.size() >= 2 && values[0] == 2 && values[1] == 29) {\n            int month = result[0];\n            int day = result[1];\n            \n            // if we've moved to a non-leap year and kept the day at 29\n            if (month != 2 && day == 29) {\n                DateTimeField dayField = partial.getFieldType(1).getField(iChronology);\n                if (dayField.getMaximumValue(month) < 29) {\n                    // if the new month doesn't have 29 days, adjust accordingly\n                    result[1] = Math.min(day, dayField.getMaximumValue(month));\n                }\n            }\n        }\n        return result;\n    }\n    // month is largest field and being added to, such as month-day\n    else if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}