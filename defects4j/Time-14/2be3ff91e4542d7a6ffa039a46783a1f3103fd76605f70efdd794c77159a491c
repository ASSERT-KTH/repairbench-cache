{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            // Adjust the year to a leap year to handle February 29 correctly\n            DateTimeField yearField = iChronology.year();\n            int year = yearField.get(instant);\n            // Find the nearest leap year starting from the initial year of the chronology\n            while (!yearField.isLeap(year)) {\n                year++;\n            }\n            instant = yearField.set(instant, year);\n            \n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DateTimeFieldType fieldType = partial.getFieldType(i);\n                DateTimeField field = fieldType.getField(iChronology);\n                instant = field.set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}