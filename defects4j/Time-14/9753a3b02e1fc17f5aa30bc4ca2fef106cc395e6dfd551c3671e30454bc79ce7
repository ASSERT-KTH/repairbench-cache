{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        // Special handling for MonthDay and similar fields to preserve the day-of-month validity\n        // even if the source partial/values are invalid in the target month (e.g. 2/29 + 1 month)\n        int size = partial.size();\n        // store a copy to mutate\n        int[] newValues = values.clone();\n\n        // Only handle partials with month and day (MonthDay), not others\n        if (size == 2 &&\n                (partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth()) ||\n                 partial.getFieldType(1).equals(DateTimeFieldType.monthOfYear()) && partial.getFieldType(0).equals(DateTimeFieldType.dayOfMonth()))) {\n\n            // Identify month and day indices\n            int monthIdx = partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) ? 0 : 1;\n            int dayIdx = 1 - monthIdx;\n\n            int origMonth = values[monthIdx];\n            int origDay = values[dayIdx];\n\n            // Compute new month and year (use dummy year: 2000, a leap year)\n            int year = 2000;\n            int monthToAdd = valueToAdd;\n            int newMonth = origMonth + monthToAdd;\n            int newYear = year;\n\n            // adjust for overflow/underflow of months (1..12)\n            while (newMonth > 12) {\n                newMonth -= 12;\n                newYear += 1;\n            }\n            while (newMonth < 1) {\n                newMonth += 12;\n                newYear -= 1;\n            }\n\n            // obtain max days in resulting month/year\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n\n            int newDay = origDay > maxDay ? maxDay : origDay;\n\n            newValues[monthIdx] = newMonth;\n            newValues[dayIdx] = newDay;\n            return newValues;\n        }\n\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}