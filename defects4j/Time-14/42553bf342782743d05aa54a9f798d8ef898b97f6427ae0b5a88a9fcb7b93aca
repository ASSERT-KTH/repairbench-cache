{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        // special\u2010case MonthDay (no year) so Feb 29 can be used\n        if (partial.size() == 2\n                && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear())\n                && partial.getFieldType(1).equals(DateTimeFieldType.dayOfMonth())) {\n            // use a known leap year as the baseline (2000)\n            instant = DateTimeFieldType.year().getField(iChronology).set(instant, 2000);\n        }\n        // set each field in turn\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // add the requested amount to the specified field\n        instant = partial.getFieldType(fieldIndex).getField(iChronology).add(instant, valueToAdd);\n        // extract and return the new field values\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}