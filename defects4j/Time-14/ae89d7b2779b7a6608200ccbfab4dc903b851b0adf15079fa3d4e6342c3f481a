{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            // Check if the partial includes a year field\n            boolean hasYear = false;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (partial.getFieldType(i) == DateTimeFieldType.year()) {\n                    hasYear = true;\n                    break;\n                }\n            }\n            // If no year, set to a leap year to handle February 29\n            if (!hasYear) {\n                DateTimeField yearField = DateTimeFieldType.year().getField(iChronology);\n                instant = yearField.set(instant, 2000); // Use a leap year\n            }\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DateTimeFieldType fieldType = partial.getFieldType(i);\n                DateTimeField field = fieldType.getField(iChronology);\n                instant = field.set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}