{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    if (partial instanceof MonthDay) {\n        // Special handling for MonthDay to properly manage leap years\n        int[] newValues = new int[values.length];\n        System.arraycopy(values, 0, newValues, 0, values.length);\n        \n        // Add months directly without validation yet\n        DateTimeFieldType monthField = DateTimeFieldType.monthOfYear();\n        int monthFieldIndex = partial.indexOf(monthField);\n        if (monthFieldIndex >= 0 && fieldIndex == monthFieldIndex) {\n            // We're adding to the month field\n            newValues[monthFieldIndex] = values[monthFieldIndex] + valueToAdd;\n            // Make sure month is valid (1-12)\n            while (newValues[monthFieldIndex] <= 0) {\n                newValues[monthFieldIndex] += 12;\n            }\n            while (newValues[monthFieldIndex] > 12) {\n                newValues[monthFieldIndex] -= 12;\n            }\n            return partial.getField(0).getType().getField(iChronology).set(partial, 0, newValues);\n        }\n    }\n    \n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}