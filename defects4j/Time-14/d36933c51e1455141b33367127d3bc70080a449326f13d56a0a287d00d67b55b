{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            int[] newValues = iChronology.get(partial, instant);\n            // Adjust days if necessary\n            if (newValues.length == 2 && newValues[1] == 0) {\n                newValues = adjust(newValues, partial);\n            }\n            return newValues;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }\n\n    private int[] adjust(int[] values, ReadablePartial partial) {\n        if (partial.size() != 2) {\n            return values;\n        }\n        int year = values[0];\n        int month = values[1];\n        int day = partial.get(1);\n        int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n        if (day > maxDay) {\n            day = maxDay;\n        }\n        return new int[]{year, month, day};\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}