{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            if (partial.size() == 2 &&\n                partial.getFieldType(0) == DateTimeFieldType.monthOfYear() &&\n                partial.getFieldType(1) == DateTimeFieldType.dayOfMonth()) {\n                // Handle month-day specially for leap day cases\n                int month = values[0];\n                int dayOfMonth = values[1];\n                int newMonth = month + valueToAdd;\n\n                // Adjust the year to handle month overflow correctly\n                int year = 2004; // a leap year, safe for our purposes\n\n                if (newMonth > 12 || newMonth < 1) {\n                    // Normalize month and adjust year\n                    int yearAdjust = (newMonth - 1) / 12;\n                    newMonth = newMonth - (yearAdjust * 12);\n                    if (newMonth < 1) {\n                        newMonth += 12;\n                        yearAdjust -= 1;\n                    } else if (newMonth > 12) {\n                        newMonth -= 12;\n                        yearAdjust += 1;\n                    }\n                    year += yearAdjust;\n                }\n\n                // Validate the day against the new month\n                int maxDay = iChronology.getDateTimeField(DateTimeFieldType.dayOfMonth()).getMaximumValueForSet(year, newMonth, 1);\n                if (dayOfMonth > maxDay) {\n                    dayOfMonth = maxDay; // adjust to last day of month\n                }\n\n                return new int[] {newMonth, dayOfMonth};\n            } else {\n                long instant = 0L;\n                for (int i = 0, isize = partial.size(); i < isize; i++) {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n                instant = add(instant, valueToAdd);\n                return iChronology.get(partial, instant);\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}