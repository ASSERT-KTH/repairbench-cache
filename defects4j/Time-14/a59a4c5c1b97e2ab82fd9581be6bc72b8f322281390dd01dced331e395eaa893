{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        // Fix for MonthDay-like partials when result day is invalid in resulting month (ex: Feb 29).\n        // Try to adjust day-of-month if needed (end-of-month rule)\n        if (partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear())) {\n            // Locate dayOfMonth field\n            int dayIndex = -1;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth())) {\n                    dayIndex = i;\n                    break;\n                }\n            }\n            if (dayIndex != -1) {\n                int[] result = iChronology.get(partial, instant);\n                int year = 2000; // Use 2000, a leap year, as base for MonthDay/YearlessPartial\n                // Find the month value (1-based)\n                int month = -1;\n                for (int i = 0, isize = partial.size(); i < isize; i++) {\n                    if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                        month = result[i];\n                        break;\n                    }\n                }\n                if (month != -1) {\n                    // Now, try to set the original day-of-month if possible (the 'desired' day)\n                    int desiredDay = values[dayIndex];\n                    int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n                    if (desiredDay > maxDay) {\n                        // set to last valid day\n                        result[dayIndex] = maxDay;\n                    } else {\n                        result[dayIndex] = desiredDay;\n                    }\n                }\n                return result;\n            }\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}