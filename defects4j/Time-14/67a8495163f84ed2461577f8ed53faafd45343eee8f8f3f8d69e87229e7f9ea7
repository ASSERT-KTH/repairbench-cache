{
    "generation": "    //-----------------------------------------------------------------------\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n\n        if (DateTimeUtils.isContiguous(partial)) {\n            if (partial.getFieldType(0) == DurationFieldType.months()) {\n                int newMonth = values[0] + valueToAdd;\n                int newYear = partial.getField(0) != null ? (int)partial.getField(0) : 0;\n\n                newYear += (newMonth - 1) / 12;\n                newMonth = (newMonth - 1) % 12 + 1;\n\n                values[0] = newMonth;\n                \n                try {\n                    return iChronology.get(partial, newYear, newMonth,values[1]);\n                } catch (IllegalFieldValueException e) {\n                    if(newMonth == 2 && values[1] == 29)\n                        return iChronology.get(partial, newYear, 28,values[1]);\n                    else\n                      throw e;\n                }\n            }\n            else {\n                long instant = 0L;\n                for (int i = 0, isize = partial.size(); i < isize; i++) {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n                instant = add(instant, valueToAdd);\n                return iChronology.get(partial, instant);\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}