{
    "generation": "//-----------------------------------------------------------------------\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        // We must use a leap-safe base instant to allow for e.g. adding months to MonthDay(2, 29)\n        // Use 2004-06-09T00:00Z as base, since it is a leap year and non-edge month/day\n        // This is consistent with Joda-Time MonthDay behavior\n        // If MonthDay instance, we know how to map fields: assume month=0, day=1\n        long baseInstant = iChronology.getDateTimeMillis(2004, 6, 9, 0, 0, 0, 0); // leap year, safe day\n        // set only month and day from values/partial\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DateTimeFieldType type = partial.getFieldType(i);\n            if (type == DateTimeFieldType.monthOfYear() || type == DateTimeFieldType.dayOfMonth()) {\n                baseInstant = type.getField(iChronology).set(baseInstant, values[i]);\n            }\n        }\n        baseInstant = partial.getFieldType(fieldIndex).getField(iChronology).add(baseInstant, valueToAdd);\n\n        // After the add, extract only month and day back (ignore year)\n        int[] result = new int[partial.size()];\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DateTimeFieldType type = partial.getFieldType(i);\n            if (type == DateTimeFieldType.monthOfYear() || type == DateTimeFieldType.dayOfMonth()) {\n                result[i] = type.getField(iChronology).get(baseInstant);\n            } else {\n                result[i] = values[i];\n            }\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}