{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // Avoid cancellation if the vectors are (nearly) parallel and large\n      // This is done by preconditioning as described by Kahan\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      final double inv = 1.0 / 256.0;\n      double ratio = (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z) /\n                     (v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);\n      double rho = Math.rint(ratio / inv) * inv;\n\n      // precondition: v3 = v1 - rho * v2, cross(v3, v2) == cross(v1, v2)\n      double x = v1.x - rho * v2.x;\n      double y = v1.y - rho * v2.y;\n      double z = v1.z - rho * v2.z;\n\n      return new Vector3D(\n          y * v2.z - z * v2.y,\n          z * v2.x - x * v2.z,\n          x * v2.y - y * v2.x\n      );\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}