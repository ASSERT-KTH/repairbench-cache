{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // To reduce cancellation errors, precondition by replacing v1 with v3 = v1 - rho * v2\n      double norm = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n      double rho = 0.0;\n      if (norm != 0) {\n          double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n          // 8-bit approximation: take the high 8 bits of mantissa.\n          long bits = Double.doubleToLongBits(dot / norm);\n          // Zero-out lower 44 bits (keep sign, exp, top 8 mantissa bits)\n          bits &= 0xFFF8000000000000L;\n          rho = Double.longBitsToDouble(bits);\n      }\n      // v3 = v1 - rho * v2\n      double x3 = v1.x - rho * v2.x;\n      double y3 = v1.y - rho * v2.y;\n      double z3 = v1.z - rho * v2.z;\n      return new Vector3D(\n          y3 * v2.z - z3 * v2.y,\n          z3 * v2.x - x3 * v2.z,\n          x3 * v2.y - y3 * v2.x\n      );\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}