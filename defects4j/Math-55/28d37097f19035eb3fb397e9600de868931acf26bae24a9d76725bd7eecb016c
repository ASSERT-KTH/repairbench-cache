{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // Kahan's robust cross product algorithm for improved cancellation\n    // See: http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // Compute approximation of rho = (v1.v2)/(v2.v2)\n    double v2Norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n    double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n    double rho = 0;\n    if (v2Norm2 != 0) {\n        // 8-bit approximation: Take high bits only, to limit cancellation\n        long dotBits = Double.doubleToRawLongBits(dot / v2Norm2);\n        // Clear all but the highest 8 exponent+magnitude bits (masking mantissa)\n        dotBits &= 0xFFF8000000000000L; // keep sign, exponent and top 8 mantissa bits\n        rho = Double.longBitsToDouble(dotBits);\n    }\n\n    // Compute v3 = v1 - rho * v2\n    double v3x = v1.x - rho * v2.x;\n    double v3y = v1.y - rho * v2.y;\n    double v3z = v1.z - rho * v2.z;\n\n    // Compute cross product from v3 and v2\n    return new Vector3D(\n        v3y * v2.z - v3z * v2.y,\n        v3z * v2.x - v3x * v2.z,\n        v3x * v2.y - v3y * v2.x\n    );\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}