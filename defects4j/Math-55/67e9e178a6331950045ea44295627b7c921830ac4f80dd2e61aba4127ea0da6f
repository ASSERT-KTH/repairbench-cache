{
    "generation": "import org.apache.commons.math.util.MathArrays;\n\n  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n      // The original implementation directly computed the cross product components.\n      // This can lead to catastrophic cancellation errors when the products\n      // (e.g., v1.x * v2.y) are large and nearly equal, but their difference is small.\n      // The test case `testCrossProductCancellation` demonstrates this failure\n      // where the Z-component is expected to be 1.0 but computes to 0.0.\n\n      // A robust way to compute expressions of the form a*b - c*d (which are the components\n      // of a cross product) is to use an algorithm that maintains higher precision,\n      // such as one based on fused multiply-add (FMA) or error-compensated summation.\n      // In Apache Commons Math, `MathArrays.linearCombination` provides this robustness.\n      // The expression a*b - c*d can be rewritten as a*b + (-c)*d, allowing the use of\n      // MathArrays.linearCombination(a, b, -c, d).\n\n      final double x1 = v1.x;\n      final double y1 = v1.y;\n      final double z1 = v1.z;\n      final double x2 = v2.x;\n      final double y2 = v2.y;\n      final double z2 = v2.z;\n\n      // Compute each component using MathArrays.linearCombination for improved precision\n      // For the X component: v1.y * v2.z - v1.z * v2.y\n      final double crossX = MathArrays.linearCombination(y1, z2, -z1, y2);\n\n      // For the Y component: v1.z * v2.x - v1.x * v2.z\n      final double crossY = MathArrays.linearCombination(z1, x2, -x1, z2);\n\n      // For the Z component: v1.x * v2.y - v1.y * v2.x\n      final double crossZ = MathArrays.linearCombination(x1, y2, -y1, x2);\n\n      return new Vector3D(crossX, crossY, crossZ);\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}