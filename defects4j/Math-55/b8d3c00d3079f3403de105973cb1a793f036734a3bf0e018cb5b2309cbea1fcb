{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    double normV2 = v2.getNormSq();\n    if (normV2 == 0) {\n        // avoid division by zero, return the naive computation\n        return new Vector3D(v1.y * v2.z - v1.z * v2.y,\n                            v1.z * v2.x - v1.x * v2.z,\n                            v1.x * v2.y - v1.y * v2.x);\n    }\n\n    // approximate rho as an 8 bits approximation of (v1\u00b7v2)/(v2\u00b7v2)\n    double dot = v1.dotProduct(v2);\n    double rho = Math.rint((256 * dot) / normV2) / 256.0;\n\n    // compute v3 = v1 - rho * v2 \n    double x3 = v1.x - rho * v2.x;\n    double y3 = v1.y - rho * v2.y;\n    double z3 = v1.z - rho * v2.z;\n\n    return new Vector3D(y3 * v2.z - z3 * v2.y,\n                        z3 * v2.x - x3 * v2.z,\n                        x3 * v2.y - y3 * v2.x);\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}