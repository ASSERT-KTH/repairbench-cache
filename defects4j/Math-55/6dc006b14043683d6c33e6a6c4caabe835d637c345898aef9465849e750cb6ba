{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // To reduce cancellation errors, we use Kahan's method:\n      // Replace v1 by v3 = v1 - rho * v2, with rho approximating (v1 \u00b7 v2) / (v2 \u00b7 v2)\n\n      // Compute rho as an 8 bits approximation\n      double v2Dot = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n      double v1DotV2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n      double rho = 0.0;\n\n      if (v2Dot != 0) {\n          double ratio = v1DotV2 / v2Dot;\n          // Truncate to 8 bits of mantissa\n          long bits = Double.doubleToRawLongBits(ratio);\n          // Keep sign and exponent, mask all but top 8 bits of mantissa\n          bits &= 0xFFF0000000000000L;\n          rho = Double.longBitsToDouble(bits);\n      }\n      // v3 = v1 - rho * v2\n      double v3x = v1.x - rho * v2.x;\n      double v3y = v1.y - rho * v2.y;\n      double v3z = v1.z - rho * v2.z;\n\n      // Compute cross product of v3 and v2\n      return new Vector3D(\n          v3y * v2.z - v3z * v2.y,\n          v3z * v2.x - v3x * v2.z,\n          v3x * v2.y - v3y * v2.x\n      );\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}