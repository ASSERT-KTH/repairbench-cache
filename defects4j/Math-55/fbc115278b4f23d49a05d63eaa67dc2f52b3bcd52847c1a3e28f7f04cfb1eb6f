{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // Kahan-style preconditioning to reduce cancellation error\n    double x1 = v1.x;\n    double y1 = v1.y;\n    double z1 = v1.z;\n    double x2 = v2.x;\n    double y2 = v2.y;\n    double z2 = v2.z;\n\n    // projection factor rho = (v1\u00b7v2)/(v2\u00b7v2)\n    double dot12 = x1 * x2 + y1 * y2 + z1 * z2;\n    double dot22 = x2 * x2 + y2 * y2 + z2 * z2;\n    double rho = (dot22 != 0.0) ? dot12 / dot22 : 0.0;\n    // approximate rho to 8 bits to limit precision and avoid cancellation\n    double rho8 = Math.rint(rho * 256.0) / 256.0;\n\n    // form the preconditioned vector v3 = v1 - rho8 * v2\n    double v3x = x1 - rho8 * x2;\n    double v3y = y1 - rho8 * y2;\n    double v3z = z1 - rho8 * z2;\n\n    // compute cross product of v3 and v2\n    return new Vector3D(\n        v3y * z2 - v3z * y2,\n        v3z * x2 - v3x * z2,\n        v3x * y2 - v3y * x2\n    );\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}