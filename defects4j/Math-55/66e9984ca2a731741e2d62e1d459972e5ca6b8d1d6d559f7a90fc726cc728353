{
    "generation": "/** Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\npublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double ax = v1.x;\n    final double ay = v1.y;\n    final double az = v1.z;\n    final double bx = v2.x;\n    final double by = v2.y;\n    final double bz = v2.z;\n\n    double x = ay * bz - az * by;\n    double y = az * bx - ax * bz;\n    double z = ax * by - ay * bx;\n\n    return new Vector3D(x, y, z);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}