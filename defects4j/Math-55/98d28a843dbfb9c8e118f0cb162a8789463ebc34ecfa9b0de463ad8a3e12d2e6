{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // Compute rho as an 8-bit approximation of (v1.v2) / (v2.v2)\n    double dot = v1.dotProduct(v2);\n    double norm2 = v2.getNormSq();\n    if (norm2 == 0) {\n        // if v2 is the zero vector, fallback to naive implementation\n        return new Vector3D(\n            v1.y * v2.z - v1.z * v2.y,\n            v1.z * v2.x - v1.x * v2.z,\n            v1.x * v2.y - v1.y * v2.x\n        );\n    }\n    double ratio = dot / norm2;\n    long bits = Double.doubleToLongBits(ratio);\n    // keep only the top 8 mantissa bits (truncate lower bits)\n    bits &= 0xFFFFFFFFFFFFF800L;\n    double rho = Double.longBitsToDouble(bits);\n\n    // Compute v3 = v1 - rho * v2\n    Vector3D v3 = v1.subtract(v2.scalarMultiply(rho));\n\n    return new Vector3D(\n        v3.y * v2.z - v3.z * v2.y,\n        v3.z * v2.x - v3.x * v2.z,\n        v3.x * v2.y - v3.y * v2.x\n    );\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}