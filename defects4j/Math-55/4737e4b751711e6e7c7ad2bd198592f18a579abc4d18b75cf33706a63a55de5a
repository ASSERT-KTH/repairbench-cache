{
    "generation": "/** Compute the cross-product of two vectors.\n *  This implementation uses Kahan\u2019s \u201cpreconditioning\u201d technique to\n *  reduce cancellation errors.  It first computes an 8\u2010bit approximation\n *  of (v1\u00b7v2)/(v2\u00b7v2) (called rho), subtracts rho\u00b7v2 from v1, and then\n *  forms the cross product of the \u201ccorrected\u201d v1 with v2.\n *\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\npublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // Compute the squared norm of v2.\n    final double norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n    if (norm2 == 0.0) {\n        // v2 is the zero vector; cross product is undefined.\n        return new Vector3D(Double.NaN, Double.NaN, Double.NaN);\n    }\n\n    // Compute the dot product of v1 and v2.\n    final double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n\n    // Compute rho = (v1\u00b7v2)/(v2\u00b7v2), rounded to 8 bits of precision.\n    double rho = Math.rint((dot / norm2) * 256.0) / 256.0;\n\n    // Precondition v1 by subtracting the v2-component.\n    final double ax = v1.x - rho * v2.x;\n    final double ay = v1.y - rho * v2.y;\n    final double az = v1.z - rho * v2.z;\n\n    // Now compute the cross product from the preconditioned vector and v2.\n    final double cx = ay * v2.z - az * v2.y;\n    final double cy = az * v2.x - ax * v2.z;\n    final double cz = ax * v2.y - ay * v2.x;\n\n    return new Vector3D(cx, cy, cz);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}