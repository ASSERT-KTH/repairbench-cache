{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector3D\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // Compute the cross product using the standard formula initially.\n      // This is prone to cancellation errors if v1 and v2 are nearly parallel\n      // or have vastly different magnitudes.\n      double Px = v1.y * v2.z - v1.z * v2.y;\n      double Py = v1.z * v2.x - v1.x * v2.z;\n      double Pz = v1.x * v2.y - v1.y * v2.x;\n\n      // Use Kahan's algorithm (computing v3 = v1 - rho v2) to improve accuracy.\n      // This helps avoid cancellation errors in problematic cases.\n      // See Kahan lecture \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // Store vector components for clarity and potentially minor performance\n      final double v1x = v1.x;\n      final double v1y = v1.y;\n      final double v1z = v1.z;\n      final double v2x = v2.x;\n      final double v2y = v2.y;\n      final double v2z = v2.z;\n\n      // Compute v2 . v2 (norm squared of v2)\n      final double dot22 = v2x * v2x + v2y * v2y + v2z * v2z;\n\n      // If v2 is the zero vector, the cross product is the zero vector.\n      // The standard calculation (Px, Py, Pz) correctly results in zero.\n      // We check this condition to avoid division by zero when calculating rho.\n      if (dot22 == 0.0) {\n          return new Vector3D(Px, Py, Pz); // Return the standard result which is (0,0,0)\n      }\n\n      // Compute v1 . v2 (dot product)\n      final double dot12 = v1x * v2x + v1y * v2y + v1z * v2z;\n\n      // Compute rho = (v1 . v2) / (v2 . v2)\n      // This rho is chosen such that v3 = v1 - rho * v2 is orthogonal to v2.\n      final double rho = dot12 / dot22;\n\n      // Compute v3 = v1 - rho * v2\n      // Mathematically, v1 x v2 = (v3 + rho * v2) x v2 = v3 x v2 + rho * (v2 x v2) = v3 x v2.\n      // Computing v3 x v2 is generally more numerically stable.\n      final double v3x = v1x - rho * v2x;\n      final double v3y = v1y - rho * v2y;\n      final double v3z = v1z - rho * v2z;\n\n      // Compute the cross product P' = v3 x v2 using the standard formula structure\n      final double PprimeX = v3y * v2z - v3z * v2y;\n      final double PprimeY = v3z * v2x - v3x * v2z;\n      final double PprimeZ = v3x * v2y - v3y * v2x;\n\n      // Return the result computed using Kahan's method\n      return new Vector3D(PprimeX, PprimeY, PprimeZ);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}