{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // Compute the scaling factor rho to precondition the vectors\n      final double axbX = v1.y * v2.z - v1.z * v2.y;\n      final double axbY = v1.z * v2.x - v1.x * v2.z;\n      final double axbZ = v1.x * v2.y - v1.y * v2.x;\n\n      // return the standard cross product formula if it passes the check\n      // (which it will fail for cancellation prone cases)\n      double r1 = axbX;\n      double r2 = axbY;\n      double r3 = axbZ;\n      if ((FastMath.abs(axbX) <= (1e-50 * FastMath.max(FastMath.abs(v1.y * v2.z),\n                                                     FastMath.abs(v1.z * v2.y))))\n          || (FastMath.abs(axbY) <= (1e-50 * FastMath.max(FastMath.abs(v1.z * v2.x),\n                                                        FastMath.abs(v1.x * v2.z))))\n          || (FastMath.abs(axbZ) <= (1e-50 * FastMath.max(FastMath.abs(v1.x * v2.y),\n                                                        FastMath.abs(v1.y * v2.x))))) {\n          // we have a cancellation problem\n\n          // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n          final double v1DotV2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n          final double v2DotV2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n          final double rho = v1DotV2 / v2DotV2;\n\n          // compute v3 = v1 - rho v2\n          final double v3X = v1.x - rho * v2.x;\n          final double v3Y = v1.y - rho * v2.y;\n          final double v3Z = v1.z - rho * v2.z;\n\n          // return the cross product of v3 and v2\n          return new Vector3D(v3Y * v2.z - v3Z * v2.y,\n                             v3Z * v2.x - v3X * v2.z,\n                             v3X * v2.y - v3Y * v2.x);\n      } else {\n          // no cancellation problem, return standard cross product\n          return new Vector3D(axbX, axbY, axbZ);\n      }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}