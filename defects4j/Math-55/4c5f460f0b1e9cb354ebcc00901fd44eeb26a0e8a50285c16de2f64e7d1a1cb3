{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n      // Compute the cross product using preconditioning to avoid cancellation errors\n      // Compute r = v1 \u2022 v2 / v2 \u2022 v2 (approximate)\n      final double v2Norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n      double rho = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z; // v1 \u2022 v2\n      rho /= v2Norm2;\n\n      // Compute scaled v1 (v3 = v1 - rho * v2)\n      final double v3x = v1.x - rho * v2.x;\n      final double v3y = v1.y - rho * v2.y;\n      final double v3z = v1.z - rho * v2.z;\n\n      // Compute cross product of v3 and v2, which is equivalent to the cross product of v1 and v2\n      return new Vector3D(v3y * v2.z - v3z * v2.y,\n                         v3z * v2.x - v3x * v2.z,\n                         v3x * v2.y - v3y * v2.x);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}