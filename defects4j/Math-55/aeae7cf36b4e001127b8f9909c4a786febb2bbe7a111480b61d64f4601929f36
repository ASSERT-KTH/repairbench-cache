{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double dot = v1.dotProduct(v2);\n    final double norm2 = v2.getNormSq();\n    // avoid division by zero; we won't renormalize if v2 is zero\n    double rho = 0;\n    if (norm2 != 0) {\n        rho = (double) ((int) (256 * (dot / norm2))) / 256.0;\n    }\n\n    // compute v3 = v1 - rho * v2\n    final Vector3D v3 = new Vector3D(1.0, v1, -rho, v2);\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(\n        v3.y * v2.z - v3.z * v2.y,\n        v3.z * v2.x - v3.x * v2.z,\n        v3.x * v2.y - v3.y * v2.x\n    );\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}