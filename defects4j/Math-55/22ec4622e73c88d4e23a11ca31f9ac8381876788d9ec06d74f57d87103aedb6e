{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // To reduce cancellation errors, replace v1 by v3 = v1 - rho * v2,\n      // with rho ~= (v1.v2) / (v2.v2), quantized with few bits.\n      final double norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n      double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n      double rho = 0.0;\n      if (norm2 != 0.0) {\n          // 8 bits of mantissa for stability, as per Kahan's suggestion\n          long bits = Double.doubleToLongBits(dot / norm2);\n          // keep sign and top 8 bits of mantissa\n          bits &= 0xFFF8000000000000L;\n          rho = Double.longBitsToDouble(bits);\n      }\n\n      double x = v1.x - rho * v2.x;\n      double y = v1.y - rho * v2.y;\n      double z = v1.z - rho * v2.z;\n\n      return new Vector3D(\n          y * v2.z - z * v2.y,\n          z * v2.x - x * v2.z,\n          x * v2.y - y * v2.x\n      );\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}