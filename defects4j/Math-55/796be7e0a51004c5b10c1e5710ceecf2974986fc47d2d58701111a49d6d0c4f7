{
    "generation": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      // we reduce cancellation errors by preconditioning\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      double rho = (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z) /\n                  (v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);\n      double x3 = v1.x - rho * v2.x;\n      double y3 = v1.y - rho * v2.y;\n      double z3 = v1.z - rho * v2.z;\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(y3 * v2.z - z3 * v2.y, z3 * v2.x - x3 * v2.z, x3 * v2.y - y3 * v2.x);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}