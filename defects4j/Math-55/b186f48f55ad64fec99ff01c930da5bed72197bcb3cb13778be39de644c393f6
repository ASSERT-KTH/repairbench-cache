{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // Compute rho as an 8-bit approximation of (v1 . v2) / (v2 . v2)\n      double rhoNumerator = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n      double rhoDenominator = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n\n      if (rhoDenominator == 0.0) {\n          return new Vector3D(0, 0, 0);\n      }\n\n      double rho = rhoNumerator / rhoDenominator;\n      // Round to 8 bits (as 1/256 is 8-bit fraction)\n      rho = Math.rint(rho * 256) / 256.0;\n\n      // Compute v3 = v1 - rho * v2\n      double v3x = v1.x - rho * v2.x;\n      double v3y = v1.y - rho * v2.y;\n      double v3z = v1.z - rho * v2.z;\n\n      // Compute cross product of v3 and v2\n      double cx = v3y * v2.z - v3z * v2.y;\n      double cy = v3z * v2.x - v3x * v2.z;\n      double cz = v3x * v2.y - v3y * v2.x;\n\n      return new Vector3D(cx, cy, cz);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}