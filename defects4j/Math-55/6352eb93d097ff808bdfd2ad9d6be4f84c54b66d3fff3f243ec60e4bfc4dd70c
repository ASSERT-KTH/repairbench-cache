{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // Compute rho as an 8 bits approximation of (v1 . v2) / (v2 . v2)\n    final double dot = v1.dotProduct(v2);\n    final double norm2 = v2.getNormSq();\n\n    final double rho = Math.rint(256 * (dot / norm2)) / 256;\n\n    // Compute v3 = v1 - rho * v2 with compensated subtraction\n    final double x3 = v1.x - rho * v2.x;\n    final double y3 = v1.y - rho * v2.y;\n    final double z3 = v1.z - rho * v2.z;\n\n    // Return cross product of v3 and v2\n    return new Vector3D(\n        y3 * v2.z - z3 * v2.y,\n        z3 * v2.x - x3 * v2.z,\n        x3 * v2.y - y3 * v2.x\n    );\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}