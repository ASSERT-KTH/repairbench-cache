{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // First, rescale both vectors so that their entries are of moderate size.\n    // This avoids overflow or underflow in computing dot products and ratios.\n    double max1 = Math.max(Math.abs(v1.x), Math.max(Math.abs(v1.y), Math.abs(v1.z)));\n    double max2 = Math.max(Math.abs(v2.x), Math.max(Math.abs(v2.y), Math.abs(v2.z)));\n    double scale = Math.max(max1, max2);\n    if (scale == 0.0) {\n        // Both vectors are zero.\n        return new Vector3D(0.0, 0.0, 0.0);\n    }\n    \n    // Scale down v1 and v2 so that the maximum absolute value is 1.\n    double x1 = v1.x / scale;\n    double y1 = v1.y / scale;\n    double z1 = v1.z / scale;\n    double x2 = v2.x / scale;\n    double y2 = v2.y / scale;\n    double z2 = v2.z / scale;\n    \n    // Preconditioning step:\n    // Compute an 8-bit approximation of the projection factor rho = (v1 . v2)/(v2 . v2)\n    // The idea is to replace v1 by v3 = v1 - rho*v2 computed in reduced precision.\n    double norm2 = x2 * x2 + y2 * y2 + z2 * z2;\n    double factor;\n    if (norm2 == 0.0) {\n        factor = 0.0;\n    } else {\n        double dot = x1 * x2 + y1 * y2 + z1 * z2;\n        double ratio = dot / norm2;\n        // Round to 8-bit: i.e. to increments of 1/256.\n        factor = Math.floor(ratio * 256.0 + 0.5) / 256.0;\n    }\n    \n    // Compute the preconditioned vector v3 = v1 - factor * v2 (in scaled space).\n    double u1 = x1 - factor * x2;\n    double u2 = y1 - factor * y2;\n    double u3 = z1 - factor * z2;\n    \n    // Compute the cross product of v3 and v2 (still in scaled coordinates).\n    double cx = u2 * z2 - u3 * y2;\n    double cy = u3 * x2 - u1 * z2;\n    double cz = u1 * y2 - u2 * x2;\n    \n    // Remember: since we scaled each vector by 1/scale, the cross product scales like (1/scale)^2.\n    // To recover the proper magnitude we must multiply by scale^2.\n    return new Vector3D(cx * scale * scale, cy * scale * scale, cz * scale * scale);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}