{
    "generation": "/** Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\npublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // precondition v1 by removing an approximate projection onto v2\n    double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n    double vv  = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n    double rho = dot / vv;\n    // truncate rho to 8 bits of mantissa to avoid cancellation in v1 - rho*v2\n    long bits = Double.doubleToRawLongBits(rho);\n    bits &= (~0L) << 44; // keep sign+exponent+top-8 mantissa bits\n    rho = Double.longBitsToDouble(bits);\n    // compute v3 = v1 - rho * v2\n    double x3 = v1.x - rho * v2.x;\n    double y3 = v1.y - rho * v2.y;\n    double z3 = v1.z - rho * v2.z;\n    // return cross(v3, v2)\n    return new Vector3D(\n        y3 * v2.z - z3 * v2.y,\n        z3 * v2.x - x3 * v2.z,\n        x3 * v2.y - y3 * v2.x\n    );\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}