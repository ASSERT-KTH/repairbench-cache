{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      double rhop = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n      double rhol = 0.0;\n      // split dot product into high and low parts for more accuracy\n      for (DoubleSumProduct dsp : DoubleSumProduct.calculateProduct(\n          v1.x, v2.x, v1.y, v2.y, v1.z, v2.z)) {\n          rhop += dsp.sum();\n          rhol += dsp.getPartialSumProduct();\n      }\n\n      double v2pv2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n      // rho is the high-order word of the approximation of this division\n      final double rho = rhop / v2pv2;\n\n      // compute v3 = v1 - rho v2\n      final double v3x = v1.x - rho * v2.x;\n      final double v3y = v1.y - rho * v2.y;\n      final double v3z = v1.z - rho * v2.z;\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(v3y * v2.z - v3z * v2.y, v3z * v2.x - v3x * v2.z, v3x * v2.y - v3y * v2.x);\n\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}