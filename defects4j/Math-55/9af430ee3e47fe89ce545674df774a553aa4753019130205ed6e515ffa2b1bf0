{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // Compute an approximate rho = v1.v2 / v2.v2, quantized to 8 bits\n    // to reduce cancellation errors as per Kahan's suggestion.\n\n    // Make v2.v2 non-zero to guard division\n    double v2Norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n    if (v2Norm2 == 0) {\n        // If v2 is zero, fallback to standard formula (will yield zero vector)\n        return new Vector3D(0, 0, 0);\n    }\n\n    double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n    double rho = dot / v2Norm2;\n\n    // Quantize rho to 8 bits for preconditioning\n    long bits = Double.doubleToLongBits(rho);\n    // Zero all mantissa bits except the top 8\n    bits &= 0xFFF0000000000000L;\n    double rhoQ = Double.longBitsToDouble(bits);\n\n    // Compute v3 = v1 - rhoQ * v2\n    double x3 = v1.x - rhoQ * v2.x;\n    double y3 = v1.y - rhoQ * v2.y;\n    double z3 = v1.z - rhoQ * v2.z;\n\n    // Cross product v3 x v2\n    return new Vector3D(\n        y3 * v2.z - z3 * v2.y,\n        z3 * v2.x - x3 * v2.z,\n        x3 * v2.y - y3 * v2.x\n    );\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}