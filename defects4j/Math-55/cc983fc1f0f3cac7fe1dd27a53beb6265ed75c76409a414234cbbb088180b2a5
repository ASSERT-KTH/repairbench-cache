{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // To prevent loss of precision due to cancellation, use Kahan's method.\n      // See: http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // Compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      double norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n      if (norm2 == 0) {\n          // fall-back to naive for zero vector to avoid division by zero\n          return new Vector3D(\n              v1.y * v2.z - v1.z * v2.y,\n              v1.z * v2.x - v1.x * v2.z,\n              v1.x * v2.y - v1.y * v2.x\n          );\n      }\n      double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n      double rho = Double.longBitsToDouble(0x3ff0000000000000L | // 1.<mant> \n                    (((long)(((dot / norm2) * 256.0)) & 0xffL) << 44));\n      // Actually, use a more direct approach to get low-precision approximation:\n      // use Math.rint to the nearest 1/256th for 8-bit approximation\n      double apprDot = Math.rint((dot / norm2) * 256.0) / 256.0;\n\n      // Preconditioned v1\n      double x3 = v1.x - apprDot * v2.x;\n      double y3 = v1.y - apprDot * v2.y;\n      double z3 = v1.z - apprDot * v2.z;\n\n      // Cross with v2\n      return new Vector3D(\n          y3 * v2.z - z3 * v2.y,\n          z3 * v2.x - x3 * v2.z,\n          x3 * v2.y - y3 * v2.x\n      );\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}