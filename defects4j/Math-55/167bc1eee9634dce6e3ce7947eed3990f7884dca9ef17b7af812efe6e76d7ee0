{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      final double dot = v1.dotProduct(v2);\n      final double scale1 = 1.0;\n      final double scale2 = 1.0;\n      final double s = FastMath.max(FastMath.scalb(FastMath.abs(dot), -53), 1.0);\n      final Vector3D v3 = new Vector3D(scale1, v1, -s * dot / FastMath.abs(dot), v2);\n      final double newScale = s / v3.getNorm();\n\n      final double x = newScale * (v3.getY() * v2.getZ() - v3.getZ() * v2.getY());\n      final double y = newScale * (v3.getZ() * v2.getX() - v3.getX() * v2.getZ());\n      final double z = newScale * (v3.getX() * v2.getY() - v3.getY() * v2.getX());\n\n      return new Vector3D(x, y, z);\n\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}