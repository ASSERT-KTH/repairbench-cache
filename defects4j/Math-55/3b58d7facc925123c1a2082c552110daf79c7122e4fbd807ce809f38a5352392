{
    "generation": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // Compute the squared norm of v2\n    double v2Norm2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;\n    \n    // Compute the dot product v1 \u00b7 v2\n    double dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n    \n    // Compute rho as an 8 bits approximation of (v1 \u00b7 v2) / (v2 \u00b7 v2)\n    double factor = dot / v2Norm2;\n    double rho = Math.rint(256 * factor) / 256.0;\n    \n    // Precondition v1 by subtracting the projection of v1 onto v2:\n    // v3 = v1 - rho * v2\n    double v3x = v1.x - rho * v2.x;\n    double v3y = v1.y - rho * v2.y;\n    double v3z = v1.z - rho * v2.z;\n    \n    // Compute the cross product using the preconditioned vector v3 and v2\n    return new Vector3D(v3y * v2.z - v3z * v2.y,\n                        v3z * v2.x - v3x * v2.z,\n                        v3x * v2.y - v3y * v2.x);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}