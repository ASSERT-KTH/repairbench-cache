{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      double factor1 = FastMath.scalb(1.0, -100);\n      double factor2 = FastMath.scalb(1.0, 100);\n      Vector3D scaledV1 = new Vector3D(factor1, v1);\n      Vector3D scaledV2 = new Vector3D(factor2, v2);\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      double rho = (scaledV1.dotProduct(scaledV2)) / (scaledV2.dotProduct(scaledV2));\n\n      // compute v3 = v1 - rho v2\n      Vector3D v3 = new Vector3D(1.0, scaledV1);\n      v3 = v3.subtract(new Vector3D(rho, scaledV2));\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      Vector3D result = new Vector3D(v3.getY() * scaledV2.getZ() - v3.getZ() * scaledV2.getY(),\n                                     v3.getZ() * scaledV2.getX() - v3.getX() * scaledV2.getZ(),\n                                     v3.getX() * scaledV2.getY() - v3.getY() * scaledV2.getX());\n\n      // rescale the result to the original scale\n      return new Vector3D(FastMath.scalb(1.0, 100), result);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}