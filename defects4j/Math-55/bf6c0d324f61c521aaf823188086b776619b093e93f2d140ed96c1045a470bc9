{
    "generation": "/** Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\npublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double v1x = v1.getX();\n    final double v1y = v1.getY();\n    final double v1z = v1.getZ();\n    final double v2x = v2.getX();\n    final double v2y = v2.getY();\n    final double v2z = v2.getZ();\n\n    final double v2Norm2 = v2x * v2x + v2y * v2y + v2z * v2z;\n    final double dot      = v1x * v2x + v1y * v2y + v1z * v2z;\n    final double k        = Math.floor(dot / v2Norm2 * 256.0) / 256.0;\n    \n    // compute cross product from v3 = v1 - k v2 and v2 instead of v1 and v2\n    final double v3x      = v1x - k * v2x;\n    final double v3y      = v1y - k * v2y;\n    final double v3z      = v1z - k * v2z;\n\n    return new Vector3D(v3y * v2z - v3z * v2y,\n                        v3z * v2x - v3x * v2z,\n                        v3x * v2y - v3y * v2x);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}