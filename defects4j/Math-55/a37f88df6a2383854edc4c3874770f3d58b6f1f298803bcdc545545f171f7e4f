{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // Rescale vectors to avoid overflow/underflow\n      double max = Math.max(Math.abs(v1.x), Math.abs(v1.y));\n      max = Math.max(max, Math.abs(v1.z));\n      max = Math.max(max, Math.abs(v2.x));\n      max = Math.max(max, Math.abs(v2.y));\n      max = Math.max(max, Math.abs(v2.z));\n\n      if (max == 0.0) {\n          return new Vector3D(0, 0, 0);\n      }\n\n      int exponent = Math.getExponent(max);\n      double scale = Math.scalb(1.0, -exponent);\n\n      // Scale the vectors\n      double v1x = v1.x * scale;\n      double v1y = v1.y * scale;\n      double v1z = v1.z * scale;\n\n      double v2x = v2.x * scale;\n      double v2y = v2.y * scale;\n      double v2z = v2.z * scale;\n\n      // Compute dot products\n      double dotV1V2 = v1x * v2x + v1y * v2y + v1z * v2z;\n      double dotV2V2 = v2x * v2x + v2y * v2y + v2z * v2z;\n\n      if (dotV2V2 == 0.0) {\n          return new Vector3D(0, 0, 0);\n      }\n\n      double rho = dotV1V2 / dotV2V2;\n\n      // Compute v3 = v1 - rho * v2\n      double v3x = v1x - rho * v2x;\n      double v3y = v1y - rho * v2y;\n      double v3z = v1z - rho * v2z;\n\n      // Compute cross product of v3 and v2\n      double crossX = v3y * v2z - v3z * v2y;\n      double crossY = v3z * v2x - v3x * v2z;\n      double crossZ = v3x * v2y - v3y * v2x;\n\n      // Rescale back the result\n      double rescale = Math.scalb(1.0, 2 * exponent);\n      return new Vector3D(crossX * rescale, crossY * rescale, crossZ * rescale);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}