{
    "generation": "  /** Compute the cross-product of two vectors.\n   * @param v1 first vector\n   * @param v2 second vector\n   * @return the cross product v1 ^ v2 as a new Vector\n   */\n  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      final double ax = v1.x;\n      final double ay = v1.y;\n      final double az = v1.z;\n      final double bx = v2.x;\n      final double by = v2.y;\n      final double bz = v2.z;\n\n      double v1DotV2 = ax * bx + ay * by + az * bz;\n      double v2DotV2 = bx * bx + by * by + bz * bz;\n\n      double rho;\n      if (v2DotV2 < 1.0e-20) {\n          // v2 is a zero vector, cross product will be zero\n          return new Vector3D(0, 0, 0);\n      } else {\n          rho = v1DotV2 / v2DotV2;\n      }\n\n      // compute v3 = v1 - rho * v2\n      final double v3x = ax - rho * bx;\n      final double v3y = ay - rho * by;\n      final double v3z = az - rho * bz;\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(v3y * bz - v3z * by, v3z * bx - v3x * bz, v3x * by - v3y * bx);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}