{
    "generation": "/** Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\npublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    double x1 = v1.x;\n    double y1 = v1.y;\n    double z1 = v1.z;\n    double x2 = v2.x;\n    double y2 = v2.y;\n    double z2 = v2.z;\n\n    // Use Kahan's preconditioning to reduce cancellation errors\n    double sx1 = x1 + x2;\n    double sy1 = y1 + y2;\n    double sz1 = z1 + z2;\n    double sx2 = sx1 - x1;\n    double sy2 = sy1 - y1;\n    double sz2 = sz1 - z1;\n    sx2 -= x2;\n    sy2 -= y2;\n    sz2 -= z2;\n    double mx1 = x1 - sx2;\n    double my1 = y1 - sy2;\n    double mz1 = z1 - sz2;\n    double mx2 = x2 + sx2;\n    double my2 = y2 + sy2;\n    double mz2 = z2 + sz2;\n\n    // Compute cross product terms with preconditioned vectors\n    double px = my1 * mz2 - mz1 * my2;\n    double py = mz1 * mx2 - mx1 * mz2;\n    double pz = mx1 * my2 - my1 * mx2;\n\n    // Add back the remainder terms\n    double rx = sy2 * sz2 - sz2 * sy2; // should be zero (just for symmetry)\n    double ry = sz2 * sx2 - sx2 * sz2; // should be zero (just for symmetry)\n    double rz = sx2 * sy2 - sy2 * sx2; // should be zero (just for symmetry)\n\n    double tx = mx1 * sy2 - my1 * sx2;\n    double ty = my1 * sx2 - mx1 * sy2;\n    double tz = 0; // not used\n\n    return new Vector3D(px + (rx + tx),\n                        py + (ry + ty),\n                        pz + rz);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}