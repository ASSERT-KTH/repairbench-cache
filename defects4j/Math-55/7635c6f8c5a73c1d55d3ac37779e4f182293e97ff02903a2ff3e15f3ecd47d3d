{
    "generation": "/** Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\npublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    double v1v2 = v1.dotProduct(v2);\n    double v2v2 = v2.dotProduct(v2);\n    double rho;\n\n    if (v2v2 < 1.0e-20) {\n        // v2 is a zero vector, cross product will be zero\n        return Vector3D.ZERO;\n    } else {\n        rho = v1v2 / v2v2;\n    }\n\n    // compute v3 = v1 - rho * v2\n    Vector3D v3 = new Vector3D(v1.x - rho * v2.x,\n                               v1.y - rho * v2.y,\n                               v1.z - rho * v2.z);\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3.y * v2.z - v3.z * v2.y,\n                        v3.z * v2.x - v3.x * v2.z,\n                        v3.x * v2.y - v3.y * v2.x);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}