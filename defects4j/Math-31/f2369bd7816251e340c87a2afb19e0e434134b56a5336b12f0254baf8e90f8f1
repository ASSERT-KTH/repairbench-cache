{
    "generation": "    /**\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     *\n     * <p>\n     * The implementation of this method is based on the modified Lentz algorithm as described\n     * on page 18 ff. in:\n     * <ul>\n     * <li>\n     *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n     *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n     * </li>\n     * </ul>\n     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n     * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n     * </p>\n     *\n     * @param x the evaluation point.\n     * @param epsilon maximum error allowed.\n     * @param maxIterations maximum number of convergents\n     * @return the value of the continued fraction evaluated at x.\n     * @throws ConvergenceException if the algorithm fails to converge.\n     */\n    public double evaluate(double x, double epsilon, int maxIterations) {\n        // Implementation of the modified Lentz algorithm for continued fractions:\n        // F = b_0 + a_1/(b_1 + a_2/(b_2 + ...))\n        //\n        // References:\n        // 1. I. J. Thompson, A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n        //    (Pages 18-19 describes the Lentz algorithm)\n        // 2. Numerical Recipes in C, 2nd Ed., Section 5.2 \"Evaluation of Continued Fractions by Lentz's Method\".\n\n        final double small = 1e-50; // Threshold for treating values as numerically zero.\n\n        // Initialisation for n=0\n        // H_0 = b_0\n        // C_0 = b_0\n        // D_0 = 0\n\n        // hN: Current value of the continued fraction (H_n in Lentz)\n        // cN: C_n term in Lentz algorithm (b_n + a_n / C_{n-1})\n        // dN: D_n term in Lentz algorithm (1 / (b_n + a_n * D_{n-1}))\n\n        double hN = getA(0, x); // This corresponds to b_0 (or a_0 depending on notation, but used as first term)\n        double cN = hN;         // C_0 is initialized to b_0\n        double dN = 0.0;        // D_0 is initialized to 0\n\n        // Handle the case where the initial term (b_0) is numerically zero to prevent division by zero or NaN issues.\n        if (Precision.equals(hN, 0.0, small)) {\n            hN = small;\n        }\n        if (Precision.equals(cN, 0.0, small)) {\n            cN = small;\n        }\n\n        // Loop for n = 1, 2, ...\n        for (int n = 1; n < maxIterations; ++n) {\n            final double a = getA(n, x); // a_n\n            final double b = getB(n, x); // b_n\n\n            // Calculate new D_n term: D_n = 1 / (b_n + a_n * D_{n-1})\n            // We use 'dN' to store D_{n-1} from the previous iteration.\n            double dNm1 = dN; // Store D_{n-1}\n            dN = b + a * dNm1; // Calculate (b_n + a_n * D_{n-1})\n\n            // If dN is numerically zero, replace it with 'small' to avoid division by zero.\n            if (Precision.equals(dN, 0.0, small)) {\n                dN = small;\n            }\n            dN = 1.0 / dN; // Calculate 1 / (b_n + a_n * D_{n-1}) -> This is the new D_n\n\n            // Calculate new C_n term: C_n = b_n + a_n / C_{n-1}\n            // We use 'cN' to store C_{n-1} from the previous iteration.\n            double cNm1 = cN; // Store C_{n-1}\n            cN = b + a / cNm1; // Calculate (b_n + a_n / C_{n-1})\n\n            // If cN is numerically zero, replace it with 'small' to avoid issues in subsequent calculations.\n            if (Precision.equals(cN, 0.0, small)) {\n                cN = small;\n            }\n\n            // Calculate delta_n = C_n * D_n. This ratio represents the contribution of the n-th term.\n            final double delta = cN * dN;\n\n            // Update the continued fraction value: H_n = H_{n-1} * delta_n\n            hN *= delta;\n\n            // Check for divergence (infinite or NaN values).\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n            }\n\n            // Check for convergence: if |delta_n - 1| is less than epsilon, the fraction has converged.\n            // This means H_n is very close to H_{n-1}.\n            if (FastMath.abs(delta - 1.0) < epsilon) {\n                return hN; // Converged\n            }\n        }\n\n        // If the loop finishes without converging within maxIterations, throw an exception.\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                            maxIterations, x);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}