{
    "generation": "    /**\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     *\n     * <p>\n     * The implementation of this method is based on the modified Lentz algorithm as described\n     * on page 18 ff. in:\n     * <ul>\n     * <li>\n     *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n     *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n     * </li>\n     * </ul>\n     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n     * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n     * </p>\n     *\n     * @param x the evaluation point.\n     * @param epsilon maximum error allowed.\n     * @param maxIterations maximum number of convergents\n     * @return the value of the continued fraction evaluated at x.\n     * @throws ConvergenceException if the algorithm fails to converge.\n     */\n    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50; // Use small to avoid division by zero\n        double hPrev = getA(0, x);\n\n        // use the value of small as epsilon criteria for zero checks\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        // C_0 and D_0 are the initial terms for the modified Lentz algorithm\n        // C_n = b_n + a_n / C_{n-1}\n        // D_n = 1 / (b_n + a_n * D_{n-1})\n        // f_n = f_{n-1} * C_n * D_n\n        double cN = hPrev; // C_0\n        double dN = 0.0;   // D_0, will be 1/D_0 on first iteration\n\n        int n = 1; // current iteration\n\n        while (n < maxIterations) {\n            final double a = getA(n, x);\n            final double b = getB(n, x);\n\n            // Calculate D_n\n            dN = b + a * dN;\n            if (Precision.equals(dN, 0.0, small)) {\n                dN = small;\n            }\n            dN = 1.0 / dN;\n\n            // Calculate C_n\n            cN = b + a / cN;\n            if (Precision.equals(cN, 0.0, small)) {\n                cN = small;\n            }\n\n            // Calculate delta_n = C_n * D_n\n            final double deltaN = cN * dN;\n\n            // Update result: f_n = f_{n-1} * delta_n\n            hPrev = hPrev * deltaN;\n\n            // Check for divergence\n            if (Double.isInfinite(hPrev)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                               x);\n            }\n            if (Double.isNaN(hPrev)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                               x);\n            }\n\n            // Check for convergence\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            }\n\n            n++;\n        }\n\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        return hPrev;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}