{
    "generation": "/**\n * <p>\n * Evaluates the continued fraction at the value x.\n * </p>\n *\n * <p>\n * The implementation of this method is based on the modified Lentz algorithm as described\n * on page 18 ff. in:\n * <ul>\n * <li>\n *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n * </li>\n * </ul>\n * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n * </p>\n *\n * @param x the evaluation point.\n * @param epsilon maximum error allowed.\n * @param maxIterations maximum number of convergents\n * @return the value of the continued fraction evaluated at x.\n * @throws ConvergenceException if the algorithm fails to converge.\n */\npublic double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n    double p0 = 1.0;\n    double q1 = 1.0;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n        \n        // Try scaling if cN or q2 becomes infinite\n        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            final double maxValue = Double.MAX_VALUE / Math.max(1.0, Math.max(Math.abs(a), Math.abs(b)));\n            if (Math.abs(hPrev) > maxValue || Math.abs(p0) > maxValue || \n                Math.abs(q1) > maxValue || Math.abs(dPrev) > maxValue) {\n                double scaleFactor = Math.max(Math.abs(hPrev), Math.max(Math.abs(p0), \n                                     Math.max(Math.abs(q1), Math.abs(dPrev))));\n                \n                // Scale down all values\n                hPrev /= scaleFactor;\n                p0 /= scaleFactor;\n                q1 /= scaleFactor;\n                dPrev /= scaleFactor;\n                \n                // Try computation again with scaled values\n                cN = a * hPrev + b * p0;\n                q2 = a * q1 + b * dPrev;\n            }\n            \n            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n        }\n\n        // Normalize fraction when denominators are 0\n        if (q2 == 0.0) {\n            q2 = small;\n        }\n        \n        final double deltaN = cN / q2 / cPrev;\n        hN = cPrev * deltaN;\n\n        if (Double.isInfinite(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n        if (Double.isNaN(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        dPrev = q1;\n        cPrev = cN / q2;\n        p0 = hPrev;\n        hPrev = cN;\n        q1 = q2;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                            maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}