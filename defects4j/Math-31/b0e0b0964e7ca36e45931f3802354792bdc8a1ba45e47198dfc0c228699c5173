{
    "generation": "    /**\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     *\n     * <p>\n     * The implementation of this method is based on the modified Lentz algorithm as described\n     * on page 18 ff. in:\n     * <ul>\n     * <li>\n     *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n     *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n     * </li>\n     * </ul>\n     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n     * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n     * </p>\n     *\n     * @param x the evaluation point.\n     * @param epsilon maximum error allowed.\n     * @param maxIterations maximum number of convergents\n     * @return the value of the continued fraction evaluated at x.\n     * @throws ConvergenceException if the algorithm fails to converge.\n     */\n    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        double hPrev = getA(0, x);\n\n        // use the value of small as epsilon criteria for zero checks\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        int n = 1;\n        double dPrev = 0.0;\n        double p0 = 1.0;\n        double q1 = 1.0;\n        double cPrev = hPrev;\n        double hN = hPrev;\n\n        while (n < maxIterations) {\n            final double a = getA(n, x); // a_n term (numerator)\n            final double b = getB(n, x); // b_n term (denominator)\n\n            // The recurrence relations for the numerators P_n and denominators Q_n\n            // for a continued fraction b0 + a1/(b1 + a2/(b2 + ...)) are:\n            // P_n = b_n * P_{n-1} + a_n * P_{n-2}\n            // Q_n = b_n * Q_{n-1} + a_n * Q_{n-2}\n            // In the code:\n            // hPrev is P_{n-1}\n            // p0 is P_{n-2}\n            // q1 is Q_{n-1}\n            // dPrev is Q_{n-2}\n            // The original code had 'a * hPrev + b * p0', which swaps the roles of 'a' and 'b' (a_n and b_n).\n            // This is a direct correction based on the MathWorld definition.\n            double cN = b * hPrev + a * p0; // Should be P_n\n            double q2 = b * q1 + a * dPrev; // Should be Q_n\n\n            // Scaling logic to prevent overflow/underflow in intermediate terms.\n            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                double scaleFactor = 1d;\n                double lastScaleFactor = 1d;\n                final int maxPower = 5;\n                // Use absolute values for scale to ensure it's positive and grows correctly.\n                final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n\n                if (scale <= 0) { // This implies a=0 and b=0. If cN or q2 are infinite, it's a divergence.\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n                for (int i = 0; i < maxPower; i++) {\n                    lastScaleFactor = scaleFactor;\n                    scaleFactor *= scale;\n                    // Recalculate cN and q2 using scaled previous terms.\n                    // The scaling logic should account for which term (a or b) is dominant\n                    // based on their absolute values.\n                    if (FastMath.abs(a) >= FastMath.abs(b)) { // If 'a' is dominant or equal\n                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n                    } else { // 'b' is strictly dominant (and b != 0 is already implicitly handled by scale > 0 check)\n                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n                    }\n                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                        break;\n                    }\n                }\n            }\n\n            // In Lentz algorithm, denominators (like q2 here for Q_n) should not be zero.\n            // If they are, set to a small value to avoid division by zero.\n            if (Precision.equals(q2, 0.0, small)) {\n                q2 = small;\n            }\n\n            final double deltaN = cN / q2 / cPrev;\n            hN = cPrev * deltaN;\n\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                               x);\n            }\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                               x);\n            }\n\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            }\n\n            // Update terms for next iteration:\n            // P_{n-2} becomes P_{n-1} (p0 becomes hPrev)\n            // P_{n-1} becomes P_n (hPrev becomes cN)\n            // Q_{n-2} becomes Q_{n-1} (dPrev becomes q1)\n            // Q_{n-1} becomes Q_n (q1 becomes q2)\n            dPrev = q1;\n            cPrev = cN / q2; // cPrev stores the ratio P_n/Q_n for the next deltaN calculation.\n            p0 = hPrev;\n            hPrev = cN;\n            q1 = q2;\n            n++;\n        }\n\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        return hN;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}