{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    // P(-1) = 1, P(0) = getA(0, x); Q(-1) = 0, Q(0) = 1.\n    int n = 1;\n    double dPrev = 0.0;  // Q(-1)\n    double p0 = 1.0;     // P(-1)\n    double q1 = 1.0;     // Q(0)\n    double cPrev = hPrev;  // f\u2080 = P(0)/Q(0)\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        // The recurrence should build\n        //    P\u2099 = b*P\u2099\u208b\u2081 + a*P\u2099\u208b\u2082   and   Q\u2099 = b*Q\u2099\u208b\u2081 + a*Q\u2099\u208b\u2082\n        // In the buggy code the roles of a and b were inadvertently reversed.\n        double cN = b * hPrev + a * p0;\n        double q2 = b * q1 + a * dPrev;\n\n        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            double scaleFactor = 1d;\n            double lastScaleFactor = 1d;\n            final int maxPower = 5;\n            final double scale = FastMath.max(a, b);\n            if (scale <= 0) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            for (int i = 0; i < maxPower; i++) {\n                lastScaleFactor = scaleFactor;\n                scaleFactor *= scale;\n                // When scaling, use the same order of coefficients:\n                if (b != 0.0 && b > a) {\n                    cN = hPrev / lastScaleFactor + (a / scaleFactor * p0);\n                    q2 = q1 / lastScaleFactor + (a / scaleFactor * dPrev);\n                } else if (a != 0.0) {\n                    cN = (b / scaleFactor * hPrev) + p0 / lastScaleFactor;\n                    q2 = (b / scaleFactor * q1) + dPrev / lastScaleFactor;\n                }\n                if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                    break;\n                }\n            }\n        }\n\n        final double deltaN = (cN / q2) / cPrev;\n        hN = cPrev * deltaN;\n\n        if (Double.isInfinite(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n        if (Double.isNaN(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        // Update for the next iteration:\n        dPrev = q1;\n        cPrev = cN / q2;\n        p0 = hPrev;\n        hPrev = cN;\n        q1 = q2;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}