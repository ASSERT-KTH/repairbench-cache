{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n\n        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            // Improved scaling logic\n            double scaleFactor = 1.0;\n            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n            if (scale <= 0) {  // Can't scale\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            final int maxPower = 50;  // Increased from 5 to 50 for better handling of large values\n            boolean scaled = false;\n\n            for (int i = 0; i < maxPower; i++) {\n                scaleFactor *= scale;\n                if (FastMath.abs(a) >= FastMath.abs(b)) {\n                    cN = hPrev / scaleFactor + (b / (scaleFactor * scaleFactor) * p0);\n                    q2 = q1 / scaleFactor + (b / (scaleFactor * scaleFactor) * dPrev);\n                } else {\n                    cN = (a / (scaleFactor * scaleFactor) * hPrev) + p0 / scaleFactor;\n                    q2 = (a / (scaleFactor * scaleFactor) * q1) + dPrev / scaleFactor;\n                }\n                if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                    scaled = true;\n                    break;\n                }\n            }\n            if (!scaled) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n        }\n\n        final double deltaN;\n        if (FastMath.abs(cN) < Double.MIN_VALUE || FastMath.abs(q2) < Double.MIN_VALUE) {\n            // Handle near-zero cases to prevent division issues\n            deltaN = 1.0;\n        } else {\n            deltaN = cPrev / (cN / q2);\n        }\n        hN = hPrev * deltaN;\n\n        if (Double.isInfinite(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                           x);\n        }\n        if (Double.isNaN(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                           x);\n        }\n\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        dPrev = q1;\n        cPrev = cN / q2;\n        p0 = hPrev;\n        hPrev = cN;\n        q1 = q2;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                            maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}