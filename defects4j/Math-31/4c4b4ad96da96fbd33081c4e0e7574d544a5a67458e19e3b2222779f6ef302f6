{
    "generation": "    /**\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     *\n     * <p>\n     * The implementation of this method is based on the modified Lentz algorithm as described\n     * on page 18 ff. in:\n     * <ul>\n     * <li>\n     *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n     *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n     * </li>\n     * </ul>\n     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n     * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n     * </p>\n     *\n     * @param x the evaluation point.\n     * @param epsilon maximum error allowed.\n     * @param maxIterations maximum number of convergents\n     * @return the value of the continued fraction evaluated at x.\n     * @throws ConvergenceException if the algorithm fails to converge.\n     */\n    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        double hPrev = getA(0, x);\n\n        // use the value of small as epsilon criteria for zero checks\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        int n = 1;\n        double dPrev = 0.0;\n        double p0 = 1.0;\n        double q1 = 1.0;\n        double cPrev = hPrev;\n        double hN = hPrev;\n\n        while (n < maxIterations) {\n            final double a = getA(n, x); // a_n (numerator)\n            final double b = getB(n, x); // b_n (denominator)\n\n            // The recurrence relations for the convergents P_n and Q_n are:\n            // P_n = b_n * P_{n-1} + a_n * P_{n-2}\n            // Q_n = b_n * Q_{n-1} + a_n * Q_{n-2}\n            //\n            // In this code:\n            // hPrev is P_{n-1}\n            // p0 is P_{n-2}\n            // q1 is Q_{n-1}\n            // dPrev is Q_{n-2}\n            //\n            // The original code had 'a' and 'b' swapped in the calculation below,\n            // which was a regression introduced in MATH-899.\n            double cN = b * hPrev + a * p0; // Corrected P_n\n            double q2 = b * q1 + a * dPrev; // Corrected Q_n\n\n            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                // Scale the terms to avoid overflow.\n                double scaleFactor = 1d;\n                final int maxPower = 5;\n                // Original bug: used FastMath.max(a,b) which can be non-positive.\n                // Using absolute values ensures positive scaling.\n                final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n\n                // Original bug: scale <= 0 check. scale is non-negative due to FastMath.abs.\n                // If scale is 0.0, both a and b are 0.0, which means P_n and Q_n should be 0.\n                if (scale == 0.0) {\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n\n                for (int i = 0; i < maxPower; i++) {\n                    // Accumulate scaling factor.\n                    scaleFactor *= scale;\n                    // Original bug: Complex conditional logic (if a != 0.0 && a > b)\n                    // and (else if b != 0) which was incorrect for the recurrence.\n                    // Corrected: apply scaling uniformly if either a or b is non-zero.\n                    if (a != 0.0 || b != 0.0) {\n                        // Recompute cN and q2 with scaled coefficients a and b.\n                        // hPrev, p0, q1, dPrev are considered previous unscaled values.\n                        cN = (b / scaleFactor * hPrev) + (a / scaleFactor * p0);\n                        q2 = (b / scaleFactor * q1) + (a / scaleFactor * dPrev);\n                    } else {\n                        // If both a and b are 0.0, then P_n and Q_n should be 0.\n                        // (0 * P_{n-1} + 0 * P_{n-2} = 0)\n                        cN = 0.0;\n                        q2 = 0.0;\n                    }\n\n                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                        break;\n                    }\n                }\n            }\n\n            // Check for zero in cN or q2.\n            // If cN or q2 are very small, use 'small' as a threshold to avoid division by zero.\n            if (Precision.equals(cN, 0.0, small)) {\n                cN = small;\n            }\n            if (Precision.equals(q2, 0.0, small)) {\n                q2 = small;\n            }\n\n            // deltaN is (P_n/Q_n) / (P_{n-1}/Q_{n-1})\n            // cPrev holds P_{n-1}/Q_{n-1} from previous iteration\n            final double deltaN = (cN / q2) / cPrev;\n            hN = cPrev * deltaN; // This simplifies to hN = cN / q2 (the current convergent)\n\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                               x);\n            }\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                               x);\n            }\n\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            }\n\n            // Update variables for the next iteration:\n            // Current P_{n-1} becomes P_{n-2} for next iteration\n            p0 = hPrev;\n            // Current P_n becomes P_{n-1} for next iteration\n            hPrev = cN;\n            // Current Q_{n-1} becomes Q_{n-2} for next iteration\n            dPrev = q1;\n            // Current Q_n becomes Q_{n-1} for next iteration\n            q1 = q2;\n            // cPrev holds the current convergent (P_n/Q_n) for the next deltaN calculation.\n            cPrev = cN / q2;\n\n            n++;\n        }\n\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        return hN;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}