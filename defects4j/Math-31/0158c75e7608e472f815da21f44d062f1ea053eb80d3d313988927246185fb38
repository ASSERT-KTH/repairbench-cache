{
    "generation": "/**\n * <p>\n * Evaluates the continued fraction at the value x.\n * </p>\n *\n * <p>\n * The implementation of this method is based on the modified Lentz algorithm as described\n * on page 18 ff. in:\n * <ul>\n * <li>\n *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n * </li>\n * </ul>\n * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n * </p>\n *\n * @param x the evaluation point.\n * @param epsilon maximum error allowed.\n * @param maxIterations maximum number of convergents\n * @return the value of the continued fraction evaluated at x.\n * @throws ConvergenceException if the algorithm fails to converge.\n */\npublic double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n    double Dprev = 0.0;\n    double Cprev = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double Dnow;\n        double Cnow;\n        if (FastMath.abs(b) < small) {\n            // Handle special case where b is zero to avoid division by zero\n            Dnow = 0;\n            Cnow = a * hPrev;\n        } else {\n            Dnow = a / b;\n            Cnow = (a * hPrev + b * Dprev) / (a + b * Dprev);\n        }\n\n        if (Double.isInfinite(Cnow) || Double.isNaN(Cnow)) {\n            double scaleFactor = 1d;\n            double lastScaleFactor = 1d;\n            final int maxPower = 5;\n            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n            if (scale <= 0) {  // Can't scale\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            for (int i = 0; i < maxPower; i++) {\n                lastScaleFactor = scaleFactor;\n                scaleFactor *= scale;\n                if (FastMath.abs(a) > FastMath.abs(b)) {\n                    Cnow = (hPrev / lastScaleFactor) + ((b / scaleFactor) * Dprev);\n                    Cnow /= (1 / lastScaleFactor) + ((b / scaleFactor) * 1); // Approximate denominator scaling\n                } else if (FastMath.abs(b) > 0) {\n                    Cnow = ((a / scaleFactor) * hPrev) + Dprev / lastScaleFactor;\n                    Cnow /= ((a / scaleFactor) * 1) + (1 / lastScaleFactor); // Approximate denominator scaling\n                }\n                if (!(Double.isInfinite(Cnow) || Double.isNaN(Cnow))) {\n                    break;\n                }\n            }\n        }\n\n        // Store previous values for next iteration\n        Dprev = Cnow;\n\n        // Update convergence check variables\n        hN = hPrev * Cnow;\n        double delta = FastMath.abs((hN - cPrev) / hN);\n\n        // Check convergence\n        if (delta < epsilon) {\n            return hN;\n        }\n\n        cPrev = hN;\n        hPrev = Cnow;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                            maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}