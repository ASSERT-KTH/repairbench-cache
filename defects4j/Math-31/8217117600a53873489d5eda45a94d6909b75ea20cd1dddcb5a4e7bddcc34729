{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    double hPrev = getA(0, x);\n    double small = 1e-50;\n\n    if (hPrev == 0.0) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double cPrev = hPrev;\n    double cN, deltaN, hN;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double q2;\n\n    while (n < maxIterations) {\n        double a = getA(n, x);\n        double b = getB(n, x);\n\n        q2 = a * q1 + b * dPrev;\n        cN = a * hPrev + b * p0;\n\n        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            double scale = a > b ? a : b;\n            cN = hPrev / (scale * scale) + (b / (scale * scale) * p0);\n            q2 = q1 / scale + (b / scale * dPrev);\n        }\n\n        deltaN = cN / q2 / cPrev;\n        hN = cPrev * deltaN;\n\n        if (Double.isInfinite(hN) || Double.isNaN(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        dPrev = q1;\n        cPrev = cN / q2;\n        p0 = hPrev;\n        hPrev = cN;\n        q1 = q2;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                           maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}