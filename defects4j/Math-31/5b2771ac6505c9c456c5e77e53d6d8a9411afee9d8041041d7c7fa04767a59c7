{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a + b * p0;\n        double q2 = q1;\n        double dN = 0.0;\n\n        // Modified Lentz algorithm with better error handling\n        boolean scaled = false;\n        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            double scaleFactor = 1d;\n            final int maxPower = 5;\n            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n            if (scale <= 0) {  // Can't scale\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            for (int i = 0; i < maxPower; i++) {\n                scaleFactor *= scale;\n                if (a != 0.0 && FastMath.abs(a) > FastMath.abs(b)) {\n                    cN = (a / scaleFactor) + (b / scaleFactor * p0);\n                    q2 = (q1 / scaleFactor) + (1.0 / scaleFactor * dPrev);\n                } else if (b != 0) {\n                    cN = (a / scaleFactor) + (b / scaleFactor * p0);\n                    q2 = (a / scaleFactor * q1) + (b / scaleFactor * dPrev);\n                }\n                if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                    scaled = true;\n                    break;\n                }\n            }\n            if (!scaled) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n        }\n\n        // Compute convergents using modified Lentz's algorithm\n        double dN_prev;\n        double cN_prev = cN;\n        double q2_prev = q2;\n\n        do {\n            dN_prev = dN;\n            cN_prev = cN;\n            q2_prev = q2;\n\n            dN = q1 / q2;\n            dPrev = dPrev * dN + 1.0;\n            cN = cN_prev / q2_prev;\n            hN = hPrev * cN;\n\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n            }\n\n            // Check for convergence\n            if (FastMath.abs(dN * cN - 1.0) < epsilon) {\n                break;\n            }\n\n            // Update for next iteration\n            q1 = q2;\n            p0 = hPrev;\n            cPrev = cN;\n            hPrev = hN;\n            n++;\n\n            if (n >= maxIterations) {\n                throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                    maxIterations, x);\n            }\n\n            final double newA = getA(n, x);\n            final double newB = getB(n, x);\n\n            cN = newA + newB * p0;\n            q2 = q1;\n            dN = 0.0;\n\n            scaled = false;\n            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                double scaleFactor = 1d;\n                final int maxPower = 5;\n                final double scale = FastMath.max(FastMath.abs(newA), FastMath.abs(newB));\n                if (scale <= 0) {\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n                for (int i = 0; i < maxPower; i++) {\n                    scaleFactor *= scale;\n                    cN = (newA / scaleFactor) + (newB / scaleFactor * p0);\n                    q2 = q1 / scaleFactor + (1.0 / scaleFactor * dPrev);\n                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                        scaled = true;\n                        break;\n                    }\n                }\n                if (!scaled) {\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n            }\n        } while (true);\n\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        return hN;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}