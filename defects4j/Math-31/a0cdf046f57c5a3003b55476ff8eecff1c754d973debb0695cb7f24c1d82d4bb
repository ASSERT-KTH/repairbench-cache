{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double tiny = 1e-50;\n    // Initialize with the 0th term of the continued fraction.\n    double f = getA(0, x);\n    if (FastMath.abs(f) < tiny) {\n        f = tiny;\n    }\n    // Set up the recurrence variables.\n    double C = f;\n    double D = 0.0;\n    \n    // Iterate using the modified Lentz algorithm.\n    for (int n = 1; n <= maxIterations; n++) {\n        double a = getA(n, x);\n        double b = getB(n, x);\n        \n        // Update D using recurrence: D = b + a * D.\n        D = b + a * D;\n        if (FastMath.abs(D) < tiny) {\n            D = tiny;\n        }\n        D = 1.0 / D;\n        \n        // Update C similarly: C = b + a / C.\n        C = b + a / C;\n        if (FastMath.abs(C) < tiny) {\n            C = tiny;\n        }\n        \n        // Multiply the factor delta.\n        double delta = C * D;\n        f *= delta;\n        \n        if (Double.isInfinite(f)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n        if (Double.isNaN(f)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n        \n        // Check for convergence.\n        if (FastMath.abs(delta - 1.0) < epsilon) {\n            return f;\n        }\n    }\n    \n    throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}