{
    "generation": "    /**\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     *\n     * <p>\n     * The implementation of this method is based on the modified Lentz algorithm as described\n     * on page 18 ff. in:\n     * <ul>\n     * <li>\n     *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n     *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n     * </li>\n     * </ul>\n     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n     * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n     * </p>\n     *\n     * @param x the evaluation point.\n     * @param epsilon maximum error allowed.\n     * @param maxIterations maximum number of convergents\n     * @return the value of the continued fraction evaluated at x.\n     * @throws ConvergenceException if the algorithm fails to converge.\n     */\n    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50; // A very small number to prevent division by zero\n\n        // Initialize c_0 (C_0) from the Lentz algorithm, which is a_0 (getA(0, x))\n        double cPrev = getA(0, x);\n\n        // Use the value of small as epsilon criteria for zero checks\n        // If c_0 is zero, set it to small to avoid division by zero in later steps.\n        if (Precision.equals(cPrev, 0.0, small)) {\n            cPrev = small;\n        }\n\n        // Initialize d_0 (D_0) from the Lentz algorithm, which is 0.0\n        double dPrev = 0.0;\n\n        // hN is the current convergent value F_n. Initialize with F_0 = C_0.\n        double hN = cPrev;\n\n        int n = 1;\n        while (n < maxIterations) {\n            final double a = getA(n, x); // a_n\n            final double b = getB(n, x); // b_n\n\n            // Calculate d_n = 1 / (b_n + a_n * d_{n-1})\n            // First, calculate the denominator: b_n + a_n * d_{n-1}\n            double dN = b + a * dPrev;\n            // Prevent division by zero: if dN is zero, set it to small\n            if (Precision.equals(dN, 0.0, small)) {\n                dN = small;\n            }\n            // Now, take the reciprocal to get d_n\n            dN = 1.0 / dN;\n\n            // Calculate c_n = b_n + a_n / c_{n-1}\n            double cN = b + a / cPrev;\n            // Prevent division by zero: if cN is zero, set it to small\n            if (Precision.equals(cN, 0.0, small)) {\n                cN = small;\n            }\n\n            // Calculate delta_n = c_n * d_n\n            final double deltaN = cN * dN;\n\n            // Update the convergent F_n = F_{n-1} * delta_n\n            hN *= deltaN;\n\n            // Check for divergence (infinite or NaN results)\n            if (Double.isInfinite(hN) || Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_DIVERGENCE, x);\n            }\n\n            // Check for convergence based on the change in delta_n\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            }\n\n            // Prepare for the next iteration: update d_{n-1} and c_{n-1}\n            dPrev = dN;\n            cPrev = cN;\n            n++;\n        }\n\n        // If maxIterations is reached without convergence, throw an exception\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        return hN;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}