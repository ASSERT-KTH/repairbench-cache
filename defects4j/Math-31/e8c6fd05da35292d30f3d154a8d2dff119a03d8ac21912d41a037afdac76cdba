{
    "generation": "    /**\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     *\n     * <p>\n     * The implementation of this method is based on the modified Lentz algorithm as described\n     * on page 18 ff. in:\n     * <ul>\n     * <li>\n     *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n     *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n     * </li>\n     * </ul>\n     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n     * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n     * The Lentz algorithm however uses notation f = b\u2080' + a\u2081'/(b\u2081' + a\u2082'/(b\u2082' + ...)).\n     * The implementation maps MathWorld \u2192 Lentz: b\u2080' = a\u2080, a_n' = b_n (for n\u22651), b_n' = a_n (for n\u22651).\n     * </p>\n     *\n     * @param x the evaluation point.\n     * @param epsilon maximum error allowed.\n     * @param maxIterations maximum number of convergents\n     * @return the value of the continued fraction evaluated at x.\n     * @throws ConvergenceException if the algorithm fails to converge or evaluates to infinity/NaN.\n     * @throws MaxCountExceededException if the maximum number of iterations is reached before convergence.\n     */\n    public double evaluate(double x, double epsilon, int maxIterations) throws ConvergenceException, MaxCountExceededException {\n        final double small = 1e-50;\n\n        // Initialize based on the modified Lentz algorithm (Thompson/Barnett notation)\n        // f = b\u2080' + a\u2081'/(b\u2081' + a\u2082'/(b\u2082' + ...))\n        // Mapping from MathWorld: b\u2080' = a\u2080, a_n' = b_n (for n\u22651), b_n' = a_n (for n\u22651)\n\n        // hPrev corresponds to f_{n-1} in NR/T&B, starts with f\u2080 = b\u2080' = a\u2080\n        double hPrev = getA(0, x);\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        // C_{n-1}, starts with C\u2080 = f\u2080\n        double cPrev = hPrev;\n        // D_{n-1}, starts with D\u2080 = 0 (using T&B D_n = 1 / (b_n' + a_n' D_{n-1}))\n        double dPrev = 0.0;\n        // Stores the current estimate f_n, starts with f\u2080\n        double fN = hPrev;\n\n        int n = 1;\n        // Use n <= maxIterations to allow exactly maxIterations iterations.\n        while (n <= maxIterations) {\n            final double a_n_mw = getA(n, x); // a_n from MathWorld notation\n            final double b_n_mw = getB(n, x); // b_n from MathWorld notation\n\n            // Map to Thompson/Barnett notation coefficients for iteration n\n            final double a_n_tb = b_n_mw; // a_n' = b_n\n            final double b_n_tb = a_n_mw; // b_n' = a_n\n\n            // Calculate D_n = b_n' + a_n' * D_{n-1} (before inversion)\n            double dN = b_n_tb + a_n_tb * dPrev;\n            if (Precision.equals(dN, 0.0, small)) {\n                // Avoid division by zero near zero.\n                dN = small;\n            }\n            // Calculate C_n = b_n' + a_n' / C_{n-1}\n            double cN = b_n_tb + a_n_tb / cPrev;\n             if (Precision.equals(cN, 0.0, small)) {\n                // Avoid division by zero near zero.\n                cN = small;\n            }\n\n            // Complete calculation of D_n by inversion\n            dN = 1.0 / dN;\n\n            // Calculate delta_n = C_n * D_n\n            final double deltaN = cN * dN;\n\n            // Calculate f_n = f_{n-1} * delta_n\n            fN = hPrev * deltaN;\n\n            // Check for divergence BEFORE checking convergence\n            // This prevents potential issues with checks like |1/0 - 1| < epsilon\n            if (Double.isInfinite(fN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            if (Double.isNaN(fN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n            }\n\n            // Check for convergence: |delta_n - 1| < epsilon\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            }\n\n            // Update variables for the next iteration (n+1)\n            // D_{n} becomes D_{n-1} for next iteration\n            dPrev = dN;\n            // C_{n} becomes C_{n-1} for next iteration\n            cPrev = cN;\n            // f_{n} becomes f_{n-1} for next iteration\n            hPrev = fN;\n            n++;\n        }\n\n        // Check if maximum iterations were exceeded\n        if (n > maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        return fN;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}