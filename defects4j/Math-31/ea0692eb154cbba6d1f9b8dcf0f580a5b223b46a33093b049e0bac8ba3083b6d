{
    "generation": "@Override\npublic double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    // Lentz\u2019s algorithm initialization\n    double f = getA(0, x);\n    if (Precision.equals(f, 0.0, small)) {\n        f = small;\n    }\n    double C = f;\n    double D = 0.0;\n    // iterate\n    for (int i = 1; i < maxIterations; i++) {\n        double a = getA(i, x);\n        double b = getB(i, x);\n        // update D\n        D = b + a * D;\n        if (Precision.equals(D, 0.0, small)) {\n            D = small;\n        }\n        // update C\n        C = b + a / C;\n        if (Precision.equals(C, 0.0, small)) {\n            C = small;\n        }\n        // form delta\n        D = 1.0 / D;\n        double delta = C * D;\n        f *= delta;\n        // test for overflow / NaN\n        if (Double.isInfinite(f)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n        if (Double.isNaN(f)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n        // convergence check\n        if (FastMath.abs(delta - 1.0) < epsilon) {\n            return f;\n        }\n    }\n    // failed to converge\n    throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                        maxIterations, x);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}