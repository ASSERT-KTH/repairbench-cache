{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    if (FastMath.abs(hPrev) < small) {\n        hPrev = small * FastMath.signum(hPrev);\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double dN = a + b * dPrev;\n        double cN = a + b * cPrev;\n\n        if (dN == 0.0) {\n            dN = small * FastMath.signum(dN);\n        }\n        if (cN == 0.0) {\n            cN = small * FastMath.signum(cN);\n        }\n\n        dN = 1.0 / dN;\n        double deltaN = cN * dN;\n        hN = hPrev * deltaN;\n\n        if (FastMath.abs(hN - hPrev) < epsilon * FastMath.abs(hPrev)) {\n            break;\n        }\n\n        dPrev = dN;\n        cPrev = cN;\n        hPrev = hN;\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                           maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}