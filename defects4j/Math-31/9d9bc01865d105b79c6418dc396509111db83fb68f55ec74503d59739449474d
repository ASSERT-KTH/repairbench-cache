{
    "generation": "@Override\npublic double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    // initial term f0 = a0\n    double f = getA(0, x);\n    if (Precision.equals(f, 0.0, small)) {\n        f = small;\n    }\n    // C and D correspond to the continued\u2010fraction denominators in Lentz's method\n    double C = f;\n    double D = 0.0;\n\n    for (int n = 1; n < maxIterations; n++) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n        // compute D_n = a + b * D_{n-1}\n        D = a + b * D;\n        if (Precision.equals(D, 0.0, small)) {\n            D = small;\n        }\n        // compute C_n = a + b / C_{n-1}\n        C = a + b / C;\n        if (Precision.equals(C, 0.0, small)) {\n            C = small;\n        }\n        // invert D_n\n        D = 1.0 / D;\n        // update approximation\n        final double delta = C * D;\n        f *= delta;\n        if (Double.isInfinite(f)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n        if (Double.isNaN(f)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n        // test convergence\n        if (FastMath.abs(delta - 1.0) < epsilon) {\n            return f;\n        }\n    }\n\n    // no convergence within the allowed iterations\n    throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                        maxIterations, x);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}