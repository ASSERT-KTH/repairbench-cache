{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    // f is the current approximation of the continued fraction value.\n    double f = getA(0, x);\n    if (FastMath.abs(f) < small) {\n        f = small;\n    }\n    // C and D are the recurrence variables in the modified Lentz algorithm.\n    double C = f;\n    double D = 0.0;\n    int n = 1;\n    while (n < maxIterations) {\n        double a = getA(n, x);\n        double b = getB(n, x);\n        // Update the denominator of the recurrence\n        D = b + a * D;\n        if (FastMath.abs(D) < small) {\n            D = small;\n        }\n        // Update the numerator of the recurrence\n        C = b + a / C;\n        if (FastMath.abs(C) < small) {\n            C = small;\n        }\n        D = 1.0 / D;\n        double delta = C * D;\n        f *= delta;\n        if (Double.isInfinite(f)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n        if (Double.isNaN(f)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n        if (FastMath.abs(delta - 1.0) < epsilon) {\n            break;\n        }\n        n++;\n    }\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n    return f;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}