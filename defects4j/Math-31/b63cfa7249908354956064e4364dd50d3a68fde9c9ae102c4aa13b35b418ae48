{
    "generation": "    /**\n     * <p>\n     * Evaluates the continued fraction at the value x.\n     * </p>\n     *\n     * <p>\n     * The implementation of this method is based on the modified Lentz algorithm as described\n     * on page 18 ff. in:\n     * <ul>\n     * <li>\n     *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n     *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n     * </li>\n     * </ul>\n     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n     * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n     * </p>\n     *\n     * @param x the evaluation point.\n     * @param epsilon maximum error allowed.\n     * @param maxIterations maximum number of convergents\n     * @return the value of the continued fraction evaluated at x.\n     * @throws ConvergenceException if the algorithm fails to converge.\n     */\n    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50; // a small number to prevent division by zero\n        \n        // Initialize the first convergent f_0, C_0, and D_0\n        double hPrev = getA(0, x); // Corresponds to f_0 or initial value depending on fraction form\n\n        // If the first term is zero, set it to small to avoid issues\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        // C_0 is initialized to f_0\n        double cPrev = hPrev;\n        // D_0 is initialized to 0\n        double dPrev = 0.0;\n\n        int n = 1; // Start iteration from n=1\n        double hN = hPrev; // The current value of the continued fraction\n\n        while (n < maxIterations) {\n            final double a = getA(n, x); // a_n term for current iteration\n            final double b = getB(n, x); // b_n term for current iteration\n\n            // Calculate D_n = b_n + a_n * D_{n-1}\n            // dPrev holds D_{n-1} from the previous iteration\n            double dN = b + a * dPrev;\n            // If D_n is zero, set it to small\n            if (Precision.equals(dN, 0.0, small)) {\n                dN = small;\n            }\n\n            // Calculate C_n = b_n + a_n / C_{n-1}\n            // cPrev holds C_{n-1} from the previous iteration\n            double cN = b + a / cPrev;\n            // If C_n is zero, set it to small\n            if (Precision.equals(cN, 0.0, small)) {\n                cN = small;\n            }\n\n            // Check for divergence due to infinite values\n            if (Double.isInfinite(dN) || Double.isInfinite(cN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n\n            // Calculate delta_n = C_n * (1 / D_n)\n            final double deltaN = cN / dN;\n\n            // Calculate f_n = f_{n-1} * delta_n\n            hN = hPrev * deltaN;\n\n            // Check for divergence due to infinite or NaN values in the result\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n            }\n\n            // Check for convergence: if |delta_n - 1| is less than epsilon\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break; // Converged\n            }\n\n            // Update variables for the next iteration:\n            // dPrev becomes 1/D_n\n            dPrev = 1.0 / dN;\n            // cPrev becomes C_n\n            cPrev = cN;\n            // hPrev becomes f_n\n            hPrev = hN;\n\n            n++;\n        }\n\n        // If maxIterations is reached without convergence, throw an exception\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        return hN;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}