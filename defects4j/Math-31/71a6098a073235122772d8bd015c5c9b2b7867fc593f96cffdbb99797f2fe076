{
    "generation": "    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        double hPrev = getA(0, x);\n\n        // use the value of small as epsilon criteria for zero checks\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        int n = 1;\n        double dPrev = 0.0;\n        double cPrev = hPrev;\n        double hN = hPrev;\n\n        double p0 = 1.0;\n        double q1 = 1.0;\n        double p1 = hPrev;\n        double q0 = 0.0;\n\n        while (n < maxIterations) {\n            final double a = getA(n, x);\n            final double b = getB(n, x);\n\n            double p2 = a * p1 + b * p0;\n            double q2 = a * q1 + b * q0;\n\n            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {\n                // Handle overflow by scaling down the values.\n                final double scaleFactor = 1e50; // Arbitrary scale factor.\n                p2 = (a * p1 + b * p0) / scaleFactor;\n                q2 = (a * q1 + b * q0) / scaleFactor;\n                p1 /= scaleFactor;\n                p0 /= scaleFactor;\n                q1 /= scaleFactor;\n                q0 /= scaleFactor;\n            }\n\n            final double deltaN = (p2 / q2) / (p1 / q1);\n            hN = hPrev * deltaN;\n\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                               x);\n            }\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                               x);\n            }\n\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            }\n\n            // Update variables for next iteration.\n            hPrev = p1 / q1;\n            cPrev = hPrev;\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            n++;\n        }\n\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        return hN;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}