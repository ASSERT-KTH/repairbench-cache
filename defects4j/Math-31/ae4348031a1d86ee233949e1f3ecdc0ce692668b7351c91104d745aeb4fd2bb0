{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    // Initialize recurrence with p[-1] = 1, q[-1] = 0 and p[0] = getA(0, x), q[0] = 1.\n    double hPrev = getA(0, x);\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n    int n = 1;\n    double dPrev = 0.0;  // q[-1]\n    double p0 = 1.0;     // p[-1]\n    double q1 = 1.0;     // q[0]\n    // cPrev holds the previous convergent value f_{n-1} = p[n-1] / q[n-1]\n    double cPrev = hPrev; // f0 = p(0)/q(0)\n    double hN = hPrev;    // the current convergent value\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        // Compute the recurrence: p[n] = a * p[n-1] + b * p[n-2]\n        // and similarly q[n] = a * q[n-1] + b * q[n-2].\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n\n        // Avoid underflow in cN and q2.\n        if (FastMath.abs(cN) < small) {\n            cN = small;\n        }\n        if (FastMath.abs(q2) < small) {\n            q2 = small;\n        }\n\n        // If cN or q2 overflow to infinity, attempt to rescale the recurrence.\n        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            final int maxPower = 5;\n            double scaleFactor = 1.0;\n            // Use absolute values for scaling.\n            final double scale = FastMath.max(FastMath.abs(a), FastMath.abs(b));\n            if (scale <= 0) {  // Cannot scale if both a and b are zero.\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            for (int i = 0; i < maxPower; i++) {\n                scaleFactor *= scale;\n                cN = a * (hPrev / scaleFactor) + b * (p0 / scaleFactor);\n                q2 = a * (q1 / scaleFactor) + b * (dPrev / scaleFactor);\n                if (!Double.isInfinite(cN) && !Double.isInfinite(q2)) {\n                    // Also ensure that after scaling we are not too close to zero.\n                    if (FastMath.abs(cN) < small) {\n                        cN = small;\n                    }\n                    if (FastMath.abs(q2) < small) {\n                        q2 = small;\n                    }\n                    break;\n                }\n            }\n        }\n\n        // Compute current approximant f(n) = p[n] / q[n].\n        final double f = cN / q2;\n        // deltaN = f(n) / f(n-1)\n        final double deltaN = f / cPrev;\n        hN = f;\n\n        if (Double.isInfinite(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n        if (Double.isNaN(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            return hN;\n        }\n\n        // Update variables for next iteration.\n        dPrev = q1;\n        cPrev = f;\n        p0 = hPrev;\n        hPrev = cN;\n        q1 = q2;\n        n++;\n    }\n\n    throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}