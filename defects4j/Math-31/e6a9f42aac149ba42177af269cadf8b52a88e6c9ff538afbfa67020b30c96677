{
    "generation": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    final double smallInv = 1e50;\n\n    double hPrev = getA(0, x);\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double hN = hPrev;\n    double cPrev = hPrev;\n    double q1 = 1.0;\n    double deltaN;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        // Compute numerator terms\n        double cN = a * hPrev + b * p0;\n\n        // Compute denominator terms\n        double dN = a * dPrev + b * q1;\n        if (Precision.equals(dN, 0.0, small)) {\n            dN = small;\n        }\n\n        // Compute next values\n        double deltaN = cN / dN;\n\n        if (Double.isInfinite(deltaN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n\n        if (n > 1) {\n            deltaN = deltaN / cPrev;\n        } else {\n            deltaN = 1.0 / deltaN;\n        }\n\n        hN = cPrev * deltaN;\n\n        if (Double.isInfinite(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n        if (Double.isNaN(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n        }\n\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        // Scale terms to prevent under/overflow\n        if (FastMath.abs(cN) + FastMath.abs(dN) > (1e100)) {\n            double scale = FastMath.min(1e-100 / FastMath.abs(cN), 1e-100 / FastMath.abs(dN));\n            cN *= scale;\n            dN *= scale;\n\n            p0 *= scale;\n            hPrev *= scale;\n            q1 *= scale;\n            dPrev *= scale;\n            cPrev *= scale;\n        }\n\n        dPrev = q1;\n        cPrev = cN;\n        p0 = hPrev;\n        hPrev = cN;\n        q1 = dN;\n\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hN;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}