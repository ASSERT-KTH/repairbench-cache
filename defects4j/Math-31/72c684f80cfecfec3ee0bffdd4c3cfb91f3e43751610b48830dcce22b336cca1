{
    "generation": "    public double evaluate(double x, double epsilon, int maxIterations) {\n        final double small = 1e-50;\n        double hPrev = getA(0, x);\n\n        // use the value of small as epsilon criteria for zero checks\n        if (Precision.equals(hPrev, 0.0, small)) {\n            hPrev = small;\n        }\n\n        int n = 1;\n        double dPrev = 0.0;\n        double p0 = 1.0;\n        double q1 = 1.0;\n        double cPrev = hPrev;\n        double hN = hPrev;\n\n        while (n < maxIterations) {\n            final double a = getA(n, x);\n            final double b = getB(n, x);\n\n            double dN;\n            if (n == 1) {\n                dN = 0.0;\n            } else {\n                dN = b;\n            }\n\n            double cN = b + a / dPrev;\n            if (Double.isInfinite(cN)) {\n                cN = Double.MAX_VALUE;\n            }\n            double dNInv;\n            if (FastMath.abs(cN) < small) {\n                dNInv = small;\n            } else {\n                dNInv = 1.0 / cN;\n            }\n            double delta = cN * dNInv - 1.0;\n            hN = hPrev * delta;\n\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                               x);\n            }\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                               x);\n            }\n\n            if (FastMath.abs(delta) < epsilon) {\n                break;\n            }\n\n            dPrev = b + a / dPrev;\n            cPrev = b + a / cPrev;\n            p0 = hPrev;\n            hPrev = cN;\n            q1 = dNInv;\n            n++;\n        }\n\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        return hN;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}