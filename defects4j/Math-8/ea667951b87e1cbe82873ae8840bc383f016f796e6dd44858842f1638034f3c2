{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // Create an Object array first to avoid ArrayStoreException when T is Object\n        // and the sampled singletons have different runtime types (subclasses of Object).\n        final Object[] objectArray = new Object[sampleSize];\n        for (int i = 0; i < sampleSize; i++) {\n            objectArray[i] = sample();\n        }\n\n        // Cast to T[]. This is potentially unsafe if T is not Object, as it\n        // could result in a ClassCastException. However, this approach\n        // prevents the ArrayStoreException observed when T is Object and\n        // singletons have distinct anonymous/sub-classes like in the test case.\n        // The Apache Commons Math library adopted this solution, accepting the\n        // ClassCastException risk for non-Object T types in this specific method signature.\n        @SuppressWarnings(\"unchecked\") // Documented ClassCastException risk acknowledged.\n        final T[] typedArray = (T[]) objectArray;\n\n        return typedArray;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}