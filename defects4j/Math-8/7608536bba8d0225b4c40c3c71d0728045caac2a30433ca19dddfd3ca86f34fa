{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // The original code used singletons.get(0).getClass() to determine the array component type.\n        // This resulted in an ArrayStoreException because singletons.get(0) returns a Pair<T, Double>,\n        // so singletons.get(0).getClass() returns Pair.class.\n        // However, the sample() method (called in the loop) returns an object of type T,\n        // which cannot be stored in a Pair[] array if T is not a Pair.\n        // Due to type erasure, the exact Class<T> is not directly available at runtime for generic T.\n        // The most robust way to create a generic array T[] is to create an Object[] array\n        // and cast it to T[]. This is safe because any object of type T can be stored in an Object[] array.\n        final T[]out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}