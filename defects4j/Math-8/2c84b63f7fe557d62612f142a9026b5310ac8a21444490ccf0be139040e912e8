{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // Determine the appropriate component type for the array\n        Class<?> componentType = singletons.get(0).getClass();\n\n        // If T is Object and the actual values are anonymous classes or Object itself,\n        // use Object.class as the component type to allow storing various subclasses of Object.\n        // This covers testIssue942 and similar scenarios.\n        if (componentType.isAnonymousClass() || componentType.equals(Object.class)) {\n            componentType = Object.class;\n        } else if (componentType.getSuperclass() != null && !componentType.getSuperclass().equals(Object.class)) {\n            // If T is a common supertype (e.g., Number) and elements are concrete subtypes (e.g., Integer),\n            // use the intermediate superclass (e.g., Number.class) to allow storing different subtypes.\n            // This is safe for cases like Integer -> Number, where Number.class is the desired component type.\n            componentType = componentType.getSuperclass();\n        }\n        // If T is a specific concrete type (e.g., String), componentType will remain String.class\n        // after the above checks, which is correct.\n\n        final T[] out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}