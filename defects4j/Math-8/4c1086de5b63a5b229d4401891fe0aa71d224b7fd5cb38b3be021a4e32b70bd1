{
    "generation": "public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n    if (sampleSize <= 0) {\n        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                sampleSize);\n    }\n\n    // Compute the most specific common superclass of all singleton values\n    Class<?> componentType = null;\n    for (T value : singletons) {\n        if (value == null) {\n            continue;\n        }\n        Class<?> cls = value.getClass();\n        if (componentType == null) {\n            componentType = cls;\n        } else if (!componentType.isAssignableFrom(cls)) {\n            if (cls.isAssignableFrom(componentType)) {\n                componentType = cls;\n            } else {\n                Class<?> temp = componentType;\n                while (temp != null && !temp.isAssignableFrom(cls)) {\n                    temp = temp.getSuperclass();\n                }\n                componentType = (temp != null) ? temp : Object.class;\n            }\n        }\n    }\n    if (componentType == null) {\n        componentType = Object.class;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    final T[] out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);\n    for (int i = 0; i < sampleSize; i++) {\n        out[i] = sample();\n    }\n    return out;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}