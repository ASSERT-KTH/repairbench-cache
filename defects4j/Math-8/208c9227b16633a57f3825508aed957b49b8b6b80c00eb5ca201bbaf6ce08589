{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // The original implementation used singletons.get(0).getClass() to determine the\n        // component type for the array. This is problematic because the actual runtime\n        // type of singletons.get(0) might be a specific subtype (e.g., an anonymous class\n        // or Integer) of the generic type T (e.g., Object or Number).\n        // If subsequent calls to sample() (the no-argument method) return elements\n        // that are also of type T but are not assignable to the specific class of\n        // singletons.get(0) (e.g., another distinct anonymous class, or a Double when\n        // the array is Integer[]), an ArrayStoreException occurs.\n        //\n        // To fix this, we create an array of Object. This is a common workaround for\n        // generic array creation due to type erasure, as Object[] can hold any T.\n        // The cast to T[] will be an unchecked cast, but it correctly addresses\n        // the ArrayStoreException during the population of the array.\n        final Object[] out = new Object[sampleSize];\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        // Suppress the unchecked cast warning, as this is the standard way to\n        // create a generic array when the Class<T> is not available at runtime.\n        @SuppressWarnings(\"unchecked\")\n        final T[] typedOut = (T[]) out;\n        return typedOut;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}