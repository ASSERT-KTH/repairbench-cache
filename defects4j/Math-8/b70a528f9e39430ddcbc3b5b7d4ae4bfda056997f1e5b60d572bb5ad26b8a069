{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // The original code used singletons.get(0).getClass() to determine the component type\n        // of the array. This can lead to a java.lang.ArrayStoreException if the 'singletons'\n        // list (which holds the items from the distribution) contains instances of different\n        // concrete (e.g., anonymous) classes, even if they are all assignable to the generic\n        // type T.\n        // For example, if T is Object, and the distribution was built from items A and B,\n        // where A and B are instances of different anonymous classes (e.g., new Object(){}),\n        // then singletons.get(0).getClass() might yield ClassA.class. If the array is\n        // then created as ClassA[], an attempt to store an instance of ClassB (returned by sample())\n        // will result in an ArrayStoreException.\n        //\n        // To fix this, the array should be created using the most general possible component type,\n        // which is Object.class. This ensures that any object (including instances of different\n        // anonymous classes or other concrete types that are assignable to T) can be stored\n        // in the array without a runtime ArrayStoreException. The cast to T[] is safe due\n        // to type erasure and will only be a compile-time check; the runtime type of the\n        // array will be Object[].\n        final T[]out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}