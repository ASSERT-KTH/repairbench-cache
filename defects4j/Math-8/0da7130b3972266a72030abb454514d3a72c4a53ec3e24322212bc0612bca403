{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // The original code used singletons.get(0).getClass() to determine the component type\n        // of the array. This can lead to an ArrayStoreException if the 'sample()' method returns\n        // an instance of 'T' that is of a different concrete (e.g., anonymous) class than\n        // the class of singletons.get(0). For generic types like 'Object', where 'T' can be a\n        // wide variety of specific anonymous classes (as in testIssue942), creating an array\n        // of a specific anonymous class is too restrictive.\n        //\n        // The most robust way to create an array of a generic type T when T can be Object\n        // or an interface, and the concrete instances can vary, is to create an Object[]\n        // and cast it to T[]. This is safe because all elements returned by sample()\n        // are guaranteed to be of type T (and thus compatible with Object).\n        final T[] out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}