{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // The original code used singletons.get(0).getClass() to determine the component type of the array.\n        // This can lead to an ArrayStoreException if 'T' is a common supertype (e.g., Number)\n        // but the actual elements in 'singletons' have different concrete classes (e.g., Integer and Double),\n        // and sample() picks an element whose concrete class is not assignable to the component type\n        // determined by singletons.get(0).getClass().\n        //\n        // To fix this, we create an array of Object.class. This is safe because:\n        // 1. Any object of type T is also an Object, so storing it into an Object[] will not\n        //    cause an ArrayStoreException.\n        // 2. Due to type erasure, a T[] at runtime is often an Object[]. The cast (T[])\n        //    is an unchecked cast but is conceptually correct for the method's signature.\n        final T[] out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}