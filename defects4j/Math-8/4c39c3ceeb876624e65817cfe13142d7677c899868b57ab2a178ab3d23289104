{
    "generation": "/**\n * Generate a random sample from the distribution.\n *\n * @param sampleSize the number of random values to generate.\n * @return an array representing the random sample.\n * @throws NotStrictlyPositiveException if {@code sampleSize} is not positive.\n */\npublic T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n    if (sampleSize <= 0) {\n        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n    }\n\n    // Compute a common base type for the distribution outcomes.\n    // Using the class of the first element may be too narrow if the list contains items\n    // of different (anonymous) classes. In that case, we fall back to Object\n    Class<?> commonType = singletons.get(0).getClass();\n    for (int i = 1; i < singletons.size(); i++) {\n        Class<?> candidate = singletons.get(i).getClass();\n        if (!commonType.isAssignableFrom(candidate)) {\n            commonType = Object.class;\n            break;\n        }\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    final T[] out = (T[]) java.lang.reflect.Array.newInstance(commonType, sampleSize);\n\n    for (int i = 0; i < sampleSize; i++) {\n        out[i] = sample();\n    }\n\n    return out;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}