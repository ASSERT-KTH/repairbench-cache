{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // The original code used singletons.get(0).getClass() to determine the array component type.\n        // This can lead to an ArrayStoreException if 'T' is a supertype (e.g., Object, Number)\n        // and the actual instances returned by 'sample()' are of different, incompatible\n        // concrete subtypes (e.g., two different anonymous classes, or an Integer and a Double\n        // when T is Number).\n        //\n        // To fix this, we create an array of Object type and then cast it to T[].\n        // Due to Java's type erasure, the runtime type of the array will be Object[],\n        // which can hold any Object (including instances of type T). This is a common\n        // and safe pattern for creating generic arrays.\n        final T[]out = (T[]) new Object[sampleSize];\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}