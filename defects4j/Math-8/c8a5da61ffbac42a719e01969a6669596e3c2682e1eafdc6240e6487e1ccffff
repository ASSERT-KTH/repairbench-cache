{
    "generation": "public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n    if (sampleSize <= 0) {\n        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n    }\n\n    // Determine a common runtime type that can hold every value from the distribution.\n    // Using only the first element\u2019s type may fail if other elements have a different runtime type.\n    Class<?> commonType = singletons.get(0).getClass();\n    for (int i = 1; i < singletons.size(); i++) {\n        Class<?> candidate = singletons.get(i).getClass();\n        // Walk up the hierarchy from the current commonType until it can hold candidate.\n        while (!commonType.isAssignableFrom(candidate)) {\n            commonType = commonType.getSuperclass();\n            if (commonType == null) {\n                // If we reach the top, fallback to Object.\n                commonType = Object.class;\n                break;\n            }\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T[] out = (T[]) java.lang.reflect.Array.newInstance(commonType, sampleSize);\n\n    for (int i = 0; i < sampleSize; i++) {\n        out[i] = sample();\n    }\n\n    return out;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}