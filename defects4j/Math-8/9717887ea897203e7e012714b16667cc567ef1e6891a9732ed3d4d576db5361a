{
    "generation": "/**\n * Generate a random sample from the distribution.\n *\n * @param sampleSize the number of random values to generate.\n * @return an array representing the random sample.\n * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n * positive.\n */\n@SuppressWarnings(\"unchecked\")\npublic T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n    if (sampleSize <= 0) {\n        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                sampleSize);\n    }\n\n    // Determine the correct runtime class for the output array.\n    Class<?> clazz = null;\n    for (int i = 0; i < singletons.size(); i++) {\n        T singleton = singletons.get(i);\n        if (singleton != null) {\n            clazz = singleton.getClass();\n            break;\n        }\n    }\n    if (clazz == null) {\n        clazz = Object.class;\n    }\n\n    final T[] out = (T[]) java.lang.reflect.Array.newInstance(clazz, sampleSize);\n\n    for (int i = 0; i < sampleSize; i++) {\n        out[i] = sample();\n    }\n\n    return out;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}