{
    "generation": "/**\n * Generate a random sample from the distribution.\n *\n * @param sampleSize the number of random values to generate.\n * @return an array representing the random sample.\n * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n * positive.\n */\n@SuppressWarnings(\"unchecked\")\npublic T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n    if (sampleSize <= 0) {\n        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                sampleSize);\n    }\n\n    // If singletons is empty, we cannot determine the runtime type. Use Object as a fallback.\n    Class<?> componentType;\n    if (singletons.size() > 0) {\n        // Find a common superclass among all singletons\n        componentType = singletons.get(0).getClass();\n        for (int i = 1; i < singletons.size(); i++) {\n            componentType = org.apache.commons.math3.util.MathUtils.safeClassCommonSuperType(componentType, singletons.get(i).getClass());\n        }\n    } else {\n        componentType = Object.class;\n    }\n    final T[] out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);\n\n    for (int i = 0; i < sampleSize; i++) {\n        out[i] = sample();\n    }\n\n    return out;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}