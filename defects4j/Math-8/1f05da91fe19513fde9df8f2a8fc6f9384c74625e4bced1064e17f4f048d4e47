{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n// buggy code\n//    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n//        if (sampleSize <= 0) {\n//            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n//                    sampleSize);\n//        }\n//        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n//        for (int i = 0; i < sampleSize; i++) {\n//            out[i] = sample();\n//        }\n//        return out;\n//    }\n\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n        }\n        final T[] out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n        return out;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}