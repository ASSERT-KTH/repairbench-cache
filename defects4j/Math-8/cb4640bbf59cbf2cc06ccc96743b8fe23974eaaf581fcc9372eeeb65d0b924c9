{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // Determine the common superclass for all elements in 'singletons'\n        // to correctly create the generic array.\n        // This is necessary because T is type-erased and singletons can contain\n        // instances of different runtime classes (e.g., anonymous classes\n        // or subclasses) that all conform to T.\n        // Array.newInstance requires a specific Class<?> for the component type.\n        // If singletons.get(0).getClass() is used, and a later sampled item\n        // has a different runtime class (even if compatible with T),\n        // an ArrayStoreException can occur if the array was created with a too-specific component type.\n        // Initialize with the class of the first element.\n        Class<?> componentType = singletons.get(0).getClass();\n        // Iterate through the rest of the elements to find the common superclass.\n        for (int i = 1; i < singletons.size(); i++) {\n            Class<?> currentClass = singletons.get(i).getClass();\n            // Move componentType up the inheritance hierarchy until it can assign currentClass.\n            while (!componentType.isAssignableFrom(currentClass)) {\n                componentType = componentType.getSuperclass();\n                if (componentType == null) {\n                    // This should theoretically not be reached before componentType becomes Object.class,\n                    // as Object is the ultimate superclass of all classes.\n                    // Fallback to Object.class if somehow no common superclass is found early.\n                    componentType = Object.class;\n                    break;\n                }\n            }\n        }\n\n        final T[]out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}