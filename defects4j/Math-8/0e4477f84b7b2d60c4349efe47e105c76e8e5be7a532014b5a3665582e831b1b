{
    "generation": "    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        Class<?> commonSuperclass = Object.class;\n        if (!singletons.isEmpty()) {\n            commonSuperclass = singletons.get(0).getClass();\n            for (T element : singletons) {\n                Class<?> currentClass = element.getClass();\n                while (!commonSuperclass.isAssignableFrom(currentClass)) {\n                    commonSuperclass = commonSuperclass.getSuperclass();\n                    if (commonSuperclass == null) {\n                        commonSuperclass = Object.class;\n                        break;\n                    }\n                }\n            }\n        }\n\n        final T[] out = (T[]) java.lang.reflect.Array.newInstance(commonSuperclass, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}