{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // Determine the component type for the array.\n        // The original code used singletons.get(0).getClass(), which can be problematic\n        // if the generic type T is Object (as in testIssue942) and the actual\n        // instances in 'singletons' are different anonymous classes.\n        // Creating an array of a specific anonymous class type would cause an\n        // ArrayStoreException if a different anonymous class instance is sampled.\n        //\n        // To fix this, if T is effectively Object (indicated by the first element\n        // being a direct subclass of Object, like an anonymous class),\n        // the array should be created as Object[]. Otherwise, use the class\n        // of the first element as the component type.\n        Class<?> componentType = singletons.get(0).getClass();\n\n        // Heuristic to handle the case where T is Object and elements are anonymous classes.\n        // If the componentType is a direct subclass of Object (and not Object itself),\n        // it implies T was Object and we should use Object.class as the array component type.\n        if (componentType.getSuperclass() == Object.class && !Object.class.equals(componentType)) {\n            componentType = Object.class;\n        }\n\n        final T[] out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}