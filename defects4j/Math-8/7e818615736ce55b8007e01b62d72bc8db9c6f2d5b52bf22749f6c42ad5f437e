{
    "generation": "    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // Compute the common superclass of all singletons\n        Class<?> commonClass = null;\n        for (T element : singletons) {\n            if (commonClass == null) {\n                commonClass = element.getClass();\n            } else {\n                Class<?> currentClass = element.getClass();\n                while (!commonClass.isAssignableFrom(currentClass)) {\n                    commonClass = commonClass.getSuperclass();\n                    if (commonClass == null) {\n                        commonClass = Object.class;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (commonClass == null) {\n            commonClass = Object.class;\n        }\n\n        final T[] out = (T[]) java.lang.reflect.Array.newInstance(commonClass, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}