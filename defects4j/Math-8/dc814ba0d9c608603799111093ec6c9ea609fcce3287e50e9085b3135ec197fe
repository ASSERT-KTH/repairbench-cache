{
    "generation": "/**\n * Generate a random sample from the distribution.\n *\n * @param sampleSize the number of random values to generate.\n * @return an array representing the random sample.\n * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n * positive.\n */\npublic T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n    if (sampleSize <= 0) {\n        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                sampleSize);\n    }\n\n    final T[] out = (T[]) java.lang.reflect.Array.newInstance(getComponentType(), sampleSize);\n\n    for (int i = 0; i < sampleSize; i++) {\n        out[i] = sample();\n    }\n\n    return out;\n}\n\n/**\n * Gets the component type of the distribution.\n *\n * @return the component type.\n */\nprivate Class<?> getComponentType() {\n    if (singletons.isEmpty()) {\n        return Object.class;\n    }\n    return singletons.get(0).getClass();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}