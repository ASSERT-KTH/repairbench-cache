{
    "generation": "public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n    if (sampleSize <= 0) {\n        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                sampleSize);\n    }\n\n    if (distribution.isEmpty()) {\n        throw new NotStrictlyPositiveException(LocalizedFormats.EMPTY_DISTRIBUTION);\n    }\n\n    final double[] probabilities = distribution.getProbabilities();\n    final double sum = probabilitiesSum(probabilities);\n    final double[] cumulative = probabilitiesCumulative(sum);\n\n    final TypeInformation<?> typeInfo = distribution.getTypeInformation();\n    final Class<T> type = (Class<T>) typeInfo.getType();\n\n    final T[] out = NewArrayContainer.newArray(type, sampleSize);\n\n    for (int i = 0; i < sampleSize; i++) {\n        final double r = randomData.nextUniform(0, 1);\n        for (int j = 0; j < distribution.size(); j++) {\n            if (r <= cumulative[j]) {\n                out[i] = distribution.get(j);\n                break;\n            }\n        }\n    }\n\n    return out;\n}\n\nprivate double probabilitiesSum(final double[] probabilities) {\n    double ret = 0;\n    for (double p : probabilities) {\n        ret += p;\n    }\n    return ret;\n}\n\nprivate double[] probabilitiesCumulative(final double sum) {\n    final int length = distribution.size();\n    final double[] cumulative = new double[length];\n    double sumProbabilities = 0;\n    for (int i = 0; i < length; i++) {\n        final double probability = distribution.getProbability(i);\n        if (probability < 0) {\n            throw new IllegalStateException(LocalizedMathBase.INSTANCE().negativeProbability());\n        }\n        sumProbabilities += probability;\n        cumulative[i] = sumProbabilities / sum;\n    }\n    if (sumProbabilities > 0 && Math.abs(sumProbabilities - sum) > 1e-15) {\n        throw new IllegalStateException(LocalizedMathBase.INSTANCE().sumNotEqual(probabilitiesSum(distribution.getProbabilities()), sum));\n    }\n    return cumulative;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}