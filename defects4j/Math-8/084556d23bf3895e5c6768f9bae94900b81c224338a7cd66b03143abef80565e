{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        // The original code used singletons.get(0).getClass() to determine the component type\n        // of the array. This is problematic because singletons.get(0).getClass() returns the\n        // *runtime* class of the first element, which can be a specific subclass of the\n        // generic type T (e.g., an anonymous class or a subclass like Integer when T is Number).\n        // If subsequent calls to sample() return instances of a *different* subclass of T,\n        // or T itself, an ArrayStoreException can occur if that type is not assignable to\n        // the specific runtime class of the array.\n        //\n        // To fix this, we should create an array of the most general type T can represent,\n        // which is Object.class, and then cast it to T[]. This is generally safe in Java\n        // due to type erasure, as the sample() method (without arguments) is expected\n        // to return elements of type T, and any T is assignable to Object.\n        // The cast (T[]) will result in an unchecked cast warning, but it's a common and\n        // often necessary pattern when creating generic arrays via reflection without\n        // an explicit Class<T> token.\n        final T[]out = (T[]) java.lang.reflect.Array.newInstance(Object.class, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}