{
    "generation": "    /**\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     */\n    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        if (singletons.isEmpty()) {\n            throw new IllegalStateException(\"Cannot determine class for empty singletons list.\");\n        }\n\n        // Compute the common superclass of all singletons\n        Class<?> commonClass = singletons.get(0).getClass();\n        for (T instance : singletons) {\n            Class<?> currentClass = instance.getClass();\n            while (!commonClass.isAssignableFrom(currentClass)) {\n                commonClass = commonClass.getSuperclass();\n                if (commonClass == null) {\n                    commonClass = Object.class;\n                    break;\n                }\n            }\n        }\n\n        final T[] out = (T[]) java.lang.reflect.Array.newInstance(commonClass, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}