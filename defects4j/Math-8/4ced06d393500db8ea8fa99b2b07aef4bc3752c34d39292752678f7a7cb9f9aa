{
    "generation": "    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);\n        }\n\n        // Find the most specific common superclass for all elements in singletons\n        Class<?> componentType = null;\n        for (T element : singletons) {\n            if (element != null) {\n                if (componentType == null) {\n                    componentType = element.getClass();\n                } else {\n                    // Find common ancestor\n                    Class<?> clazz = element.getClass();\n                    while (!componentType.isAssignableFrom(clazz)) {\n                        componentType = componentType.getSuperclass();\n                    }\n                }\n            }\n        }\n        if (componentType == null) {\n            componentType = Object.class;\n        }\n\n        final T[] out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}