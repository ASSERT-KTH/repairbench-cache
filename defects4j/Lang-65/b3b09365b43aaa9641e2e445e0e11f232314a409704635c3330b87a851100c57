{
    "generation": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    // Fix for the time zone transition issue\n    long timeInMillis = val.getTimeInMillis();\n    long truncatedMillis = timeInMillis;\n    \n    // Calculate how many milliseconds to truncate\n    switch (field) {\n        case Calendar.MILLISECOND:\n            truncatedMillis = timeInMillis - (timeInMillis % 1000);\n            break;\n        case Calendar.SECOND:\n            truncatedMillis = timeInMillis - (timeInMillis % (1000 * 60));\n            break;\n        case Calendar.MINUTE:\n            truncatedMillis = timeInMillis - (timeInMillis % (1000 * 60 * 60));\n            break;\n        case Calendar.HOUR_OF_DAY:\n            truncatedMillis = timeInMillis - (timeInMillis % (1000 * 60 * 60 * 24));\n            break;\n        case Calendar.DATE:\n            truncatedMillis = timeInMillis - (timeInMillis % (1000 * 60 * 60 * 24));\n            break;\n        default:\n            // For other fields, proceed as before but ensure correct truncation\n            break;\n    }\n\n    val.setTimeInMillis(truncatedMillis);\n    val.setLenient(false);\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        if (roundUp) {\n            val.add(fields[i][0], 1);\n            break;\n        }\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        int date = val.get(Calendar.DATE);\n                        if (date == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n\n        int offset = 0;\n        boolean offsetSet = false;\n\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY) % 12;\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}