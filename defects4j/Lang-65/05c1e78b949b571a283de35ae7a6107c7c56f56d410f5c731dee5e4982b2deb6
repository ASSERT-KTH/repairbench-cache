{
    "generation": "import java.util.Calendar;\nimport java.util.Date; // Assuming these imports are present in the full file\n\n// Assuming DateUtils class structure like:\n// public class DateUtils {\n//     public static final int SEMI_MONTH = 1001; // Example, actual value would be in DateUtils\n//     // ... other fields and methods\n// }\n\nclass DateUtils { // Renamed for context, actual class name is DateUtils\n    // Placeholder for fields array, actual content would be from DateUtils\n    private static final int[][] fields = {\n        {Calendar.MILLISECOND},\n        {Calendar.SECOND},\n        {Calendar.MINUTE},\n        {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n        {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH},\n        {Calendar.MONTH, Calendar.AM_PM},\n        {Calendar.YEAR},\n        {Calendar.ERA}\n    };\n    // Placeholder for SEMI_MONTH, actual content would be from DateUtils\n    public static final int SEMI_MONTH = 1001; // Value from DateUtils.SEMI_MONTH\n\n    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        // Declare roundUp at the top so it can be set by the LANG-59 block\n        // and used by the general processing loop.\n        boolean roundUp = false;\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n        // This ensures consistent behavior around DST transitions by using setTimeInMillis.\n\n        long time = val.getTimeInMillis(); // Current time in milliseconds since epoch\n        long currentMillisInDay = time % 86400000L; // Milliseconds from start of the day (00:00:00.000)\n\n        // 'amountToTruncate' will hold the number of milliseconds to remove from the current time\n        // to achieve the desired truncation level for time fields.\n        long amountToTruncate = 0;\n\n        // Determine 'amountToTruncate' and set 'roundUp' for time-related fields\n        if (field == Calendar.MILLISECOND) {\n            // No truncation needed below milliseconds\n            amountToTruncate = 0;\n        } else if (field == Calendar.SECOND) {\n            amountToTruncate = currentMillisInDay % 1000; // milliseconds\n            if (round && amountToTruncate >= 500) { // Round up if milliseconds >= 500\n                roundUp = true;\n            }\n        } else if (field == Calendar.MINUTE) {\n            amountToTruncate = currentMillisInDay % 60000; // milliseconds and seconds\n            if (round && amountToTruncate >= 30000) { // Round up if seconds >= 30\n                roundUp = true;\n            }\n        } else if (field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY) {\n            amountToTruncate = currentMillisInDay % 3600000; // milliseconds, seconds, and minutes\n            if (round && amountToTruncate >= 1800000) { // Round up if minutes >= 30\n                roundUp = true;\n            }\n        } else {\n            // For higher fields (DATE, MONTH, YEAR, etc.), first truncate all time components to 00:00:00.000\n            amountToTruncate = currentMillisInDay;\n            if (round && amountToTruncate >= 43200000L) { // Round up if time is >= 12:00 (noon)\n                roundUp = true;\n            }\n        }\n        \n        // Apply the calculated truncation directly using setTimeInMillis.\n        // This avoids Calendar's problematic internal field setting around DST boundaries.\n        if (amountToTruncate != 0) {\n            val.setTimeInMillis(time - amountToTruncate);\n        }\n\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        // The 'roundUp' flag is now correctly determined for time fields (if 'round' is true).\n        // The following loop processes the remaining fields (DATE, MONTH, YEAR, etc.).\n        // If the target 'field' was a time field, the initial `setTimeInMillis` handled the truncation.\n        // When the loop iterates over smaller fields (e.g., MILLISECOND if target is SECOND),\n        // their `offset` calculation `val.get(fields[i][0]) - min` will yield 0,\n        // making `val.set(fields[i][0], val.get(fields[i][0]) - offset)` a safe no-op.\n\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    //This is our field... we stop looping\n                    if (round && roundUp) { // Use the roundUp flag set above.\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return; // Processing complete for the target field\n                }\n            }\n            // We have various fields that are not easy roundings.\n            // This part of the loop handles fields *smaller* than the target 'field'\n            // and sets them to their minimum values (truncation).\n            // For date fields, this logic is still relevant.\n            // For time fields, this was effectively already done by setTimeInMillis.\n            int offset = 0; // This 'offset' is local to this outer loop iteration.\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) { // This switch operates based on the *target* field, not the current `fields[i][0]`\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        // This `roundUp` here refers to the method-level `roundUp`\n                        roundUp = offset > 7; // This determines roundUp for the DATE field based on SEMI_MONTH logic\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6; // This determines roundUp for the HOUR field based on AM_PM logic\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(fields[i][0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                // This `roundUp` here refers to the method-level `roundUp`\n                roundUp = offset > ((max - min) / 2); // This determines roundUp for generic fields being truncated\n            }\n            //We need to remove this field\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}