{
    "generation": "/**\n * <p>Internal calculation method.</p>\n * \n * @param val  the calendar\n * @param field  the field constant\n * @param round  true to round, false to truncate\n * @throws ArithmeticException if the year is over 280 million\n */\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // If we are truncating to one of the three lowest fields (milliseconds, seconds or minutes)\n    // then we compute the new time in milliseconds directly. This avoids the Calendar#set() calls\n    // which can sometimes trigger an unwanted DST shift.\n    switch (field) {\n        case Calendar.MILLISECOND:\n            // No change is needed when truncating/rounding to the millisecond.\n            return;\n        case Calendar.SECOND: {\n            long time = val.getTimeInMillis();\n            long unit = 1000L;\n            if (round) {\n                long rem = time % unit;\n                time = (time / unit) * unit;\n                if (rem >= unit / 2) {\n                    time += unit;\n                }\n            } else {\n                time = (time / unit) * unit;\n            }\n            val.setTimeInMillis(time);\n            return;\n        }\n        case Calendar.MINUTE: {\n            long time = val.getTimeInMillis();\n            long unit = 60000L;\n            if (round) {\n                long rem = time % unit;\n                time = (time / unit) * unit;\n                if (rem >= unit / 2) {\n                    time += unit;\n                }\n            } else {\n                time = (time / unit) * unit;\n            }\n            val.setTimeInMillis(time);\n            return;\n        }\n        default:\n            // For fields higher than MINUTE, we continue with the normal iterative truncation.\n            break;\n    }\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // This is our field... we stop looping.\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // Special case for SEMI_MONTH:\n                        // If the date is 1, we round up to 16,\n                        // otherwise subtract 15 days then add 1 month.\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // Add one to the field because the remainder caused us to round up.\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        // Determine the offset for truncation of the current field group.\n        int offset = 0;\n        boolean offsetSet = false;\n        // Special rounding rules for certain fields.\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    // Subtract 1 because DATE has a minimum of 1.\n                    offset = val.get(Calendar.DATE) - 1;\n                    // If we're past the 15th day, adjust accordingly.\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        // Truncate this field by subtracting the offset.\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}