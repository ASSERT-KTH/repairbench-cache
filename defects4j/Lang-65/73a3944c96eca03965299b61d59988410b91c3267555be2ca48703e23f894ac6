{
    "generation": "    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n\n        boolean roundUp = false;\n        boolean found = false;\n\n        for (int i = 0; i < fields.length; i++) {\n            if (found) {\n                // Truncate the remaining fields\n                int offset = 0;\n                boolean offsetSet = false;\n                switch (field) {\n                    case DateUtils.SEMI_MONTH:\n                        if (fields[i][0] == Calendar.DATE) {\n                            offset = val.get(Calendar.DATE) - 1;\n                            if (offset >= 15) {\n                                offset -= 15;\n                            }\n                            roundUp = offset > 7;\n                            offsetSet = true;\n                        }\n                        break;\n                    case Calendar.AM_PM:\n                        if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                            offset = val.get(Calendar.HOUR_OF_DAY);\n                            if (offset >= 12) {\n                                offset -= 12;\n                            }\n                            roundUp = offset > 6;\n                            offsetSet = true;\n                        }\n                        break;\n                }\n                if (!offsetSet) {\n                    int min = val.getActualMinimum(fields[i][0]);\n                    int max = val.getActualMaximum(fields[i][0]);\n                    offset = val.get(fields[i][0]) - min;\n                    roundUp = offset > ((max - min) / 2);\n                }\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n                continue;\n            }\n\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    found = true;\n                    break;\n                }\n            }\n\n            if (!found) {\n                int offset = 0;\n                boolean offsetSet = false;\n                switch (field) {\n                    case DateUtils.SEMI_MONTH:\n                        if (fields[i][0] == Calendar.DATE) {\n                            offset = val.get(Calendar.DATE) - 1;\n                            if (offset >= 15) {\n                                offset -= 15;\n                            }\n                            roundUp = offset > 7;\n                            offsetSet = true;\n                        }\n                        break;\n                    case Calendar.AM_PM:\n                        if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                            offset = val.get(Calendar.HOUR_OF_DAY);\n                            if (offset >= 12) {\n                                offset -= 12;\n                            }\n                            roundUp = offset > 6;\n                            offsetSet = true;\n                        }\n                        break;\n                }\n                if (!offsetSet) {\n                    int min = val.getActualMinimum(fields[i][0]);\n                    int max = val.getActualMaximum(fields[i][0]);\n                    offset = val.get(fields[i][0]) - min;\n                    roundUp = offset > ((max - min) / 2);\n                }\n                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n            }\n        }\n\n        if (!found) {\n            throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}