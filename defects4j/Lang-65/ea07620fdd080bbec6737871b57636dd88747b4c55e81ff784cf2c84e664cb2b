{
    "generation": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // see http://issues.apache.org/jira/browse/LANG-59\n    //\n    // Manually truncate milliseconds, seconds and minutes, rather than using\n    // Calendar methods.\n    switch (field) {\n        case Calendar.MILLISECOND:\n            // No truncation needed.\n            break;\n        case Calendar.SECOND: {\n            long time = val.getTimeInMillis();\n            // Truncate milliseconds.\n            time = (time / 1000L) * 1000L;\n            val.setTimeInMillis(time);\n            break;\n        }\n        case Calendar.MINUTE: {\n            long time = val.getTimeInMillis();\n            // Truncate seconds and milliseconds.\n            time = (time / 60000L) * 60000L;\n            val.setTimeInMillis(time);\n            break;\n        }\n        case Calendar.HOUR_OF_DAY:\n        case Calendar.HOUR: {\n            long time = val.getTimeInMillis();\n            // Truncate minutes, seconds and milliseconds.\n            time = (time / 3600000L) * 3600000L;\n            val.setTimeInMillis(time);\n            break;\n        }\n        case Calendar.DATE: {\n            long time = val.getTimeInMillis();\n            TimeZone tz = val.getTimeZone();\n            int offset = tz.getOffset(time);\n            // Truncate to the start of the day in local time.\n            long day = 24 * 3600000L;\n            time = ((time + offset) / day) * day - offset;\n            val.setTimeInMillis(time);\n            break;\n        }\n        default:\n            // For other fields, no manual truncation is necessary.\n            break;\n    }\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n    \n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // This is our field; if we are rounding and the lower fields indicate a round-up then adjust.\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // Special case for SEMI_MONTH: if the date is 1, round up to 16;\n                        // otherwise subtract 15 days and add 1 month.\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // Otherwise, add one unit to the field.\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        // For fields that are lower than the one we're modifying, determine how much to subtract.\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    // For SEMI_MONTH rounding, adjust the DATE field specially.\n                    offset = val.get(Calendar.DATE) - 1; // subtract 1 because day minimum is 1\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        // Remove the lower-order field by subtracting the computed offset.\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}