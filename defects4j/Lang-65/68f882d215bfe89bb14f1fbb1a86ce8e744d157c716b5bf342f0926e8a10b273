{
    "generation": "    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate/round milliseconds, seconds and minutes, rather than using\n        // Calendar#set which can mis-handle DST transitions.\n        if (field == Calendar.MILLISECOND) {\n            // nothing to do\n            return;\n        }\n        if (field == Calendar.SECOND) {\n            long millis = val.getTimeInMillis();\n            if (round) {\n                long rem = millis % 1000;\n                if (rem >= 500) {\n                    millis += (1000 - rem);\n                } else {\n                    millis -= rem;\n                }\n            } else {\n                millis -= (millis % 1000);\n            }\n            val.setTimeInMillis(millis);\n            return;\n        }\n        if (field == Calendar.MINUTE) {\n            long millis = val.getTimeInMillis();\n            long msPerMin = 60 * 1000;\n            if (round) {\n                long rem = millis % msPerMin;\n                if (rem >= (msPerMin / 2)) {\n                    millis += (msPerMin - rem);\n                } else {\n                    millis -= rem;\n                }\n            } else {\n                millis -= (millis % msPerMin);\n            }\n            val.setTimeInMillis(millis);\n            return;\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    // This is our field... we stop looping\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            // Special case: semi-month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            // Add one to this field to round up\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            // We have to drop this field and all lower-order fields\n            int offset = 0;\n            boolean offsetSet = false;\n            // Special rounding rules for some fields\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            // Remove the field\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}