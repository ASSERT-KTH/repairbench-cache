{
    "generation": "    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds, minutes and hours, rather than using\n        // Calendar.set() methods for these specific fields, to avoid DST transition issues.\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        // fields array is assumed to be defined elsewhere in DateUtils,\n        // ordered from smallest granularity (MILLISECOND) to largest (ERA).\n        for (int i = 0; i < fields.length; i++) {\n            int currentField = fields[i][0]; // Primary field in this group\n\n            boolean isCurrentFieldTheTarget = false;\n            // Check if any field in the current group matches the target 'field'\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    isCurrentFieldTheTarget = true;\n                    break;\n                }\n            }\n\n            if (isCurrentFieldTheTarget) {\n                // This is the target field or a group containing it.\n                // All smaller fields have already been processed and truncated.\n                // For the current field, apply rounding up if necessary.\n                if (round && roundUp) {\n                    // DateUtils.SEMI_MONTH is a custom field constant in DateUtils.\n                    // Assumed to be accessible in this context.\n                    if (currentField == DateUtils.SEMI_MONTH) {\n                        //This is a special case that's hard to generalize\n                        //If the date is 1, we round up to 16, otherwise\n                        //  we subtract 15 days and add 1 month\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        //We need to add one to this field since the\n                        //  last number causes us to round up\n                        val.add(currentField, 1);\n                    }\n                }\n                // Once the target field is handled, stop processing larger fields.\n                return;\n            }\n\n            // If we reach here, 'currentField' is smaller than the 'field' we are truncating/rounding to.\n            // These fields must be truncated to their minimum value (usually 0).\n            \n            // Calculate the 'offset' - amount to subtract to bring the field to its minimum.\n            // Also calculate 'roundUp' based on this field's value, to be used for the *next* larger field.\n            int offset = 0;\n            boolean offsetSet = false;\n            \n            // These are special types of fields that require different rounding rules\n            // (e.g., for SEMI_MONTH or AM_PM, these rules determine how DATE or HOUR_OF_DAY are rounded/truncated).\n            switch (field) { // 'field' here is the *target* field, not the 'currentField' being processed.\n                case DateUtils.SEMI_MONTH:\n                    if (currentField == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtract 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (currentField == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n\n            if (!offsetSet) {\n                int min = val.getActualMinimum(currentField);\n                int max = val.getActualMaximum(currentField);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(currentField) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            \n            // Fix for LANG-59: Manually truncate time fields by adjusting total milliseconds.\n            // This avoids Calendar.set() which can cause DST issues.\n            if (currentField == Calendar.MILLISECOND ||\n                currentField == Calendar.SECOND ||\n                currentField == Calendar.MINUTE ||\n                currentField == Calendar.HOUR_OF_DAY ||\n                currentField == Calendar.HOUR) {\n                \n                // Subtract the offset directly from the time in milliseconds.\n                // The offset is the amount the current field needs to be reduced to reach its minimum.\n                val.setTimeInMillis(val.getTimeInMillis() - offset);\n            } else {\n                // For non-time fields (e.g., DATE, MONTH, YEAR), Calendar.set() is generally safe.\n                // We need to remove this field (set it to its minimum adjusted by offset)\n                val.set(currentField, val.get(currentField) - offset);\n            }\n        }\n        // This throw statement is reached if the 'field' passed in is not found in the 'fields' array.\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}