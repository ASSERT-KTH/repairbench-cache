{
    "generation": "import java.util.Calendar;\nimport java.util.TimeZone;\n\n// Assuming DateUtils.fields and DateUtils.SEMI_MONTH are accessible (e.g., from an outer class or static import).\n// For the purpose of this isolated function, these are assumed to be defined elsewhere in the class.\n// private static final int[][] fields = {...}; // This would be defined in DateUtils class\n// public static final int SEMI_MONTH = 1001; // This would be defined in DateUtils class\n\n// Dummy fields and SEMI_MONTH for compilation, in a real scenario these would be from DateUtils.\nclass DateUtils {\n    public static final int SEMI_MONTH = 1001;\n    // This 'fields' array must match the one in the actual DateUtils class.\n    // This is a minimal representation for demonstration.\n    // In actual DateUtils, it's:\n    private static final int[][] fields = {\n        {Calendar.MILLISECOND},\n        {Calendar.SECOND},\n        {Calendar.MINUTE},\n        {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n        {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH},\n        {Calendar.MONTH, DateUtils.SEMI_MONTH},\n        {Calendar.YEAR},\n        {Calendar.ERA}\n    };\n\n    /**\n     * <p>Internal calculation method.</p>\n     *\n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods.\n        if (!round) { // Only apply this specific fix for truncation\n            long currentMillis = val.getTimeInMillis();\n            long newMillis = currentMillis;\n\n            // Get current time components without affecting the Calendar instance\n            int ms = val.get(Calendar.MILLISECOND);\n            int s = val.get(Calendar.SECOND);\n            int m = val.get(Calendar.MINUTE);\n            int h = val.get(Calendar.HOUR_OF_DAY);\n\n            // Calculate the amount of milliseconds to subtract based on the target field\n            switch (field) {\n                case Calendar.MILLISECOND:\n                    // Nothing to truncate below milliseconds\n                    break;\n                case Calendar.SECOND:\n                    newMillis -= ms;\n                    break;\n                case Calendar.MINUTE:\n                    newMillis -= (ms + (s * 1000L));\n                    break;\n                case Calendar.HOUR_OF_DAY:\n                case Calendar.HOUR: // Calendar.HOUR implies truncation to 00:00:00.000 of the AM/PM hour\n                    newMillis -= (ms + (s * 1000L) + (m * 60000L));\n                    break;\n                case Calendar.DATE:\n                case Calendar.DAY_OF_MONTH:\n                case Calendar.DAY_OF_YEAR:\n                case Calendar.DAY_OF_WEEK:\n                case Calendar.DAY_OF_WEEK_IN_MONTH:\n                case Calendar.AM_PM: // AM_PM truncation means to the start of the current half-day (00:00 or 12:00)\n                case DateUtils.SEMI_MONTH: // SEMI_MONTH implies truncating to start of day (00:00:00.000)\n                case Calendar.MONTH:\n                case Calendar.YEAR:\n                case Calendar.ERA:\n                    // For these fields or coarser, reset time to 00:00:00.000\n                    newMillis -= (ms + (s * 1000L) + (m * 60000L) + (h * 3600000L));\n                    break;\n                default:\n                    // If the field is not recognized for truncation (e.g., a custom field\n                    // not handled here or an unsupported field), let the main loop handle it.\n                    // If it's truly unsupported, the IllegalArgumentException at the end will be thrown.\n                    break;\n            }\n\n            if (newMillis != currentMillis) { // Only set if something changed\n                val.setTimeInMillis(newMillis);\n            }\n\n            // If the field was one of the time-related fields, we are done with truncation.\n            // For Date, Month, Year, etc., the time part has been zeroed, and the main loop\n            // will continue to handle the truncation of those date/month/year components.\n            if (field == Calendar.MILLISECOND ||\n                field == Calendar.SECOND ||\n                field == Calendar.MINUTE ||\n                field == Calendar.HOUR_OF_DAY ||\n                field == Calendar.HOUR ||\n                field == Calendar.AM_PM) {\n                return;\n            }\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    //This is our field... we stop looping\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(fields[i][0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            // For truncation of time fields, this was already handled by the LANG-59 fix block.\n            // For rounding, or for truncation of date/month/year fields, this logic is correct.\n            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}