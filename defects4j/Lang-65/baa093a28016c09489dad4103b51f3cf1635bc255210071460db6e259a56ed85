{
    "generation": "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n\n        // Save original time zone to restore after truncation\n        TimeZone originalTimeZone = val.getTimeZone();\n\n        // Manually truncate milliseconds, seconds, and minutes\n        // Truncate milliseconds\n        if (round) {\n            val.set(Calendar.MILLISECOND, 0);\n        } else {\n            int millisecond = val.get(Calendar.MILLISECOND);\n            if (millisecond != 0) {\n                val.set(Calendar.MILLISECOND, 0);\n                val.add(Calendar.SECOND, -millisecond / 1000);\n            }\n        }\n\n        // Truncate seconds\n        int second = val.get(Calendar.SECOND);\n        if (!round && second != 0) {\n            val.set(Calendar.SECOND, 0);\n            val.add(Calendar.MINUTE, -second / 60);\n        }\n\n        // Truncate minutes\n        int minute = val.get(Calendar.MINUTE);\n        if (!round && minute != 0) {\n            val.set(Calendar.MINUTE, 0);\n            val.add(Calendar.HOUR_OF_DAY, -minute / 60);\n        }\n\n        // Reset time after truncation\n        // Ensure time is set correctly and time zone is preserved\n        val.set(Calendar.MILLISECOND, 0);\n        val.set(Calendar.SECOND, 0);\n        val.set(Calendar.MINUTE, 0);\n        val.set(Calendar.HOUR_OF_DAY, 0);\n\n        // Restore original time zone\n        val.setTimeZone(originalTimeZone);\n\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            boolean offsetSet = false;\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fields[i][0] == Calendar.DATE) {\n                        int offset = val.get(Calendar.DATE) - 1;\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                        int offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fields[i][0]);\n                int max = val.getActualMaximum(fields[i][0]);\n                int offset = val.get(fields[i][0]) - min;\n                roundUp = offset > ((max - min) / 2);\n            }\n            val.set(fields[i][0], val.get(fields[i][0]) - val.get(fields[i][0]) + val.getActualMinimum(fields[i][0]));\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}