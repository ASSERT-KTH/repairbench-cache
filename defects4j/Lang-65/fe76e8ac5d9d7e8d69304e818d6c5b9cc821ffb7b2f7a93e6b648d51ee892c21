{
    "generation": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // see http://issues.apache.org/jira/browse/LANG-59\n    //\n    // Manually truncate milliseconds, seconds, minutes and hours\n    // rather than using Calendar.set(), to avoid DST shifts.\n    if (field == Calendar.MILLISECOND) {\n        // nothing to truncate\n        return;\n    }\n    long time = val.getTimeInMillis();\n    switch (field) {\n        case Calendar.SECOND:\n            // truncate milliseconds\n            val.setTimeInMillis((time / 1000) * 1000);\n            return;\n        case Calendar.MINUTE:\n            // truncate seconds and milliseconds\n            val.setTimeInMillis((time / (60 * 1000)) * (60 * 1000));\n            return;\n        case Calendar.HOUR_OF_DAY:\n        case Calendar.HOUR:\n            // truncate minutes, seconds and milliseconds\n            val.setTimeInMillis((time / (60 * 60 * 1000)) * (60 * 60 * 1000));\n            return;\n        default:\n            // for DATE and above, fall through to the normal logic\n            break;\n    }\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        // scan this group of fields\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // found the field to truncate/round\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // special semi-month rounding\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // carry one unit into the next higher field\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        // this group does not contain the target field, so truncate this field\n        int offset = 0;\n        boolean offsetSet = false;\n        // special cases for semi-month and AM_PM\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        // perform the truncation of this field\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}