{
    "generation": "/**\n * <p>Internal calculation method.</p>\n * \n * @param val  the calendar\n * @param field  the field constant\n * @param round  true to round, false to truncate\n * @throws ArithmeticException if the year is over 280 million\n */\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // Rather than \u201cresetting\u201d lower\u2010order fields via Calendar methods\u2014which in some\n    // cases (especially in DST transition days) can cause a one\u2010hour jump\u2014we\n    // recompute the truncated time using either modulus arithmetic (for second/minute)\n    // or by explicitly clearing the lower fields (for hour and day). This \u201cfreezes\u201d\n    // the time so that later calls to set() on a field don\u2019t inadvertently change the\n    // underlying time.\n    switch (field) {\n        case Calendar.MILLISECOND:\n            // Nothing to truncate below milliseconds.\n            break;\n        case Calendar.SECOND: {\n            // Truncate milliseconds.\n            long t = val.getTimeInMillis();\n            t = t - (t % 1000);\n            val.setTimeInMillis(t);\n            break;\n        }\n        case Calendar.MINUTE: {\n            // Truncate seconds and milliseconds.\n            long t = val.getTimeInMillis();\n            t = t - (t % 60000);  // 60,000 ms = 1 minute\n            val.setTimeInMillis(t);\n            break;\n        }\n        case Calendar.HOUR_OF_DAY:\n        case Calendar.HOUR:\n        case Calendar.AM_PM: {\n            // Clear minutes, seconds and milliseconds.\n            // (Using set() here is safe once we \u201csync\u201d the calendar\u2019s internal time.)\n            val.set(Calendar.MINUTE, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MILLISECOND, 0);\n            // Force a recomputation of the time fields.\n            val.setTimeInMillis(val.getTimeInMillis());\n            break;\n        }\n        case Calendar.DATE:\n        case Calendar.DAY_OF_MONTH:\n        case Calendar.DAY_OF_YEAR: {\n            // For truncation to the date, clear the entire time\u2010of\u2010day.\n            val.set(Calendar.HOUR_OF_DAY, 0);\n            val.set(Calendar.MINUTE, 0);\n            val.set(Calendar.SECOND, 0);\n            val.set(Calendar.MILLISECOND, 0);\n            val.setTimeInMillis(val.getTimeInMillis());\n            break;\n        }\n        // (Other fields such as MONTH or YEAR are not affected by the LANG-59 bug.)\n        default:\n            // No manual truncation necessary.\n            break;\n    }\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n    \n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // This is our field... we stop looping.\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // Special case: if the date is the 1st, round up to the 16th;\n                        // otherwise subtract 15 days and add one month.\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // Add one unit to the highest field in this group.\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        // For groups that don\u2019t contain the field, remove the amount already set.\n        int offset = 0;\n        boolean offsetSet = false;\n        // Some fields require special rounding rules.\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    // Subtract 1 (since DATE is 1\u2013based), then adjust.\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        // Remove the offset from this field.\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}