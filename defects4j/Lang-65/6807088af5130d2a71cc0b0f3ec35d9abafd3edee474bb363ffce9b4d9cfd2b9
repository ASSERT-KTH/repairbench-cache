{
    "generation": "    /**\n     * <p>Internal calculation method.</p>\n     *\n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        // Note: fields is ordered from smaller units (MILLI..) to larger (YEAR, ERA)\n        // {MILLISECOND}, {SECOND}, {MINUTE}, {HOUR_OF_DAY, HOUR}, {DATE, DAY_OF_MONTH, AM_PM}, ...\n\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods. The fix below uses val.add() instead of val.set()\n        // for time fields to avoid potential bugs, particularly related to DST transitions.\n\n        // truncate milliseconds (handled by loop unless target is MILLISECOND)\n        // truncate seconds (handled by loop unless target is SECOND)\n        // truncate minutes (handled by loop unless target is MINUTE)\n        // reset time (partially handled by loop for HOUR fields)\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        // Iterate through field groups from smaller units (milliseconds) to larger ones\n        for (int i = 0; i < fields.length; i++) {\n            int currentFieldGroupPrimary = fields[i][0]; // The primary field for this group (e.g., MILLISECOND, SECOND, ...)\n\n            // Check if the target field is part of the current field group\n            boolean fieldFound = false;\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    fieldFound = true;\n                    break;\n                }\n            }\n\n            // If the target field is found in the current group\n            if (fieldFound) {\n                // Apply rounding if requested and roundUp flag is set from previous smaller field processing\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // Special case rounding for SEMI_MONTH\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // General rounding: add 1 to the primary field of the target group\n                        val.add(currentFieldGroupPrimary, 1);\n                    }\n                }\n                // Modifications complete, exit the method\n                return;\n            }\n\n            // --- Truncation Logic ---\n            // If the target field hasn't been found yet, this group represents a field\n            // smaller than the target field. Truncate its value.\n            int offset = 0;\n            boolean offsetSet = false;\n\n            // Special handling for SEMI_MONTH and AM_PM targets influences how\n            // rounding is determined for smaller fields like DATE or HOUR_OF_DAY.\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    // Use DATE value to determine rounding for SEMI_MONTH target\n                    if (currentFieldGroupPrimary == Calendar.DATE) {\n                        offset = val.get(Calendar.DATE) - 1; // Offset from day 1\n                        if (offset >= 15) {\n                            offset -= 15; // Offset within the second half of the month\n                        }\n                        // Round up if past day 7/22 (roughly half of 15 days)\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    // Use HOUR_OF_DAY value to determine rounding for AM_PM target\n                     if (currentFieldGroupPrimary == Calendar.HOUR_OF_DAY) {\n                        offset = val.get(Calendar.HOUR_OF_DAY); // Raw hour value\n                        if (offset >= 12) {\n                            offset -= 12; // Offset within the AM/PM half\n                        }\n                        // Round up if past 6 hours (half of 12 hours)\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n\n            // Default calculation for offset and rounding flag if not set by special case\n            if (!offsetSet) {\n                int min = val.getActualMinimum(currentFieldGroupPrimary);\n                int max = val.getActualMaximum(currentFieldGroupPrimary);\n                // Offset is the value relative to the minimum for this field\n                offset = val.get(currentFieldGroupPrimary) - min;\n                // Determine rounding based on whether the value is past the midpoint\n                roundUp = offset > ((max - min) / 2);\n            }\n\n            // Truncate the current field group: Set the field to its minimum value.\n            // This is achieved by subtracting the calculated offset.\n            if (offset != 0) {\n                // LANG-59 fix: Use add() for time fields (MILLISECOND, SECOND, MINUTE, HOUR_OF_DAY)\n                // as set() can cause issues with DST.\n                if (currentFieldGroupPrimary == Calendar.MILLISECOND ||\n                    currentFieldGroupPrimary == Calendar.SECOND ||\n                    currentFieldGroupPrimary == Calendar.MINUTE ||\n                    currentFieldGroupPrimary == Calendar.HOUR_OF_DAY) // HOUR_OF_DAY is primary for the hour group\n                {\n                    val.add(currentFieldGroupPrimary, -offset);\n                } else {\n                    // For non-time fields (DATE, MONTH, YEAR), using set() to the minimum value is generally safe.\n                    // Calculate minimum value: currentValue - offset\n                    val.set(currentFieldGroupPrimary, val.get(currentFieldGroupPrimary) - offset);\n                }\n            }\n            // The roundUp flag determined here will be used when the target field group is processed.\n        }\n\n        // This part should not be reached if the field is supported\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}