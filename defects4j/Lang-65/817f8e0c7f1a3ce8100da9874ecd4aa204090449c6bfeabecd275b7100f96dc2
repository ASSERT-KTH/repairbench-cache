{
    "generation": "    /**\n     * <p>Internal calculation method.</p>\n     *\n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n\n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // The logic for LANG-59 is integrated into the main loop below.\n        // Setting individual fields (especially MILLISECOND, SECOND, MINUTE)\n        // can cause Calendar to recalculatesaved state fields triggering bad\n        // behaviour around DST jumps. Following the set sets the time field\n        // which can be reset without this issue.\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false;\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    //This is our field... we stop looping\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            //  we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        // ----------------- Fix for LANG-440 ---------------------- START ---------------\n                        // LANG-440: Improve rounding support for hour fields\n                        } else if (field == Calendar.AM_PM) {\n                            // This is a special case that's hard to generalize\n                            // If the time is 0, we round up to 12, otherwise\n                            //  we subtract 12 hours and add 1 day\n                            if (val.get(Calendar.HOUR_OF_DAY) == 0) {\n                                val.add(Calendar.HOUR_OF_DAY, 12);\n                            } else {\n                                val.add(Calendar.HOUR_OF_DAY, -12);\n                                val.add(Calendar.DATE, 1);\n                            }\n                        // ----------------- Fix for LANG-440 ---------------------- END ---------------\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(fields[i][0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            int currentField = fields[i][0]; // The primary field for this level\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (currentField == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtrace 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (currentField == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(currentField);\n                int max = val.getActualMaximum(currentField);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(currentField) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                // Using multiplication avoids integer division potential issues\n                roundUp = offset * 2 > (max - min);\n            }\n            //We need to remove this field\n            if (offset != 0) { // Only modify if the field is not already at its minimum\n                // Set the field to the minimum value for truncation\n                val.set(currentField, val.getActualMinimum(currentField));\n\n                // --- LANG-59 Fix ---\n                // For these fields, setting them affects the millisecond value\n                // of the calendar and may cause problems with DST. Reset the millisecond\n                // value by calling setTimeInMillis after the set. See LANG-59.\n                if (currentField == Calendar.MILLISECOND\n                 || currentField == Calendar.SECOND\n                 || currentField == Calendar.MINUTE) {\n                    val.setTimeInMillis(val.getTimeInMillis());\n                }\n                // --- End LANG-59 Fix ---\n            }\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}