{
    "generation": "/**\n * <p>Internal calculation method.</p>\n * \n * @param val  the calendar\n * @param field  the field constant\n * @param round  true to round, false to truncate\n * @throws ArithmeticException if the year is over 280 million\n */\nprivate static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // See http://issues.apache.org/jira/browse/LANG-59\n    // Instead of calling Calendar.set() on the sub-minute fields (milliseconds, seconds and minutes)\n    // which can trigger a DST bug (see the \"Demonstrate Problem\" test),\n    // we adjust the calendar\u2019s time in milliseconds directly.\n    if (field != Calendar.MILLISECOND) {\n        long timeInMillis = val.getTimeInMillis();\n        if (field == Calendar.SECOND) {\n            // For SECOND truncation, remove the milliseconds part.\n            timeInMillis -= (timeInMillis % 1000);\n        } else if (field == Calendar.MINUTE) {\n            // For MINUTE truncation, remove seconds and milliseconds.\n            timeInMillis -= (timeInMillis % 60000);\n        } else {\n            // For any field coarser than MINUTE (e.g. HOUR, DATE, etc.),\n            // remove the minutes, seconds and milliseconds from the current time.\n            int minute = val.get(Calendar.MINUTE);\n            int second = val.get(Calendar.SECOND);\n            int milli = val.get(Calendar.MILLISECOND);\n            long offset = minute * 60000L + second * 1000L + milli;\n            timeInMillis -= offset;\n        }\n        val.setTimeInMillis(timeInMillis);\n        // Force recomputation of all calendar fields based on the new time.\n        val.getTime();\n    }\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n    \n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // This is our field: if rounding is needed, add one unit.\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // Special case: if the date is 1, round up to 16; otherwise subtract 15 days and add 1 month.\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // For any other field, add one unit.\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        // For fields that are less significant than the target field,\n        // we need to zero them out.\n        int offset = 0;\n        boolean offsetSet = false;\n        // Some fields require special rounding rules.\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    // Adjust DATE field specially: subtract 1 because dates start at 1.\n                    offset = val.get(Calendar.DATE) - 1;\n                    // If the date is 15 or above, then subtract 15 days first.\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    // Adjust HOUR_OF_DAY specially for AM_PM rounding.\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            // Calculate how far the current field is from its minimum allowed value.\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        // Remove the offset for this field.\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}