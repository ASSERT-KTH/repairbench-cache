{
    "generation": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n\n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // See http://issues.apache.org/jira/browse/LANG-59\n    // Instead of calling individual set() methods (which can trigger DST bugs),\n    // we recalc the timeInMillis for the fields below the one being modified.\n    long millis = val.getTimeInMillis();\n    // The total offset in milliseconds (raw offset plus DST adjustment)\n    int offset = val.get(Calendar.ZONE_OFFSET) + val.get(Calendar.DST_OFFSET);\n    switch (field) {\n        case Calendar.MILLISECOND:\n            // already the lowest unit; nothing to truncate\n            break;\n        case Calendar.SECOND:\n            // truncate milliseconds: a second always has 1000 ms\n            millis = millis - ((millis + offset) % 1000);\n            val.setTimeInMillis(millis);\n            break;\n        case Calendar.MINUTE:\n            // truncate seconds and milliseconds (1 minute = 60000ms)\n            millis = millis - ((millis + offset) % 60000);\n            val.setTimeInMillis(millis);\n            break;\n        case Calendar.HOUR_OF_DAY:\n        case Calendar.HOUR:\n            // truncate minutes, seconds and milliseconds (1 hour = 3600000ms)\n            millis = millis - ((millis + offset) % 3600000);\n            val.setTimeInMillis(millis);\n            break;\n        case Calendar.DATE:\n        case Calendar.DAY_OF_MONTH:\n        case Calendar.DAY_OF_YEAR:\n            // truncate time within the day (1 day = 86400000ms)\n            millis = millis - ((millis + offset) % 86400000);\n            val.setTimeInMillis(millis);\n            break;\n        default:\n            // For other fields, we leave the calendar unchanged here\n            break;\n    }\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // We've reached our target field.\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // Special case: if the date is 1, round up to 16;\n                        // otherwise subtract 15 days and add one month.\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // For other fields, add one unit to round up.\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        // For fields that are lower than the one to be modified,\n        // determine how much to roll down (i.e. truncate).\n        int localOffset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    // Subtract one because dates start at 1.\n                    localOffset = val.get(Calendar.DATE) - 1;\n                    if (localOffset >= 15) {\n                        localOffset -= 15;\n                    }\n                    roundUp = localOffset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    localOffset = val.get(Calendar.HOUR_OF_DAY);\n                    if (localOffset >= 12) {\n                        localOffset -= 12;\n                    }\n                    roundUp = localOffset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int actualMin = val.getActualMinimum(fields[i][0]);\n            int actualMax = val.getActualMaximum(fields[i][0]);\n            localOffset = val.get(fields[i][0]) - actualMin;\n            roundUp = localOffset > ((actualMax - actualMin) / 2);\n        }\n        // Subtract the lower-field offset.\n        val.set(fields[i][0], val.get(fields[i][0]) - localOffset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}