{
    "generation": "private static void modify(Calendar val, int field, boolean round) {\n    if (val.get(Calendar.YEAR) > 280000000) {\n        throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    \n    // ----------------- Fix for LANG-59 ---------------------- START ---------------\n    // Instead of calling Calendar.set to clear lower fields (which may cause\n    // unexpected DST changes), we adjust the time in milliseconds manually.\n    // For truncating/rounding to one of the following fields, we define:\n    // Level 0: MILLISECOND (no change)\n    // Level 1: SECOND       (truncate milliseconds)\n    // Level 2: MINUTE       (truncate seconds and milliseconds)\n    // Level 3: HOUR         (truncate minutes, seconds and milliseconds)\n    // Level 4: DATE         (truncate hours, minutes, seconds and milliseconds,\n    //                         using an offset to adjust for the local time zone)\n    int truncateLevel = -1;\n    switch(field) {\n        case Calendar.MILLISECOND:\n            truncateLevel = 0;\n            break;\n        case Calendar.SECOND:\n            truncateLevel = 1;\n            break;\n        case Calendar.MINUTE:\n            truncateLevel = 2;\n            break;\n        case Calendar.HOUR:\n        case Calendar.HOUR_OF_DAY:\n            truncateLevel = 3;\n            break;\n        case Calendar.DATE:\n            truncateLevel = 4;\n            break;\n        default:\n            truncateLevel = -1; // for higher fields we let the loop below work.\n    }\n    if(truncateLevel != -1) {\n        long time = val.getTimeInMillis();\n        switch(truncateLevel) {\n            case 0:\n                // Nothing to do.\n                break;\n            case 1: {\n                // Truncate milliseconds. Unit is 1000 ms.\n                long unit = 1000L;\n                long remainder = time % unit;\n                if (time < 0) {\n                    remainder = (unit + remainder) % unit;\n                }\n                if(round) {\n                    if(remainder >= unit/2) {\n                        time += (unit - remainder);\n                    } else {\n                        time -= remainder;\n                    }\n                } else {\n                    time -= remainder;\n                }\n                break;\n            }\n            case 2: {\n                // Truncate seconds and milliseconds. Unit is 60000 ms.\n                long unit = 60000L;\n                long remainder = time % unit;\n                if(time < 0) {\n                    remainder = (unit + remainder) % unit;\n                }\n                if(round) {\n                    if(remainder >= unit/2) {\n                        time += (unit - remainder);\n                    } else {\n                        time -= remainder;\n                    }\n                } else {\n                    time -= remainder;\n                }\n                break;\n            }\n            case 3: {\n                // Truncate minutes, seconds and milliseconds.\n                // Use local wall time by adding the time zone offset.\n                long unit = 3600000L;\n                int offset = val.get(Calendar.ZONE_OFFSET) + val.get(Calendar.DST_OFFSET);\n                long t = time + offset;\n                long remainder = t % unit;\n                if(t < 0) {\n                    remainder = (unit + remainder) % unit;\n                }\n                if(round) {\n                    if(remainder >= unit/2) {\n                        t += (unit - remainder);\n                    } else {\n                        t -= remainder;\n                    }\n                } else {\n                    t -= remainder;\n                }\n                time = t - offset;\n                break;\n            }\n            case 4: {\n                // Truncate hours, minutes, seconds and milliseconds.\n                // Use the local offset so that we \"cut\" at midnight.\n                long unit = 86400000L;\n                int offset = val.get(Calendar.ZONE_OFFSET) + val.get(Calendar.DST_OFFSET);\n                long t = time + offset;\n                long remainder = t % unit;\n                if(t < 0) {\n                    remainder = (unit + remainder) % unit;\n                }\n                if(round) {\n                    if(remainder >= unit/2) {\n                        t += (unit - remainder);\n                    } else {\n                        t -= remainder;\n                    }\n                } else {\n                    t -= remainder;\n                }\n                time = t - offset;\n                break;\n            }\n        }\n        val.setTimeInMillis(time);\n    }\n    // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n    boolean roundUp = false;\n    for (int i = 0; i < fields.length; i++) {\n        for (int j = 0; j < fields[i].length; j++) {\n            if (fields[i][j] == field) {\n                // This is our field... we stop looping\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        // Special case: if the date is 1, round up to 16; otherwise,\n                        // subtract 15 days then add 1 month.\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        // Add one to the primary field because the discarded portion\n                        // caused a round up.\n                        val.add(fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        // For fields that are not trivial to round, calculate an offset.\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case DateUtils.SEMI_MONTH:\n                if (fields[i][0] == Calendar.DATE) {\n                    // Special treatment: subtract 1 (since DATE starts at 1)\n                    offset = val.get(Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case Calendar.AM_PM:\n                if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n                    offset = val.get(Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(fields[i][0]);\n            int max = val.getActualMaximum(fields[i][0]);\n            offset = val.get(fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        // Subtract the calculated offset from the field.\n        val.set(fields[i][0], val.get(fields[i][0]) - offset);\n    }\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}