{
    "generation": "    /**\n     * <p>Internal calculation method.</p>\n     * \n     * @param val  the calendar\n     * @param field  the field constant\n     * @param round  true to round, false to truncate\n     * @throws ArithmeticException if the year is over 280 million\n     */\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n        \n\n        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n        // see http://issues.apache.org/jira/browse/LANG-59\n        //\n        // Manually truncate milliseconds, seconds and minutes, rather than using\n        // Calendar methods, to avoid issues with Daylight Saving Time transitions.\n        // This block handles explicit truncation for time fields.\n\n        long currentMillis = val.getTimeInMillis();\n\n        // Constants are not provided in the snippet, assuming their existence in DateUtils:\n        final long MILLIS_PER_SECOND = 1000L;\n        final long MILLIS_PER_MINUTE = 60L * MILLIS_PER_SECOND;\n        final long MILLIS_PER_HOUR = 60L * MILLIS_PER_MINUTE;\n\n\n        // If we are truncating (not rounding) and the target field implies zeroing out\n        // milliseconds, seconds, or minutes, we do it directly using setTimeInMillis.\n        // This avoids Calendar.set() method's potential for DST issues.\n\n        // This logic replaces the implicit truncation for these fields in the main loop\n        // when 'round' is false.\n\n        if (!round) { // Only apply this explicit truncation for truncate mode\n            if (field == Calendar.SECOND || field == Calendar.MINUTE || field == Calendar.HOUR_OF_DAY ||\n                field == Calendar.HOUR || field == Calendar.AM_PM || field == Calendar.DATE ||\n                field == Calendar.DAY_OF_MONTH || field == Calendar.DAY_OF_YEAR ||\n                field == Calendar.DAY_OF_WEEK || field == Calendar.DAY_OF_WEEK_IN_MONTH ||\n                field == Calendar.WEEK_OF_YEAR || field == Calendar.WEEK_OF_MONTH ||\n                field == Calendar.MONTH || field == Calendar.YEAR || field == Calendar.ERA) {\n                \n                currentMillis = currentMillis - (currentMillis % MILLIS_PER_SECOND); // Truncate to second\n            }\n            if (field == Calendar.MINUTE || field == Calendar.HOUR_OF_DAY ||\n                field == Calendar.HOUR || field == Calendar.AM_PM || field == Calendar.DATE ||\n                field == Calendar.DAY_OF_MONTH || field == Calendar.DAY_OF_YEAR ||\n                field == Calendar.DAY_OF_WEEK || field == Calendar.DAY_OF_WEEK_IN_MONTH ||\n                field == Calendar.WEEK_OF_YEAR || field == Calendar.WEEK_OF_MONTH ||\n                field == Calendar.MONTH || field == Calendar.YEAR || field == Calendar.ERA) {\n                \n                currentMillis = currentMillis - (currentMillis % MILLIS_PER_MINUTE); // Truncate to minute\n            }\n            if (field == Calendar.HOUR_OF_DAY ||\n                field == Calendar.HOUR || field == Calendar.AM_PM || field == Calendar.DATE ||\n                field == Calendar.DAY_OF_MONTH || field == Calendar.DAY_OF_YEAR ||\n                field == Calendar.DAY_OF_WEEK || field == Calendar.DAY_OF_WEEK_IN_MONTH ||\n                field == Calendar.WEEK_OF_YEAR || field == Calendar.WEEK_OF_MONTH ||\n                field == Calendar.MONTH || field == Calendar.YEAR || field == Calendar.ERA) {\n                \n                currentMillis = currentMillis - (currentMillis % MILLIS_PER_HOUR); // Truncate to hour\n            }\n            // Apply the initial truncation calculated\n            val.setTimeInMillis(currentMillis);\n        }\n        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n\n        boolean roundUp = false; // This 'roundUp' is for the *next* higher field\n        for (int i = 0; i < fields.length; i++) {\n            int currentFieldType = fields[i][0]; // The field type being processed in this iteration\n\n            // Check if any field in the current group 'fields[i]' matches the target 'field'\n            boolean isTargetFieldGroup = false;\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    isTargetFieldGroup = true;\n                    break;\n                }\n            }\n\n            if (isTargetFieldGroup) {\n                // This is our target field group.\n                if (round && roundUp) { // 'roundUp' comes from the *previous* iteration (lower field)\n                    if (field == DateUtils.SEMI_MONTH) {\n                        //This is a special case that's hard to generalize\n                        //If the date is 1, we round up to 16, otherwise\n                        //  we subtract 15 days and add 1 month\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        //We need to add one to this field since the\n                        //  last number causes us to round up\n                        val.add(currentFieldType, 1); // Use currentFieldType (e.g., Calendar.MONTH for SEMI_MONTH)\n                    }\n                }\n                return; // We stop processing at the target field or its group.\n            }\n\n            // This block is for fields *lower* than the target field, or for non-target fields\n            // that are handled by the general truncation/rounding logic.\n            int offset = 0;\n            boolean offsetSet = false;\n            // These are special types of fields that require different rounding rules\n            switch (field) { // This switch correctly checks the *target* field, not currentFieldType\n                case DateUtils.SEMI_MONTH:\n                    if (currentFieldType == Calendar.DATE) { // If we're processing the DATE field, and target is SEMI_MONTH\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtract 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7; // This roundUp influences the next higher field (MONTH)\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (currentFieldType == Calendar.HOUR_OF_DAY) { // If we're processing HOUR_OF_DAY, and target is AM_PM\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6; // This roundUp influences the next higher field (DATE)\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(currentFieldType);\n                int max = val.getActualMaximum(currentFieldType);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(currentFieldType) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2); // This roundUp influences the *next* higher field\n            }\n            \n            // We need to remove this field (i.e., truncate it to its minimum value)\n            // This applies to fields lower than the target field.\n            // For time fields (MILLISECOND, SECOND, MINUTE), the explicit LANG-59 fix above\n            // already handled truncation using setTimeInMillis().\n            // For rounding, or for higher fields, the original val.set is generally acceptable.\n            val.set(currentFieldType, val.get(currentFieldType) - offset);\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}