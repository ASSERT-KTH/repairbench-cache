{
    "generation": "    public void captureArgumentsFrom(Invocation i) {\n        Object[] actualArguments = i.getArguments();\n        int actualArgumentsCount = actualArguments.length;\n\n        int k = 0;\n        for (Matcher m : matchers) {\n            if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n                // Determine if this is an AnyVararg matcher, potentially wrapped by LocalizedMatcher\n                boolean isAnyVarargMatcher = false;\n                org.mockito.internal.matchers.Matcher currentMatcher = m;\n                if (m instanceof org.mockito.internal.matchers.LocalizedMatcher) {\n                    currentMatcher = ((org.mockito.internal.matchers.LocalizedMatcher) m).getMatcher();\n                }\n                if (currentMatcher instanceof org.mockito.internal.matchers.AnyVararg) {\n                    isAnyVarargMatcher = true;\n                }\n\n                if (k >= actualArgumentsCount) {\n                    // We've run out of actual arguments from the invocation.\n                    // This can happen if the method was called with fewer arguments than there are matchers,\n                    // or if it was called with no arguments (e.g., mock.foo()).\n                    \n                    // If the current matcher is an AnyVararg matcher and there are no more arguments,\n                    // it implies it should capture an empty array representing the varargs.\n                    if (isAnyVarargMatcher) {\n                        ((org.mockito.internal.matchers.CapturesArguments) m).captureFrom(new Object[0]);\n                    }\n                    // For other CapturesArguments matchers, if there's no corresponding actual argument\n                    // at this position, we simply do nothing (skip calling captureFrom).\n                } else {\n                    // There is a corresponding actual argument. Capture it.\n                    ((org.mockito.internal.matchers.CapturesArguments) m).captureFrom(actualArguments[k]);\n                }\n            }\n            k++;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}