{
    "generation": "public void captureArgumentsFrom(Invocation i) {\n    Object[] arguments = i.getArguments();\n    int matcherCount = matchers.size();\n\n    // In the normal (non-varargs) case, the number of matchers equals the arguments count.\n    if (arguments.length == matcherCount) {\n        for (int k = 0; k < matcherCount; k++) {\n            Matcher m = matchers.get(k);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(arguments[k]);\n            }\n        }\n    } else {\n        // Otherwise we assume a varargs call.\n        // In a varargs method the matcher list is built from the fixed arguments plus one matcher \n        // for all varargs.  (It might happen that the varargs matcher must capture an empty array.)\n        int fixedArgCount = matcherCount - 1;\n\n        // Capture fixed (non-varargs) arguments if present.\n        for (int k = 0; k < fixedArgCount && k < arguments.length; k++) {\n            Matcher m = matchers.get(k);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(arguments[k]);\n            }\n        }\n\n        // The last matcher is for the varargs.\n        Matcher varargsMatcher = matchers.get(matcherCount - 1);\n        Object[] varargs;\n        if (arguments.length > fixedArgCount) {\n            int varargsLength = arguments.length - fixedArgCount;\n            varargs = new Object[varargsLength];\n            System.arraycopy(arguments, fixedArgCount, varargs, 0, varargsLength);\n        } else {\n            varargs = new Object[0];\n        }\n        if (varargsMatcher instanceof CapturesArguments) {\n            ((CapturesArguments) varargsMatcher).captureFrom(varargs);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}