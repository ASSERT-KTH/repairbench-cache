{
    "generation": "public void captureArgumentsFrom(Invocation i) {\n    Object[] args = i.getArguments();\n    Method method = i.getMethod();\n    if (method.isVarArgs()) {\n        // For varargs methods, the last matcher corresponds to the entire varargs array.\n        // The fixed (non-varargs) part has length = total parameters - 1.\n        int fixedCount = method.getParameterTypes().length - 1;\n        for (int k = 0; k < matchers.size(); k++) {\n            Matcher m = matchers.get(k);\n            if (!(m instanceof CapturesArguments)) {\n                continue;\n            }\n            if (k < fixedCount) {\n                // For fixed arguments, only capture if an argument exists\n                if (k < args.length) {\n                    ((CapturesArguments) m).captureFrom(args[k]);\n                }\n            } else {\n                // For the varargs matcher:\n                // When no varargs were passed, args may have only the fixed arguments.\n                Object varargs;\n                if (args.length == fixedCount) {\n                    varargs = new Object[0];\n                } else {\n                    // Otherwise, the varargs are stored at index fixedCount.\n                    varargs = args[fixedCount];\n                }\n                ((CapturesArguments) m).captureFrom(varargs);\n            }\n        }\n    } else {\n        // For non-varargs methods, only process matchers for which an argument exists.\n        for (int k = 0; k < matchers.size(); k++) {\n            Matcher m = matchers.get(k);\n            if (m instanceof CapturesArguments && k < args.length) {\n                ((CapturesArguments) m).captureFrom(args[k]);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}