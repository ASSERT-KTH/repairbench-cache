{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double result;\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // check ranges. The operands must be convertible to 32-bit integers.\n      // We restrict the left operand to the signed 32-bit range for predictability,\n      // as values outside this range after ToInt32 conversion might surprise users.\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      // The shift amount is coerced ToUint32 and masked to 5 bits (0-31).\n      // We only fold if the original shift amount is representable as an\n      // integer in the range [0, 32), as fractional or out-of-range shifts\n      // might indicate programmer error or mask unexpected behavior.\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      // Convert the numbers to ints. JavaScript bitwise operations\n      // perform ToInt32 on operands. Report error for fractional values\n      // as they are often unintended in bitwise contexts.\n      int lvalInt = (int) lval;\n      if (lvalInt != lval) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      // In JS, the shift amount is masked to 5 bits (0-31).\n      // rvalInt &= 0x1F; // This is technically redundant due to the rval check above.\n\n      switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript's unsigned right shift results in a value between\n          // 0 and 2^32 - 1. Java's >>> operator performs the correct bitwise\n          // operation, but the result is an int. To represent the unsigned\n          // result correctly as a double (which JavaScript numbers are),\n          // we convert the int result bits to a long using a mask,\n          // ensuring the value is interpreted as unsigned.\n          int unsignedResult = lvalInt >>> rvalInt;\n          // Convert the unsigned 32-bit value to double.\n          result = (unsignedResult & 0xFFFFFFFFL);\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      Node newNumber = Node.newNumber(result);\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}