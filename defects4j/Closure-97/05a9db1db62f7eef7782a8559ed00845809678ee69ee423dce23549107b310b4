{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double result;\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // check ranges.  We do not do anything that would clip the double to\n      // a 32-bit range, since the user likely does not intend that.\n      // While JavaScript's ToInt32 operation handles clipping, we follow\n      // the compiler's apparent intent to warn on potentially unexpected clipping.\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      // only the lower 5 bits are used when shifting in JavaScript (mask with 0x1F).\n      // However, the compiler wants to warn for shifts outside [0,32).\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      // Convert the numbers to ints. JavaScript's ToInt32/ToUint32 truncates.\n      // The compiler requires integer operands for folding.\n      int lvalInt = (int) lval;\n      if (lvalInt != lval) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      // The shift amount is masked with 0x1F in JavaScript.\n      // Although we check for [0, 32) above, use the masked value\n      // for actual calculation to match JS behavior precisely for valid inputs.\n      int shiftAmount = rvalInt & 0x1F;\n\n      switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << shiftAmount;\n          break;\n        case Token.RSH:\n          result = lvalInt >> shiftAmount;\n          break;\n        case Token.URSH:\n          // JavaScript's >>> operator returns an unsigned 32-bit result.\n          // Java's >>> performs the correct bitwise operation, but the result\n          // is treated as signed int. To get the correct numerical value\n          // matching JavaScript, we convert the resulting bits to a long,\n          // treating them as unsigned, and then to a double.\n          int intResult = lvalInt >>> shiftAmount;\n          result = intResult & 0xFFFFFFFFL; // Treat bits as unsigned 32-bit\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      Node newNumber = Node.newNumber(result);\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}