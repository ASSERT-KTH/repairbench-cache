{
    "generation": "/**\n * Try to fold shift operations\n */\nprivate Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n\n    // Convert the numbers to ints and check if they are actually integers\n    int lvalInt = (int) lval;\n    int rvalInt = (int) rval;\n\n    if (lvalInt != lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n\n    if (rvalInt != rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n\n    // check ranges.  We do not do anything that would clip the double to\n    // a 32-bit range, since the user likely does not intend that.\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n\n    // only the lower 5 bits are used when shifting, so don't do anything\n    // if the shift amount is outside [0,32)\n    if (!(rvalInt >= 0 && rvalInt < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n\n    double result;\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n        // lvalInt is signed, so mask to mimic JS >>> semantics.\n        result = ((long) lvalInt & 0xFFFFFFFFL) >>> rvalInt;\n        break;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n            Node.tokenToName(n.getType()));\n    }\n\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n\n    return newNumber;\n  }\n\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}