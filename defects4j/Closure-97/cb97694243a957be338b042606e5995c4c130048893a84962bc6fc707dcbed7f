{
    "generation": "/**\n * Try to fold shift operations\n */\nprivate Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n\n    // check ranges.  We do not do anything that would clip the double to\n    // a 32-bit range for LSH or RSH, since the user likely does not intend that.\n    // For URSH, JavaScript treats its operands as unsigned 32-bit.\n    boolean isUrsh = n.getType() == Token.URSH;\n\n    if (!isUrsh && !(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n\n    // only the lower 5 bits are used when shifting, so don't do anything\n    // if the shift amount is outside [0,32)\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n\n    // Convert the numbers to ints\n    int lvalInt = (int) lval;\n    if (lvalInt != lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n\n    int rvalInt = (int) rval;\n    if (rvalInt != rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n\n    double result;\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n        // In JavaScript, >>> produces a uint32 value, which (for negative numbers) is >= 2^31.\n        // In Java, >>> always produces a signed int in the range [0, 2^31-1], so we must\n        // promote to long, apply the mask, and convert to double for correct JS behavior.\n        // JavaScript: (-1) >>> 0 === 4294967295\n        long lvalUint32 = lvalInt & 0xFFFFFFFFL;\n        long r = (lvalUint32 >>> rvalInt) & 0xFFFFFFFFL;\n        result = (double) r;\n        break;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n            Node.tokenToName(n.getType()));\n    }\n\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n\n    return newNumber;\n  }\n\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}