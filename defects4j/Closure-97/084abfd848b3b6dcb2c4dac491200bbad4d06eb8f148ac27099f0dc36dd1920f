{
    "generation": "/**\n * Try to fold shift operations\n */\nprivate Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n\n    // Fractional operand checks first.\n    int lvalInt = (int) lval;\n    if (lvalInt != lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n\n    int rvalInt = (int) rval;\n    if (rvalInt != rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n\n    // Range check for left value: operand must be in int32 range.\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n\n    // Only lower 5 bits of shift amount are used; effective shift is masked.\n    // But report errors if outside JS spec defined bounds [0, 32).\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n\n    double result;\n    switch (n.getType()) {\n      case Token.LSH:\n        result = ((int) lval) << (rvalInt & 0x1F);\n        break;\n      case Token.RSH:\n        result = ((int) lval) >> (rvalInt & 0x1F);\n        break;\n      case Token.URSH:\n        // For >>>, Java applies zero-fill on 32-bit int,\n        // JavaScript converts this unsigned 32-bit number to double\n        result = ((int) lval) >>> (rvalInt & 0x1F);\n        // Interpret as unsigned: convert to long first, mask\n        if (result < 0) {\n          result += 0x100000000L;\n        }\n        break;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n            Node.tokenToName(n.getType()));\n    }\n\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n\n    return newNumber;\n  }\n\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}