{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // check ranges.  We do not do anything that would clip the double to\n      // a 32-bit range, since the user likely does not intend that.\n      // For URSH, JS allows full 32-bit unsigned; operands are always ToInt32.\n      // JavaScript applies ToInt32 to left operand for all shifts when folding.\n      // However, for error reporting, only values outside of valid integer range\n      // and that aren't exactly representable as an int should error.\n\n      // Only integers in the 32-bit range are valid for all bitwise/shift ops.\n      if (Double.isNaN(lval) || Double.isInfinite(lval) ||\n          lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      if (Double.isNaN(rval) || Double.isInfinite(rval) ||\n          rval < 0 || rval >= 32) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      int lvalInt = (int) lval;\n      if (lvalInt != lval) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      double result;\n      switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH: {\n          // JS always ToUint32(left) >>> ToUint32(right)\n          // Need special handling because >>> in Java yields a signed int,\n          // but JavaScript >>> is unsigned (returns values up to 0xFFFFFFFF).\n          // So result needs to be long, then mask.\n          // But JS always processes left operand as ToInt32 (sign-extended).\n          // For negative int, >>> yields a large unsigned number.\n          // The correct way to mimic JS is:\n          // >>> operator returns a double, so we need to convert negative to unsigned\n          result = ((long) lvalInt & 0xFFFFFFFFL) >>> rvalInt;\n          // But, after >>> 0, JS returns a double (not int). Numbers >= 0x80000000\n          // are represented as positive doubles.\n          // So e.g. -1 >>> 0 = 4294967295\n          break;\n        }\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      Node newNumber = Node.newNumber(result);\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}