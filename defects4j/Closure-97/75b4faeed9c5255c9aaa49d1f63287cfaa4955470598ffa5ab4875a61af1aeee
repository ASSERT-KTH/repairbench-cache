{
    "generation": "  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // Check if operands are integers and within valid ranges.\n\n      // For LSH and RSH, the left operand must fit in 32 bits.\n      if (n.getType() != Token.URSH &&\n          (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      // For RSH, the left operand can be a Number outside 32-bit range as long as it's integer.\n      if (n.getType() == Token.RSH) {\n        if (lval != Math.floor(lval)) {\n          error(FRACTIONAL_BITWISE_OPERAND, left);\n          return n;\n        }\n        lval = Math.floor(lval);\n      }\n\n      // For all shifts, the right operand must be an integer between 0 and 31.\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      // Ensure both operands are integer.\n      if (left.getType() != Token.NUMBER || right.getType() != Token.NUMBER ||\n          lval != Math.floor(lval) || rval != Math.floor(rval)) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      int lvalInt = (int) lval;\n      int rvalInt = (int) rval;\n\n      // Convert to long to avoid integer overflow, especially for unsigned shifts.\n      long result;\n      switch (n.getType()) {\n        case Token.LSH:\n          result = (long) lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = (long) lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          result = (long) lvalInt >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      // If result fits into integer range and is non-negative, use Number.\n      // Otherwise, use long to avoid losing information.\n      if (result >= Integer.MIN_VALUE && result <= Integer.MAX_VALUE) {\n        Node newNumber = Node.newNumber((int) result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n        return newNumber;\n      } else {\n        // Handle unsigned shifts that result in large numbers.\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n        return newNumber;\n      }\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}