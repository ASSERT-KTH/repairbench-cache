{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // only the lower 5 bits are used when shifting, so don't do anything\n      // if the shift amount is outside [0,32)\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      int op = n.getType();\n\n      // Check ranges. For all shifts except >>>, the left operand must be in signed 32-bit range.\n      // For >>>, the operand is treated as an unsigned 32 bit integer.\n      if (op == Token.URSH) {\n        if (!(lval >= 0 && lval <= 0xFFFFFFFFL)) {\n          error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n          return n;\n        }\n        if (lval != Math.floor(lval)) {\n          error(FRACTIONAL_BITWISE_OPERAND, left);\n          return n;\n        }\n      } else {\n        if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n          error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n          return n;\n        }\n        int lvalInt = (int) lval;\n        if (lvalInt != lval) {\n          error(FRACTIONAL_BITWISE_OPERAND, left);\n          return n;\n        }\n      }\n\n      double result;\n      switch (op) {\n        case Token.LSH:\n          result = ((int) lval) << rvalInt;\n          break;\n        case Token.RSH:\n          result = ((int) lval) >> rvalInt;\n          break;\n        case Token.URSH:\n          // In JavaScript, >>> is unsigned 32-bit. Java doesn't have unsigned ints,\n          // so use long to hold the unsigned value, and mask input to 32 bits.\n          // Careful: (int)0xFFFFFFFF == -1 in Java, so:\n          long leftUInt32 = ((long) lval) & 0xFFFFFFFFL;\n          long res = leftUInt32 >>> rvalInt;\n          // match JS >>>: result is unsigned 32-bit int, but JS number so as double.\n          result = (double) res;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      Node newNumber = Node.newNumber(result);\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}