{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double result;\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // check ranges. We do not do anything that would clip the double to\n      // a 32-bit range, since the user likely does not intend that.\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      // only the lower 5 bits are used when shifting (for right shift, mask to 31 for URSH)\n      if (n.getType() == Token.URSH) {\n        if (!(rval >= 0 && rval <= 31)) {\n          error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n          return n;\n        }\n      } else if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      // Convert the numbers to ints\n      int lvalInt = (int) lval;\n      if (lvalInt != lval) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      switch (n.getType()) {\n        case Token.LSH:\n          // Mask the shift amount to 5 bits like JavaScript does\n          rvalInt &= 0x1F;\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          // Mask the shift amount to 5 bits like JavaScript does\n          rvalInt &= 0x1F;\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // For URSH, we need to handle negative numbers correctly by treating them as unsigned\n          // Mask shift amount to 5 bits like JavaScript does (but actually max 31 for URSH)\n          rvalInt &= 0x1F;\n          int unsignedVal = lvalInt >>> 0; // Convert to unsigned by masking to 32 bits\n          result = unsignedVal >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      Node newNumber = Node.newNumber(result);\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}