{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double result;\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // check ranges.  We do not do anything that would clip the double to\n      // a 32-bit range, since the user likely does not intend that.\n      // JavaScript VMs would wrap overflows, but we don't handle that.\n      // TODO(johnlenz): Handle this case. BITWISE_OPERAND_OUT_OF_RANGE\n      // error expects the original Node.\n      // http://b/5669240\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      // Check ranges. Only the lower 5 bits of the shift amount are used in\n      // JavaScript. The compile should not fold shifts by amounts outside\n      // the lower 5 bits, as the user likely does not intend the shift amount\n      // modulo 32 behavior.\n      if (!(rval >= 0 && rval < 32)) {\n        // http://b/5669240\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      // Convert the numbers to ints\n      int lvalInt = (int) lval;\n      if (lvalInt != lval) {\n        // http://b/5669240\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        // http://b/5669240\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      // The shift amount is coerced to an unsigned 32-bit integer, but the\n      // JS spec says that only the lower 5 bits are used. This is already\n      // enforced by the check above.\n\n      switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript performs >>> on 32-bit integers and the result is\n          // treated as an unsigned 32-bit integer. Java performs >>> on signed\n          // integers. To emulate JavaScript's behavior, we cast the result\n          // of Java's >>> to long and mask it with 0xFFFFFFFFL to ensure\n          // the value is interpreted as unsigned before converting to double.\n          long unsignedResult = (lvalInt >>> rvalInt) & 0xFFFFFFFFL;\n          result = unsignedResult;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      Node newNumber = Node.newNumber(result);\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}