{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double result;\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // check ranges.  We do not do anything that would clip the double to\n      // a 32-bit range, since the user likely does not intend that.\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      // only the lower 5 bits are used when shifting, so don't do anything\n      // if the shift amount is outside [0,32)\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      // Convert the numbers to ints\n      int lvalInt = (int) lval;\n      if (lvalInt != lval) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      // Perform the operation in a way that matches JavaScript's 32-bit semantics\n      switch (n.getType()) {\n        case Token.LSH:\n          result = ((long)lvalInt << rvalInt) & 0xFFFFFFFFL;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // For unsigned right shift, we need to handle it as an unsigned 32-bit value\n          long unsignedVal = lvalInt & 0xFFFFFFFFL;\n          result = unsignedVal >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      // For LSH and URSH, we might need to convert to double properly\n      // For LSH, if the result overflows 32 bits, we need to sign-extend\n      if (n.getType() == Token.LSH) {\n        // If the shift count is less than 32, we've already masked to 32 bits\n        // If shift count is 0, we keep the original value\n        // Otherwise, if shift count is >= 32, result would be 0 in JavaScript\n        if (rvalInt >= 32) {\n          result = 0;\n        } else {\n          // The & 0xFFFFFFFFL above already ensures we have 32-bit result\n          // But we need to interpret it as signed 32-bit\n          long signedResult = (long)result;\n          if (signedResult >= 0x80000000L) {\n            signedResult -= 0x100000000L;\n          }\n          result = (double) signedResult;\n        }\n      } else if (n.getType() == Token.URSH) {\n        // For URSH, the result is already properly masked as unsigned 32-bit\n      } else {\n        // For regular RSH, result is already correct\n      }\n\n      Node newNumber = Node.newNumber(result);\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}