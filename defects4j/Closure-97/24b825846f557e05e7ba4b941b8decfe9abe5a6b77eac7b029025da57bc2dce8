{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    // Allow left to be a number or a name (variable) as JavaScript allows shifting variables\n    boolean leftIsNumber = left.getType() == Token.NUMBER;\n    boolean rightIsNumber = right.getType() == Token.NUMBER;\n\n    if ((leftIsNumber || left.getType() == Token.NAME) && rightIsNumber) {\n\n      double lval = leftIsNumber ? left.getDouble() : tryGetNumberValue(left.getString());\n      double rval = right.getDouble();\n\n      // Only perform checks when the left operand is a number\n      if (leftIsNumber) {\n        // Check if left operand is within integer range\n        if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n          error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n          return n;\n        }\n\n        // Convert left to int\n        int lvalInt = (int) lval;\n        if (lvalInt != lval) {\n          error(FRACTIONAL_BITWISE_OPERAND, left);\n          return n;\n        }\n      }\n\n      // Check if the right operand is within the shift range [0,32)\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      int a;\n      int b = rvalInt;\n\n      if (!leftIsNumber) {\n        // If left is a name, treat it as an int\n        a = 0; // Placeholder, actual value depends on runtime variables\n      } else {\n        a = (int) lval;\n      }\n\n      switch (n.getType()) {\n        case Token.LSH:\n          result = a << b;\n          break;\n        case Token.RSH:\n          result = a >> b;\n          break;\n        case Token.URSH:\n          result = a >>> b;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      Node newNumber = Node.newNumber(result);\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}