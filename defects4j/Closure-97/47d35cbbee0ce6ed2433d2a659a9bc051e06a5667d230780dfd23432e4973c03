{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double result;\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // check ranges.  We do not do anything that would clip the double to\n      // a 32-bit range, since the user likely does not intend that.\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      // check ranges.  We do not do anything that would clip the double to\n      // a 32-bit range, since the user likely does not intend that.\n      // only the lower 5 bits are used when shifting, but don't do anything\n      // if the shift amount is outside [0,32)\n      // Note: This does not handle the JS behavior for shift amounts\n      // outside the range [0, 32) because >>> and >> operators are not\n      // standards compliant in Java for large values.\n      // See https://code.google.com/p/closure-compiler/issues/detail?id=111&\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      // Convert the numbers to ints\n      int lvalInt = (int) lval;\n      if (lvalInt != lval) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      // In JS, the operands are converted to 32-bit integers, the shift\n      // amount is used modulo 32.\n\n      // JavaScript requires the shift amount to be restricted to the range\n      // [0, 32). All other values are mapped into this range. Just clear the\n      // high bits. This is not technically correct, the high bits should be\n      // cleared after the value is cast to a 32-bit unsigned integer.\n      // TODO(johnlenz): Fix this. The test cases currently depend on this\n      // incorrect range check so this can't be fixed yet.\n      // rvalInt &= 0x1f;\n\n\n      switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript handles zero shifts on signed numbers differently than\n          // Java as an Java int can not represent the unsigned 32-bit number\n          // where JavaScript can. Result is always positive.\n          // Use a long here to represent the unsigned int.\n          long lvalLong = lvalInt & 0xFFFFFFFFL;\n          result = lvalLong >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      Node newNumber = Node.newNumber(result);\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}