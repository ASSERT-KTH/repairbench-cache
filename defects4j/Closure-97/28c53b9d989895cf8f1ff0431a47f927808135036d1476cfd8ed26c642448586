{
    "generation": "  /**\n   * Try to fold shift operations\n   */\n  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double result;\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      // Convert the numbers to ints, but check for integer range and fractional values\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      int lvalInt = (int) lval;\n      if (lval != lvalInt) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      int rvalInt = (int) rval;\n      if (rval != rvalInt) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // Unsigned right shift in JS is:\n          // (ToUint32(lvalInt) >>> rvalInt), which in Java needs to mask lvalInt\n          // to unsigned 32 bit before shifting.\n          result = ((long)lvalInt & 0xFFFFFFFFL) >>> rvalInt;\n          // Ensure JS URSH outputs an unsigned 32-bit integer as a double.\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n\n      Node newNumber;\n      if (n.getType() == Token.URSH) {\n        // For URSH, result can go up to 4294967295, which cannot be represented\n        // as a signed int, so always store as double.\n        newNumber = Node.newNumber(result);\n      } else {\n        // For signed cases, store as int if possible\n        newNumber = Node.newNumber((double)((int)result));\n      }\n      n.getParent().replaceChild(n, newNumber);\n      reportCodeChange();\n\n      return newNumber;\n    }\n\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}