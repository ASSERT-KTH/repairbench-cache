{
    "generation": "@Override\npublic boolean apply(Node n) {\n    // When the node is null it means, we reached the implicit return\n    // where the function returns (possibly without an return statement)\n    if (n == null) {\n        return false;\n    }\n\n    // Check for calls to functions that pass one of the dependent variables to a non-side-effect free function.\n    if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n        return true;\n    }\n\n    // Check for constructors that have side effects.\n    if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n        return true;\n    }\n\n    // Handle the 'in' operator explicitly.\n    if (n.isAssign() && n.getFirstChild().isIn()) {\n        return true;\n    }\n\n    // Handle other operators that might have side effects.\n    if (n.isAssign() || n.isDelete() || n.isIncDec() || n.isPostfix() || n.isPrefix()) {\n        return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}