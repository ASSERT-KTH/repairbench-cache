{
    "generation": "@Override\npublic boolean apply(Node n) {\n  // When the node is null it means, we reached the implicit return\n  // where the function returns (possibly without an return statement)\n  if (n == null) {\n    return false;\n  }\n\n  // We only care about calls to functions or constructors that\n  // have side effects. We do NOT want to count 'in' and 'instanceof'\n  // as side-effecting, since those expressions just check properties,\n  // they do not modify state and shouldn't block inlining.\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n\n  // Explicitly skip over 'in' and 'instanceof' as they are safe to inline across\n  // Note: n.isIn() and n.isInstanceOf() are not standard methods, so check token type\n  if (n.getToken() == Token.IN || n.getToken() == Token.INSTANCEOF) {\n    return false;\n  }\n\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}