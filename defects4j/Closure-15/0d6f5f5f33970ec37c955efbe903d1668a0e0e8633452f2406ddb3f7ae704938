{
    "generation": "      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-side-effect free\n        // function.\n\n        // Check for function and constructor calls that have side effects.\n        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n          return true;\n        }\n\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n          return true;\n        }\n\n        // Add checks for other operations that inherently have side effects.\n        // - DELPROP (e.g., 'delete obj.prop')\n        // - INC/DEC (e.g., 'i++', 'j--')\n        // - THROW (e.g., 'throw error')\n        if (n.isDelProp() || n.isInc() || n.isDec() || n.isThrow()) {\n            return true;\n        }\n\n        // Assignments only have side effects if the LHS is a property access (e.g., 'obj.prop = value').\n        // Simple variable assignments (e.g., 'x = value') generally do not prevent inlining of 'value'\n        // and are not considered side effects in this context.\n        if (n.isAssign() && NodeUtil.assignHasSideEffects(n)) {\n            return true;\n        }\n\n        // For other node types, recursively check their children for side effects.\n        // This handles cases like:\n        // - operators whose operands might have side effects (e.g., `f() + g()`)\n        // - control flow statements where children expressions might have side effects\n        // - blocks, expressions, etc.\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}