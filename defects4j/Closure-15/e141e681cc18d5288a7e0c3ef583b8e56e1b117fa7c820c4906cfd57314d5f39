{
    "generation": "      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-side-effect free\n        // function. (Comment seems outdated/incomplete based on code logic)\n\n        // Check for nodes that inherently have side effects or whose side effects\n        // need careful checking.\n\n        // Calls and Constructor Calls require special checking, as not all\n        // have side effects (e.g. String('a')).\n        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n          return true;\n        }\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n          return true;\n        }\n\n        // Other operators that modify state are side effects.\n        // This includes assignments, increments, decrements, and delete.\n        if (NodeUtil.isAssignmentOp(n) ||\n            n.isInc() ||\n            n.isDec() ||\n            n.isDelProp()) {\n          return true;\n        }\n\n        // Recursively check children, unless the child starts a new CFG node\n        // (like a function definition).\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          // We should not look into expressions that execute later.\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}