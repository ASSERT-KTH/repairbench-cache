{
    "generation": "      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // The TODO comment might be outdated or apply to a very specific sub-use case.\n        // For general side-effect detection required by FlowSensitiveInlineVariables,\n        // we need to check for all common side-effecting operations.\n        switch (n.getType()) {\n          case Token.CALL:\n            return NodeUtil.functionCallHasSideEffects(n);\n          case Token.NEW:\n            return NodeUtil.constructorCallHasSideEffects(n);\n          case Token.INC: // Increment operator (e.g., i++)\n          case Token.DEC: // Decrement operator (e.g., i--)\n          case Token.ASSIGN: // Simple assignment (e.g., x = y)\n          case Token.ASSIGN_BITOR: // Compound assignments\n          case Token.ASSIGN_BITAND:\n          case Token.ASSIGN_BITXOR:\n          case Token.ASSIGN_DIV:\n          case Token.ASSIGN_LSH:\n          case Token.ASSIGN_MOD:\n          case Token.ASSIGN_MUL:\n          case Token.ASSIGN_RSH:\n          case Token.ASSIGN_SUB:\n          case Token.ASSIGN_URSH:\n            return true; // Assignments have side effects\n          case Token.DELPROP: // The 'delete' operator\n            return true;\n          case Token.THROW: // Throw statement changes control flow\n          case Token.BREAK: // Break statement changes control flow\n          case Token.CONTINUE: // Continue statement changes control flow\n          case Token.RETURN: // Return statement changes control flow\n          case Token.DEBUGGER: // Debugger statement has side effects\n            return true;\n        }\n\n        // If the current node itself is not a direct side-effecting operation,\n        // recursively check its children for side effects.\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          // If a child node starts a new CFG node, its side effects might not\n          // be relevant to the current flow (e.g., a function declaration).\n          // Preserve the original logic to skip such nodes.\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}