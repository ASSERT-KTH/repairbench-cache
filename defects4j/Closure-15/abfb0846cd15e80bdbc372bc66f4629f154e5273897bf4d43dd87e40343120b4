{
    "generation": "      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-side-effect free\n        // function.\n        // NOTE(fix): Broadened the check beyond CALL/NEW to include other\n        // common side-effecting operations like delete, inc/dec, and\n        // property/element assignments, which the original code missed.\n\n        // Check for explicit calls and constructor calls known to have side effects.\n        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n          return true;\n        }\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n          return true;\n        }\n\n        // Check for other operators that always have side effects.\n        if (n.isDelProp() || n.isInc() || n.isDec()) {\n          return true;\n        }\n\n        // Check for assignments. Assignments to simple names (var x = ...)\n        // are generally handled by variable definition/liveness analysis elsewhere.\n        // However, assignments to properties (obj.prop = ...) or elements (arr[i] = ...)\n        // definitely have side effects that this check should capture.\n        if (NodeUtil.isAssignmentOp(n)) {\n          Node lhs = n.getFirstChild();\n          // Check if the assignment target is a property or element access.\n          if (lhs.isGetProp() || lhs.isGetElem()) {\n            return true;\n          }\n        }\n\n        // Recursively check children, but don't cross Control Flow Graph node boundaries.\n        // This keeps the check within the current \"expression\" or basic block segment.\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}