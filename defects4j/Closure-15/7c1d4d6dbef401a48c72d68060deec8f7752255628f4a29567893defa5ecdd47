{
    "generation": "      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // Check if the current node 'n' itself has side effects.\n        // NodeUtil.mayHaveSideEffects covers calls, new operations, assignments,\n        // delete property operations, increments, decrements, etc.\n        // This is a more comprehensive check than just looking at isCall() and isNew().\n        if (NodeUtil.mayHaveSideEffects(n)) {\n          return true;\n        }\n\n        // Recursively check children for side effects.\n        // A parent node might not have side effects itself, but its children might.\n        // For example, a VAR node itself has no side effects, but its child (an\n        // assignment expression) might.\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          // The check `!ControlFlowGraph.isEnteringNewCfgNode(c)` is crucial\n          // for flow-sensitive analysis, as it prevents traversing into new\n          // control flow graph nodes (e.g., conditional branches, loop bodies)\n          // that are not part of the current straight-line execution path.\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}