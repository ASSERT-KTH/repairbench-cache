{
    "generation": "@Override\npublic boolean apply(Node n) {\n  // When the node is null it means, we reached the implicit return\n  // where the function returns (possibly without an return statement)\n  if (n == null) {\n    return false;\n  }\n\n  // Handle calls to functions that pass one of the dependent variables to a non-side-effect free function.\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n\n  // Handle constructor calls that have side effects.\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n\n  // Handle the 'in' operator, which is a binary operation.\n  if (n.isAssign() || n.isExprResult() || n.isBinaryOperator()) {\n    if (n.getOperator() == Token.IN) {\n      return true;\n    }\n  }\n\n  // Recursively apply the function to child nodes.\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}