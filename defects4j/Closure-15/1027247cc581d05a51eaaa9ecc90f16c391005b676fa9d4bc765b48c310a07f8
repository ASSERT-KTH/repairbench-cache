{
    "generation": "      // Assume 'compiler' field/variable exists in the enclosing scope\n      private final AbstractCompiler compiler;\n\n      // Constructor or method where the predicate is used needs to pass 'compiler'\n      // Example: new SomePredicate(compiler) or defined in a scope with 'this.compiler'\n\n      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // Check for side effects using the general utility.\n        // We need to check the children recursively, but we can short-circuit\n        // if the node itself has side-effects, unless it's an operator\n        // that we specifically want to allow (like 'in', 'instanceof', 'typeof').\n        // These operators are side-effect free in isolation (ignoring exceptions).\n        if (NodeUtil.nodeMayHaveSideEffects(n, compiler)) {\n          // Check if the side-effect comes from an operator considered safe\n          // for this optimization.\n          switch (n.getToken()) {\n            case IN:\n            case INSTANCEOF:\n            case TYPEOF:\n              // These operators are safe, don't return true yet.\n              // We still need to check their children recursively below.\n              break;\n            default:\n              // Node has side effects due to other reasons (call, new, assign,\n              // delete, ++, --, etc.). This prevents inlining.\n              return true;\n          }\n        }\n\n        // Recursively check children, skipping nodes that start new CFG basic blocks.\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          // Don't recurse into functions or inner blocks, as they are not part of\n          // the current block's side-effect analysis in this context.\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n            if (apply(c)) {\n              // If a child node has side effects, then this node effectively does too.\n              return true;\n            }\n          }\n        }\n\n        // No side effects found in this node or its relevant children.\n        return false;\n      }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}