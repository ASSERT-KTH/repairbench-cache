{
    "generation": "      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-side-effect free\n        // function.\n        // This TODO comment might be a specific focus, but the function's overall\n        // responsibility, as indicated by tests, seems to be broader:\n        // to detect any relevant side-effecting operation.\n\n        // First, check if the node itself is a call or new expression with side effects.\n        // This handles cases like 'print(1)' which should prevent inlining.\n        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n, this.compiler)) {\n          return true;\n        }\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n, this.compiler)) {\n          return true;\n        }\n\n        // Add a general check for other types of nodes that have side effects.\n        // This covers operations like DELETE, ASSIGN, INC, DEC, etc.,\n        // which were not explicitly checked before.\n        // This addresses the 'delete a[b]' case from the failing test.\n        if (NodeUtil.nodeHasSideEffects(n, this.compiler)) {\n            return true;\n        }\n\n        // If the current node itself does not have side effects,\n        // recursively check its children for side effects.\n        // The ControlFlowGraph.isEnteringNewCfgNode(c) check ensures we\n        // only propagate side effects within the current control flow block.\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}