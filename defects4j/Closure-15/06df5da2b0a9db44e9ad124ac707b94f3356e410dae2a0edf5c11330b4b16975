{
    "generation": "@Override\npublic boolean apply(Node n) {\n  // When the node is null it means, we reached the implicit return\n  // where the function returns (possibly without an return statement)\n  if (n == null) {\n    return false;\n  }\n\n  // Only care about calls or 'new' expressions, not FOR-IN/OF, etc.\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n\n  // DO NOT consider FOR-IN/OF as having side-effects for our purposes.\n  // We need to skip the RHS of FOR-IN/OF in analysis.\n  if (n.isForIn() || n.isForOf()) {\n    // Only traverse the init and object/iterable expression, skip the body.\n    Node lhs = n.getFirstChild();\n    Node rhs = lhs != null ? lhs.getNext() : null;\n    if (lhs != null && apply(lhs)) {\n      return true;\n    }\n    if (rhs != null && apply(rhs)) {\n      return true;\n    }\n    return false;\n  }\n\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}