{
    "generation": "    /**\n     * Creates a printer that will print values to the given stream following the CSVFormat.\n     * <p>\n     * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation\n     * and escaping with a different character) are not supported.\n     * </p>\n     * \n     * @param out\n     *        stream to which to print. Must not be null.\n     * @param format\n     *        the CSV format. Must not be null.\n     * @throws IOException\n     *         thrown if the optional header cannot be printed.\n     * @throws IllegalArgumentException\n     *         thrown if the parameters of the format are inconsistent or if either out or format are null.\n     */\n    public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\n        Assertions.notNull(out, \"out\");\n        Assertions.notNull(format, \"format\");\n\n        this.out = out;\n        this.format = format;\n        this.format.validate();\n\n        // Print the header if defined in the format and not configured to be skipped.\n        final String[] header = format.getHeader();\n        if (header != null && header.length > 0) {\n            if (!format.getSkipHeaderRecord()) {\n                // Convert String array to Object array to use existing printRecord method.\n                final Object[] headerAsObjects = new Object[header.length];\n                System.arraycopy(header, 0, headerAsObjects, 0, header.length);\n                printRecord(headerAsObjects);\n            }\n        }\n        // TODO: Is it a good idea to do this here instead of on the first call to a print method?\n        // It seems a pain to have to track whether the header has already been printed or not.\n        // The fix assumes the header should be printed on construction if specified in the format,\n        // addressing the TODO indirectly by implementing it here.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}