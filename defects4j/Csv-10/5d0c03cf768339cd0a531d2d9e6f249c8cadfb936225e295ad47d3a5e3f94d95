{
    "generation": "    /**\n     * Creates a printer that will print values to the given stream following the CSVFormat.\n     * <p>\n     * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation\n     * and escaping with a different character) are not supported.\n     * </p>\n     * \n     * @param out\n     *        stream to which to print. Must not be null.\n     * @param format\n     *        the CSV format. Must not be null.\n     * @throws IOException\n     *         thrown if the optional header cannot be printed.\n     * @throws IllegalArgumentException\n     *         thrown if the parameters of the format are inconsistent or if either out or format are null.\n     */\n    public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\n        Assertions.notNull(out, \"out\");\n        Assertions.notNull(format, \"format\");\n\n        this.out = out;\n        this.format = format;\n        this.format.validate();\n\n        // Print the header if it is present in the format.\n        // This addresses the \"TODO\" comment regarding whether to print the header in the constructor\n        // or later, and resolves the test failure where the header is missing.\n        final String[] header = format.getHeader();\n        if (header != null) {\n            // Re-use printRecord to ensure proper quoting, delimiters, and line separators are applied to the header.\n            this.printRecord(header);\n            // Mark that the header has been printed to prevent re-printing by other methods later.\n            // Assumes 'headerPrinted' is a boolean field of the CSVPrinter class.\n            this.headerPrinted = true;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}