{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        // Try to resolve the type id first:\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // If not found, try the default implementation:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // Let a DeserializationProblemHandler try to handle the unknown type id:\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                // IMPORTANT FIX: Instead of returning null when no type info is found,\n                // use a null-returning (nullifying) deserializer.\n                if (actual == null || Void.class.equals(actual.getRawClass())) {\n                    deser = com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer.instance;\n                } else {\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            }\n        } else {\n            if ((_baseType != null)\n                    && _baseType.getClass() == type.getClass()) {\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}