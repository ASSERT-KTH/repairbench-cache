{
    "generation": "    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            /* As per [databind#305], need to provide contextual info. But for\n             * backwards compatibility, let's start by only supporting this\n             * for base class, not via interface. Later on we can add this\n             * to the interface, assuming deprecation at base class helps.\n             */\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                // use the default impl if no type id available:\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    // 10-May-2016, tatu: We may get some help...\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                    if (actual == null) { // what should this be taken to mean?\n                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...\n                        // Caller (like TypeDeserializerBase) is expected to handle this:\n                        // it will call DeserializationContext.handleUnknownTypeId() which\n                        // throws exception if no handler is configured.\n                        return null;\n                    }\n                    // ... would this actually work?\n                    // If handler returned Void.class, for example, need deser for that:\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                    // 11-Sep-2019, tatu: Check for null here too? Either should not happen or indicate failure,\n                    //    in which case `null` return is appropriate, to let caller handle?\n                    if (deser == null) {\n                        // As above, `null` return should be handled by caller, possibly by\n                        // calling `handleUnknownTypeId` or `handleMissingTypeId`\n                        return null;\n                    }\n                }\n            } else {\n                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,\n                 *   we actually now need to explicitly narrow from base type (which may have parameterization)\n                 *   using raw type.\n                 *\n                 *   One complication, though; cannot change 'type class' (simple type to container); otherwise\n                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual\n                 *   type in process (getting SimpleType of Map.class which will not work as expected)\n                 */\n                if ((_baseType != null)\n                        && _baseType.getClass() == type.getClass()) {\n                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;\n                     *   but it appears to check that JavaType impl class is the same which is\n                     *   important for some reason?\n                     *   Disabling the check will break 2 Enum-related tests.\n                     */\n                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full\n                    //   generic type with custom type resolvers. If so, should try to retain them.\n                    //  Whether this is sufficient to avoid problems remains to be seen, but for\n                    //  now it should improve things.\n                    if (!type.hasGenericTypes()) {\n                        // 22-Mar-2017, tatu: As per [databind#1564], can not possibly specialize NO generic types, only parameterizable ones\n                        // ... and only if it makes sense, probably only for Collection- / Map-like types?\n                        // 16-Aug-2019, tatu: Oh. Actually, we MUST do this for all kinds of types,\n                        //   since it is possible Sub-type has type parameters NOT indicated by Type Id. Wah.\n                        //   Need to document this better.\n                         try {\n                             type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                         } catch (IllegalArgumentException e) {\n                             // 28-Mar-2021, tatu: As per [databind#3063], need to catch this for non-specializable\n                             //    types like `java.lang.Void`\n                             // Ideally should not be getting here, but let's assume original type is fine?\n                             ;\n                         }\n                    }\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n                // 11-Sep-2019, tatu: Need to check for null here as well\n                 if (deser == null) {\n                     return null;\n                 }\n            }\n            // Only cache if find succeeded -- incl. handler returning type that resolved\n            _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}