{
    "generation": "    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            /* As per [databind#305], need to provide contextual info. But for\n             * backwards compatibility, let's start by only supporting this\n             * for base class, not via interface. Later on we can add this\n             * to the interface, assuming deprecation at base class helps.\n             */\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                // use the default impl if no type id available:\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    // 10-May-2016, tatu: We may get some help...\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                    if (actual == null) { // what should this be taken to mean?\n                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...\n                        // return null; // ORIGINAL BUGGY LINE\n\n                        // FIX [databind#2221]: Handle `Void.class` returned by handler (which results\n                        // in 'actual' being null from `_handleUnknownTypeId`) by finding the Void\n                        // deserializer that will return `null` as value and skip underlying entry.\n                        deser = ctxt.findContextualValueDeserializer(ctxt.constructType(Void.class), _property);\n                        // If that did not work (should not happen), could perhaps use\n                        // 'missing' deserializer? For now, let's assume it works.\n                        if (deser == null) {\n                             // If not found, maybe we should return special marker?\n                             // For now this seems unlikely fallback: revert to old behavior\n                             return null;\n                        }\n                    } else {\n                        // ... would this actually work? Yes, handler returned a non-Void, valid type\n                        deser = ctxt.findContextualValueDeserializer(actual, _property);\n                    }\n                }\n            } else {\n                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,\n                 *   we actually now need to explicitly narrow from base type (which may have parameterization)\n                 *   using raw type.\n                 *\n                 *   One complication, though; cannot change 'type class' (simple type to container); otherwise\n                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual\n                 *   type in process (getting SimpleType of Map.class which will not work as expected)\n                 */\n                if ((_baseType != null)\n                        && _baseType.getClass() == type.getClass()) {\n                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;\n                     *   but it appears to check that JavaType impl class is the same which is\n                     *   important for some reason?\n                     *   Disabling the check will break 2 Enum-related tests.\n                     */\n                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full\n                    //   generic type with custom type resolvers. If so, should try to retain them.\n                    //  Whether this is sufficient to avoid problems remains to be seen, but for\n                    //  now it should improve things.\n                    if (!type.hasGenericTypes()) {\n                        // 28-Sep-2020, tatu: [databind#2776] Need to catch issues with specialization\n                        try {\n                            type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                        } catch (IllegalArgumentException e) {\n                            throw ctxt.invalidTypeIdException(_baseType, typeId, e.getMessage());\n                        }\n                    }\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n            // 17-Jan-2019, tatu: [databind#2221] Need to be careful wrt caching...\n            //   Let's only cache if we actually resolved it? Or can we cache failures too?\n            //   Seems like caching failure (returning null) is bad idea. Caching Void is ok.\n             if (deser != null) {\n                 _deserializers.put(typeId, deser);\n             }\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}