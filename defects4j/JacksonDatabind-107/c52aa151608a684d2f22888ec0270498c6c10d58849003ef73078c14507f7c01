{
    "generation": "    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            /* As per [databind#305], need to provide contextual info. But for\n             * backwards compatibility, let's start by only supporting this\n             * for base class, not via interface. Later on we can add this\n             * to the interface, assuming deprecation at base class helps.\n             */\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                // use the default impl if no type id available:\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    // 10-May-2016, tatu: We may get some help...\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                    if (actual == null) { // what should this be taken to mean?\n                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...\n                        // 29-Jun-2020, tatu: ... meaning that we fail right away\n                        // But... how could we indicate things otherwise? Need to think.\n                        // For now, returning null is problematic, but not failing is maybe worse?\n                        // Let's actually return `null` for now, handle failure later?\n                        return null;\n                    }\n                    // If handler indicates \"just skip\", use special 'nullifier' deserializer\n                    // 29-Jun-2020, tatu: ... and this is how we may be able to indicate skipping.\n                    //    Handler returns `Void.class` as the type.\n                    if (actual.getRawClass() == Void.class) {\n                        deser = com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer.instance;\n                    } else {\n                        // ... would this actually work? Yes, if it's a valid type id\n                        deser = ctxt.findContextualValueDeserializer(actual, _property);\n                    }\n                }\n            } else {\n                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,\n                 *   we actually now need to explicitly narrow from base type (which may have parameterization)\n                 *   using raw type.\n                 *\n                 *   One complication, though; cannot change 'type class' (simple type to container); otherwise\n                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual\n                 *   type in process (getting SimpleType of Map.class which will not work as expected)\n                 */\n                if ((_baseType != null)\n                        && _baseType.getClass() == type.getClass()) {\n                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;\n                     *   but it appears to check that JavaType impl class is the same which is\n                     *   important for some reason?\n                     *   Disabling the check will break 2 Enum-related tests.\n                     */\n                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full\n                    //   generic type with custom type resolvers. If so, should try to retain them.\n                    //  Whether this is sufficient to avoid problems remains to be seen, but for\n                    //  now it should improve things.\n                    if (!type.hasGenericTypes()) {\n                        // 23-Oct-2016, tatu: Ok, this is problematic. Need to avoid trying to\n                        //   specialize too eagerly, as intermediate type may be less specific\n                        //   than the base type. Eg base type `Collection<EnumABC>` and type is\n                        //   `Collection.class`... Getting `Collection<EnumABC>` is fine, but\n                        //   if type is `List.class`, this becomes `List<EnumABC>` which is wrong.\n                        // For now, do simpler thing: just ensure we have actual concrete type\n                        // if we have base type refinement. Let base type handler worry about actual\n                        // types. Reverts [databind#1270] fix basically. May need rethinking.\n                        // (note: this check was `.hasGenericTypes()` originally)\n                        if (!type.isJavaLangObject()) {\n                            try {\n                                type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                            } catch (IllegalArgumentException e) {\n                                // 26-Mar-2021, tatu: As per [databind#3097], can fail with interfaces...\n                                //    Need to figure out why but do not fail for now\n                                // For now, let's try to ignore issue? Seems questionable but...\n                            }\n                        }\n                    }\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n            _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}