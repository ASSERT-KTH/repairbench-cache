{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        // Try resolving the type id into a concrete JavaType\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // If no type id, try to use the default implementation\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // Let registered DeserializationProblemHandler have a go...\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                // Instead of returning null, use a nullifying deserializer so that\n                // we get a valid (even if \"null\") value for unknown types.\n                if (actual == null || Void.class.equals(actual.getRawClass())) {\n                    deser = NullifyingDeserializer.instance;\n                } else {\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            }\n        } else {\n            /*\n             * If we have a type, and if the base type is available, we may need to\n             * narrow it to keep generic type information. However, we only do so\n             * if the actual JavaType is of the same implementation class as the base type.\n             */\n            if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        // Cache the deserializer instance for later reuse.\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}