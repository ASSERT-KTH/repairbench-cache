{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        // Try to resolve the declared type from the idResolver:\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // No type id found: try using the default implementation, if one exists:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // No default implementation: give problem handlers a chance to provide a fallback type\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) {\n                    // As per [databind#2221] we must not return null; instead, report the error.\n                    return ctxt.reportUnknownTypeId(_baseType, typeId, _idResolver,\n                        \"No deserializer found for subtype id '\" + typeId + \"'\");\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            // If we got a type from the idResolver, we need to possibly specialize it based on the\n            // declared base type.\n            if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}