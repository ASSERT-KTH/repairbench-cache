{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // use the default impl if no type id available\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // ask problem handlers\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) {\n                    // as per [databind#2221], don't return null but try default impl\n                    deser = _findDefaultImplDeserializer(ctxt);\n                } else if (actual.getRawClass() == Void.class) {\n                    // handler requested to ignore this value\n                    deser = com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer.instance;\n                } else {\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            }\n        } else {\n            // narrow generic base if necessary\n            if (_baseType != null && _baseType.getClass() == type.getClass()\n                    && !type.hasGenericTypes()) {\n                type = ctxt.getTypeFactory()\n                           .constructSpecializedType(_baseType, type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}