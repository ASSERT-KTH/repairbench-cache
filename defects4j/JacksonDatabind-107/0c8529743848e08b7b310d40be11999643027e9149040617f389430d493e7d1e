{
    "generation": "    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            /* As per [databind#305], need to provide contextual info. But for\n             * backwards compatibility, let's start by only supporting this\n             * for base class, not via interface. Later on we can add this\n             * to the interface, assuming deprecation at base class helps.\n             */\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                // use the default impl if no type id available:\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    // 10-May-2016, tatu: We may get some help...\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                    if (actual == null) { // what should this be taken to mean?\n                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but...\n                        // If handler returns null, resolution failed. Return null to indicate.\n                        // Caller needs to handle this case.\n                        return null;\n                    }\n                    // Special case: Handler provided java.lang.Void type, means \"skip\"\n                    // (databind#2221 handling)\n                    if (actual.hasRawClass(Void.class)) {\n                         // Returning null deserializer signals to skip the value\n                         return null;\n                    }\n                    // ... would this actually work? Yes, find deserializer for type handler provided\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                    // If findContextualValueDeserializer returns null, we'll cache and return null below\n                }\n            } else {\n                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,\n                 *   we actually now need to explicitly narrow from base type (which may have parameterization)\n                 *   using raw type.\n                 *\n                 *   One complication, though; cannot change 'type class' (simple type to container); otherwise\n                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual\n                 *   type in process (getting SimpleType of Map.class which will not work as expected)\n                 */\n                if ((_baseType != null)\n                        && _baseType.getClass() == type.getClass()) {\n                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;\n                     *   but it appears to check that JavaType impl class is the same which is\n                     *   important for some reason?\n                     *   Disabling the check will break 2 Enum-related tests.\n                     */\n                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full\n                    //   generic type with custom type resolvers. If so, should try to retain them.\n                    //  Whether this is sufficient to avoid problems remains to be seen, but for\n                    //  now it should improve things.\n                    if (!type.hasGenericTypes()) {\n                       // 11-Jan-2021, tatu: [databind#291] Try to avoid type specialization for enums;\n                       //    seems to be problematic for some reason\n                       if (!type.isEnumType()) {\n                           try { // #databind-291 requires catching errors sometimes\n                               type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                           } catch (IllegalArgumentException e) {\n                               // 11-Jan-2021, tatu: For [databind#291] may need to fallback for weird cases...\n                                // 21-Aug-2022, tatu: Should probably report more contextual info...\n                                ctxt.reportBadDefinition(_baseType, String.format(\n                                        \"Failed to specialize base type %s with concrete type %s, problem: %s\",\n                                        _baseType, type.getRawClass().getName(), e.getMessage()), e);\n                                // Based on other `reportBadDefinition` usage, seems returning null is expected\n                                return null;\n                            }\n                        }\n                    }\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n                 // If findContextualValueDeserializer returns null, we'll cache and return null below\n            }\n            // If we get this far, cache the resolved deserializer (which might be null\n            // if resolution failed), unless it was the default impl deserializer\n            // (which is cached separately). Note that 'putIfAbsent' is thread-safe.\n             _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}