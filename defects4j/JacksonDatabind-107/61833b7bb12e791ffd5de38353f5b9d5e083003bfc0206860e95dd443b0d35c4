{
    "generation": "    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            /* As per [databind#305], need to provide contextual info. But for\n             * backwards compatibility, let's start by only supporting this\n             * for base class, not via interface. Later on we can add this\n             * to the interface, assuming deprecation at base class helps.\n             */\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                // use the default impl if no type id available:\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    // 10-May-2016, tatu: We may get some help...\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                    if (actual == null) { // Problem handler could not help\n                        // 17-Jan-2019, tatu: As per [databind#2221], better NOT return `null` but throw\n                        throw ctxt.invalidTypeIdException(_baseType, typeId,\n                                String.format(\"Could not resolve type id '%s' into a concrete type, and no \"\n                                        +\"DeserializationProblemHandler provided a concrete type\",\n                                        typeId));\n                    }\n                    // ... would this actually work?\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                    // 21-Jan-2019, tatu: If handler returned `actual` type but no deserializer found for it\n                    if (deser == null) {\n                        // As per [databind#2221], if handler returned `Void.class`\n                        //   it is taken to mean \"nothing, skip\", so use NullifyingDeserializer\n                        if (actual.getRawClass() == Void.class) {\n                            deser = com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer.instance;\n                        } else {\n                            // Otherwise, handler returned specific type, but no deserializer found for it\n                            throw ctxt.invalidTypeIdException(_baseType, typeId,\n                                    String.format(\"Could not resolve type id '%s' into a concrete type (resolution by %s), and no deserializer found for it\",\n                                            typeId, actual));\n                        }\n                    }\n                }\n            } else {\n                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,\n                 *   we actually now need to explicitly narrow from base type (which may have parameterization)\n                 *   using raw type.\n                 *\n                 *   One complication, though; cannot change 'type class' (simple type to container); otherwise\n                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual\n                 *   type in process (getting SimpleType of Map.class which will not work as expected)\n                 */\n                if ((_baseType != null)\n                        && _baseType.getClass() == type.getClass()) {\n                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;\n                     *   but it appears to check that JavaType impl class is the same which is\n                     *   important for some reason?\n                     *   Disabling the check will break 2 Enum-related tests.\n                     */\n                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full\n                    //   generic type with custom type resolvers. If so, should try to retain them.\n                    //  Whether this is sufficient to avoid problems remains to be seen, but for\n                    //  now it should improve things.\n                    if (!type.hasGenericTypes()) {\n                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                    }\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n            // Final check: if 'deser' is still null here, it means a type was resolved (either by\n            // _idResolver or _findDefaultImplDeserializer) but findContextualValueDeserializer failed to find\n            // a deserializer. This should also result in an exception.\n            if (deser == null) {\n                 throw ctxt.invalidTypeIdException(_baseType, typeId,\n                    String.format(\"Could not find deserializer for type id '%s' (for base type %s)\", typeId, _baseType));\n            }\n            _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}