{
    "generation": "@Override\nprotected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        // 1) try to resolve type id to a real type\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // 2a) no type: maybe there is a default\u2010impl configured\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // 2b) still no deserializer: ask problem\u2010handlers\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                // if no handler handled it, _handleUnknownTypeId will\n                // throw; we never actually get null here in practice.\n                if (actual == null) {\n                    return null;\n                }\n                // 2c) handler returned a type; if it is Void,\n                // we want to skip contents (null)\n                Class<?> raw = actual.getRawClass();\n                if (raw == Void.class || raw == Void.TYPE) {\n                    // use the \"nullifying\" deserializer to skip content\n                    deser = com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer.instance;\n                } else {\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            }\n        } else {\n            // 3) got a real type: may need to narrow generic base\n            if (_baseType != null && _baseType.getClass() == type.getClass()) {\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory()\n                              .constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}