{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        // first try to resolve the type id normally\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // allow any registered ProblemHandler to resolve the id:\n            JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n            if (actual != null) {\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            } else {\n                // if no handler resolution, fall back to default impl if one was configured\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    // no default impl either: skip the content and return null\n                    deser = com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer.instance;\n                }\n            }\n        } else {\n            /* found a valid subtype; may need to narrow generic base */\n            if ((_baseType != null)\n                    && _baseType.getClass() == type.getClass()\n                    && !type.hasGenericTypes()) {\n                type = ctxt.getTypeFactory()\n                        .constructSpecializedType(_baseType, type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}