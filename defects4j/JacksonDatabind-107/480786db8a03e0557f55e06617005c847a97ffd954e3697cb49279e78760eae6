{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        // first: try to resolve the logical type id\n        JavaType type;\n        try {\n            type = _idResolver.typeFromId(ctxt, typeId);\n        } catch (Exception e) {\n            // if the resolver blows up (unknown id \u2192 exception), treat as \"no type\"\n            type = null;\n        }\n        if (type == null) {\n            // no real subtype from id, try default\u2010impl (if any)\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // no default, delegate to problem handler\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) {\n                    // per [databind#2221], do not return null \u2013 skip content instead\n                    deser = NullifyingDeserializer.instance;\n                } else if (actual.getRawClass() == Void.class) {\n                    // handler asked us to treat this as \"void\" \u2192 skip\n                    deser = NullifyingDeserializer.instance;\n                } else {\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            }\n        } else {\n            // we got a subtype; possibly narrow it if it is the same JavaType impl\n            if (_baseType != null && _baseType.getClass() == type.getClass()\n                    && !type.hasGenericTypes()) {\n                type = ctxt.getTypeFactory()\n                           .constructSpecializedType(_baseType, type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}