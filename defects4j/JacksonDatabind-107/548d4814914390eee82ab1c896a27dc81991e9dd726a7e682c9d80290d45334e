{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        // first try to resolve the id to a JavaType\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // unknown type id: give ProblemHandler a first crack\n            JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n            if (actual != null) {\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            } else {\n                // if handler didn't help, fall back to default impl (if any)\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    // truly nothing we can do\n                    return null;\n                }\n            }\n        } else {\n            // got a nominal type; maybe narrow generic signature\n            if (_baseType != null && _baseType.getClass() == type.getClass()) {\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory()\n                        .constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}