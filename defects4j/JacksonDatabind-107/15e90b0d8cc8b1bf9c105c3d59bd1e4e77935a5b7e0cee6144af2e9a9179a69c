{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type;\n        try {\n            // try to resolve the type id normally\n            type = _idResolver.typeFromId(ctxt, typeId);\n        } catch (Exception e) {\n            // resolution failed: first try default impl, then problem handlers\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) {\n                    // no fallback from handler: rethrow original error\n                    if (e instanceof IOException) {\n                        throw (IOException) e;\n                    }\n                    if (e instanceof RuntimeException) {\n                        throw (RuntimeException) e;\n                    }\n                    throw new IOException(e);\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n            _deserializers.put(typeId, deser);\n            return deser;\n        }\n\n        // if resolver returned null, fall back to default impl or handler\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) {\n                    return null;\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            // resolved successfully: may need to narrow generic types\n            if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory()\n                               .constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}