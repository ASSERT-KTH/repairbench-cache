{
    "generation": "@Override\nprotected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        // first, try to resolve the type id\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // ask any problem\u2010handlers first\n            JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n            if (actual != null) {\n                // special case: handler returned Void to indicate \"skip\"\n                Class<?> raw = actual.getRawClass();\n                if (raw == Void.class || raw == Void.TYPE) {\n                    // use the nullifying deserializer to skip contents\n                    deser = com.fasterxml.jackson.databind.deser.impl.NullifyingDeserializer.instance;\n                } else {\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            } else {\n                // no handler or handler returned null \u2192 fall back to default impl\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    // nothing we can do\n                    return null;\n                }\n            }\n        } else {\n            // we got a valid subtype \u2192 maybe narrow generics, then find its deserializer\n            if (_baseType != null\n                    && _baseType.getClass() == type.getClass()\n                    && !type.hasGenericTypes()) {\n                type = ctxt.getTypeFactory()\n                        .constructSpecializedType(_baseType, type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}