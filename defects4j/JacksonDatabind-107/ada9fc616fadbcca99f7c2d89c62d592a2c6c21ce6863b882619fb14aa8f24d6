{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // Try the explicitly configured default implementation, if any:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // No default impl, so try the problem handler.\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                /*\n                 *  As per [databind#2221], we should not return null here.\n                 *  Also, if the problem handler returns a type equivalent to Void,\n                 *  we want to use a NullifyingDeserializer.\n                 */\n                if (actual == null || Void.class.equals(actual.getRawClass())) {\n                    deser = NullifyingDeserializer.instance;\n                } else {\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            }\n        } else {\n            // If we have a valid type we might need to narrow it\n            if ((_baseType != null) && _baseType.getClass() == type.getClass()) {\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}