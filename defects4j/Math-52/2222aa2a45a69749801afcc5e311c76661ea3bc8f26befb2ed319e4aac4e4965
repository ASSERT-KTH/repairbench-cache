{
    "generation": "  /** Build the rotation that transforms a pair of vector into another pair.\n\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n   * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n   * not the same as the angular separation between v<sub>1</sub> and\n   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n   * v<sub>2</sub>) plane.</p>\n\n   * @param u1 first vector of the origin pair\n   * @param u2 second vector of the origin pair\n   * @param v1 desired image of u1 by the rotation\n   * @param v2 desired image of u2 by the rotation\n   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n   * or if the vectors u1/u2 or v1/v2 are co-linear\n   */\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // norms computation\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // normalize v1 in order to have (v1'|v1') = (u1|u1)\n    double ru1rv1 = FastMath.sqrt(u1u1 / v1v1);\n    Vector3D v1p = new Vector3D(ru1rv1, v1); // v1'\n\n    // normalize v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n    double u1u2   = u1.dotProduct(u2);\n    double v1pv2  = v1p.dotProduct(v2); // v1' . v2\n    double u1Norm = FastMath.sqrt(u1u1);\n    double v1pNorm= u1Norm; // Should be FastMath.sqrt(v1p.getNormSq()) but we know it equals u1Norm\n    double u2Norm = FastMath.sqrt(u2u2);\n    double v2Norm = FastMath.sqrt(v2v2);\n    double u1u2Angle = FastMath.acos(u1u2 / (u1Norm * u2Norm));\n    double v1pv2Angle= FastMath.acos(v1pv2 / (v1pNorm * v2Norm));\n\n    // Check for collinearity\n    final double VECTOR_ANGLE_THRESHOLD = 1.0e-14; // A small threshold for angle comparison\n    if (FastMath.abs(u1u2Angle) < VECTOR_ANGLE_THRESHOLD || FastMath.abs(u1u2Angle - FastMath.PI) < VECTOR_ANGLE_THRESHOLD ||\n        FastMath.abs(v1pv2Angle) < VECTOR_ANGLE_THRESHOLD || FastMath.abs(v1pv2Angle - FastMath.PI) < VECTOR_ANGLE_THRESHOLD) {\n        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.CLOSE_VECTORS_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n\n    double coeffU = u1u2 / u1u1; // u1.u2 / |u1|^2\n    double coeffV = v1pv2 / u1u1; // v1'.v2 / |v1'|^2 = v1'.v2 / |u1|^2\n    double v2v2Adjusted = v2v2 - v1pv2 * coeffV; // |v2_ortho_v1'|^2 approximation\n    double u2u2Adjusted = u2u2 - u1u2 * coeffU;   // |u2_ortho_u1|^2 approximation\n\n    // Handle potential numerical issues where adjusted norms are negative or zero\n    if (u2u2Adjusted < 0.0 || v2v2Adjusted <= 0.0) {\n        // This can happen if u1/u2 or v1/v2 are near collinear despite the earlier check, or due to precision.\n        // Fallback or throw error. Let's throw an error as the input condition is likely violated.\n        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.CLOSE_VECTORS_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    double beta = FastMath.sqrt(u2u2Adjusted / v2v2Adjusted);\n    double alpha = coeffU - beta * coeffV;\n    Vector3D v2p = new Vector3D(alpha, v1p, beta, v2); // v2'\n\n\n    // Use the adjusted vectors v1p and v2p for rotation calculation\n    v1 = v1p;\n    v2 = v2p;\n\n    // preliminary computation\n    Vector3D uRef  = u1;\n    Vector3D vRef  = v1; // Should be v1p\n    Vector3D v1Su1 = v1.subtract(u1); // v1p - u1\n    Vector3D v2Su2 = v2.subtract(u2); // v2p - u2\n    Vector3D k     = v1Su1.crossProduct(v2Su2);\n    Vector3D u3    = u1.crossProduct(u2);\n    double c       = k.dotProduct(u3);\n\n    // Check for degeneracy using a small threshold\n    final double C_THRESHOLD = 1.0e-15;\n    if (FastMath.abs(c) < C_THRESHOLD) {\n        // the (q1, q2, q3) vector is close to the (u1, u2) plane\n        // we try other vectors\n        Vector3D v3 = Vector3D.crossProduct(v1, v2); // v1p x v2p\n        Vector3D v3Su3 = v3.subtract(u3);\n        k = v1Su1.crossProduct(v3Su3);\n        Vector3D u2Prime = u1.crossProduct(u3); // u1 x (u1 x u2) = (u1.u2)u1 - |u1|^2 u2\n        c = k.dotProduct(u2Prime);\n\n        if (FastMath.abs(c) < C_THRESHOLD) {\n            // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n            // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n            k = v2Su2.crossProduct(v3Su3);\n            // u2.crossProduct(u3) = u2 x (u1 x u2) = |u2|^2 u1 - (u1.u2) u2\n            Vector3D u2Cu3 = new Vector3D(u2.getNormSq(), u1, -u1.dotProduct(u2), u2);\n            c = k.dotProduct(u2Cu3);\n\n            if (FastMath.abs(c) < C_THRESHOLD) {\n                // the (q1, q2, q3) vector is aligned with everything\n                // this should correspond to identity rotation (or 180 degree rotation if pairs are opposite)\n                // Check if v1 is close to u1\n                 if (v1.dotProduct(u1) < 0) { // Check for 180 degree rotation case\n                     // Find a perpendicular vector to u1 to define axis for 180 degree rotation\n                     Vector3D axis = Vector3D.crossProduct(u1, v1);\n                     if (axis.getNormSq() < 1.0e-15) { // u1 and v1 are collinear\n                         axis = u1.orthogonal(); // Find any orthogonal vector\n                     }\n                     axis = axis.normalize();\n                     q0 = 0.0;\n                     q1 = axis.getX();\n                     q2 = axis.getY();\n                     q3 = axis.getZ();\n\n                 } else { // Assume identity\n                    q0 = 1.0;\n                    q1 = 0.0;\n                    q2 = 0.0;\n                    q3 = 0.0;\n                 }\n                 return;\n            }\n            // we will have to use u2 and v2 to compute the scalar part\n            uRef = u2;\n            vRef = v2; // Should be v2p\n        }\n    }\n\n    // compute the vectorial part\n    // Ensure c is non-negative before sqrt. A negative c indicates numerical instability.\n    // Clamping to 0, although throwing an exception might be mathematically cleaner.\n    c = FastMath.sqrt(Math.max(0.0, c));\n    if (c == 0.0) {\n        // Should have been caught by identity checks, this indicates extreme numerical issues.\n        // Fallback to identity.\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n    }\n\n    double inv = 1.0 / (c + c);\n    q1 = inv * k.getX();\n    q2 = inv * k.getY();\n    q3 = inv * k.getZ();\n\n    // compute the scalar part\n    // We use the formula q0 = - vRef . (uRef x q_vec) / (2 |uRef x q_vec|^2)\n    // Let K = uRef x q_vec\n    Vector3D K = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                           uRef.getZ() * q1 - uRef.getX() * q3,\n                           uRef.getX() * q2 - uRef.getY() * q1);\n    double normSqK = K.getNormSq();\n\n    // Threshold to handle case where uRef is nearly parallel to rotation axis\n    // Use a relative threshold based on uRef's norm? Let's use a fixed small threshold for now.\n    final double K_NORM_SQ_THRESHOLD = 1.0e-15;\n    if (normSqK < K_NORM_SQ_THRESHOLD) {\n        // uRef is parallel to the rotation axis (q_vec)\n        // Use q0^2 = 1 - |q_vec|^2, assuming q0 >= 0 convention (rotation angle <= 180 degrees)\n        double qVecNormSq = q1 * q1 + q2 * q2 + q3 * q3;\n        q0 = FastMath.sqrt(Math.max(0.0, 1.0 - qVecNormSq));\n    } else {\n        // Use the derived formula: q0 = -vRef.dotProduct(K) / (2 * normSqK)\n        q0 = -vRef.dotProduct(K) / (2 * normSqK);\n    }\n\n    // Optional: Normalize the final quaternion for robustness, though ideally it should be unit norm.\n    // double norm = FastMath.sqrt(q0*q0 + q1*q1 + q2*q2 + q3*q3);\n    // if (norm > 1.0e-15) {\n    //    q0 /= norm; q1 /= norm; q2 /= norm; q3 /= norm;\n    // } else { /* handle zero norm case - shouldn't happen here */ }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}