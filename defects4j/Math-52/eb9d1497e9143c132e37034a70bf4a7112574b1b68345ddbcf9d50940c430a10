{
    "generation": "  /** Build the rotation that transforms a pair of vector into another pair.\n\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n   * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n   * not the same as the angular separation between v<sub>1</sub> and\n   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n   * v<sub>2</sub>) plane.</p>\n\n   * @param u1 first vector of the origin pair\n   * @param u2 second vector of the origin pair\n   * @param v1 desired image of u1 by the rotation\n   * @param v2 desired image of u2 by the rotation\n   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n   */\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n\n  double normK = k.getNorm();\n  if (normK < Precision.SAFE_MIN) {\n      // the (q1, q2, q3) vector is close to zero, we cannot find the axis\n      // try another vector\n      Vector3D v3 = Vector3D.crossProduct(v1, v2);\n      Vector3D u3 = Vector3D.crossProduct(u1, u2);\n      Vector3D v3Su3 = v3.subtract(u3);\n      k = v1Su1.crossProduct(v3Su3);\n      normK = k.getNorm();\n\n      if (normK < Precision.SAFE_MIN) {\n          // the (q1, q2, q3) is still close to zero, we cannot find the axis\n          // try yet another vector\n          k = v2Su2.crossProduct(v3Su3);\n          normK = k.getNorm();\n\n          if (normK < Precision.SAFE_MIN) {\n              // we are really stuck, this is an singular case\n              // we will use the identity transform\n              q0 = 1.0;\n              q1 = 0.0;\n              q2 = 0.0;\n              q3 = 0.0;\n              return;\n          }\n\n          // we will have to use u2 and v2 to compute the scalar part\n          uRef = u2;\n          vRef = v2;\n\n      }\n  }\n  q1 = k.getX() / normK;\n  q2 = k.getY() / normK;\n  q3 = k.getZ() / normK;\n\n  // compute the scalar part\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k);\n\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}