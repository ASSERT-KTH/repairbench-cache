{
    "generation": "import org.apache.commons.math.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math.exception.MathRuntimeException;\nimport org.apache.commons.math.util.FastMath;\nimport org.apache.commons.math.util.Precision;\nimport org.apache.commons.math.exception.util.LocalizedFormats;\n\npublic class Rotation { // Assuming Rotation class and its fields q0, q1, q2, q3\n\n  // Fields (implicitly part of the Rotation class, not provided in snippet)\n  private double q0;\n  private double q1;\n  private double q2;\n  private double q3;\n\n  // Placeholder for a simplified Rotation(Vector3D u, Vector3D v) constructor\n  // In a full class, this would be a proper constructor.\n  // This is a minimal implementation to allow the fix to compile.\n  private Rotation(Vector3D u, Vector3D v) {\n      double normProduct = u.getNorm() * v.getNorm();\n      if (normProduct == 0) {\n          throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n      }\n\n      double dot = u.dotProduct(v);\n      if (dot < -0.9999999999999998) { // -1.0 + EPSILON\n          Vector3D w = u.orthogonal();\n          this.q0 = 0.0;\n          this.q1 = w.getX();\n          this.q2 = w.getY();\n          this.q3 = w.getZ();\n      } else {\n          this.q0 = FastMath.sqrt(0.5 * (1.0 + dot / normProduct));\n          double coeff = 1.0 / (2.0 * this.q0 * normProduct);\n          Vector3D q = u.crossProduct(v).scalarMultiply(coeff);\n          this.q1 = q.getX();\n          this.q2 = q.getY();\n          this.q3 = q.getZ();\n      }\n  }\n\n  // Getters for the fields, needed for the test case\n  public double getQ0() { return q0; }\n  public double getQ1() { return q1; }\n  public double getQ2() { return q2; }\n  public double getQ3() { return q3; }\n\n  // Placeholder for orthogonal() method of Vector3D, if not provided\n  // In a full implementation, this would be part of Vector3D.\n  // This is a minimal implementation to allow the fix to compile.\n  // @SuppressWarnings(\"unused\") // For the mock orthogonal method\n  // private Vector3D orthogonal(Vector3D v) {\n  //     double x = v.getX();\n  //     double y = v.getY();\n  //     double z = v.getZ();\n  //     if (x == 0.0 && y == 0.0) {\n  //         return new Vector3D(1.0, 0.0, 0.0);\n  //     }\n  //     return new Vector3D(-y, x, 0.0).normalize();\n  // }\n\n\n  /** Build the rotation that transforms a pair of vector into another pair.\n\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n   * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n   * not the same as the angular separation between v<sub>1</sub> and\n   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n   * v<sub>2</sub>) plane.</p>\n\n   * @param u1 first vector of the origin pair\n   * @param u2 second vector of the origin pair\n   * @param v1 desired image of u1 by the rotation\n   * @param v2 desired image of u2 by the rotation\n   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n   */\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // Define tolerance\n  double tolerance = Precision.EPSILON;\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  Vector3D v1Mod = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1Mod.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  // Ensure non-negative arguments to sqrt due to floating point inaccuracies\n  double betaArgNum   = FastMath.max(0.0, u2u2 - u1u2 * coeffU);\n  double betaArgDenom = FastMath.max(0.0, v2v2 - v1v2 * coeffV);\n\n  // Initial check for collinearity of input pairs\n  Vector3D u3Initial = u1.crossProduct(u2);\n  Vector3D v3Initial = v1Mod.crossProduct(v2);\n  double u3u3Initial = u3Initial.getNormSq();\n  double v3v3Initial = v3Initial.getNormSq();\n\n  if (u3u3Initial < tolerance * tolerance || v3v3Initial < tolerance * tolerance) {\n      // At least one of the pairs is collinear or nearly collinear.\n      // The rotation is simply the one moving u1 to v1Mod.\n      Rotation r = new Rotation(u1, v1Mod);\n      this.q0 = r.getQ0();\n      this.q1 = r.getQ1();\n      this.q2 = r.getQ2();\n      this.q3 = r.getQ3();\n      return;\n  }\n\n  // Proceed with general case if not collinear\n  double beta   = FastMath.sqrt(betaArgNum / betaArgDenom);\n  double alpha  = coeffU - beta * coeffV;\n  Vector3D v2Mod = new Vector3D(alpha, v1Mod, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1Mod;\n  Vector3D v1Su1 = v1Mod.subtract(u1);\n  Vector3D v2Su2 = v2Mod.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u3Initial; // Reuse u3Initial computed earlier.\n  double c       = k.dotProduct(u3);\n\n  // Changed `if (c == 0)` to a tolerance check `FastMath.abs(c) < tolerance * norm`\n  // The norm factor used is `u3.getNorm()` or similar, to make the comparison relative.\n  // Note: if k is zero, c is zero, but then k.getNorm() is also zero.\n  // The threshold should account for magnitudes of vectors involved in the dot product.\n  // A robust approach is to compare against `tolerance * u3.getNorm() * k.getNorm()`\n  // but `k.getNorm()` itself can be unstable if k is very small.\n  // A simpler common approach is `FastMath.abs(c) < tolerance * FastMath.sqrt(u3.getNormSq())`.\n\n  if (FastMath.abs(c) < tolerance * FastMath.sqrt(u3.getNormSq())) { // Threshold relative to u3\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = v3Initial; // Reuse v3Initial computed earlier.\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n\n    if (FastMath.abs(c) < tolerance * FastMath.sqrt(u2Prime.getNormSq())) { // Threshold relative to u2Prime\n      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2Su2.crossProduct(v3Su3);\n      Vector3D u2CrossU3 = u2.crossProduct(u3);\n      c = k.dotProduct(u2CrossU3);\n\n      if (FastMath.abs(c) < tolerance * FastMath.sqrt(u2CrossU3.getNormSq())) { // Threshold relative to u2CrossU3\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation (k is effectively zero)\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = u2;\n      vRef = v2Mod;\n\n    }\n  }\n\n  // compute the vectorial part\n  // Removed \"c = FastMath.sqrt(c);\" as it was incorrect and could lead to NaN\n  double inv = 1.0 / (c + c); // This assumes c is non-zero (or large enough after above checks)\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n\n  // compute the scalar part\n  // Made the denominator robust against k.getNormSq() being numerically zero\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  q0 = vRef.dotProduct(k) / (2 * FastMath.max(Precision.EPSILON_SQ, k.getNormSq()));\n\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}