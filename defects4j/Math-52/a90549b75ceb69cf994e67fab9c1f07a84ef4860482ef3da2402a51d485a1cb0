{
    "generation": "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // norms computation\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // normalize u1, u2, v1, v2 for safety\n    Vector3D u1n = u1.normalize();\n    Vector3D u2n = u2.normalize();\n    Vector3D v1n = v1.normalize();\n    Vector3D v2n = v2.normalize();\n\n    // Orthonormal basis from u1, u2\n    Vector3D u3 = u1n.crossProduct(u2n).normalize();\n    Vector3D u2orth = u3.crossProduct(u1n).normalize();\n\n    // Orthonormal basis from v1, v2\n    Vector3D v3 = v1n.crossProduct(v2n).normalize();\n    Vector3D v2orth = v3.crossProduct(v1n).normalize();\n\n    // Rotation matrix from u-basis to v-basis: vMat = rot * uMat => rot = vMat * uMat^T\n    // Build matrices whose columns are the basis vectors\n    double[][] uMat = new double[3][3];\n    double[][] vMat = new double[3][3];\n    uMat[0][0] = u1n.getX(); uMat[1][0] = u1n.getY(); uMat[2][0] = u1n.getZ();\n    uMat[0][1] = u2orth.getX(); uMat[1][1] = u2orth.getY(); uMat[2][1] = u2orth.getZ();\n    uMat[0][2] = u3.getX(); uMat[1][2] = u3.getY(); uMat[2][2] = u3.getZ();\n\n    vMat[0][0] = v1n.getX(); vMat[1][0] = v1n.getY(); vMat[2][0] = v1n.getZ();\n    vMat[0][1] = v2orth.getX(); vMat[1][1] = v2orth.getY(); vMat[2][1] = v2orth.getZ();\n    vMat[0][2] = v3.getX(); vMat[1][2] = v3.getY(); vMat[2][2] = v3.getZ();\n\n    // rotMat = vMat * uMat^T\n    double[][] rotMat = new double[3][3];\n    for (int i = 0; i < 3; ++i) {\n      for (int j = 0; j < 3; ++j) {\n        rotMat[i][j] = 0.0;\n        for (int k = 0; k < 3; ++k) {\n          rotMat[i][j] += vMat[i][k] * uMat[j][k];\n        }\n      }\n    }\n\n    // Now convert rotMat to quaternion\n    double trace = rotMat[0][0] + rotMat[1][1] + rotMat[2][2];\n    if (trace > 0) {\n      double s = FastMath.sqrt(trace + 1.0) * 2; // s=4*q0\n      q0 = 0.25 * s;\n      q1 = (rotMat[2][1] - rotMat[1][2]) / s;\n      q2 = (rotMat[0][2] - rotMat[2][0]) / s;\n      q3 = (rotMat[1][0] - rotMat[0][1]) / s;\n    } else if ((rotMat[0][0] > rotMat[1][1]) && (rotMat[0][0] > rotMat[2][2])) {\n      double s = FastMath.sqrt(1.0 + rotMat[0][0] - rotMat[1][1] - rotMat[2][2]) * 2; // s=4*q1\n      q0 = (rotMat[2][1] - rotMat[1][2]) / s;\n      q1 = 0.25 * s;\n      q2 = (rotMat[0][1] + rotMat[1][0]) / s;\n      q3 = (rotMat[0][2] + rotMat[2][0]) / s;\n    } else if (rotMat[1][1] > rotMat[2][2]) {\n      double s = FastMath.sqrt(1.0 + rotMat[1][1] - rotMat[0][0] - rotMat[2][2]) * 2; // s=4*q2\n      q0 = (rotMat[0][2] - rotMat[2][0]) / s;\n      q1 = (rotMat[0][1] + rotMat[1][0]) / s;\n      q2 = 0.25 * s;\n      q3 = (rotMat[1][2] + rotMat[2][1]) / s;\n    } else {\n      double s = FastMath.sqrt(1.0 + rotMat[2][2] - rotMat[0][0] - rotMat[1][1]) * 2; // s=4*q3\n      q0 = (rotMat[1][0] - rotMat[0][1]) / s;\n      q1 = (rotMat[0][2] + rotMat[2][0]) / s;\n      q2 = (rotMat[1][2] + rotMat[2][1]) / s;\n      q3 = 0.25 * s;\n    }\n\n    // Ensure the quaternion is normalized\n    double norm = FastMath.sqrt(q0*q0 + q1*q1 + q2*q2 + q3*q3);\n    q0 /= norm;\n    q1 /= norm;\n    q2 /= norm;\n    q3 /= norm;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}