{
    "generation": "import org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math.exception.MathRuntimeException;\nimport org.apache.commons.math.util.FastMath;\nimport org.apache.commons.math.util.Precision;\n\n// Class fields (q0, q1, q2, q3) are assumed to be implicitly available as they are assigned in the constructor.\n// For a complete runnable example, they would typically be private final fields initialized by the constructor.\n// private final double q0;\n// private final double q1;\n// private final double q2;\n// private final double q3;\n\n// The rest of the class (methods like getQ0, getQ1, etc.) is omitted as per instructions.\n\n  /** Build the rotation that transforms a pair of vector into another pair.\n\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n   * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n   * not the same as the angular separation between v<sub>1</sub> and\n   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n   * v<sub>2</sub>) plane.</p>\n\n   * @param u1 first vector of the origin pair\n   * @param u2 second vector of the origin pair\n   * @param v1 desired image of u1 by the rotation\n   * @param v2 desired image of u2 by the rotation\n   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n   */\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1; // v1v1 is now u1u1\n\n  // uOrthComponentSq is ||u2 - proj_{u1}u2||^2, which is ||u1 x u2||^2 / ||u1||^2\n  // vOrthComponentSq is ||v2 - proj_{v1}v2||^2, which is ||v1 x v2||^2 / ||v1||^2 (after v1 scaled)\n  double uOrthComponentSq = u2u2 - u1u2 * coeffU;\n  double vOrthComponentSq = v2v2 - v1v2 * coeffV;\n\n  double beta;\n\n  // Clamp values to non-negative to avoid NaN from sqrt due to precision issues\n  // Using a relative tolerance for checking if a value is effectively zero.\n  final double uOrthThreshold = Precision.EPSILON * u2u2;\n  final double vOrthThreshold = Precision.EPSILON * v2v2;\n\n  if (uOrthComponentSq < uOrthThreshold) {\n      uOrthComponentSq = 0.0;\n  }\n  if (vOrthComponentSq < vOrthThreshold) {\n      vOrthComponentSq = 0.0;\n  }\n\n  if (vOrthComponentSq == 0.0) { // v1 and v2 are collinear (or numerically so)\n      if (uOrthComponentSq == 0.0) { // u1 and u2 are also collinear (or numerically so)\n          // Both pairs are collinear. The transformation essentially maps u1 to v1,\n          // and u2 (which is k*u1) to v2' (which must be k*v1).\n          // In this scenario, beta should be 0, implying v2' = alpha * v1.\n          // Since alpha = coeffU - beta * coeffV, with beta=0, alpha = coeffU.\n          // This correctly leads to v2' = coeffU * v1, where coeffU is the scaling factor k.\n          beta = 0.0;\n      } else {\n          // u1,u2 are NOT collinear, but v1,v2 ARE collinear.\n          // It's impossible to map a 2D span (defined by non-collinear u1, u2)\n          // to a 1D span (defined by collinear v1, v2) using a rotation.\n          // This indicates an invalid input configuration.\n          throw MathRuntimeException.createIllegalArgumentException(\n              LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR // Reusing existing message, though not semantically perfect\n          );\n      }\n  } else {\n      beta = FastMath.sqrt(uOrthComponentSq / vOrthComponentSq);\n  }\n\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n\n  // Use a tolerance for checking if c is zero in the subsequent `if (c == 0)` blocks\n  // to avoid issues with very small non-zero values.\n  // For `testIssue639`, the critical part causing `NaN` is often `c < 0` before `sqrt(c)`.\n  // Or, if `c` is very small, it skips the `c==0` checks, leading to numerical issues later.\n  final double cThreshold = Precision.EPSILON * FastMath.max(FastMath.max(k.getNormSq(), u3.getNormSq()), 1.0); // Use a scale for tolerance\n\n  if (FastMath.abs(c) < cThreshold) { // c is effectively zero\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n\n    if (FastMath.abs(c) < cThreshold) { // c is also close to the (u1, u3) plane\n      // the (q1, q2, q3) vector is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2Su2.crossProduct(v3Su3);\n      c = k.dotProduct(u2.crossProduct(u3));\n\n      if (FastMath.abs(c) < cThreshold) {\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = u2;\n      vRef = v2;\n\n    }\n\n  }\n\n  // compute the vectorial part\n  // Clamp c to non-negative to avoid NaN from sqrt if c became negative due to precision.\n  c = FastMath.sqrt(FastMath.max(0.0, c));\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n\n  // compute the scalar part\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n   double kNormSq = k.getNormSq();\n   // If the vectorial part is numerically zero (q1,q2,q3 are effectively zero),\n   // then k (the second k) will be numerically zero, leading to 0/0 for q0.\n   // This means the rotation is effectively identity.\n   final double kNormSqThreshold = Precision.EPSILON * uRef.getNormSq(); // scale threshold by uRef norm\n   if (kNormSq < kNormSqThreshold) {\n       q0 = 1.0;\n       q1 = 0.0;\n       q2 = 0.0;\n       q3 = 0.0;\n   } else {\n       q0 = vRef.dotProduct(k) / (2 * kNormSq);\n   }\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}