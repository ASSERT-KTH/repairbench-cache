{
    "generation": "/** Build the rotation that transforms a pair of vector into another pair.\n * <p>Except for possible scale factors, if the instance were applied to\n * the pair (u\u2081, u\u2082) it will produce the pair (v\u2081, v\u2082).</p>\n * <p>If the angular separation between u\u2081 and u\u2082 is not the same as the angular\n * separation between v\u2081 and v\u2082, then a corrected v\u2032\u2082 will be used rather than\n * v\u2082; the corrected vector will be in the (v\u2081, v\u2082) plane.</p>\n * @param u1 first vector of the origin pair\n * @param u2 second vector of the origin pair\n * @param v1 desired image of u1 by the rotation\n * @param v2 desired image of u2 by the rotation\n * @exception IllegalArgumentException if the norm of one of the vectors is zero\n */\npublic Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // norms computation\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n        throw MathRuntimeException.createIllegalArgumentException(\n            LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // normalize v1 in order to have ||v1'|| = ||u1||\n    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n    // adjust v2 in order to have (u1|u2) = (v1'|v2') and ||v2'|| = ||u2||\n    double u1u2 = u1.dotProduct(u2);\n    double v1v2 = v1.dotProduct(v2);\n    double coeffU = u1u2 / u1u1;\n    double coeffV = v1v2 / u1u1;\n    double num = u2u2 - u1u2 * coeffU;\n    // protect against tiny negative round-off errors\n    num = (num < 0) ? 0 : num;\n    double beta = FastMath.sqrt(num / (v2v2 - v1v2 * coeffV));\n    double alpha = coeffU - beta * coeffV;\n    v2 = new Vector3D(alpha, v1, beta, v2);\n\n    // preliminary computation based on differences from u1 and u2\n    Vector3D uRef  = u1;\n    Vector3D vRef  = v1;\n    Vector3D v1Su1 = v1.subtract(u1);\n    Vector3D v2Su2 = v2.subtract(u2);\n    Vector3D k     = v1Su1.crossProduct(v2Su2);\n    Vector3D u3    = u1.crossProduct(u2);\n    double c       = k.dotProduct(u3);\n    if (c == 0) {\n        // the (q\u2081, q\u2082, q\u2083) vector is close to the (u\u2081, u\u2082) plane; try another set of vectors\n        Vector3D v3 = Vector3D.crossProduct(v1, v2);\n        Vector3D v3Su3 = v3.subtract(u3);\n        k = v1Su1.crossProduct(v3Su3);\n        Vector3D u2Prime = u1.crossProduct(u3);\n        c = k.dotProduct(u2Prime);\n\n        if (c == 0) {\n            // the (q\u2081, q\u2082, q\u2083) vector is also close to the (u\u2081, u\u2083) plane,\n            // almost aligned with u\u2081: we try (u\u2082, u\u2083) and (v\u2082, v\u2083)\n            k = v2Su2.crossProduct(v3Su3);\n            c = k.dotProduct(u2.crossProduct(u3));\n\n            if (c == 0) {\n                // the (q\u2081, q\u2082, q\u2083) vector is aligned with everything,\n                // this is really the identity rotation\n                q0 = 1.0;\n                q1 = 0.0;\n                q2 = 0.0;\n                q3 = 0.0;\n                return;\n            }\n\n            // use u\u2082 and v\u2082 for computing the scalar part\n            uRef = u2;\n            vRef = v2;\n        }\n    }\n\n    // To avoid taking the square root of a negative number due to round-off,\n    // ensure that c is non-negative.\n    double sign = 1.0;\n    if (c < 0) {\n        c = -c;\n        sign = -1.0;\n    }\n    c = FastMath.sqrt(c);\n    double inv = 1.0 / (2 * c);\n    q1 = inv * k.getX();\n    q2 = inv * k.getY();\n    q3 = inv * k.getZ();\n\n    // Compute the scalar part.\n    // k is recomputed as the cross product: uRef x (q vector)\n    k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                     uRef.getZ() * q1 - uRef.getX() * q3,\n                     uRef.getX() * q2 - uRef.getY() * q1);\n    q0 = sign * vRef.dotProduct(k) / (2 * k.getNormSq());\n\n    // By convention, ensure that the scalar part is non-negative.\n    if (q0 < 0) {\n        q0 = -q0;\n        q1 = -q1;\n        q2 = -q2;\n        q3 = -q3;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}