{
    "generation": "  /** Build the rotation that transforms a pair of vector into another pair.\n\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n   * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n   * not the same as the angular separation between v<sub>1</sub> and\n   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n   * v<sub>2</sub>) plane.</p>\n\n   * @param u1 first vector of the origin pair\n   * @param u2 second vector of the origin pair\n   * @param v1 desired image of u1 by the rotation\n   * @param v2 desired image of u2 by the rotation\n   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n   */\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // Store original vectors and their squared norms for robust calculations\n  final Vector3D originalU1 = u1;\n  final Vector3D originalU2 = u2;\n  final Vector3D originalV1 = v1;\n  final Vector3D originalV2 = v2;\n\n  double u1u1 = originalU1.getNormSq();\n  double u2u2 = originalU2.getNormSq();\n  double v1v1 = originalV1.getNormSq();\n  double v2v2 = originalV2.getNormSq();\n\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  // v1 is now the scaled version, its squared norm is u1u1\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), originalV1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = originalU1.dotProduct(originalU2);\n\n  // Calculate component of originalU2 orthogonal to originalU1\n  double c1 = u1u2 / u1u1;\n  Vector3D u2Adj  = originalU2.subtract(new Vector3D(c1, originalU1));\n  double alphaA = u2Adj.getNormSq();\n\n  // Calculate component of originalV2 orthogonal to originalV1\n  double v1v2_orig_dot = originalV1.dotProduct(originalV2);\n  double c2 = v1v2_orig_dot / v1v1; // v1v1 is originalV1.getNormSq()\n  Vector3D v2Adj = originalV2.subtract(new Vector3D(c2, originalV1));\n  double alphaB = v2Adj.getNormSq();\n\n  // Handle collinearity cases\n  if (alphaA < Precision.EPSILON || alphaB < Precision.EPSILON) {\n      // u2 is colinear to u1 and/or v2 is colinear to v1.\n      // In this case, we ensure norms match and direction is preserved/flipped if needed.\n      if (u1u2 < 0) { // u1 and u2 are in opposite directions\n          v2 = new Vector3D(-FastMath.sqrt(u2u2 / v2v2), originalV2);\n      } else { // u1 and u2 are in same direction\n          v2 = new Vector3D(FastMath.sqrt(u2u2 / v2v2), originalV2);\n      }\n  } else {\n      // Normal case: use the adjusted v2 for the rotation.\n      // v1 is the scaled v1. v2Adj is (original v2 - its projection on original v1).\n      v2 = new Vector3D(c1, v1, FastMath.sqrt(alphaA / alphaB), v2Adj);\n  }\n\n  // preliminary computation\n  Vector3D uRef  = originalU1;\n  Vector3D vRef  = v1; // v1 is the scaled v1'\n  Vector3D v1Su1 = v1.subtract(originalU1);\n  Vector3D v2Su2 = v2.subtract(originalU2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = originalU1.crossProduct(originalU2);\n  double c       = k.dotProduct(u3);\n\n  // Check for near-zero 'c' and adjust uRef/vRef or return identity\n  if (FastMath.abs(c) < Precision.EPSILON) { // Use Precision.EPSILON for robustness against small numbers\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = originalU1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n\n    if (FastMath.abs(c) < Precision.EPSILON) { // Use Precision.EPSILON\n      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2Su2.crossProduct(v3Su3);\n      c = k.dotProduct(originalU2.crossProduct(u3));\n\n      if (FastMath.abs(c) < Precision.EPSILON) { // Use Precision.EPSILON\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = originalU2;\n      vRef = v2;\n\n    }\n  }\n\n  // compute the vectorial part\n  c = FastMath.sqrt(FastMath.max(0.0, c)); // Clamp c to prevent sqrt of negative zero due to precision\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n\n  // compute the scalar part\n  // k_prime is uRef.crossProduct(q_vector)\n  Vector3D k_prime = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                                  uRef.getZ() * q1 - uRef.getX() * q3,\n                                  uRef.getX() * q2 - uRef.getY() * q1);\n\n  double k_prime_normSq = k_prime.getNormSq();\n\n  // Handle case where k_prime is numerically zero (uRef parallel to q_vec)\n  if (k_prime_normSq < Precision.EPSILON) {\n      // If uRef is parallel to the rotation axis (q1,q2,q3), it should be invariant under rotation.\n      // Thus, vRef must be uRef (identity) or -uRef (180 degree rotation).\n      // The current q1, q2, q3 might not be normalized to 1 if q0=0.\n      // This is a known numerical instability for this specific q0 formula.\n      // Fallback to simpler q0 determination.\n      // If the axis is parallel to uRef, and uRef maps to vRef, then uRef and vRef must be collinear.\n      // Rotation angle is 0 or PI.\n      if (uRef.dotProduct(vRef) > 0) {\n          q0 = 1.0;\n      } else {\n          q0 = 0.0;\n          // If q0 is 0, the (q1,q2,q3) vector *must* be normalized to 1.\n          // Since q1, q2, q3 are already non-zero due to c not being zero,\n          // we can re-normalize them to ensure norm 1.\n          double q_vec_norm = FastMath.sqrt(q1*q1 + q2*q2 + q3*q3);\n          if (q_vec_norm > Precision.EPSILON) { // Avoid division by zero if q1,q2,q3 are truly (0,0,0)\n              q1 /= q_vec_norm;\n              q2 /= q_vec_norm;\n              q3 /= q_vec_norm;\n          }\n      }\n  } else {\n      q0 = vRef.dotProduct(k_prime) / (2 * k_prime_normSq);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}