{
    "generation": "/**\n * Build the rotation that transforms a pair of vector into another pair.\n *\n * <p>\n * Except for possible scale factors, if the instance were applied to the pair (u<sub>1</sub>, u<sub>2</sub>),\n * it will produce the pair (v<sub>1</sub>, v<sub>2</sub>).\n * </p>\n *\n * <p>\n * If the angular separation between u<sub>1</sub> and u<sub>2</sub> is not the same as the angular separation\n * between v<sub>1</sub> and v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than v<sub>2</sub>.\n * The corrected vector will be in the (v<sub>1</sub>, v<sub>2</sub>) plane.\n * </p>\n *\n * @param u1 First vector of the origin pair.\n * @param u2 Second vector of the origin pair.\n * @param v1 Desired image of u1 by the rotation.\n * @param v2 Desired image of u2 by the rotation.\n * @exception IllegalArgumentException If the norm of one of the vectors is zero.\n */\npublic Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // Compute the norms squared of the vectors\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n        throw MathRuntimeException.createIllegalArgumentException(\n            LocalizedODE Formats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // Normalize v1 to have the same norm as u1\n    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n    // Compute the dot products\n    double u1u2 = u1.dotProduct(u2);\n    double v1v2 = v1.dotProduct(v2);\n\n    double coeffU = u1u2 / u1u1;\n    double coeffV = v1v2 / u1u1;\n\n    // Compute numerator and denominator for beta, ensuring non-negative value\n    double numerator = u2u2 - u1u2 * coeffU;\n    double denominator = v2v2 - v1v2 * coeffV;\n\n    double ratio;\n    if (denominator == 0) {\n        ratio = 0;\n    } else {\n        ratio = numerator / denominator;\n        ratio = Math.max(ratio, 0.0);\n    }\n    double beta = FastMath.sqrt(ratio);\n\n    double alpha = coeffU - beta * coeffV;\n\n    // Correctly compute the new v2 as alpha * v1 + beta * v2\n    v2 = v1.multiply(alpha).add(v2.multiply(beta));\n\n    // Preliminary computation\n    Vector3D uRef = u1;\n    Vector3D vRef = v1;\n    Vector3D v1Su1 = v1.subtract(u1);\n    Vector3D v2Su2 = v2.subtract(u2);\n    Vector3D k = v1Su1.crossProduct(v2Su2);\n    Vector3D u3 = u1.crossProduct(u2);\n    double c = k.dotProduct(u3);\n\n    if (c == 0) {\n        // The (q1, q2, q3) vector is close to the (u1, u2) plane; try other vectors\n        Vector3D v3 = Vector3D.crossProduct(v1, v2);\n        Vector3D v3Su3 = v3.subtract(u3);\n        k = v1Su1.crossProduct(v3Su3);\n        Vector3D u2Prime = u1.crossProduct(u3);\n        c = k.dotProduct(u2Prime);\n\n        if (c == 0) {\n            // The (q1, q2, q3) vector is also close to the (u1, u3) plane; try (u2, u3)\n            k = v2Su2.crossProduct(v3Su3);\n            u2.crossProduct(u3);\n            c = k.dotProduct(u2.crossProduct(u3));\n\n            if (c == 0) {\n                // Identity rotation\n                q0 = 1.0;\n                q1 = 0.0;\n                q2 = 0.0;\n                q3 = 0.0;\n                return;\n            }\n\n            uRef = u2;\n            vRef = v2;\n        }\n    }\n\n    // Compute the vectorial part\n    c = FastMath.sqrt(c);\n    if (c == 0) {\n        q0 = vRef.dotProduct(uRef);\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n    } else {\n        double inv = 1.0 / (c + c);\n        q1 = inv * k.getX();\n        q2 = inv * k.getY();\n        q3 = inv * k.getZ();\n\n        // Compute the scalar part\n        Vector3D kVec = new Vector3D(\n            uRef.getY() * q3 - uRef.getZ() * q2,\n            uRef.getZ() * q1 - uRef.getX() * q3,\n            uRef.getX() * q2 - uRef.getY() * q1\n        );\n        double kNormSq = kVec.getNormSq();\n        if (kNormSq != 0) {\n            q0 = vRef.dotProduct(kVec) / (2 * kNormSq);\n        } else {\n            q0 = 1.0;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}