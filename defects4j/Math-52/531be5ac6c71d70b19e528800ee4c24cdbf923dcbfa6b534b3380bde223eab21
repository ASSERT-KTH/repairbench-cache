{
    "generation": "/** Build the rotation that transforms a pair of vector into another pair.\n *\n * <p>Except for possible scale factors, if the instance were applied to\n * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n * (v<sub>1</sub>, v<sub>2</sub>).</p>\n *\n * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n * not the same as the angular separation between v<sub>1</sub> and\n * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n * v<sub>2</sub>) plane.</p>\n *\n * @param u1 first vector of the origin pair\n * @param u2 second vector of the origin pair\n * @param v1 desired image of u1 by the rotation\n * @param v2 desired image of u2 by the rotation\n * @exception IllegalArgumentException if the norm of one of the vectors is zero\n */\npublic Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // basic zero\u2010norm checks\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if (u1u1 == 0 || u2u2 == 0 || v1v1 == 0 || v2v2 == 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // build an orthonormal basis (u1Hat, u2Hat, u3Hat) from (u1, u2)\n    double u1Norm = FastMath.sqrt(u1u1);\n    Vector3D u1Hat  = new Vector3D(1.0 / u1Norm, u1);\n    double proj12  = u1Hat.dotProduct(u2);\n    Vector3D u2Proj = u2.subtract(u1Hat.scalarMultiply(proj12));\n    double u2ProjNorm = FastMath.sqrt(u2Proj.getNormSq());\n    if (u2ProjNorm == 0) {\n        // degenerate case, fallback to single-vector constructor\n        Rotation r = new Rotation(u1Hat, v1.normalize());\n        this.q0 = r.q0; this.q1 = r.q1; this.q2 = r.q2; this.q3 = r.q3;\n        return;\n    }\n    Vector3D u2Hat = u2Proj.scalarMultiply(1.0 / u2ProjNorm);\n    Vector3D u3Hat = Vector3D.crossProduct(u1Hat, u2Hat);\n\n    // build an orthonormal basis (v1Hat, v2Hat, v3Hat) from (v1, v2)\n    Vector3D v1Hat  = v1.normalize();\n    double proj34  = v1Hat.dotProduct(v2);\n    Vector3D v2Proj = v2.subtract(v1Hat.scalarMultiply(proj34));\n    double v2ProjNorm = FastMath.sqrt(v2Proj.getNormSq());\n    if (v2ProjNorm == 0) {\n        // degenerate case, fallback to single-vector constructor\n        Rotation r = new Rotation(u1Hat, v1Hat);\n        this.q0 = r.q0; this.q1 = r.q1; this.q2 = r.q2; this.q3 = r.q3;\n        return;\n    }\n    Vector3D v2Hat = v2Proj.scalarMultiply(1.0 / v2ProjNorm);\n    Vector3D v3Hat = Vector3D.crossProduct(v1Hat, v2Hat);\n\n    // rotation matrix M = V * U^T\n    double m00 = v1Hat.dotProduct(u1Hat);\n    double m01 = v1Hat.dotProduct(u2Hat);\n    double m02 = v1Hat.dotProduct(u3Hat);\n    double m10 = v2Hat.dotProduct(u1Hat);\n    double m11 = v2Hat.dotProduct(u2Hat);\n    double m12 = v2Hat.dotProduct(u3Hat);\n    double m20 = v3Hat.dotProduct(u1Hat);\n    double m21 = v3Hat.dotProduct(u2Hat);\n    double m22 = v3Hat.dotProduct(u3Hat);\n\n    // convert rotation matrix to quaternion (q0 = scalar part)\n    double trace = m00 + m11 + m22;\n    if (trace >= 0) {\n        double s = FastMath.sqrt(trace + 1.0) * 2.0;\n        q0 = 0.25 * s;\n        q1 = (m21 - m12) / s;\n        q2 = (m02 - m20) / s;\n        q3 = (m10 - m01) / s;\n    } else if (m00 > m11 && m00 > m22) {\n        double s = FastMath.sqrt(1.0 + m00 - m11 - m22) * 2.0;\n        q0 = (m21 - m12) / s;\n        q1 = 0.25 * s;\n        q2 = (m01 + m10) / s;\n        q3 = (m02 + m20) / s;\n    } else if (m11 > m22) {\n        double s = FastMath.sqrt(1.0 + m11 - m00 - m22) * 2.0;\n        q0 = (m02 - m20) / s;\n        q1 = (m01 + m10) / s;\n        q2 = 0.25 * s;\n        q3 = (m12 + m21) / s;\n    } else {\n        double s = FastMath.sqrt(1.0 + m22 - m00 - m11) * 2.0;\n        q0 = (m10 - m01) / s;\n        q1 = (m02 + m20) / s;\n        q2 = (m12 + m21) / s;\n        q3 = 0.25 * s;\n    }\n\n    // normalize quaternion and ensure scalar part is non-negative\n    double norm = FastMath.sqrt(q0*q0 + q1*q1 + q2*q2 + q3*q3);\n    q0 /= norm; q1 /= norm; q2 /= norm; q3 /= norm;\n    if (q0 < 0) {\n        q0 = -q0; q1 = -q1; q2 = -q2; q3 = -q3;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}