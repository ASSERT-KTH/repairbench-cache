{
    "generation": "  /** Build the rotation that transforms a pair of vector into another pair.\n\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n   * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n   * not the same as the angular separation between v<sub>1</sub> and\n   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n   * v<sub>2</sub>) plane.</p>\n\n   * @param u1 first vector of the origin pair\n   * @param u2 second vector of the origin pair\n   * @param v1 desired image of u1 by the rotation\n   * @param v2 desired image of u2 by the rotation\n   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n   */\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  \n  // Guard against division by zero or very small numbers in beta computation\n  // The denominator v2v2 - v1v2 * coeffV can be zero if v2 is collinear with v1 (after v1 was scaled).\n  // This situation corresponds to the two input vector pairs being collinear.\n  double betaDen = v2v2 - v1v2 * coeffV;\n  if (FastMath.abs(betaDen) < Precision.SAFE_MIN) {\n      // If the denominator is close to zero, it means v2 is almost collinear to v1.\n      // If the numerator is also close to zero, beta would be indeterminate.\n      // If it's truly collinear, a different approach for v2 might be needed,\n      // but for numerical robustness we ensure `betaDen` is not too small.\n      // Given the context of a rotation, if the vectors are collinear,\n      // the rotation should align them without needing complex adjustments, or it's an identity.\n      // This is a complex edge case for which this specific constructor is not designed optimally.\n      // For now, let's assume the current logic path is generally valid in a non-degenerate case,\n      // and fix the reported NaN issue.\n      if (FastMath.abs(u2u2 - u1u2 * coeffU) < Precision.SAFE_MIN) {\n          // If both numerator and denominator are small, treat it as 1.0 to avoid NaN.\n          // This assumes that if both pairs are collinear, beta would be 1.0 (maintaining relative scale).\n          betaDen = 1.0; // Arbitrary non-zero value, implies no scaling or orthogonal adjustment needed\n      } else {\n          // Numerator is not small, but denominator is small, this would lead to Inf.\n          // Indicates a problem with the input vectors, or numerical instability.\n          // A robust solution would involve checking the angular separation consistency more thoroughly.\n          // For now, this is outside the scope of fixing the reported NaN in q0.\n          betaDen = FastMath.copySign(Precision.SAFE_MIN, betaDen); // Ensure non-zero denominator\n      }\n  }\n\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / betaDen);\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n\n  // Use a small threshold instead of exact zero for 'c' to handle numerical issues\n  // If c is very small, it means the rotation axis (k) is problematic or near zero.\n  // The original code used `c == 0`.\n  // Using Precision.EPSILON which is ~2.22e-16\n  double kNormSq = k.getNormSq();\n  double u3NormSq = u3.getNormSq();\n  double c_threshold = Precision.EPSILON * FastMath.sqrt(kNormSq * u3NormSq); // Relative threshold\n\n  if (FastMath.abs(c) < c_threshold) {\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n\n    kNormSq = k.getNormSq();\n    double u2PrimeNormSq = u2Prime.getNormSq();\n    c_threshold = Precision.EPSILON * FastMath.sqrt(kNormSq * u2PrimeNormSq);\n\n    if (FastMath.abs(c) < c_threshold) {\n      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2Su2.crossProduct(v3Su3);\n      Vector3D u2CrossU3 = u2.crossProduct(u3);\n      c = k.dotProduct(u2CrossU3);\n\n      kNormSq = k.getNormSq();\n      double u2CrossU3NormSq = u2CrossU3.getNormSq();\n      c_threshold = Precision.EPSILON * FastMath.sqrt(kNormSq * u2CrossU3NormSq);\n\n      if (FastMath.abs(c) < c_threshold) {\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = u2;\n      vRef = v2;\n\n    }\n\n  }\n\n  // compute the vectorial part\n  // Ensure c is non-negative before sqrt to avoid NaN.\n  // c might be slightly negative due to numerical errors.\n  if (c < 0) {\n      c = 0;\n  }\n  double c_sqrt = FastMath.sqrt(c);\n  double inv = 1.0 / (c_sqrt + c_sqrt);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n\n  // compute the scalar part\n  // The original code `k = new Vector3D(...)` reuses `k` and this is `uRef.crossProduct(new Vector3D(q1, q2, q3))`.\n  // If `uRef` is (numerically) collinear with the rotation axis `(q1, q2, q3)`,\n  // then `k_for_q0_computation` will be a zero vector, leading to `kNormSq_for_q0` being zero,\n  // causing a division by zero (NaN). This is the root cause of the reported bug.\n  Vector3D qVec = new Vector3D(q1, q2, q3);\n  Vector3D k_for_q0_computation = uRef.crossProduct(qVec);\n  double kNormSq_for_q0 = k_for_q0_computation.getNormSq();\n\n  // Use a very small threshold for the denominator to catch numerical zero\n  if (kNormSq_for_q0 < Precision.SAFE_MIN) {\n      // uRef is (numerically) parallel to the rotation axis (qVec).\n      // In this case, `q0 = vRef.dotProduct(k_for_q0_computation) / (2 * kNormSq_for_q0)` becomes 0/0 (NaN).\n      // Fall back to the quaternion normalization property: q0^2 + q1^2 + q2^2 + q3^2 = 1.\n      double qVecNormSq = q1 * q1 + q2 * q2 + q3 * q3;\n      double q0_squared = 1.0 - qVecNormSq;\n\n      // Ensure q0_squared is non-negative due to floating point inaccuracies\n      if (q0_squared < 0) {\n          q0_squared = 0;\n      }\n      q0 = FastMath.sqrt(q0_squared);\n\n      // Determine the sign of q0.\n      // The sign of q0 determines if the rotation angle is < PI or > PI (mod 2PI).\n      // This can be inferred from the relative orientation of uRef, vRef, and qVec.\n      // For general cases: The sign of (uRef x vRef) . qVec determines the sign of q0.\n      Vector3D uRef_cross_vRef = uRef.crossProduct(vRef);\n\n      // If uRef and vRef are collinear, their cross product is zero.\n      // This implies the rotation angle is either 0 or PI.\n      if (uRef_cross_vRef.getNormSq() < Precision.SAFE_MIN) {\n          // uRef and vRef are (numerically) collinear.\n          if (uRef.dotProduct(vRef) < 0) { // Angle is approximately PI\n              // If angle is PI, then q0 is 0.\n              q0 = 0.0;\n          } else { // Angle is approximately 0 (uRef and vRef point in same direction)\n              // If angle is 0, then q0 is 1.\n              q0 = 1.0;\n          }\n      } else {\n          // uRef and vRef are not collinear, use the dot product with qVec for sign.\n          // This check determines if the rotation direction (uRef to vRef) aligns with qVec.\n          if (uRef_cross_vRef.dotProduct(qVec) < 0) {\n              q0 = -q0;\n          }\n      }\n  } else {\n      // Original, valid calculation for q0, when uRef is not collinear with qVec.\n      q0 = vRef.dotProduct(k_for_q0_computation) / (2 * kNormSq_for_q0);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}