{
    "generation": "import org.apache.commons.math.util.FastMath;\nimport org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.MathRuntimeException;\n\n// Note: Assuming necessary imports and class structure (Vector3D, Rotation fields q0-q3) exist.\n\n/** Build the rotation that transforms a pair of vector into another pair.\n\n * <p>Except for possible scale factors, if the instance were applied to\n * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n * not the same as the angular separation between v<sub>1</sub> and\n * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n * v<sub>2</sub>) plane.</p>\n\n * @param u1 first vector of the origin pair\n * @param u2 second vector of the origin pair\n * @param v1 desired image of u1 by the rotation\n * @param v2 desired image of u2 by the rotation\n * @exception IllegalArgumentException if the norm of one of the vectors is zero or if the vectors are incompatible\n */\npublic Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // norms computation\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // normalize v1 in order to have (v1'|v1') = (u1|u1)\n    Vector3D v1prime = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n    double v1primev1prime = v1prime.getNormSq(); // Should be u1u1 after scaling\n\n    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n    Vector3D v2Original = v2; // Keep original v2 for adjustment calculation\n    double u1u2   = u1.dotProduct(u2);\n    double v1primev2   = v1prime.dotProduct(v2Original);\n    double v2Originalv2Original = v2Original.getNormSq();\n\n    double coeffU = u1u2 / u1u1;\n    double coeffV = v1primev2 / v1primev1prime; // Use v1prime's norm squared here\n\n    // Compute components relevant for adjustment factor beta = sqrt(uNorm / vNorm)\n    // uNorm = |u1 x u2|^2 / |u1|^2. Protect against negative due to precision.\n    double uNorm = FastMath.max(0.0, u2u2 - u1u2 * coeffU);\n    // vNorm = |v1' x v2_orig|^2 / |v1'|^2. Protect against negative due to precision.\n    double vNorm = FastMath.max(0.0, v2Originalv2Original - v1primev2 * coeffV);\n\n    // Threshold to consider a value zero, relative to norms squared\n    // Use a small tolerance, e.g., 1.0e-15 * normSq\n    final double zeroThresholdSq = 1.0e-30; // Threshold for squared norms comparison\n\n    boolean vIsCollinear = (vNorm <= zeroThresholdSq); // Compare squared projection length to near zero\n    boolean uIsCollinear = (uNorm <= zeroThresholdSq); // Compare squared projection length to near zero\n\n\n    double beta;\n    if (vIsCollinear) {\n        if (!uIsCollinear) {\n             // u1, u2 define a plane, but v1', v2_orig are collinear. Impossible map for rotation.\n            throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.ROTATION_MATRIX_DIMENSIONS, \"v1 and v2\"); // Or a more specific message\n        }\n        // Both pairs u1,u2 and v1',v2_orig are collinear.\n        // Adjust v2prime using alpha = coeffU, beta = 0.\n        // This makes v2prime = coeffU * v1prime, satisfying dot product and norm constraints.\n        beta = 0.0;\n    } else {\n       // General case: v1', v2_orig are not collinear.\n       // beta = sqrt(uNorm / vNorm). If u is collinear (uNorm=0), beta is 0.\n       beta = FastMath.sqrt(uNorm / vNorm); // uNorm is already >=0. vNorm is > zeroThresholdSq > 0.\n    }\n\n    double alpha  = coeffU - beta * coeffV;\n    // Compute adjusted v2prime = alpha * v1prime + beta * v2Original\n    Vector3D v2prime = new Vector3D(alpha, v1prime, beta, v2Original);\n\n    // preliminary computation for quaternion derivation\n    // The logic below computes the rotation that maps (u1, u2) to (v1prime, v2prime)\n    Vector3D uRef  = u1;\n    Vector3D vRef  = v1prime;\n    Vector3D v1Su1 = v1prime.subtract(u1);\n    Vector3D v2Su2 = v2prime.subtract(u2); // Use adjusted v2prime\n    Vector3D k     = v1Su1.crossProduct(v2Su2);\n    Vector3D u3    = u1.crossProduct(u2);\n    double c       = k.dotProduct(u3);\n\n    double kNorm = k.getNorm();\n    double u3Norm = u3.getNorm();\n    // Check if c is near zero using a tolerance relative to norms involved\n    final double zeroThreshold = 1.0e-15; // Threshold for dot product comparison\n    if (FastMath.abs(c) < zeroThreshold * kNorm * u3Norm) {\n        // Try alternative basis vectors to compute k and c\n        Vector3D v3 = Vector3D.crossProduct(v1prime, v2prime);\n        Vector3D v3Su3 = v3.subtract(u3); // u3 = u1 x u2\n        k = v1Su1.crossProduct(v3Su3);\n        Vector3D u2Prime = u1.crossProduct(u3); // u1 x (u1 x u2)\n        double u2PrimeNorm = u2Prime.getNorm();\n        kNorm = k.getNorm(); // Recompute kNorm\n        c = k.dotProduct(u2Prime);\n\n        if (FastMath.abs(c) < zeroThreshold * kNorm * u2PrimeNorm) {\n            // Try the third pair\n            k = v2Su2.crossProduct(v3Su3);\n            Vector3D u1Prime = u2.crossProduct(u3); // u2 x (u1 x u2)\n            double u1PrimeNorm = u1Prime.getNorm();\n            kNorm = k.getNorm(); // Recompute kNorm\n            c = k.dotProduct(u1Prime);\n\n            if (FastMath.abs(c) < zeroThreshold * kNorm * u1PrimeNorm) {\n                // All attempts failed. This implies v=u (identity) or possibly v=-u (180 deg rot).\n                // Check explicitly for identity.\n                 if (v1Su1.getNormSq() < zeroThresholdSq && v2Su2.getNormSq() < zeroThresholdSq) {\n                    // Vectors match, must be identity rotation\n                    q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0;\n                 } else {\n                     // Cannot determine rotation axis robustly (e.g., near 180 degree rotation).\n                     // Throwing an exception indicates singularity or ambiguity.\n                      throw MathRuntimeException.createIllegalArgumentException(\n                          LocalizedFormats.ROTATION_MATRIX_DIMENSIONS, \"defining vectors are singular\");\n                 }\n                return; // Return after setting identity or throwing exception\n            }\n            // Use u2/v2prime as reference pair if third attempt succeeded\n            uRef = u2;\n            vRef = v2prime;\n        }\n    }\n\n    // compute the vectorial part (q1, q2, q3)\n    // We expect c >= 0 based on the derivation idea c ~ (1-cos(theta))*stuff >= 0\n    // Protect against negative c due to numerical errors.\n    c = FastMath.sqrt(FastMath.max(0.0, c));\n    if (c < zeroThreshold) { // Check if c is effectively zero after sqrt\n        // This case indicates singularity or inconsistency if reached.\n         throw MathRuntimeException.createIllegalArgumentException(\n             LocalizedFormats.ROTATION_MATRIX_DIMENSIONS, \"computation resulted in singularity\");\n    }\n    double inv = 1.0 / (c + c); // 1 / (2 * sqrt(c))\n    q1 = inv * k.getX();\n    q2 = inv * k.getY();\n    q3 = inv * k.getZ();\n\n    // compute the scalar part q0 using quaternion norm relation q0^2 + |q_vec|^2 = 1\n    double q123Sq = q1 * q1 + q2 * q2 + q3 * q3;\n    // Protect sqrt argument from going negative due to numerical errors\n    q0 = FastMath.sqrt(FastMath.max(0.0, 1.0 - q123Sq));\n    // This ensures q0 >= 0 (convention) and avoids division by zero from the original potentially unstable method.\n\n    // Final normalization to ensure unit quaternion (corrects minor numerical errors)\n    double norm = FastMath.sqrt(q0*q0 + q123Sq);\n    // Check norm > threshold before dividing\n    if (norm > zeroThreshold) {\n         double invNorm = 1.0 / norm;\n         q0 *= invNorm;\n         q1 *= invNorm;\n         q2 *= invNorm;\n         q3 *= invNorm;\n     } else {\n         // Norm is zero - implies q0=q1=q2=q3=0 initially. Should not happen with valid inputs.\n         // Default to identity as a safe fallback.\n         q0 = 1.0; q1 = 0.0; q2 = 0.0; q3 = 0.0;\n     }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}