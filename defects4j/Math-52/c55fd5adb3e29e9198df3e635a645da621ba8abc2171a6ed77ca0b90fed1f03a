{
    "generation": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // Check for zero norms\n    double u1 Norm = u1.getNormSq();\n    double u2 Norm = u2.getNormSq();\n    double v1 Norm = v1.getNormSq();\n    double v2 Norm = v2.getNormSq();\n    if (u1 Norm == 0 || u2 Norm == 0 || v1 Norm == 0 || v2 Norm == 0) {\n        throw new IllegalArgumentException(\"Zero norm vector\");\n    }\n\n    // Normalize v1 to match u1's norm\n    v1 = new Vector3D(FastMath.sqrt(u1 Norm / v1 Norm), v1);\n\n    // Compute coefficients for v2 adjustment\n    double u1u2 = u1.dotProduct(u2);\n    double v1v2 = v1.dotProduct(v2);\n    double coeffU = u1u2 / u1 Norm;\n    double coeffV = v1v2 / u1 Norm;\n    double denominator = v2 Norm - v1v2 * coeffV;\n    if (denominator == 0) {\n        throw new IllegalArgumentException(\"Invalid vector configuration\");\n    }\n    double beta = FastMath.sqrt((u2 Norm - u1u2 * coeffU) / denominator);\n    double alpha = coeffU - beta * coeffV;\n    v2 = new Vector3D(alpha, v1, beta, v2);\n\n    // Prepare reference vectors and differences\n    Vector3D uRef = u1;\n    Vector3D vRef = v1;\n    Vector3D v1Su1 = v1.subtract(u1);\n    Vector3D v2Su2 = v2.subtract(u2);\n\n    // Compute cross products\n    Vector3D k = v1Su1.crossProduct(v2Su2);\n    Vector3D u3 = u1.crossProduct(u2);\n    double c = k.dotProduct(u3);\n\n    // Handle cases where c is near zero\n    if (c == 0) {\n        Vector3D v3 = Vector3D.crossProduct(v1, v2);\n        Vector3D v3Su3 = v3.subtract(u3);\n        k = v1Su1.crossProduct(v3Su3);\n        Vector3D u2Prime = u1.crossProduct(u3);\n        c = k.dotProduct(u2Prime);\n\n        if (c == 0) {\n            k = v2Su2.crossProduct(v3Su3);\n            c = k.dotProduct(u2.crossProduct(u3));\n\n            if (c == 0) {\n                // Identity rotation\n                q0 = 1.0;\n                q1 = 0.0;\n                q2 = 0.0;\n                q3 = 0.0;\n                return;\n            }\n\n            uRef = u2;\n            vRef = v2;\n        }\n    }\n\n    // Compute the vectorial part\n    c = FastMath.sqrt(c);\n    double inv = 1.0 / (c + c);\n    q1 = inv * k.getX();\n    q2 = inv * k.getY();\n    q3 = inv * k.getZ();\n\n    // Compute the scalar part\n    k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                     uRef.getZ() * q1 - uRef.getX() * q3,\n                     uRef.getX() * q2 - uRef.getY() * q1);\n    double kNormSq = k.getNormSq();\n    if (kNormSq == 0) {\n        q0 = 1.0;\n    } else {\n        q0 = vRef.dotProduct(k) / (2 * kNormSq);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}