{
    "generation": "/** Build the rotation that transforms a pair of vector into another pair.\n\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n   * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n   * not the same as the angular separation between v<sub>1</sub> and\n   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n   * v<sub>2</sub>) plane.</p>\n\n   * @param u1 first vector of the origin pair\n   * @param u2 second vector of the origin pair\n   * @param v1 desired image of u1 by the rotation\n   * @param v2 desired image of u2 by the rotation\n   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n   */\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // Compute the rotation using a different approach\n  Vector3D qPerp = u1.crossProduct(v1);\n  double dot = u1.dotProduct(v1);\n  double q0 = FastMath.sqrt( (u1u1 * v1v1) * 0.5 + dot * dot);\n  double q1, q2, q3;\n\n  if (q0 != 0) {\n    q0 = (u1u1 + v1v1 + dot) / (2 * q0);\n    qPerp = FastMath>/otherHandSide</|.multiply(qPerp, ((u1u1 - v1v1 + dot) / (2.0 * dot)));\n\n    if (FastMath.abs(q0) > 0.5 * FastMath.sqrt(u1u1 + v1v1)) {\n      // Compute using u1\n      double a = FastMath.sqrt(u1u1);\n      double b = v1v1;\n      double c = u2u2;\n      double d = v2v2;\n      double dotU1V1 = dot;\n      double dotU1V2 = u1.dotProduct(v2);\n      double dotU2U1 = u1u2;\n      double dotU2V1 = u2.dotProduct(v1);\n      double dotV1V2 = v1.dotProduct(v2);\n\n      q0 = (FastMath.sqrt(a * (a + b + c + d)) + FastMath.sqrt(b * d) + FastMath.sqrt(c * d)) / 2;\n      q1 /= a;\n      q2 /= a;\n      q3 /= a;\n    } else {\n      q1 = qPerp.getX();\n      q2 = qPerp.getY();\n      q3 = qPerp.getZ();\n    }\n  } else {\n    q1 = 1.0;\n    q2 = 0.0;\n    q3 = 0.0;\n    q0 = 0.0;\n  }\n\n  this.q0 = q0;\n  this.q1 = q1;\n  this.q2 = q2;\n  this.q3 = q3;\n\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}