{
    "generation": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // norms computation\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n        throw MathRuntimeException.createIllegalArgumentException(\n            LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // normalize v1 in order to have (v1'|v1') = (u1|u1)\n    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n    // adjust v2 in order to have (u1|u2) == (v1'|v2') and (v2'|v2') == (u2|u2)\n    double u1u2 = u1.dotProduct(u2);\n    double v1v2 = v1.dotProduct(v2);\n    double coeffU = u1u2 / u1u1;\n    double coeffV = v1v2 / u1u1;\n\n    double deltaU = u2u2 - u1u2 * coeffU;\n    double deltaV = v2v2 - v1v2 * coeffV;\n\n    if (FastMath.abs(deltaV) < 1e-12) {\n        // Protect against pathological nearly-aligned input second images.\n        // force v2 to be orthogonal projection and equal norm (causes no rotation ambiguity)\n        Vector3D projV2OnV1 = new Vector3D(coeffV, v1);\n        Vector3D v2Ortho = v2.subtract(projV2OnV1);\n        double normOrthoV2 = v2Ortho.getNorm();\n        if (normOrthoV2 > 1e-12) {\n            v2Ortho = new Vector3D(FastMath.sqrt(deltaU) / normOrthoV2, v2Ortho);\n            v2 = projV2OnV1.add(v2Ortho);\n        } else {\n            // if v2 is (almost) colinear to v1, set v2 perpendicular to v1 in arbitrary direction\n            Vector3D orthogonal;\n            if (FastMath.abs(v1.getX()) <= FastMath.abs(v1.getY()) && FastMath.abs(v1.getX()) <= FastMath.abs(v1.getZ())) {\n                orthogonal = new Vector3D(0, -v1.getZ(), v1.getY());\n            } else if (FastMath.abs(v1.getY()) <= FastMath.abs(v1.getX()) && FastMath.abs(v1.getY()) <= FastMath.abs(v1.getZ())) {\n                orthogonal = new Vector3D(-v1.getZ(), 0, v1.getX());\n            } else {\n                orthogonal = new Vector3D(-v1.getY(), v1.getX(), 0);\n            }\n            orthogonal = new Vector3D(FastMath.sqrt(deltaU) / orthogonal.getNorm(), orthogonal);\n            v2 = projV2OnV1.add(orthogonal);\n        }\n    } else {\n        double beta = FastMath.sqrt(deltaU / deltaV);\n        double alpha = coeffU - beta * coeffV;\n        v2 = new Vector3D(alpha, v1, beta, v2);\n    }\n\n    // preliminary computation\n    Vector3D uRef = u1;\n    Vector3D vRef = v1;\n    Vector3D v1Su1 = v1.subtract(u1);\n    Vector3D v2Su2 = v2.subtract(u2);\n    Vector3D k = v1Su1.crossProduct(v2Su2);\n    Vector3D u3 = u1.crossProduct(u2);\n    double c = k.dotProduct(u3);\n    if (c == 0) {\n        // the (q1, q2, q3) vector is close to the (u1, u2) plane\n        // we try other vectors\n        Vector3D v3 = Vector3D.crossProduct(v1, v2);\n        Vector3D v3Su3 = v3.subtract(u3);\n        k = v1Su1.crossProduct(v3Su3);\n        Vector3D u2Prime = u1.crossProduct(u3);\n        c = k.dotProduct(u2Prime);\n\n        if (c == 0) {\n            // (q1, q2, q3) is close to (u1, u3) plane, try (u2,u3) planes\n            k = v2Su2.crossProduct(v3Su3);\n            c = k.dotProduct(u2.crossProduct(u3));\n\n            if (c == 0) {\n                // fallback to identity rotation\n                q0 = 1.0;\n                q1 = 0.0;\n                q2 = 0.0;\n                q3 = 0.0;\n                return;\n            }\n\n            uRef = u2;\n            vRef = v2;\n        }\n    }\n\n    // compute the vectorial part\n    c = FastMath.sqrt(c);\n    double inv = 1.0 / (2.0 * c);\n    q1 = inv * k.getX();\n    q2 = inv * k.getY();\n    q3 = inv * k.getZ();\n\n    // compute the scalar part\n    k = new Vector3D(\n        uRef.getY() * q3 - uRef.getZ() * q2,\n        uRef.getZ() * q1 - uRef.getX() * q3,\n        uRef.getX() * q2 - uRef.getY() * q1);\n    q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}