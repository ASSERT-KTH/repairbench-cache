{
    "generation": "import org.apache.commons.math.exception.util.LocalizedFormats;\nimport org.apache.commons.math.exception.MathRuntimeException;\nimport org.apache.commons.math.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math.util.FastMath;\n\n// Class definition assumed to be within the context of org.apache.commons.math.geometry.euclidean.threed.Rotation\n// Only the constructor is provided as requested.\n// Field assignments like this.q0 = q0_final are assumed to work correctly.\n\n  /** Build the rotation that transforms a pair of vector into another pair.\n\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n   * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n   * not the same as the angular separation between v<sub>1</sub> and\n   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n   * v<sub>2</sub>) plane.</p>\n\n   * @param u1 first vector of the origin pair\n   * @param u2 second vector of the origin pair\n   * @param v1 desired image of u1 by the rotation\n   * @param v2 desired image of u2 by the rotation\n   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n   */\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n      // norms computation\n      double u1u1 = u1.getNormSq();\n      double u2u2 = u2.getNormSq();\n      double v1v1 = v1.getNormSq();\n      double v2v2 = v2.getNormSq();\n      if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n          throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n      }\n\n      // normalize v1 in order to have (v1'|v1') = (u1|u1)\n      // Use v1Prime for the adjusted v1\n      Vector3D v1Prime = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n      double v1Primev1Prime = u1u1; // v1Prime.getNormSq() is now u1u1\n\n      // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n      // v2' = alpha * v1' + beta * v2\n      // Use v2Prime for the adjusted v2\n      double u1u2   = u1.dotProduct(u2);\n      double v1Primev2 = v1Prime.dotProduct(v2); // Use v1Prime, original v2\n      double coeffU = u1u2 / u1u1; // Denominator is u1u1 > 0\n      double coeffV = v1Primev2 / v1Primev1Prime; // Denominator is v1Primev1Prime = u1u1 > 0\n\n      // Term related to v2 projection orthogonal to v1'\n      // v2v2 - (v1' . v2)^2 / (v1' . v1') = v2v2 - v1Primev2 * coeffV\n      double v2v2Ortho = v2v2 - v1Primev2 * coeffV;\n      // Term related to u2 projection orthogonal to u1\n      // u2u2 - (u1 . u2)^2 / (u1 . u1) = u2u2 - u1u2 * coeffU\n      double u2u2Ortho = u2u2 - u1u2 * coeffU;\n\n      // Clamp to non-negative based on Cauchy-Schwarz (should be >= 0)\n      // Protects against numerical noise if vectors are nearly collinear\n      v2v2Ortho = FastMath.max(0.0, v2v2Ortho);\n      u2u2Ortho = FastMath.max(0.0, u2u2Ortho);\n\n      double beta;\n      if (v2v2Ortho == 0) {\n          // v1' and v2 are collinear.\n          if (u2u2Ortho == 0) {\n              // u1 and u2 are also collinear. The rotation is not fully determined.\n              // Let's arbitrarily set beta = 0. The degeneracy should be handled\n              // later by the c == 0 checks, likely resulting in identity.\n              beta = 0;\n          } else {\n              // u1, u2 are not collinear, but v1', v2 are.\n              // This implies the required rotation cannot preserve the relationship\n              // between vectors if v2' must be in the (v1', v2) \"plane\".\n              // Setting beta = 0 avoids NaN but the resulting rotation might not be\n              // geometrically meaningful for the v2 constraint.\n              // Logically, an exception might be suitable here, but sticking to calculation.\n              beta = 0;\n          }\n      } else {\n          // Compute beta = sqrt( ||u2_ortho||^2 / ||v2_ortho||^2 )\n          // ||u2_ortho||^2 = u2u2Ortho\n          // ||v2_ortho||^2 = v2v2Ortho\n          beta = FastMath.sqrt(u2u2Ortho / v2v2Ortho);\n      }\n\n      double alpha  = coeffU - beta * coeffV;\n      Vector3D v2Prime = new Vector3D(alpha, v1Prime, beta, v2); // This is the adjusted v2'\n\n      // preliminary computation using adjusted vectors v1' and v2'\n      Vector3D uRef  = u1;\n      Vector3D vRef  = v1Prime; // Use adjusted v1'\n      Vector3D v1Su1 = v1Prime.subtract(u1);\n      Vector3D v2Su2 = v2Prime.subtract(u2); // Use adjusted v2'\n      Vector3D k     = v1Su1.crossProduct(v2Su2);\n      Vector3D u3    = u1.crossProduct(u2);\n      double c       = k.dotProduct(u3);\n\n      // Variables for quaternion components (needed because they are final fields)\n      double q0_final, q1_final, q2_final, q3_final;\n\n      if (c == 0) {\n          // Degenerate case 1: k is orthogonal to u3 (normal of u1,u2 plane)\n          // Try using (u1, u3) and (v1', v3') where v3' = v1' x v2'\n          Vector3D v3Prime = Vector3D.crossProduct(v1Prime, v2Prime);\n          Vector3D u3Ext = u3; // Renaming u3 for clarity in this block\n          Vector3D v3Su3 = v3Prime.subtract(u3Ext);\n          k = v1Su1.crossProduct(v3Su3); // k = (v1' - u1) x (v3' - u3)\n          // Reference vector for dot product check: u1 x u3\n          Vector3D u1xu3 = u1.crossProduct(u3Ext);\n          c = k.dotProduct(u1xu3);\n\n          if (c == 0) {\n              // Degenerate case 2: k is also orthogonal to u1 x u3\n              // Try using (u2, u3) and (v2', v3')\n              k = v2Su2.crossProduct(v3Su3); // k = (v2' - u2) x (v3' - u3)\n              // Reference vector for dot product check: u2 x u3\n              Vector3D u2xu3 = u2.crossProduct(u3Ext);\n              c = k.dotProduct(u2xu3);\n\n              if (c == 0) {\n                  // Degenerate case 3: All tested configurations result in c=0.\n                  // This implies the rotation is identity.\n                  q0_final = 1.0;\n                  q1_final = 0.0;\n                  q2_final = 0.0;\n                  q3_final = 0.0;\n                  this.q0 = q0_final; this.q1 = q1_final; this.q2 = q2_final; this.q3 = q3_final;\n                  return; // Exit constructor\n              }\n\n              // Use u2, v2' for q0 computation later\n              uRef = u2;\n              vRef = v2Prime; // Use adjusted v2'\n          }\n      }\n\n      // compute the vectorial part (q1, q2, q3)\n      // Clamp c to ensure non-negativity before sqrt\n      c = FastMath.max(0.0, c);\n      c = FastMath.sqrt(c); // This is 's' = sqrt(c)\n      if (c == 0) {\n         // If c is zero after clamping (e.g. was negative or exactly zero),\n         // it signals a degenerate case not caught by the checks above. Assume identity.\n         q0_final = 1.0; q1_final = 0.0; q2_final = 0.0; q3_final = 0.0;\n         this.q0 = q0_final; this.q1 = q1_final; this.q2 = q2_final; this.q3 = q3_final;\n         return; // Exit constructor\n      }\n\n      double inv = 1.0 / (c + c); // If c is near zero, inv is large.\n      q1_final = inv * k.getX();\n      q2_final = inv * k.getY();\n      q3_final = inv * k.getZ();\n\n      // compute the scalar part (q0) using the robust method\n      double q_vec_sq = q1_final * q1_final + q2_final * q2_final + q3_final * q3_final;\n\n      if (q_vec_sq > 1.0) {\n          // Numerical errors might make q_vec_sq slightly > 1.\n          // This corresponds to ~180 degree rotation, q0 should be near 0.\n          // Normalize the vector part and set q0 = 0.\n          double norm = FastMath.sqrt(q_vec_sq);\n          q1_final /= norm;\n          q2_final /= norm;\n          q3_final /= norm;\n          q0_final = 0.0; // q0 = cos(pi/2) = 0\n      } else {\n          // Calculate |q0| = sqrt(1 - |q_vec|^2)\n          double q0_abs = FastMath.sqrt(1.0 - q_vec_sq); // Argument is >= 0\n\n          // Determine the sign of q0 using the reference vectors (uRef, vRef)\n          // Sign(q0) = Sign( vRef . (uRef x q_vec) )\n          Vector3D q_vec = new Vector3D(q1_final, q2_final, q3_final);\n          // Compute N = vRef . (uRef x q_vec)\n          double N = vRef.dotProduct(uRef.cross(q_vec));\n\n          // Set q0 with the correct sign. If N=0, use positive sign by convention.\n          q0_final = (N < 0.0) ? -q0_abs : q0_abs;\n      }\n\n      // Assign final quaternion components to the fields\n      this.q0 = q0_final;\n      this.q1 = q1_final;\n      this.q2 = q2_final;\n      this.q3 = q3_final;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}