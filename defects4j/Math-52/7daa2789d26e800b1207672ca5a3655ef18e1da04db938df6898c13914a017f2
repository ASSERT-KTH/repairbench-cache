{
    "generation": "  /** Build the rotation that transforms a pair of vector into another pair.\n\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n   * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n   * not the same as the angular separation between v<sub>1</sub> and\n   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n   * v<sub>2</sub>) plane.</p>\n\n   * @param u1 first vector of the origin pair\n   * @param u2 second vector of the origin pair\n   * @param v1 desired image of u1 by the rotation\n   * @param v2 desired image of u2 by the rotation\n   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n   */\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D k     = v1.subtract(u1).crossProduct(v2.subtract(u2));\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3); // This `c` is a temporary scalar used for comparison.\n\n  if (c == 0) {\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1.subtract(u1).crossProduct(v3Su3); // k is recomputed\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime); // c is recomputed\n\n    if (c == 0) {\n      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2.subtract(u2).crossProduct(v3Su3); // k is recomputed again\n      c = k.dotProduct(u2.crossProduct(u3)); // c is recomputed again\n\n      if (c == 0) {\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = u2;\n      vRef = v2;\n\n    }\n\n  }\n\n  // --- BEGIN FIX ---\n  // The original calculation for q0, q1, q2, q3 was numerically unstable,\n  // especially when vector magnitudes were very large or very small,\n  // leading to division by zero or large intermediate values causing NaN.\n  // The approach is updated to a more robust method, similar to Commons Math 3.x,\n  // which involves directly using `k` as the unnormalized vector part and\n  // then computing the scalar part and finally normalizing the entire quaternion.\n\n  // The 'k' computed above (from cross products) is directly used as the unnormalized vector part.\n  q1 = k.getX();\n  q2 = k.getY();\n  q3 = k.getZ();\n\n  // Compute the scalar part (q0).\n  // 's' is sqrt((|uRef|^2 + |vRef|^2)/2). Since `v1` and `v2` were adjusted to have the same norms\n  // as `u1` and `u2` respectively, `uRef` and `vRef` will have the same norm.\n  // Thus, s effectively becomes the norm of uRef (or vRef).\n  double s = FastMath.sqrt((uRef.getNormSq() + vRef.getNormSq()) * 0.5);\n\n  // The scalar part q0 is derived using the relation between the squared norm of the\n  // quaternion components and the scalar s (which is the norm of uRef/vRef).\n  q0 = (s * s - (q1 * q1 + q2 * q2 + q3 * q3)) / (2 * s);\n\n  // Finally, normalize the quaternion. This step is crucial for correctness\n  // and was missing in the original implementation.\n  double inv = 1.0 / FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);\n  q0 *= inv;\n  q1 *= inv;\n  q2 *= inv;\n  q3 *= inv;\n  // --- END FIX ---\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}