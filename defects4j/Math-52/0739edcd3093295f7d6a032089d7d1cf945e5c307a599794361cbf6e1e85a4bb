{
    "generation": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // Compute norms of the input vectors\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // Normalize v1 so that its norm matches that of u1\n    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n    // Adjust v2 so that the projection of u2 on u1 matches the projection v2 on v1\n    double u1u2   = u1.dotProduct(u2);\n    double v1v2   = v1.dotProduct(v2);\n    double coeffU = u1u2 / u1u1;\n    double coeffV = v1v2 / u1u1; // note: u1u1 equals v1.getNormSq() after scaling\n    double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n    double alpha  = coeffU - beta * coeffV;\n    v2 = new Vector3D(alpha, v1, beta, v2);\n\n    // Compute auxiliary vectors needed for the rotation\n    Vector3D uRef  = u1;\n    Vector3D vRef  = v1;\n    Vector3D v1Su1 = v1.subtract(u1);\n    Vector3D v2Su2 = v2.subtract(u2);\n    Vector3D k     = v1Su1.crossProduct(v2Su2);\n    Vector3D u3    = u1.crossProduct(u2);\n    double c       = k.dotProduct(u3);\n\n    // If c is negative, flip k so that we use its absolute orientation.\n    if (c < 0) {\n        k = k.negate();\n        c = -c;\n    }\n    // If c is exactly zero, our computed axis is degenerate. Try an alternative.\n    if (c == 0) {\n        Vector3D v3 = Vector3D.crossProduct(v1, v2);\n        Vector3D v3Su3 = v3.subtract(u3);\n        k = v1Su1.crossProduct(v3Su3);\n        Vector3D u2Prime = u1.crossProduct(u3);\n        c = k.dotProduct(u2Prime);\n        if (c < 0) {\n            k = k.negate();\n            c = -c;\n        }\n        if (c == 0) {\n            // Try a second alternative using u2 and v2\n            k = v2Su2.crossProduct(v3Su3);\n            c = k.dotProduct(u2.crossProduct(u3));\n            if (c < 0) {\n                k = k.negate();\n                c = -c;\n            }\n            if (c == 0) {\n                // All attempts failed: the rotation is effectively the identity.\n                q0 = 1.0;\n                q1 = 0.0;\n                q2 = 0.0;\n                q3 = 0.0;\n                return;\n            }\n            // Use u2 and v2 for computing the scalar part.\n            uRef = u2;\n            vRef = v2;\n        }\n    }\n\n    // Compute the vector (imaginary) part of the quaternion.\n    c = FastMath.sqrt(c);\n    double inv = 1.0 / (2 * c);\n    q1 = inv * k.getX();\n    q2 = inv * k.getY();\n    q3 = inv * k.getZ();\n\n    // Compute the scalar (real) part of the quaternion.\n    // Here k is recomputed as the cross product between uRef and the quaternion vector part.\n    k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                     uRef.getZ() * q1 - uRef.getX() * q3,\n                     uRef.getX() * q2 - uRef.getY() * q1);\n    q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}