{
    "generation": "  /** Build the rotation that transforms a pair of vector into another pair.\n\n   * <p>Except for possible scale factors, if the instance were applied to\n   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n   * (v<sub>1</sub>, v<sub>2</sub>).</p>\n\n   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n   * not the same as the angular separation between v<sub>1</sub> and\n   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n   * v<sub>2</sub>) plane.</p>\n\n   * @param u1 first vector of the origin pair\n   * @param u2 second vector of the origin pair\n   * @param v1 desired image of u1 by the rotation\n   * @param v2 desired image of u2 by the rotation\n   * @exception IllegalArgumentException if the norm of one of the vectors is zero\n   */\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  \n  // c1 is squared norm of u2 orthogonal to u1\n  // c2 is squared norm of v2 orthogonal to v1 (after v1 has been scaled to u1's norm)\n  double c1 = u2u2 - u1u2 * u1u2 / u1u1;\n  double c2 = v2v2 - v1v2 * v1v2 / u1u1;\n\n  double alpha, beta;\n  if ((c1 < Precision.EPSILON) || (c2 < Precision.EPSILON)) {\n    // the vectors are almost aligned, we have to use only the norms\n    // (see comments in the method Rotation(Vector3D, Vector3D) in Commons Math)\n    alpha = u1u2 / u1u1;\n    beta  = FastMath.sqrt(u2u2 / v2v2);\n  } else {\n    alpha = (u1u2 * c2 - v1v2 * c1) / (u1u1 * c2);\n    beta  = FastMath.sqrt(c1 / c2);\n  }\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n  if (FastMath.abs(c) < Precision.EPSILON) { // Changed == 0 to fuzzy comparison\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n\n    if (FastMath.abs(c) < Precision.EPSILON) { // Changed == 0 to fuzzy comparison\n      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2Su2.crossProduct(v3Su3);\n      c = k.dotProduct(u2.crossProduct(u3));\n\n      if (FastMath.abs(c) < Precision.EPSILON) { // Changed == 0 to fuzzy comparison\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = u2;\n      vRef = v2;\n\n    }\n\n  }\n\n  // compute the vectorial part\n  c = FastMath.sqrt(c);\n  // If c is very small, 2*c will be very small, leading to large 'inv' or NaN if c was negative.\n  // The 'if (FastMath.abs(c) < Precision.EPSILON)' checks above should catch cases where k is essentially zero.\n  // If c is non-zero (i.e. > Precision.EPSILON), then 2*c will also be non-zero and positive.\n  double inv = 1.0 / (c + c);\n  q1 = inv * k.getX();\n  q2 = inv * k.getY();\n  q3 = inv * k.getZ();\n\n  // compute the scalar part\n   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                    uRef.getZ() * q1 - uRef.getX() * q3,\n                    uRef.getX() * q2 - uRef.getY() * q1);\n  // k.getNormSq() could be zero if q1, q2, q3 are all very small (near zero).\n  // This case implies k is zero, which means uRef and vRef are nearly aligned and/or the cross product k is nearly zero.\n  // If k is (0,0,0), then q0 would be NaN.\n  // If q1, q2, q3 are already computed from a non-zero k (due to the checks above),\n  // then the *new* k derived from q1, q2, q3 should also be non-zero.\n  // This `k` is actually `q_vectorial.cross(uRef)` or similar from quaternion math.\n  // The original Commons Math handles this implicitly.\n  // Given that q1, q2, q3 are derived from `k` which is supposed to be non-zero (due to fuzzy checks for `c`),\n  // this derived `k` should also be non-zero, preventing division by zero.\n  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}