{
    "generation": "  JSType meet(JSType that) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n      if (alternate.isSubtype(that)) {\n        builder.addAlternate(alternate);\n      }\n    }\n\n    if (that instanceof UnionType) {\n      for (JSType otherAlternate : ((UnionType) that).alternates) {\n        if (otherAlternate.isSubtype(this)) {\n          builder.addAlternate(otherAlternate);\n        }\n      }\n    } else if (that.isSubtype(this)) {\n      builder.addAlternate(that);\n    }\n    JSType result = builder.build();\n\n    // If the builder couldn't find any common subtypes, the result should\n    // be the bottom type. The specific bottom type depends on whether both\n    // operands were object types (or subtypes of Object).\n    if (result != null) {\n      // NOTE: build() might return NO_TYPE if alternates contains mixed\n      // primitives and objects that collapse to nothing, or if it only\n      // contained NO_TYPE. We return whatever build() decided.\n      // If build() returns NO_OBJECT_TYPE (e.g. from union of NO_OBJECT_TYPE),\n      // return that.\n      return result;\n    } else {\n      // Builder returned null, indicating no common subtypes found among alternates.\n      // Determine the correct bottom type: NO_OBJECT_TYPE or NO_TYPE.\n      // NO_OBJECT_TYPE is the bottom type if both 'this' and 'that' are subtypes\n      // of the main Object type. Otherwise, the bottom type is NO_TYPE.\n      // Using isSubtype(OBJECT_TYPE) is more accurate than isObject() here,\n      // as isObject() can be true for unions containing non-objects (like string|Object).\n      JSType objectType = getNativeType(JSTypeNative.OBJECT_TYPE);\n      if (this.isSubtype(objectType) && that.isSubtype(objectType)) {\n          return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n      } else {\n          return getNativeType(JSTypeNative.NO_TYPE);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}