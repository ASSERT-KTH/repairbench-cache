{
    "generation": "  JSType meet(JSType that) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n      JSType meet = alternate.meet(that);\n      if (meet != null && !meet.isNoType()) {\n        builder.addAlternate(meet);\n      }\n    }\n\n    if (that instanceof UnionType) {\n      for (JSType otherAlternate : ((UnionType) that).alternates) {\n        JSType meet = otherAlternate.meet(this);\n        if (meet != null && !meet.isNoType()) {\n          builder.addAlternate(meet);\n        }\n      }\n    } else {\n      JSType meet = that.meet(this);\n      if (meet != null && !meet.isNoType()) {\n        builder.addAlternate(meet);\n      }\n    }\n    JSType result = builder.build();\n    if (result != null) {\n      return result;\n    } else if (this.isObject() && that.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}