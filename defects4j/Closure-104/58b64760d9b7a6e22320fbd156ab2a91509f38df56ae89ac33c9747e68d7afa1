{
    "generation": "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n  if (result != null) {\n    return result;\n  }\n\n  // Instead of relying on this.isObject() for unions (which can be overly strict),\n  // we check that each alternate in a union is an object.\n  boolean thisIsObject;\n  if (this instanceof UnionType) {\n    thisIsObject = true;\n    for (JSType alt : ((UnionType) this).alternates) {\n      if (!alt.isObject()) {\n        thisIsObject = false;\n        break;\n      }\n    }\n  } else {\n    thisIsObject = this.isObject();\n  }\n\n  boolean thatIsObject;\n  if (that instanceof UnionType) {\n    thatIsObject = true;\n    for (JSType alt : ((UnionType) that).alternates) {\n      if (!alt.isObject()) {\n        thatIsObject = false;\n        break;\n      }\n    }\n  } else {\n    thatIsObject = that.isObject();\n  }\n\n  if (thisIsObject && thatIsObject) {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  } else {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}