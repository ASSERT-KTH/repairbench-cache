{
    "generation": "@Override\nJSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  // Collect all alternates of this union that are subtypes of 'that'\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  // If 'that' is also a union, collect alternates of it that are subtypes of this\n  if (that instanceof UnionType) {\n    for (JSType otherAlt : ((UnionType) that).alternates) {\n      if (otherAlt.isSubtype(this)) {\n        builder.addAlternate(otherAlt);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  // If we found any common alternates, build and return the intersection\n  JSType result = builder.build();\n  if (result != null) {\n    return result;\n  }\n  // Otherwise, if both are (subtypes of) the Object type, return NO_OBJECT_TYPE\n  JSType objType = getNativeType(JSTypeNative.OBJECT_TYPE);\n  if (this.isSubtype(objType) && that.isSubtype(objType)) {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  }\n  // No common subtype at all\n  return getNativeType(JSTypeNative.NO_TYPE);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}