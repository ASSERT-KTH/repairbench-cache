{
    "generation": "@Override\nJSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  // Collect any alternates of this union that are subtypes of 'that'\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  // If 'that' is also a union, collect its alternates that are subtypes of this\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    // If 'that' is a single type and is a subtype of this union\n    builder.addAlternate(that);\n  }\n\n  // If we found any common subtypes, build and return the result.\n  JSType result = builder.build();\n  if (result != null) {\n    return result;\n  }\n\n  // Otherwise, if both this union and 'that' are (subtypes of) Object, return NO_OBJECT_TYPE.\n  JSType objectType = getNativeType(JSTypeNative.OBJECT_TYPE);\n  if (this.isSubtype(objectType) && that.isSubtype(objectType)) {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  }\n\n  // No common subtype at all.\n  return getNativeType(JSTypeNative.NO_TYPE);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}