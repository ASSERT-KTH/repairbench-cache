{
    "generation": "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n  // If no alternates were added (or only the \"none\" type was produced),\n  // then if both types are object types use the object bottom, otherwise use the normal bottom.\n  if (result == null || result == getNativeType(JSTypeNative.NO_TYPE)) {\n    if (this.isObject() && that.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n  return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}