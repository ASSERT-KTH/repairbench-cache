{
    "generation": "  JSType meet(JSType that) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n      if (alternate.isSubtype(that)) {\n        builder.addAlternate(alternate);\n      }\n    }\n\n    if (that instanceof UnionType) {\n      for (JSType otherAlternate : ((UnionType) that).alternates) {\n        if (otherAlternate.isSubtype(this)) {\n          builder.addAlternate(otherAlternate);\n        }\n      }\n    } else if (that.isSubtype(this)) {\n      builder.addAlternate(that);\n    }\n\n    // Build the result from the collected subtypes\n    JSType result = builder.build();\n\n    // If the builder was empty (meaning builder.build() returned NO_TYPE),\n    // then we need to determine the correct bottom type based on the original types.\n    if (result.isNoType()) {\n      // If both original types were object types, the greatest common subtype\n      // (meet) should be NO_OBJECT_TYPE.\n      if (this.isObject() && that.isObject()) {\n        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n      } else {\n        // Otherwise, the greatest common subtype is NO_TYPE.\n        // We already have NO_TYPE in 'result', but returning it explicitly\n        // from the registry is cleaner.\n        return getNativeType(JSTypeNative.NO_TYPE);\n      }\n    } else {\n      // If the builder was not empty, return the calculated union type\n      // which represents the meet.\n      return result;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}