{
    "generation": "  JSType meet(JSType that) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n\n    if (that instanceof UnionType) {\n      // Apply distributive property: meet(this_alternate, that_alternate)\n      // (A|B).meet(C|D) = (A.meet(C)|A.meet(D)) | (B.meet(C)|B.meet(D))\n      UnionType thatUnion = (UnionType) that;\n      for (JSType thisAlternate : alternates) {\n        for (JSType thatAlternate : thatUnion.alternates) {\n          JSType commonSubtype = thisAlternate.meet(thatAlternate);\n          // Only add meaningful common subtypes to the builder.\n          // NoType and NoObjectType are usually handled by the builder itself or the final result logic.\n          if (commonSubtype != null && !commonSubtype.isNoType() && !commonSubtype.isNoObjectType()) {\n            builder.addAlternate(commonSubtype);\n          }\n        }\n      }\n    } else {\n      // Apply distributive property: meet(this_alternate, that)\n      // (A|B).meet(C) = (A.meet(C)) | (B.meet(C))\n      for (JSType thisAlternate : alternates) {\n        JSType commonSubtype = thisAlternate.meet(that); // Recursive call\n        if (commonSubtype != null && !commonSubtype.isNoType() && !commonSubtype.isNoObjectType()) {\n          builder.addAlternate(commonSubtype);\n        }\n      }\n    }\n\n    JSType result = builder.build();\n\n    // If the builder produced a non-null result (i.e., found concrete common subtypes), return it.\n    if (result != null) {\n      return result;\n    } else {\n      // If no concrete common subtypes were found, determine if it's NO_OBJECT_TYPE or NO_TYPE.\n      // This happens if all individual meet operations resulted in NO_TYPE or NO_OBJECT_TYPE.\n\n      // Check if all alternates of 'this' are object types.\n      boolean allThisAlternatesAreObjects = true;\n      for (JSType alternate : alternates) {\n        if (!alternate.isObject()) {\n          allThisAlternatesAreObjects = false;\n          break;\n        }\n      }\n\n      // If both this (all its alternates) and that are object types, and no concrete common subtype was found,\n      // return NO_OBJECT_TYPE. Otherwise, return NO_TYPE.\n      if (allThisAlternatesAreObjects && that.isObject()) {\n        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n      } else {\n        return getNativeType(JSTypeNative.NO_TYPE);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}