{
    "generation": "  JSType meet(JSType that) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n      if (alternate.isSubtype(that)) {\n        builder.addAlternate(alternate);\n      }\n    }\n\n    if (that instanceof UnionType) {\n      for (JSType otherAlternate : ((UnionType) that).alternates) {\n        if (otherAlternate.isSubtype(this)) {\n          builder.addAlternate(otherAlternate);\n        }\n      }\n    } else if (that.isSubtype(this)) {\n      builder.addAlternate(that);\n    }\n    JSType result = builder.build();\n    if (result != null) {\n      return result;\n    } else {\n      boolean thisAllObjects = true;\n      for (JSType alt : alternates) {\n        if (!alt.isObject()) {\n          thisAllObjects = false;\n          break;\n        }\n      }\n      \n      boolean thatAllObjects;\n      if (that instanceof UnionType) {\n        thatAllObjects = true;\n        UnionType thatUnion = (UnionType) that;\n        for (JSType alt : thatUnion.alternates) {\n          if (!alt.isObject()) {\n            thatAllObjects = false;\n            break;\n          }\n        }\n      } else {\n        thatAllObjects = that.isObject();\n      }\n      \n      if (thisAllObjects && thatAllObjects) {\n        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n      } else {\n        return getNativeType(JSTypeNative.NO_TYPE);\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}