{
    "generation": "import java.util.Locale;\n\npublic class LocaleUtils {\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"fr__POSIX\")  = new Locale(\"fr\", \"\", \"POSIX\")   (LANG-328)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n\n        // Adjust initial length check to accommodate \"xx__VVV\" format.\n        // Valid lengths are 2 (\"ll\"), 5 (\"ll_CC\"), or >= 6 (\"ll__VVV\" or \"ll_CC_VVV\").\n        // Invalid lengths are 0, 1, 3, 4.\n        if (len < 2 || len == 3 || len == 4) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Validate language part (first two characters)\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Case 1: Language only (e.g., \"en\")\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else { // len is 5 or >= 6\n            // All formats beyond language-only require an underscore at index 2\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            // Now we have \"xx_...\"\n            // Check for \"xx__VVV\" pattern (empty country code, variant present)\n            // This is identified by a second underscore at index 3\n            if (str.charAt(3) == '_') {\n                // For \"xx__VVV\", the minimum length is 6 (e.g., \"en__A\")\n                if (len < 6) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                String variant = str.substring(4);\n                // Variant part must not be empty (e.g., \"en__\" is invalid)\n                if (variant.length() == 0) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), \"\", variant);\n\n            } else { // It must be \"xx_YY\" or \"xx_YY_VVV\"\n                // Validate country part (characters at index 3 and 4)\n                char ch3 = str.charAt(3);\n                char ch4 = str.charAt(4);\n                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n\n                // Case 2: Language and Country (e.g., \"en_GB\")\n                if (len == 5) {\n                    return new Locale(str.substring(0, 2), str.substring(3, 5));\n                } else { // len > 5, must be \"xx_YY_VVV\"\n                    // For \"xx_YY_VVV\", a second underscore is required at index 5\n                    if (str.charAt(5) != '_') {\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                    // Variant part must exist, so min length is 7 (e.g., \"en_GB_A\")\n                    if (len < 7) {\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                    String variant = str.substring(6);\n                    // Variant part cannot be empty (e.g., \"en_GB_\")\n                    if (variant.length() == 0) {\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                    return new Locale(str.substring(0, 2), str.substring(3, 5), variant);\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}