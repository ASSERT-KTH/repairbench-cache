{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"fr__POSIX\")  = new Locale(\"fr\", \"\", \"POSIX\")  (new case)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n\n        // Language code check (2 chars, lowercase)\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Handle 'll' format\n        if (len == 2) {\n            return new Locale(str, \"\");\n        }\n\n        // Handle 'll_...' formats (country or variant start with '_')\n        if (str.charAt(2) != '_') { // Separator must be '_'\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Minimum length for any string with a separator (e.g., \"en_\")\n        if (len < 4) { // \"en_\" would be len 3, which is invalid. \"en__\" would be len 4.\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        char ch3 = str.charAt(3);\n\n        if (ch3 == '_') { // Format is 'll__VAR'\n            // Language: str.substring(0, 2)\n            // Country: \"\" (empty)\n            // Variant: str.substring(4) (starts from index 4)\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n\n        } else { // Format is 'll_CC...'\n            // Country code check (2 chars, uppercase)\n            if (len < 5) { // \"en_G\" would be len 4, which is invalid for ll_CC\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            // Valid country code found at index 3, 4\n            String language = str.substring(0, 2);\n            String country = str.substring(3, 5);\n\n            // Handle 'll_CC' format\n            if (len == 5) {\n                return new Locale(language, country);\n            }\n\n            // Handle 'll_CC_VAR' format (len > 5)\n            if (str.charAt(5) != '_') { // Separator for variant must be '_'\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Variant starts from index 6\n            String variant = str.substring(6);\n            return new Locale(language, country, variant);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}