{
    "generation": "public static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String language = str.substring(0, 2);\n    if (language.charAt(0) < 'a' || language.charAt(0) > 'z' ||\n        language.charAt(1) < 'a' || language.charAt(1) > 'z') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        return new Locale(language, \"\");\n    }\n    // For longer strings, the character at index 2 must be an underscore\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // Case 1: Language with empty country and variant (e.g. \"fr__POSIX\")\n    if (len >= 4 && str.charAt(3) == '_') {\n        if (len == 4) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String variant = str.substring(4);\n        if (variant.length() == 0) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(language, \"\", variant);\n    }\n    // Case 2: Language with country (and optionally variant)\n    // The country portion must be exactly 2 uppercase letters.\n    if (len == 5) {\n        String country = str.substring(3, 5);\n        if (country.charAt(0) < 'A' || country.charAt(0) > 'Z' ||\n            country.charAt(1) < 'A' || country.charAt(1) > 'Z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(language, country);\n    }\n    if (len >= 6) {\n        // There must be an underscore separating the country and the variant\n        if (str.charAt(5) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String country = str.substring(3, 5);\n        if (country.charAt(0) < 'A' || country.charAt(0) > 'Z' ||\n            country.charAt(1) < 'A' || country.charAt(1) > 'Z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String variant = str.substring(6);\n        if (variant.length() == 0) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(language, country, variant);\n    }\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}