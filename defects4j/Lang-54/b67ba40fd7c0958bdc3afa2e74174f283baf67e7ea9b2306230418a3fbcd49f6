{
    "generation": "import java.util.Locale;\n\npublic class LocaleUtils {\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"fr__POSIX\")  = new Locale(\"fr\", \"\", \"POSIX\")  (LANG-328)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n\n        // Language validation (first two characters)\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Case 1: Just language (e.g., \"en\")\n        if (len == 2) {\n            return new Locale(str, \"\");\n        }\n\n        // Case 2: Language + Country or Variant (e.g., \"en_GB\", \"fr__POSIX\", \"en_GB_VAR\")\n        // Must have an underscore after language\n        if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        String language = str.substring(0, 2);\n        String country = \"\";\n        String variant = \"\";\n\n        // Find the second underscore, if it exists, starting search from index 3\n        int firstUnderscoreIdx = 2;\n        int secondUnderscoreIdx = str.indexOf('_', firstUnderscoreIdx + 1);\n\n        if (secondUnderscoreIdx == -1) {\n            // No second underscore found. Format must be LL_CC.\n            // Length must be exactly 5.\n            if (len != 5) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Validate and extract country code (2 uppercase chars)\n            char ch3 = str.charAt(3);\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            country = str.substring(3, 5);\n        } else {\n            // Second underscore found. Format could be LL_CC_V or LL__V.\n            String countryOrEmpty = str.substring(firstUnderscoreIdx + 1, secondUnderscoreIdx);\n\n            if (countryOrEmpty.length() == 0) {\n                // LL__V: Country is empty. Variant starts after the second underscore.\n                country = \"\";\n                // Variant part must not be empty if there's a second underscore.\n                if (secondUnderscoreIdx + 1 >= len) { // Means \"LL__\"\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                variant = str.substring(secondUnderscoreIdx + 1);\n            } else if (countryOrEmpty.length() == 2) {\n                // LL_CC_V: Country code is present.\n                // Validate country code (2 uppercase chars)\n                char chCountry0 = countryOrEmpty.charAt(0);\n                char chCountry1 = countryOrEmpty.charAt(1);\n                if (chCountry0 < 'A' || chCountry0 > 'Z' || chCountry1 < 'A' || chCountry1 > 'Z') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                country = countryOrEmpty;\n                // Variant part must not be empty if there's a third underscore.\n                if (secondUnderscoreIdx + 1 >= len) { // Means \"LL_CC_\"\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                variant = str.substring(secondUnderscoreIdx + 1);\n            } else {\n                // Invalid length for the country part (e.g., \"en_G_V\" or \"en_GBX_V\")\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        }\n        return new Locale(language, country, variant);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}