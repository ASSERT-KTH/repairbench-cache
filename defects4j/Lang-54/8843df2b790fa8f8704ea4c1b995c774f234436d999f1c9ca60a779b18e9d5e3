{
    "generation": "import java.util.Locale;\n\npublic class LocaleUtils {\n\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"fr__POSIX\")  = new Locale(\"fr\", \"\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n\n        int len = str.length();\n\n        // Language code must be at least 2 characters and lowercase\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        int firstUnderscore = str.indexOf('_');\n\n        // Case 1: Only language (ll)\n        if (firstUnderscore == -1) {\n            if (len != 2) { // must be exactly 2 chars if no underscore\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(str, \"\");\n        }\n\n        // Case 2: Language and something else (ll_...)\n        String language = str.substring(0, 2);\n\n        // First underscore must be immediately after the language code (at index 2)\n        if (firstUnderscore != 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        int secondUnderscore = str.indexOf('_', firstUnderscore + 1);\n\n        // Case 2a: ll_CC (no second underscore)\n        if (secondUnderscore == -1) {\n            if (len != 5) { // Must be 5 chars for ll_CC (e.g., \"en_GB\")\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = str.charAt(3);\n            char ch4 = str.charAt(4);\n            // Country code must be 2 uppercase letters\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            String country = str.substring(3, 5);\n            return new Locale(language, country);\n\n        } else { // Case 2b: ll_CC_VVV or ll__VVV (second underscore exists)\n            String country;\n            String variant;\n            \n            // Check for empty country (ll__VVV) where second underscore is right after first\n            if (secondUnderscore == firstUnderscore + 1) { // e.g., \"fr__POSIX\"\n                country = \"\";\n                // Variant must not be empty\n                if (secondUnderscore + 1 >= len) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                variant = str.substring(secondUnderscore + 1);\n            } else { // ll_CC_VVV\n                // Country code must be 2 characters between first and second underscore\n                if (secondUnderscore != firstUnderscore + 3) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                char ch3 = str.charAt(firstUnderscore + 1); // str.charAt(3)\n                char ch4 = str.charAt(firstUnderscore + 2); // str.charAt(4)\n                // Country code must be 2 uppercase letters\n                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                country = str.substring(firstUnderscore + 1, secondUnderscore); // str.substring(3, 5)\n                \n                // Variant must not be empty\n                if (secondUnderscore + 1 >= len) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                variant = str.substring(secondUnderscore + 1);\n            }\n            return new Locale(language, country, variant);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}