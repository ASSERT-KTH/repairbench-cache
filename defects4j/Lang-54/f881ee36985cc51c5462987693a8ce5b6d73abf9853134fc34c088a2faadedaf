{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n\n        // Language code validation\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Handle language only (e.g., \"en\")\n        if (len == 2) {\n            return new Locale(str, \"\");\n        }\n\n        // If length > 2, the 3rd character must be an underscore.\n        if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Find the second underscore, if any, starting search from index 3.\n        // This helps differentiate between lang_country and lang_country_variant / lang__variant.\n        int secondUnderscore = str.indexOf('_', 3);\n\n        String language = str.substring(0, 2);\n        String country = \"\";\n        String variant = \"\";\n\n        if (secondUnderscore == -1) { // Only one underscore found: lang_country (e.g., \"en_GB\")\n            // For this format, the total length must be 5 (2-char lang + _ + 2-char country)\n            if (len != 5) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            country = str.substring(3, 5);\n            char ch3 = country.charAt(0);\n            char ch4 = country.charAt(1);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(language, country);\n\n        } else { // Two or more underscores: lang_country_variant or lang__variant (e.g., \"en_GB_xxx\", \"fr__POSIX\")\n            // The country part is between the first and second underscore.\n            // It can be empty for formats like \"fr__POSIX\".\n            country = str.substring(3, secondUnderscore);\n            \n            // Validate country part if it's not empty.\n            if (country.length() > 0) {\n                if (country.length() != 2) { // Country code must be 2 characters if present.\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                char ch3 = country.charAt(0);\n                char ch4 = country.charAt(1);\n                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n            }\n            \n            // The variant part starts after the second underscore.\n            variant = str.substring(secondUnderscore + 1);\n            \n            // The variant part must not be empty if the second underscore is present.\n            // e.g., \"en_GB_\" or \"fr__\" are invalid.\n            if (variant.length() == 0) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            return new Locale(language, country, variant);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}