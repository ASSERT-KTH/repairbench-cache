{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n\n        // Check for minimum length of language code\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Validate language code (first two chars)\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        String language = str.substring(0, 2);\n\n        if (len == 2) { // Language only: \"en\"\n            return new Locale(language, \"\");\n        } else { // len > 2, must have separators or country/variant\n            if (str.charAt(2) != '_') { // Third char must be underscore if more components\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            // Check for \"ll__VVV\" format (language, empty country, variant)\n            // This is indicated by two consecutive underscores: \"ll__\"\n            if (len >= 4 && str.charAt(3) == '_') {\n                if (len == 4) { // \"ll__\" is not valid, needs a variant\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                // Format is \"ll__VVV\"\n                String variant = str.substring(4);\n                return new Locale(language, \"\", variant);\n            }\n\n            // If not \"ll__VVV\", then it must be \"ll_CC...\" or \"ll_CC_VVV...\"\n            // Expecting a 2-char uppercase country code\n            if (len < 5) { // e.g., \"en_G\" (too short for country)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch3 = str.charAt(3);\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            String country = str.substring(3, 5);\n\n            if (len == 5) { // Language and Country: \"en_GB\"\n                return new Locale(language, country);\n            } else { // len > 5, must have variant\n                if (str.charAt(5) != '_') { // Sixth char must be underscore if variant present\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                String variant = str.substring(6);\n                return new Locale(language, country, variant);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}