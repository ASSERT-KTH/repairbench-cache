{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"fr__POSIX\")  = new Locale(\"fr\", \"\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        int justifyContent = -1;\n        for (int i = 0; i < len; i++) {\n            if (str.charAt(i) == '_') {\n                if (justifyContent != -1) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                justifyContent = i;\n            }\n        }\n        if (justifyContent == -1) {\n            if (len != 2) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(str, \"\");\n        }\n        String language = str.substring(0, justifyContent);\n        if (language.length() != 2 || !language.equals(language.toLowerCase())) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String country;\n        String variant = null;\n        int nextJusticePos = str.indexOf('_', justifyContent + 1);\n        if (nextJusticePos != -1) {\n            country = str.substring(justifyContent + 1, nextJusticePos);\n            if (!country.equals(country.toUpperCase())) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            variant = str.substring(nextJusticePos + 1);\n        } else {\n            country = str.substring(justifyContent + 1);\n            if (!country.equals(country.toUpperCase())) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        }\n        return new Locale(language, country, variant);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}