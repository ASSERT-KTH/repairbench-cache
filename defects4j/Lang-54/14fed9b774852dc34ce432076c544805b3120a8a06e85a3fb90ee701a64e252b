{
    "generation": "    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else if (len >= 5 && str.charAt(2) == '_' && str.charAt(4) == '_') {\n            // len == 5: language_country_variant\n            // len > 5: language_country_variant_extension\n            char ch3 = str.charAt(3);\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(5));\n            }\n        } else if (len >= 4 && str.charAt(2) == '_') {\n            // len == 4: language_country\n            // this may be a valid language_country or invalid language_country_variant\n            // where the country is actually a variant\n            char ch3 = str.charAt(3);\n            if (ch3 >= 'A' && ch3 <= 'Z') {\n                // language_country\n                return new Locale(str.substring(0, 2), str.substring(3));\n            } else {\n                // language_variant\n                return new Locale(str.substring(0, 2), \"\", str.substring(3));\n            }\n        } else if (len >= 3 && str.charAt(2) == '_') {\n            // language_variant\n            return new Locale(str.substring(0, 2), \"\", str.substring(3));\n        } else {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}