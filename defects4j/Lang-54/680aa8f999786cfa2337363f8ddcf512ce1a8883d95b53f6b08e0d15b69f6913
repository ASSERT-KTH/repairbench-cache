{
    "generation": "public static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    if (len == 2) {\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str, \"\");\n    }\n    if (len < 5) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String language = str.substring(0, 2);\n    if (language.charAt(0) < 'a' || language.charAt(0) > 'z' || language.charAt(1) < 'a' || language.charAt(1) > 'z') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 5) {\n        String country = str.substring(3,5);\n        if (country.charAt(0) < 'A' || country.charAt(0) > 'Z' || country.charAt(1) < 'A' || country.charAt(1) > 'Z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(language, country);\n    }\n    if (str.charAt(5) == '_') {\n        // Handle language + __ + variant (i.e., country is empty)\n        String country = str.substring(3,5);\n        if (!country.isEmpty() && (country.length() != 2 || (country.charAt(0) < 'A' || country.charAt(0) > 'Z' || country.charAt(1) < 'A' || country.charAt(1) > 'Z'))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String variant = str.substring(6);\n        return new Locale(language, country, variant);\n    }\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}