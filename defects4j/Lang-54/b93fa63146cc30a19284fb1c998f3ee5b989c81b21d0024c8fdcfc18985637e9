{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"fr__POSIX\")  = new Locale(\"fr\", \"\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n\n        // Check for minimum length of 2 (language code)\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Validate language code (2 lowercase letters)\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (len == 2) {\n            // Language only: \"ll\"\n            return new Locale(str, \"\");\n        } else {\n            // Must have a separator if length > 2\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            // At this point, format is \"ll_\" or longer\n\n            // Check if it's \"ll_C\" where C is country, or \"ll__V\" where V is variant\n            if (len == 3) {\n                // \"ll_\" - invalid, too short for country or variant\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            char ch3 = str.charAt(3);\n\n            if (ch3 == '_') {\n                // Format is \"ll__V\" (language and variant, no country)\n                // Minimum length for \"ll__V\" is 5 (2 lang + 2 underscores + 1 variant char)\n                if (len < 5) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                String language = str.substring(0, 2);\n                String variant = str.substring(4); // Variant starts after \"ll__\"\n                return new Locale(language, \"\", variant);\n\n            } else {\n                // Format is \"ll_C\" (language and country) or \"ll_CC_V\" (language, country, variant)\n                // Country code must be two uppercase letters.\n                // Minimum length for \"ll_CC\" is 5\n                if (len < 5) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n\n                char ch4 = str.charAt(4);\n                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n\n                String language = str.substring(0, 2);\n                String country = str.substring(3, 5);\n\n                if (len == 5) {\n                    // \"ll_CC\"\n                    return new Locale(language, country);\n                } else {\n                    // Must have a second separator for variant\n                    if (str.charAt(5) != '_') {\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                    // Minimum length for \"ll_CC_V\" is 7\n                    if (len == 6) {\n                        // \"ll_CC_\" - invalid, variant must be present\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                    String variant = str.substring(6); // Variant starts after \"ll_CC_\"\n                    return new Locale(language, country, variant);\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}