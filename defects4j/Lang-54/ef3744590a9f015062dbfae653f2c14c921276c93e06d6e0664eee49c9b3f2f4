{
    "generation": "public static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // Check that the language consists of two lowercase letters.\n    char ch0 = str.charAt(0);\n    char ch1 = str.charAt(1);\n    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String language = str.substring(0, 2);\n\n    if (len == 2) {\n        return new Locale(language, \"\");\n    }\n    // The character at index 2 must be an underscore.\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // \"xx_\" is not a valid format.\n    if (len == 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // If the character at index 3 is another underscore, then we have the form language__variant.\n    if (str.charAt(3) == '_') {\n        String variant = str.substring(4);\n        return new Locale(language, \"\", variant);\n    } else {\n        // Otherwise, we expect the country code to be two uppercase letters.\n        if (len < 5) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch3 = str.charAt(3);\n        char ch4 = str.charAt(4);\n        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String country = str.substring(3, 5);\n        // If only language and country are specified, return here.\n        if (len == 5) {\n            return new Locale(language, country);\n        }\n        // For language, country, and variant, the character at index 5 must be an underscore.\n        if (str.charAt(5) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String variant = str.substring(6);\n        return new Locale(language, country, variant);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}