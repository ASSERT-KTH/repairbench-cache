{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variants, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len != 2 && len < 5) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Check if there's a country code (positions 3-4)\n            if (len >= 5) {\n                char ch3 = str.charAt(3);\n                char ch4 = str.charAt(4);\n                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n            }\n            // Handle cases with country code and optional variant\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                // Check for variant separator (position 5)\n                if (len >= 6 && str.charAt(5) != '_') {\n                    // If there's more content but no separator at position 5, it's invalid\n                    // But now we support cases like \"fr__POSIX\"\n                    int nextUnderscore = str.indexOf('_', 2);\n                    if (nextUnderscore == -1 || nextUnderscore == 5) {\n                        // Either no additional underscores (invalid for variants)\n                        // Or underscore at position 5 (normal case)\n                    } else {\n                        // Handle cases like \"fr__POSIX\" where there are two underscores in a row\n                        // after the language code\n                    }\n                }\n                // The variant can start at different positions depending on whether there's a country code\n                String country = \"\";\n                String variant = \"\";\n                int countryStart = -1;\n                int variantStart = -1;\n\n                // Find the country and variant parts\n                // The format can be:\n                // 1. language-country-variant (en_US_windows)\n                // 2. language--variant (fr__POSIX)\n                int firstUnderscore = 2; // after language code\n                int secondUnderscore = str.indexOf('_', firstUnderscore + 1);\n\n                if (secondUnderscore != -1 && (secondUnderscore == firstUnderscore + 1 || secondUnderscore > firstUnderscore + 1)) {\n                    // Case where we might have empty country code (like fr__POSIX)\n                    if (secondUnderscore == firstUnderscore + 1) {\n                        // Pattern: language__variant\n                        country = \"\";\n                        variant = str.substring(secondUnderscore + 1);\n                    } else {\n                        // Normal case with country code: language_country_variant\n                        country = str.substring(firstUnderscore + 1, secondUnderscore);\n                        if (country.length() != 2 || country.charAt(0) < 'A' || country.charAt(0) > 'Z' ||\n                            country.charAt(1) < 'A' || country.charAt(1) > 'Z') {\n                            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                        }\n                        variant = str.substring(secondUnderscore + 1);\n                    }\n                } else if (len > 5) {\n                    // Pattern like language_country_variant (without double underscore)\n                    country = str.substring(3, 5);\n                    variant = str.substring(6);\n                } else {\n                    // Just language and country\n                    country = str.substring(3, 5);\n                }\n\n                // If we haven't set country yet and we have enough length\n                if (country.isEmpty() && len > 5) {\n                    // Check if position 3-4 is a valid country code\n                    if (len >= 5) {\n                        char ch3 = str.charAt(3);\n                        char ch4 = str.charAt(4);\n                        if (ch3 >= 'A' && ch3 <= 'Z' && ch4 >= 'A' && ch4 <= 'Z') {\n                            country = str.substring(3, 5);\n                            variant = len > 5 ? str.substring(6) : \"\";\n                        }\n                    }\n                }\n\n                // If we still don't have a country (like in fr__POSIX case)\n                if (country.isEmpty()) {\n                    int doubleUnderscorePos = str.indexOf(\"__\");\n                    if (doubleUnderscorePos > 0) {\n                        // Handle fr__POSIX case\n                        String lang = str.substring(0, 2);\n                        variant = str.substring(doubleUnderscorePos + 2);\n                        return new Locale(lang, \"\", variant);\n                    }\n                }\n\n                if (country.isEmpty()) {\n                    // Try to find the correct parts again\n                    if (len > 5) {\n                        // Default case: language_country_variant\n                        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n                    }\n                }\n\n                // Fallback for complex cases\n                String language = str.substring(0, 2);\n                if (len > 2 && str.charAt(2) == '_') {\n                    int secondSep = str.indexOf('_', 3);\n                    if (secondSep == -1) {\n                        // language_country\n                        country = str.substring(3);\n                        return new Locale(language, country, \"\");\n                    } else if (secondSep == 3) {\n                        // language__variant\n                        variant = str.substring(secondSep + 1);\n                        return new Locale(language, \"\", variant);\n                    } else {\n                        // language_country_variant\n                        country = str.substring(3, secondSep);\n                        variant = str.substring(secondSep + 1);\n                        return new Locale(language, country, variant);\n                    }\n                }\n\n                // Default case when nothing special matches\n                if (len > 5) {\n                    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n                } else {\n                    return new Locale(str.substring(0, 2), str.substring(3, 5));\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}