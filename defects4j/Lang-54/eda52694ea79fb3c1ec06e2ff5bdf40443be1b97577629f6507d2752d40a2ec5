{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"fr__POSIX\")  = new Locale(\"fr\", \"\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        // Basic length check: must be at least 2 for language code\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // Validate language code (first 2 chars)\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: Language code must be lower case - \" + str);\n        }\n\n        // Case 1: Only language code (\"ll\")\n        if (len == 2) {\n            return new Locale(str, \"\");\n        }\n\n        // Case 2: Language + Country/Variant (\"ll_...\")\n        // Must be \"ll_CC\", \"ll_CC_V...\" or \"ll__V...\" minimum length 5\n        if (len < 5) {\n            throw new IllegalArgumentException(\"Invalid locale format: Length must be at least 5 for non-language-only locales - \" + str);\n        }\n\n        // Check for first underscore\n        if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: Expecting underscore after language code - \" + str);\n        }\n\n        char ch3 = str.charAt(3);\n\n        // Case 2a: Language + Variant (\"ll__VV...\")\n        if (ch3 == '_') {\n            // Ensure there is a variant part after the \"__\"\n            if (len < 5) { // Format \"ll__\" is invalid (len 4), already caught by len < 5 check\n                 throw new IllegalArgumentException(\"Invalid locale format: Missing variant after double underscore - \" + str);\n            }\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        }\n\n        // Case 2b: Language + Country (+ Variant?) (\"ll_CC...\")\n        // Validate country code (chars 3 and 4)\n        char ch4 = str.charAt(4);\n        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n            throw new IllegalArgumentException(\"Invalid locale format: Country code must be upper case - \" + str);\n        }\n\n        // Case 2b-i: Language + Country (\"ll_CC\")\n        if (len == 5) {\n            return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n\n        // Case 2b-ii: Language + Country + Variant (\"ll_CC_VV...\")\n        // Check length for variant part separator \"_\"\n        if (len < 7) { // Needs at least \"ll_CC_V\"\n            // Handles formats like \"ll_CCX\" (len 6), which are invalid.\n            throw new IllegalArgumentException(\"Invalid locale format: Length must be at least 7 for language+country+variant locales - \" + str);\n        }\n\n        // Check for second underscore\n        if (str.charAt(5) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: Expecting underscore after country code - \" + str);\n        }\n        \n        // Ensure there is a non-empty variant part after the second \"_\"\n        // The check len < 7 ensures that if len == 6 (e.g., \"ll_CC_\"), it fails.\n        // If len >= 7, str.substring(6) will be non-empty or empty (\"\").\n        // Locale constructor allows empty variant string.\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}