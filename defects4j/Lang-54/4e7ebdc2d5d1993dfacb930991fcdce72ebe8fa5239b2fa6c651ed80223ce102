{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"en__POSIX\")  = new Locale(\"en\", \"\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        // Input string must be at least 2 chars long (\"ll\")\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // Language code (first 2 chars) must be lowercase letters\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Case 1: \"ll\"\n        if (len == 2) {\n            return new Locale(str, \"\");\n        }\n\n        // String is longer than 2 chars, must have an underscore at index 2\n        if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Format is \"ll_...\"\n        // String must be at least 5 chars long (\"ll_CC\" or \"ll__V\")\n        if (len < 5) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Handles \"ll_\", \"ll_X\", \"ll_XX\", \"ll__\"\n        }\n\n        // Check char at index 3\n        char ch3 = str.charAt(3);\n        if (ch3 == '_') {\n            // Format is \"ll__variant\"\n            // Variant must not be empty, so length must be >= 5 (\"ll__V\")\n            // The length check `len < 5` above already handled \"ll__\".\n            // Locale constructor handles variant content validation.\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        } else {\n            // Format might be \"ll_CC...\"\n            // Country code (chars at index 3 and 4) must be uppercase letters\n            char ch4 = str.charAt(4);\n            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            // Format is \"ll_CC\"\n            if (len == 5) {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n\n            // Format must be \"ll_CC_variant\"\n            // Must have an underscore at index 5\n            if (str.charAt(5) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Variant must not be empty, so length must be >= 7 (\"ll_CC_V\")\n            if (len < 7) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Handles \"ll_CC_\"\n            }\n\n            // Locale constructor handles variant content validation.\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}