{
    "generation": "    /**\n     * Converts a String to a Locale.\n     *\n     * This method takes the string format of a locale and creates the\n     * locale object from it.\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")\n     *   LocaleUtils.toLocale(\"fr__POSIX\")  = new Locale(\"fr\", \"\", \"POSIX\")\n     * </pre>\n     *\n     * The input string is validated to ensure it follows the correct format.\n     * The language code must be lowercase, the country code (if present) must be\n     * uppercase, and the parts must be separated by underscores.\n     *\n     * @param str the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        String[] parts = str.split(\"_\", -1); // Split into all parts, including empty strings\n\n        if (parts.length > 3) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        String language = parts[0];\n        if (!language.matches(\"[a-z]{2}\")) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (parts.length == 1) {\n            return new Locale(language, \"\", \"\");\n        } else if (parts.length == 2) {\n            String country = parts[1];\n            if (country.matches(\"[A-Z]{2}\")) {\n                return new Locale(language, country, \"\");\n            } else {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        } else { // parts.length == 3\n            String country = parts[1];\n            String variant = parts[2];\n            if (!country.matches(\"(?:[A-Z]{2}|)\")) { // Empty string or 2 uppercase letters\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(language, country, variant);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}