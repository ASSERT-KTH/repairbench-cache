{
    "generation": "public static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    char ch0 = str.charAt(0);\n    char ch1 = str.charAt(1);\n    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String language = str.substring(0, 2);\n    if (len == 2) {\n        return new Locale(language, \"\");\n    }\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // Look for the next underscore, which marks the start of the variant (if any)\n    int idx = str.indexOf('_', 3);\n    if (idx == -1) {\n        // No variant, only language and country\n        String country = str.substring(3);\n        if (country.length() != 2\n                || country.charAt(0) < 'A' || country.charAt(0) > 'Z'\n                || country.charAt(1) < 'A' || country.charAt(1) > 'Z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(language, country);\n    }\n    // There is a variant, country may be empty or 2 letters\n    String country;\n    if (idx == 3) {\n        // Double underscore => empty country\n        country = \"\";\n    } else if (idx == 5) {\n        // Two-letter country\n        country = str.substring(3, 5);\n        if (country.charAt(0) < 'A' || country.charAt(0) > 'Z'\n                || country.charAt(1) < 'A' || country.charAt(1) > 'Z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    } else {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String variant = str.substring(idx + 1);\n    if (variant.isEmpty()) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    return new Locale(language, country, variant);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}