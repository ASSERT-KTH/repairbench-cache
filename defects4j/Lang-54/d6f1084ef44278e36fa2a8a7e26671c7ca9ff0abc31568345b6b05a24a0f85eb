{
    "generation": "/**\n * <p>Converts a String to a Locale.</p>\n *\n * <p>This method takes the string format of a locale and creates the\n * locale object from it.</p>\n *\n * <pre>\n *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")\n *   LocaleUtils.toLocale(\"fr__POSIX\")  = new Locale(\"fr\", \"\", \"POSIX\")\n * </pre>\n *\n * <p>This method validates the input strictly.\n * The language code must be lowercase.\n * The country code must be uppercase.\n * The separator must be an underscore.\n * The length must be correct.</p>\n *\n * @param str  the locale String to convert, null returns null\n * @return a Locale, null if null input\n * @throws IllegalArgumentException if the string is an invalid format\n */\npublic static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // validate language\n    char ch0 = str.charAt(0);\n    char ch1 = str.charAt(1);\n    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String language = str.substring(0, 2);\n    // language only\n    if (len == 2) {\n        return new Locale(language, \"\");\n    }\n    // must have separator\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // too short to have country or variant\n    if (len == 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // variant-only: language__variant\n    if (str.charAt(3) == '_') {\n        String variant = str.substring(4);\n        if (variant.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(language, \"\", variant);\n    }\n    // language_country or language_country_variant\n    if (len < 5) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    char ch3 = str.charAt(3);\n    char ch4 = str.charAt(4);\n    if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String country = str.substring(3, 5);\n    if (len == 5) {\n        return new Locale(language, country);\n    }\n    // must have second separator\n    if (str.charAt(5) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String variant = str.substring(6);\n    if (variant.isEmpty()) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    return new Locale(language, country, variant);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}