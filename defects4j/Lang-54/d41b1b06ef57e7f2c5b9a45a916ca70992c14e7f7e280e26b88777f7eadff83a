{
    "generation": "    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else if (len >= 5 && str.charAt(2) == '_' && str.charAt(4) == '_') {\n            // language_country_variant or language_country__variant\n            String language = str.substring(0, 2);\n            String country = str.substring(3, 5);\n            String variant = str.substring(5);\n            if (country.length() == 2 && (variant.isEmpty() || variant.indexOf('_') == -1)) {\n                return new Locale(language, country, variant);\n            } else {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        } else if (len >= 5 && str.charAt(2) == '_') {\n            // language_country\n            if (str.charAt(3) >= 'A' && str.charAt(3) <= 'Z' && str.charAt(4) >= 'A' && str.charAt(4) <= 'Z') {\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            } else {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}