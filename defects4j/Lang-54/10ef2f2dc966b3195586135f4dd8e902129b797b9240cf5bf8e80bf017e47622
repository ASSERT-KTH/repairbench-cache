{
    "generation": "import java.util.Locale;\n\npublic class LocaleUtils {\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"fr__POSIX\")  = new Locale(\"fr\", \"\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n\n        // Initial length check:\n        // 'll' (len 2)\n        // 'll_CC' (len 5)\n        // 'll__VVV' (len >= 6, e.g., 'll__V')\n        // 'll_CC_VVV' (len >= 7, e.g., 'll_CC_V')\n        // Any other lengths for these specific patterns are invalid.\n        // So, lengths 0, 1, 3, 4 are always invalid.\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            // At this point, we have \"ll_...\"\n            // The length must be at least 5 for \"ll_CC\" or 6 for \"ll__V\"\n            if (len < 5) { // e.g. \"en_\", \"en_G\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            // Check if it's \"ll__VVV\" (empty country code) or \"ll_CC_VVV\" (with country code)\n            if (str.charAt(3) == '_') {\n                // This is 'll__VVV' format, e.g., \"fr__POSIX\"\n                // The country part is empty.\n                // Length must be at least 6 for \"ll__V\".\n                if (len < 6) { // e.g. \"en__\" (len=5)\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                // Language is str.substring(0,2)\n                // Country is \"\"\n                // Variant is str.substring(4)\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            } else {\n                // This is 'll_CC...' format, e.g., \"en_GB\", \"en_GB_xxx\"\n                // It must have a two-letter country code.\n                char ch3 = str.charAt(3);\n                char ch4 = str.charAt(4);\n                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n\n                if (len == 5) {\n                    // This is 'll_CC' format, e.g., \"en_GB\"\n                    return new Locale(str.substring(0, 2), str.substring(3, 5));\n                } else {\n                    // len > 5 and starts with 'll_CC'\n                    // It must be 'll_CC_VVV' format\n                    if (str.charAt(5) != '_') {\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                    // Length must be at least 7 for \"ll_CC_V\".\n                    if (len < 7) { // e.g. \"en_GB_\" (len=6)\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}