{
    "generation": "@Override\npublic void process(Node externs, Node root) {\n  // First, do the initial traversal.\n  NodeTraversal.traverse(compiler, root, this);\n  \n  if (MAKE_LOCAL_NAMES_UNIQUE) {\n    // Create a renamer that skips renaming for the reserved name \"arguments\".\n    MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique() {\n      @Override\n      protected String getUniqueName(String name) {\n        // Do not change the special name \"arguments\".\n        if (\"arguments\".equals(name)) {\n          return name;\n        }\n        return super.getUniqueName(name);\n      }\n    };\n    NodeTraversal t = new NodeTraversal(compiler, renamer);\n    t.traverseRoots(externs, root);\n  }\n  \n  // Remove any duplicate declarations (for example, dropping a \"var\" on \"arguments\")\n  removeDuplicateDeclarations(root);\n  \n  new PropogateConstantAnnotations(compiler, assertOnChange)\n      .process(externs, root);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}