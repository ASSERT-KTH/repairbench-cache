{
    "generation": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n\n    // Fix for Issue 115:\n    // The 'arguments' keyword is a special, implicitly available variable in JavaScript\n    // functions (in non-strict mode). A 'var arguments' declaration within a function\n    // effectively shadows or reassigns this special object. Closure Compiler aims\n    // to normalize this to a simple assignment 'arguments = ...' when possible,\n    // especially during optimizations.\n    //\n    // The 'removeDuplicateDeclarations' pass is responsible for cleaning up redundant\n    // variable declarations. When 'var arguments' is encountered, if 'arguments'\n    // is already implicitly declared as a function parameter, 'removeDuplicateDeclarations'\n    // should recognize this as a \"duplicate\" in a semantic sense and remove the 'var' keyword.\n    //\n    // By moving 'removeDuplicateDeclarations' to run *before* 'MakeDeclaredNamesUnique',\n    // we ensure that the problematic 'var arguments' declaration is transformed into\n    // a simple assignment ('arguments = ...') early in the process. This prevents\n    // 'MakeDeclaredNamesUnique' from misinterpreting 'arguments' as a regular local variable\n    // that needs renaming or causing unexpected behavior related to its special nature.\n    removeDuplicateDeclarations(root);\n\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}