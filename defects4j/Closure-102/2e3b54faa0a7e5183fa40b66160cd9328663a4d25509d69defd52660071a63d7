{
    "generation": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n    //After propagate constant annotations, arguments variable can be shadowed if it's a parameter.\n    //We need to prevent this by explicitly marking the arguments variable as not renameable.\n    Node argumentsNode = null;\n    if (root != null && root.hasChildren()) {\n        for (Node child : root.children()) {\n             if (child.getType() == Token.NAME && child.getString().equals(\"arguments\")) {\n                argumentsNode = child;\n                break;\n            }\n        }\n    }\n\n    if (argumentsNode != null){\n        argumentsNode.putBooleanProp(Node.DONT_RENAME, true);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}