{
    "generation": "@Override\npublic void process(Node externs, Node root) {\n  // First run the normal parameter\u2010optimization logic\n  NodeTraversal.traverse(compiler, root, this);\n\n  // Special\u2010case: turn \"var arguments = expr;\" into \"arguments = expr;\"\n  NodeTraversal argRemover = new NodeTraversal(\n      compiler, new NodeTraversal.Callback() {\n    @Override public boolean shouldTraverse(\n        NodeTraversal t, Node n, Node parent) {\n      return true;\n    }\n    @Override public void visit(\n        NodeTraversal t, Node n, Node parent) {\n      // Look for a single-var declaration of \"arguments\"\n      if (n.isVar() && n.hasOneChild()) {\n        Node child = n.getFirstChild();\n        if (child.isName() && \"arguments\".equals(child.getString())) {\n          Node init = child.getFirstChild();\n          if (init != null) {\n            // Build: arguments = <init>;\n            Node name = new Node(Token.NAME, \"arguments\");\n            Node assign = new Node(Token.ASSIGN, name, init.cloneTree());\n            Node expr = new Node(Token.EXPR_RESULT, assign);\n            parent.replaceChild(n, expr);\n            compiler.reportChangeToEnclosingScope(expr);\n          }\n        }\n      }\n    }\n  });\n  argRemover.traverseRoots(externs, root);\n\n  // Continue with the rest of the pass\n  if (MAKE_LOCAL_NAMES_UNIQUE) {\n    MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n    NodeTraversal t = new NodeTraversal(compiler, renamer);\n    t.traverseRoots(externs, root);\n  }\n  removeDuplicateDeclarations(root);\n  new PropogateConstantAnnotations(compiler, assertOnChange)\n      .process(externs, root);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}