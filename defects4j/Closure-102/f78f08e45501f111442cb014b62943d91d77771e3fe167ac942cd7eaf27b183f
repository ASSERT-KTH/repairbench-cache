{
    "generation": "@Override\npublic void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n        NodeTraversal t = new NodeTraversal(compiler, renamer);\n        t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n    // Special case for 'arguments' variable declaration\n    if (root != null) {\n        new NodeTraversal(compiler, new AbstractPostOrderCallback() {\n            @Override\n            public void visit(NodeTraversal t, Node n, Node parent) {\n                if (n.isVar() && n.hasOneChild() && \n                    n.getFirstChild().getString().equals(\"arguments\")) {\n                    Node nameNode = n.getFirstChild();\n                    parent.replaceChild(n, nameNode.detach());\n                }\n            }\n        }).traverse(root);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}