{
    "generation": "@Override\npublic void process(Node externs, Node root) {\n  // First do the usual peephole work\n  NodeTraversal.traverse(compiler, root, this);\n\n  // Then (optionally) make all locals unique\n  if (MAKE_LOCAL_NAMES_UNIQUE) {\n    MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n    NodeTraversal t = new NodeTraversal(compiler, renamer);\n    t.traverseRoots(externs, root);\n  }\n\n  // Special\u2010case: arguments is implicitly declared by JS,\n  // so drop any explicit \"var arguments = ...\" and turn it\n  // into just \"arguments = ...\"\n  NodeTraversal.traverse(\n      compiler, root,\n      new AbstractPostOrderCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isVar()) {\n            for (Node nameNode = n.getFirstChild();\n                 nameNode != null;\n                 nameNode = nameNode.getNext()) {\n              if (nameNode.isName() &&\n                  \"arguments\".equals(nameNode.getString())) {\n                // detach the initializer, if any\n                Node init = nameNode.hasChildren()\n                    ? nameNode.removeFirstChild()\n                    : null;\n                // build \"arguments = init;\"\n                Node lhs = new Node(Token.NAME, \"arguments\")\n                    .copyInformationFrom(nameNode);\n                Node assign = new Node(Token.ASSIGN, lhs, init)\n                    .copyInformationFrom(n);\n                Node expr = new Node(Token.EXPR_RESULT, assign)\n                    .copyInformationFrom(n);\n                parent.replaceChild(n, expr);\n                compiler.reportChangeToEnclosingScope(expr);\n                break;\n              }\n            }\n          }\n        }\n      });\n\n  // Remove any other duplicate var\u2010declares\n  removeDuplicateDeclarations(root);\n\n  // Finally propagate any constant annotations\n  new PropogateConstantAnnotations(compiler, assertOnChange)\n      .process(externs, root);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}