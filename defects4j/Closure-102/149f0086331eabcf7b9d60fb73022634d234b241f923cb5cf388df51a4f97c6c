{
    "generation": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n\n    // The original order was:\n    // 1. NodeTraversal.traverse (builds scopes)\n    // 2. MakeDeclaredNamesUnique (renames variables)\n    // 3. removeDuplicateDeclarations\n    // 4. PropogateConstantAnnotations\n\n    // Issue 115 suggests that 'arguments' is a special name that should not be renamed.\n    // If 'MakeDeclaredNamesUnique' renames 'arguments' (e.g., to 'arguments$0'),\n    // then 'removeDuplicateDeclarations' might not be able to correctly identify\n    // and process the special 'var arguments' declaration as intended by the test.\n    // The test expects 'var arguments = ...' to become 'arguments = ...'.\n    // To ensure 'removeDuplicateDeclarations' can act on the original 'arguments' name,\n    // it should be run *before* 'MakeDeclaredNamesUnique'.\n\n    // First, remove duplicate declarations, especially handling the 'var arguments'\n    // case before variables are potentially renamed.\n    removeDuplicateDeclarations(root);\n\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n\n    // Propagate constant annotations after all renaming and declaration cleanup.\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}