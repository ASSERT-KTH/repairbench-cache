{
    "generation": "@Override\npublic void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n        NodeTraversal t = new NodeTraversal(compiler, renamer);\n        t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    // Ensure 'arguments' is not renamed or modified in specific cases\n    preserveArgumentsObject(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n}\n\nprivate void preserveArgumentsObject(Node root) {\n    NodeTraversal.traverse(compiler, root, new NodeTraversal.AbstractPostOrderCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isName() && \"arguments\".equals(n.getString())) {\n                Node scope = t.getScope();\n                if (scope.isFunction() && scope.getFirstChild().isName()) {\n                    // Prevent renaming or modification of 'arguments' in this scope\n                    scope.putBooleanProp(Node.PRESERVE_ARGUMENTS_OBJECT, true);\n                }\n            }\n        }\n    });\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}