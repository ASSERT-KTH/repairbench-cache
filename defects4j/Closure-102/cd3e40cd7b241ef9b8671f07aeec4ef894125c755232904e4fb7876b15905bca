{
    "generation": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    // The `removeDuplicateDeclarations` pass can handle special cases like\n    // `var arguments` by transforming it to an assignment to the built-in\n    // `arguments` object. Moving it before `MakeDeclaredNamesUnique` ensures\n    // that `MakeDeclaredNamesUnique` doesn't attempt to rename `arguments`\n    // when it's intended to refer to the special built-in object.\n    removeDuplicateDeclarations(root);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}