{
    "generation": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    // Remove 'var' from 'arguments' declarations\n    NodeTraversal.traverse(compiler, root, new AbstractPostOrderCallback() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isVar()) {\n          Node nameNode = n.getFirstChild();\n          if (nameNode != null && \"arguments\".equals(nameNode.getString())) {\n            // Replace VAR with EXPR_RESULT\n            Node expr = new Node(Token.EXPR_RESULT, nameNode.detach());\n            parent.replaceChild(n, expr);\n            compiler.reportCodeChange();\n          }\n        }\n      }\n    });\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}