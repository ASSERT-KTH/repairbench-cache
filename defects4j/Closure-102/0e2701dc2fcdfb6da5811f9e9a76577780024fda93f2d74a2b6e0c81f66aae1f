{
    "generation": "@Override\npublic void process(Node externs, Node root) {\n  // First do the normal RenameVars work.\n  NodeTraversal.traverse(compiler, root, this);\n  if (MAKE_LOCAL_NAMES_UNIQUE) {\n    MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n    NodeTraversal t = new NodeTraversal(compiler, renamer);\n    t.traverseRoots(externs, root);\n  }\n\n  // Special\u2010case \"var arguments = \u2026\" \u2192 \"arguments = \u2026\"\n  NodeTraversal remapArgs = new NodeTraversal(compiler, new NodeTraversal.Callback() {\n    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      return true;\n    }\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isVar()) {\n        for (Node child = n.getFirstChild(), next; child != null; child = next) {\n          next = child.getNext();\n          if (child.isName() && \"arguments\".equals(child.getString())) {\n            // Detach the initializer\n            Node init = child.removeFirstChild();\n            // If there was an initializer, create an assignment expr\n            if (init != null) {\n              Node assign = IR.exprResult(\n                  IR.assign(child.cloneNode(), init))\n                  .useSourceInfoIfMissingFromForTree(n);\n              parent.addChildBefore(assign, n);\n            }\n            // Remove the 'arguments' declaration from the var\n            n.removeChild(child);\n            t.reportCodeChange();\n          }\n        }\n        // If the var has no children left, drop it entirely\n        if (!n.hasChildren()) {\n          parent.removeChild(n);\n        }\n      }\n    }\n  });\n  remapArgs.traverseRoots(externs, root);\n\n  // Now do the duplicate\u2010var cleanup and constant\u2010annotation pass\n  removeDuplicateDeclarations(root);\n  new PropogateConstantAnnotations(compiler, assertOnChange)\n      .process(externs, root);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}