{
    "generation": "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    // If the property is unwrapped then no wrapper name should be used:\n    JsonUnwrapped unwrapped = _findAnnotation(a, JsonUnwrapped.class);\n    if (unwrapped != null && unwrapped.enabled()) {\n        return null;\n    }\n\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg != null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann != null) {\n            name = pann.value();\n            /* 22-Apr-2014, tatu: Should figure out a better way to do this,\n             * but it\u2019s actually a bit tricky to do it more efficiently (meta-annotations\n             * add more lookups; AnnotationMap costs etc)\n             */\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"\";\n        } else {\n            return null;\n        }\n    }\n    return PropertyName.construct(name);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}