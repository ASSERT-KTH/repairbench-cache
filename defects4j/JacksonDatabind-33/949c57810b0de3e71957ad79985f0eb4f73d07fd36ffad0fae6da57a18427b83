{
    "generation": "@Override\npublic PropertyName findNameForSerialization(Annotated a) {\n    String name = null;\n\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg != null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann != null) {\n            name = pann.value();\n        } else if (/* Check if the annotation is present */ \n                 _hasAnnotation(a, JsonUnwrapped.class)) {\n            // For unwrapped properties, we need to get the name from possible JsonGetter or JsonProperty, or use default\n            // Let's attempt to find any of these that might exist on the annotated element\n            JsonGetter getter = _findAnnotation(a, JsonGetter.class);\n            if (getter != null) {\n                name = getter.value();\n            } else {\n                JsonProperty prop = _findAnnotation(a, JsonProperty.class);\n                if (prop != null) {\n                    name = prop.value();\n                }\n            }\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"\";\n        } else {\n            return null;\n        }\n    }\n    return PropertyName.construct(name);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}