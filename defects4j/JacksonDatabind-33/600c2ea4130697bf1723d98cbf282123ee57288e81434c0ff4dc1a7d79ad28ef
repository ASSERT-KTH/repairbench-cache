{
    "generation": "    @Override\n    public PropertyName findNameForSerialization(Annotated a)\n    {\n        String name = null;\n\n        JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n        if (jg != null) {\n            name = jg.value();\n        } else {\n            JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n            if (pann != null) {\n                name = pann.value();\n                if (pann.access() != JsonProperty.Access.AUTO) {\n                    // [databind#1037]: Allow explicitly marking as not serialized\n                    if (pann.access() == JsonProperty.Access.WRITE_ONLY) {\n                        return null;\n                    }\n                }\n            } else if (_hasAnnotation(a, JsonSerialize.class)\n                    || _hasAnnotation(a, JsonView.class)\n                    || _hasAnnotation(a, JsonRawValue.class)) {\n                name = \"\";\n            } else if (_hasAnnotation(a, JsonUnwrapped.class)) {\n                // [databind#1037]: Allow `@JsonUnwrapped` to indicate no serialization\n                return null;\n            } else {\n                return null;\n            }\n        }\n        return PropertyName.construct(name);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}