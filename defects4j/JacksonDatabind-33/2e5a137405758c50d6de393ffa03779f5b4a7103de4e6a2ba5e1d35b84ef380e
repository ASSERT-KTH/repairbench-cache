{
    "generation": "    @Override\n    public PropertyName findNameForSerialization(Annotated a)\n    {\n        String name = null;\n\n        // 1. Check for explicit name via JsonGetter\n        JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n        if (jg != null) {\n            name = jg.value();\n        } else {\n            // 2. Check for explicit name via JsonProperty\n            JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n            if (pann != null) {\n                name = pann.value();\n            } else {\n                // 3. Check for @JsonUnwrapped\n                // If present, this property itself does not have a direct name in the JSON,\n                // but its contents are flattened. This is signaled by PropertyName.UNWRAPPED.\n                if (_hasAnnotation(a, JsonUnwrapped.class)) {\n                    return PropertyName.UNWRAPPED;\n                }\n                \n                // 4. Other serialization-related annotations (JsonSerialize, JsonView, JsonRawValue)\n                // These annotations indicate that the property *is* relevant for serialization,\n                // but they do *not* define its name. In such cases, the default bean property\n                // naming strategy should apply. Returning `null` for `name` allows\n                // `PropertyName.construct(null)` to be returned, which signals \"use default name\".\n                // The problematic line `name = \"\";` from the original code (which effectively\n                // returned `PropertyName.UNWRAPPED`) is removed from this path.\n                \n                // If none of the above are found, `name` remains `null`.\n                // The final `return PropertyName.construct(name)` will then call\n                // `PropertyName.construct(null)`, which signals default naming.\n            }\n        }\n        // If `name` was set by JsonGetter or JsonProperty, construct PropertyName with it.\n        // If `name` is still null (meaning no explicit name and not @JsonUnwrapped),\n        // PropertyName.construct(null) will be returned, signaling default naming.\n        return PropertyName.construct(name);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}