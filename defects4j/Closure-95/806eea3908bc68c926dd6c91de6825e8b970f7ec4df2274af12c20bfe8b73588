{
    "generation": "/**\n * Defines a typed variable. The defining node will be annotated with the\n * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is\n * inferred.\n *\n * Slots may be any variable or any qualified name in the global scope.\n *\n * @param n the defining NAME or GETPROP node.\n * @param parent the {@code n}'s parent.\n * @param type the variable's type. It may be {@code null} if\n *     {@code inferred} is {@code true}.\n */\nvoid defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  // Only allow declarations of NAMEs and qualified names.\n  boolean shouldDeclareOnGlobalThis = false;\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(\n        parent.getType() == Token.FUNCTION ||\n        parent.getType() == Token.VAR ||\n        parent.getType() == Token.LP ||\n        parent.getType() == Token.CATCH);\n    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n        (parent.getType() == Token.VAR ||\n         parent.getType() == Token.FUNCTION);\n  } else {\n    Preconditions.checkArgument(\n        n.getType() == Token.GETPROP &&\n        (parent.getType() == Token.ASSIGN ||\n         parent.getType() == Token.EXPR_RESULT));\n  }\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  // Determine the correct scope in which to declare the slot.\n  // When a qualified name is used (e.g. ns.foo), we want to declare it\n  // in the scope where the root object (here, ns) is declared.\n  Scope scopeToDeclareIn = scope;\n  if (n.getType() == Token.GETPROP) {\n    // For a qualified name like ns.foo or ns.bar.baz, the leftmost\n    // part of the name (ns) determines the proper declaration scope.\n    Node leftMost = n;\n    while (leftMost.getType() == Token.GETPROP) {\n      leftMost = leftMost.getFirstChild();\n    }\n    // If the leftmost node is a NAME, then look it up.\n    if (leftMost != null && leftMost.getType() == Token.NAME) {\n      Var leftVar = scope.getVar(leftMost.getString());\n      // If the leftmost name is not found in the current (or inner) scopes\n      // or if it was declared in the global scope, then we declare the\n      // qualified property on the global scope.\n      if (leftVar == null || leftVar.getScope().isGlobal()) {\n        Scope current = scope;\n        while (!current.isGlobal()) {\n          current = current.getParent();\n        }\n        scopeToDeclareIn = current;\n      }\n    }\n  }\n\n  // If the variable is already declared in our chosen scope, complain.\n  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    validator.expectUndeclaredVariable(\n        sourceName, n, parent, oldVar, variableName, type);\n  } else {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName,\n            type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    // If we're in the global scope, also declare var.prototype\n    // in the scope chain.\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n            fnType.getPrototype(), compiler.getInput(sourceName),\n            /* declared iff there's an explicit supertype */\n            superClassCtor == null ||\n            superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}