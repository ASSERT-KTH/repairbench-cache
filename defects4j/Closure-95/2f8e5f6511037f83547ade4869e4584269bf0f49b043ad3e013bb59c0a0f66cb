{
    "generation": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  // Only allow declarations of NAMEs and qualified names.\n  boolean shouldDeclareOnGlobalThis = false;\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(\n        parent.getType() == Token.FUNCTION ||\n        parent.getType() == Token.VAR ||\n        parent.getType() == Token.LP ||\n        parent.getType() == Token.CATCH);\n    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n        (parent.getType() == Token.VAR ||\n         parent.getType() == Token.FUNCTION);\n  } else {\n    Preconditions.checkArgument(\n        n.getType() == Token.GETPROP &&\n        (parent.getType() == Token.ASSIGN ||\n         parent.getType() == Token.EXPR_RESULT));\n  }\n\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  // If n is a property, declare it in the scope where the root object\n  // was declared. This ensures that \"global\" namespaces get their\n  // properties hoisted to the right (often global) scope.\n  Scope scopeToDeclareIn = scope;\n  if (n.getType() == Token.GETPROP) {\n    // Climb to the root of the qualified name.\n    Node root = n;\n    while (root.getType() == Token.GETPROP) {\n      root = root.getFirstChild();\n    }\n    if (root.getType() == Token.NAME) {\n      Var rootVar = scope.getVar(root.getString());\n      if (rootVar != null) {\n        scopeToDeclareIn = rootVar.getScope();\n      }\n    }\n  }\n\n  // declared in closest scope?\n  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    validator.expectUndeclaredVariable(\n        sourceName, n, parent, oldVar, variableName, type);\n  } else {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(\n            variableName,\n            type == null\n                ? getNativeType(JSTypeNative.NO_TYPE)\n                : type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    // If we're in the global scope and the declared type is a constructor\n    // or interface, also declare its \".prototype\" property.\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superCtor = fnType.getSuperClassConstructor();\n        boolean declareProto =\n            (superCtor == null)\n            || superCtor.getInstanceType().equals(\n                   getNativeType(JSTypeNative.OBJECT_TYPE));\n        scopeToDeclareIn.declare(\n            variableName + \".prototype\",\n            n,\n            fnType.getPrototype(),\n            compiler.getInput(sourceName),\n            declareProto);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}