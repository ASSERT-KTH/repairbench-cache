{
    "generation": "    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type != null);\n\n      boolean isName = n.getType() == Token.NAME;\n      boolean isGetProp = n.getType() == Token.GETPROP;\n\n      // Only allow declarations of NAMEs and qualified names.\n      if (isName) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);\n      } else {\n        Preconditions.checkArgument(isGetProp &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));\n      }\n\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      // If n is a property, declare it in the scope where the root object appears.\n      Scope scopeToDeclareIn = scope;\n      if (isGetProp) {\n        Node root = n;\n        while (root.isGetProp()) {\n          root = root.getFirstChild();\n        }\n        if (root.isName()) {\n          String rootName = root.getString();\n          Var rootVar = scope.getVar(rootName);\n          if (rootVar != null) {\n            scopeToDeclareIn = rootVar.getScope();\n          } else {\n            scopeToDeclareIn = scope.getGlobalScope();\n          }\n        }\n      }\n\n      boolean shouldDeclareOnGlobalThis = false;\n      if (isName) {\n        shouldDeclareOnGlobalThis = scopeToDeclareIn.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);\n      } else if (isGetProp) {\n        shouldDeclareOnGlobalThis = scopeToDeclareIn.isGlobal() &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT);\n      }\n\n      // Check if already declared in the closest scope.\n      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar = scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);\n      } else {\n        if (!inferred) {\n          setDeferredType(n, type);\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = input.isExtern();\n          if (inferred) {\n            globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);\n          } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n          }\n        }\n\n        // Declare prototype in global scope if applicable.\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}