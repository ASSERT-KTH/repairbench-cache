{
    "generation": "    /**\n     * @param encoding the encoding to use for file names, use null\n     * for the platform's default encoding\n     * @param useUnicodeExtraFields whether to use InfoZIP Unicode\n     * Extra Fields (if present) to set the file names.\n     * @param allowStoredEntriesWithDataDescriptor whether the stream\n     * will try to read STORED entries that use a data descriptor\n     * @since 1.1\n     */\n    public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor) {\n        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n        this.useUnicodeExtraFields = useUnicodeExtraFields;\n        // Make sure we always use a PushbackInputStream;\n        // need to be able to push back archive signature and LFH\n        // bytes when reading the first entry.\n        // The buffer capacity is used as the pushback size.\n        in = new PushbackInputStream(inputStream, buf.capacity());\n        this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;\n        // haven't read anything so far\n        // Initialize buffer limit to 0, indicating buffer is empty.\n        // This fixes a bug where the first read() might read stale\n        // (zero) data from the buffer if it was allocated but not\n        // yet filled from the underlying stream.\n        buf.limit(0);\n    }\n",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}