{
    "generation": "    /**\n     * @param encoding the encoding to use for file names, use null\n     * for the platform's default encoding\n     * @param useUnicodeExtraFields whether to use InfoZIP Unicode\n     * Extra Fields (if present) to set the file names.\n     * @param allowStoredEntriesWithDataDescriptor whether the stream\n     * will try to read STORED entries that use a data descriptor\n     * @since 1.1\n     */\n    public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor) {\n        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n        this.useUnicodeExtraFields = useUnicodeExtraFields;\n        // The 'buf' field is typically a byte array (byte[] buf = new byte[512];).\n        // For a byte array, 'capacity()' is not a valid method.\n        // The correct way to get the size of a byte array is using its 'length' field.\n        // Using 'buf.capacity()' likely leads to an incorrect buffer size for PushbackInputStream,\n        // which can cause data corruption or incorrect reading from the stream.\n        in = new PushbackInputStream(inputStream, buf.length);\n        this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;\n        // haven't read anything so far\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}