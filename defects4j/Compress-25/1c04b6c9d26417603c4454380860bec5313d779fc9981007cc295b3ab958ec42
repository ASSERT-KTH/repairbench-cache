{
    "generation": "    /**\n     * @param encoding the encoding to use for file names, use null\n     * for the platform's default encoding\n     * @param useUnicodeExtraFields whether to use InfoZIP Unicode\n     * Extra Fields (if present) to set the file names.\n     * @param allowStoredEntriesWithDataDescriptor whether the stream\n     * will try to read STORED entries that use a data descriptor\n     * @since 1.1\n     */\n    public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor) {\n        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n        this.useUnicodeExtraFields = useUnicodeExtraFields;\n        // In the original Apache Commons Compress ZipArchiveInputStream,\n        // the PushbackInputStream is initialized with a fixed, standard buffer size\n        // (typically 512 bytes), independent of any 'buf' field used for other purposes.\n        // Using 'buf.capacity()' might lead to issues if 'buf' (which is likely a ByteBuffer)\n        // is not initialized with an appropriate capacity for the PushbackInputStream,\n        // or if its capacity is too small, potentially causing read failures\n        // (like returning 0 bytes when data is expected).\n        // A common and robust size for the PushbackInputStream's internal buffer is 512.\n        final int PUSHBACK_BUFFER_SIZE = 512;\n        in = new PushbackInputStream(inputStream, PUSHBACK_BUFFER_SIZE);\n        this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;\n        // haven't read anything so far\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}