{
    "generation": "/**\n * @param encoding the encoding to use for file names, use null\n * for the platform's default encoding\n * @param useUnicodeExtraFields whether to use InfoZIP Unicode\n * Extra Fields (if present) to set the file names.\n * @param allowStoredEntriesWithDataDescriptor whether the stream\n * will try to read STORED entries that use a data descriptor\n * @since 1.1\n */\npublic ZipArchiveInputStream(InputStream inputStream,\n                             String encoding,\n                             boolean useUnicodeExtraFields,\n                             boolean allowStoredEntriesWithDataDescriptor) {\n    zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    this.useUnicodeExtraFields = useUnicodeExtraFields;\n    this.allowStoredEntriesWithDataDescriptor =\n        allowStoredEntriesWithDataDescriptor;\n\n    // Read ahead the header signature bytes to determine entry type\n    // this is necessary for proper data descriptors behavior\n    in = new PushbackInputStream(inputStream, buf.capacity() + 4);\n    try {\n        byte[] signatureBytes = new byte[4];\n        int read = inputStream.read(signatureBytes);\n        if (read == 4) {\n            in.unread(signatureBytes, 0, 4);\n        } else if (read > 0) {\n            in.unread(signatureBytes, 0, read);\n        }\n        // else leave empty\n    } catch (IOException e) {\n        // ignore, leave stream as-is\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}