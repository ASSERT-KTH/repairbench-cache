{
    "generation": "    /**\n     * @param encoding the encoding to use for file names, use null\n     * for the platform's default encoding\n     * @param useUnicodeExtraFields whether to use InfoZIP Unicode\n     * Extra Fields (if present) to set the file names.\n     * @param allowStoredEntriesWithDataDescriptor whether the stream\n     * will try to read STORED entries that use a data descriptor\n     * @since 1.1\n     */\n    public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor) {\n        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n        this.useUnicodeExtraFields = useUnicodeExtraFields;\n        // The original Apache Commons Compress implementation uses a static constant\n        // LFH_BUFFER_SIZE directly for the PushbackInputStream's buffer size.\n        // Replacing 'buf.capacity()' with 'LFH_BUFFER_SIZE' ensures consistency\n        // with the intended buffer size and avoids any potential issues if 'buf'\n        // (likely LFH_BUF) was not reliably initialized or its capacity queried.\n        // LFH_BUFFER_SIZE is a static final int typically defined within the class.\n        in = new PushbackInputStream(inputStream, LFH_BUFFER_SIZE);\n        this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;\n        // haven't read anything so far\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}