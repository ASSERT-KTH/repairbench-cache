{
    "generation": "    /**\n     * @param encoding the encoding to use for file names, use null\n     * for the platform's default encoding\n     * @param useUnicodeExtraFields whether to use InfoZIP Unicode\n     * Extra Fields (if present) to set the file names.\n     * @param allowStoredEntriesWithDataDescriptor whether the stream\n     * will try to read STORED entries that use a data descriptor\n     * @since 1.1\n     */\n    public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor) {\n        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n        this.useUnicodeExtraFields = useUnicodeExtraFields;\n        // The PushbackInputStream buffer size should be large enough for potential\n        // pushbacks, typically related to signature detection or data descriptor\n        // reading. Using buf.capacity() (which might be the size of a large\n        // general-purpose buffer) is inappropriate and potentially problematic.\n        // Use a reasonable fixed size instead. Assume PUSHBACK_BUFSZ is defined\n        // elsewhere in the class (e.g., 512 or calculated based on max header lookahead).\n        // If PUSHBACK_BUFSZ is not defined, a suitable value like 512 should be chosen.\n        // Assuming PUSHBACK_BUFSZ is a defined constant in the class context:\n        in = new PushbackInputStream(inputStream, PUSHBACK_BUFSZ);\n        this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;\n        // haven't read anything so far\n        // Note: If PUSHBACK_BUFSZ constant doesn't exist, it should be added, e.g.:\n        // private static final int PUSHBACK_BUFSZ = 512;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}