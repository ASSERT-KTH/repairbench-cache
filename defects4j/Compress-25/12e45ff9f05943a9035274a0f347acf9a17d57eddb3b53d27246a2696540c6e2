{
    "generation": "/**\n * @param encoding the encoding to use for file names, use null\n * for the platform's default encoding\n * @param useUnicodeExtraFields whether to use InfoZIP Unicode\n * Extra Fields (if present) to set the file names.\n * @param allowStoredEntriesWithDataDescriptor whether the stream\n * will try to read STORED entries that use a data descriptor\n * @since 1.1\n */\npublic ZipArchiveInputStream(InputStream inputStream,\n                             String encoding,\n                             boolean useUnicodeExtraFields,\n                             boolean allowStoredEntriesWithDataDescriptor) {\n    zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n    this.useUnicodeExtraFields = useUnicodeExtraFields;\n    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;\n    // Prime the buffer with signature bytes in case we're at stream start\n    try {\n        byte[] signatureBuffer = new byte[4];\n        int bytesRead = inputStream.read(signatureBuffer);\n        if (bytesRead > 0) {\n            in = new PushbackInputStream(inputStream, buf.capacity());\n            in.unread(signatureBuffer, 0, bytesRead);\n        } else {\n            in = new PushbackInputStream(inputStream, buf.capacity());\n        }\n    } catch (IOException e) {\n        // fallback: just wrap the input stream without priming\n        in = new PushbackInputStream(inputStream, buf.capacity());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}