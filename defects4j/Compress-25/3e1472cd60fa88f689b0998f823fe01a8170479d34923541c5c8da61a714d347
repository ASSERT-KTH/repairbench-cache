{
    "generation": "    /**\n     * @param encoding the encoding to use for file names, use null\n     * for the platform's default encoding\n     * @param useUnicodeExtraFields whether to use InfoZIP Unicode\n     * Extra Fields (if present) to set the file names.\n     * @param allowStoredEntriesWithDataDescriptor whether the stream\n     * will try to read STORED entries that use a data descriptor\n     * @since 1.1\n     */\n    public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor) {\n        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n        this.useUnicodeExtraFields = useUnicodeExtraFields;\n        // The original code in Apache Commons Compress initializes PushbackInputStream\n        // with a fixed buffer size (typically 512, defined by BYTE_BUFFER_SIZE).\n        // Using 'buf.capacity()' here is incorrect. 'buf' is an internal ByteBuffer\n        // used for reading file data, not for the PushbackInputStream's internal buffer.\n        // If 'buf' were uninitialized, this would lead to a NullPointerException.\n        // If 'buf' was initialized with 0 capacity, or if its capacity was used\n        // incorrectly, it could lead to the observed read errors (e.g., returning 0s).\n        // Replacing 'buf.capacity()' with the standard buffer size for PushbackInputStream.\n        in = new PushbackInputStream(inputStream, 512); // Use 512, which is BYTE_BUFFER_SIZE in original\n        this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;\n        // haven't read anything so far\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}