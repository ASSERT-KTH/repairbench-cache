{
    "generation": "    /**\n     * @param encoding the encoding to use for file names, use null\n     * for the platform's default encoding\n     * @param useUnicodeExtraFields whether to use InfoZIP Unicode\n     * Extra Fields (if present) to set the file names.\n     * @param allowStoredEntriesWithDataDescriptor whether the stream\n     * will try to read STORED entries that use a data descriptor\n     * @since 1.1\n     */\n    public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor) {\n        zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n        this.useUnicodeExtraFields = useUnicodeExtraFields;\n        // The PushbackInputStream requires a sufficiently sized buffer to correctly\n        // handle ZIP stream parsing, especially when dealing with variable-length\n        // headers and data descriptors (relevant to COMPRESS-264).\n        // The value 'buf.capacity()' likely refers to another internal buffer\n        // whose capacity might not be suitable or consistently set for the\n        // PushbackInputStream. The standard and recommended buffer size for\n        // PushbackInputStream in ZipArchiveInputStream is 512 bytes.\n        in = new PushbackInputStream(inputStream, 512);\n        this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;\n        // haven't read anything so far\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}