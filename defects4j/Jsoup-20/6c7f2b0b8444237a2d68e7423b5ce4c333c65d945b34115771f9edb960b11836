{
    "generation": "    // switching the chartset midstream when a meta http-equiv tag defines the charset.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        String effectiveCharset = charsetName; // Keep track of the charset that should ultimately be used\n\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n\n            // Strip BOM from the initially decoded data for the first parse attempt to find meta\n            if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n                docData = docData.substring(1);\n            }\n\n            doc = parser.parseInput(docData, baseUri); // Initial parse to find meta charset\n            \n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                    effectiveCharset = foundCharset; // Update effective charset to the detected one\n                    byteData.rewind(); // Rewind for re-decoding with the new charset\n                    doc = null; // Force re-parsing in the final block with the new charset\n                } else {\n                    effectiveCharset = defaultCharset; // Found charset was default, or empty/null. Stick with default.\n                }\n            } else {\n                effectiveCharset = defaultCharset; // No meta tag found, stick with defaultCharset\n            }\n        } else { // charset specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            // doc will remain null, forcing decode and parse in the final block using the provided charsetName.\n            // effectiveCharset is already set to charsetName.\n        }\n\n        if (doc == null) {\n            // This block is reached if:\n            // 1. A charsetName was explicitly provided.\n            // 2. Initial charset detection found a *different* charset, requiring re-decode.\n            // In both cases, byteData needs to be decoded (or re-decoded) using the 'effectiveCharset'.\n            \n            // Decode (or re-decode) byteData into docData using the determined effectiveCharset\n            docData = Charset.forName(effectiveCharset).decode(byteData).toString();\n\n            // Strip spurious byte-order-mark if present at the start of the decoded string.\n            // This ensures the parser receives clean data.\n            if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n                docData = docData.substring(1);\n            }\n\n            doc = parser.parseInput(docData, baseUri);\n        }\n        \n        // Ensure the Document's output settings reflect the charset that was actually used for parsing.\n        doc.outputSettings().charset(effectiveCharset);\n\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}