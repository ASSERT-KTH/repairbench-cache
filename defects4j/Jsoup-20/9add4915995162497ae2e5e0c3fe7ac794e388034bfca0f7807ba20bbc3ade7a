{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    boolean isCharsetDetected = false;\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        String defaultCharset = \"UTF-8\";\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        Element meta = Jsoup.parse(docData).select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            charsetName = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n            if (charsetName != null && !charsetName.equals(defaultCharset)) {\n                byteData.rewind();\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n                isCharsetDetected = true;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // Remove possible BOM if present\n    if (docData.startsWith(\"\\ufeff\")) {\n        docData = docData.substring(1);\n    }\n\n    if (isCharsetDetected) {\n        // Re-parse with correct charset\n        Document doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n        return doc;\n    }\n\n    Document doc;\n    if (docData.startsWith(\"\\ufeff\")) {\n        docData = docData.substring(1);\n    }\n    doc = parser.parseInput(docData, baseUri);\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}