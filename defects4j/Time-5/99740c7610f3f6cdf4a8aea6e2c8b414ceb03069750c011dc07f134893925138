{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // convert all time-based fields to milliseconds\n    long millis = getMillis();\n    millis += (long)getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += (long)getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += (long)getHours()   * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += (long)getDays()    * DateTimeConstants.MILLIS_PER_DAY;\n    millis += (long)getWeeks()   * DateTimeConstants.MILLIS_PER_WEEK;\n    // build a period for the time part\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    // now normalize the year/month part\n    int years  = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        boolean supportsYears  = type.isSupported(DurationFieldType.years());\n        boolean supportsMonths = type.isSupported(DurationFieldType.months());\n        if (supportsYears && supportsMonths) {\n            // split months into years and remainder months\n            int totalYears = FieldUtils.safeAdd(years, months / 12);\n            int remMonths  = months % 12;\n            if (totalYears != 0) {\n                result = result.withYears(totalYears);\n            }\n            if (remMonths != 0) {\n                result = result.withMonths(remMonths);\n            }\n        } else if (!supportsYears && supportsMonths) {\n            // only months supported: fold years into months\n            long totalMonths = (long)years * 12 + months;\n            result = result.withMonths(FieldUtils.safeToInt(totalMonths));\n        } else if (supportsYears && !supportsMonths) {\n            // only years supported: fold whole groups of 12 months into years,\n            // remainder months cannot be represented\n            int addYears = months / 12;\n            int remMonths = months % 12;\n            if (remMonths != 0) {\n                throw new UnsupportedOperationException(\"Cannot normalize period as months are not supported\");\n            }\n            int totalYears = FieldUtils.safeAdd(years, addYears);\n            result = result.withYears(totalYears);\n        } else {\n            // neither years nor months supported\n            throw new UnsupportedOperationException(\"Period type does not support years or months\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}