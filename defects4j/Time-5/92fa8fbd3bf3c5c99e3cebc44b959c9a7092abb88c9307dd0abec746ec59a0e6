{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            boolean yearsSupported = type.isSupported(DurationFieldType.YEARS());\n            boolean monthsSupported = type.isSupported(DurationFieldType.MONTHS());\n            if (!yearsSupported && !monthsSupported) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n            int totalMonths = FieldUtils.safeAdd(years * 12, months);\n            if (yearsSupported && monthsSupported) {\n                int normalizedYears = totalMonths / 12;\n                int normalizedMonths = totalMonths % 12;\n                if (normalizedYears != 0) {\n                    result = result.withYears(normalizedYears);\n                }\n                if (normalizedMonths != 0) {\n                    result = result.withMonths(normalizedMonths);\n                }\n            } else if (monthsSupported) {\n                result = result.withMonths(totalMonths);\n            } else {\n                // Only years are supported\n                int normalizedYears = totalMonths / 12;\n                int remainder = totalMonths % 12;\n                if (remainder != 0) {\n                    throw new UnsupportedOperationException(\"Cannot represent months as the period type does not support months\");\n                }\n                if (normalizedYears != 0) {\n                    result = result.withYears(normalizedYears);\n                }\n            }\n        }\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}