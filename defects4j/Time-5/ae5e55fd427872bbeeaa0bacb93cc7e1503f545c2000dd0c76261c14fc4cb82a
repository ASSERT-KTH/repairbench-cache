{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    // Normalize the type\n    type = DateTimeUtils.getPeriodType(type);\n    // Combine all sub-day fields into milliseconds\n    long millis = getMillis();\n    millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += (long) getHours()   * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += (long) getDays()    * DateTimeConstants.MILLIS_PER_DAY;\n    millis += (long) getWeeks()   * DateTimeConstants.MILLIS_PER_WEEK;\n    // Create a period for those fields\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    // Now handle year/month normalization\n    int years  = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        boolean supportYears  = type.isSupported(DurationFieldType.years());\n        boolean supportMonths = type.isSupported(DurationFieldType.months());\n        if (supportYears && supportMonths) {\n            // Both years and months supported: split months into 0..11\n            int normYears  = FieldUtils.safeAdd(years, months / 12);\n            int normMonths = months % 12;\n            result = result.withYears(normYears);\n            result = result.withMonths(normMonths);\n        } else if (supportMonths) {\n            // Only months supported: collapse all into months\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            result = result.withMonths(totalMonths);\n        } else if (supportYears) {\n            // Only years supported: months must be exact multiples of 12\n            if (months % 12 != 0) {\n                throw new UnsupportedOperationException(\n                        \"Cannot normalize period as PeriodType does not support months\");\n            }\n            int totalYears = FieldUtils.safeAdd(years, months / 12);\n            result = result.withYears(totalYears);\n        } else {\n            // Neither supported\n            throw new UnsupportedOperationException(\n                    \"Cannot normalize period as PeriodType does not support years or months\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}