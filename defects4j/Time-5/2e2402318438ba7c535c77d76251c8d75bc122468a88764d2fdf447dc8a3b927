{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        // Calculate total millis from lower fields (weeks down)\n        // Use long to avoid intermediate overflow.\n        long millis = getMillis();  // Max value is Integer.MAX_VALUE, fits in long\n        // Use safeAdd to prevent overflow during calculation\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getSeconds(), DateTimeConstants.MILLIS_PER_SECOND));\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getMinutes(), DateTimeConstants.MILLIS_PER_MINUTE));\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getHours(), DateTimeConstants.MILLIS_PER_HOUR));\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getDays(), DateTimeConstants.MILLIS_PER_DAY));\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getWeeks(), DateTimeConstants.MILLIS_PER_WEEK));\n\n        // The constructor correctly normalizes and distributes millis\n        // across the fields supported by the type, using standard assumptions.\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        // Normalize years and months\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            // Calculate total months, ensuring safety against overflow\n            long totalMonths = FieldUtils.safeMultiply((long)years, 12);\n            totalMonths = FieldUtils.safeAdd(totalMonths, months);\n\n            boolean yearSupported = type.isSupported(DurationFieldType.years());\n            boolean monthSupported = type.isSupported(DurationFieldType.months());\n\n            if (!yearSupported && !monthSupported && totalMonths != 0) {\n                 // As per Javadoc, throw if type doesn't support years/months but the period has them.\n                throw new UnsupportedOperationException(\"PeriodType does not support fields: years and months\");\n            }\n\n            // Determine normalized years and months based on type support\n            int normYears = 0;\n            int normMonths = 0;\n\n            if (yearSupported) {\n                normYears = FieldUtils.safeToInt(totalMonths / 12);\n                normMonths = FieldUtils.safeToInt(totalMonths % 12);\n            } else {\n                // Years not supported, keep total months together\n                normYears = 0; // Years field is conceptually zero\n                // All goes into months field conceptually, check for overflow\n                normMonths = FieldUtils.safeToInt(totalMonths);\n            }\n\n            // Update the result period, respecting the type\n            // Note: result.withXxx() will throw if the field is not supported,\n            // so we must check support before calling.\n            if (yearSupported) {\n                 result = result.withYears(normYears);\n            }\n            if (monthSupported) {\n                 result = result.withMonths(normMonths);\n            }\n            // If a field (years or months) was calculated to be non-zero but is not supported\n            // by the type, its value is effectively dropped, as per type constraints.\n            // The exception is only thrown if *both* are unsupported AND the original period had non-zero years/months.\n        }\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}