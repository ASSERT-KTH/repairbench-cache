{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // Make a working copy of original fields\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // Combine time fields into milliseconds\n    long totalMillis = millis;\n    totalMillis += ((long) seconds) * DateTimeConstants.MILLIS_PER_SECOND;\n    totalMillis += ((long) minutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n    totalMillis += ((long) hours) * DateTimeConstants.MILLIS_PER_HOUR;\n    totalMillis += ((long) days) * DateTimeConstants.MILLIS_PER_DAY;\n    totalMillis += ((long) weeks) * DateTimeConstants.MILLIS_PER_WEEK;\n\n    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n    // months + years logic\n    boolean supportsYears = type.isSupported(DurationFieldType.years());\n    boolean supportsMonths = type.isSupported(DurationFieldType.months());\n\n    if ((years != 0 || months != 0)) {\n        if (!supportsYears && !supportsMonths) { \n            // neither supported: can't represent non-zero years or months\n            if (years != 0 || months != 0) {\n                throw new UnsupportedOperationException(\"Period does not support years or months\");\n            }\n        } else if (!supportsYears) {\n            // only months: convert all years into months\n            months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n            years = 0;\n            // no modulo 12 normalization because no years support\n        } else if (!supportsMonths) {\n            // only years: convert all months into years\n            years = FieldUtils.safeAdd(years, months / 12);\n            int remMonths = months % 12;\n            if (remMonths != 0) {\n                throw new UnsupportedOperationException(\"PeriodType does not support months, cannot normalize with months leftover\");\n            }\n            months = 0;\n        } else {\n            // both years and months supported\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n        }\n\n        if (supportsYears && years != 0) {\n            result = result.withYears(years);\n        }\n        if (supportsMonths && months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}