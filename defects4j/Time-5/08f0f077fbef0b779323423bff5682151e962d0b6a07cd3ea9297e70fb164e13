{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n\n        // Calculate total milliseconds from standard time-based fields.\n        // The original method correctly accumulates these into 'millis'.\n        long millis = getMillis();\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        // Create the initial result period based on accumulated milliseconds and the PeriodType.\n        // This will handle the time-based fields according to the PeriodType.\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        // Handle years and months separately as they do not have a fixed millisecond duration.\n        int years = getYears();\n        int months = getMonths();\n\n        if (years != 0 || months != 0) {\n            // Calculate total months. Using long to prevent overflow during intermediate calculations.\n            long totalMonths = (long) years * 12 + months;\n\n            boolean typeSupportsYears = type.isSupported(DurationFieldType.years());\n            boolean typeSupportsMonths = type.isSupported(DurationFieldType.months());\n\n            if (typeSupportsYears && typeSupportsMonths) {\n                // If both years and months are supported, normalize months to 0-11 and adjust years.\n                years = FieldUtils.safeToInt(totalMonths / 12);\n                months = FieldUtils.safeToInt(totalMonths % 12);\n                \n                if (years != 0) {\n                    result = result.withYears(years);\n                }\n                if (months != 0) {\n                    result = result.withMonths(months);\n                }\n            } else if (typeSupportsMonths) {\n                // If only months are supported, convert all years into months.\n                months = FieldUtils.safeToInt(totalMonths);\n                if (months != 0) {\n                    result = result.withMonths(months);\n                }\n            } else if (typeSupportsYears) {\n                // This is an unusual case (years without months). If only years are supported,\n                // convert total months to years. Any remaining months cannot be represented.\n                years = FieldUtils.safeToInt(totalMonths / 12);\n                if (totalMonths % 12 != 0) {\n                    throw new UnsupportedOperationException(\n                        \"PeriodType does not support months, and \" + (totalMonths % 12) + \" months remain after conversion to years.\"\n                    );\n                }\n                if (years != 0) {\n                    result = result.withYears(years);\n                }\n            } else {\n                // Neither years nor months are supported by the PeriodType.\n                // If there are non-zero years or months, throw an exception as per javadoc.\n                if (totalMonths != 0) {\n                    throw new UnsupportedOperationException(\n                        \"PeriodType does not support years or months and these fields are non-zero\"\n                    );\n                }\n            }\n        }\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}