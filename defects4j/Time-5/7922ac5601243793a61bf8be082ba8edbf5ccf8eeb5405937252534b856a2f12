{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // If type supports years or months, do the normal Year/Month normalization logic.\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        // years & months handled via normalization\n        if (!type.isSupported(DurationFieldType.years()) && years != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        if (!type.isSupported(DurationFieldType.months()) && months != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        // years and months normalized into years and months\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (months < 0 && years > 0) {\n            // for negative months, make months positive & decrement years\n            years = FieldUtils.safeAdd(years, -1);\n            months = FieldUtils.safeAdd(months, 12);\n        } else if (months > 0 && years < 0) {\n            years = FieldUtils.safeAdd(years, 1);\n            months = FieldUtils.safeAdd(months, -12);\n        }\n\n        // The rest normalized using standard rules (weeks/days/hours/...)\n        long totalMillis = millis;\n        totalMillis = FieldUtils.safeAdd(totalMillis, seconds * (long) DateTimeConstants.MILLIS_PER_SECOND);\n        totalMillis = FieldUtils.safeAdd(totalMillis, minutes * (long) DateTimeConstants.MILLIS_PER_MINUTE);\n        totalMillis = FieldUtils.safeAdd(totalMillis, hours * (long) DateTimeConstants.MILLIS_PER_HOUR);\n        totalMillis = FieldUtils.safeAdd(totalMillis, days * (long) DateTimeConstants.MILLIS_PER_DAY);\n        totalMillis = FieldUtils.safeAdd(totalMillis, weeks * (long) DateTimeConstants.MILLIS_PER_WEEK);\n\n        Period remainder = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n        // Now copy in normalized years/months if supported\n        Period result = remainder;\n        if (type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        }\n        return result;\n    } else if (type.isSupported(DurationFieldType.months())) {\n        // No years, only months supported: convert years into months\n        if (years != 0 && !type.isSupported(DurationFieldType.years())) {\n            if (!type.isSupported(DurationFieldType.months())) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n            months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n            years = 0;\n        }\n        if (months != 0 && !type.isSupported(DurationFieldType.months())) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        int[] values = new int[type.size()];\n        for (int i = 0; i < type.size(); i++) {\n            DurationFieldType f = type.getFieldType(i);\n            if (f == DurationFieldType.months()) {\n                values[i] = months;\n            } else if (f == DurationFieldType.weeks()) {\n                values[i] = weeks;\n            } else if (f == DurationFieldType.days()) {\n                values[i] = days;\n            } else if (f == DurationFieldType.hours()) {\n                values[i] = hours;\n            } else if (f == DurationFieldType.minutes()) {\n                values[i] = minutes;\n            } else if (f == DurationFieldType.seconds()) {\n                values[i] = seconds;\n            } else if (f == DurationFieldType.millis()) {\n                values[i] = millis;\n            } else {\n                // Not supported field\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n        }\n        return new Period(values, type);\n    } else {\n        // No years or months supported: years and months must be zero!\n        if ((years != 0 || months != 0)) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        // normalize all fields into milliseconds\n        long totalMillis = millis;\n        totalMillis = FieldUtils.safeAdd(totalMillis, seconds * (long) DateTimeConstants.MILLIS_PER_SECOND);\n        totalMillis = FieldUtils.safeAdd(totalMillis, minutes * (long) DateTimeConstants.MILLIS_PER_MINUTE);\n        totalMillis = FieldUtils.safeAdd(totalMillis, hours * (long) DateTimeConstants.MILLIS_PER_HOUR);\n        totalMillis = FieldUtils.safeAdd(totalMillis, days * (long) DateTimeConstants.MILLIS_PER_DAY);\n        totalMillis = FieldUtils.safeAdd(totalMillis, weeks * (long) DateTimeConstants.MILLIS_PER_WEEK);\n        return new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}