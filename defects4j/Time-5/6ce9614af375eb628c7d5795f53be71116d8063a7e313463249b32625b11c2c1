{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * <p>\n     * If the specified period type does not support years or months, and this period\n     * contains years or months, an exception is thrown. If the period type\n     * supports years, but not months, the months will be normalized into the years\n     * and the remaining month value discarded. If the period type supports months,\n     * but not years, the years will be normalized into the months.\n     *\n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        // Calculate total millis from lower fields (weeks down)\n        long totalMillis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        totalMillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        totalMillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        totalMillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        totalMillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        totalMillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        // Create a period with these millis, using the specified type and UTC chrono\n        // This distributes the millis correctly amongst the supported fields (weeks down)\n        // We use a temporary period object to get the normalized lower field values\n        Period tempMillisPeriod = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n        // Get original years and months\n        int origYears = getYears();\n        int origMonths = getMonths();\n        int finalYears = origYears;\n        int finalMonths = origMonths;\n\n        // Normalize years and months based on the target type\n        if (origYears != 0 || origMonths != 0) {\n            boolean hasYears = type.isSupported(DurationFieldType.years());\n            boolean hasMonths = type.isSupported(DurationFieldType.months());\n            if (!hasYears && !hasMonths) {\n                // As per Javadoc: throw if type doesn't support Y/M but period has them\n                throw new UnsupportedOperationException(\"PeriodType does not support years or months\");\n            }\n\n            if (hasYears) {\n                // Normalize months into years if years are supported\n                finalYears = FieldUtils.safeAdd(origYears, origMonths / 12);\n                finalMonths = origMonths % 12;\n                // If months are not supported by the type, the finalMonths value will be ignored by the constructor later\n            } else { // hasMonths must be true here\n                // Convert years to months if only months are supported\n                finalMonths = FieldUtils.safeAdd(origMonths, FieldUtils.safeMultiply(origYears, 12));\n                finalYears = 0; // Years field is not supported\n            }\n        }\n\n        // Get the weeks/days/time fields from the millis-based temporary period\n        int weeks = tempMillisPeriod.getWeeks();\n        int days = tempMillisPeriod.getDays();\n        int hours = tempMillisPeriod.getHours();\n        int minutes = tempMillisPeriod.getMinutes();\n        int seconds = tempMillisPeriod.getSeconds();\n        int millis = tempMillisPeriod.getMillis();\n\n        // Construct the final period with the calculated/normalized year/month\n        // and the distributed lower fields. The constructor will only store values\n        // for fields supported by the PeriodType 'type'.\n        return new Period(finalYears, finalMonths, weeks, days, hours, minutes, seconds, millis, type);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}