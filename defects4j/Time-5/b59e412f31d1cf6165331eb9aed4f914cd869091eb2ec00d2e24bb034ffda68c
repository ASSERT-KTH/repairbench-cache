{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            int totalMonths = FieldUtils.safeAdd(years * 12, months);\n            boolean yearsSupported = type.isSupported(DurationFieldType.YEARS());\n            boolean monthsSupported = type.isSupported(DurationFieldType.MONTHS());\n\n            if (yearsSupported) {\n                int newYears = totalMonths / 12;\n                int newMonths = totalMonths % 12;\n                // Adjust for negative totalMonths\n                if (newYears != 0 && newMonths != 0 && totalMonths < 0) {\n                    newYears -= 1;\n                    newMonths += 12;\n                }\n                if (newYears != 0) {\n                    result = result.withYears(newYears);\n                }\n                if (newMonths != 0) {\n                    result = result.withMonths(newMonths);\n                }\n            } else if (monthsSupported) {\n                result = result.withMonths(totalMonths);\n            } else {\n                if (totalMonths != 0) {\n                    throw new UnsupportedOperationException(\"Period contains months or years but period type does not support them\");\n                }\n            }\n        }\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}