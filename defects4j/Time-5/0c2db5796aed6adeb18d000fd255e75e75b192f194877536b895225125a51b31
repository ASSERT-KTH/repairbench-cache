{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Handle years and months specially if they are not supported in the type.\n    int years = getYears();\n    int months = getMonths();\n\n    // If type doesn't support years or months, they get converted to months\n    int totalMonths = 0;\n    if (type.isSupported(DurationFieldType.years())) {\n        // Type supports years\n        if (type.isSupported(DurationFieldType.months())) {\n            // Type supports years and months, normalize months to years+months\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n        } else {\n            // Type supports years but not months\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (months != 0) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n        }\n    } else {\n        // type does not support years\n        if (years != 0) {\n            if (type.isSupported(DurationFieldType.months())) {\n                totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n                years = 0;\n                months = 0;\n            } else {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n        } else {\n            totalMonths = months;\n            months = 0;\n        }\n    }\n\n    // Use only the supported fields\n    long millis = getMillis()\n            + ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND\n            + ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE\n            + ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR\n            + ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY\n            + ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n\n    // Start constructing the period with base fields as duration\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    // Now set years/months/totalMonths as needed\n    if (type.isSupported(DurationFieldType.years())) {\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months()) && months != 0) {\n            result = result.withMonths(months);\n        }\n    } else if (type.isSupported(DurationFieldType.months())) {\n        if (totalMonths != 0) {\n            result = result.withMonths(totalMonths);\n        }\n    } // else: neither years nor months supported, all months/years should have thrown above if non-zero\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}