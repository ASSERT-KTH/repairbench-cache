{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        // Check if the periodType supports years and/or months\n        boolean supportYears = type.isSupported(DurationFieldType.years());\n        boolean supportMonths = type.isSupported(DurationFieldType.months());\n        // disallow if years or months present but target PeriodType supports neither\n        if (!supportYears && !supportMonths && (years != 0 || months != 0)) {\n            throw new UnsupportedOperationException(\"PeriodType does not support years or months\");\n        }\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        if (supportYears && supportMonths) {\n            years = totalMonths / 12;\n            months = totalMonths % 12;\n            result = result.withYears(years).withMonths(months);\n        } else if (supportMonths) {\n            // if only months supported, express all in months\n            years = 0;\n            months = totalMonths;\n            result = result.withMonths(months);\n        } else if (supportYears) {\n            years = totalMonths / 12;\n            months = totalMonths % 12;\n            // Only set years, ignore months\n            result = result.withYears(years);\n        } else {\n            throw new UnsupportedOperationException(\"PeriodType does not support years or months\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}