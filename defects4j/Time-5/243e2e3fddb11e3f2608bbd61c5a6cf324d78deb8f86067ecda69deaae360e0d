{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Special handling if the requested type only supports months, weeks, or days\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // Check if type supports only months (and no years)\n    if (type.size() == 1 && type.isSupported(DurationFieldType.months())\n        && !type.isSupported(DurationFieldType.years())) {\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        return new Period(0, totalMonths, 0, 0, 0, 0, 0, 0, type);\n    }\n\n    // Special handling if the requested type supports months, weeks, and days\n    if (type.size() == 3 && type.isSupported(DurationFieldType.months())\n        && type.isSupported(DurationFieldType.weeks()) && type.isSupported(DurationFieldType.days())\n        && !type.isSupported(DurationFieldType.years())) {\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        // The rest is as original; weeks, days unchanged, others zeroed/off.\n        return new Period(0, totalMonths, weeks, days, 0, 0, 0, 0, type);\n    }\n\n    long totalMillis = millis;  // no overflow can happen, even with Integer.MAX_VALUEs\n    totalMillis += (((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    totalMillis += (((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    totalMillis += (((long) hours)   * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    totalMillis += (((long) days)    * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    totalMillis += (((long) weeks)   * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n    if (years != 0 || months != 0) {\n        // Check if type supports years/months, if not throw\n        if (years != 0 && !type.isSupported(DurationFieldType.years())) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        if (months != 0 && !type.isSupported(DurationFieldType.months())) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}