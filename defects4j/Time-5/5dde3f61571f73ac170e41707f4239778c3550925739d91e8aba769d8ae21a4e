{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n\n    if (years != 0 || months != 0) {\n        // check if periodType supports years or months\n        boolean supportsYears = type.isSupported(DurationFieldType.years());\n        boolean supportsMonths = type.isSupported(DurationFieldType.months());\n\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n\n        if (supportsYears && supportsMonths) {\n            years = totalMonths / 12;\n            months = totalMonths % 12;\n            // Adjust for negative months (keep months between 0 and 11 or -11 and 0)\n            if (months < 0 && years != 0) {\n                months += 12;\n                years -= 1;\n            }\n            result = result.withYears(years).withMonths(months);\n        } else if (supportsMonths) {\n            // collapse all years into months\n            months = totalMonths;\n            result = result.withMonths(months);\n        } else if (supportsYears) {\n            years = totalMonths / 12;\n            result = result.withYears(years);\n        } else {\n            if (totalMonths != 0) {\n                throw new UnsupportedOperationException(\"PeriodType does not support years or months\");\n            }\n            // else both not supported, but totalMonths == 0, do nothing\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}