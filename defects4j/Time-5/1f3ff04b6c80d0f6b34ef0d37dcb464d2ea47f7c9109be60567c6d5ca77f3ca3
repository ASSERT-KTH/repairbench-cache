{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    long millis = getMillis();\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    int years = getYears();\n    int months = getMonths();\n\n    // If either years or months exist, handle conversions\n    if (years != 0 || months != 0) {\n        // Check support\n        boolean yearsSupported = type.isSupported(DurationFieldType.years());\n        boolean monthsSupported = type.isSupported(DurationFieldType.months());\n\n        if (!yearsSupported && !monthsSupported) {\n            // Neither years nor months supported, convert all to months\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            years = 0;\n            months = totalMonths;\n        } else if (!yearsSupported && monthsSupported) {\n            // Convert years to months\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            years = 0;\n            months = totalMonths;\n        } else if (yearsSupported && !monthsSupported) {\n            // Convert months overflow into years\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = 0;\n        } else {\n            // both years and months supported, normalize months into years\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n        }\n\n        // Apply to result\n        if (yearsSupported) {\n            result = result.withYears(years);\n        } else if (years != 0) {\n            throw new UnsupportedOperationException(\"Period does not support years field but the original period contains years\");\n        }\n\n        if (monthsSupported) {\n            result = result.withMonths(months);\n        } else if (months != 0) {\n            throw new UnsupportedOperationException(\"Period does not support months field but the normalization requires months value\");\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}