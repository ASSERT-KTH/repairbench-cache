{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // Convert all time-based fields to milliseconds\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    int years = getYears();\n    int months = getMonths();\n\n    // Check if type supports years or months\n    boolean typeSupportsYears = type.isSupported(DurationFieldType.years());\n    boolean typeSupportsMonths = type.isSupported(DurationFieldType.months());\n\n    // If years or months are present, normalize accordingly\n    int totalMonths = years * 12 + months;\n\n    // If type supports years or months, we need to normalize them, else\n    // if not supported, we move them all into months\n    int normalizedYears = 0;\n    int normalizedMonths = 0;\n    if (typeSupportsYears) {\n        normalizedYears = totalMonths / 12;\n    }\n    if (typeSupportsMonths) {\n        normalizedMonths = totalMonths % 12;\n    } else if (!typeSupportsYears && !typeSupportsMonths && totalMonths != 0) {\n        // If years/months aren't supported, but there are years/months, throw exception for years/months fields\n        throw new UnsupportedOperationException(\"Period does not support years or months\");\n    } else if (!typeSupportsYears && typeSupportsMonths) {\n        // If years are not supported but months are supported, add all to months\n        normalizedMonths = totalMonths;\n    }\n\n    // Create the normalized period with zero years and months for now\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    // If type supports years, set them\n    if (typeSupportsYears && normalizedYears != 0) {\n        result = result.withYears(normalizedYears);\n    }\n    // If type supports months, set them\n    if (typeSupportsMonths && normalizedMonths != 0) {\n        result = result.withMonths(normalizedMonths);\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}