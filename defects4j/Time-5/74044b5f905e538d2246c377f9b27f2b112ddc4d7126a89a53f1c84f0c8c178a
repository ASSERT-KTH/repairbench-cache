{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            boolean supportsYears = type.isSupported(DurationFieldType.YEARS);\n            boolean supportsMonths = type.isSupported(DurationFieldType.MONTHS);\n            \n            if (!supportsYears && !supportsMonths) {\n                throw new UnsupportedOperationException(\"Period includes years or months but type does not support them\");\n            }\n            \n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            \n            if (supportsYears && supportsMonths) {\n                int normalizedYears = totalMonths / 12;\n                int normalizedMonths = totalMonths % 12;\n                if (normalizedYears != 0) {\n                    result = result.withYears(normalizedYears);\n                }\n                if (normalizedMonths != 0) {\n                    result = result.withMonths(normalizedMonths);\n                }\n            } else if (supportsMonths) {\n                int existingMonths = result.getMonths();\n                int newMonths = FieldUtils.safeAdd(existingMonths, totalMonths);\n                result = result.withMonths(newMonths);\n            } else {\n                if (totalMonths % 12 != 0) {\n                    throw new UnsupportedOperationException(\"Cannot normalize months into years as months are not supported and total months is not a multiple of 12\");\n                }\n                int normalizedYears = totalMonths / 12;\n                int existingYears = result.getYears();\n                int newYears = FieldUtils.safeAdd(existingYears, normalizedYears);\n                result = result.withYears(newYears);\n            }\n        }\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}