{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    Period result;\n\n    // If type supports only months\n    if (type.size() == 1 && type.getFieldType(0) == DurationFieldType.months()) {\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        result = new Period(0, totalMonths, 0, 0, 0, 0, 0, 0, type);\n        return result;\n    }\n\n    // If type supports months and weeks and days (special handling since we can't overflow days into months)\n    if (type.isSupported(DurationFieldType.months()) && type.isSupported(DurationFieldType.weeks()) && type.isSupported(DurationFieldType.days())\n        && !type.isSupported(DurationFieldType.years())) {\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        // weeks and days are kept as is, because days never roll into months\n        result = new Period(0, totalMonths, weeks, days, hours, minutes, seconds, millis, type);\n        return result;\n    }\n\n    // Default normalization - use duration for time fields, add years/months as appropriate\n    long totalMillis = millis;\n    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(seconds, DateTimeConstants.MILLIS_PER_SECOND));\n    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(minutes, DateTimeConstants.MILLIS_PER_MINUTE));\n    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(hours, DateTimeConstants.MILLIS_PER_HOUR));\n    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(days, DateTimeConstants.MILLIS_PER_DAY));\n    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(weeks, DateTimeConstants.MILLIS_PER_WEEK));\n    result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n    if (years != 0 || months != 0) {\n        // Only add years or months if supported by type\n        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            result = result.withYears(years).withMonths(months);\n        } else if (type.isSupported(DurationFieldType.years())) {\n            // Only years supported\n            years = FieldUtils.safeAdd(years, months / 12);\n            result = result.withYears(years);\n        } else if (type.isSupported(DurationFieldType.months())) {\n            // Only months supported\n            months = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            result = result.withMonths(months);\n        } else {\n            // Years/months not supported\n            if (years != 0) {\n                throw new UnsupportedOperationException(\"Field is not supported: years\");\n            }\n            if (months != 0) {\n                throw new UnsupportedOperationException(\"Field is not supported: months\");\n            }\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}