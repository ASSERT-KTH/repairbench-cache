{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND);\n    millis += (((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE);\n    millis += (((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR);\n    millis += (((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY);\n    millis += (((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK);\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        // Check if the period type supports years\n        if (type.hasYears()) {\n            years += months / 12;\n            months %= 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n        }\n        // Check if the period type supports months\n        if (type.hasMonths()) {\n            if (years != 0 && !type.hasYears()) {\n                throw new UnsupportedOperationException(\"Cannot normalize when period type does not support years but input has non-zero years.\");\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        } else {\n            // Months can only be set if the period type supports them\n            if (months != 0) {\n                throw new UnsupportedOperationException(\"Period type does not support months but input has non-zero months.\");\n            }\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}