{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    // Save the original year/month values, which were not converted into millis.\n    int origYears = getYears();\n    int origMonths = getMonths();\n    if (origYears != 0 || origMonths != 0) {\n        // Two cases: when both years and months are supported,\n        // perform the typical normalization (months normalized to 0-11),\n        // otherwise, if one field is not supported, merge its value into the next field.\n        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            // Normalize months so that they are in the range 0 to 11.\n            int normalizedYears = FieldUtils.safeAdd(origYears, origMonths / 12);\n            int normalizedMonths = origMonths % 12;\n            if (normalizedYears != 0) {\n                result = result.withYears(normalizedYears);\n            }\n            if (normalizedMonths != 0) {\n                result = result.withMonths(normalizedMonths);\n            }\n        }\n        else if (!type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            // When the target type does not support years, merge years into months.\n            int totalMonths = FieldUtils.safeAdd(origYears * 12, origMonths);\n            result = result.withMonths(totalMonths);\n        }\n        else if (type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {\n            // When the target type supports years but not months, the months value must divide evenly into years.\n            if (origMonths % 12 != 0) {\n                throw new UnsupportedOperationException(\"Field is not supported: months\");\n            }\n            int totalYears = FieldUtils.safeAdd(origYears, origMonths / 12);\n            result = result.withYears(totalYears);\n        }\n        else {\n            // Neither years nor months are supported but the period contains non-zero values.\n            throw new UnsupportedOperationException(\"Period does not support years or months\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}