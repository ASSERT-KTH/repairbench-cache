{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        // Combine original years and months\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        boolean supportsYears = type.isSupported(DurationFieldType.years());\n        boolean supportsMonths = type.isSupported(DurationFieldType.months());\n        if (supportsYears && supportsMonths) {\n            int newYears = totalMonths / 12;\n            int newMonths = totalMonths % 12;\n            result = result.withYears(newYears).withMonths(newMonths);\n        } else if (supportsMonths) {\n            // All into months\n            result = result.withMonths(totalMonths);\n        } else if (supportsYears) {\n            // All into years (months dropped)\n            int newYears = totalMonths / 12;\n            result = result.withYears(newYears);\n        } else if (totalMonths != 0) {\n            // Neither years nor months supported\n            throw new UnsupportedOperationException(\"PeriodType does not support years or months\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}