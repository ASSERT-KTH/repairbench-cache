{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // Calculate total milliseconds for time-based fields\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    // Create a new period from the normalized millis part\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        // Combine years and months into total months\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        int normYears = 0;\n        int normMonths = 0;\n        \n        // If the target PeriodType supports years or months\n        boolean supportYears = type.isSupported(DurationFieldType.years());\n        boolean supportMonths = type.isSupported(DurationFieldType.months());\n        \n        if (!supportYears && !supportMonths) {\n            // if both are not supported, can't represent months/years info\n            if (totalMonths != 0) {\n                throw new UnsupportedOperationException(\"Period normalization not possible as PeriodType does not support years or months\");\n            }\n            return result;\n        }\n        \n        if (supportYears && supportMonths) {\n            normYears = totalMonths / 12;\n            normMonths = totalMonths % 12;\n            // keep signs consistent\n            if (normMonths < 0 && normYears > 0) {\n                normYears -=1;\n                normMonths +=12;\n            } else if (normMonths > 0 && normYears < 0) {\n                normYears +=1;\n                normMonths -=12;\n            }\n        } else if (supportYears) {\n            // years supported but not months\n            normYears = totalMonths / 12;\n            // check if divisible?\n            if (totalMonths % 12 != 0) {\n                throw new UnsupportedOperationException(\"Period normalization impossible as months field would be lost\");\n            }\n        } else { // supportMonths only\n            normMonths = totalMonths;\n        }\n\n        if (supportYears) {\n            result = result.withYears(normYears);\n        }\n        if (supportMonths) {\n            result = result.withMonths(normMonths);\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}