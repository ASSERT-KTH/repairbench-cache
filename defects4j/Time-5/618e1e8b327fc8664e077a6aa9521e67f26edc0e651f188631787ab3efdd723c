{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();\n        int years = getYears();\n        int months = getMonths();\n\n        if (years != 0 || months != 0) {\n            int totalMonths = (years * 12) + months;\n            years = totalMonths / 12;\n            months = totalMonths % 12;\n\n            if (type.getFieldType(DurationFieldType.years) == null) {\n                years = 0;\n            }\n            if (type.getFieldType(DurationFieldType.months) == null) {\n                months = 0;\n            }\n        }\n\n        long remainingMillis = millis;\n        if (years != 0) {\n            remainingMillis -= (((long) years) * ((long) DateTimeConstants.MILLIS_PER_YEAR));\n            \n        }\n        if (months != 0) {\n            remainingMillis -= (((long) months) * ((long) DateTimeConstants.MILLIS_PER_MONTH));\n        }\n\n        long remainingSeconds = (remainingMillis / DateTimeConstants.MILLIS_PER_SECOND);\n        int days = (int) (remainingSeconds / DateTimeConstants.SECONDS_PER_DAY);\n        remainingSeconds -= ((long) days) * DateTimeConstants.SECONDS_PER_DAY;\n\n        long remainingMinutes = remainingSeconds / DateTimeConstants.SECONDS_PER_MINUTE;\n        remainingSeconds -= remainingMinutes * DateTimeConstants.SECONDS_PER_MINUTE;\n\n        int hours = (int) (remainingSeconds / DateTimeConstants.SECONDS_PER_HOUR);\n        remainingSeconds -= ((long)hours) * DateTimeConstants.SECONDS_PER_HOUR;\n        \n        int weeks = days / 7;\n        days = days % 7;\n        \n\n        Period result = new Period(\n                years,\n                months,\n                days,\n                hours,\n                (int)remainingMinutes,\n                (int)remainingSeconds,\n                weeks,\n                0,\n                type);\n        \n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}