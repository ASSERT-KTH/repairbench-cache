{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        Chronology chrono = ISOChronology.getInstanceUTC();\n\n        // Calculate total milliseconds from all fixed-duration fields (millis, seconds, minutes, hours, days, weeks).\n        // This sum will then be distributed into the result period according to the PeriodType.\n        long totalFixedMillis = 0L;\n        totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, (long) getMillis());\n        totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND);\n        totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE);\n        totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR);\n        totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, (long) getDays() * DateTimeConstants.MILLIS_PER_DAY);\n        totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, (long) getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n\n        // Create a base period from the total fixed milliseconds.\n        // This period will have its fields populated according to `type` and `chrono`,\n        // automatically handling normalization and field dropping for fixed-duration fields.\n        Period result = new Period(totalFixedMillis, type, chrono);\n\n        // Now handle years and months, which are not fixed-duration and have specific normalization rules.\n        long currentYears = getYears();\n        long currentMonths = getMonths();\n\n        // Consolidate years into months for consistent handling of negative values and easier conversion.\n        long totalMonthsValue = FieldUtils.safeAdd(currentYears * 12L, currentMonths);\n\n        if (type.isSupported(DurationFieldType.years())) {\n            // If years are supported by the PeriodType, months are normalized between 0 and 11,\n            // with excess going to years.\n            long normalizedYears = totalMonthsValue / 12L;\n            long normalizedMonths = totalMonthsValue % 12L;\n            if (normalizedMonths < 0) { // Adjust for negative modulo result (e.g., -3 instead of 9 for -15 % 12)\n                normalizedMonths += 12; \n                normalizedYears--;\n            }\n            result = result.withYears(FieldUtils.safeToInt(normalizedYears));\n            \n            if (type.isSupported(DurationFieldType.months())) {\n                result = result.withMonths(FieldUtils.safeToInt(normalizedMonths));\n            } else {\n                // This case: Years supported, but months not. Convert remaining months to milliseconds.\n                // This is an unlikely PeriodType but handled for completeness as per Joda-Time's flexible design.\n                totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, normalizedMonths * chrono.getAverageMillisPerMonth());\n                // Re-create the result to incorporate the additional milliseconds,\n                // as simple `plusMillis` only adds to the millis field, it doesn't re-distribute across fields based on type.\n                result = new Period(totalFixedMillis, type, chrono);\n            }\n        } else if (type.isSupported(DurationFieldType.months())) {\n            // If months are supported but years are not, all years are converted to months.\n            // The months field can be larger than 11.\n            result = result.withMonths(FieldUtils.safeToInt(totalMonthsValue));\n        } else {\n            // Neither years nor months are supported by the PeriodType.\n            // Convert both to milliseconds using average durations and add to totalFixedMillis.\n            // This will then be distributed among the other fields by the Period constructor.\n            long yearsMillis = currentYears * chrono.getAverageMillisPerYear();\n            long monthsMillis = currentMonths * chrono.getAverageMillisPerMonth();\n            totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, yearsMillis);\n            totalFixedMillis = FieldUtils.safeAdd(totalFixedMillis, monthsMillis);\n            // Re-create the result to incorporate the additional milliseconds.\n            result = new Period(totalFixedMillis, type, chrono);\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}