{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    boolean hasYearsField = type.isSupported(DurationFieldType.years());\n    boolean hasMonthsField = type.isSupported(DurationFieldType.months());\n    if (years != 0 || months != 0) {\n        if (!hasYearsField && !hasMonthsField) {\n            throw new UnsupportedOperationException(\"Cannot normalize period with years and months if not supported by PeriodType\");\n        }\n        // total months\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n\n        int normYears = 0;\n        int normMonths = totalMonths;\n\n        // split totalMonths into years/months if supported\n        if (hasYearsField) {\n            normYears = totalMonths / 12;\n            normMonths = totalMonths % 12;\n            // handle negative modulo result to ensure months in -11..11 interval\n            if (normMonths < 0) {\n                normYears -= 1;\n                normMonths += 12;\n            }\n        }\n\n        // assign to result only if supported\n        if (hasYearsField) {\n            result = result.withYears(normYears);\n        } else if (normYears != 0) {\n            // years value exists but not supported\n            throw new UnsupportedOperationException(\"PeriodType does not support years but period contains years\");\n        }\n\n        if (hasMonthsField) {\n            result = result.withMonths(normMonths);\n        } else if (normMonths != 0) {\n            // months value exists but not supported\n            throw new UnsupportedOperationException(\"PeriodType does not support months but period contains months\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}