{
    "generation": "import org.joda.time.DateTimeConstants;\nimport org.joda.time.DateTimeUtils;\nimport org.joda.time.DurationFieldType;\nimport org.joda.time.PeriodType;\nimport org.joda.time.chrono.ISOChronology;\nimport org.joda.time.field.FieldUtils;\n\n// NOTE: The containing class Period and other methods are omitted for brevity.\n// Assume necessary imports and class structure exist.\n\n    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized based on a 12 month year. The days field and below will be\n     * normalized independently based on fixed durations (e.g., 1 day = 24 hours).\n     * The normalization of days and below will not overflow into the months field.\n     * For example, a period of 1 year 15 months will normalize to 2 years 3 months\n     * if the period type supports years and months. If the period type only supports\n     * months, it will normalize to 27 months.\n     * A period of 1 month 40 days will normalize to 1 month, 5 weeks, 5 days if\n     * the period type supports months, weeks and days. It remains 1 month 40 days if\n     * only months and days (but not weeks) are supported.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * If the period contains non-zero values for fields (like years or months)\n     * that are NOT supported by the specified PeriodType, an exception is thrown.\n     * However, if the unsupported field's value can be entirely represented\n     * by a supported field (e.g., years converted to months when only months\n     * is supported), the conversion happens without an exception.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period, with the specified type\n     * @throws ArithmeticException if any field calculates to a value too large\n     *         or small to be represented by an int.\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support years or months.\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type); // Ensure type is not null\n\n        // Calculate total millis from weeks downwards. Check for overflow using FieldUtils.\n        long totalMillis = getMillis(); // Assign initial value first\n        // Use safeAdd and safeMultiply to prevent overflow\n        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getSeconds(), DateTimeConstants.MILLIS_PER_SECOND));\n        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getMinutes(), DateTimeConstants.MILLIS_PER_MINUTE));\n        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getHours(), DateTimeConstants.MILLIS_PER_HOUR));\n        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getDays(), DateTimeConstants.MILLIS_PER_DAY));\n        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getWeeks(), DateTimeConstants.MILLIS_PER_WEEK));\n\n        // Calculate total months from years and months. Check for overflow using FieldUtils.\n        long totalMonths = 0; // Use long to avoid intermediate overflow\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            // Calculate total months, ensuring overflow is checked\n            totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply((long)years, 12), (long)months);\n        }\n\n        // Determine normalized year and month values based on totalMonths and the target type\n        int normYears = 0;\n        int normMonths = 0;\n        if (totalMonths != 0) {\n            boolean periodHasYears = type.isSupported(DurationFieldType.years());\n            boolean periodHasMonths = type.isSupported(DurationFieldType.months());\n\n            if (periodHasYears) {\n                // If type supports years, distribute totalMonths into years and months\n                normYears = FieldUtils.safeToInt(totalMonths / 12); // Use integer division\n                normMonths = FieldUtils.safeToInt(totalMonths % 12); // Use remainder\n            } else if (periodHasMonths) {\n                // If type only supports months (not years), put all into months\n                normMonths = FieldUtils.safeToInt(totalMonths);\n            } else {\n                // Original period had non-zero years/months, but the target type supports neither.\n                // Throw exception as per Javadoc.\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n        }\n\n        // Create a temporary period using the calculated totalMillis and the target type.\n        // This constructor correctly distributes the milliseconds into the time fields\n        // (weeks, days, hours, minutes, seconds, millis) supported by the type,\n        // using standard durations (e.g., 1 day = 24 hours).\n        Period timePeriod = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n        // Construct the final period using the determined year/month values\n        // and the time field values extracted from the temporary timePeriod.\n        // The Period constructor ensures that only fields supported by the type are stored.\n        return new Period(normYears, normMonths,\n                          timePeriod.getWeeks(), timePeriod.getDays(),\n                          timePeriod.getHours(), timePeriod.getMinutes(),\n                          timePeriod.getSeconds(), timePeriod.getMillis(),\n                          type);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}