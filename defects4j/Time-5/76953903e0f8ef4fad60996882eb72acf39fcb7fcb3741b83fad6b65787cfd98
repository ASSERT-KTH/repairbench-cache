{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        int years = getYears();\n        int months = getMonths();\n        int days = getDays();\n        int weeks = getWeeks();\n        int hours = getHours();\n        int minutes = getMinutes();\n        int seconds = getSeconds();\n        \n        long totalMonths = years * 12L + months;\n        \n        millis += (((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) weeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        \n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        if (totalMonths != 0) {\n            if (!type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n\n            years = (int) (totalMonths / 12);\n            months = (int) (totalMonths % 12);\n\n            result = result.withYears(years);\n            result = result.withMonths(months);\n        }\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}