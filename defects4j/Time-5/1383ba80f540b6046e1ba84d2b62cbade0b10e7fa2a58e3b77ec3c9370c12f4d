{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        boolean yearsSupported = type.isSupported(DurationFieldType.years());\n        boolean monthsSupported = type.isSupported(DurationFieldType.months());\n        \n        // If both years and months are supported, distribute extra months into years.\n        if (yearsSupported && monthsSupported) {\n            int extraYears = months / 12;\n            int remMonths = months % 12;\n            int totalYears = FieldUtils.safeAdd(years, extraYears);\n            result = result.withYears(totalYears).withMonths(remMonths);\n            // If the extra conversion makes a field zero, then withX() will simply ignore it.\n        }\n        // If only months are supported, convert years to months.\n        else if (!yearsSupported && monthsSupported) {\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            result = result.withMonths(totalMonths);\n        }\n        // If only years are supported, try converting months to years.\n        else if (yearsSupported && !monthsSupported) {\n            // Only allow conversion if months convert evenly into years.\n            if (months % 12 != 0) {\n                throw new UnsupportedOperationException(\"Field 'months' is not supported\");\n            }\n            int totalYears = FieldUtils.safeAdd(years, months / 12);\n            result = result.withYears(totalYears);\n        }\n        // If neither years nor months are supported but this period has non-zero values for them.\n        else {\n            if (years != 0 || months != 0) {\n                throw new UnsupportedOperationException(\"Fields 'years' and 'months' are not supported\");\n            }\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}