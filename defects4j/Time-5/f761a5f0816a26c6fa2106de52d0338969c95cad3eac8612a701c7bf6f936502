{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n\n        // Check if the type supports years and months before processing them\n        boolean supportsYears = type.isSupported(DurationFieldType.years());\n        boolean supportsMonths = type.isSupported(DurationFieldType.months());\n\n        // Only process years and months if the type supports them\n        if ((years != 0 || months != 0) &&\n            (supportsYears || supportsMonths)) {\n            if (!supportsYears && !supportsMonths) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n            // If years are supported, add them; otherwise add to months\n            if (supportsYears) {\n                if (years != 0) {\n                    result = result.withYears(years);\n                }\n            } else {\n                months += years * 12;\n            }\n            // If months are supported, add them\n            if (supportsMonths) {\n                months += years * 12;  // add years as months if months are supported\n                years = 0;\n                months = FieldUtils.safeAdd(months, 0);  // just to check overflow\n                if (months != 0) {\n                    result = result.withMonths(months);\n                }\n            }\n        } else if (years != 0 || months != 0) {\n            if (!(supportsYears || supportsMonths)) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}