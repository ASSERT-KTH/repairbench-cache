{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Handle years and months specially if PeriodType does not support years/months\n    int years = getYears();\n    int months = getMonths();\n\n    boolean typeHasYears = type.isSupported(DurationFieldType.years());\n    boolean typeHasMonths = type.isSupported(DurationFieldType.months());\n\n    // If years or months are present but type does not support them,\n    // convert years to months if possible, or throw if both not supported\n    if ((years != 0 || months != 0) && (!typeHasYears || !typeHasMonths)) {\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        years = 0;\n        months = 0;\n        if (typeHasMonths) {\n            months = totalMonths;\n        } else if (typeHasYears) {\n            years = totalMonths / 12;\n            if (totalMonths % 12 != 0) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n        } else {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    } else if (years != 0 || months != 0) {\n        // Default behavior: normalize months to 0-11, overflow to years\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n    }\n\n    // Combine the remainder of the fields using milliseconds\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    // Set normalized years and months fields as appropriate for the type\n    if (typeHasYears && years != 0) {\n        result = result.withYears(years);\n    }\n    if (typeHasMonths && months != 0) {\n        result = result.withMonths(months);\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}