{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        boolean yearsSupported = type.isSupported(DurationFieldType.years());\n        boolean monthsSupported = type.isSupported(DurationFieldType.months());\n        if (yearsSupported && monthsSupported) {\n            // Normalize years and months as usual:\n            int newYears = FieldUtils.safeAdd(years, months / 12);\n            int newMonths = months % 12;\n            result = result.withYears(newYears).withMonths(newMonths);\n        } else if (monthsSupported && !yearsSupported) {\n            // Target type supports only months -- combine years into months.\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            result = result.withMonths(totalMonths);\n        } else if (yearsSupported && !monthsSupported) {\n            // Target type supports years only; months must be an exact multiple of 12.\n            if (months % 12 != 0) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n            int totalYears = FieldUtils.safeAdd(years, months / 12);\n            result = result.withYears(totalYears);\n        } else {\n            // Neither years nor months are supported.\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}