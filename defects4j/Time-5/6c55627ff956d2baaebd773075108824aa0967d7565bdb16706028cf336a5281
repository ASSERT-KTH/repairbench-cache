{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    // Check if the type supports years and months before processing them\n    boolean hasYears = getYears() != 0;\n    boolean hasMonths = getMonths() != 0;\n    if ((hasYears || hasMonths) &&\n        (!type.isSupported(DurationFieldType.years()) || !type.isSupported(DurationFieldType.months()))) {\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    }\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (type.isSupported(DurationFieldType.years()) && years != 0) {\n                result = result.withYears(years);\n            }\n            if (type.isSupported(DurationFieldType.months()) && months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n    }\n\n    // Handle fields that might not be supported by the result type\n    if (type.isSupported(DurationFieldType.weeks()) && getWeeks() != 0) {\n        result = result.withWeeks(getWeeks());\n    }\n    if (type.isSupported(DurationFieldType.days()) && getDays() != 0) {\n        result = result.withDays(getDays());\n    }\n    if (type.isSupported(DurationFieldType.hours()) && getHours() != 0) {\n        result = result.withHours(getHours());\n    }\n    if (type.isSupported(DurationFieldType.minutes()) && getMinutes() != 0) {\n        result = result.withMinutes(getMinutes());\n    }\n    if (type.isSupported(DurationFieldType.seconds()) && getSeconds() != 0) {\n        result = result.withSeconds(getSeconds());\n    }\n    if (type.isSupported(DurationFieldType.millis()) && getMillis() != 0) {\n        result = result.withMillis(getMillis());\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}