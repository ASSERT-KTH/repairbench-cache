{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // Check if the period type supports years and months if they are present\n    if ((getYears() != 0 || getMonths() != 0) &&\n        (type.getYearsDurationType() == null || type.getMonthsDurationType() == null)) {\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    }\n\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    // Handle years and months separately if they're supported\n    if (type.getYearsDurationType() != null || type.getMonthsDurationType() != null) {\n        // Create a period with just time fields first\n        Period timePeriod = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        int years = getYears();\n        int months = getMonths();\n\n        // If the period type doesn't support years or months, we'll add them to months\n        if (type.getYearsDurationType() == null) {\n            months += years * 12;\n            years = 0;\n        }\n        if (type.getMonthsDurationType() == null) {\n            // But if months aren't supported either, we have to throw\n            // (since we already checked years/months aren't present)\n            throw new IllegalStateException(); // Shouldn't happen due to earlier check\n        }\n\n        // Normalize years and months\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n\n        // Create new period with just the normalized time fields\n        Period resultTime = new Period(0, 0, 0, timePeriod.getDays(), timePeriod.getHours(),\n                                      timePeriod.getMinutes(), timePeriod.getSeconds(),\n                                      timePeriod.getMillis(), type);\n\n        // Add years and months if supported\n        if (type.getYearsDurationType() != null && years != 0) {\n            resultTime = resultTime.withYears(years);\n        }\n        if (type.getMonthsDurationType() != null && (months != 0 || years != 0)) {\n            // Add both the normalized months and any leftover from years\n            int totalMonths = months + (years != 0 && type.getYearsDurationType() == null ? (years * 12) : 0);\n            resultTime = resultTime.withMonths(FieldUtils.safeAdd(resultTime.getMonths(), totalMonths));\n        } else if (months != 0 || years != 0) {\n            // If months aren't supported but we have time to add, convert to days\n            // (This is a last resort - not ideal but preserves the time)\n            long daysFromMonths = (long)(months + years * 12) * 30L; // Approximate - not perfect but maintains the time\n            millis += daysFromMonths * DateTimeConstants.MILLIS_PER_DAY;\n            return new Period(millis, type, ISOChronology.getInstanceUTC());\n        }\n\n        return resultTime;\n    } else {\n        // If period type doesn't support years or months at all\n        if (getYears() != 0 || getMonths() != 0) {\n            // Convert years and months to approximate days and add to millis\n            long daysFromYears = (long)getYears() * 365L;\n            long daysFromMonths = (long)getMonths() * 30L; // Approximate\n            millis += (daysFromYears + daysFromMonths) * DateTimeConstants.MILLIS_PER_DAY;\n        }\n        return new Period(millis, type, ISOChronology.getInstanceUTC());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}