{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n\n        // Handle years and months first if they're present in the input period\n        int years = getYears();\n        int months = getMonths();\n        // Check if the target type supports years and months if they exist in the input\n        if ((years != 0 || months != 0) &&\n            (type.getYearsDurationType() == null || type.getMonthsDurationType() == null)) {\n            // Calculate total months including years\n            int totalMonths = (Math.abs(years) * 12) + Math.abs(months);\n            if (years < 0 || months < 0) {\n                totalMonths = -totalMonths;\n            }\n            months = totalMonths;\n            years = 0;\n        } else {\n            // Normalize years and months\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n        }\n\n        long millis = 0L;\n        // Only add time fields if they are supported by the target type\n        if (type.getDaysDurationType() != null) {\n            millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        }\n        if (type.getWeeksDurationType() != null) {\n            millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        }\n        if (type.getHoursDurationType() != null) {\n            millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        }\n        if (type.getMinutesDurationType() != null) {\n            millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        }\n        if (type.getSecondsDurationType() != null) {\n            millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        }\n        millis += getMillis();\n\n        Period result = new Period(0L, type);\n        if (type.getYearsDurationType() != null && years != 0) {\n            result = result.withYears(years);\n        }\n        if (type.getMonthsDurationType() != null && months != 0) {\n            result = result.withMonths(months);\n        }\n        if (type.getWeeksDurationType() != null && getWeeks() != 0) {\n            result = result.plusWeeks(getWeeks());\n        }\n        if (type.getDaysDurationType() != null && getDays() != 0) {\n            result = result.plusDays(getDays());\n        }\n        if (type.getHoursDurationType() != null && getHours() != 0) {\n            result = result.plusHours(getHours());\n        }\n        if (type.getMinutesDurationType() != null && getMinutes() != 0) {\n            result = result.plusMinutes(getMinutes());\n        }\n        if (type.getSecondsDurationType() != null && getSeconds() != 0) {\n            result = result.plusSeconds(getSeconds());\n        }\n        if (millis != 0L) {\n            result = result.plus(millis);\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}