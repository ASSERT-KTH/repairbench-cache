{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    // Normalize the years and months fields.\n    // Note that years and months are not converted into a fixed duration\n    // so we must incorporate them separately.\n    if (getYears() != 0 || getMonths() != 0) {\n        // Compute the total number of months represented.\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(getYears(), 12), getMonths());\n        if (type.isSupported(DurationFieldType.years())) {\n            // If the period type supports years, we split totalMonths into years and months,\n            // ensuring that the months field is between 0 and 11.\n            int normYears = totalMonths / 12;\n            int normMonths = totalMonths % 12;\n            if (normMonths < 0) {\n                normMonths += 12;\n                normYears = FieldUtils.safeAdd(normYears, -1);\n            }\n            result = result.withYears(normYears).withMonths(normMonths);\n        } else if (type.isSupported(DurationFieldType.months())) {\n            // If the period type does not support years, then roll the years into months.\n            result = result.withMonths(totalMonths);\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}