{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n\n        // Standardize years and months first, so months are 0-11 as per javadoc.\n        // This is the \"internal\" normalization (e.g., 1 year 15 months -> 2 years 3 months)\n        // This logic is adapted from Period.normalized() to ensure proper canonical form.\n        int years = getYears();\n        int months = getMonths();\n\n        if (years != 0 || months != 0) {\n            // Consolidate years into months, then normalize the total months.\n            // This handles cases like (-2 years, 15 months) correctly.\n            months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n            years = 0; // Years are now consolidated into months\n\n            if (months != 0) {\n                years = months / 12;\n                months = months % 12;\n            }\n            // If months is negative (e.g., -15 months results in -3 months),\n            // adjust it to be positive (0-11) and decrement years accordingly.\n            // Example: -1 year, -3 months becomes -2 years, 9 months.\n            if (months < 0) {\n                months += 12;\n                years--;\n            }\n        }\n\n        // Calculate total milliseconds from all time-based fields.\n        // This accumulation is done on a long to prevent overflow.\n        long millis = getMillis();\n        millis = FieldUtils.safeAdd(millis, ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND);\n        millis = FieldUtils.safeAdd(millis, ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE);\n        millis = FieldUtils.safeAdd(millis, ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR);\n        millis = FieldUtils.safeAdd(millis, ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY);\n        millis = FieldUtils.safeAdd(millis, ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK);\n\n        // Create an initial Period with the calculated milliseconds and the target PeriodType.\n        // The constructor will distribute 'millis' among the supported time fields of 'type'\n        // (milliseconds, seconds, minutes, hours, days, weeks) according to standard rules.\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        // Now, handle the years and months part, considering the target PeriodType.\n        // The original problem arose because withYears/withMonths were called directly\n        // on a Period object whose type might not support those fields.\n        // This updated logic checks for type support and performs conversions/throws exceptions as necessary.\n        if (type.isSupported(DurationFieldType.years())) {\n            // If the PeriodType supports years, we can set the normalized years directly.\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (type.isSupported(DurationFieldType.months())) {\n                // If months are also supported, set the normalized months (0-11) directly.\n                if (months != 0) {\n                    result = result.withMonths(months);\n                }\n            } else {\n                // PeriodType supports years but NOT months.\n                // As per Javadoc: \"UnsupportedOperationException if this period contains non-zero\n                // years or months but the specified period type does not support them\".\n                // Here, 'months' is already normalized to [0, 11]. If it's non-zero, it's an error.\n                if (months != 0) {\n                    throw new UnsupportedOperationException(\"PeriodType does not support months, but months are present\");\n                }\n            }\n        } else if (type.isSupported(DurationFieldType.months())) {\n            // PeriodType does NOT support years, but it DOES support months.\n            // In this case, years must be converted to months and added to the existing months.\n            // This handles cases like PeriodType.months().\n            // 'years' and 'months' here are already in their canonical form (e.g., -1 year, 3 months).\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            if (totalMonths != 0) {\n                result = result.withMonths(totalMonths);\n            }\n        } else {\n            // PeriodType supports neither years nor months.\n            // As per Javadoc, if years or months are non-zero, this is an error.\n            if (years != 0 || months != 0) {\n                throw new UnsupportedOperationException(\"PeriodType does not support years or months, but years or months are present\");\n            }\n            // If both years and months are zero, nothing to do for them.\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}