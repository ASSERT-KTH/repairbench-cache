{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        boolean supportYears = type.isSupported(DurationFieldType.years());\n        boolean supportMonths = type.isSupported(DurationFieldType.months());\n        // if the type supports neither years nor months, we cannot represent them\n        if (!supportYears && !supportMonths) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        long totalMonths = (long) years * 12 + months;\n        if (!supportYears) {\n            // only months supported: fold all years into months\n            int newMonths = FieldUtils.safeToInt(totalMonths);\n            if (newMonths != 0) {\n                result = result.withMonths(newMonths);\n            }\n        } else if (!supportMonths) {\n            // only years supported: fold months into years (remainder not allowed)\n            int newYears = FieldUtils.safeToInt(totalMonths / 12);\n            if (newYears != 0) {\n                result = result.withYears(newYears);\n            }\n            int leftover = FieldUtils.safeToInt(totalMonths % 12);\n            if (leftover != 0) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n        } else {\n            // both years and months supported: split totalMonths into years and months\n            int newYears = FieldUtils.safeToInt(totalMonths / 12);\n            int newMonths = FieldUtils.safeToInt(totalMonths % 12);\n            if (newYears != 0) {\n                result = result.withYears(newYears);\n            }\n            if (newMonths != 0) {\n                result = result.withMonths(newMonths);\n            }\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}