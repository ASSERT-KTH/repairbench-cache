{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n\n        // Step 1: Accumulate total milliseconds from fields smaller than months.\n        // These fields (millis, seconds, minutes, hours, days, weeks) have fixed standard durations.\n        long totalMillis = getMillis();\n        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getSeconds(), DateTimeConstants.MILLIS_PER_SECOND));\n        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getMinutes(), DateTimeConstants.MILLIS_PER_MINUTE));\n        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getHours(), DateTimeConstants.MILLIS_PER_HOUR));\n        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getDays(), DateTimeConstants.MILLIS_PER_DAY));\n        totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply((long) getWeeks(), DateTimeConstants.MILLIS_PER_WEEK));\n\n        int currentYears = getYears();\n        int currentMonths = getMonths();\n\n        // Step 2: Normalize years and months based on 12 months per year rule.\n        // This is the first internal normalization mentioned in the Javadoc:\n        // \"If the period contains years or months, then the months will be\n        // normalized to be between 0 and 11. ... Thus a period of 1 year 15 months will normalize to 2 years 3 months.\"\n        if (currentYears != 0 || currentMonths != 0) {\n            currentYears = FieldUtils.safeAdd(currentYears, currentMonths / 12);\n            currentMonths = currentMonths % 12;\n            // The Javadoc implies months will be 0-11, but for negative periods,\n            // currentMonths % 12 can be negative. Joda-Time's Period handles negative fields.\n        }\n\n        // Step 3: Decide how to handle years and months based on the target PeriodType's field support.\n        // The PeriodType controls how the result is split.\n        boolean targetTypeSupportsMonths = type.isSupported(DurationFieldType.months());\n\n        if (targetTypeSupportsMonths) {\n            // If the target PeriodType supports months, then years should be converted to months.\n            // This aligns with test cases like testNormalizedStandard_periodType_months1 (1Y 15M -> 27M).\n            currentMonths = FieldUtils.safeAdd(currentMonths, FieldUtils.safeMultiply(currentYears, 12));\n            currentYears = 0; // Years are now subsumed into months.\n        } else {\n            // If the target PeriodType does NOT support months, then it implicitly cannot support years\n            // (as years are a larger unit typically converted to months in this standard normalization context).\n            // If there are any non-zero years or months remaining, it's an unsupported operation.\n            // This aligns with the Javadoc: \"throws UnsupportedOperationException if this period contains non-zero\n            // years or months but the specified period type does not support them\".\n            if (currentYears != 0 || currentMonths != 0) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n            // If currentYears and currentMonths are both zero, nothing to do here.\n        }\n\n        // Step 4: Create the result Period.\n        // Start by creating a period from the accumulated milliseconds and the target type.\n        Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n        // Step 5: Apply the normalized/converted years and months to the result.\n        // These fields are applied separately because they are not directly handled by the\n        // Period(long millis, PeriodType type, Chronology chrono) constructor without loss of precision,\n        // and their handling depends on the normalization rules of this method.\n        if (currentYears != 0) {\n            // This branch will only be taken if the PeriodType supports years but not months\n            // (a very rare or perhaps non-existent standard PeriodType, as months is usually included if years are).\n            // In the fixed logic, if targetTypeSupportsMonths is true, currentYears becomes 0.\n            // If targetTypeSupportsMonths is false, an exception is thrown if years/months are non-zero.\n            // So, for valid periods, currentYears will be 0 here.\n            result = result.withYears(currentYears);\n        }\n        if (currentMonths != 0) {\n            result = result.withMonths(currentMonths);\n        }\n        \n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}