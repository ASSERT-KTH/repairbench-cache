{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        int normalizedYears = 0;\n        int normalizedMonths = totalMonths;\n        // Normalize only if both years AND months are supported, else just merge\n        boolean yearsSupported = type.isSupported(DurationFieldType.years());\n        boolean monthsSupported = type.isSupported(DurationFieldType.months());\n        if (!yearsSupported && !monthsSupported) {\n            if (totalMonths != 0) {\n                throw new UnsupportedOperationException(\"Period does not support years or months\");\n            }\n        } else if (yearsSupported && monthsSupported) {\n            normalizedYears = totalMonths / 12;\n            normalizedMonths = totalMonths % 12;\n        } else if (yearsSupported) {  // only years supported\n            normalizedYears = totalMonths / 12;\n            normalizedMonths = 0;\n        } else if (monthsSupported) { // only months supported\n            normalizedYears = 0;\n            normalizedMonths = totalMonths;\n        }\n        if (yearsSupported && normalizedYears != 0) {\n            result = result.withYears(normalizedYears);\n        }\n        if (monthsSupported && normalizedMonths != 0) {\n            result = result.withMonths(normalizedMonths);\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}