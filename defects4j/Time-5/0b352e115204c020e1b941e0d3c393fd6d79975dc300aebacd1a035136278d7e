{
    "generation": "import org.joda.time.DateTimeConstants;\nimport org.joda.time.DateTimeUtils;\nimport org.joda.time.DurationFieldType;\nimport org.joda.time.Period;\nimport org.joda.time.PeriodType;\nimport org.joda.time.chrono.ISOChronology;\nimport org.joda.time.field.FieldUtils;\n\n    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        // Calculate total milliseconds from weeks down to millis.\n        // Overflow is handled by using longs for intermediate calculations.\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        \n        // Create a preliminary result period with the time fields normalized\n        // according to the specified PeriodType. This constructor handles the\n        // distribution of millis into weeks, days, hours, etc. based on the type.\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        \n        // Normalize the year and month fields separately and add them to the result,\n        // respecting the limitations of the specified PeriodType.\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            // Calculate the total number of months represented by the years and months fields.\n            long totalMonths = FieldUtils.safeAdd((long) years * 12, months);\n            \n            // Distribute totalMonths into the result period's year/month fields\n            // based on the PeriodType's supported fields.\n            if (type.isSupported(DurationFieldType.years())) {\n                int normYears = FieldUtils.safeToInt(totalMonths / 12);\n                result = result.withYears(normYears); // Set years field if supported\n                // The remaining months are the modulus.\n                int normMonths = FieldUtils.safeToInt(totalMonths % 12);\n                // Check if the PeriodType also supports months before setting.\n                if (type.isSupported(DurationFieldType.months())) {\n                     result = result.withMonths(normMonths); // Set months field if supported\n                } else {\n                    // If months field is not supported, the remaining months cannot be represented.\n                    // If normMonths is non-zero, this implies loss of information according to the type.\n                    if (normMonths != 0) {\n                        // This situation (years supported, months not, but normMonths != 0) might warrant\n                        // an exception depending on desired behavior for custom types, but currently\n                        // we adhere strictly to the type's supported fields.\n                    }\n                }\n            } else if (type.isSupported(DurationFieldType.months())) {\n                // If years are not supported, but months are, convert the entire year/month\n                // duration (totalMonths) into the months field.\n                int normMonths = FieldUtils.safeToInt(totalMonths);\n                result = result.withMonths(normMonths);\n            } else {\n                // If neither years nor months are supported by the target type,\n                // and the original period had non-zero years or months (totalMonths != 0),\n                // then the period cannot be represented in the requested type.\n                if (totalMonths != 0) {\n                    throw new UnsupportedOperationException(\n                        \"Cannot convert to PeriodType that does not support Years or Months\");\n                }\n                // If totalMonths is zero, no changes needed for year/month fields.\n            }\n        }\n        \n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}