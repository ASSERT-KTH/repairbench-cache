{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // Check if type supports years/months if necessary\n    int years = getYears();\n    int months = getMonths();\n\n    boolean typeHasYears = type.isSupported(DurationFieldType.years());\n    boolean typeHasMonths = type.isSupported(DurationFieldType.months());\n\n    if ((years != 0 && !typeHasYears) || (months != 0 && !typeHasMonths)) {\n        // If years or months are present but period type does not support them,\n        // move both years and months into months if type supports months.\n        if (typeHasMonths) {\n            // monthsValue = years * 12 + months\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            years = 0;\n            months = totalMonths;\n        } else {\n            // Otherwise, we cannot support years or months at all.\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    // Now set years/months if the type supports them\n    if (typeHasYears && typeHasMonths) {\n        // Distribute months >=12 into years\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    } else if (typeHasMonths && !typeHasYears) {\n        // Just set the (possibly negative) total months to months field\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    } else if (typeHasYears && !typeHasMonths) {\n        // Move months into years, conversion by division\n        years = FieldUtils.safeAdd(years, months / 12);\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n    }\n    // If neither is supported, nothing to do (error thrown earlier if non-zero input)\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}