{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // Calculate monthsFields = years*12 + months if supported by period type\n    if (type.isSupported(DurationFieldType.years()) == false && type.isSupported(DurationFieldType.months())) {\n        long totalMonths = ((long) years) * 12L + (long) months;\n        // If type supports weeks, merge them down like weeks/days\n        // day/week reduction will be further handled below\n        years = 0;\n        months = FieldUtils.safeToInt(totalMonths);\n    } else if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        years = totalMonths / 12;\n        months = totalMonths % 12;\n        // Negative value handling for months field\n        if (months < 0 && years > 0) {\n            years--;\n            months += 12;\n        } else if (months > 0 && years < 0) {\n            years++;\n            months -= 12;\n        }\n    } else if (!type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {\n        if (years != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        if (months != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        years = 0;\n        months = 0;\n    } else if (type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {\n        if (months != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        // years is ok\n    }\n\n    // Now weeks/days/hours/mins/secs/ms get pushed \"down\" into ms and reborn from reference instant\n    long totalMillis = millis;\n    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(seconds, DateTimeConstants.MILLIS_PER_SECOND));\n    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(minutes, DateTimeConstants.MILLIS_PER_MINUTE));\n    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(hours, DateTimeConstants.MILLIS_PER_HOUR));\n    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(days, DateTimeConstants.MILLIS_PER_DAY));\n    totalMillis = FieldUtils.safeAdd(totalMillis, FieldUtils.safeMultiply(weeks, DateTimeConstants.MILLIS_PER_WEEK));\n\n    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n    // Set years/months if type supports them\n    if (type.isSupported(DurationFieldType.years())) {\n        result = result.withYears(years);\n    }\n    if (type.isSupported(DurationFieldType.months())) {\n        result = result.withMonths(months);\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}