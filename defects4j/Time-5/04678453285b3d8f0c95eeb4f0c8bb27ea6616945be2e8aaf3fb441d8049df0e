{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    Period result = new Period(0L, type, ISOChronology.getInstanceUTC());\n\n    // Handle time fields\n    if (type.isSupported(DurationFieldType.millis())) {\n        result = result.plus(millis);\n    }\n\n    // Handle days\n    if (type.isSupported(DurationFieldType.days())) {\n        result = result.withDays(getDays());\n        result = result.withWeeks(getWeeks());\n    } else if (type.isSupported(DurationFieldType.weeks())) {\n        // If days aren't supported but weeks are, convert days to weeks\n        int totalDays = getDays() + getWeeks() * 7;\n        result = result.plusWeeks(totalDays / 7);\n        // But we can't add the remaining days since days aren't supported\n    }\n\n    // Handle hours, minutes, seconds\n    if (type.isSupported(DurationFieldType.hours())) {\n        result = result.withHours(getHours());\n    }\n    if (type.isSupported(DurationFieldType.minutes())) {\n        result = result.withMinutes(getMinutes());\n    }\n    if (type.isSupported(DurationFieldType.seconds())) {\n        result = result.withSeconds(getSeconds());\n    }\n\n    // Handle months and years\n    int years = getYears();\n    int months = getMonths();\n\n    if (years != 0 || months != 0) {\n        if (!type.isSupported(DurationFieldType.years()) && years != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        if (!type.isSupported(DurationFieldType.months()) && months != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n\n        if (type.isSupported(DurationFieldType.years()) && years != 0) {\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months()) && months != 0) {\n            result = result.plusMonths(months);\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}