{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // If 'type' does not support years or months, accumulate years and months so they're merged as months,\n    // otherwise preserve them in their original fields\n    boolean hasYears = type.isSupported(DurationFieldType.years());\n    boolean hasMonths = type.isSupported(DurationFieldType.months());\n\n    int years = getYears();\n    int months = getMonths();\n    int totalMonths = 0;\n    if (!hasYears && !hasMonths && (years != 0 || months != 0)) {\n        throw new UnsupportedOperationException(\"PeriodType does not support years or months but period contains non-zero years or months\");\n    }\n\n    // if type doesn't support years but supports months, merge all years into months\n    if (!hasYears && hasMonths) {\n        totalMonths = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n        years = 0;\n        months = 0;\n    } else if (hasYears) {\n        // normalize months only if years are supported\n        int normYears = FieldUtils.safeAdd(years, months / 12);\n        int normMonths = months % 12;\n        // handle negatives for normMonths (keep them between -11 and 11)\n        if (normMonths < 0 && years > 0) {\n            normYears -= 1;\n            normMonths += 12;\n        } else if (normMonths < 0 && years < 0) {\n            normYears += 1;\n            normMonths -= 12;\n        }\n        years = normYears;\n        months = normMonths;\n    } else if (!hasYears && !hasMonths) {\n        // neither supported, checked above, unreachable here.\n    }\n\n    // Calculate millis for time fields\n    long millis = getMillis();\n    millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getSeconds(), (long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getMinutes(), (long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getHours(), (long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getDays(), (long) DateTimeConstants.MILLIS_PER_DAY));\n    millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getWeeks(), (long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    // Compose new period for the non-year/month fields in 'type'\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    // Place months (if years not present)\n    if (!hasYears && hasMonths && totalMonths != 0) {\n        result = result.withMonths(totalMonths);\n    } else {\n        if (hasYears && years != 0) {\n            result = result.withYears(years);\n        }\n        if (hasMonths && months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}