{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        // Check if the requested period type supports years and months\n        boolean hasYears = type.getIndexedField(DurationFieldType.years()) != null;\n        boolean hasMonths = type.getIndexedField(DurationFieldType.months()) != null;\n\n        if (getYears() != 0 && !hasYears) {\n            throw new UnsupportedOperationException(\"Period does not support years\");\n        }\n        if (getMonths() != 0 && !hasMonths) {\n            throw new UnsupportedOperationException(\"Period does not support months\");\n        }\n\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            if (!hasYears) {\n                throw new UnsupportedOperationException(\"Field is not supported; years\");\n            }\n            if (!hasMonths) {\n                throw new UnsupportedOperationException(\"Field is not supported; months\");\n            }\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n\n        // Handle other fields if they exist in the type\n        if (type.isSupported(DurationFieldType.weeks())) {\n            result = result.withWeeks(getWeeks());\n        }\n        if (type.isSupported(DurationFieldType.days())) {\n            result = result.withDays(getDays());\n        }\n        if (type.isSupported(DurationFieldType.hours())) {\n            result = result.withHours(getHours());\n        }\n        if (type.isSupported(DurationFieldType.minutes())) {\n            result = result.withMinutes(getMinutes());\n        }\n        if (type.isSupported(DurationFieldType.seconds())) {\n            result = result.withSeconds(getSeconds());\n        }\n        if (type.isSupported(DurationFieldType.millis())) {\n            result = result.withMillis((int) getMillis());\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}