{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // Sum the milliseconds of all fields below months\n    long millis = getMillis();\n    millis += (long)getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += (long)getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += (long)getHours()   * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += (long)getDays()    * DateTimeConstants.MILLIS_PER_DAY;\n    millis += (long)getWeeks()   * DateTimeConstants.MILLIS_PER_WEEK;\n    // Build a period for only the time/weeks/days part\n    PeriodType timeType = type.withYearsRemoved().withMonthsRemoved();\n    Period timePart = new Period(millis, timeType, ISOChronology.getInstanceUTC());\n    // Start from zero of the requested type, then add the normalized time part\n    Period result = new Period(0L, type, ISOChronology.getInstanceUTC())\n                            .plus(timePart);\n    // Now merge in the original years/months, normalizing as required\n    int years  = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        boolean canYear  = type.isSupported(DurationFieldType.years());\n        boolean canMonth = type.isSupported(DurationFieldType.months());\n        if (canYear && canMonth) {\n            // Normalize months into years\n            years  = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        } else if (!canYear && canMonth) {\n            // Convert all years+months into months\n            int totalMonths = FieldUtils.safeAdd(\n                FieldUtils.safeMultiply(years, 12),\n                months\n            );\n            result = result.withMonths(totalMonths);\n        } else if (canYear && !canMonth) {\n            // Convert all months into years (drop leftover months)\n            int totalYears = FieldUtils.safeAdd(years, months / 12);\n            result = result.withYears(totalYears);\n        } else {\n            // Neither years nor months supported\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}