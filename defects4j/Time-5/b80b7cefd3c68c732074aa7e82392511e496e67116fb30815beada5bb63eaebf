{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11 if the result supports years.\n     * The days field and below will be normalized as necessary, however this\n     * will not overflow into the months field. Thus a period of 1 year 15 months\n     * will normally normalize to 2 years 3 months. However, if the period type\n     * does not support years (eg. `PeriodType.months()`) then 1 year 15 months\n     * will normalize to 27 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        \n        // Calculate total milliseconds from weeks downwards.\n        // Use long to prevent intermediate overflow.\n        long totalMillis = getMillis();  // Start with millis field\n        // SafeAdd ensures no intermediate overflow, but final totalMillis can still exceed Long.MAX_VALUE\n        // However, the Period constructor below handles this by calculating fields from the totalMillis.\n        totalMillis = FieldUtils.safeAdd(totalMillis, ((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        totalMillis = FieldUtils.safeAdd(totalMillis, ((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        totalMillis = FieldUtils.safeAdd(totalMillis, ((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        totalMillis = FieldUtils.safeAdd(totalMillis, ((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        totalMillis = FieldUtils.safeAdd(totalMillis, ((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        \n        // Create a base period with the normalized time fields distributed according to the target type.\n        // ISOChronology.getInstanceUTC() provides the standard definitions for day, hour, etc.\n        Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n        // Normalize years and months and add them to the result, respecting the target type.\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            // Calculate total months, using long to prevent potential overflow before normalization\n            long totalMonthsLong = FieldUtils.safeAdd(((long) years) * 12L, (long) months);\n\n            boolean hasYears = type.isSupported(DurationFieldType.years());\n            boolean hasMonths = type.isSupported(DurationFieldType.months());\n\n            // Check if the type supports the fields needed to store the year/month part.\n            // As per Javadoc, throw if input has Y/M but type supports neither.\n            if (!hasYears && !hasMonths) {\n                 throw new UnsupportedOperationException(\"Cannot convert period to PeriodType that does not support years or months\");\n            }\n\n            if (hasYears) {\n                // Normalize into years and months if the type supports years\n                int normYears = FieldUtils.safeToInt(totalMonthsLong / 12);\n                // Add the normalized years to the result (potentially overwriting value from millis)\n                result = result.withYears(normYears); \n                \n                // If months are also supported, set the remainder months\n                if (hasMonths) {\n                    int normMonths = FieldUtils.safeToInt(totalMonthsLong % 12);\n                     // Add the normalized months to the result (potentially overwriting value from millis)\n                    result = result.withMonths(normMonths);\n                }\n                // If months are not supported by the type, the remainder (totalMonthsLong % 12) is discarded.\n            } else { \n                // Years field is not supported, but months field is (due to earlier check).\n                // Put the entire value into months.\n                int normMonths = FieldUtils.safeToInt(totalMonthsLong);\n                 // Add the total months to the result (potentially overwriting value from millis)\n                result = result.withMonths(normMonths);\n            }\n        }\n        \n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}