{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int originalYears = getYears();\n    int originalMonths = getMonths();\n    if (originalYears != 0 || originalMonths != 0) {\n        int years = FieldUtils.safeAdd(originalYears, originalMonths / 12);\n        int months = originalMonths % 12;\n\n        int totalMonths = months;\n\n        if (type.isSupported(DurationFieldType.years())) {\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n        } else {\n            totalMonths = FieldUtils.safeAdd(totalMonths, FieldUtils.safeMultiply(years, 12));\n        }\n\n        if (totalMonths != 0) {\n            if (type.isSupported(DurationFieldType.months())) {\n                result = result.withMonths(totalMonths);\n            } else {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}