{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n\n        // Calculate milliseconds from lower-order fields (weeks, days, hours, minutes, seconds, millis).\n        // These fields are independent of years/months in the standard normalization.\n        long lowerOrderMillis = getMillis();\n        lowerOrderMillis = FieldUtils.safeAdd(lowerOrderMillis, ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND);\n        lowerOrderMillis = FieldUtils.safeAdd(lowerOrderMillis, ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE);\n        lowerOrderMillis = FieldUtils.safeAdd(lowerOrderMillis, ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR);\n        lowerOrderMillis = FieldUtils.safeAdd(lowerOrderMillis, ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY);\n        lowerOrderMillis = FieldUtils.safeAdd(lowerOrderMillis, ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK);\n\n        // Create an initial Period object from the lower-order milliseconds.\n        // This will distribute the millis into supported fields of 'type'.\n        Period result = new Period(lowerOrderMillis, type, ISOChronology.getInstanceUTC());\n\n        // Handle years and months separately as per standard normalization rules.\n        // Years and months are not converted to milliseconds.\n        int originalYears = getYears();\n        int originalMonths = getMonths();\n\n        if (originalYears != 0 || originalMonths != 0) {\n            int normalizedYears = 0;\n            int normalizedMonths = 0;\n\n            // Determine how to normalize years and months based on the target PeriodType.\n            if (type.isSupported(DurationFieldType.months())) {\n                // If the PeriodType supports months, we can consolidate years into months.\n                long totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(originalYears, 12), originalMonths);\n\n                if (type.isSupported(DurationFieldType.years())) {\n                    // If PeriodType supports both years and months, split totalMonths into\n                    // normalized years and months (months 0-11).\n                    normalizedYears = (int) (totalMonths / 12);\n                    normalizedMonths = (int) (totalMonths % 12);\n                } else {\n                    // If PeriodType supports months but not years, convert all to months.\n                    // Years field effectively becomes zero in the result, as its value is rolled into months.\n                    normalizedYears = 0;\n                    // The cast to int will throw ArithmeticException if totalMonths exceeds int range,\n                    // which is the expected behavior for \"field too large to be represented\".\n                    normalizedMonths = (int) totalMonths;\n                }\n            } else {\n                // If PeriodType does NOT support months (e.g., PeriodType.days()),\n                // then years cannot be converted to months, and months cannot be stored.\n                // In this case, any non-zero originalYears or originalMonths\n                // must lead to an UnsupportedOperationException if applied.\n                // We keep them as their original values, and the subsequent `withYears`/`withMonths`\n                // calls will throw the UOE if the field is not supported and the value is non-zero.\n                normalizedYears = originalYears;\n                normalizedMonths = originalMonths;\n            }\n\n            // Apply the normalized (or original, if not convertible) years and months to the result.\n            // These calls will throw UnsupportedOperationException if the field is not supported\n            // by the PeriodType and the value is non-zero.\n            if (normalizedYears != 0) {\n                result = result.withYears(normalizedYears);\n            }\n            if (normalizedMonths != 0) {\n                result = result.withMonths(normalizedMonths);\n            }\n        }\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}