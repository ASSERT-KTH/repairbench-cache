{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Check if years or months are not supported in given PeriodType, and throw if values are nonzero.\n    int years = getYears();\n    int months = getMonths();\n    boolean typeSupportsYears = type.isSupported(DurationFieldType.years());\n    boolean typeSupportsMonths = type.isSupported(DurationFieldType.months());\n\n    if ((years != 0 && !typeSupportsYears) || (months != 0 && !typeSupportsMonths)) {\n        // Instead of splitting years/months into months (as per periodType),\n        // just convert all year and month values to months and place into months if months is supported\n        if (typeSupportsMonths) {\n            // Convert years to months and add to months field\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            // Build a period with just months\n            Period result = new Period(0, totalMonths, 0, 0, 0, 0, 0, 0, type);\n            // Add rest of fields as appropriate\n            if (type.isSupported(DurationFieldType.weeks())) {\n                result = result.withWeeks(getWeeks());\n            }\n            if (type.isSupported(DurationFieldType.days())) {\n                result = result.withDays(getDays());\n            }\n            if (type.isSupported(DurationFieldType.hours())) {\n                result = result.withHours(getHours());\n            }\n            if (type.isSupported(DurationFieldType.minutes())) {\n                result = result.withMinutes(getMinutes());\n            }\n            if (type.isSupported(DurationFieldType.seconds())) {\n                result = result.withSeconds(getSeconds());\n            }\n            if (type.isSupported(DurationFieldType.millis())) {\n                result = result.withMillis(getMillis());\n            }\n            return result.normalizedStandard(type); // For week/days/hours normalization\n        } else {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    if (typeSupportsYears || typeSupportsMonths) {\n        if (years != 0 || months != 0) {\n            int yearsToSet = years;\n            int monthsToSet = months;\n            if (typeSupportsYears && typeSupportsMonths) {\n                yearsToSet = FieldUtils.safeAdd(years, months / 12);\n                monthsToSet = months % 12;\n            }\n            if (typeSupportsYears && yearsToSet != 0) {\n                result = result.withYears(yearsToSet);\n            }\n            if (typeSupportsMonths && monthsToSet != 0) {\n                result = result.withMonths(monthsToSet);\n            }\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}