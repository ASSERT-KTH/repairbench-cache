{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     *\n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        // First create a period with just the time fields\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        int years = getYears();\n        int months = getMonths();\n\n        if (years != 0 || months != 0) {\n            // Check if the period type supports years and months\n            if (!type.isSupported(DurationFieldType.years())) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n            if (!type.isSupported(DurationFieldType.months())) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n\n        // Now add the remaining fields that weren't handled by the millis conversion\n        // But first check if the period type supports each field\n\n        // Handle weeks (which weren't properly handled in the millis conversion when type doesn't support them)\n        if (getWeeks() != 0 && type.isSupported(DurationFieldType.weeks())) {\n            result = result.withWeeks(getWeeks());\n        }\n\n        // Handle days (which were converted to millis, but we need to ensure consistency)\n        if (getDays() != 0 && type.isSupported(DurationFieldType.days())) {\n            // The days were converted to millis, but if weeks are supported, they would have been handled above\n            // So we need to re-add the days\n            int daysToAdd = getDays();\n            if (type.isSupported(DurationFieldType.weeks())) {\n                // If weeks are supported, we need to split days into weeks and remaining days\n                long totalDays = getDays();\n                totalDays += getWeeks() * 7L;  // convert weeks to days\n                int fullWeeks = (int) (totalDays / 7);\n                int remainingDays = (int) (totalDays % 7);\n                // But we already added weeks above, so we need to adjust\n                // It's better to recalculate everything\n                long totalMillis = millis;\n                // But this is getting complicated. Maybe better to create a new approach.\n\n                // Alternative approach: normalize the period first, then convert to target type\n                // Since years/months are already handled, we need to properly normalize days/weeks\n                long daysTotal = getDays() + getWeeks() * 7L;\n                long weeks = daysTotal / 7;\n                long remainderDays = daysTotal % 7;\n\n                if (weeks != 0 && type.isSupported(DurationFieldType.weeks())) {\n                    result = result.withWeeks((int) weeks);\n                } else if (type.isSupported(DurationFieldType.days())) {\n                    // if weeks aren't supported, add all days\n                    result = result.plusDays((int) (weeks * 7 + remainderDays));\n                }\n\n                if (remainderDays != 0 && type.isSupported(DurationFieldType.days())) {\n                    result = result.plusDays((int) remainderDays);\n                }\n            } else {\n                result = result.plusDays(getDays());\n            }\n        } else if (type.isSupported(DurationFieldType.days())) {\n            // If weeks aren't supported, the original millis approach didn't properly account for days\n            result = result.plusDays(getDays());\n        }\n\n        // Handle other fields if they weren't included in the millis conversion\n        // (This is a bit messy because we converted everything to millis initially)\n        // For a better approach, we might want to create the period differently\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}