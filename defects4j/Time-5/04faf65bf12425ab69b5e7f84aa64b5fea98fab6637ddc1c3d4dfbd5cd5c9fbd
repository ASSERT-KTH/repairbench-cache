{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // Convert all time fields to milliseconds\n    long millis = getMillis();\n    millis += (long)getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += (long)getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += (long)getHours()   * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += (long)getDays()    * DateTimeConstants.MILLIS_PER_DAY;\n    millis += (long)getWeeks()   * DateTimeConstants.MILLIS_PER_WEEK;\n    // Build a period for the time part only\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    // Now handle years and months\n    int years  = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        boolean supportsYears  = type.isSupported(DurationFieldType.years());\n        boolean supportsMonths = type.isSupported(DurationFieldType.months());\n        if (!supportsYears && !supportsMonths) {\n            throw new UnsupportedOperationException(\n                \"PeriodType does not support years or months\");\n        }\n        int newYears  = 0;\n        int newMonths = 0;\n        if (supportsYears && supportsMonths) {\n            // both fields supported: split months into years and remainder\n            newYears  = FieldUtils.safeAdd(years, months / 12);\n            newMonths = months % 12;\n        } else if (supportsYears) {\n            // only years supported: convert whole months into years (must be exact)\n            newYears = FieldUtils.safeAdd(years, months / 12);\n            int rem = months % 12;\n            if (rem != 0) {\n                throw new UnsupportedOperationException(\n                    \"Cannot normalize months into years for this PeriodType\");\n            }\n        } else {\n            // only months supported: convert all years into months\n            newMonths = FieldUtils.safeAdd(years * 12, months);\n        }\n        if (supportsYears) {\n            result = result.withYears(newYears);\n        }\n        if (supportsMonths) {\n            result = result.withMonths(newMonths);\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}