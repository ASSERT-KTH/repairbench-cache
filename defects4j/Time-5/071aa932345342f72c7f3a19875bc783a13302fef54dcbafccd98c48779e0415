{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        // If both years and months are supported, normalize so that months is in 0..11.\n        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            int normYears = totalMonths / 12;\n            int normMonths = totalMonths % 12;\n            if (normMonths < 0) {\n                normMonths += 12;\n                normYears = FieldUtils.safeAdd(normYears, -1);\n            }\n            result = result.withYears(normYears);\n            result = result.withMonths(normMonths);\n        }\n        // If only months are supported, merge years into months.\n        else if (type.isSupported(DurationFieldType.months())) {\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            result = result.withMonths(totalMonths);\n        }\n        // If only years are supported, ensure that months can be converted exactly.\n        else if (type.isSupported(DurationFieldType.years())) {\n            if (months % 12 != 0) {\n                throw new UnsupportedOperationException(\"Field 'months' is not supported\");\n            }\n            int totalYears = FieldUtils.safeAdd(years, months / 12);\n            result = result.withYears(totalYears);\n        }\n        // Otherwise, neither years nor months are supported.\n        else {\n            throw new UnsupportedOperationException(\"Period does not support years or months\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}