{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // Verify that unsupported fields are not non-zero\n    if (years != 0 && type.isSupported(DurationFieldType.years()) == false) {\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    }\n    if (months != 0 && type.isSupported(DurationFieldType.months()) == false) {\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    }\n    if (weeks != 0 && type.isSupported(DurationFieldType.weeks()) == false) {\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    }\n    if (days != 0 && type.isSupported(DurationFieldType.days()) == false) {\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    }\n    if (hours != 0 && type.isSupported(DurationFieldType.hours()) == false) {\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    }\n    if (minutes != 0 && type.isSupported(DurationFieldType.minutes()) == false) {\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    }\n    if (seconds != 0 && type.isSupported(DurationFieldType.seconds()) == false) {\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    }\n    if (millis != 0 && type.isSupported(DurationFieldType.millis()) == false) {\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    }\n\n    // If period type contains years or months, normalize years/months (do not convert to months)\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        // Convert to total months\n        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        int newYears = 0;\n        int newMonths = 0;\n        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            newYears = totalMonths / 12;\n            newMonths = totalMonths % 12;\n        } else if (type.isSupported(DurationFieldType.years())) {\n            newYears = totalMonths / 12;\n            // months are dropped\n        } else {\n            // only months supported\n            newMonths = totalMonths;\n        }\n        return new Period(\n                type.isSupported(DurationFieldType.years()) ? newYears : 0,\n                type.isSupported(DurationFieldType.months()) ? newMonths : 0,\n                type.isSupported(DurationFieldType.weeks()) ? weeks : 0,\n                type.isSupported(DurationFieldType.days()) ? days : 0,\n                type.isSupported(DurationFieldType.hours()) ? hours : 0,\n                type.isSupported(DurationFieldType.minutes()) ? minutes : 0,\n                type.isSupported(DurationFieldType.seconds()) ? seconds : 0,\n                type.isSupported(DurationFieldType.millis()) ? millis : 0,\n                type\n        );\n    }\n    // else: convert entire period to milliseconds, construct Period from that\n    long totalMillis = 0L;\n    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) years) * 12L * DateTimeConstants.MILLIS_PER_MONTH);\n    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) months) * DateTimeConstants.MILLIS_PER_MONTH);\n    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) weeks) * DateTimeConstants.MILLIS_PER_WEEK);\n    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) days) * DateTimeConstants.MILLIS_PER_DAY);\n    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) hours) * DateTimeConstants.MILLIS_PER_HOUR);\n    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) minutes) * DateTimeConstants.MILLIS_PER_MINUTE);\n    totalMillis = FieldUtils.safeAdd(totalMillis, ((long) seconds) * DateTimeConstants.MILLIS_PER_SECOND);\n    totalMillis = FieldUtils.safeAdd(totalMillis, millis);\n\n    return new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}