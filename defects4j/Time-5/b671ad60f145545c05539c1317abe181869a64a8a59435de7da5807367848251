{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Normalize the time fields into milliseconds\n    long millis = getMillis();  // no overflow possible\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n\n    // Create initial period with normalized small fields\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    int years = getYears();\n    int months = getMonths();\n\n    if ((years != 0 || months != 0)) {\n        // If period type does not support years or months, fold these into months\n        boolean supportsYears = type.isSupported(DurationFieldType.years());\n        boolean supportsMonths = type.isSupported(DurationFieldType.months());\n\n        if (!supportsYears && !supportsMonths) {\n            if (years != 0 || months != 0) {\n                throw new UnsupportedOperationException(\"Period does not support years or months but period contains non-zero years or months\");\n            }\n        } else {\n            int totalMonths = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n\n            if (supportsYears && supportsMonths) {\n                int normYears = totalMonths / 12;\n                int normMonths = totalMonths % 12;\n                // adjust for negative modulo results\n                if (normMonths < 0) {\n                    normYears -= 1;\n                    normMonths += 12;\n                }\n                if (normYears != 0) {\n                    result = result.withYears(normYears);\n                }\n                if (normMonths != 0) {\n                    result = result.withMonths(normMonths);\n                }\n            } else if (supportsMonths) {\n                if (totalMonths != 0) {\n                    result = result.withMonths(totalMonths);\n                }\n            } else if (supportsYears) {\n                int normYears = totalMonths / 12;\n                if (totalMonths % 12 != 0) {\n                    throw new UnsupportedOperationException(\"PeriodType does not support months, so months cannot be normalized\");\n                }\n                if (normYears != 0) {\n                    result = result.withYears(normYears);\n                }\n            }\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}