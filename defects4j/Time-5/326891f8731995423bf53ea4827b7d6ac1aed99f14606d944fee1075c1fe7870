{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // Compute the millis from the fields that represent a duration\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND);\n    millis += (((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE);\n    millis += (((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR);\n    millis += (((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY);\n    millis += (((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK);\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    int years = getYears();\n    int months = getMonths();\n    \n    if (years != 0 || months != 0) {\n        if (type.isSupported(DurationFieldType.years())) {\n            // The target type supports years.\n            if (type.isSupported(DurationFieldType.months())) {\n                // Both years and months are supported. Normalize months to be in the range 0..11.\n                int normalizedYears = years + Math.floorDiv(months, 12);\n                int normalizedMonths = Math.floorMod(months, 12);\n                result = result.withYears(normalizedYears);\n                result = result.withMonths(normalizedMonths);\n            } else {\n                // Years are supported but months are not.\n                if (months != 0) {\n                    throw new UnsupportedOperationException(\"Field is not supported\");\n                }\n                result = result.withYears(years);\n            }\n        } else {\n            // Years are not supported in the target PeriodType.\n            if (type.isSupported(DurationFieldType.months())) {\n                // Convert the years into months.\n                int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n                result = result.withMonths(totalMonths);\n            } else {\n                // Neither years nor months are supported.\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n        }\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}