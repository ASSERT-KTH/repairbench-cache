{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        // If the period has years or months but the type doesn't support them, throw exception\n        if ((getYears() != 0 || getMonths() != 0) && (type == PeriodType.days() || type == PeriodType.hours() ||\n                type == PeriodType.minutes() || type == PeriodType.seconds() || type == PeriodType.millis() ||\n                type == PeriodType.weeks() || (!type.isSupported(DurationFieldType.years()) && getYears() != 0) ||\n                (!type.isSupported(DurationFieldType.months()) && getMonths() != 0))) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        // Only process years and months if the result type supports them\n        boolean supportsYears = type.isSupported(DurationFieldType.years());\n        boolean supportsMonths = type.isSupported(DurationFieldType.months());\n\n        int years = getYears();\n        int months = getMonths();\n\n        if (supportsYears || supportsMonths) {\n            // Normalize years and months\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n\n            if (supportsYears && years != 0) {\n                result = result.withYears(years);\n            }\n            if (supportsMonths && months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n\n        // For fields not processed above (like weeks), we need to transfer them from original to result\n        // if the type supports them but they weren't part of the millisecond conversion\n        if (type.isSupported(DurationFieldType.weeks())) {\n            result = result.withWeeks(getWeeks());\n        }\n        if (type.isSupported(DurationFieldType.days())) {\n            result = result.withDays(getDays());\n        }\n        if (type.isSupported(DurationFieldType.hours())) {\n            result = result.withHours(getHours());\n        }\n        if (type.isSupported(DurationFieldType.minutes())) {\n            result = result.withMinutes(getMinutes());\n        }\n        if (type.isSupported(DurationFieldType.seconds())) {\n            result = result.withSeconds(getSeconds());\n        }\n        if (type.isSupported(DurationFieldType.millis())) {\n            result = result.withMillis(getMillis());\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}