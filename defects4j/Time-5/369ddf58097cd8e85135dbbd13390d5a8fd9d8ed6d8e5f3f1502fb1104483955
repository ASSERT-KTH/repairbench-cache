{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11. The days field and below will be\n     * normalized as necessary, however this will not overflow into the months\n     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n     * But a period of 1 month 40 days will remain as 1 month 40 days.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in <code>PeriodType.yearMonthDayTime()</code>.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type does not support them\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n\n        int years = getYears();\n        int months = getMonths();\n\n        // Step 1: Handle years. If the target PeriodType does not support years,\n        // convert them to months if months are supported, otherwise throw.\n        if (years != 0) {\n            if (!type.isSupported(DurationFieldType.years())) {\n                if (type.isSupported(DurationFieldType.months())) {\n                    months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n                    years = 0; // Years are now represented in months\n                } else {\n                    // Neither years nor months are supported for a non-zero years value\n                    throw new UnsupportedOperationException(\"Field is not supported: Years\");\n                }\n            }\n            // Else (years are supported by type), years remain as they are for now.\n        }\n\n        // Step 2: Handle months. If the target PeriodType does not support months, throw.\n        // If years are supported, normalize months into years (e.g., 15 months -> 1 year 3 months).\n        if (months != 0) {\n            if (!type.isSupported(DurationFieldType.months())) {\n                // If months are non-zero but not supported by the type, throw an exception.\n                // If years was non-zero and not supported, it would have already thrown above.\n                throw new UnsupportedOperationException(\"Field is not supported: Months\");\n            }\n            // If months are supported and years are also supported, normalize months into years.\n            if (type.isSupported(DurationFieldType.years())) {\n                years = FieldUtils.safeAdd(years, months / 12);\n                months = months % 12;\n            }\n            // Else (months supported, but years not), `years` would be 0 from the previous step\n            // if it was non-zero originally and converted. `months` now contains the combined value\n            // and no further normalization into years is applicable.\n        }\n        \n        // Calculate milliseconds from time-based fields (milliseconds, seconds, minutes, hours, days, weeks)\n        long millis = getMillis();\n        millis = FieldUtils.safeAdd(millis, ((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis = FieldUtils.safeAdd(millis, ((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis = FieldUtils.safeAdd(millis, ((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis = FieldUtils.safeAdd(millis, ((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis = FieldUtils.safeAdd(millis, ((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        // Create the initial period based on the accumulated milliseconds and the target type\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        \n        // Apply the processed years and months to the result period.\n        // These values are already adjusted to be compatible with 'type' or an exception was thrown earlier.\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n        \n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}