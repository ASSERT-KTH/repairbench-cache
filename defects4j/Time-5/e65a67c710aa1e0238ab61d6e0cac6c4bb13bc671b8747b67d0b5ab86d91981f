{
    "generation": "    /**\n     * Normalizes this period using standard rules, assuming a 12 month year,\n     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n     * providing control over how the result is split into fields.\n     * <p>\n     * This method allows you to normalize a period.\n     * However to achieve this it makes the assumption that all years are\n     * 12 months, all weeks are 7 days, all days are 24 hours,\n     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n     * true when daylight savings time is considered, and may also not be true\n     * for some chronologies. However, it is included as it is a useful operation\n     * for many applications and business rules.\n     * <p>\n     * If the period contains years or months, then the months will be\n     * normalized to be between 0 and 11 *if the period type supports years*.\n     * The fields lower than months (weeks, days, hours, minutes, seconds, millis)\n     * will be normalized as necessary, but the normalization will not overflow\n     * into the months field. For example, a period of 1 year 15 months normalized\n     * using {@code PeriodType.standard()} will return 2 years 3 months.\n     * A period of 1 month 40 days will remain 1 month 40 days.\n     * <p>\n     * If the period type does not support years (eg. {@code PeriodType.months()}),\n     * then years will be converted to months. For example, a period of\n     * 1 year 15 months normalized using {@code PeriodType.months()} will return 27 months.\n     * <p>\n     * The PeriodType parameter controls how the result is created. It allows\n     * you to omit certain fields from the result if desired. For example,\n     * you may not want the result to include weeks, in which case you pass\n     * in {@code PeriodType.yearMonthDayTime()}. If the normalization\n     * results in a non-zero value for a field that is not supported by the\n     * specified period type, then an exception is thrown, *unless* the field\n     * is years and the type supports months, in which case the years are\n     * converted to months.\n     * \n     * @param type  the period type of the new period, null means standard type\n     * @return a normalized period equivalent to this period\n     * @throws ArithmeticException if any field is too large to be represented\n     * @throws UnsupportedOperationException if this period contains non-zero\n     *  years or months but the specified period type supports neither field,\n     *  or if the normalization calculation results in a field value that\n     *  cannot be represented by the period type.\n     * @since 1.5\n     */\n    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type); // Get the effective type\n        \n        // Calculate total millis from lower fields (weeks down) using long arithmetic\n        // Start with millis field, then add contributions from other fields safely\n        long millis = getMillis();\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getSeconds(), DateTimeConstants.MILLIS_PER_SECOND));\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getMinutes(), DateTimeConstants.MILLIS_PER_MINUTE));\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getHours(), DateTimeConstants.MILLIS_PER_HOUR));\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getDays(), DateTimeConstants.MILLIS_PER_DAY));\n        millis = FieldUtils.safeAdd(millis, FieldUtils.safeMultiply((long) getWeeks(), DateTimeConstants.MILLIS_PER_WEEK));\n        \n        // Create an initial period to normalize the millis part based on the target type.\n        // Using UTC avoids DST issues and aligns with the \"standard\" normalization rules.\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        // Calculate total months from upper fields (years, months) using long arithmetic\n        long totalMonths = getMonths();\n        // Add years converted to months safely\n        totalMonths = FieldUtils.safeAdd(totalMonths, FieldUtils.safeMultiply((long)getYears(), 12));\n\n        // If there are months/years to handle, process them based on type support\n        if (totalMonths != 0) {\n            boolean hasYears = type.isSupported(DurationFieldType.years());\n            boolean hasMonths = type.isSupported(DurationFieldType.months());\n            \n            // Check if the type can handle years or months at all\n            if (!hasYears && !hasMonths) {\n                 // As per Javadoc @throws, throw if type supports neither years nor months\n                 throw new UnsupportedOperationException(\"Cannot normalize years or months if period type does not support either field\");\n            }\n            \n            // If the type supports years, normalize into years and months\n            if (hasYears) {\n                // Use long division/modulo before converting to int\n                int normYears = FieldUtils.safeToInt(totalMonths / 12L); \n                int normMonths = FieldUtils.safeToInt(totalMonths % 12L);\n                \n                // Add normalized years to the result if non-zero\n                if (normYears != 0) {\n                    result = result.withYears(normYears);\n                }\n                // Add normalized months if non-zero AND the type supports months\n                if (normMonths != 0 && hasMonths) { \n                    result = result.withMonths(normMonths);\n                }\n                // Note: If normMonths != 0 but type doesn't support months, the value is effectively dropped,\n                // as standard normalization does not overflow months into days here.\n            } else { \n                 // Type does not support years, but supports months (checked above)\n                 // Convert the total months (including original years) into the months field\n                 int totalMonthsInt = FieldUtils.safeToInt(totalMonths);\n                 // Add total months to the result (which already has the correct type)\n                 result = result.withMonths(totalMonthsInt);\n            }\n        }\n        // If totalMonths was 0, no changes needed for years/months fields in the result\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}