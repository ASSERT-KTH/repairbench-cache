{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    Period result;\n\n    // Check if years and months are supported\n    if ((years != 0 && type.isSupported(DurationFieldType.years())) ||\n        (months != 0 && type.isSupported(DurationFieldType.months()))) {\n\n        // If both years and months supported, normalize months to 0-11\n        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            // in Java, -9 % 12 == -9; if negative months, adjust to range -11..11 style\n            if (months < 0 && years != 0) {\n                years = FieldUtils.safeAdd(years, -1);\n                months = months + 12;\n            }\n            result = new Period(\n                years,\n                months,\n                type.isSupported(DurationFieldType.weeks()) ? weeks : 0,\n                type.isSupported(DurationFieldType.days()) ? days : 0,\n                type.isSupported(DurationFieldType.hours()) ? hours : 0,\n                type.isSupported(DurationFieldType.minutes()) ? minutes : 0,\n                type.isSupported(DurationFieldType.seconds()) ? seconds : 0,\n                type.isSupported(DurationFieldType.millis()) ? millis : 0,\n                type\n            );\n            // recompute time fields from weeks/days/hours...\n            long totalMillis = 0;\n            if (!type.isSupported(DurationFieldType.weeks()) ||\n                !type.isSupported(DurationFieldType.days()) ||\n                !type.isSupported(DurationFieldType.hours()) ||\n                !type.isSupported(DurationFieldType.minutes()) ||\n                !type.isSupported(DurationFieldType.seconds()) ||\n                !type.isSupported(DurationFieldType.millis())) {\n                totalMillis += ((long)weeks) * DateTimeConstants.MILLIS_PER_WEEK;\n                totalMillis += ((long)days) * DateTimeConstants.MILLIS_PER_DAY;\n                totalMillis += ((long)hours) * DateTimeConstants.MILLIS_PER_HOUR;\n                totalMillis += ((long)minutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n                totalMillis += ((long)seconds) * DateTimeConstants.MILLIS_PER_SECOND;\n                totalMillis += (long)millis;\n\n                Period timeResult = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n                result = result\n                        .withWeeks(timeResult.getWeeks())\n                        .withDays(timeResult.getDays())\n                        .withHours(timeResult.getHours())\n                        .withMinutes(timeResult.getMinutes())\n                        .withSeconds(timeResult.getSeconds())\n                        .withMillis(timeResult.getMillis());\n            }\n            return result;\n        }\n\n        // If only months supported, add years as months\n        if (!type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n            years = 0;\n            // Compose everything except months as millis\n            long totalMillis = 0;\n            totalMillis += ((long)weeks) * DateTimeConstants.MILLIS_PER_WEEK;\n            totalMillis += ((long)days) * DateTimeConstants.MILLIS_PER_DAY;\n            totalMillis += ((long)hours) * DateTimeConstants.MILLIS_PER_HOUR;\n            totalMillis += ((long)minutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n            totalMillis += ((long)seconds) * DateTimeConstants.MILLIS_PER_SECOND;\n            totalMillis += (long)millis;\n\n            result = new Period(0, months, 0, 0, 0, 0, 0, 0, type);\n            Period timeResult = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n            result = result\n                    .withWeeks(timeResult.getWeeks())\n                    .withDays(timeResult.getDays())\n                    .withHours(timeResult.getHours())\n                    .withMinutes(timeResult.getMinutes())\n                    .withSeconds(timeResult.getSeconds())\n                    .withMillis(timeResult.getMillis());\n            return result;\n        }\n\n        // If years supported but not months (rare, not in official types), add months as years / 12\n        if (type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (months != 0) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n            // Compose all remaining as fields and as millis\n            long totalMillis = 0;\n            totalMillis += ((long)weeks) * DateTimeConstants.MILLIS_PER_WEEK;\n            totalMillis += ((long)days) * DateTimeConstants.MILLIS_PER_DAY;\n            totalMillis += ((long)hours) * DateTimeConstants.MILLIS_PER_HOUR;\n            totalMillis += ((long)minutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n            totalMillis += ((long)seconds) * DateTimeConstants.MILLIS_PER_SECOND;\n            totalMillis += (long)millis;\n\n            result = new Period(years, 0, 0, 0, 0, 0, 0, 0, type);\n            Period timeResult = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n            result = result\n                    .withWeeks(timeResult.getWeeks())\n                    .withDays(timeResult.getDays())\n                    .withHours(timeResult.getHours())\n                    .withMinutes(timeResult.getMinutes())\n                    .withSeconds(timeResult.getSeconds())\n                    .withMillis(timeResult.getMillis());\n            return result;\n        }\n\n        // If neither years nor months supported but values present: error\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    } else {\n        // No years/months\n        long totalMillis = 0;\n        totalMillis += ((long)weeks) * DateTimeConstants.MILLIS_PER_WEEK;\n        totalMillis += ((long)days) * DateTimeConstants.MILLIS_PER_DAY;\n        totalMillis += ((long)hours) * DateTimeConstants.MILLIS_PER_HOUR;\n        totalMillis += ((long)minutes) * DateTimeConstants.MILLIS_PER_MINUTE;\n        totalMillis += ((long)seconds) * DateTimeConstants.MILLIS_PER_SECOND;\n        totalMillis += (long)millis;\n        result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n        return result;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}