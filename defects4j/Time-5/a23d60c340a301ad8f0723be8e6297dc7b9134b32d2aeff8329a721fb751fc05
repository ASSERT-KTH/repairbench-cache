{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if (result.seconds != null && result.minutes != null && result.hours != null && result.days != null && result.weeks != null) {\n        if (years != 0 || months != 0) {\n            int totalMonths = months + years * 12;\n            years = totalMonths / 12;\n            months = totalMonths % 12;\n            if (type.isPresent(DurationFieldType.years()) && years != 0) {\n                result = result.withYears(years);\n            }\n            if (type.isPresent(DurationFieldType.months()) && months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}