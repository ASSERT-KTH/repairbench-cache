{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // Combine the time-based fields into a milliseconds total.\n    // Note: Years and months are handled separately.\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND);\n    millis += (((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE);\n    millis += (((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR);\n    millis += (((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY);\n    millis += (((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK);\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    // Combine the year and month fields into one total.\n    int years = getYears();\n    int months = getMonths();\n    int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n    \n    // Figure out which fields are supported in the target type.\n    boolean supportsYears = type.isSupported(DurationFieldType.years());\n    boolean supportsMonths = type.isSupported(DurationFieldType.months());\n    \n    // If both years and months are supported, split the total into normalized years and months.\n    // The normalization here uses Java\u2019s integer division (truncation) so that for positive totals,\n    // months will be in the range 0 to 11, and for negatives, months will be in the range -11 to 0.\n    if (supportsYears && supportsMonths) {\n        int normYears = totalMonths / 12;\n        int normMonths = totalMonths % 12;\n        result = result.withYears(normYears).withMonths(normMonths);\n    }\n    // If only months is supported, combine everything into months.\n    else if (supportsMonths) {\n        result = result.withMonths(totalMonths);\n    }\n    // If only years is supported, only allow a total that is an exact multiple of 12.\n    else if (supportsYears) {\n        if (totalMonths % 12 != 0) {\n            throw new UnsupportedOperationException(\"Field 'months' is not supported\");\n        }\n        result = result.withYears(totalMonths / 12);\n    }\n    // If neither field is supported but we have non-zero total, then we cannot represent it.\n    else {\n        if (totalMonths != 0) {\n            throw new UnsupportedOperationException(\"Fields years and months are not supported\");\n        }\n    }\n    \n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}