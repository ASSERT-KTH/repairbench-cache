{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    int years = getYears();\n    int months = getMonths();\n    if (years != 0 || months != 0) {\n        // Determine which fields are supported by the period type.\n        boolean yearsSupported = (type.indexOf(DurationFieldType.years()) >= 0);\n        boolean monthsSupported = (type.indexOf(DurationFieldType.months()) >= 0);\n\n        if (yearsSupported && monthsSupported) {\n            // Normalize months to be between 0 and 11, carrying the excess into years.\n            int normalizedYears = FieldUtils.safeAdd(years, months / 12);\n            int normalizedMonths = months % 12;\n            result = result.withYears(normalizedYears);\n            result = result.withMonths(normalizedMonths);\n        } else if (!yearsSupported && monthsSupported) {\n            // Convert any years into months.\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            result = result.withMonths(totalMonths);\n        } else if (yearsSupported && !monthsSupported) {\n            // If months are not supported but years are, then any non-zero months cannot be represented.\n            if (months != 0) {\n                throw new UnsupportedOperationException(\"Field 'months' is not supported\");\n            }\n            result = result.withYears(years);\n        } else {\n            // Neither field is supported \u2013 if either is non-zero, throw an exception.\n            if (years != 0) {\n                throw new UnsupportedOperationException(\"Field 'years' is not supported\");\n            }\n            if (months != 0) {\n                throw new UnsupportedOperationException(\"Field 'months' is not supported\");\n            }\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}