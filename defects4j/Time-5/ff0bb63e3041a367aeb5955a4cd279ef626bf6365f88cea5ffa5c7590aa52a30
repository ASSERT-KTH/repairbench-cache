{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    // split off the year/month part\n    int years = getYears();\n    int months = getMonths();\n    // sum all lower fields into milliseconds\n    long millis = getMillis();\n    millis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY;\n    millis += (long) getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n    // convert the lower part (weeks, days, time) without touching years/months\n    PeriodType lowerType = type.withYearsRemoved().withMonthsRemoved();\n    Period lower = new Period(millis, lowerType, ISOChronology.getInstanceUTC());\n    // now re-apply normalized years/months according to the target type\n    boolean supportY = type.isSupported(DurationFieldType.years());\n    boolean supportM = type.isSupported(DurationFieldType.months());\n    int newYears = 0;\n    int newMonths = 0;\n    if (years != 0 || months != 0) {\n        if (supportY) {\n            if (supportM) {\n                newYears = FieldUtils.safeAdd(years, months / 12);\n                newMonths = months % 12;\n            } else {\n                // months not supported\n                if (months != 0) {\n                    throw new UnsupportedOperationException(\"Field is not supported\");\n                }\n                newYears = years;\n            }\n        } else if (supportM) {\n            // collapse years into months\n            newMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n        } else {\n            // neither years nor months supported\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n    // build the final period with the correct type\n    return new Period(\n        newYears,\n        newMonths,\n        lower.getWeeks(),\n        lower.getDays(),\n        lower.getHours(),\n        lower.getMinutes(),\n        lower.getSeconds(),\n        lower.getMillis(),\n        type\n    );\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}