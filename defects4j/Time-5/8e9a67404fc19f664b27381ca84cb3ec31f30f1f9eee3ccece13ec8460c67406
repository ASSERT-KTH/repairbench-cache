{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // Check for unsupported fields\n    if ((years != 0 && !type.isSupported(DurationFieldType.years())) ||\n        (months != 0 && !type.isSupported(DurationFieldType.months()))) {\n        throw new UnsupportedOperationException(\"Field is not supported\");\n    }\n\n    // Normalize months/years if fields are supported\n    if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n    } else if (type.isSupported(DurationFieldType.months()) && !type.isSupported(DurationFieldType.years())) {\n        // Convert all years to months\n        months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n        years = 0;\n    } else if (!type.isSupported(DurationFieldType.months()) && type.isSupported(DurationFieldType.years())) {\n        // Convert all months to years (fractional years ignored)\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = 0;\n    }\n\n    // Now check for weeks/days normalization\n    if (type.isSupported(DurationFieldType.weeks()) && !type.isSupported(DurationFieldType.days())) {\n        // Convert all days to weeks (fractional weeks ignored)\n        weeks = FieldUtils.safeAdd(weeks, days / 7);\n        days = 0;\n    } else if (!type.isSupported(DurationFieldType.weeks()) && type.isSupported(DurationFieldType.days())) {\n        // Convert all weeks to days\n        days = FieldUtils.safeAdd(days, FieldUtils.safeMultiply(weeks, 7));\n        weeks = 0;\n    }\n\n    // For hours, minutes, seconds, millis: always normalize using millis\n    long totalMillis = millis\n            + seconds * (long) DateTimeConstants.MILLIS_PER_SECOND\n            + minutes * (long) DateTimeConstants.MILLIS_PER_MINUTE\n            + hours * (long) DateTimeConstants.MILLIS_PER_HOUR;\n    int normHours, normMinutes, normSeconds, normMillis;\n    normHours = normMinutes = normSeconds = normMillis = 0;\n\n    if (type.isSupported(DurationFieldType.hours()) ||\n        type.isSupported(DurationFieldType.minutes()) ||\n        type.isSupported(DurationFieldType.seconds()) ||\n        type.isSupported(DurationFieldType.millis())) {\n\n        if (type.isSupported(DurationFieldType.hours())) {\n            normHours = (int) (totalMillis / DateTimeConstants.MILLIS_PER_HOUR);\n            totalMillis = totalMillis % DateTimeConstants.MILLIS_PER_HOUR;\n        }\n        if (type.isSupported(DurationFieldType.minutes())) {\n            normMinutes = (int) (totalMillis / DateTimeConstants.MILLIS_PER_MINUTE);\n            totalMillis = totalMillis % DateTimeConstants.MILLIS_PER_MINUTE;\n        }\n        if (type.isSupported(DurationFieldType.seconds())) {\n            normSeconds = (int) (totalMillis / DateTimeConstants.MILLIS_PER_SECOND);\n            totalMillis = totalMillis % DateTimeConstants.MILLIS_PER_SECOND;\n        }\n        if (type.isSupported(DurationFieldType.millis())) {\n            normMillis = (int) totalMillis;\n        }\n        // If a field is not supported, \"leave\" its value in the lowest supported field above it\n        // E.g. if seconds and millis are not supported, all left-over millis end in minutes, etc.\n        // This behavior matches previous logic with Period(millis, PeriodType, chrono)\n    }\n\n    // Compose the normalized Period\n    Period result = new Period(\n            type.isSupported(DurationFieldType.years()) ? years : 0,\n            type.isSupported(DurationFieldType.months()) ? months : 0,\n            type.isSupported(DurationFieldType.weeks()) ? weeks : 0,\n            type.isSupported(DurationFieldType.days()) ? days : 0,\n            type.isSupported(DurationFieldType.hours()) ? normHours : 0,\n            type.isSupported(DurationFieldType.minutes()) ? normMinutes : 0,\n            type.isSupported(DurationFieldType.seconds()) ? normSeconds : 0,\n            type.isSupported(DurationFieldType.millis()) ? normMillis : 0,\n            type\n    );\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}