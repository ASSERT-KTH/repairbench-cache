{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    int origYears = getYears();\n    int origMonths = getMonths();\n    // Process the year/month fields if present.\n    if (origYears != 0 || origMonths != 0) {\n        // If the target period type supports years, then normalize\n        // so that the month field is between 0 and 11.\n        if (type.isSupported(DurationFieldType.years())) {\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(origYears, 12), origMonths);\n            // Use floor division so that the month part is always in the range 0 to 11.\n            int normalizedYears = Math.floorDiv(totalMonths, 12);\n            int normalizedMonths = Math.floorMod(totalMonths, 12);\n            result = result.withYears(normalizedYears);\n            if (normalizedMonths != 0) {\n                result = result.withMonths(normalizedMonths);\n            }\n        }\n        // Otherwise, if years are not supported but months are,\n        // combine the two fields into a total months count.\n        else if (type.isSupported(DurationFieldType.months())) {\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(origYears, 12), origMonths);\n            result = result.withMonths(totalMonths);\n        }\n        else {\n            // Neither years nor months are supported.\n            if (origYears != 0 || origMonths != 0) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}