{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Quick check for years and months fields unsupported\n    int years = getYears();\n    int months = getMonths();\n\n    // Disallow if period type doesn't support years/months but values are present in input:\n    if ((years != 0 && !type.isSupported(DurationFieldType.years())) ||\n        (months != 0 && !type.isSupported(DurationFieldType.months()))) {\n        // However, if the type supports months but not years, combine years into months\n        if (years != 0 && type.isSupported(DurationFieldType.months()) && !type.isSupported(DurationFieldType.years())) {\n            // years can be converted to months\n            months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n            years = 0;\n        } else {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    // Handle years and months\n    if (years != 0 || months != 0) {\n        // If we support years, normalize months to 0-11\n        if (type.isSupported(DurationFieldType.years())) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        } else if (type.isSupported(DurationFieldType.months())) {\n            // Only months supported -> convert all years to months\n            int totalMonths = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n            if (totalMonths != 0) {\n                result = result.withMonths(totalMonths);\n            }\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}