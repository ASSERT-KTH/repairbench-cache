{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Normalize all fields below months into milliseconds\n    long millis = getMillis();\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n\n    // Init result from the millis\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    int years = getYears();\n    int months = getMonths();\n\n    // If years or months are present in the original period\n    if (years != 0 || months != 0) {\n        // Check support for years and months\n        boolean yearsSupported = type.isSupported(DurationFieldType.years());\n        boolean monthsSupported = type.isSupported(DurationFieldType.months());\n        if (!yearsSupported && !monthsSupported) {\n            throw new UnsupportedOperationException(\"Neither years nor months supported\");\n        }\n\n        int totalMonths = years * 12 + months;\n\n        if (yearsSupported && monthsSupported) {\n            years = totalMonths / 12;\n            months = totalMonths % 12;\n            // handle negative modulus to ensure months remain in -11..11\n            if (months < 0) {\n                months += 12;\n                years -= 1;\n            }\n            result = result.withYears(years).withMonths(months);\n\n        } else if (monthsSupported) {\n            result = result.withMonths(totalMonths);\n\n        } else if (yearsSupported) {\n            int newYears = totalMonths / 12;\n            // handle negative: in case totalMonths negative but not multiple of 12\n            if (totalMonths % 12 != 0 && totalMonths < 0) {\n                newYears -= 1;\n            }\n            result = result.withYears(newYears);\n\n        } else {\n            // unreachable, already checked\n            throw new UnsupportedOperationException(\"PeriodType does not support years or months\");\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}