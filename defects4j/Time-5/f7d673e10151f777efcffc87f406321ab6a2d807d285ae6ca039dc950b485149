{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Normalize the duration fields (weeks and below) into the largest field supported by the type\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    Period durationPart = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    int years = getYears();\n    int months = getMonths();\n\n    // 'type' may not support year/month fields, so distribute overflow to supported fields\n    int newYears = 0;\n    int newMonths = 0;\n    if (years != 0 || months != 0) {\n        // convert to total months\n        long totalMonths = ((long) years) * 12 + (long) months;\n\n        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            newYears = FieldUtils.safeToInt(totalMonths / 12);\n            newMonths = FieldUtils.safeToInt(totalMonths % 12);\n        } else if (type.isSupported(DurationFieldType.years())) {\n            newYears = FieldUtils.safeToInt(totalMonths / 12);\n            // add leftover months as years if non-divisible\n            if (totalMonths % 12 != 0) {\n                throw new UnsupportedOperationException(\"Months field is not supported\");\n            }\n        } else if (type.isSupported(DurationFieldType.months())) {\n            newMonths = FieldUtils.safeToInt(totalMonths);\n        } else {\n            if (years != 0) {\n                throw new UnsupportedOperationException(\"Years field is not supported\");\n            }\n            if (months != 0) {\n                throw new UnsupportedOperationException(\"Months field is not supported\");\n            }\n        }\n    }\n\n    // Now create a new period with the correct years/months (if supported) and duration part\n    Period result = durationPart;\n    if (type.isSupported(DurationFieldType.years())) {\n        result = result.withYears(newYears);\n    }\n    if (type.isSupported(DurationFieldType.months())) {\n        result = result.withMonths(newMonths);\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}