{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Extract original fields\n    int years   = getYears();\n    int months  = getMonths();\n    long totalMillis  = getMillis();\n    long totalSeconds = getSeconds();\n    long totalMinutes = getMinutes();\n    long totalHours   = getHours();\n    long totalDays    = getDays();\n    long totalWeeks   = getWeeks();\n\n    // ---------------------------------------------------------------------\n    // 1) Normalize years/months according to type\n    //    - If years aren't supported, convert all years into months.\n    //    - If months aren't supported, throw if non-zero.\n    //    - If both years and months are supported, roll months into years.\n    // ---------------------------------------------------------------------\n    if (!type.isSupported(DurationFieldType.years())) {\n        // collapse years into months\n        months = FieldUtils.safeAdd(months, FieldUtils.safeMultiply(years, 12));\n        years = 0;\n    }\n    if (!type.isSupported(DurationFieldType.months())) {\n        if (months != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported: months\");\n        }\n    } else if (type.isSupported(DurationFieldType.years())) {\n        // roll overflow of months into years (months in 0..11)\n        int carryYears = months / 12;\n        years  = FieldUtils.safeAdd(years,  carryYears);\n        months = months % 12;\n    }\n\n    // ---------------------------------------------------------------------\n    // 2) Normalize the time-based fields using fixed unit sizes:\n    //       1000 ms = 1 s\n    //       60 s    = 1 m\n    //       60 m    = 1 h\n    //       24 h    = 1 d\n    //       7 d     = 1 w\n    //    At each step, if the smaller unit isn't supported, collapse it\n    //    entirely into the next larger unit. If it is supported, keep\n    //    it in the 0..(unitSize-1) range.\n    // ---------------------------------------------------------------------\n    long carry;\n\n    // millis \u2192 seconds\n    carry = totalMillis / DateTimeConstants.MILLIS_PER_SECOND;\n    totalSeconds = FieldUtils.safeAdd(totalSeconds, carry);\n    if (type.isSupported(DurationFieldType.millis())) {\n        totalMillis = totalMillis % DateTimeConstants.MILLIS_PER_SECOND;\n    } else {\n        totalMillis = 0;\n    }\n\n    // seconds \u2192 minutes\n    carry = totalSeconds / DateTimeConstants.SECONDS_PER_MINUTE;\n    totalMinutes = FieldUtils.safeAdd(totalMinutes, carry);\n    if (type.isSupported(DurationFieldType.seconds())) {\n        totalSeconds = totalSeconds % DateTimeConstants.SECONDS_PER_MINUTE;\n    } else {\n        totalSeconds = 0;\n    }\n\n    // minutes \u2192 hours\n    carry = totalMinutes / DateTimeConstants.MINUTES_PER_HOUR;\n    totalHours = FieldUtils.safeAdd(totalHours, carry);\n    if (type.isSupported(DurationFieldType.minutes())) {\n        totalMinutes = totalMinutes % DateTimeConstants.MINUTES_PER_HOUR;\n    } else {\n        totalMinutes = 0;\n    }\n\n    // hours \u2192 days\n    carry = totalHours / DateTimeConstants.HOURS_PER_DAY;\n    totalDays = FieldUtils.safeAdd(totalDays, carry);\n    if (type.isSupported(DurationFieldType.hours())) {\n        totalHours = totalHours % DateTimeConstants.HOURS_PER_DAY;\n    } else {\n        totalHours = 0;\n    }\n\n    // days \u2192 weeks\n    if (type.isSupported(DurationFieldType.weeks())) {\n        carry = totalDays / DateTimeConstants.DAYS_PER_WEEK;\n        totalWeeks = FieldUtils.safeAdd(totalWeeks, carry);\n        if (type.isSupported(DurationFieldType.days())) {\n            totalDays = totalDays % DateTimeConstants.DAYS_PER_WEEK;\n        } else {\n            totalDays = 0;\n        }\n    } else {\n        // weeks not supported\n        if (!type.isSupported(DurationFieldType.days()) && totalDays != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported: days\");\n        }\n        // else leave totalDays as\u2013is\n    }\n\n    // ---------------------------------------------------------------------\n    // 3) Finally, if any non-zero field remains that the type does not\n    //    support, throw an exception\n    // ---------------------------------------------------------------------\n    if (totalWeeks  != 0 && !type.isSupported(DurationFieldType.weeks())) {\n        throw new UnsupportedOperationException(\"Field is not supported: weeks\");\n    }\n    if (totalHours  != 0 && !type.isSupported(DurationFieldType.hours())) {\n        throw new UnsupportedOperationException(\"Field is not supported: hours\");\n    }\n    if (totalMinutes!= 0 && !type.isSupported(DurationFieldType.minutes())) {\n        throw new UnsupportedOperationException(\"Field is not supported: minutes\");\n    }\n    if (totalSeconds!= 0 && !type.isSupported(DurationFieldType.seconds())) {\n        throw new UnsupportedOperationException(\"Field is not supported: seconds\");\n    }\n    if (totalMillis != 0 && !type.isSupported(DurationFieldType.millis())) {\n        throw new UnsupportedOperationException(\"Field is not supported: millis\");\n    }\n\n    // ---------------------------------------------------------------------\n    // 4) Build and return the fully normalized period\n    // ---------------------------------------------------------------------\n    return new Period(\n        years,\n        months,\n        FieldUtils.safeToInt(totalWeeks),\n        FieldUtils.safeToInt(totalDays),\n        FieldUtils.safeToInt(totalHours),\n        FieldUtils.safeToInt(totalMinutes),\n        FieldUtils.safeToInt(totalSeconds),\n        FieldUtils.safeToInt(totalMillis),\n        type\n    );\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}