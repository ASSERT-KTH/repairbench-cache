{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n    if ((type.hasYears() || type.hasMonths()) && (years != 0 || months != 0)) {\n        if (type.hasYears()) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            result = result.withYears(years);\n        } else {\n            // If years are not supported, cannot normalize into them\n            // So, just adjust months, ensuring they don't overflow into years\n            // Note: Months might still be beyond 11 if normalization isn't possible\n        }\n        if (type.hasMonths() && months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}