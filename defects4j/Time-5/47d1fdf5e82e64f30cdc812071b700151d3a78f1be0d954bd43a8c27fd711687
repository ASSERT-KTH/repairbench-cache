{
    "generation": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Check if years and months are supported in the result type\n    int years = getYears();\n    int months = getMonths();\n\n    if (years != 0 || months != 0) {\n        if (!type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {\n            // Both years and months are unsupported, we cannot normalize\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    // Handle normalization to months if required (as in the failing tests)\n    if (years != 0 || months != 0) {\n        // If type doesn't support years, add all years into months\n        if (!type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n            result = result.withMonths(FieldUtils.safeAdd(result.getMonths(), totalMonths));\n        } else {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0 && type.isSupported(DurationFieldType.years())) {\n                result = result.withYears(FieldUtils.safeAdd(result.getYears(), years));\n            } else if (years != 0 && !type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n                // Defensive, in case field was not caught earlier\n                result = result.withMonths(FieldUtils.safeAdd(result.getMonths(), FieldUtils.safeMultiply(years, 12)));\n            }\n            if (months != 0 && type.isSupported(DurationFieldType.months())) {\n                result = result.withMonths(FieldUtils.safeAdd(result.getMonths(), months));\n            }\n        }\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}