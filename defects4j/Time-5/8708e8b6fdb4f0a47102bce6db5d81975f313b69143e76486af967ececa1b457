{
    "generation": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        // Create a new Period with just the millis to handle the time components\n        Period timeResult = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n        // Handle years and months separately, since they can't be represented in millis\n        int years = getYears();\n        int months = getMonths();\n\n        if (years != 0 || months != 0) {\n            // Check if the period type supports years and months\n            if (!type.isSupported(DurationFieldType.years()) && years != 0) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n            if (!type.isSupported(DurationFieldType.months()) && months != 0) {\n                throw new UnsupportedOperationException(\"Field is not supported\");\n            }\n\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n\n            // Create a new period with just years and months\n            Period dateResult = new Period(0, years, months, 0, 0, 0, 0, 0, type);\n\n            // Combine the timeResult and dateResult\n            Period result = new Period(\n                timeResult.getYears() + dateResult.getYears(),\n                timeResult.getMonths() + dateResult.getMonths(),\n                timeResult.getWeeks() + dateResult.getWeeks(),\n                timeResult.getDays() + dateResult.getDays(),\n                timeResult.getHours() + dateResult.getHours(),\n                timeResult.getMinutes() + dateResult.getMinutes(),\n                timeResult.getSeconds() + dateResult.getSeconds(),\n                timeResult.getMillis() + dateResult.getMillis(),\n                type\n            );\n            return result;\n        }\n\n        return timeResult;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}