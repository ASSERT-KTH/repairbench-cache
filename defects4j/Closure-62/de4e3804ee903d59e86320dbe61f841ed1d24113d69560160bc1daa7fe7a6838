{
    "generation": "  private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n        excerpt.get(\n            source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n      b.append(error.sourceName);\n      if (error.lineNumber > 0) {\n        b.append(':');\n        b.append(error.lineNumber);\n      }\n      b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt != null) {\n      b.append(sourceExcerpt);\n      b.append('\\n');\n      int charno = error.getCharno();\n\n      // padding equal to the excerpt and arrow at the end\n      // charno == sourceExpert.length() means something is missing\n      // at the end of the line\n      //\n      // The original code used excerpt.equals(LINE) which would be false\n      // when 'excerpt' is a new instance of LineNumberingFormatter, even\n      // if it's logically the same type. An 'instanceof' check is more robust.\n      //\n      // Also, the original charno < sourceExcerpt.length() condition prevented\n      // the caret from being displayed when the error was at the very end\n      // of the line (charno == sourceExcerpt.length()), which is a valid\n      // and expected scenario for missing tokens or EOF errors.\n      if (excerpt instanceof com.google.javascript.jscomp.SourceExcerptProvider.LineNumberingFormatter\n          && 0 <= charno && charno <= sourceExcerpt.length()) { // Changed charno < to charno <=\n        for (int i = 0; i < charno; i++) {\n          char c = sourceExcerpt.charAt(i);\n          if (Character.isWhitespace(c)) {\n            b.append(c);\n          } else {\n            b.append(' ');\n          }\n        }\n        b.append(\"^\\n\");\n      }\n    }\n    return b.toString();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}