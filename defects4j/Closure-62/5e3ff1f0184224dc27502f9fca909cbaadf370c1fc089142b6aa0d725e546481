{
    "generation": "private String format(JSError error, boolean warning) {\n  // extract source excerpt\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null ? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n\n  // formatting the message\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName != null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n\n  b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt != null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n\n    // padding equal to the excerpt and arrow at the end\n    // charno == sourceExpert.length() means something is missing\n    // at the end of the line\n    if (0 <= charno) { // Modified condition to handle cases where charno might be >= length\n      int padLength = Math.min(charno, sourceExcerpt.length());\n      for (int i = 0; i < padLength; i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (Character.isWhitespace(c)) {\n          b.append(c);\n        } else {\n          b.append(' ');\n        }\n      }\n      // If charno is beyond the end of the line, append the arrow at the end\n      if (charno >= sourceExcerpt.length()) {\n        b.append(\"^\\n\");\n      } else {\n        // Only append arrow if it's within bounds\n        if (charno >= 0) {\n          b.append(\"^\\n\");\n        }\n      }\n    }\n  }\n  return b.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}