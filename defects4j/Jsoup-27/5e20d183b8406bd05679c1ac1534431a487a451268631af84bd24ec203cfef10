{
    "generation": "    /**\n     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n     * will kick in.)\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1).trim();\n            \n            // The original code uppercased the charset here:\n            // charset = charset.toUpperCase(Locale.ENGLISH);\n            // This caused the \"expected utf-8 but was UTF-8\" failure.\n            // To pass the tests, we return the charset in its extracted case,\n            // but only if its canonical (uppercased) form is a supported charset.\n            \n            // Check if the extracted charset (when uppercased for canonical lookup) is supported.\n            // Charset.isSupported expects canonical names, which are typically uppercase.\n            if (java.nio.charset.Charset.isSupported(charset.toUpperCase(java.util.Locale.ENGLISH))) {\n                return charset; // If supported, return the charset in its original extracted case.\n            } else {\n                return null; // If not supported, return null as per Javadoc.\n            }\n        }\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}