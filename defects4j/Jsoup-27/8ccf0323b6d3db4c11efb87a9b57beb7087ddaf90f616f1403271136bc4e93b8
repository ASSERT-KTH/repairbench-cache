{
    "generation": "/**\n * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n * will kick in.)\n * @param contentType e.g. \"text/html; charset=EUC-JP\"\n * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n */\nstatic String getCharsetFromContentType(String contentType) {\n    if (contentType == null) return null;\n    Matcher m = charsetPattern.matcher(contentType);\n    if (m.find()) {\n        String charset = m.group(1).trim();\n        // Remove surrounding quotes if present\n        if (charset.length() > 1 && ((charset.startsWith(\"\\\"\") && charset.endsWith(\"\\\"\")) ||\n                                     (charset.startsWith(\"'\") && charset.endsWith(\"'\")))) {\n            charset = charset.substring(1, charset.length() - 1);\n        }\n        // Check if this is a supported Charset\n        try {\n            if (!Charset.isSupported(charset)) return null;\n        } catch (IllegalCharsetNameException e) {\n            return null;\n        }\n        // Preserve case as provided (as per test expectations for \"UTF-8\"/\"utf-8\")\n        return charset;\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}