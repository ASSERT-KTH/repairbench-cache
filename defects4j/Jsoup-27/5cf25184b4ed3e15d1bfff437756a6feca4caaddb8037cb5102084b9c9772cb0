{
    "generation": "import java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n// Assuming charsetPattern is defined elsewhere in the class, e.g.:\n// private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n// This pattern captures the charset value potentially after quotes, but not the quotes themselves.\n\n    /**\n     * Parse out a charset from a content type header.\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found, empty, or not supported. Charset is trimmed; casing is preserved.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n\n        // Note: assumes charsetPattern is a static Pattern field in the enclosing class\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1); // Group 1 captures the charset name without quotes\n            if (charset != null) {\n                charset = charset.trim();\n                if (charset.isEmpty())\n                    return null;\n\n                try {\n                    // Check if the charset is supported, preserving the original case.\n                    if (Charset.isSupported(charset)) {\n                        return charset;\n                    }\n                    // The original code uppercased the charset. While tests indicate original case is preferred,\n                    // java.nio charset lookup *can* be case-sensitive depending on implementation/platform details,\n                    // though standard names are usually case-insensitive. Let's not uppercase unless proven necessary,\n                    // as test failures specifically point against it for utf-8/UTF-8 cases.\n                } catch (IllegalCharsetNameException | UnsupportedCharsetException e) {\n                    // If the charset name is syntactically invalid or unsupported\n                    return null;\n                }\n            }\n        }\n        return null; // Return null if charset parameter not found or unsupported\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}