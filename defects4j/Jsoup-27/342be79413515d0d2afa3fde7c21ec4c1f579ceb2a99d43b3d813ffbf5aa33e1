{
    "generation": "import java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern; // Assuming charsetPattern is a static Pattern field defined elsewhere in the class\n\n    /**\n     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n     * will kick in.)\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found or not supported. Charset is trimmed and case is preserved.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n\n        // charsetPattern is assumed to be a static Pattern field initialized elsewhere.\n        // It needs to capture the charset value in group 1.\n        // A simple pattern that might be used: Pattern.compile(\"(?i)\\\\bcharset=([^;]*)\")\n        // This code assumes group(1) may contain the value, possibly with quotes.\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1); // Get the captured value\n            if (charset == null) { // Defensive check\n                 return null;\n            }\n            charset = charset.trim(); // Trim surrounding whitespace\n\n            // Remove paired quotes (double or single) from the extracted value\n            if (charset.length() > 1) { // Check if it can possibly be quoted\n                if (charset.startsWith(\"\\\"\") && charset.endsWith(\"\\\"\")) {\n                    charset = charset.substring(1, charset.length() - 1);\n                } else if (charset.startsWith(\"'\") && charset.endsWith(\"'\")) {\n                    charset = charset.substring(1, charset.length() - 1);\n                }\n                // Trim again in case of whitespace inside quotes like charset=\" UTF-8 \"\n                charset = charset.trim();\n            }\n\n            // After cleaning (trimming, quote removal), check if empty\n            if (charset.isEmpty()) {\n                return null;\n            }\n\n            // Validate the charset name and check if it's supported.\n            try {\n                if (Charset.isSupported(charset)) {\n                    // Return the original case as found in the header (after cleaning)\n                    return charset;\n                } else {\n                    // Charset specified, but not supported by the JVM\n                    return null;\n                }\n            } catch (IllegalCharsetNameException e) {\n                // The charset name has invalid syntax\n                return null;\n            }\n        }\n        // No charset parameter found in the Content-Type header\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}