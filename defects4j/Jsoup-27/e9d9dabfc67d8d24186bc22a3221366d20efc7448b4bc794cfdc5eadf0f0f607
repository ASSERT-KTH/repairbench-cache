{
    "generation": "    /**\n     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n     * will kick in.)\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1).trim();\n            // The existing tests expect specific casing for common charsets (e.g., \"utf-8\" vs \"UTF-8\").\n            // Therefore, removing the toUpperCase() call to preserve the extracted casing.\n            // charset = charset.toUpperCase(Locale.ENGLISH);\n\n            // Per the Javadoc: \"If the charset is not supported, returns null\".\n            // We use java.nio.charset.Charset.isSupported() to check for support.\n            try {\n                if (java.nio.charset.Charset.isSupported(charset)) {\n                    // Return the charset if it's recognized as supported by Java's Charset API.\n                    return charset;\n                }\n            } catch (java.nio.charset.IllegalCharsetNameException e) {\n                // This exception is thrown if the charset name is syntactically invalid.\n                // In such cases, it is considered unsupported, so we fall through to return null.\n            }\n            return null; // Charset found but not supported\n        }\n        return null; // Charset not found in the content type\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}