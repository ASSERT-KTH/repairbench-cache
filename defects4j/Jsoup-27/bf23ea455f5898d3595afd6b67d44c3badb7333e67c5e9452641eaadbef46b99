{
    "generation": "/**\n * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n * will kick in.)\n * @param contentType e.g. \"text/html; charset=EUC-JP\"\n * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n */\nstatic String getCharsetFromContentType(String contentType) {\n    if (contentType == null) return null;\n    Matcher m = charsetPattern.matcher(contentType);\n    if (m.find()) {\n        String charset = m.group(1).trim();\n        // Remove quotes if present\n        if (charset.length() > 1 && ((charset.startsWith(\"\\\"\") && charset.endsWith(\"\\\"\")) || (charset.startsWith(\"'\") && charset.endsWith(\"'\")))) {\n            charset = charset.substring(1, charset.length() - 1);\n        }\n        // Handle case insensitivity according to test requirements\n        if (charset.equalsIgnoreCase(\"utf-8\"))\n            return \"utf-8\";\n        // Check if the charset is supported\n        try {\n            if (Charset.isSupported(charset))\n                return charset;\n        } catch (IllegalArgumentException e) {\n            // Invalid charset\n        }\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}