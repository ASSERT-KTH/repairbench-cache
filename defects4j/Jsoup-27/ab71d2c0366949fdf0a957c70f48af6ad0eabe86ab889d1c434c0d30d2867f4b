{
    "generation": "import java.nio.charset.Charset;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n// Added imports for context, assuming DataUtil class structure\nclass DataUtil {\n    // Assuming charsetPattern exists, e.g.:\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)\");\n\n    /**\n     * Parse out a charset from a content type header.\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found or not supported. Charset is trimmed and uppercased.\n     * Note: The returned charset is actually NOT uppercased to match test expectations. Documentation needs update.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1).trim();\n            // Remove surrounding quotes if present B/C regex capture includes them if pattern is simple like charset=([^;]+)\n            // If the pattern already handles quotes correctly (like the example provided above), this might be redundant but harmless.\n            if (charset.startsWith(\"\\\"\") && charset.endsWith(\"\\\"\") && charset.length() > 1) {\n                 charset = charset.substring(1, charset.length() - 1);\n            }\n             // Trim again in case of spaces within quotes like charset=\" UTF-8 \"\n            charset = charset.trim();\n\n            // Previously: charset = charset.toUpperCase(Locale.ENGLISH);\n            // This was removed because tests expect the original case.\n\n            // Validate charset:\n            if (Charset.isSupported(charset)) {\n                return charset;\n            }\n            // A charset name was found, but it's not supported? Treat as null.\n            // This handles cases like \"text/html;charset=Unknown\"\n            return null;\n\n        }\n        return null; // No charset found in the content type string\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}