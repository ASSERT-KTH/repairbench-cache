{
    "generation": "    /**\n     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n     * will kick in.)\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n        // Assuming 'charsetPattern' is defined elsewhere and correctly extracts the charset.\n        // For example: Pattern.compile(\"(?i);\\\\s*charset\\\\s*=\\\\s*\\\"?([^\\\\s;\\\"']*)[\\\"']?\");\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1).trim();\n            // The original code uppercased the charset (charset = charset.toUpperCase(Locale.ENGLISH);).\n            // However, the provided tests expect the original casing to be preserved in some cases\n            // (e.g., \"utf-8\" vs \"UTF-8\"). Removing the toUpperCase call makes the function\n            // adhere to the test expectations by returning the trimmed charset as-is from the input.\n            return charset;\n        }\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}