{
    "generation": "import java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern; // Assuming this is imported if charsetPattern is defined here\n\n    /**\n     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n     * will kick in.)\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased. // Note: Uppercasing removed based on test failures.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n\n        // Assuming charsetPattern is defined elsewhere in the class, e.g.:\n        // private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)\");\n        // Or a pattern that captures the value in group 1, potentially including quotes.\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1).trim(); // Extract charset string\n\n            // Remove surrounding quotes if present (handles charset=\"UTF-8\" case)\n            if (charset.length() >= 2) { // Need at least two characters for quotes\n                 boolean isQuoted = (charset.startsWith(\"\\\"\") && charset.endsWith(\"\\\"\"))\n                               || (charset.startsWith(\"'\") && charset.endsWith(\"'\"));\n                 if (isQuoted) {\n                     charset = charset.substring(1, charset.length() - 1);\n                     // Trim again in case of internal spaces like \" utf-8 \"\n                     charset = charset.trim();\n                 }\n            }\n\n\n            // An empty string is not a valid charset\n            if (charset.isEmpty()) {\n                return null;\n            }\n\n            // Check if the charset is supported by the JVM.\n            // Charset.isSupported() checks for both valid syntax and availability.\n            // It returns false for invalid names (IllegalCharsetNameException)\n            // and unsupported charsets (UnsupportedCharsetException).\n            if (Charset.isSupported(charset)) {\n                // Return the cleaned, potentially unquoted charset name, preserving original case\n                // This fixes the test failures where \"utf-8\" was expected instead of \"UTF-8\".\n                return charset;\n            } else {\n                // Charset not supported or invalid name\n                return null;\n            }\n        }\n        return null; // charset attribute not found in the input string\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}