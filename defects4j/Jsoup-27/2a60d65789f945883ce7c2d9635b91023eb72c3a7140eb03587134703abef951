{
    "generation": "import java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.Locale;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n// Note: The surrounding class structure and the definition of charsetPattern \n// (assumed to be Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\")) \n// are omitted as per the requirement to only provide the fixed function.\n\n    /**\n     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n     * will kick in.)\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found or not supported. Charset is trimmed and retains original case.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n        // Assuming charsetPattern is a static final Pattern field in the same class, e.g.:\n        // private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1).trim();\n            // Removed the conversion to uppercase: charset = charset.toUpperCase(Locale.ENGLISH);\n            // This addresses the test failures where original casing was expected.\n\n            // Return null if charset is empty after trimming\n            if (charset.length() == 0)\n                return null;\n\n            try {\n                // Check if the charset is supported by the JVM, retaining original case\n                if (Charset.isSupported(charset)) {\n                    return charset;\n                }\n                // The tests expect null for \"Unknown\" and \"Unsupported\", \n                // so checking for support is necessary.\n            } catch (IllegalCharsetNameException e) {\n                // If the extracted charset string is not a legal charset name, return null.\n                return null;\n            } catch (UnsupportedCharsetException e) {\n                 // Should not be thrown by isSupported, but catch defensively.\n                 return null;\n            }\n            // If isSupported returned false, return null.\n            return null; \n        }\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}