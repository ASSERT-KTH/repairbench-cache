{
    "generation": "    private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n    {\n        _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n        char[] outBuf = _textBuffer.getCurrentSegment();\n        int outPtr = _textBuffer.getCurrentSegmentSize();\n        final int maxCode = codes.length;\n\n        while (true) {\n            if (_inputPtr >= _inputEnd) {\n                if (!_loadMore()) { // acceptable for now (will error out later)\n                    break;\n                }\n            }\n            char c = _inputBuffer[_inputPtr];\n            int i = (int) c;\n            // The `codes` array is 0-indexed, so valid indices are from 0 to codes.length - 1.\n            // If `i` is equal to `codes.length` (which is `maxCode`), accessing `codes[i]` will cause an `ArrayIndexOutOfBoundsException`.\n            // The condition should be `i < maxCode` to ensure `i` is a valid index for the `codes` array.\n            // Characters with value `i >= maxCode` should fall through to the `Character.isJavaIdentifierPart` check.\n            if (i < maxCode) { // FIX: Changed from `i <= maxCode` to `i < maxCode`\n                if (codes[i] != 0) {\n                    break;\n                }\n            } else if (!Character.isJavaIdentifierPart(c)) {\n                break;\n            }\n            ++_inputPtr;\n            hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = c;\n\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n        }\n        _textBuffer.setCurrentLength(outPtr);\n        {\n            TextBuffer tb = _textBuffer;\n            char[] buf = tb.getTextBuffer();\n            int start = tb.getTextOffset();\n            int len = tb.size();\n\n            return _symbols.findSymbol(buf, start, len, hash);\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}