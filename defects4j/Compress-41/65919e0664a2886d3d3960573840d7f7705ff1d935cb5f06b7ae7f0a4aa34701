{
    "generation": "    public ZipArchiveEntry getNextZipEntry() throws IOException {\n        boolean firstEntry = true;\n        if (closed || hitCentralDirectory) {\n            return null;\n        }\n        if (current != null) {\n            closeEntry();\n            firstEntry = false;\n        }\n\n        try {\n            if (firstEntry) {\n                // split archives have a special signature before the\n                // first local file header - look for it and fail with\n                // the appropriate error message if this is a split\n                // archive.\n                readFirstLocalFileHeader(LFH_BUF);\n            } else {\n                readFully(LFH_BUF);\n            }\n        } catch (final EOFException e) {\n            return null; // Cleanly reached end of stream\n        }\n\n        final ZipLong sig = new ZipLong(LFH_BUF);\n\n        // Check if we've reached the Central Directory or Archive Extra Data Record\n        if (sig.equals(ZipLong.CFH_SIG) || sig.equals(ZipLong.AED_SIG)) {\n            hitCentralDirectory = true;\n            skipRemainderOfArchive(); // Attempt to skip to the end of the archive\n            return null; // No more local file header entries\n        }\n\n        // If it's not a Local File Header, it's an error at this point\n        if (!sig.equals(ZipLong.LFH_SIG)) {\n            // Corrupted archive or unexpected data where LFH was expected\n            throw new ZipException(String.format(\"Unexpected record signature: 0x%x\", sig.getValue()));\n        }\n\n        // It is a Local File Header. Proceed with parsing.\n        int off = WORD;\n        current = new CurrentEntry();\n\n        final int versionMadeBy = ZipShort.getValue(LFH_BUF, off);\n        off += SHORT;\n        current.entry.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK);\n\n        final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(LFH_BUF, off);\n        final boolean hasUTF8Flag = gpFlag.usesUTF8ForNames();\n        final ZipEncoding entryEncoding = hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n        current.hasDataDescriptor = gpFlag.usesDataDescriptor();\n        current.entry.setGeneralPurposeBit(gpFlag);\n\n        off += SHORT;\n\n        current.entry.setMethod(ZipShort.getValue(LFH_BUF, off));\n        off += SHORT;\n\n        final long time = ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF, off));\n        current.entry.setTime(time);\n        off += WORD;\n\n        ZipLong size = null, cSize = null;\n        if (!current.hasDataDescriptor) {\n            current.entry.setCrc(ZipLong.getValue(LFH_BUF, off));\n            off += WORD;\n\n            cSize = new ZipLong(LFH_BUF, off);\n            off += WORD;\n\n            size = new ZipLong(LFH_BUF, off);\n            off += WORD;\n        } else {\n            // CRC, Compressed Size, and Uncompressed Size are deferred to Data Descriptor\n            off += 3 * WORD;\n        }\n\n        final int fileNameLen = ZipShort.getValue(LFH_BUF, off);\n        off += SHORT;\n\n        final int extraLen = ZipShort.getValue(LFH_BUF, off);\n        off += SHORT;\n\n\n        if (fileNameLen < 0) {\n            throw new IOException(\"Invalid entry name length\");\n        }\n        final byte[] fileName = new byte[fileNameLen];\n        readFully(fileName);\n        // Delay resolving name until technical encoding is known.\n        // current.entry.setName(entryEncoding.decode(fileName), fileName);\n\n        if (extraLen < 0) {\n            throw new IOException(\"Invalid extra field length\");\n        }\n        final byte[] extraData = new byte[extraLen];\n        readFully(extraData);\n        try {\n            current.entry.setExtra(extraData);\n        } catch (RuntimeException ex) {\n            final ZipException ze = new ZipException(\"Invalid extra data in entry \" + entryEncoding.decode(fileName));\n            ze.initCause(ex);\n            throw ze;\n        }\n\n        // Must be called after setExtra, requires UnparseableExtraFieldBehavior to be set.\n        current.entry.setName(entryEncoding.decode(fileName), fileName);\n\n        if (!hasUTF8Flag && useUnicodeExtraFields) {\n            ZipUtil.setNameAndCommentFromExtraFields(current.entry, fileName, null);\n        }\n\n        processZip64Extra(size, cSize);\n\n        // Current entry might be read from memory, create our own stream.\n        InputStream bis = new BoundedInputStream(in, current.entry.getCompressedSize());\n\n        if (current.entry.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN) {\n            if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {\n                current.in = new UnshrinkingInputStream(bis);\n            } else if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) {\n                current.in = new ExplodingInputStream(\n                        current.entry.getGeneralPurposeBit().getSlidingDictionarySize(),\n                        current.entry.getGeneralPurposeBit().getNumberOfShannonFanoTrees(),\n                        bis);\n            } else if (current.entry.getMethod() == ZipMethod.BZIP2.getCode()) {\n                current.in = new BZip2CompressorInputStream(bis);\n            } else if (current.entry.getMethod() == ZipMethod.DEFLATED.getCode()){\n                 // Inflater needs needs a stream that supports mark/reset\n                 // So we wrap the original stream with a PushbackInputStream.\n                 // Pushback size of 1 is probably enough but the Deflate64 implementation\n                 // used 2 so we keep it at 2 for now.\n                 final PushbackInputStream pis = new PushbackInputStream(bis, 2);\n\n                 // Need to create an inflater that reads the compressed data.\n                 current.in = new InflaterInputStream(pis, inflater, buf.length);\n\n            } // TODO add STORED support?\n        }\n\n        entriesRead++;\n        return current.entry;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}