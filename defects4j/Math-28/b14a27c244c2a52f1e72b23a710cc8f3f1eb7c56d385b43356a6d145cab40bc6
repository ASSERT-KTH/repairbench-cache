{
    "generation": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // compare using the standard double compare\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions.clear();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    if (minRatioPositions.isEmpty()) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy indicated by a tie in the minimum ratio test\n\n        // 1. Check if there is an artificial variable which we can force out of the basis.\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int artificialCol = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, artificialCol);\n                if (Precision.equals(entry, 1d, maxUlps)\n                        && row.equals(tableau.getBasicRow(artificialCol))) {\n                    return row;\n                }\n            }\n        }\n\n        // 2. Apply Bland's rule to avoid cycling:\n        //    Choose the row whose basic variable has the smallest index.\n        Integer minRow = null;\n        int minBasicIndex = Integer.MAX_VALUE;\n        for (Integer row : minRatioPositions) {\n            for (int j = tableau.getNumObjectiveFunctions(); j < tableau.getWidth() - 1; j++) {\n                if (row.equals(tableau.getBasicRow(j)) && j < minBasicIndex) {\n                    minBasicIndex = j;\n                    minRow = row;\n                }\n            }\n        }\n        if (minRow != null) {\n            return minRow;\n        }\n    }\n    return minRatioPositions.get(0);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}