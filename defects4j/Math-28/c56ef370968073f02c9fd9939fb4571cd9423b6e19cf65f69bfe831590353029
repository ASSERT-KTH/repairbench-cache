{
    "generation": "/**\n * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n * @param tableau simple tableau for the problem\n * @param col the column to test the ratio of.\n * @return row with the minimum ratio\n */\nprivate Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // 1) find the minimum positive ratio\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double rhs   = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double ratio = rhs / entry;\n            int cmp = Double.compare(ratio, minRatio);\n            if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions.clear();\n                minRatioPositions.add(i);\n            } else if (cmp == 0) {\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    // no valid pivot row => unbounded\n    if (minRatioPositions.isEmpty()) {\n        return null;\n    }\n\n    // if there is a tie, apply degeneracy handling\n    if (minRatioPositions.size() > 1) {\n\n        // (a) try to force an artificial variable out of the basis first\n        for (int r : minRatioPositions) {\n            for (int j = 0; j < tableau.getNumArtificialVariables(); j++) {\n                int artCol = j + tableau.getArtificialVariableOffset();\n                if (Precision.equals(tableau.getEntry(r, artCol), 1d, maxUlps)\n                    && r == tableau.getBasicRow(artCol)) {\n                    return r;\n                }\n            }\n        }\n\n        // (b) Bland's rule: pick the row whose basic variable has the smallest column index\n        Integer minRow   = null;\n        int     minIndex = Integer.MAX_VALUE;\n        int     width    = tableau.getWidth();\n        for (int r : minRatioPositions) {\n            // find the column of the basic variable for row r\n            for (int c = 0; c < width - 1; c++) {\n                if (r == tableau.getBasicRow(c)) {\n                    if (c < minIndex) {\n                        minIndex = c;\n                        minRow   = r;\n                    }\n                    break;\n                }\n            }\n        }\n        return minRow;\n    }\n\n    // unique minimum ratio\n    return minRatioPositions.get(0);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}