{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n\n            // Check if the entry in the pivot column is positive\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                // compare check includes strictly equal values. See MATH-842\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n\n        if (minRatioPositions.size() == 0) {\n             // This indicates an unbounded problem or an error state\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n            // Degeneracy: tie in the minimum ratio test. Apply tie-breaking rules.\n\n            // 1. Check if there's an artificial variable that can be forced out of the basis\n            //    among the tied rows. Prefer exiting artificial variables.\n            for (Integer row : minRatioPositions) {\n                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                    int column = i + tableau.getArtificialVariableOffset();\n                    final double entry = tableau.getEntry(row, column);\n                    // Check if the artificial variable 'column' is basic in 'row'\n                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                        return row; // Pivot on this row to remove the artificial variable\n                    }\n                }\n            }\n\n            // 2. Apply Bland's rule to prevent cycling:\n            //    Take the row for which the corresponding basic variable has the smallest index.\n            //\n            // References:\n            // http://www.stanford.edu/class/msande310/blandrule.pdf\n            // http://en.wikipedia.org/wiki/Bland%27s_rule\n            //\n            // Implementation note: Bland's rule requires finding the basic variable\n            // corresponding to each tied row and selecting the row whose basic variable\n            // has the minimum index.\n\n            Integer minRow = null;\n            int minIndex = Integer.MAX_VALUE; // Initialize with a value larger than any possible column index\n\n            for (Integer row : minRatioPositions) { // Iterate through rows tied for minimum ratio\n                // Find the index 'i' of the basic variable for the current 'row'.\n                // Iterate through all variable columns (indices 0 to width - 2).\n                // Assumes column indices correspond directly to variable indices for Bland's rule.\n                for (int i = 0; i < tableau.getWidth() - 1; i++) {\n                    Integer basicRow = tableau.getBasicRow(i);\n                    // Check if variable 'i' is basic in the current 'row'\n                    if (basicRow != null && basicRow.equals(row)) {\n                        // If this variable index 'i' is smaller than the minimum index found so far\n                        if (i < minIndex) {\n                            minIndex = i;\n                            minRow = row;\n                        }\n                        // Once the basic variable for this row is found, break the inner loop\n                        // as each basic row corresponds to exactly one basic variable.\n                        break;\n                    }\n                }\n            }\n            // The heuristic mentioned in comments (revert after half maxIterations) is not implemented here.\n            // If Bland's rule implementation is correct, it should prevent cycling.\n            // If minRow is somehow still null, it indicates an unexpected state, but given the tableau\n            // structure, it should be set if minRatioPositions is not empty and contains valid basic rows.\n            return minRow; // Return the row corresponding to the smallest basic variable index\n        } else {\n             // No tie, return the unique row with the minimum ratio.\n            return minRatioPositions.get(0);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}