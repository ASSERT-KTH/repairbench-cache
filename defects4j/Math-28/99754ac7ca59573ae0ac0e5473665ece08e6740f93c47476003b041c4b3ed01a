{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n\n            // only consider basic variables entering the basis with a positive coefficient in the pivot row\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                // check if the entry is strictly equal to the current min ratio\n                // do not use a ulp/epsilon check\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n\n        if (minRatioPositions.size() == 0) {\n            return null; // Unbounded solution indication\n        } else if (minRatioPositions.size() > 1) {\n            // Degeneracy: tie in the minimum ratio test. Apply tie-breaking rules.\n\n            // 1. Check if any artificial variables are basic in the tied rows.\n            //    If so, choose the row corresponding to the artificial variable\n            //    with the smallest index (consistent with Bland's rule among artificial variables).\n            Integer rowToChoose = null;\n            int minArtificialVarIndex = Integer.MAX_VALUE;\n\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int artificialVarIndex = i + tableau.getArtificialVariableOffset();\n                Integer basicRow = tableau.getBasicRow(artificialVarIndex);\n\n                // Check if this artificial variable is basic AND its row is among the tied rows\n                if (basicRow != null && minRatioPositions.contains(basicRow)) {\n                     // If this artificial variable has a smaller index than previously found ones, select its row.\n                     if (artificialVarIndex < minArtificialVarIndex) {\n                         minArtificialVarIndex = artificialVarIndex;\n                         rowToChoose = basicRow;\n                     }\n                }\n            }\n\n            // If we found a tied row where an artificial variable is basic, return the selected row.\n            if (rowToChoose != null) {\n                return rowToChoose;\n            }\n\n            // 2. If no artificial variable was found among the tied rows,\n            //    apply Bland's rule: choose the row corresponding to the basic variable\n            //    with the smallest index among all tied rows.\n            Integer minRow = null;\n            int minIndex = Integer.MAX_VALUE; // Initialize with a large value\n\n            for (Integer row : minRatioPositions) {\n                // Iterate over all variable columns to find the basic variable for this 'row'\n                // Assuming variable indices (columns) range from 0 to tableau.getWidth() - 2\n                for (int i = 0; i < tableau.getWidth() - 1; i++) {\n                    Integer basicRow = tableau.getBasicRow(i);\n                    // Check if variable 'i' is basic in the current 'row'\n                    // Use equals for Integer comparison and check for null basicRow\n                    if (basicRow != null && basicRow.equals(row)) {\n                        // If this variable's index 'i' is smaller than the current minIndex, update.\n                        if (i < minIndex) {\n                            minIndex = i;\n                            minRow = row;\n                        }\n                        // Found the basic variable for this row, no need to check other columns for this row.\n                        break;\n                    }\n                }\n            }\n            // Return the row selected by Bland's rule (or null if somehow no basic variable was found, though unlikely)\n            return minRow;\n\n        } else {\n            // No tie, return the unique row with the minimum ratio\n            return minRatioPositions.get(0);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}