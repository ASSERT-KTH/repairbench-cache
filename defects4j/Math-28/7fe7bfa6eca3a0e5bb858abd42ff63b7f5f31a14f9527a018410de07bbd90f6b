{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        int width  = tableau.getWidth();\n        int height = tableau.getHeight();\n        int numObj = tableau.getNumObjectiveFunctions();\n\n        // 1) find all rows that achieve the minimum positive ratio\n        for (int i = numObj; i < height; i++) {\n            double entry = tableau.getEntry(i, col);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                double rhs   = tableau.getEntry(i, width - 1);\n                double ratio = rhs / entry;\n                int cmp = Double.compare(ratio, minRatio);\n                if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions.clear();\n                    minRatioPositions.add(i);\n                } else if (cmp == 0) {\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n\n        // no eligible pivot row\n        if (minRatioPositions.isEmpty()) {\n            return null;\n        }\n        // unique minimum ratio\n        if (minRatioPositions.size() == 1) {\n            return minRatioPositions.get(0);\n        }\n\n        // 2) degeneracy: prefer to pivot out an artificial variable if possible\n        int artOffset = tableau.getArtificialVariableOffset();\n        int numArt    = tableau.getNumArtificialVariables();\n        for (int row : minRatioPositions) {\n            for (int j = 0; j < numArt; j++) {\n                int column = artOffset + j;\n                double e = tableau.getEntry(row, column);\n                if (Precision.equals(e, 1d, maxUlps)\n                    && tableau.getBasicRow(column) == row) {\n                    return row;\n                }\n            }\n        }\n\n        // 3) apply Bland's rule: pick the row whose basic variable has the smallest index\n        Integer bestRow = null;\n        int bestIndex   = Integer.MAX_VALUE;\n        for (int row : minRatioPositions) {\n            for (int j = 0; j < width - 1; j++) {\n                if (tableau.getBasicRow(j) == row) {\n                    if (j < bestIndex) {\n                        bestIndex = j;\n                        bestRow   = row;\n                    }\n                    break;\n                }\n            }\n        }\n        // fallback to the first if something went wrong\n        return (bestRow != null) ? bestRow : minRatioPositions.get(0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}