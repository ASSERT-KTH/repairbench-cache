{
    "generation": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // 1. find the minimal positive ratio rhs / entry(col)\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    int numObj = tableau.getNumObjectiveFunctions();\n    int height = tableau.getHeight();\n    int width  = tableau.getWidth();\n    for (int i = numObj; i < height; i++) {\n        double rhs   = tableau.getEntry(i, width - 1);\n        double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            double ratio = rhs / entry;\n            int cmp = Double.compare(ratio, minRatio);\n            if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions.clear();\n                minRatioPositions.add(i);\n            } else if (cmp == 0) {\n                minRatioPositions.add(i);\n            }\n        }\n    }\n    if (minRatioPositions.isEmpty()) {\n        // unbounded\n        return null;\n    }\n    if (minRatioPositions.size() == 1) {\n        return minRatioPositions.get(0);\n    }\n\n    // 2. degeneracy: try to pivot out an artificial variable first\n    int numArt   = tableau.getNumArtificialVariables();\n    int artOff   = tableau.getArtificialVariableOffset();\n    for (Integer row : minRatioPositions) {\n        for (int j = 0; j < numArt; j++) {\n            int artCol = artOff + j;\n            if (Precision.equals(tableau.getEntry(row, artCol), 1d, maxUlps)\n                && tableau.getBasicRow(artCol) == row) {\n                return row;\n            }\n        }\n    }\n\n    // 3. apply Bland's rule: pick the tied row whose basic variable has smallest index\n    Integer pivotRow = null;\n    int minIndex = Integer.MAX_VALUE;\n    for (Integer row : minRatioPositions) {\n        // find the variable index j for which basicRow(j) == row\n        for (int j = 0; j < width - 1; j++) {\n            if (tableau.getBasicRow(j) == row) {\n                if (j < minIndex) {\n                    minIndex = j;\n                    pivotRow = row;\n                }\n                break;\n            }\n        }\n    }\n    return pivotRow;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}