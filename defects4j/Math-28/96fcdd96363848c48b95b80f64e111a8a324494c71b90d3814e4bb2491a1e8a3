{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        // Iterate through constraint rows (skipping objective function rows)\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col); // Entry in pivot column 'col' for row 'i'\n\n            // Check if the entry in the pivot column is positive (requirement for MRT)\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                // compare the ratio with the current minimum ratio using simple double comparison\n                // Note: Do not use epsilon comparison here, as it can lead to cycling.\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    // Ratio is equal to the current minimum, add row to the list of tied rows\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    // Found a new smaller ratio\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>(); // Reset the list\n                    minRatioPositions.add(i); // Add the new best row\n                }\n            }\n        }\n\n        if (minRatioPositions.size() == 0) {\n            // No eligible pivot row found (all entries in pivot column are <= 0 for constraint rows)\n            // This indicates unboundedness if encountered during optimization.\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n            // Degeneracy: Tie in the minimum ratio test. Need to break the tie.\n\n            // 1. Check if an artificial variable can be forced out.\n            // Iterate through the tied rows\n            for (Integer row : minRatioPositions) {\n                // Iterate through the artificial variable columns\n                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                    int artificialVarColIndex = i + tableau.getArtificialVariableOffset();\n                    // Check if this artificial variable is basic in this 'row'\n                    // We only need to check if basicRow equals row, the entry check is redundant\n                    // if the tableau is consistent (basic variable column should have 1 in its row, 0 elsewhere)\n                    if (row.equals(tableau.getBasicRow(artificialVarColIndex))) {\n                        // If yes, prioritize pivoting on this row to remove the artificial variable\n                        return row;\n                    }\n                }\n            }\n\n            // 2. Apply Bland's rule to prevent cycling:\n            //    Select the row corresponding to the basic variable with the smallest index.\n            Integer minRow = null;\n            int minIndex = Integer.MAX_VALUE; // Initialize with a large value\n\n            // Iterate through all tied rows identified by the MRT\n            for (Integer row : minRatioPositions) {\n                // Find the index of the basic variable corresponding to this 'row'\n                // Iterate through all variable columns (0 to width - 2)\n                // NOTE: In SimplexTableau, column indices correspond to variables.\n                for (int i = 0; i < tableau.getWidth() - 1; i++) {\n                    Integer basicRowForCol = tableau.getBasicRow(i);\n                    // Check if variable 'i' is basic and its basic row is the current 'row'\n                    if (basicRowForCol != null && basicRowForCol.equals(row)) {\n                        // Variable 'i' is basic in row 'row'.\n                        // Check if this variable index 'i' is smaller than the smallest index found so far\n                        if (i < minIndex) {\n                            minIndex = i; // Update the minimum index\n                            minRow = row;   // Update the corresponding row\n                        }\n                        // Once the basic variable for 'row' is found, we can break the inner loop\n                        // and proceed to the next tied row.\n                        break;\n                    }\n                }\n            }\n            // Return the row associated with the smallest basic variable index among the tied rows.\n            // If minRow is still null (e.g., if tableau state is inconsistent), this will return null.\n            return minRow;\n        } else {\n            // Only one row has the minimum ratio, return it.\n            return minRatioPositions.get(0);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}