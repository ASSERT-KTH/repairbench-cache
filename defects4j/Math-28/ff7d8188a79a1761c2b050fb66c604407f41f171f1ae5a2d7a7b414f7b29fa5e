{
    "generation": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // Apply Bland's rule to prevent cycling\n        int minIndex = Integer.MAX_VALUE;\n        Integer minRow = null;\n        for (Integer row : minRatioPositions) {\n            int index = -1;\n            for (int i = 0; i < tableau.getWidth() - 1; i++) {\n                if (tableau.getBasicRow(i) == row) {\n                    index = i;\n                    break;\n                }\n            }\n            if (index != -1 && index < minIndex) {\n                minIndex = index;\n                minRow = row;\n            }\n        }\n        return minRow;\n    }\n    return minRatioPositions.get(0);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}