{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n\n            // only consider positive coefficients for the pivot column\n            // (entry strictly greater than 0)\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                // check if the entry is strictly equal to the current min ratio\n                // do not use a ulp/epsilon check\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n            // there's a degeneracy as indicated by a tie in the minimum ratio test\n\n            // 1. check if there's an artificial variable that can be forced out of the basis\n                for (Integer row : minRatioPositions) {\n                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                        int column = i + tableau.getArtificialVariableOffset();\n                        final double entry = tableau.getEntry(row, column);\n                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                            return row;\n                        }\n                    }\n                }\n\n            // 2. apply Bland's rule to prevent cycling:\n            //    take the row for which the corresponding basic variable has the smallest index\n            //\n            // The original implementation of Bland's rule here had two issues:\n            // a) The inner loop started checking variable indices from `tableau.getNumObjectiveFunctions()` (typically 1)\n            //    instead of 0, potentially missing variable at index 0.\n            // b) The inner loop condition `minRow != row` was incorrect and could lead to faulty selection.\n            //\n            // The fix ensures that all variable columns (from 0 up to `getWidth() - 2`) are considered\n            // when finding the basic variable for each candidate row, and correctly identifies\n            // the overall minimum basic variable index among the tied rows.\n            //\n            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n            //\n            // Additional heuristic: if we did not get a solution after half of maxIterations\n            //                       revert to the simple case of just returning the top-most row\n            // This heuristic is based on empirical data gathered while investigating MATH-828.\n                Integer minRow = null;\n                // Initialize minBasicVarIndex to a value larger than any possible column index\n                // This ensures that the first valid basic variable index found will be smaller.\n                int minBasicVarIndex = tableau.getWidth();\n                \n                // Iterate through each candidate row that tied for the minimum ratio\n                for (Integer candidateRow : minRatioPositions) {\n                    // For each candidate row, find the index of its basic variable.\n                    // Iterate through all possible variable columns (from 0 up to tableau.getWidth() - 2,\n                    // as tableau.getWidth() - 1 is the RHS column).\n                    for (int j = 0; j < tableau.getWidth() - 1; j++) {\n                        // Check if variable 'j' is the basic variable for 'candidateRow'.\n                        // tableau.getBasicRow(j) returns the row index where variable 'j' is basic.\n                        if (candidateRow.equals(tableau.getBasicRow(j))) {\n                            // If variable 'j' is basic in 'candidateRow', compare its index.\n                            if (j < minBasicVarIndex) {\n                                minBasicVarIndex = j;\n                                minRow = candidateRow;\n                            }\n                            // Once the basic variable for this 'candidateRow' is found,\n                            // no need to check other columns for this specific row, as each row has only one basic variable.\n                            break; \n                        }\n                    }\n                }\n                return minRow;\n        }\n        // If there's only one row with the minimum ratio, return it directly.\n        return minRatioPositions.get(0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}