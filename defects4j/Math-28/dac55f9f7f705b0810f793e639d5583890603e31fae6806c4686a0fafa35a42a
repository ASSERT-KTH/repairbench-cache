{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n\n            // Check if the entry in the pivot column is positive\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                // Use a tolerance check for comparing ratios to handle potential floating-point inaccuracies\n                final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);\n                if (cmp == 0) {\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n\n        if (minRatioPositions.size() == 0) {\n            // This indicates an unbounded problem, as all entries in the pivot column are non-positive\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n            // Degeneracy: Tie in the minimum ratio test. Apply tie-breaking rules.\n\n            // 1. Check if there's an artificial variable that can be forced out of the basis.\n            //    Prioritize rows corresponding to artificial variables leaving the basis.\n            for (Integer row : minRatioPositions) {\n                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                    int column = i + tableau.getArtificialVariableOffset();\n                    // Check if the variable in 'column' is artificial and basic in 'row'\n                    // and if the entry in the tableau for this artificial variable is 1 (typical for basic artificial vars)\n                    final double entry = tableau.getEntry(row, column);\n                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                        return row; // Choose this row to pivot\n                    }\n                }\n            }\n\n            // 2. Apply Bland's rule to prevent cycling:\n            //    Among the tied rows, choose the one corresponding to the basic variable\n            //    with the smallest column index.\n            //\n            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n            //\n            // The implementation below follows the principle: find the minimum index basic variable\n            // among the rows involved in the tie.\n\n            Integer minRow = null;\n            int minIndex = Integer.MAX_VALUE; // Initialize with a large value\n\n            for (Integer row : minRatioPositions) {\n                // Find the index of the column corresponding to the basic variable in this 'row'.\n                int basicVarIndex = -1; // Initialize for the current row\n\n                // Iterate through all columns that could represent basic variables (excluding RHS).\n                for (int j = 0; j < tableau.getWidth() - 1; j++) {\n                    Integer basicRowForColumnJ = tableau.getBasicRow(j);\n                    // Check if variable 'j' is basic and if its basic row is the current 'row'\n                    if (basicRowForColumnJ != null && basicRowForColumnJ.equals(row)) {\n                        basicVarIndex = j; // Found the basic variable index for this row\n                        break; // Move to the next tied row\n                    }\n                }\n\n                // If a basic variable was found for this row (should always happen for a valid basis)\n                // and its index is smaller than the minimum index found so far among tied rows:\n                if (basicVarIndex != -1 && basicVarIndex < minIndex) {\n                    minIndex = basicVarIndex; // Update the minimum index\n                    minRow = row;             // Update the row corresponding to this minimum index\n                }\n            }\n            // After checking all tied rows, minRow holds the row associated with\n            // the basic variable having the smallest index, according to Bland's rule.\n            return minRow;\n        }\n        // If there was no tie, return the single row found with the minimum ratio.\n        return minRatioPositions.get(0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}