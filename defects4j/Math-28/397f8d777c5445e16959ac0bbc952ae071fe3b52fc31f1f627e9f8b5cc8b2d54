{
    "generation": "import org.apache.commons.math3.util.Precision; // Added import for clarity\nimport java.util.ArrayList; // Added import for clarity\nimport java.util.List; // Added import for clarity\n// Assuming SimplexTableau class and maxUlps field are defined elsewhere appropriately.\n\n    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        // Iterate through constraint rows (starting after objective function rows)\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col); // Entry in pivot column\n\n            // Check if the entry in the pivot column is positive (denominator for ratio)\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                // compare the ratio with the current minimum ratio using plain double comparison\n                // to find exact ties as per original code's intent for degeneracy handling.\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    // Ratio is equal to the current minimum, add row to the list of tying rows\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    // Ratio is strictly smaller than the current minimum\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>(); // Reset list for new minimum\n                    minRatioPositions.add(i); // Add this row as the new minimum\n                }\n            }\n        }\n\n        if (minRatioPositions.size() == 0) {\n            // No eligible row found (all entries in pivot column were <= 0 for constraint rows)\n            // This indicates an unbounded problem in this direction.\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n            // Tie in the minimum ratio test (degeneracy) - need a tie-breaking rule\n\n            // 1. Check if there's an artificial variable that can be forced out of the basis among the tying rows.\n            // Prioritizing the removal of artificial variables is standard practice.\n            for (Integer row : minRatioPositions) {\n                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                    int artificialVarColumn = i + tableau.getArtificialVariableOffset();\n                    final double entry = tableau.getEntry(row, artificialVarColumn);\n                    Integer basicRow = tableau.getBasicRow(artificialVarColumn); // Get the row where this artificial variable is basic\n\n                    // Check if the entry is 1 (characteristic of a basic variable in its row)\n                    // AND if this row ('row') is indeed the row where the artificial variable ('artificialVarColumn') is basic.\n                    // Use .equals() for Integer comparison.\n                    if (Precision.equals(entry, 1d, maxUlps) && basicRow != null && basicRow.equals(row)) {\n                        // If yes, choose this row to pivot on, effectively removing the artificial variable from the basis.\n                        return row;\n                    }\n                }\n            }\n\n            // 2. If no artificial variable can be forced out, apply Bland's rule to prevent cycling.\n            // Bland's rule (for choosing the leaving variable/pivot row):\n            // Among the rows that tie for the minimum ratio, choose the one corresponding to the\n            // basic variable with the smallest index.\n            Integer minRow = null; // The row to be returned\n            int minIndex = Integer.MAX_VALUE; // Initialize with a value larger than any possible column index\n\n            for (Integer row : minRatioPositions) { // Iterate through the rows that tied for the minimum ratio\n                int basicVarIndexForRow = -1; // To store the index of the variable that is basic in this 'row'\n\n                // Find the column index 'i' of the variable that is basic in the current 'row'.\n                // Iterate over all potential variable columns. The original code started from getNumObjectiveFunctions(),\n                // assuming variables corresponding to objective rows (if any) cannot be basic in constraint rows. We retain this assumption.\n                for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {\n                    Integer basicRowForColI = tableau.getBasicRow(i); // Get the row where variable 'i' is basic\n                    // Check if variable 'i' is basic in the current 'row'. Use .equals() for Integer object comparison.\n                    if (basicRowForColI != null && basicRowForColI.equals(row)) {\n                        basicVarIndexForRow = i; // Store the index of the basic variable\n                        break; // Found the basic variable for this row, no need to check further columns for this row\n                    }\n                }\n\n                // After checking all columns for the current 'row', see if we found its basic variable\n                // and if its index is the smallest found so far among the tying rows.\n                if (basicVarIndexForRow != -1 && basicVarIndexForRow < minIndex) {\n                    minIndex = basicVarIndexForRow; // Update the minimum index found\n                    minRow = row;                   // Update the corresponding row to be returned\n                }\n            }\n            // Return the row associated with the smallest basic variable index found among the tying rows.\n            // If minRow is null at this point, it implies an issue (e.g., couldn't find basic variables\n            // for the tying rows), which shouldn't happen in a typical valid simplex state when applying Bland's rule.\n            return minRow;\n\n        } else {\n            // No tie, exactly one row had the minimum ratio.\n            return minRatioPositions.get(0);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}