{
    "generation": "/**\n * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n * @param tableau simple tableau for the problem\n * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n * @return row with the minimum ratio\n */\nprivate Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    final int width  = tableau.getWidth();\n    final int height = tableau.getHeight();\n    final int numObj = tableau.getNumObjectiveFunctions();\n    final int artOff = tableau.getArtificialVariableOffset();\n    final int numArt = tableau.getNumArtificialVariables();\n\n    // 1) find all rows that achieve the minimal positive ratio\n    for (int row = numObj; row < height; row++) {\n        final double entry = tableau.getEntry(row, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double rhs   = tableau.getEntry(row, width - 1);\n            final double ratio = rhs / entry;\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions.clear();\n                minRatioPositions.add(row);\n            } else if (cmp == 0) {\n                minRatioPositions.add(row);\n            }\n        }\n    }\n\n    // no valid pivot row\n    if (minRatioPositions.isEmpty()) {\n        return null;\n    }\n\n    // exactly one, return it\n    if (minRatioPositions.size() == 1) {\n        return minRatioPositions.get(0);\n    }\n\n    // 2) degeneracy: more than one candidate\n    // 2.a) try to drop an artificial variable first\n    for (Integer row : minRatioPositions) {\n        for (int j = 0; j < numArt; j++) {\n            int colIndex = artOff + j;\n            final double v = tableau.getEntry(row, colIndex);\n            if (Precision.equals(v, 1d, maxUlps)\n                && row.equals(tableau.getBasicRow(colIndex))) {\n                return row;\n            }\n        }\n    }\n\n    // 2.b) Bland's rule: choose the row whose basic variable has the smallest column index\n    Integer bestRow = null;\n    int bestVarIndex = Integer.MAX_VALUE;\n    for (Integer row : minRatioPositions) {\n        for (int j = 0; j < width - 1; j++) {\n            if (row.equals(tableau.getBasicRow(j))) {\n                if (j < bestVarIndex) {\n                    bestVarIndex = j;\n                    bestRow = row;\n                }\n                break;\n            }\n        }\n    }\n\n    // fallback to the top\u2010most if something went wrong\n    return (bestRow == null) ? minRatioPositions.get(0) : bestRow;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}