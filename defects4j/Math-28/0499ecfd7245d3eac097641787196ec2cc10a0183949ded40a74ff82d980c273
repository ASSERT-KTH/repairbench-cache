{
    "generation": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // Create a list of all the rows that tie for the lowest ratio.\n    List<Integer> minRatioPositions = new ArrayList<>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) { // tie found\n                minRatioPositions.add(i);\n            } else if (cmp < 0) { // new minimum found\n                minRatio = ratio;\n                minRatioPositions.clear();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    if (minRatioPositions.isEmpty()) {\n        return null;\n    } else if (minRatioPositions.size() == 1) {\n        return minRatioPositions.get(0);\n    } else {\n        // There is a degeneracy (tie).  First try to remove an artificial variable.\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps)\n                        && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n\n        // If no forced artificial exit was found, apply Bland's rule:\n        // choose the row whose associated basic variable has the smallest index.\n        Integer chosenRow = null;\n        int minIndex = Integer.MAX_VALUE;\n        for (Integer row : minRatioPositions) {\n            // Iterate over the columns that can be basic.\n            for (int j = tableau.getNumObjectiveFunctions(); j < tableau.getWidth() - 1; j++) {\n                if (row.equals(tableau.getBasicRow(j))) {\n                    if (j < minIndex) {\n                        minIndex = j;\n                        chosenRow = row;\n                    }\n                    // Once the basic column is found for this row, move on.\n                    break;\n                }\n            }\n        }\n        // Fallback: if for some reason none of the rows were basic, take the first candidate.\n        return chosenRow != null ? chosenRow : minRatioPositions.get(0);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}