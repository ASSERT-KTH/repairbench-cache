{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n\n            // Only consider positive entries for the ratio test\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                // check if the entry is strictly equal to the current min ratio\n                // do not use a ulp/epsilon check, use Double.compare for strict equality\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) { // Tie\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) { // New minimum ratio found\n                    minRatio = ratio;\n                    minRatioPositions.clear(); // Clear previous ties\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n\n        if (minRatioPositions.size() == 0) {\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n            // there's a degeneracy as indicated by a tie in the minimum ratio test\n\n            // 1. check if there's an artificial variable that can be forced out of the basis\n            for (Integer row : minRatioPositions) {\n                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                    int column = i + tableau.getArtificialVariableOffset();\n                    final double entry = tableau.getEntry(row, column);\n                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                        return row;\n                    }\n                }\n            }\n\n            // 2. apply Bland's rule to prevent cycling:\n            //    take the row for which the corresponding basic variable has the smallest index\n            //\n            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n            //\n            // Additional heuristic: if we did not get a solution after half of maxIterations\n            //                       revert to the simple case of just returning the top-most row\n            // This heuristic is based on empirical data gathered while investigating MATH-828.\n            Integer minRowCandidate = null;\n            int minBasicVariableIndex = tableau.getWidth(); // Initialize to a value larger than any possible column index\n\n            for (Integer currentRow : minRatioPositions) {\n                // For the current 'currentRow', find the column index of its basic variable.\n                // Iterate through all columns that can potentially be basic variables.\n                // These are typically columns representing original, slack, or artificial variables.\n                // The relevant columns are from getNumObjectiveFunctions() (usually 1) up to getWidth() - 2 (before RHS).\n                int currentBasicVariableCol = -1;\n                for (int j = tableau.getNumObjectiveFunctions(); j < tableau.getWidth() - 1; j++) {\n                    // Check if 'currentRow' is the basic row for column 'j'\n                    if (currentRow.equals(tableau.getBasicRow(j))) {\n                        currentBasicVariableCol = j;\n                        break; // Found the basic variable for this row, no need to check further columns for THIS row.\n                    }\n                }\n\n                // If a basic variable was found for the current row\n                if (currentBasicVariableCol != -1) {\n                    if (currentBasicVariableCol < minBasicVariableIndex) {\n                        minBasicVariableIndex = currentBasicVariableCol;\n                        minRowCandidate = currentRow;\n                    }\n                }\n            }\n            return minRowCandidate;\n        }\n        return minRatioPositions.get(0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}