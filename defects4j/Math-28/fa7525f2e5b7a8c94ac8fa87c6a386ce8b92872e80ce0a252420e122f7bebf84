{
    "generation": "    /**\n     * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n     * @param tableau simple tableau for the problem\n     * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n     * @return row with the minimum ratio\n     */\n    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n        List<Integer> minRatioPositions = new ArrayList<Integer>();\n        double minRatio = Double.MAX_VALUE;\n        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n            final double entry = tableau.getEntry(i, col);\n\n            // Check if the entry in the pivot column is positive (greater than 0 within tolerance)\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                final double ratio = rhs / entry;\n                // Check if the ratio is strictly smaller or equal to the current minimum ratio\n                // Use Double.compare for comparison, avoiding epsilon checks here as per original logic\n                final int cmp = Double.compare(ratio, minRatio);\n                if (cmp == 0) {\n                    // Ratio is equal, add the row to the list of ties\n                    minRatioPositions.add(i);\n                } else if (cmp < 0) {\n                    // Ratio is strictly smaller, start a new list of ties\n                    minRatio = ratio;\n                    minRatioPositions = new ArrayList<Integer>();\n                    minRatioPositions.add(i);\n                }\n            }\n        }\n\n        if (minRatioPositions.size() == 0) {\n            // No feasible row found for the pivot column (all entries <= 0)\n            return null;\n        } else if (minRatioPositions.size() > 1) {\n            // Degeneracy: Tie in the minimum ratio test\n\n            // 1. Check if there's an artificial variable that can be forced out of the basis\n            //    This is prioritized to ensure artificial variables leave the basis quickly.\n            if (tableau.getNumArtificialVariables() > 0) {\n                for (Integer row : minRatioPositions) {\n                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                        int artificialVarColumn = i + tableau.getArtificialVariableOffset();\n                        // Check if the artificial variable is basic in this row\n                        if (row.equals(tableau.getBasicRow(artificialVarColumn))) {\n                             // Check if the entry corresponding to the artificial variable is 1 (or close to 1)\n                             // This check might be redundant if tableau structure guarantees it, but added for clarity\n                             // final double entry = tableau.getEntry(row, artificialVarColumn);\n                             // if (Precision.equals(entry, 1d, maxUlps)) {\n                                return row; // Found an artificial variable to remove, return its row\n                             // }\n                        }\n                    }\n                }\n            }\n\n\n            // 2. Apply Bland's rule to prevent cycling:\n            //    Select the row for which the basic variable has the smallest index.\n            //\n            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n            // see http://en.wikipedia.org/wiki/Bland%27s_rule\n            //\n            // The original code had a potential bug in the starting index of the inner loop.\n            // The corrected version iterates through all variable columns (0 to width - 2).\n            Integer minRow = null;\n            int minIndex = Integer.MAX_VALUE; // Initialize with a large index\n\n            for (Integer row : minRatioPositions) {\n                // Find the column index 'j' of the basic variable in this 'row'\n                // Iterate through all potential variable columns (indices 0 to width - 2)\n                for (int j = 0; j < tableau.getWidth() - 1; j++) {\n                    Integer basicRow = tableau.getBasicRow(j);\n                    // Check if variable 'j' is basic in the current tied row 'row'\n                    if (basicRow != null && basicRow.equals(row)) {\n                        // Variable 'j' is basic in 'row'. Compare its index 'j' with the minimum found so far.\n                        if (j < minIndex) {\n                            minIndex = j;\n                            minRow = row;\n                        }\n                        // Since each row has exactly one basic variable in a standard tableau,\n                        // we can break the inner loop once we find it for the current row.\n                        break;\n                    }\n                }\n            }\n            // Return the row associated with the basic variable having the smallest index among the tied rows.\n            // If minRow is still null, it implies an issue (e.g., no basic variable found for tied rows),\n            // but under normal simplex operation with Bland's rule, a row should be selected.\n            return minRow;\n        }\n        // Only one row had the minimum ratio\n        return minRatioPositions.get(0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}