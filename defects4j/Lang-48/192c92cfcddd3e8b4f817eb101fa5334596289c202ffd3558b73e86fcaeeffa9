{
    "generation": "import java.math.BigDecimal; // Ensure BigDecimal is imported\n\n    /**\n     * <p>Test if two <code>Object</code>s are equal using their\n     * <code>equals</code> method.</p>\n     *\n     * <p>Includes special handling for {@link BigDecimal} where {@code compareTo}\n     * is used instead of {@code equals} to align with specific test expectations (e.g., LANG-393)\n     * regarding scale insensitivity.</p>\n     *\n     * @param lhs  the left hand object\n     * @param rhs  the right hand object\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class<?> lhsClass = lhs.getClass(); // Use generic type\n        if (!lhsClass.isArray()) {\n                // Special handling for BigDecimal based on LANG-393 test expectations.\n                // BigDecimal.equals() checks scale, whereas compareTo() does not.\n                // The test expects compareTo() behavior for BigDecimals.\n                if (lhs instanceof BigDecimal && rhs instanceof BigDecimal) {\n                    // Use compareTo to ignore scale differences for BigDecimal\n                    isEquals = (((BigDecimal) lhs).compareTo((BigDecimal) rhs) == 0);\n                } else {\n                    // The simple case, not an array, just test the element using standard equals\n                    isEquals = lhs.equals(rhs);\n                }\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare arrays of different types or dimensions\n            this.setEquals(false);\n        }\n        // 'Switch' on type of array, to dispatch to the correct handler\n        // This handles multi dimensional arrays of the same depth\n        else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}