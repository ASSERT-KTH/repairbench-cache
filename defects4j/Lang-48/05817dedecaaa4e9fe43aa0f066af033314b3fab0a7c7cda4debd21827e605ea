{
    "generation": "    /**\n     * <p>Test if two <code>Object</code>s are equal using their\n     * <code>equals</code> method.</p>\n     *\n     * @param lhs  the left hand object\n     * @param rhs  the right hand object\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n                // The simple case, not an array, just test the element\n                // Special handling for BigDecimal and BigInteger to use compareTo() for equality,\n                // as their equals() method considers scale, which is often not desired for equality.\n                // Also, ensure the current state of isEquals is combined using AND.\n                if (lhs instanceof java.math.BigDecimal) {\n                    if (rhs instanceof java.math.BigDecimal) {\n                        isEquals = isEquals && ((java.math.BigDecimal) lhs).compareTo((java.math.BigDecimal) rhs) == 0;\n                    } else {\n                        isEquals = false; // Different types, cannot be equal\n                    }\n                } else if (lhs instanceof java.math.BigInteger) {\n                    if (rhs instanceof java.math.BigInteger) {\n                        isEquals = isEquals && ((java.math.BigInteger) lhs).compareTo((java.math.BigInteger) rhs) == 0;\n                    } else {\n                        isEquals = false; // Different types, cannot be equal\n                    }\n                } else {\n                    isEquals = isEquals && lhs.equals(rhs);\n                }\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n            // Or different primitive array types (e.g., long[] to int[]). These are considered unequal.\n            this.setEquals(false);\n        }\n        // 'Switch' on type of array, to dispatch to the correct handler\n        // This handles multi dimensional arrays of the same depth\n        else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives, assume it's an array of Objects\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}