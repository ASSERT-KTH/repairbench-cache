{
    "generation": "    /**\n     * <p>Test if two <code>Object</code>s are equal using their\n     * <code>equals</code> method.</p>\n     *\n     * @param lhs  the left hand object\n     * @param rhs  the right hand object\n     * @return EqualsBuilder - used to chain calls.\n     */\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        // Using Class<?> is preferred over raw Class type\n        Class<?> lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n                // The simple case, not an array, just test the element\n                // FIX: Ensure isEquals is only ever potentially set to false,\n                // respecting the current state of isEquals. The initial check\n                // 'if (isEquals == false)' ensures this block only runs if\n                // isEquals is currently true. If lhs.equals(rhs) is false,\n                // set the state to false. If it's true, the state remains true.\n                if (!lhs.equals(rhs)) {\n                    this.setEquals(false);\n                }\n        } else {\n            // lhs is an array. Check rhs is an array of the same type.\n            // (Note: A check like '!rhs.getClass().isArray()' might be redundant\n            // if 'lhs.getClass() != rhs.getClass()' handles it, but can be clearer).\n            if (lhs.getClass() != rhs.getClass()) {\n                // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n                // or an array to a non-array (if rhs wasn't null but classes differ)\n                this.setEquals(false);\n            }\n            // 'Switch' on type of array, to dispatch to the correct handler\n            // This handles multi dimensional arrays of the same depth\n            // Only executes if lhs is an array AND rhs is an array of the same type.\n            else if (lhs instanceof long[]) {\n                append((long[]) lhs, (long[]) rhs);\n            } else if (lhs instanceof int[]) {\n                append((int[]) lhs, (int[]) rhs);\n            } else if (lhs instanceof short[]) {\n                append((short[]) lhs, (short[]) rhs);\n            } else if (lhs instanceof char[]) {\n                append((char[]) lhs, (char[]) rhs);\n            } else if (lhs instanceof byte[]) {\n                append((byte[]) lhs, (byte[]) rhs);\n            } else if (lhs instanceof double[]) {\n                append((double[]) lhs, (double[]) rhs);\n            } else if (lhs instanceof float[]) {\n                append((float[]) lhs, (float[]) rhs);\n            } else if (lhs instanceof boolean[]) {\n                append((boolean[]) lhs, (boolean[]) rhs);\n            } else {\n                // Not an array of primitives, must be Object[]\n                append((Object[]) lhs, (Object[]) rhs);\n            }\n        }\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}