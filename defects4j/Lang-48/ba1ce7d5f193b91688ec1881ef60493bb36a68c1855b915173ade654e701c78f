{
    "generation": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;\n    }\n    Class lhsClass = lhs.getClass();\n    if (!lhsClass.isArray()) {\n        // Special case for BigDecimal: compare via compareTo()\n        if (lhs instanceof java.math.BigDecimal && rhs instanceof java.math.BigDecimal) {\n            isEquals = (((java.math.BigDecimal) lhs).compareTo((java.math.BigDecimal) rhs) == 0);\n        } else {\n            isEquals = lhs.equals(rhs);\n        }\n    } else if (lhs.getClass() != rhs.getClass()) {\n        // Different array types\n        this.setEquals(false);\n    }\n    // 'Switch' on type of array, to dispatch to the correct handler\n    // This handles multidimensional arrays of the same depth\n    else if (lhs instanceof long[]) {\n        append((long[]) lhs, (long[]) rhs);\n    } else if (lhs instanceof int[]) {\n        append((int[]) lhs, (int[]) rhs);\n    } else if (lhs instanceof short[]) {\n        append((short[]) lhs, (short[]) rhs);\n    } else if (lhs instanceof char[]) {\n        append((char[]) lhs, (char[]) rhs);\n    } else if (lhs instanceof byte[]) {\n        append((byte[]) lhs, (byte[]) rhs);\n    } else if (lhs instanceof double[]) {\n        append((double[]) lhs, (double[]) rhs);\n    } else if (lhs instanceof float[]) {\n        append((float[]) lhs, (float[]) rhs);\n    } else if (lhs instanceof boolean[]) {\n        append((boolean[]) lhs, (boolean[]) rhs);\n    } else {\n        // Not an array of primitives\n        append((Object[]) lhs, (Object[]) rhs);\n    }\n    return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}