{
    "generation": "    /**\n     * Replace the provide statement.\n     *\n     * If we're providing a name with no definition, then create one.\n     * If we're providing a name with a duplicate definition, then make sure\n     * that definition becomes a declaration.\n     */\n    void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        // ProvidedNames that aren't constructs should become empty objects.\n        replacementNode = candidateDefinition != null ? candidateDefinition : createDeclarationNode();\n        if (replacementNode == null) {\n           explicitNode.detachFromParent(); // Ensure the goog.provide is removed\n           compiler.reportCodeChange();\n        }\n        // Note: replacementNode may be null if candidateDefinition was null\n        // and createDeclarationNode decided not to create a node (e.g. for goog itself).\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly\n      // provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        replacementNode = candidateDefinition;\n        // Don't try to change a FUNCTION node to a VAR. It's fine the way\n        // it is.\n        if (NodeUtil.isExpressionNode(candidateDefinition) &&\n            candidateDefinition.getFirstChild().getType() == Token.ASSIGN) {\n          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.getType() == Token.NAME) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = new Node(Token.VAR, nameNode);\n            varNode.copyInformationFromForTree(candidateDefinition);\n\n            // Move JSDoc info to the new node. It is harmless to move it\n            // if it is null.\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            assignNode.setJSDocInfo(null);\n            if (candidateDefinition.getJSDocInfo() != null) {\n              varNode.setJSDocInfo(candidateDefinition.getJSDocInfo());\n              candidateDefinition.setJSDocInfo(null);\n            }\n\n            candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        }\n      } else {\n        // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n        if (replacementNode == null) {\n          // createDeclarationNode decided not to create a node.\n          if (explicitNode != null) {\n             explicitNode.detachFromParent();\n             compiler.reportCodeChange();\n          }\n          return;\n        }\n\n\n        if (firstModule == minimumModule) {\n           // Inject the declaration into the first module.\n           Preconditions.checkNotNull(firstNode); // Should not be null if we got here.\n           firstNode.getParent().addChildBefore(replacementNode, firstNode);\n        } else {\n          // In this case, the name was implicitly provided by two independent\n          // modules. We need to move this code up to a common module.\n          int indexOfDot = namespace.indexOf('.');\n          if (indexOfDot == -1) {\n            // Any old place is fine.\n            compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToBack(replacementNode);\n          } else {\n            // Add it after the parent namespace.\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n            Preconditions.checkNotNull(parentName);\n            Preconditions.checkNotNull(parentName.replacementNode, \"Parent namespace %s did not have a replacement node\", parentName.namespace);\n\n            // Make sure the parent namespace has been injected into the AST.\n            Preconditions.checkNotNull(parentName.replacementNode.getParent(), \"Parent namespace %s replacement node %s was not injected into the AST\", parentName.namespace, parentName.replacementNode);\n            // Insert the new node after the parent node's replacement node.\n            if (parentName.replacementNode.getNext() == null) {\n              parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);\n            } else {\n              parentName.replacementNode.getParent().addChildBefore(replacementNode, parentName.replacementNode.getNext());\n            }\n          }\n        }\n\n        if (explicitNode != null) {\n          explicitNode.detachFromParent();\n        }\n        compiler.reportCodeChange();\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}