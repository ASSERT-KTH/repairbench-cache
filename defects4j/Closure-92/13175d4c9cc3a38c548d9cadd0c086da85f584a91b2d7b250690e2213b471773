{
    "generation": "    /**\n     * Replace the provide statement.\n     *\n     * If we're providing a name with no definition, then create one.\n     * If we're providing a name with a duplicate definition, then make sure\n     * that definition becomes a declaration.\n     */\n    void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        replacementNode = candidateDefinition;\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly\n      // provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        replacementNode = candidateDefinition;\n        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.getType() == Token.NAME) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = new Node(Token.VAR, nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        }\n      } else {\n        // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n\n        // If this name was explicitly provided (e.g., goog.provide('some.name')),\n        // replace the goog.provide statement with the declaration.\n        if (explicitNode != null) {\n          explicitNode.getParent().addChildBefore(replacementNode, explicitNode);\n          explicitNode.detachFromParent();\n        } else {\n          // If this name was implicitly provided (e.g., 'some.name' implicitly\n          // provides 'some'), and the first goog.provide for this name is in a\n          // later module than its minimum required module, then move the\n          // declaration up to the common module.\n          if (firstModule == minimumModule) {\n            // This is the first time we've encountered this name, and it's\n            // in the earliest possible module. Place it before the firstNode.\n            firstNode.getParent().addChildBefore(replacementNode, firstNode);\n          } else {\n            // The name was implicitly provided by two independent modules,\n            // or an explicit provide was in a later module.\n            // We need to move this code up to a common module.\n            int lastIndexOfDot = namespace.lastIndexOf('.'); // FIX: Use lastIndexOf for immediate parent\n            if (lastIndexOfDot == -1) {\n              // Any old place is fine if it's a top-level name.\n              compiler.getNodeForCodeInsertion(minimumModule)\n                  .addChildToBack(replacementNode);\n            } else {\n              // Add it after the parent namespace's declaration.\n              ProvidedName parentName =\n                  providedNames.get(namespace.substring(0, lastIndexOfDot)); // FIX: Use substring based on lastIndexOf\n              Preconditions.checkNotNull(parentName);\n              Preconditions.checkNotNull(parentName.replacementNode);\n              parentName.replacementNode.getParent().addChildAfter(\n                  replacementNode, parentName.replacementNode);\n            }\n          }\n        }\n        compiler.reportCodeChange();\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}