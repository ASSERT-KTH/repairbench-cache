{
    "generation": "/**\n     * Replace the provided statement.\n     *\n     * If we're providing a name with no definition, then create one.\n     * If we're providing a name with a duplicate definition, then make sure\n     * that definition becomes a declaration.\n     */\n    void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        replacementNode = candidateDefinition;\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly\n      // provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        replacementNode = candidateDefinition;\n        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.getType() == Token.NAME) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = new Node(Token.VAR, nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        }\n      } else {\n        // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n        if (firstModule == minimumModule) {\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n        } else {\n          // In this case, the name was implicitly provided by two independent\n          // modules. We need to move this code up to a common module.\n          int indexOfDot = namespace.indexOf('.');\n          if (indexOfDot == -1) {\n            // Any old place is fine.\n            compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToBack(replacementNode);\n          } else {\n            // Add it after the parent namespace.\n            String parentNamespace = namespace.substring(0, indexOfDot);\n            ProvidedName parentName = providedNames.get(parentNamespace);\n            if (parentName == null || parentName.replacementNode == null) {\n              // Parent namespace is not explicitly provided, find its module\n              // and insert the declaration there.\n              String[] parts = parentNamespace.split(\"\\\\.\");\n              String currentNamespace = \"\";\n              Node currentNode = compiler.getNodeForCodeInsertion(minimumModule);\n              for (String part : parts) {\n                currentNamespace += (currentNamespace.isEmpty() ? \"\" : \".\") + part;\n                ProvidedName currentName = providedNames.get(currentNamespace);\n                if (currentName != null && currentName.replacementNode != null) {\n                  currentNode = currentName.replacementNode;\n                } else {\n                  Node newNode = new Node(Token.OBJECTLIT);\n                  newNode.putBooleanProp(Node.IS_NAMESPACE, true);\n                  currentNode.addChildToBack(newNode);\n                  currentNode = newNode;\n                  providedNames.put(currentNamespace, new ProvidedName(newNode, null, null, null));\n                }\n              }\n              currentNode.getParent().addChildAfter(replacementNode, currentNode);\n            } else {\n              parentName.replacementNode.getParent().addChildAfter(\n                  replacementNode, parentName.replacementNode);\n            }\n          }\n        }\n        if (explicitNode != null) {\n          explicitNode.detachFromParent();\n        }\n        compiler.reportCodeChange();\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}