{
    "generation": "    void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        replacementNode = candidateDefinition;\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly\n      // provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        replacementNode = candidateDefinition;\n        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.getType() == Token.NAME) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = new Node(Token.VAR, nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        }\n      } else {\n        // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n\n        // Special handling for nested namespaces\n        String parentNamespace = null;\n        String thisNamespace = namespace;\n        int lastDot = namespace.lastIndexOf('.');\n        if (lastDot > 0) {\n          parentNamespace = namespace.substring(0, lastDot);\n          thisNamespace = namespace.substring(lastDot + 1);\n        }\n\n        if (firstModule == minimumModule) {\n          // Place it before the firstNode (which will be in the same module)\n          Node parent = firstNode.getParent();\n          parent.addChildBefore(replacementNode, firstNode);\n        } else {\n          // In this case, the name was implicitly provided by two independent\n          // modules. We need to move this code up to a common module.\n          if (parentNamespace != null && parentNamespace.length() > 0) {\n            // Add it after the parent namespace.\n            ProvidedName parentName = providedNames.get(parentNamespace);\n            if (parentName != null && parentName.replacementNode != null) {\n              parentName.replacementNode.getParent().addChildAfter(\n                  replacementNode, parentName.replacementNode);\n            } else {\n              // If parent namespace not found, add to the common module\n              compiler.getNodeForCodeInsertion(minimumModule)\n                  .addChildToBack(replacementNode);\n            }\n          } else {\n            // Top-level namespace case\n            compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToBack(replacementNode);\n          }\n        }\n        if (explicitNode != null) {\n          explicitNode.detachFromParent();\n        }\n        compiler.reportCodeChange();\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}