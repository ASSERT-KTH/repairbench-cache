{
    "generation": "    /**\n     * Replace the provide statement.\n     *\n     * If we're providing a name with no definition, then create one.\n     * If we're providing a name with a duplicate definition, then make sure\n     * that definition becomes a declaration.\n     */\n    void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        replacementNode = candidateDefinition;\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly\n      // provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        replacementNode = candidateDefinition;\n        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.getType() == Token.NAME) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = new Node(Token.VAR, nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        }\n      } else { // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n\n        if (explicitNode != null) {\n          // Case 1: This is an explicitly provided symbol (e.g., goog.provide('apps.foo.bar.B')).\n          // The declaration for an explicitly provided symbol should generally\n          // replace the original goog.provide statement, staying in its module.\n          // Hoisting to a 'minimumModule' only applies to implicitly created\n          // parent namespaces, not the explicit provide itself.\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n          explicitNode.detachFromParent(); // Remove the original goog.provide statement\n        } else {\n          // Case 2: This is an implicitly provided symbol (e.g., 'apps.foo' because 'apps.foo.bar.B' was provided).\n          // These implicit declarations need to be moved to the common module (minimumModule) if necessary.\n          if (firstModule == minimumModule) {\n            // This case implies the implicit provide's hierarchy is rooted in its\n            // first explicit descendant's module, which is also the minimum module.\n            // Place it before the first explicit descendant node.\n            firstNode.getParent().addChildBefore(replacementNode, firstNode);\n          } else {\n            // The name was implicitly provided by a descendant in a later module.\n            // We need to move this code up to a common module.\n            int indexOfDot = namespace.indexOf('.');\n            if (indexOfDot == -1) {\n              // Top-level implicit name (unlikely to happen for non-goog, but handled).\n              compiler.getNodeForCodeInsertion(minimumModule)\n                  .addChildToBack(replacementNode);\n            } else {\n              // Nested implicit name (e.g., 'apps.foo', 'apps.foo.bar').\n              // Add it after the parent namespace's replacement node, if available.\n              // Otherwise, add to the back of the common module, as the parent\n              // might not have been processed or inserted yet.\n              ProvidedName parentName =\n                  providedNames.get(namespace.substring(0, indexOfDot));\n              Preconditions.checkNotNull(parentName);\n              if (parentName.replacementNode != null) {\n                parentName.replacementNode.getParent().addChildAfter(\n                    replacementNode, parentName.replacementNode);\n              } else {\n                // The parent's replacement node hasn't been generated yet.\n                // Fall back to inserting the current node at the end of the\n                // minimum module for insertion. This handles cases where parent\n                // definitions are also implicitly generated or delayed.\n                compiler.getNodeForCodeInsertion(minimumModule)\n                    .addChildToBack(replacementNode);\n              }\n            }\n          }\n        }\n        compiler.reportCodeChange();\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}