{
    "generation": "    /**\n     * Replace the provide statement.\n     *\n     * If we're providing a name with no definition, then create one.\n     * If we're providing a name with a duplicate definition, then make sure\n     * that definition becomes a declaration.\n     */\n    void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        replacementNode = candidateDefinition;\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly\n      // provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        replacementNode = candidateDefinition;\n        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.getType() == Token.NAME) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = new Node(Token.VAR, nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        }\n      } else {\n        // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n\n        // If it's an explicit provide (e.g., goog.provide('apps.foo.bar.C')),\n        // it should replace the goog.provide statement in its original module.\n        if (explicitNode != null) {\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n          explicitNode.detachFromParent(); // Detach the original provide statement\n        } else {\n          // If it's an implicit provide (e.g., apps.foo), place it based on minimumModule.\n          if (firstModule == minimumModule) {\n            // If the implicit provide shares the same 'home' module as its first usage,\n            // place it before the first usage.\n            firstNode.getParent().addChildBefore(replacementNode, firstNode);\n          } else {\n            // In this case, the name was implicitly provided by two independent\n            // modules, or its minimumModule is higher up than its firstModule.\n            // We need to move this code up to a common module (minimumModule).\n            int indexOfDot = namespace.indexOf('.');\n            if (indexOfDot == -1) {\n              // Top-level implicit provide (e.g., 'foo')\n              compiler.getNodeForCodeInsertion(minimumModule)\n                  .addChildToBack(replacementNode);\n            } else {\n              // Nested implicit provide (e.g., 'foo.bar')\n              // Add it after the parent namespace in the common module.\n              ProvidedName parentName =\n                  providedNames.get(namespace.substring(0, indexOfDot));\n              Preconditions.checkNotNull(parentName);\n              Preconditions.checkNotNull(parentName.replacementNode);\n              parentName.replacementNode.getParent().addChildAfter(\n                  replacementNode, parentName.replacementNode);\n            }\n          }\n          // The explicitNode is only non-null if we were processing an explicit goog.provide,\n          // which is handled in the `if (explicitNode != null)` branch above.\n          // For implicit provides (`explicitNode == null`), there's no original node to detach.\n        }\n        compiler.reportCodeChange();\n      }\n    }\n\n    // This is a helper method, assuming it's part of the same class.\n    // It is provided to show the necessary modification.\n    private Node createDeclarationNode() {\n      Node nameNode = Node.newString(Token.NAME, namespace);\n      nameNode.putBooleanProp(Node.IS_NAMESPACE, true);\n      // FIX: Change 'Object' to an empty object literal\n      Node valueNode = new Node(Token.OBJECTLIT);\n      Node assign = new Node(Token.ASSIGN, nameNode, valueNode);\n      assign.setJSDocInfo(explicitNode != null ? explicitNode.getJSDocInfo() : null);\n      Node expr = new Node(Token.EXPR_RESULT, assign);\n      expr.setJSDocInfo(explicitNode != null ? explicitNode.getJSDocInfo() : null);\n      // Mark the name node with the original source position of the provide.\n      expr.copyInformationFrom(firstNode);\n      return expr;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}