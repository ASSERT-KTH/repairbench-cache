{
    "generation": "    void replace() {\n      if (firstNode == null) {\n        replacementNode = candidateDefinition;\n        return;\n      }\n\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        replacementNode = candidateDefinition;\n        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.getType() == Token.NAME) {\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = new Node(Token.VAR, nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        }\n      } else {\n        replacementNode = createDeclarationNode();\n        if (firstModule == minimumModule) {\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n        } else {\n          int lastDotIndex = namespace.lastIndexOf('.');\n          String parentNamespace = namespace.substring(0, lastDotIndex);\n          ProvidedName parentName = providedNames.get(parentNamespace);\n          \n          if (parentName == null) {\n            // Create parent if it doesn't exist\n            ProcessClosurePrimitives processor = new ProcessClosurePrimitives(compiler, parentNamespace);\n            processor.process();\n            parentName = processor.providedNames.get(parentNamespace);\n          }\n\n          parentName.replacementNode.getParent().addChildAfter(\n              replacementNode, parentName.replacementNode);\n        }\n        if (explicitNode != null) {\n          explicitNode.detachFromParent();\n        }\n        compiler.reportCodeChange();\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}