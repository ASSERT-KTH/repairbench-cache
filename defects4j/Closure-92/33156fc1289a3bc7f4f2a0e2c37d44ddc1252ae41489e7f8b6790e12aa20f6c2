{
    "generation": "void replace() {\n  if (firstNode == null) {\n    // Don't touch the base case ('goog').\n    replacementNode = candidateDefinition;\n    return;\n  }\n\n  // Handle the case where there is a duplicate definition for an explicitly\n  // provided symbol.\n  if (candidateDefinition != null && explicitNode != null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n\n    // Does this need a VAR keyword?\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        // Need to convert this assign to a var declaration.\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        Node parent = candidateDefinition.getParent();\n        if (parent != null) {\n          parent.replaceChild(candidateDefinition, varNode);\n        }\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    // Handle the case where there's not a duplicate definition.\n    replacementNode = createDeclarationNode();\n\n    // --- FIX START ---\n    // For the case when firstModule != minimumModule,\n    // e.g. \"var apps = {};\" and \"var apps.foo = {};\" need to be placed in proper order.\n    int indexOfDot = namespace.indexOf('.');\n    Node insertionPoint = null;\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else if (indexOfDot == -1) {\n      // Any old place is fine.\n      compiler.getNodeForCodeInsertion(minimumModule)\n          .addChildToBack(replacementNode);\n    } else {\n      // Add it after the parent namespace.\n      ProvidedName parentName =\n          providedNames.get(namespace.substring(0, indexOfDot));\n      Preconditions.checkNotNull(parentName);\n      Preconditions.checkNotNull(parentName.replacementNode);\n      Node parentNode = parentName.replacementNode.getParent();\n      if (parentNode != null) {\n        parentNode.addChildAfter(replacementNode, parentName.replacementNode);\n      } else {\n        // If parentNode is null, just add to code insertion point.\n        compiler.getNodeForCodeInsertion(minimumModule)\n            .addChildToBack(replacementNode);\n      }\n    }\n    // --- FIX END ---\n\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}