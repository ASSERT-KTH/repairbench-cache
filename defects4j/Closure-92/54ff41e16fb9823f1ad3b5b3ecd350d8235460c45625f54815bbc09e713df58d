{
    "generation": "/**\n * Replace the provide statement.\n *\n * If we're providing a name with no definition, then create one.\n * If we're providing a name with a duplicate definition, then make sure\n * that definition becomes a declaration.\n */\nvoid replace() {\n  // Don't touch the base case ('goog').\n  if (\"goog\".equals(namespace)) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n\n  // Handle the case where there is a duplicate definition for an explicitly\n  // provided symbol.\n  if (candidateDefinition != null && explicitNode != null) {\n    // Remove the extra provide call.\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n\n    // Reuse the existing namespace definition, possibly converting it to 'var'.\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        // Convert \"a.b = {}\" to \"var a = {}\" if needed.\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    // Handle the case where there's not a duplicate definition.\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      // Insert right before the original provide().\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n      // Move this code up to the common module of all users.\n      int indexOfDot = namespace.indexOf('.');\n      if (indexOfDot == -1) {\n        // Top-level namespace with no dot: append anywhere in the common module.\n        compiler.getNodeForCodeInsertion(minimumModule)\n            .addChildToBack(replacementNode);\n      } else {\n        // Insert immediately after the declaration of the parent namespace.\n        String parent = namespace.substring(0, indexOfDot);\n        ProvidedName parentName = providedNames.get(parent);\n        Preconditions.checkNotNull(parentName);\n        Preconditions.checkNotNull(parentName.replacementNode);\n        parentName.replacementNode.getParent().addChildAfter(\n            replacementNode, parentName.replacementNode);\n      }\n    }\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}