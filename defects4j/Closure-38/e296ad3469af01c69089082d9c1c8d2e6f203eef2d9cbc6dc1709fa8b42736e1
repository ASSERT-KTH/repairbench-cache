{
    "generation": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    // Add a space before negative numbers or negative zero if the previous\n    // character is a minus sign.\n    if ((x < 0 || negativeZero) && prev == '-') {\n      add(\" \");\n    }\n\n    // Use the long representation if it's an integer and not negative zero.\n    // We don't want to print -0.0 as 0.\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      // Check if we should use exponential notation for large integers.\n      // Don't use it for numbers near 0, like 0.000001.\n      // We suppress exponential notation for integers between -100 and 100,\n      // exclusive. This prevents generating \"-1E2\" for -100, for example.\n      if (Math.abs(value) >= 100) {\n        // Calculate the exponent for scientific notation.\n        // This loop essentially finds the largest power of 10 that divides value.\n        // However, it uses floating-point math which can be imprecise.\n        // A better way might be to repeatedly divide by 10 and count.\n        // Example: value = 12000\n        // mantissa=12000, exp=0: 12000 / 10 * 10^(0+1) = 1200 * 10 = 12000 == 12000 (true)\n        // mantissa=1200, exp=1: 1200 / 10 * 10^(1+1) = 120 * 100 = 12000 == 12000 (true)\n        // mantissa=120, exp=2: 120 / 10 * 10^(2+1) = 12 * 1000 = 12000 == 12000 (true)\n        // mantissa=12, exp=3: 12 / 10 * 10^(3+1) = 1 * 10000 = 10000 != 12000 (false) -> loop ends\n        // This calculation seems error-prone due to floating point; integer division is safer.\n        // Let's keep the original logic for now, assuming it worked before.\n        // Note: Math.pow(10, exp + 1) can be large.\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      // Use exponential notation if the exponent is significant (arbitrarily > 2).\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      // Otherwise, use the standard double-to-string conversion.\n      // This handles non-integers, negative zero, NaN, Infinity.\n      add(String.valueOf(x));\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}