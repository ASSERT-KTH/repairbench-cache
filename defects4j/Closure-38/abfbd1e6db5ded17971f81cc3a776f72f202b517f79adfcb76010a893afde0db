{
    "generation": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    // Add a space between a negative number/negative zero and a preceding minus sign\n    // to prevent it from being parsed as a decrement operation (e.g., x--4).\n    // The condition `x < 0` is false for negative zero (-0.0), so we must explicitly\n    // check `negativeZero` as well.\n    if ((x < 0 || negativeZero) && prev == '-') {\n      add(\" \");\n    }\n\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        // This loop attempts to find a compact exponential representation\n        // (e.g., 123000 as 123E3).\n        // It's crucial that value is an integer and mantissa remains an integer\n        // for this exact check to work for powers of 10.\n        // We use Math.pow(10, exp + 1) to avoid potential floating point\n        // inaccuracies by comparing the original 'value' with the scaled 'mantissa'.\n        // The condition `mantissa / 10 * Math.pow(10, exp + 1) == value`\n        // is equivalent to `(mantissa / 10) * 10^(exp+1) == value`.\n        // If mantissa is 123000, and exp is 0, then mantissa/10 is 12300.\n        // 12300 * 10^(1) = 123000. So exp becomes 1. mantissa becomes 12300.\n        // If mantissa is 12300, exp is 1. mantissa/10 is 1230.\n        // 1230 * 10^(2) = 123000. So exp becomes 2. mantissa becomes 1230.\n        // If mantissa is 1230, exp is 2. mantissa/10 is 123.\n        // 123 * 10^(3) = 123000. So exp becomes 3. mantissa becomes 123.\n        // Next iteration: mantissa is 123, exp is 3. mantissa/10 is 12.\n        // 12 * 10^(4) != 123000. Loop terminates.\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) { // Only use exponential notation if it saves at least 3 digits\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      add(String.valueOf(x));\n    }\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}