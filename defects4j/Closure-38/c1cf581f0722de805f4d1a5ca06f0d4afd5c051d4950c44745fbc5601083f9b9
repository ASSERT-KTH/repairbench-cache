{
    "generation": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n      add(\" \");\n    }\n\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      // Handle negative zero case specially to prevent \"-0.0\" from being printed\n      // which would cause parsing issues with negative signs\n      if (negativeZero) {\n        // When printing negative zero directly, we need to ensure proper spacing\n        // to avoid ambiguity with consecutive minus operators\n        if (prev == '-') {\n          add(\" \")  // Ensure space before negative zero\n        }\n        add(\"-0.0\");\n      } else {\n        add(String.valueOf(x));\n      }\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}