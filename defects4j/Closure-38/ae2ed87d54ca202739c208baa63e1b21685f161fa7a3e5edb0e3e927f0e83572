{
    "generation": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    // Add a space if the previous token was a minus sign and the current number\n    // is negative (including negative zero), to prevent \"x--4\" being parsed as\n    // x minus minus 4.\n    if ((x < 0 || negativeZero) && prev == '-') {\n      add(\" \");\n    }\n\n    if ((long) x == x && !negativeZero) {\n      // If x is an exact integer and not negative zero, represent it as a long.\n      // Negative zero will be handled by the else branch to ensure it prints as \"-0.0\".\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      // For large integers, try to represent them in scientific notation if it's shorter.\n      // This part ensures that integers like 1000000 are not printed as 1E6 if it's not optimal.\n      if (Math.abs(x) >= 100) {\n        // Keep dividing by 10 as long as the value can be exactly represented\n        // as mantissa * 10^exp\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      // If the exponent is significant, use scientific notation.\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      // For non-integer doubles or negative zero, use String.valueOf(x).\n      // This will correctly print \"-0.0\", \"1.23\", etc.\n      add(String.valueOf(x));\n    }\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}