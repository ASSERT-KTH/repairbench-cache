{
    "generation": "  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    // Add a space if the number is negative (including negative zero) and\n    // the previous character was a minus sign, to prevent parsing errors like \"x--0.0\".\n    if ((x < 0 || negativeZero) && prev == '-') {\n      add(\" \");\n    }\n\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        // This loop attempts to find if the number can be represented in scientific notation\n        // with an integer mantissa (e.g., 1200 as 12E2).\n        // It's crucial that mantissa / 10 * Math.pow(10, exp + 1) == value\n        // correctly represents the original value, which can be tricky with floating point.\n        // A more robust check might involve comparing with a small epsilon or using integer arithmetic.\n        while (mantissa / 10.0 * Math.pow(10, exp + 1) == value) { // Changed to 10.0 to ensure double division\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      add(String.valueOf(x));\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}