{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  // Attach literal types *BEFORE* defining VAR and FUNCTION,\n  // so stub properties like JSDoc on 'goog.foo;' are picked up.\n  attachLiteralTypes(n);\n\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        // Do not define local function-expr as variable\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      // For stub property declaration, e.g. /** @param {number} x */ goog.foo;\n      // the JSDoc is attached to goog.foo which is an expr result in VAR child.\n      for (Node varChild = n.getFirstChild(); varChild != null; varChild = varChild.getNext()) {\n        attachLiteralTypes(varChild);\n      }\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}