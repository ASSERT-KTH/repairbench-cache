{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n\n  // Handle function stubs and \"this.foo;\"-style property stubs\n  if (n.isExprResult()) {\n    Node expr = n.getFirstChild();\n    // Handle function stub: \"goog.foo;\"\n    if (expr != null && expr.isGetProp()) {\n      defineSlot(expr, n, expr.getJSDocInfo(), expr.getQualifiedName(), true);\n    }\n    // Handle property stub: \"this.foo;\"\n    else if (expr != null && expr.isGetProp() && expr.getFirstChild().isThis()) {\n      defineSlot(expr, n, expr.getJSDocInfo(), expr.getQualifiedName(), true);\n    }\n  }\n\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}