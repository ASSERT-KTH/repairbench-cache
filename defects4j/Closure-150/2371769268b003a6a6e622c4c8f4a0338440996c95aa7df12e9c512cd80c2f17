{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  // Attach literal types before handling VAR and FUNCTION stubs,\n  // so stubs like \"goog.foo;\" (property with doc) work.\n  attachLiteralTypes(n);\n\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    // Add case for named property function stubs (e.g., \"goog.foo;\")\n    case Token.EXPR_RESULT:\n      Node expr = n.getFirstChild();\n      // Only define declared property stubs when they have JSDoc.\n      if (expr != null && expr.getType() == Token.GETPROP &&\n          NodeUtil.getBestJSDocInfo(expr) != null) {\n        defineDeclaredProperty(expr, parent);\n      }\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}