{
    "generation": "  @Override public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n      handleFunctionInputs(parent);\n      return;\n    }\n\n    attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        // Remove the condition that skips processing when parent is Token.NAME\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}