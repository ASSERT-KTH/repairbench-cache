{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Skip the function node itself.\n  if (n == scope.getRootNode()) {\n    return;\n  }\n\n  // Handle the parameter list of the function that owns this scope.\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  // First attach any literal types (@type, @return, @param) to the node.\n  attachLiteralTypes(n);\n\n  // Now handle stub declarations on qualified names, e.g.\n  //    /** @param {number} x */ goog.foo;\n  if ((n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {\n    JSDocInfo jsdoc = n.getJSDocInfo();\n    // We only care about \"stubs\" that carry a @type, @return or @param declaration.\n    if (jsdoc != null\n        && (jsdoc.getType()         != null\n            || jsdoc.getReturnType() != null\n            || jsdoc.getParameterCount() > 0)) {\n      // The full qualified name, e.g. \"goog.foo\"\n      String qName = n.getQualifiedName();\n      // The JSType that attachLiteralTypes just stuck on this GETPROP/GETELEM.\n      JSType stubType = n.getJSType();\n      if (qName != null && stubType != null) {\n        // 1) Declare a pseudo\u2010variable in this scope called \"goog.foo\"\n        //    so that later lookups like getVar(\"goog.foo\") will succeed.\n        Var stubVar = scope.declare(qName, n);\n        if (stubVar != null) {\n          stubVar.setType(stubType);\n          stubVar.setTypeInferred(false);\n        }\n        // 2) Define the property on the owner object's type\n        Node owner = n.getFirstChild();\n        JSType maybeOwnerType = null;\n        if (owner.isName() || owner.isThis()) {\n          Var ownerVar = scope.getVar(owner.getString());\n          if (ownerVar != null) {\n            maybeOwnerType = ownerVar.getType();\n          }\n        } else {\n          maybeOwnerType = owner.getJSType();\n        }\n        if (maybeOwnerType instanceof ObjectType) {\n          ObjectType ownerObj = (ObjectType) maybeOwnerType;\n          String propName = n.getLastChild().getString();\n          ownerObj.defineDeclaredProperty(propName, stubType, n);\n        }\n      }\n    }\n  }\n\n  // Finally handle ordinary function, catch and var declarations.\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      // Skip the NAME node when it's the child of a FUNCTION.\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}