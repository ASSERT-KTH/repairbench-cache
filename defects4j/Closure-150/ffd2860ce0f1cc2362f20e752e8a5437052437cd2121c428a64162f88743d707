{
    "generation": "    /**\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     */\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          // If the function is a function expression assigned to a NAME node\n          // (e.g., `var x = function() {}` or `foo = function() {}`),\n          // the variable `x` or `foo` will be handled by `defineVar` or during assignment.\n          // In this case, we don't need to define the function itself as a top-level symbol.\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.EXPR_RESULT:\n          // Handle cases like `/** @param {number} x */ goog.foo;`\n          // where a JSDoc annotation on an expression declares a type for a qualified name.\n          JSDocInfo info = n.getJSDocInfo();\n          if (info != null) {\n            Node expr = n.getFirstChild();\n            // Check if the expression is a qualified name (e.g., `goog.foo`)\n            // or a property access (e.g., `this.foo`).\n            if (expr != null && expr.isQualifiedName()) {\n              // This method (maybeDeclareQualifiedName) is assumed to be part of TypedScopeCreator,\n              // and it processes JSDoc information to declare symbols or properties.\n              // We pass `null` for the RHS type because it's a stub declaration.\n              maybeDeclareQualifiedName(info, expr, null);\n            }\n          }\n          break;\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}