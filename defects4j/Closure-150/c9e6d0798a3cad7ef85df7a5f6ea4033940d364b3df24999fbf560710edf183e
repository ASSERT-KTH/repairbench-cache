{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Don't process the root of this local scope.\n  if (n == scope.getRootNode()) {\n    return;\n  }\n\n  // Handle a \"stub\" qualified name in an expression statement,\n  // e.g. /** @param {T} x */ a.b;\n  if (n.getType() == Token.EXPR_RESULT) {\n    Node expr = n.getFirstChild();\n    if (expr != null\n        && (expr.getType() == Token.GETPROP\n            || expr.getType() == Token.GETELEM)) {\n      JSDocInfo jsdoc = n.getJSDocInfo();\n      if (jsdoc != null) {\n        // Move the JSDoc down to the GETPROP/GETELEM\n        n.setJSDocInfo(null);\n        expr.setJSDocInfo(jsdoc);\n        // Now attach the stub type\n        attachLiteralTypes(expr);\n        // Clear it so we don't re\u2010process on the child visit\n        expr.setJSDocInfo(null);\n      }\n    }\n  }\n\n  // Handle function parameters: the LP node immediately under the scope root.\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  // Attach any literal types (including names, number/string literals, etc.)\n  attachLiteralTypes(n);\n\n  // Handle local declarations\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      // Skip the NAME node when we have \"function foo() {}\"\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n\n    default:\n      // nothing else to do here\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}