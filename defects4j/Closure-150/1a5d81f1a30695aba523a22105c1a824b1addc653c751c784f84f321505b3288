{
    "generation": "    /**\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     */\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isNameDeclaration(parent)) {\n            // Handle namespaced function declarations\n            if (parent.getType() == Token.ASSIGN &&\n                parent.getFirstChild().getType() == Token.GETPROP) {\n              defineNamespacedFunction(parent);\n              return;\n            }\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }\n\n    private void defineNamespacedFunction(Node n) {\n      Node propNode = n.getFirstChild();\n      String propName = propNode.getLastChild().getString();\n      Node objNode = propNode.getFirstChild();\n      String objName = objNode.getString();\n\n      JSType objType = scope.getVar(objName).getType();\n      if (objType instanceof ObjectType) {\n        ObjectType objObjectType = (ObjectType) objType;\n        Node functionNode = n.getLastChild();\n        JSType functionType = getFunctionType(functionNode);\n        objObjectType.defineDeclaredProperty(\n            propName, functionType, n);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}