{
    "generation": "    /**\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     */\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      // Handle function inputs (parameters) at the PARAM_LIST node.\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      // Delegate processing of JSDoc-based declarations and other symbols\n      // to the appropriate handlers based on node type.\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          // Function declarations are handled via their name node.\n          // Function expressions need definition here.\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          // Define the catch variable.\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          // Define variables declared with 'var', 'let', or 'const'.\n          defineVar(n, parent);\n          break;\n        case Token.EXPR_RESULT:\n          // Handle declarations documented on expression statements,\n          // like /** @type {number} */ obj.prop;\n          // or /** @param {string} s */ ns.func;\n          // These calls likely delegate to methods in the outer TypedScopeCreator class.\n          handleTypedefDefinition(t, n, parent);\n          handleFunctionStubDefinition(t, n, parent);\n          break;\n      }\n\n      // After handling explicit declarations, try to infer types from literals.\n      attachLiteralTypes(n);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}