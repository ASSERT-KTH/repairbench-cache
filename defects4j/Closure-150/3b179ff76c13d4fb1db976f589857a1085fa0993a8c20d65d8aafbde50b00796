{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME && NodeUtil.isNamespacedFunction(parent)) {\n        handleNamespacedFunction(parent);\n      } else if (parent.getType() == Token.ASSIGN && parent.getParent().getType() == Token.NAME) {\n        handleCollectedFunction(parent);\n      } else if (parent.getType() == Token.EXPR_RESULT && parent.getParent().getType() == Token.BLOCK) {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}\n\nprivate void handleNamespacedFunction(Node parent) {\n  Node fnNode = parent.getFirstChild();\n  String ns = parent.getParent().getString();\n  String propName = parent.getString();\n  defineNamespacedFunction(fnNode, ns, propName);\n}\n\nprivate void handleCollectedFunction(Node parent) {\n  Node fnNode = parent.getFirstChild();\n  Node assignParent = parent.getParent();\n  String varName = assignParent.getString();\n  defineCollectedFunction(fnNode, varName);\n}\n\nprivate void defineNamespacedFunction(Node fnNode, String ns, String propName) {\n  JSType type = getNativeType(FUNCTION_TYPE);\n  ObjectType fnType = (ObjectType) type;\n  scope.getVar(ns).getPropertyType(propName).setDeclaredType(fnType);\n}\n\nprivate void defineCollectedFunction(Node fnNode, String varName) {\n  JSType type = getNativeType(FUNCTION_TYPE);\n  ObjectType fnType = (ObjectType) type;\n  scope.getVar(varName).setDeclaredType(fnType);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}