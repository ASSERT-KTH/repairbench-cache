{
    "generation": "    /**\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     */\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n\n      // Handle JSDoc-annotated nodes that define symbols. This is crucial for\n      // defining types for stubs (e.g., `goog.foo;`) or properties defined\n      // purely by JSDoc (`/** @type {string} */ someObj.prop;`).\n      // The `defineJSSymbol` method (presumably available in this class or a superclass)\n      // is responsible for parsing JSDoc and defining corresponding symbols or properties.\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null && defineJSSymbol(n, info, parent)) {\n        // If defineJSSymbol successfully processed the node and defined a symbol\n        // (e.g., a function stub, a typedef, a constant), no further generic\n        // symbol definition is needed for this node in the switch statement below.\n        return;\n      }\n\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          // This condition handles cases where a FUNCTION node is an initializer\n          // for a NAME node (e.g., `var x = function() {}`). In such cases,\n          // the variable `x` is defined by `defineVar`, and the function itself\n          // is not a top-level declaration in the current scope that needs\n          // `defineDeclaredFunction` to define its name (if it has one, it's\n          // scoped to the function itself). For named function expressions\n          // like `(function foo() {})`, the parent is `EXPR_RESULT`, so this\n          // block is skipped, and `defineDeclaredFunction` is called, correctly\n          // defining `foo` within its own scope.\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}