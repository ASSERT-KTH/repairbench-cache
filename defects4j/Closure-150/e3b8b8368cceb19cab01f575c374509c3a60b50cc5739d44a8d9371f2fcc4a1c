{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  // Attach JSDoc types to function stubs *before* literal types, so we know to\n  // define a function property on an object before we try to add the type to the object.\n  // This order is necessary for supporting type annotations on function stubs,\n  // such as: /** @param {number} x */ goog.foo;\n  if (n.getType() == Token.EXPR_RESULT) {\n    Node expr = n.getFirstChild();\n    if (expr != null && expr.getType() == Token.GETPROP && expr.getJSDocInfo() != null) {\n      defineFunctionLiteral(expr, n, expr.getJSDocInfo());\n    }\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    // Add support for stub declarations like /** @param {number} x */ goog.foo; or this.foo;\n    case Token.GETPROP:\n      if (parent != null && parent.getType() == Token.EXPR_RESULT && n.getJSDocInfo() != null) {\n        defineFunctionLiteral(n, parent, n.getJSDocInfo());\n      }\n      break;\n    case Token.GETELEM:\n      // Optionally handle gets like this[\"foo\"], etc.\n      break;\n    // Also allow property stub declarations on 'this'\n    case Token.STRING:\n      if (parent != null && parent.getType() == Token.GETPROP && parent.getFirstChild().getType() == Token.THIS && parent.getJSDocInfo() != null) {\n        defineFunctionLiteral(parent, t.getEnclosingFunction(), parent.getJSDocInfo());\n      }\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}