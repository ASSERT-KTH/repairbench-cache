{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      // Handle stub declaration on qualified names or property accesses,\n      // e.g., \"goog.foo;\" or \"this.foo;\" with JSDoc property declarations.\n      if ((n.getType() == Token.GETPROP || n.getType() == Token.GETELEM) &&\n          parent != null && parent.getType() != Token.ASSIGN) {\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && (info.hasType() || info.hasEnumParameterType() ||\n            info.isConstant() || info.containsDeclaration())) {\n          defineSlot(n, parent, info);\n        }\n      }\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}