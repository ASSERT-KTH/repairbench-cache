{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n\n  // Handle FUNCTION STUBS (unassigned function types for object properties, etc)\n  if (n.getJSDocInfo() != null && n.getJSDocInfo().hasType()) {\n    // e.g. goog.foo; /** @param {number} x */ goog.foo;\n    Node nameNode = n;\n    if (n.getType() == Token.EXPR_RESULT) {\n      nameNode = n.getFirstChild();\n    }\n    if (nameNode != null && nameNode.getType() == Token.GETPROP) {\n      defineFunctionLiteral(nameNode, parent, n.getJSDocInfo());\n    }\n  }\n\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}