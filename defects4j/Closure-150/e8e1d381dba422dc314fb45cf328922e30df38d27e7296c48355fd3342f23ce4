{
    "generation": "    /**\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     */\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n\n      // Always define stub declarations, even for assignment-style stubs.\n      // (This fixes goog.foo and this.foo stubs collected via JSDoc.)\n      if (n.getJSDocInfo() != null &&\n          (n.getJSDocInfo().containsFunctionDeclaration() ||\n           n.getJSDocInfo().containsConstructor())) {\n        if ((parent != null && parent.getType() == Token.EXPR_RESULT && n.getType() == Token.GETPROP) ||\n            (parent != null && parent.getType() == Token.EXPR_RESULT && n.getType() == Token.NAME)) {\n          defineDeclaredFunction(n, parent);\n        }\n      }\n\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}