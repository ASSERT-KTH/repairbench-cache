{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  // Attach literal types before processing var declarations and function stubs,\n  // so that JSDoc annotations are attached to the google.foo and this.foo stubs.\n  attachLiteralTypes(n);\n\n  // Handle function stubs (e.g. goog.foo; /** @param {number} x */ goog.foo;)\n  if (n.getType() == Token.EXPR_RESULT) {\n    Node expr = n.getFirstChild();\n    if (expr != null && expr.getType() == Token.GETPROP) {\n      defineDeclaredProperty(expr, n);\n    }\n  }\n\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}