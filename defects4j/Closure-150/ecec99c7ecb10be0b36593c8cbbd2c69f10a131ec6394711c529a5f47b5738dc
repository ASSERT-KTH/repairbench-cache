{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME && parent.getParent().getType() == Token.ASSIGN) {\n        // Handle namespaced function stubs\n        Node assign = parent.getParent();\n        Node name = assign.getFirstChild();\n        if (name.getType() == Token.GETPROP) {\n          String namespace = name.getFirstChild().getString();\n          String propertyName = name.getLastChild().getString();\n          ObjectType namespaceType = (ObjectType) scope.getVar(namespace).getType();\n          if (namespaceType != null && !namespaceType.hasProperty(propertyName)) {\n            namespaceType.defineDeclaredProperty(propertyName, getFunctionType(n), n);\n          }\n        }\n      } else if (parent.getType() == Token.VAR) {\n        // Handle constructor function stubs\n        String varName = parent.getFirstChild().getString();\n        ObjectType instanceType = ObjectType.cast(scope.getVar(varName).getType());\n        if (instanceType != null && n.getFirstChild().getType() == Token.NAME) {\n          String methodName = n.getFirstChild().getString();\n          if (!instanceType.hasProperty(methodName)) {\n            instanceType.defineDeclaredProperty(methodName, getFunctionType(n), n);\n          }\n        }\n      } else {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}