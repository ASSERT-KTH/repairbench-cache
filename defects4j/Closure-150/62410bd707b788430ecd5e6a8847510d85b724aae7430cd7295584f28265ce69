{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent != null && parent.getType() == Token.NAME) {\n        // Handle namespaced functions\n        defineNamespacedFunction(n, parent);\n      } else if (parent != null && parent.getType() == Token.ASSIGN) {\n        // Handle collected functions\n        defineCollectedFunction(n, parent);\n      } else {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}\n\nprivate void defineNamespacedFunction(Node functionNode, Node parent) {\n  String namespace = parent.getString();\n  String functionName = functionNode.getFirstChild().getString();\n  String fullName = namespace + \".\" + functionName;\n\n  JSDocInfo info = NodeUtil.getBestJSDocInfo(functionNode);\n  JSType type = getFunctionTypeFromJSDoc(info);\n\n  scope.declareNamespaceFunction(fullName, type, functionNode);\n}\n\nprivate void defineCollectedFunction(Node functionNode, Node parent) {\n  Node lhs = parent.getFirstChild();\n  if (lhs.getType() == Token.GETPROP) {\n    String namespace = lhs.getFirstChild().getString();\n    String functionName = lhs.getLastChild().getString();\n    String fullName = namespace + \".\" + functionName;\n\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(functionNode);\n    JSType type = getFunctionTypeFromJSDoc(info);\n\n    scope.declareCollectedFunction(fullName, type, functionNode);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}