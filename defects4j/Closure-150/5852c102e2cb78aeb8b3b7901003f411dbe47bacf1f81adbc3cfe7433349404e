{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n\n  // Handle function type annotations before variable definition.\n  if (n.getJSType() != null) {\n    JSType type = n.getJSType();\n    if (n.isQualifiedName() && type.isFunctionType()) {\n      String qualifiedName = n.getQualifiedName();\n      // Define a stub for the qualified name if it already exists as an object\n      TypedVar var = scope.getVar(qualifiedName);\n      if (var != null) {\n        JSType existingType = var.getType();\n        if (existingType != null && existingType.isObject()) {\n          ObjectType objType = (ObjectType) existingType;\n          String propName = n.getLastChild().getString();\n          objType.defineDeclaredProperty(propName, type, n);\n        }\n      } else {\n        // No var declaration yet, define a stub VAR for this qualified name\n        defineSlot(n, scope.getRootNode(), type, /*inferred=*/ false);\n      }\n    } else if (n.isGetProp() && type.isFunctionType()) {\n      String leftMostName = n.getFirstChild().getQualifiedName();\n      TypedVar var = scope.getVar(leftMostName);\n      if (var != null && var.getType() != null && var.getType().isObjectType()) {\n        ObjectType objectType = (ObjectType) var.getType();\n        objectType.defineDeclaredProperty(n.getLastChild().getString(), type, n);\n      }\n    }\n  }\n\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}