{
    "generation": "import com.google.javascript.rhino.JSDocInfo;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.FunctionType;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeExpression;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\nimport com.google.javascript.rhino.jstype.ObjectType;\n\n// Assume other necessary imports exist from the original class\n\n    /**\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     */\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      // Handle JSDoc annotated expression statements like:\n      // /** @type {number} */ ns.prop;\n      // /** @param {string} s */ ns.method;\n      // /** @return {number} */ this.method;\n      // This ensures that the type system knows about these declarations,\n      // especially for local scopes where they might not be picked up otherwise.\n      // Ref: https://github.com/google/closure-compiler/issues/134\n      if (n.getType() == Token.EXPR_RESULT) {\n        Node expr = n.getFirstChild();\n        JSDocInfo jsdoc = n.getJSDocInfo();\n        // Check for qualified names (NAME, GETPROP) or THIS properties (GETPROP)\n        // used as stubs with JSDoc.\n        if (jsdoc != null && expr.isQualifiedName()) {\n          // Check if JSDoc defines a type via @type or implies a function signature\n          // through other tags like @param, @return, @constructor, @interface, etc.\n          // We rely on the JSTypeRegistry to synthesize the function type if needed.\n          // Note: jsdoc.containsFunctionDeclaration() is not a real method in JSDocInfo,\n          // we use a combination of checks for tags that imply a function.\n          boolean definesFunction = jsdoc.hasReturnType()\n                || jsdoc.hasParameters() || jsdoc.hasThisType()\n                || jsdoc.isConstructor() || jsdoc.isInterface()\n                || !jsdoc.getTemplateTypeNames().isEmpty();\n\n\n          if (jsdoc.hasType() || definesFunction) {\n            JSType typeToDeclare = null;\n            JSTypeRegistry typeRegistry = t.getCompiler().getTypeRegistry();\n\n            if (jsdoc.hasType()) {\n              JSTypeExpression typeExpr = jsdoc.getType();\n              // Evaluate the type expression from @type\n              // Use the current scope for resolving type names.\n              typeToDeclare = typeExpr.evaluate(scope, typeRegistry);\n            } else { // definesFunction must be true\n              // Synthesize function type from JSDoc details.\n              // This relies on the registry having the capability.\n              // Pass 'expr' as the node associated with the declaration, which might be\n              // needed by the registry method for context (e.g., 'this' resolution).\n              FunctionType functionType = typeRegistry.createFunctionTypeFromJsDoc(jsdoc, expr, scope);\n              if (functionType != null) {\n                 typeToDeclare = functionType;\n                 // Ensure constructors/interfaces implicitly return their instance type\n                 // if no @return is specified.\n                 if ((jsdoc.isConstructor() || jsdoc.isInterface()) && !jsdoc.hasReturnType()) {\n                     ObjectType instanceType = functionType.getInstanceType();\n                     // Check instanceType is not null and is not explicitly the unknown type,\n                     // which might happen if the definition is recursive or erroneous.\n                     if (instanceType != null && !instanceType.isUnknownType()) {\n                         // Use withReturnType to avoid modifying the original type potentially cached.\n                         typeToDeclare = functionType.withReturnType(instanceType);\n                     }\n                 }\n              }\n            }\n\n            if (typeToDeclare != null) {\n              // Declare the variable/property using the existing declareVar helper.\n              // It handles qualified names and defining properties on object types.\n              // Pass 'expr' (the GETPROP/NAME node) as the declaration node.\n              // Pass 'n' (the EXPR_RESULT node) as the parent context node.\n              // The type comes from JSDoc, so it's not inferred.\n              declareVar(expr, n, typeToDeclare, jsdoc, /* inferred= */ false);\n\n              // Handled this node as a JSDoc declaration stub. Skip further processing.\n              return;\n            }\n          }\n        }\n      }\n\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          // Avoid defining variables for named function expressions, as they are\n          // handled by VAR declarations or assignments capturing them.\n          // This prevents double declarations for patterns like var x = function funcName() {};\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}