{
    "generation": "/**\n * Visit a node in a local scope, and add any local variables or catch\n * parameters into the local symbol table.\n *\n * @param t The node traversal.\n * @param n The node being visited.\n * @param parent The parent of n\n */\n@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  // Attach types *before* defining VARs, so stub property declarations\n  // (e.g. /** @type {string} */ foo.bar;) work for local scopes.\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      // Handle cases like \"var foo; /** @param {number} x */ foo.bar;\"\n      // so that \"foo.bar\"'s type is recorded in the scope.\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (child.getFirstChild() == null && child.isQualifiedName()) {\n          Var var = scope.getVar(child.getQualifiedName());\n          if (var != null) {\n            maybeDeclareQualifiedNameType(child, var.getType());\n          }\n        }\n      }\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}