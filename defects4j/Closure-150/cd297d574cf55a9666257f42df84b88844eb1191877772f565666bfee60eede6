{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) {\n    return;\n  }\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      // For function statements, the name node (parent) already handled the declaration.\n      if (parent != null && parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.GETPROP:\n      // If there is a JSDoc type annotation on a property access (e.g. a function stub),\n      // then treat it as a declared function and add it to the symbol table.\n      if (n.getJSDocInfo() != null && n.getJSDocInfo().getType() != null) {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}