{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        // Don't define, but *do* type-attach to stubs/forward declarations.\n        defineDeclaredFunction(n, parent);\n        break;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    // Add missing handling for annotated property function stubs (e.g. goog.foo).\n    case Token.ASSIGN:\n      if (n.getFirstChild().getType() == Token.GETPROP &&\n          n.getJSDocInfo() != null &&\n          n.getFirstChild().isQualifiedName()) {\n        defineDeclaredFunctionStubForQualifiedName(n, parent);\n      }\n      break;\n    case Token.EXPR_RESULT:\n      Node maybeGetProp = n.getFirstChild();\n      if (maybeGetProp != null\n          && maybeGetProp.getType() == Token.GETPROP\n          && maybeGetProp.isQualifiedName()\n          && maybeGetProp.getJSDocInfo() != null) {\n        defineDeclaredFunctionStubForQualifiedName(maybeGetProp, n);\n      }\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}