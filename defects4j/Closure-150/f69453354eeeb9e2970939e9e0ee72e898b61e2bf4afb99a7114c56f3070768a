{
    "generation": "    /**\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     */\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            // Function expression in a VAR declaration (e.g., var f = function() {})\n            // or an ASSIGNMENT (e.g., goog.foo = function() {})\n            // or a call (e.g., (function(){})())\n            // Its name will be defined by the VAR/ASSIGNMENT/CALL parent.\n            // We only care about named function declarations here.\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.GETPROP:\n        case Token.GETELEM:\n          // This handles explicitly declared properties with JSDoc,\n          // for example:\n          // /** @param {number} x */ goog.foo;\n          // /** @return {number} */ this.foo;\n          // /** @type {string} */ goog.bar;\n          // These are often \"stub\" declarations without an assignment.\n          // They appear as standalone statements, where the GETPROP/GETELEM\n          // node's parent is an EXPR_RESULT.\n          if (parent.getType() == Token.EXPR_RESULT) {\n            JSDocInfo info = n.getJSDocInfo();\n            if (info != null) {\n              // Try to get a type from the JSDoc. This method handles both\n              // function types (from @param, @return, @this, etc.) and\n              // general types (from @type, @const).\n              JSType propertyType = getFunctionAnnotation(n);\n              if (propertyType != null) {\n                // If a type was successfully extracted from JSDoc,\n                // define this property in the symbol table.\n                // It's not inferred, as its type is explicitly declared via JSDoc.\n                defineProperty(n, parent, propertyType, false /* inferred */);\n              }\n            }\n          }\n          break;\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}