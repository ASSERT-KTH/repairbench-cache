{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  // Handle function stubs and property declarations ahead of attachLiteralTypes,\n  // in order to collect correct property and function types before type analysis.\n  if (n.getType() == Token.NAME && parent != null) {\n    maybeHandleQualifiedNameDeclaration(n, parent);\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}\n\n/**\n * Handles qualified names and property declarations for function stubs and\n * property stubs, so that correct type info is assigned when they are\n * declared with JSDoc (for example: /** @param {number} x * / goog.foo;).\n */\nprivate void maybeHandleQualifiedNameDeclaration(Node n, Node parent) {\n  if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.VAR) {\n    // Only interested in stubs like goog.foo;\n    if (n.isQualifiedName()) {\n      JSDocInfo jsdoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsdoc != null && (jsdoc.containsFunction() || jsdoc.hasType()\n          || jsdoc.isConst() || jsdoc.isDefine() || jsdoc.isConstructor()\n          || jsdoc.isInterface())) {\n        defineSlot(n, parent, jsdoc);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}