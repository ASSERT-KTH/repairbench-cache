{
    "generation": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) {\n    return;\n  }\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      // When a FUNCTION node is a child of a NAME, the VAR declaration will\n      // do the work, so we can skip it here.\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.GETPROP:\n      // Handle namespaced function stubs (e.g. \"/** @param {number} x */ goog.foo;\")\n      // as well as properties on \"this\" in constructors.\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null && (info.hasParameterTypes() || info.hasReturnType())) {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}