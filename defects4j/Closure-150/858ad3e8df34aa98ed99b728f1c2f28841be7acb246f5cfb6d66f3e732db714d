{
    "generation": "    /**\n     * Visit a node in a local scope, and add any local variables or catch\n     * parameters into the local symbol table.\n     *\n     * @param t The node traversal.\n     * @param n The node being visited.\n     * @param parent The parent of n\n     */\n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            // This is a named function expression, e.g. `var x = function f() {}`\n            // The function name `f` is local to the function.\n            // Do not add `f` to the outer scope.\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.EXPR_RESULT:\n          // Handle cases where a JSDoc-annotated expression forms a declaration,\n          // like `/** @param {number} x */ goog.foo;` or `/** @type {string} */ MY_GLOBAL;`\n          // The JSDoc is attached to the child expression (e.g., GETPROP or NAME).\n          Node expr = n.getFirstChild();\n          if (expr != null) {\n            JSDocInfo exprInfo = expr.getJSDocInfo();\n            // Check if the JSDoc indicates a type declaration or constant/enum.\n            if (exprInfo != null && (exprInfo.hasType() || exprInfo.isConstant() ||\n                                     exprInfo.hasEnumParameter() || exprInfo.hasParameters() ||\n                                     exprInfo.hasReturnType() || exprInfo.hasThisType())) {\n              if (expr.isGetProp() || expr.isGetElem()) {\n                // For `goog.foo;` or `this.foo;` (GETPROP/GETELEM with JSDoc)\n                defineDeclaredProperty(expr, n); // expr is GETPROP/GETELEM, n is EXPR_RESULT (its parent)\n              } else if (expr.isName()) {\n                // For `MY_GLOBAL;` (NAME with JSDoc)\n                defineDeclaredVar(expr); // expr is NAME\n              }\n            }\n          }\n          break;\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}