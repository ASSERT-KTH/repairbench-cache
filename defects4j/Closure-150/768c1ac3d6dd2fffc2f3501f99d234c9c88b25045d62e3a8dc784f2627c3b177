{
    "generation": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      // Check if the function is assigned as a property (e.g., goog.foo = function...)\n      if (parent.getType() == Token.NAME && (parent.getParent().getType() == Token.VAR ||\n          parent.getParent().getType() == Token.PARAM ||\n          parent.getParent().getType() == Token.CATCH)) {\n        defineFunctionProperty(n, parent);\n      } else {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}