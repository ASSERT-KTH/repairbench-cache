{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text) {\n    // Adjust nextLineTabStop to avoid an infinite loop.\n    if (nextLineTabStop >= width) {\n        nextLineTabStop = width - 1;\n    }\n    final String padding = createPadding(nextLineTabStop);\n    // Prepend the padding so that the first chunk is indented as well.\n    text = padding + text;\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    \n    while (true) {\n        // Remove the chunk we have printed.\n        text = text.substring(pos).trim();\n        if (text.length() == 0) {\n            return sb;\n        }\n        // Prepend the padding to every new line.\n        text = padding + text;\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1) {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\n            pos = width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}