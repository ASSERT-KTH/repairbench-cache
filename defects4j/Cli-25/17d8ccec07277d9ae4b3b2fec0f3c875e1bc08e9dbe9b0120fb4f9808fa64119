{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb               The StringBuffer to place the rendered text into.\n * @param width            The number of characters to display per line\n * @param nextLineTabStop  The position on the next line for the first tab.\n * @param text             The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb,\n                                         int width,\n                                         int nextLineTabStop,\n                                         String text)\n{\n    // first wrap\u2010point\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        // no wrap needed\n        sb.append(rtrim(text));\n        return sb;\n    }\n    // append first segment\n    sb.append(rtrim(text.substring(0, pos)))\n      .append(defaultNewLine);\n\n    // if the requested indent is wider than the console,\n    // disable the indent rather than push it off the edge\n    if (nextLineTabStop >= width)\n    {\n        nextLineTabStop = 0;\n    }\n\n    // build the padding string for subsequent lines\n    final String padding = createPadding(nextLineTabStop);\n\n    // now wrap the rest\n    String remainder = text.substring(pos).trim();\n    while (remainder.length() > 0)\n    {\n        // attempt to find a wrap position after indent\n        int availWidth = width - nextLineTabStop;\n        int wrapPos = findWrapPos(remainder, availWidth, 0);\n\n        if (wrapPos == -1 || wrapPos > availWidth)\n        {\n            // no natural break; chunk at the edge\n            wrapPos = availWidth;\n        }\n\n        // append the next line, with padding\n        sb.append(padding)\n          .append(rtrim(remainder.substring(0, wrapPos)))\n          .append(defaultNewLine);\n\n        // advance & trim leading whitespace\n        remainder = remainder.substring(wrapPos).trim();\n    }\n\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}