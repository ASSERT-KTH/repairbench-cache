{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    if (nextLineTabStop >= width)\n    {\n        // stops infinite loop happening\n        nextLineTabStop = width - 1;\n    }\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        // Only add padding if the remainder is shorter than width\n        text = text.substring(pos).trim();\n\n        if (text.length() == 0) {\n            break;\n        }\n\n        // For subsequent lines, never add padding if the original line exceeded width\n        String line;\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            line = text;\n        }\n        else\n        {\n            line = text.substring(0, pos);\n        }\n\n        // Only add padding if the line is shorter than width\n        if (nextLineTabStop > 0 && line.length() < width) {\n            sb.append(padding);\n        }\n\n        sb.append(rtrim(line)).append(defaultNewLine);\n\n        if (pos == -1)\n        {\n            break;\n        }\n\n        text = text.substring(pos).trim();\n        if (text.length() == 0) {\n            break;\n        }\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}