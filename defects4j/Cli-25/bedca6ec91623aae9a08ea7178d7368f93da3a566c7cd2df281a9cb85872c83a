{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        // Only pad if the line is wrapped at a space; if a long word was broken,\n        // don't insert the padding, as per testLongLineChunkingIndentIgnored\n        // Compute the start index for the next chunk\n        text = text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            // Only add padding if there is more text and original wrap occurred at a space\n            if (nextLineTabStop > 0 && text.length() > 0 && !text.isEmpty())\n            {\n                sb.append(padding);\n            }\n            sb.append(text);\n\n            return sb;\n        }\n\n        // If the wrap position is exactly the width (word longer than width),\n        // do not pad before appending. This matches expected chunking.\n        if (pos == width)\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n        else\n        {\n            sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}