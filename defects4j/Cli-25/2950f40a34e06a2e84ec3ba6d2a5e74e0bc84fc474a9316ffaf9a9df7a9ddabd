{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    // Prevent an infinite loop when the indent is too wide.\n    if (nextLineTabStop >= width) {\n        nextLineTabStop = width - 1;\n    }\n    \n    final String padding = createPadding(nextLineTabStop);\n    // Trim and prepend the padding so that every line gets the indent.\n    text = text.trim();\n    text = padding + text;\n    \n    while (true) {\n        int pos = findWrapPos(text, width, 0);\n        if (pos == -1) {\n            sb.append(rtrim(text));\n            break;\n        }\n        // Handle degenerate case where only the indent is present\n        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\n            pos = width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos).trim();\n        if (text.length() == 0) {\n            break;\n        }\n        text = padding + text;\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}