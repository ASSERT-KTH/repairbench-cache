{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    if (nextLineTabStop >= width)\n    {\n        // stops infinite loop happening\n        nextLineTabStop = width - 1;\n    }\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters (EXCEPT if we're splitting a single word over multiple lines)\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        // remove leading spaces for wrapping\n        text = text.substring(pos).trim();\n\n        if (text.length() == 0)\n        {\n            break;\n        }\n\n        // Apply padding only if splitting did not happen at width boundary (i.e., normal split, not a \"word is too long\" case)\n        int nextPos = findWrapPos(text, width, 0);\n\n        // If we can't find any more wraps, just append what remains and quit.\n        if (nextPos == -1)\n        {\n            sb.append(padding).append(text);\n\n            return sb;\n        }\n\n        // Detect case: unbreakable long word (nextPos == width)\n        if (nextPos == width)\n        {\n            sb.append(padding).append(rtrim(text.substring(0, nextPos))).append(defaultNewLine);\n        }\n        else\n        {\n            sb.append(padding).append(rtrim(text.substring(0, nextPos))).append(defaultNewLine);\n        }\n\n        pos = nextPos;\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}