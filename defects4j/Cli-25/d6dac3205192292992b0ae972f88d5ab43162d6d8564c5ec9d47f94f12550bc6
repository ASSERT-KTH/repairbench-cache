{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text) {\n    // first, see if we need to wrap at all\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    // append the first chunk and a newline\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // guard against an indent that is too large\n    if (nextLineTabStop >= width) {\n        nextLineTabStop = width - 1;\n    }\n    // prepare the padding for subsequent lines\n    final String padding = createPadding(nextLineTabStop);\n\n    // now wrap the remaining text\n    text = text.substring(pos).trim();\n    while (text.length() > 0) {\n        // wrap at width minus the indent\n        pos = findWrapPos(text, width - nextLineTabStop, 0);\n        if (pos == -1) {\n            // no more wraps, append the rest\n            sb.append(padding).append(text);\n            return sb;\n        }\n        // append a chunk and a newline\n        sb.append(padding)\n          .append(rtrim(text.substring(0, pos)))\n          .append(defaultNewLine);\n        // trim off the part we just appended\n        text = text.substring(pos).trim();\n    }\n    return sb;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}