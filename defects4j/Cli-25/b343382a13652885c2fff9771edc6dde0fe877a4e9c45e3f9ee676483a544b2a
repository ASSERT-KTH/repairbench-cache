{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    // determine how much of 'text' will fit on the first line\n    int pos = findWrapPos(text, width, 0);\n\n    // if there's no natural break point but the text is longer than the width,\n    // force a break at 'width'; otherwise just append and return\n    if (pos == -1) {\n        if (text.length() > width) {\n            pos = width;\n        } else {\n            sb.append(rtrim(text));\n            return sb;\n        }\n    }\n\n    // append the first chunk\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // guard against indent >= width (to avoid an infinite loop)\n    if (nextLineTabStop >= width) {\n        nextLineTabStop = width - 1;\n    }\n    final String padding = createPadding(nextLineTabStop);\n\n    // handle all subsequent lines\n    while (true) {\n        // trim off the chunk we've just printed\n        text = text.substring(pos).trim();\n        if (text.length() == 0) {\n            return sb;\n        }\n\n        // re\u2010prefix with the padding for the next line\n        text = padding + text;\n\n        // find the wrap position, skipping over the padding region\n        pos = findWrapPos(text, width, nextLineTabStop);\n\n        // if again there's no natural break but the line is too long,\n        // force a break; otherwise append the rest and exit\n        if (pos == -1) {\n            if (text.length() > width) {\n                pos = width;\n                sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n                // continue looping to handle any further remainder\n                continue;\n            } else {\n                sb.append(text);\n                return sb;\n            }\n        }\n\n        // append the next chunk and repeat\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}