{
    "generation": "/**\n * Render the specified text and return the rendered contents\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line.\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb,\n                                         int width,\n                                         int nextLineTabStop,\n                                         String text)\n{\n    // first wrap position (no indent yet)\n    int pos = findWrapPos(text, width, 0);\n\n    // if no wrapping is required, just append the text\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n\n    // append the first line and a newline\n    sb.append(rtrim(text.substring(0, pos)))\n      .append(defaultNewLine);\n\n    // guard against infinite loops\n    if (nextLineTabStop >= width) {\n        nextLineTabStop = width - 1;\n    }\n\n    // prepare the padding for subsequent lines\n    final String padding = createPadding(nextLineTabStop);\n\n    // now wrap the rest of the text\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        // key change: skip the indent when looking for wrap\n        pos = findWrapPos(text, width, nextLineTabStop);\n\n        // if the remainder is short enough, just append it\n        if (pos == -1) {\n            sb.append(text);\n            return sb;\n        }\n\n        // catch cases where findWrapPos hits inside the pad\n        if ((text.length() > width) && (pos <= nextLineTabStop)) {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos)))\n          .append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}