{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb               The StringBuffer to place the rendered text into.\n * @param width            The number of characters to display per line\n * @param nextLineTabStop  The position on the next line for the first tab.\n * @param text             The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb,\n                                         int width,\n                                         int nextLineTabStop,\n                                         String text)\n{\n    // first wrap: no indent accounted in 'startPos'\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n\n    // append first chunk\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // guard against infinite loop if indent >= width\n    if (nextLineTabStop >= width)\n    {\n        nextLineTabStop = width - 1;\n    }\n    final String padding = createPadding(nextLineTabStop);\n\n    // subsequent lines: include indent in the wrap calculation\n    while (true)\n    {\n        // trim leading whitespace then re\u2010prefix with padding\n        text = padding + text.substring(pos).trim();\n\n        // now wrap text taking the indent into account\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n\n        // append next chunk\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}