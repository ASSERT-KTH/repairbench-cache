{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    if (nextLineTabStop >= width)\n    {\n        // stops infinite loop happening\n        nextLineTabStop = width - 1;\n    }\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters, BUT if starting the next line with a long word\n    // (like a long class name or long option), *do not* pad.\n    final String padding = createPadding(nextLineTabStop);\n\n    boolean firstLine = true;\n    while (true)\n    {\n        // If text after the previous break has no spaces at start OR\n        // it is a long unbroken word (i.e. length > width), do not pad.\n        String remainder = text.substring(pos).trim();\n        boolean needsPadding = !firstLine && remainder.length() > 0 && !(remainder.length() > width && !remainder.contains(\" \"));\n\n        if (needsPadding) {\n            text = padding + remainder;\n        } else {\n            text = remainder;\n        }\n\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n\n        // Fix for long lines without spaces: always use width as chunk size\n        if (text.length() > width && pos == -1) {\n            pos = width;\n        } else if ( (text.length() > width) && (pos == nextLineTabStop - 1) )  {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        firstLine = false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}