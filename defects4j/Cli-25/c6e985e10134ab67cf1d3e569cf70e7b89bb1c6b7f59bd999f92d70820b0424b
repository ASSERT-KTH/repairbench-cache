{
    "generation": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            // stops infinite loop happening\n            nextLineTabStop = width - 1;\n        }\n\n        // all following lines must be padded with nextLineTabStop space\n        // characters\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            String remainingText = text.substring(pos).trim();\n            text = padding + remainingText;\n            pos = findWrapPos(text, width, padding.length());\n\n            if (pos == -1)\n            {\n                sb.append(text);\n                return sb;\n            }\n\n            if ((text.length() > width) && (pos == width))\n            {\n                // handle the case where the line is too long and we're at the width limit\n                sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n                // adjust position and continue\n                text = padding + remainingText.substring(pos - padding.length());\n                continue;\n            }\n\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n            // Update the remaining text correctly\n            remainingText = text.substring(pos).trim();\n            text = padding + remainingText;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}