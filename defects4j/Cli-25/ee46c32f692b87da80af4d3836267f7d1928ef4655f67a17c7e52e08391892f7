{
    "generation": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    // If the original text begins with whitespace then we want to preserve that\n    // by using a single space indent on wrapped lines (as for option descriptions),\n    // otherwise use the calculated padding (as for usage texts).\n    boolean preserveLeadingSpace = text.length() > 0 && Character.isWhitespace(text.charAt(0));\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    if (nextLineTabStop >= width)\n    {\n        // stop infinite loop\n        nextLineTabStop = width - 1;\n    }\n\n    // The full padding is used for texts that did not start with a whitespace.\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        // If the original text started with a whitespace (as is the case for option descriptions),\n        // use a single space indent on subsequent wrapped lines; otherwise use the computed padding.\n        text = (preserveLeadingSpace ? \" \" : padding) + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n        \n        if ((text.length() > width) && (pos == nextLineTabStop - 1))\n        {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}