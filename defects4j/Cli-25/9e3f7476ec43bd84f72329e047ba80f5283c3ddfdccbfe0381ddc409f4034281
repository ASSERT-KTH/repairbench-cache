{
    "generation": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\nprotected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    // nothing to wrap, just trim trailing spaces and return\n    if (pos == -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n\n    // append up to the wrap point\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // if caller didn't supply an indent (e.g. usage), use the wrap offset\n    if (nextLineTabStop <= 0) {\n        nextLineTabStop = pos;\n    }\n    // guard against indent >= width to avoid an infinite loop\n    if (nextLineTabStop >= width) {\n        nextLineTabStop = width - 1;\n    }\n\n    final String padding = createPadding(nextLineTabStop);\n\n    // now wrap the rest, always padding each new line\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        // last chunk\n        if (pos == -1) {\n            sb.append(text);\n            return sb;\n        }\n        // catch the pathological case where the only break is in the padding area\n        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {\n            pos = width;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}