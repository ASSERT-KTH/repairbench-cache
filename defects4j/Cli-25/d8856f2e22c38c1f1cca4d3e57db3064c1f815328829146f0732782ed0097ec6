{
    "generation": "    protected StringBuffer renderWrappedText(StringBuffer sb, int width,\n                                             int nextLineTabStop, String text)\n    {\n        int pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n        if (nextLineTabStop >= width)\n        {\n            nextLineTabStop = width - 1;\n        }\n\n        final String padding = createPadding(nextLineTabStop);\n\n        while (true)\n        {\n            // Get the remaining text but don't trim it yet\n            String remainingText = text.substring(pos);\n            // Apply padding to the remaining text\n            text = padding + remainingText;\n\n            // Now find the wrap position in the new text\n            pos = findWrapPos(text, width, 0);\n\n            if (pos == -1)\n            {\n                sb.append(text);\n                return sb;\n            }\n\n            if ((text.length() > width) && (pos == nextLineTabStop - 1))\n            {\n                pos = width;\n            }\n\n            // Extract the line up to pos (accounting for padding)\n            // But don't trim yet since we might have spaces from the original text\n            String lineToAdd = text.substring(0, pos);\n            // Rtrim only the portion we're adding (not the entire remaining text)\n            sb.append(rtrim(lineToAdd)).append(defaultNewLine);\n\n            // Move forward in the original text, not the padded text\n            // First, calculate how much we've consumed from the original text\n            int consumedFromOriginal = 0;\n            if (remainingText.length() > 0) {\n                // Calculate how much of the original text was in this line\n                // Pos could be within the padding, so we need to adjust\n                if (pos < padding.length()) {\n                    consumedFromOriginal = 0; // nothing from original was used\n                } else {\n                    // The amount used from original is pos minus padding length\n                    consumedFromOriginal = pos - padding.length();\n                    // But don't exceed the available remaining text\n                    if (consumedFromOriginal > remainingText.length()) {\n                        consumedFromOriginal = remainingText.length();\n                    }\n                }\n            }\n\n            // Update the remaining text for next iteration\n            text = remainingText.substring(consumedFromOriginal);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}