{
    "generation": "/**\n * Decompose a symmetric positive semidefinite matrix.\n *\n * @param matrix Symmetric positive semidefinite matrix.\n * @param small Diagonal elements threshold under which columns are\n * considered to be dependent on previous ones and are discarded.\n * @exception NonPositiveDefiniteMatrixException if the matrix is not\n * positive semidefinite.\n */\npublic RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n    throws NonPositiveDefiniteMatrixException {\n\n    final int order = matrix.getRowDimension();\n    final double[][] c = matrix.getData();\n    // b will hold the Cholesky factor (in permuted order)\n    final double[][] b = new double[order][order];\n\n    // This index array will keep track of the permutation applied.\n    int[] index = new int[order];\n    for (int i = 0; i < order; i++) {\n        index[i] = i;\n    }\n\n    int r = 0;\n    boolean continueLoop = true;\n    while (continueLoop) {\n        // Find the pivot: the index (among r ... order-1) with the largest diagonal element.\n        int maxIndex = r;\n        for (int i = r + 1; i < order; i++) {\n            if (c[index[i]][index[i]] > c[index[maxIndex]][index[maxIndex]]) {\n                maxIndex = i;\n            }\n        }\n        // Swap the pivot into position r if necessary.\n        if (maxIndex != r) {\n            int tmp = index[r];\n            index[r] = index[maxIndex];\n            index[maxIndex] = tmp;\n        }\n\n        int ir = index[r];\n        if (c[ir][ir] < small) {\n            // If no column has been computed yet, the matrix cannot be decomposed.\n            if (r == 0) {\n                throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n            }\n            // Check remaining diagonal elements: if any is substantially negative,\n            // then the matrix is not positive semidefinite.\n            for (int i = r; i < order; i++) {\n                if (c[index[i]][index[i]] < -small) {\n                    throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                }\n            }\n            // At this point the rest of the matrix is (almost) null.\n            // We include one zero column in the factor and stop the loop.\n            r++;\n            continueLoop = false;\n        } else {\n            // Compute the new column of the factor.\n            final double diagSqrt = FastMath.sqrt(c[ir][ir]);\n            b[r][r] = diagSqrt;\n            final double inverse = 1.0 / diagSqrt;\n            // Update the rest of the column and modify the trailing submatrix.\n            for (int i = r + 1; i < order; i++) {\n                int ii = index[i];\n                final double e = inverse * c[ii][ir];\n                b[i][r] = e;\n                c[ii][ii] -= e * e;\n                for (int j = r + 1; j < i; j++) {\n                    int ij = index[j];\n                    final double f = c[ii][ij] - e * b[j][r];\n                    c[ii][ij] = f;\n                    c[ij][ii] = f;\n                }\n            }\n            r++;\n            if (r >= order) {\n                continueLoop = false;\n            }\n        }\n    }\n\n    // Build the root (Cholesky factor) matrix.\n    // The factor b was computed in the permuted order; we now undo the permutation.\n    rank = r;\n    root = MatrixUtils.createRealMatrix(order, r);\n    for (int i = 0; i < order; i++) {\n        for (int j = 0; j < r; j++) {\n            root.setEntry(index[i], j, b[i][j]);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}