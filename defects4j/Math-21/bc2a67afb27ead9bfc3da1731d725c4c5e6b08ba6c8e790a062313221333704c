{
    "generation": "    /**\n     * Decompose a symmetric positive semidefinite matrix.\n     *\n     * @param matrix Symmetric positive semidefinite matrix.\n     * @param small Diagonal elements threshold under which  column are\n     * considered to be dependent on previous ones and are discarded.\n     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n     * positive semidefinite.\n     */\n    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        \n        // Deep copy the matrix data as it will be modified during decomposition.\n        // matrix.getData() returns a reference to the internal array, so a deep copy is necessary.\n        final double[][] c = new double[order][order];\n        final double[][] originalData = matrix.getData();\n        for (int i = 0; i < order; ++i) {\n            System.arraycopy(originalData[i], 0, c[i], 0, order);\n        }\n\n        final double[][] b = new double[order][order];\n\n        // index stores the permutation of original row/column indices\n        int[] index = new int[order];\n        for (int i = 0; i < order; ++i) {\n            index[i] = i;\n        }\n\n        int r = 0; // Current rank / column being processed in the Cholesky factor\n        for (boolean loop = true; loop;) {\n\n            // find maximal diagonal element in the remaining submatrix\n            // 'p' will store the index within the 'index' array\n            // that corresponds to the row with the largest diagonal element.\n            int p = r; // Initialize p to the current pivot position in the index array\n            for (int i = r + 1; i < order; ++i) {\n                // Compare diagonal elements c[original_row_index][original_row_index]\n                // index[i] gives the original row index for the i-th element in the current permutation\n                if (c[index[i]][index[i]] > c[index[p]][index[p]]) {\n                    p = i;\n                }\n            }\n\n            // swap elements in the index array if the maximal element is not at the current position 'r'\n            if (p != r) {\n                int tmp = index[r];\n                index[r] = index[p];\n                index[p] = tmp;\n            }\n\n            // ir is the original row/column index of the current pivot\n            final int ir = index[r];\n\n            // check diagonal element\n            if (c[ir][ir] < small) {\n                // Diagonal element is considered zero or numerically insignificant\n\n                if (r == 0) {\n                    // If the first diagonal element (after pivoting to be maximal) is too small,\n                    // the matrix is considered non-positive semidefinite.\n                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n                }\n\n                // If r > 0, check remaining diagonal elements\n                for (int i = r; i < order; ++i) {\n                    // If any remaining diagonal element is significantly negative,\n                    // the matrix is not positive semidefinite.\n                    if (c[index[i]][index[i]] < -small) {\n                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                    }\n                }\n\n                // All remaining diagonal elements are close to zero, so we consider\n                // the rank found. The loop will terminate.\n                ++r;\n                loop = false;\n\n            } else {\n                // Diagonal element is significant, proceed with decomposition\n\n                // Calculate the square root of the diagonal element\n                final double sqrt = FastMath.sqrt(c[ir][ir]);\n                b[r][r] = sqrt; // Store L_rr (diagonal element of the Cholesky factor)\n\n                // Calculate the inverse of the square root\n                final double inverse  = 1 / sqrt;\n\n                // Update the remaining submatrix and calculate off-diagonal elements of L\n                for (int i = r + 1; i < order; ++i) {\n                    final int ii = index[i]; // Original row index for the current row 'i' in the pivoted system\n\n                    // Calculate L_ir (element of the Cholesky factor)\n                    final double e = inverse * c[ii][ir];\n                    b[i][r] = e; // Store L_ir\n\n                    // Update the diagonal element of the remaining submatrix A' = A - L_r L_r^T\n                    // This corresponds to A'_{ii} = A_{ii} - L_{ii,r}^2\n                    c[ii][ii] -= e * e;\n\n                    // Update off-diagonal elements of the remaining submatrix\n                    // This corresponds to A'_{ij} = A_{ij} - L_{ii,r} * L_{jj,r}\n                    for (int j = r + 1; j < i; ++j) {\n                        final int ij = index[j]; // Original column index for the current column 'j'\n                        final double f = c[ii][ij] - e * b[j][r]; // c[ii][ij] is c[index[i]][index[j]]\n                        c[ii][ij] = f;\n                        c[ij][ii] = f; // Maintain symmetry in 'c' for the remaining submatrix\n                    }\n                }\n\n                // Prepare for the next iteration: increment rank and continue if not all columns processed\n                loop = ++r < order;\n            }\n        }\n\n        // build the root matrix (L)\n        rank = r; // The determined rank of the matrix\n        root = MatrixUtils.createRealMatrix(order, r); // The root matrix has dimensions order x rank\n\n        // Populate the root matrix using the calculated 'b' elements and the 'index' permutation.\n        // b[i][j] stores the element L_{index[i], pivoted_column_j}\n        // root.setEntry(original_row_index, root_column_index, value)\n        for (int i = 0; i < order; ++i) { // Iterate through all original row indices (0 to order-1)\n            for (int j = 0; j < r; ++j) { // Iterate through the columns of the root matrix (0 to rank-1)\n                // index[i] provides the original row index that corresponds to the\n                // i-th row in the permuted 'b' matrix.\n                root.setEntry(index[i], j, b[i][j]);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}