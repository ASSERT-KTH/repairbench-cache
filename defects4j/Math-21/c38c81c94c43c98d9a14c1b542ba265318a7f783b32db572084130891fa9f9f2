{
    "generation": "    /**\n     * Decompose a symmetric positive semidefinite matrix.\n     *\n     * @param matrix Symmetric positive semidefinite matrix.\n     * @param small Diagonal elements threshold under which columns are\n     *              considered to be dependent on previous ones and are discarded.\n     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n     *            positive semidefinite.\n     */\n    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getData();\n        final double[][] b = new double[order][order];\n\n        // Permutation of rows/columns\n        int[] index = new int[order];\n        for (int i = 0; i < order; i++) {\n            index[i] = i;\n        }\n\n        int r = 0;\n        boolean loop = true;\n        while (loop) {\n\n            // 1) Pivot selection: find the largest diagonal entry among\n            //    the rows/columns r..order-1\n            int pivot = r;\n            double max = c[index[r]][index[r]];\n            for (int i = r + 1; i < order; i++) {\n                double diag = c[index[i]][index[i]];\n                if (diag > max) {\n                    max = diag;\n                    pivot = i;\n                }\n            }\n            // 2) Swap the chosen pivot into position r\n            if (pivot != r) {\n                int tmp = index[r];\n                index[r] = index[pivot];\n                index[pivot] = tmp;\n            }\n\n            int ir = index[r];\n            // 3) Check for (near) zero pivot\n            if (c[ir][ir] < small) {\n                if (r == 0) {\n                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n                }\n                // verify no significantly negative diagonal remains\n                for (int i = r; i < order; i++) {\n                    if (c[index[i]][index[i]] < -small) {\n                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                    }\n                }\n                // treat the rest as zero \u2014 we have our rank\n                r++;\n                loop = false;\n            } else {\n                // 4) Perform the Cholesky step on the pivot\n                double sqrt = FastMath.sqrt(c[ir][ir]);\n                b[r][r] = sqrt;\n                double inv = 1.0 / sqrt;\n                for (int i = r + 1; i < order; i++) {\n                    int ii = index[i];\n                    double e = inv * c[ii][ir];\n                    b[i][r] = e;\n                    c[ii][ii] -= e * e;\n                    for (int j = r + 1; j < i; j++) {\n                        int ij = index[j];\n                        double f = c[ii][ij] - e * b[j][r];\n                        c[ii][ij] = f;\n                        c[ij][ii] = f;\n                    }\n                }\n                // 5) Move to the next pivot\n                r++;\n                loop = (r < order);\n            }\n        }\n\n        // build the root matrix from b and the permutation\n        rank = r;\n        root = MatrixUtils.createRealMatrix(order, r);\n        for (int i = 0; i < order; i++) {\n            for (int j = 0; j < r; j++) {\n                root.setEntry(index[i], j, b[i][j]);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}