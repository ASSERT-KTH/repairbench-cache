{
    "generation": "    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getData();\n        final double[][] b = new double[order][order];\n\n        int[] swap  = new int[order];\n        int[] index = new int[order];\n        for (int i = 0; i < order; ++i) {\n            index[i] = i;\n        }\n\n        int r = 0;\n        for (boolean loop = true; loop;) {\n\n            // find maximal diagonal element\n            swap[r] = r;\n            for (int i = r + 1; i < order; ++i) {\n                int ii  = index[i];\n                int isi = index[swap[r]];\n                if (Math.abs(c[ii][ii]) > Math.abs(c[isi][isi])) {\n                    swap[r] = i;\n                }\n            }\n\n            // swap elements\n            if (swap[r] != r) {\n                int tmp = index[r];\n                index[r] = index[swap[r]];\n                index[swap[r]] = tmp;\n            }\n\n            // check diagonal element\n            int ir = index[r];\n            if (Math.abs(c[ir][ir]) < small) {\n                // Check if we should consider this column as independent\n                boolean independent = true;\n                for (int i = 0; i < r; ++i) {\n                    int ii = index[i];\n                    double sum = 0;\n                    for (int j = 0; j < r; ++j) {\n                        sum += b[ii][j] * b[ir][j];\n                    }\n                    if (Math.abs(c[ii][ir] - sum) > small) {\n                        independent = false;\n                        break;\n                    }\n                }\n\n                if (independent) {\n                    // The column is independent despite small diagonal element\n                    // Consider it as a new basis vector\n                    b[r][r] = Math.sqrt(Math.abs(c[ir][ir])); // use small positive value to avoid division by zero\n                } else {\n                    if (r == 0) {\n                        throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n                    }\n                    // check remaining diagonal elements\n                    boolean allSmall = true;\n                    for (int i = r; i < order; ++i) {\n                        if (c[index[i]][index[i]] < -small) {\n                            throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                        }\n                        if (Math.abs(c[index[i]][index[i]]) >= small) {\n                            allSmall = false;\n                        }\n                    }\n                    if (allSmall) {\n                        ++r;\n                        loop = false;\n                    } else {\n                        // continue with next column\n                        ++r;\n                        if (r >= order) {\n                            loop = false;\n                        }\n                    }\n                    continue;\n                }\n            }\n\n            // transform the matrix\n            double sqrt;\n            if (c[ir][ir] <= 0) {\n                sqrt = Math.sqrt(small);\n            } else {\n                sqrt = FastMath.sqrt(c[ir][ir]);\n            }\n            b[r][r] = sqrt;\n            double inverse = 0;\n            if (sqrt != 0) {\n                inverse = 1 / sqrt;\n            }\n            for (int i = r + 1; i < order; ++i) {\n                final int ii = index[i];\n                double e = (sqrt == 0) ? 0 : inverse * c[ii][ir];\n                b[i][r] = e;\n                c[ii][ii] -= e * e;\n                for (int j = r + 1; j < i; ++j) {\n                    final int ij = index[j];\n                    double f = c[ii][ij] - e * b[j][r];\n                    c[ii][ij] = f;\n                    c[ij][ii] = f;\n                }\n            }\n\n            // prepare next iteration\n            loop = ++r < order;\n        }\n\n        // build the root matrix\n        rank = r;\n        root = MatrixUtils.createRealMatrix(order, r);\n        for (int i = 0; i < order; ++i) {\n            for (int j = 0; j < r; ++j) {\n                root.setEntry(index[i], j, b[i][j]);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}