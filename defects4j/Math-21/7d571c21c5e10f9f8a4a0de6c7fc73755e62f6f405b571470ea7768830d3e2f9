{
    "generation": "    /**\n     * Decompose a symmetric positive semidefinite matrix.\n     *\n     * @param matrix Symmetric positive semidefinite matrix.\n     * @param small Diagonal elements threshold under which  column are\n     * considered to be dependent on previous ones and are discarded.\n     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n     * positive semidefinite.\n     */\n    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getData();\n        final double[][] b = new double[order][order];\n\n        int[] swap  = new int[order];\n        int[] index = new int[order];\n        for (int i = 0; i < order; ++i) {\n            index[i] = i;\n        }\n\n        int r = 0;\n        for (boolean loop = true; loop;) {\n\n            // find maximal diagonal element\n            // At each step 'r', we search for the largest diagonal element\n            // in the remaining submatrix (from logical row 'r' to 'order-1').\n            // 'swap[r]' will store the logical index (within the 'index' array)\n            // of the row containing this maximal diagonal element.\n            swap[r] = r; // Initialize: assume the current logical row 'r' has the maximum.\n            for (int i = r + 1; i < order; ++i) {\n                // Compare c[index[i]][index[i]] with c[index[swap[r]]][index[swap[r]]].\n                // index[i] is the physical row/column index of the current candidate.\n                // index[swap[r]] is the physical row/column index of the current maximum found for this step.\n                if (c[index[i]][index[i]] > c[index[swap[r]]][index[swap[r]]]) { // BUG FIX: changed index[swap[i]] to index[swap[r]]\n                    swap[r] = i; // Update 'swap[r]' to store the logical index 'i' if a larger element is found.\n                }\n            }\n\n\n            // swap elements\n            // If the maximal element is not already at the current pivot position 'r',\n            // swap the physical indices in the 'index' array to bring it to 'r'.\n            if (swap[r] != r) {\n                int tmp = index[r];\n                index[r] = index[swap[r]];\n                index[swap[r]] = tmp;\n            }\n\n            // check diagonal element\n            int ir = index[r]; // 'ir' is the physical index of the current pivot row/column.\n            if (c[ir][ir] < small) {\n\n                if (r == 0) {\n                    // If the first diagonal element (after pivoting) is too small,\n                    // the matrix might not be positive semidefinite.\n                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n                }\n\n                // If the current diagonal element is small, it means this column is\n                // considered linearly dependent. Check remaining elements for negativity.\n                for (int i = r; i < order; ++i) {\n                    // Check if any remaining diagonal elements are significantly negative.\n                    if (c[index[i]][index[i]] < -small) {\n                        // If so, the original matrix is not positive semidefinite.\n                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                    }\n                }\n\n                // All remaining diagonal elements are close to zero.\n                // We've found the rank of the matrix. Decomposition stops.\n                ++r;\n                loop = false;\n\n            } else {\n\n                // The diagonal element is sufficiently large, proceed with Cholesky transformation.\n                final double sqrt = FastMath.sqrt(c[ir][ir]);\n                b[r][r] = sqrt; // Set the diagonal element of the lower triangular matrix B.\n                final double inverse  = 1 / sqrt;\n                for (int i = r + 1; i < order; ++i) {\n                    final int ii = index[i]; // Physical row index for 'i'-th logical row.\n                    final double e = inverse * c[ii][ir]; // Calculate L_ir element (M_ir / L_rr).\n                    b[i][r] = e; // Store L_ir in B.\n                    c[ii][ii] -= e * e; // Update diagonal element: M_ii = M_ii - L_ir^2.\n                    for (int j = r + 1; j < i; ++j) {\n                        final int ij = index[j]; // Physical column index for 'j'-th logical column.\n                        final double f = c[ii][ij] - e * b[j][r]; // Update M_ij = M_ij - L_ir * L_jr.\n                        c[ii][ij] = f;\n                        c[ij][ii] = f; // Update symmetric element M_ji.\n                    }\n                }\n\n                // Prepare for the next iteration: increment logical row counter.\n                loop = ++r < order;\n            }\n        }\n\n        // build the root matrix (L)\n        rank = r; // The rank of the matrix is 'r' (number of non-discarded columns).\n        root = MatrixUtils.createRealMatrix(order, r); // The root matrix has dimensions order x rank.\n        for (int i = 0; i < order; ++i) { // Iterate through all original rows.\n            for (int j = 0; j < r; ++j) { // Iterate through the 'rank' columns.\n                // The element b[i][j] corresponds to the (i-th logical row, j-th logical column) of L.\n                // To get the correct entry in the 'root' matrix (which is in original row order),\n                // we use index[i] to map the logical row 'i' back to its original physical row.\n                root.setEntry(index[i], j, b[i][j]);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}