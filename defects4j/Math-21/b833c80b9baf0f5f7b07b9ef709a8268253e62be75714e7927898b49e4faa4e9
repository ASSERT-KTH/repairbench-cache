{
    "generation": "public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n    throws NonPositiveDefiniteMatrixException {\n\n    final int order = matrix.getRowDimension();\n    final double[][] c = matrix.getData();\n    final double[][] b = new double[order][order];\n\n    // permutation array: index[i] is the original row index for the i-th pivot.\n    int[] index = new int[order];\n    for (int i = 0; i < order; i++) {\n        index[i] = i;\n    }\n\n    int r = 0;\n    boolean loop = true;\n\n    while (loop && r < order) {\n\n        // --- FIX: Use a local variable for pivot selection ---\n        // Find the row (among index[r]...index[order-1]) with the largest diagonal element.\n        int pivot = r;\n        for (int i = r + 1; i < order; i++) {\n            if (c[index[i]][index[i]] > c[index[pivot]][index[pivot]]) {\n                pivot = i;\n            }\n        }\n        // Swap the pivot row into position r.\n        if (pivot != r) {\n            int tmp = index[r];\n            index[r] = index[pivot];\n            index[pivot] = tmp;\n        }\n        //-------------------------------------------------------\n\n        int ir = index[r];\n\n        if (c[ir][ir] < small) {\n            if (r == 0) {\n                throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n            }\n            for (int i = r; i < order; i++) {\n                if (c[index[i]][index[i]] < -small) {\n                    throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                }\n            }\n            // All remaining diagonal elements are nearly zero;\n            // we add a (zero) column to our factor and exit.\n            r++;\n            loop = false;\n        } else {\n            final double sqrt = FastMath.sqrt(c[ir][ir]);\n            b[r][r] = sqrt;\n            final double inverse = 1.0 / sqrt;\n            for (int i = r + 1; i < order; i++) {\n                final int ii = index[i];\n                final double e = inverse * c[ii][ir];\n                b[i][r] = e;\n                c[ii][ii] -= e * e;\n                for (int j = r + 1; j < i; j++) {\n                    final int ij = index[j];\n                    final double f = c[ii][ij] - e * b[j][r];\n                    c[ii][ij] = f;\n                    c[ij][ii] = f;\n                }\n            }\n            r++;\n        }\n    }\n\n    // Build the root matrix by putting the computed rows back in the original order.\n    rank = r;\n    root = MatrixUtils.createRealMatrix(order, r);\n    for (int i = 0; i < order; i++) {\n        for (int j = 0; j < r; j++) {\n            root.setEntry(index[i], j, b[i][j]);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}