{
    "generation": "/**\n * Decompose a symmetric positive semidefinite matrix.\n *\n * @param matrix Symmetric positive semidefinite matrix.\n * @param small Diagonal elements threshold under which columns are\n *              considered to be dependent on previous ones and are discarded.\n * @exception NonPositiveDefiniteMatrixException if the matrix is not\n *            positive semidefinite.\n */\npublic RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n    throws NonPositiveDefiniteMatrixException {\n\n    final int order = matrix.getRowDimension();\n    final double[][] c = matrix.getData();\n    final double[][] b = new double[order][order];\n\n    // pivot indices\n    int[] index = new int[order];\n    for (int i = 0; i < order; ++i) {\n        index[i] = i;\n    }\n\n    int r = 0;\n    for (boolean loop = true; loop; ) {\n\n        // 1) find the maximal diagonal element among remaining rows\n        int pivot = r;\n        double maxDiag = c[index[r]][index[r]];\n        for (int i = r + 1; i < order; ++i) {\n            double d = c[index[i]][index[i]];\n            if (d > maxDiag) {\n                maxDiag = d;\n                pivot = i;\n            }\n        }\n\n        // 2) swap the pivot row into position r\n        if (pivot != r) {\n            int tmp = index[r];\n            index[r] = index[pivot];\n            index[pivot] = tmp;\n        }\n\n        // 3) test for (semi-)definiteness\n        int ir = index[r];\n        double diag = c[ir][ir];\n        if (diag < small) {\n            if (r == 0) {\n                throw new NonPositiveDefiniteMatrixException(diag, ir, small);\n            }\n            // ensure no significantly negative diagonal remains\n            for (int i = r; i < order; ++i) {\n                double d = c[index[i]][index[i]];\n                if (d < -small) {\n                    throw new NonPositiveDefiniteMatrixException(d, i, small);\n                }\n            }\n            // stop factorization; include this last negligible pivot as a zero column\n            ++r;\n            loop = false;\n        } else {\n            // 4) perform the Cholesky step on pivot r\n            double rootDiag = FastMath.sqrt(diag);\n            b[r][r] = rootDiag;\n            double inv = 1.0 / rootDiag;\n            for (int i = r + 1; i < order; ++i) {\n                int ii = index[i];\n                double e = c[ii][ir] * inv;\n                b[i][r] = e;\n                c[ii][ii] -= e * e;\n                for (int j = r + 1; j < i; ++j) {\n                    int ij = index[j];\n                    double f = c[ii][ij] - e * b[j][r];\n                    c[ii][ij] = f;\n                    c[ij][ii] = f;\n                }\n            }\n            // move to next pivot\n            loop = (++r < order);\n        }\n    }\n\n    // build the final root matrix (possibly rank-deficient)\n    rank = r;\n    root = MatrixUtils.createRealMatrix(order, r);\n    for (int i = 0; i < order; ++i) {\n        for (int j = 0; j < r; ++j) {\n            root.setEntry(index[i], j, b[i][j]);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}