{
    "generation": "public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n    throws NonPositiveDefiniteMatrixException {\n\n    final int order = matrix.getRowDimension();\n    // work on a copy of the data\n    final double[][] c = matrix.getData();\n    // b will accumulate the Cholesky factors in the pivoted order\n    final double[][] b = new double[order][order];\n\n    int[] swap  = new int[order];\n    int[] index = new int[order];\n    for (int i = 0; i < order; ++i) {\n        index[i] = i;\n    }\n\n    int r = 0;\n    for (boolean loop = true; loop; ) {\n\n        // 1) find the pivot: the largest diagonal element among c[index[r..end]][index[r..end]]\n        swap[r] = r;\n        double max = c[index[r]][index[r]];\n        for (int i = r + 1; i < order; ++i) {\n            double di = c[index[i]][index[i]];\n            if (di > max) {\n                max = di;\n                swap[r] = i;\n            }\n        }\n\n        // 2) apply the pivot to our index array\n        if (swap[r] != r) {\n            int tmp = index[r];\n            index[r] = index[swap[r]];\n            index[swap[r]] = tmp;\n        }\n\n        // 3) inspect the pivoted diagonal\n        int ir = index[r];\n        double pivot = c[ir][ir];\n        if (pivot < small) {\n            // if even the largest remaining diagonal is too small, we're done\n            if (r == 0) {\n                throw new NonPositiveDefiniteMatrixException(pivot, ir, small);\n            }\n            // verify no significantly negative diagonals remain\n            for (int i = r; i < order; ++i) {\n                if (c[index[i]][index[i]] < -small) {\n                    throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                }\n            }\n            // close enough to zero: stop here, rank = r\n            loop = false;\n        } else {\n            // 4) compute the r-th column of the factor\n            double s = FastMath.sqrt(pivot);\n            b[r][r] = s;\n            double invS = 1.0 / s;\n            for (int i = r + 1; i < order; ++i) {\n                int ii = index[i];\n                double e = c[ii][ir] * invS;\n                b[i][r] = e;\n                c[ii][ii] -= e * e;\n                // update the remaining submatrix\n                for (int j = r + 1; j < i; ++j) {\n                    int ij = index[j];\n                    double f = c[ii][ij] - e * b[j][r];\n                    c[ii][ij] = f;\n                    c[ij][ii] = f;\n                }\n            }\n            // move to the next pivot\n            loop = ++r < order;\n        }\n    }\n\n    // 5) build the root matrix of size (order x r)\n    rank = r;\n    root = MatrixUtils.createRealMatrix(order, r);\n    for (int i = 0; i < order; ++i) {\n        for (int j = 0; j < r; ++j) {\n            root.setEntry(index[i], j, b[i][j]);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}