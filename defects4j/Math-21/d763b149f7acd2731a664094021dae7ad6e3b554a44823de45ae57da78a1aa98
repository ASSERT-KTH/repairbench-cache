{
    "generation": "    /**\n     * Decompose a symmetric positive semidefinite matrix.\n     *\n     * @param matrix Symmetric positive semidefinite matrix.\n     * @param small Diagonal elements threshold under which  column are\n     * considered to be dependent on previous ones and are discarded.\n     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n     * positive semidefinite.\n     */\n    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getData();\n        final double[][] b = new double[order][order];\n\n        // pivot index array\n        int[] index = new int[order];\n        for (int i = 0; i < order; i++) {\n            index[i] = i;\n        }\n\n        int r = 0;\n        boolean loop = true;\n        while (loop) {\n\n            // find maximal diagonal element among the remaining\n            int pivot = r;\n            double max = c[index[r]][index[r]];\n            for (int i = r + 1; i < order; i++) {\n                double value = c[index[i]][index[i]];\n                if (value > max) {\n                    max = value;\n                    pivot = i;\n                }\n            }\n\n            // swap the pivot row/column into position r\n            if (pivot != r) {\n                int tmp = index[r];\n                index[r] = index[pivot];\n                index[pivot] = tmp;\n            }\n\n            // now pivot is at index[r]\n            int ir = index[r];\n            if (c[ir][ir] < small) {\n                // if first pivot is too small, not positive semidefinite\n                if (r == 0) {\n                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n                }\n                // otherwise check that no remaining diagonal is significantly negative\n                for (int i = r; i < order; i++) {\n                    if (c[index[i]][index[i]] < -small) {\n                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                    }\n                }\n                // all remaining diagonals are ~0, accept rank and break\n                r++;\n                break;\n            } else {\n                // perform the Cholesky step at pivot r\n                double diagSqrt = FastMath.sqrt(c[ir][ir]);\n                b[r][r] = diagSqrt;\n                double inv = 1.0 / diagSqrt;\n                for (int i = r + 1; i < order; i++) {\n                    int ii = index[i];\n                    double e = c[ii][ir] * inv;\n                    b[i][r] = e;\n                    c[ii][ii] -= e * e;\n                    for (int j = r + 1; j < i; j++) {\n                        int ij = index[j];\n                        double f = c[ii][ij] - e * b[j][r];\n                        c[ii][ij] = f;\n                        c[ij][ii] = f;\n                    }\n                }\n                // move to next pivot\n                r++;\n                if (r >= order) {\n                    loop = false;\n                }\n            }\n        }\n\n        // build the root matrix\n        rank = r;\n        root = MatrixUtils.createRealMatrix(order, r);\n        for (int i = 0; i < order; i++) {\n            for (int j = 0; j < r; j++) {\n                root.setEntry(index[i], j, b[i][j]);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}