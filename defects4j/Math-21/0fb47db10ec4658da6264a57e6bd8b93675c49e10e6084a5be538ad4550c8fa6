{
    "generation": "/**\n * Decompose a symmetric positive semidefinite matrix.\n *\n * @param matrix Symmetric positive semidefinite matrix.\n * @param small Diagonal elements threshold under which column are\n * considered to be dependent on previous ones and are discarded.\n * @exception NonPositiveDefiniteMatrixException if the matrix is not\n * positive semidefinite.\n */\npublic RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n    throws NonPositiveDefiniteMatrixException {\n\n    final int order = matrix.getRowDimension();\n    final double[][] c = matrix.getData();\n    final double[][] b = new double[order][order];\n\n    // Create a permutation vector of indices.\n    int[] index = new int[order];\n    for (int i = 0; i < order; ++i) {\n        index[i] = i;\n    }\n\n    int r = 0;\n    // Process each column. We use 'r' as the current step.\n    for (; r < order; r++) {\n        // Pivot selection: choose the remaining row with the largest diagonal element.\n        int pivot = r;\n        for (int i = r + 1; i < order; i++) {\n            if (c[index[i]][index[i]] > c[index[pivot]][index[pivot]]) {\n                pivot = i;\n            }\n        }\n\n        // If the best pivot is too small then no more independent directions can be found.\n        if (c[index[pivot]][index[pivot]] < small) {\n            if (r == 0) {\n                throw new NonPositiveDefiniteMatrixException(\n                        c[index[pivot]][index[pivot]], index[pivot], small);\n            }\n            // Check that the remaining diagonal elements are not significantly negative.\n            for (int i = r; i < order; i++) {\n                if (c[index[i]][index[i]] < -small) {\n                    throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                }\n            }\n            break;\n        }\n        // Swap the pivot row into position r.\n        if (pivot != r) {\n            int temp = index[r];\n            index[r] = index[pivot];\n            index[pivot] = temp;\n        }\n\n        int ir = index[r];\n        // Compute the square root of the pivot element.\n        double diag = c[ir][ir];\n        double sqrt = FastMath.sqrt(diag);\n        b[r][r] = sqrt;\n        double inverse = 1.0 / sqrt;\n        // Update the remaining rows.\n        for (int i = r + 1; i < order; i++) {\n            int ii = index[i];\n            double e = inverse * c[ii][ir];\n            b[i][r] = e;\n            c[ii][ii] -= e * e;\n            for (int j = r + 1; j < i; j++) {\n                int ij = index[j];\n                double f = c[ii][ij] - e * b[j][r];\n                c[ii][ij] = f;\n                c[ij][ii] = f;\n            }\n        }\n    }\n\n    // Set the discovered rank.\n    rank = r;\n    // Build the root matrix so that M = root * root'.\n    root = MatrixUtils.createRealMatrix(order, rank);\n    for (int i = 0; i < order; i++) {\n        for (int j = 0; j < rank; j++) {\n            root.setEntry(index[i], j, b[i][j]);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}