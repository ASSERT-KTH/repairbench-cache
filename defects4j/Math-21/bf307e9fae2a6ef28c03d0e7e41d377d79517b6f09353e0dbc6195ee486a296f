{
    "generation": "/**\n * Decompose a symmetric positive semidefinite matrix.\n *\n * @param matrix Symmetric positive semidefinite matrix.\n * @param small Diagonal elements threshold under which  column are\n * considered to be dependent on previous ones and are discarded.\n * @exception NonPositiveDefiniteMatrixException if the matrix is not\n * positive semidefinite.\n */\npublic RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n    final int order = matrix.getRowDimension();\n    final double[][] c = matrix.getData();\n    final double[][] b = new double[order][order];\n\n    // pivot index array\n    final int[] index = new int[order];\n    for (int i = 0; i < order; ++i) {\n        index[i] = i;\n    }\n\n    int r = 0;\n    // main pivoted Cholesky loop\n    for (; r < order; ++r) {\n\n        // find the largest remaining diagonal element\n        int pivot = r;\n        double maxDiag = c[index[pivot]][index[pivot]];\n        for (int i = r + 1; i < order; ++i) {\n            double diag = c[index[i]][index[i]];\n            if (diag > maxDiag) {\n                maxDiag = diag;\n                pivot = i;\n            }\n        }\n\n        // if below threshold, stop (or fail if first)\n        if (maxDiag < small) {\n            if (r == 0) {\n                throw new NonPositiveDefiniteMatrixException(maxDiag, index[pivot], small);\n            }\n            // check no significantly negative diagonal remains\n            for (int i = r; i < order; ++i) {\n                double diag = c[index[i]][index[i]];\n                if (diag < -small) {\n                    throw new NonPositiveDefiniteMatrixException(diag, index[i], small);\n                }\n            }\n            break;\n        }\n\n        // swap row/column r and pivot\n        if (pivot != r) {\n            int tmp = index[r];\n            index[r] = index[pivot];\n            index[pivot] = tmp;\n        }\n\n        // perform the Cholesky update\n        int ir = index[r];\n        double sqrt = FastMath.sqrt(c[ir][ir]);\n        b[r][r] = sqrt;\n        double inv = 1.0 / sqrt;\n        for (int i = r + 1; i < order; ++i) {\n            int ii = index[i];\n            double e = c[ii][ir] * inv;\n            b[i][r] = e;\n            c[ii][ii] -= e * e;\n            for (int j = r + 1; j < i; ++j) {\n                int ij = index[j];\n                double f = c[ii][ij] - e * b[j][r];\n                c[ii][ij] = f;\n                c[ij][ii] = f;\n            }\n        }\n    }\n\n    // build the root matrix from the computed b and the pivot index\n    rank = r;\n    root = MatrixUtils.createRealMatrix(order, r);\n    for (int i = 0; i < order; ++i) {\n        for (int j = 0; j < r; ++j) {\n            root.setEntry(index[i], j, b[i][j]);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}