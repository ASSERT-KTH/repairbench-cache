{
    "generation": "    /**\n     * Decompose a symmetric positive semidefinite matrix.\n     *\n     * @param matrix Symmetric positive semidefinite matrix.\n     * @param small Diagonal elements threshold under which  column are\n     * considered to be dependent on previous ones and are discarded.\n     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n     * positive semidefinite.\n     */\n    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getDataRef();\n        final double[][] b = new double[order][order];\n\n        int[] swap  = new int[order];\n        int[] index = new int[order];\n        for (int i = 0; i < order; ++i) {\n            index[i] = i;\n        }\n\n        int r = 0;\n        for (boolean loop = true; loop;) {\n\n            // find maximal diagonal element\n            double maxDiag = Double.NEGATIVE_INFINITY;\n            swap[r] = r;\n            for (int i = r; i < order; ++i) {\n                int ii = index[i];\n                if (c[ii][ii] > maxDiag) {\n                    maxDiag = c[ii][ii];\n                    swap[r] = i;\n                }\n            }\n\n            // swap elements\n            if (swap[r] != r) {\n                int tmp = index[r];\n                index[r] = index[swap[r]];\n                index[swap[r]] = tmp;\n            }\n\n            int ir = index[r];\n            double diag = c[ir][ir];\n\n            if (Math.abs(diag) < small) {\n                // check if we're done with all columns\n                if (r == order - 1) {\n                    // Check if the remaining diagonal elements are all close to zero\n                    boolean allSmall = true;\n                    for (int i = r; i < order; ++i) {\n                        int ii = index[i];\n                        if (c[ii][ii] < -small) {\n                            allSmall = false;\n                            break;\n                        }\n                    }\n                    if (allSmall) {\n                        // found the rank\n                        r = order;\n                        loop = false;\n                    } else {\n                        throw new NonPositiveDefiniteMatrixException(diag, r, small);\n                    }\n                } else {\n                    // move to next column\n                    ++r;\n                }\n            } else if (diag < 0) {\n                // negative diagonal element - matrix is not positive semi-definite\n                throw new NonPositiveDefiniteMatrixException(diag, r, small);\n            } else {\n                // transform the matrix\n                final double sqrt = Math.sqrt(diag);\n                b[r][r] = sqrt;\n                final double inverse = 1 / sqrt;\n                for (int i = r + 1; i < order; ++i) {\n                    final int ii = index[i];\n                    final double e = inverse * c[ii][ir];\n                    b[i][r] = e;\n                    c[ii][ii] -= e * e;\n                    for (int j = r + 1; j < i; ++j) {\n                        final int ij = index[j];\n                        final double f = c[ii][ij] - e * b[j][r];\n                        c[ii][ij] = f;\n                        c[ij][ii] = f;\n                    }\n                }\n                for (int i = r + 1; i < order; ++i) {\n                    final int ii = index[i];\n                    c[ii][ir] = 0.0; // zero out lower part since we process in place\n                }\n\n                // prepare next iteration\n                loop = ++r < order;\n            }\n        }\n\n        // build the root matrix\n        rank = r;\n        root = MatrixUtils.createRealMatrix(order, r);\n        for (int i = 0; i < order; ++i) {\n            for (int j = 0; j < r; ++j) {\n                root.setEntry(index[i], j, b[i][j]);\n            }\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}