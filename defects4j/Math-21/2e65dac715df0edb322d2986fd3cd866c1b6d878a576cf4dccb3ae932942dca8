{
    "generation": "public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n    throws NonPositiveDefiniteMatrixException {\n\n    final int order = matrix.getRowDimension();\n    final double[][] c = matrix.getData();\n    final double[][] b = new double[order][order];\n\n    int[] index = new int[order];\n    for (int i = 0; i < order; ++i) {\n        index[i] = i;\n    }\n\n    int r = 0;\n    for (boolean loop = true; loop;) {\n\n        // Find the maximal diagonal element among the remaining indices\n        int maxIndex = r;\n        double maxVal = c[index[r]][index[r]];\n        for (int i = r + 1; i < order; ++i) {\n            int currentIdx = index[i];\n            if (c[currentIdx][currentIdx] > maxVal) {\n                maxIndex = i;\n                maxVal = c[currentIdx][currentIdx];\n            }\n        }\n\n        // Swap the indices if necessary\n        if (maxIndex != r) {\n            int tmp = index[r];\n            index[r] = index[maxIndex];\n            index[maxIndex] = tmp;\n        }\n\n        int ir = index[r];\n        if (c[ir][ir] < small) {\n\n            if (r == 0) {\n                throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n            }\n\n            // Check remaining diagonal elements for negative values\n            for (int i = r; i < order; ++i) {\n                if (c[index[i]][index[i]] < -small) {\n                    throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                }\n            }\n\n            // All remaining elements are negligible; terminate the loop\n            loop = false;\n\n        } else {\n\n            // Perform the matrix transformation\n            final double sqrt = FastMath.sqrt(c[ir][ir]);\n            b[r][r] = sqrt;\n            final double inverse = 1 / sqrt;\n            for (int i = r + 1; i < order; ++i) {\n                final int ii = index[i];\n                final double e = inverse * c[ii][ir];\n                b[i][r] = e;\n                c[ii][ii] -= e * e;\n                for (int j = r + 1; j < i; ++j) {\n                    final int ij = index[j];\n                    final double f = c[ii][ij] - e * b[j][r];\n                    c[ii][ij] = f;\n                    c[ij][ii] = f;\n                }\n            }\n\n            // Prepare for next iteration\n            loop = ++r < order;\n        }\n    }\n\n    // Construct the root matrix\n    rank = r;\n    root = MatrixUtils.createRealMatrix(order, r);\n    for (int i = 0; i < order; ++i) {\n        for (int j = 0; j < r; ++j) {\n            root.setEntry(index[i], j, b[i][j]);\n        }\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}