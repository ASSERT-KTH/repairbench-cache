{
    "generation": "    /**\n     * Decompose a symmetric positive semidefinite matrix.\n     *\n     * @param matrix Symmetric positive semidefinite matrix.\n     * @param small Diagonal elements threshold under which columns are\n     * considered to be dependent on previous ones and are discarded.\n     * @exception NonPositiveDefiniteMatrixException if the matrix is not\n     * positive semidefinite.\n     */\n    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getData();\n        final double[][] b = new double[order][order];\n\n        int[] index = new int[order];\n        for (int i = 0; i < order; ++i) {\n            index[i] = i;\n        }\n\n        int r = 0;\n        boolean loop = true;\n        while (loop) {\n            // find maximal diagonal element (pivoting)\n            int swapIndex = r;\n            double maxDiag = c[index[r]][index[r]];\n            for (int i = r + 1; i < order; ++i) {\n                double diag = c[index[i]][index[i]];\n                if (diag > maxDiag) {\n                    swapIndex = i;\n                    maxDiag = diag;\n                }\n            }\n\n            // swap indices if necessary (pivot)\n            if (swapIndex != r) {\n                int tmp = index[r];\n                index[r] = index[swapIndex];\n                index[swapIndex] = tmp;\n            }\n\n            int ir = index[r];\n            if (c[ir][ir] < small) {\n                if (r == 0) {\n                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n                }\n                // check remaining diagonal elements for significant negative values\n                for (int i = r; i < order; ++i) {\n                    double diag = c[index[i]][index[i]];\n                    if (diag < -small) {\n                        throw new NonPositiveDefiniteMatrixException(diag, index[i], small);\n                    }\n                }\n                // Rank is found: the rest are numerically zero\n                ++r;\n                loop = false;\n            } else {\n                // Pivoted Cholesky transformation\n                double sqrt = FastMath.sqrt(c[ir][ir]);\n                b[r][r] = sqrt;\n                double inverse = 1.0 / sqrt;\n                for (int i = r + 1; i < order; ++i) {\n                    int ii = index[i];\n                    double e = c[ii][ir] * inverse;\n                    b[i][r] = e;\n                    c[ii][ii] -= e * e;\n                    for (int j = r + 1; j <= i; ++j) {\n                        int ij = index[j];\n                        double f = c[ii][ij] - e * b[j][r];\n                        c[ii][ij] = f;\n                        c[ij][ii] = f;\n                    }\n                }\n                loop = ++r < order;\n            }\n        }\n\n        // build the root matrix\n        rank = r - 1;\n        root = MatrixUtils.createRealMatrix(order, rank);\n        for (int i = 0; i < order; ++i) {\n            for (int j = 0; j < rank; ++j) {\n                root.setEntry(index[i], j, b[i][j]);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}