{
    "generation": "/**\n * Decompose a symmetric positive semidefinite matrix.\n *\n * @param matrix Symmetric positive semidefinite matrix.\n * @param small Diagonal elements threshold under which columns are\n *              considered to be dependent on previous ones and are discarded.\n * @exception NonPositiveDefiniteMatrixException if the matrix is not\n *            positive semidefinite.\n */\npublic RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n    throws NonPositiveDefiniteMatrixException {\n\n    final int order = matrix.getRowDimension();\n    final double[][] c = matrix.getData();\n    final double[][] b = new double[order][order];\n\n    // pivot indices\n    final int[] index = new int[order];\n    for (int i = 0; i < order; i++) {\n        index[i] = i;\n    }\n\n    int r = 0;\n    // pivoted Cholesky iteration\n    while (r < order) {\n        // 1) find the largest remaining diagonal entry\n        int swap = r;\n        double max = c[index[r]][index[r]];\n        for (int i = r + 1; i < order; i++) {\n            double diag = c[index[i]][index[i]];\n            if (diag > max) {\n                max = diag;\n                swap = i;\n            }\n        }\n        // 2) pivot rows/columns\n        if (swap != r) {\n            int tmp = index[r];\n            index[r] = index[swap];\n            index[swap] = tmp;\n        }\n\n        int ir = index[r];\n        // 3) check pivot for positive definiteness / semidefiniteness\n        if (c[ir][ir] < small) {\n            if (r == 0) {\n                throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n            }\n            // ensure no significantly negative diagonals remain\n            for (int i = r; i < order; i++) {\n                if (c[index[i]][index[i]] < -small) {\n                    throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]],\n                                                                 index[i], small);\n                }\n            }\n            // all remaining pivots are (near) zero => stop\n            break;\n        }\n\n        // 4) perform the Cholesky update\n        final double diagSqrt = FastMath.sqrt(c[ir][ir]);\n        b[r][r] = diagSqrt;\n        final double inv = 1.0 / diagSqrt;\n        for (int i = r + 1; i < order; i++) {\n            int ii = index[i];\n            double e = c[ii][ir] * inv;\n            b[i][r] = e;\n            c[ii][ii] -= e * e;\n            for (int j = r + 1; j < i; j++) {\n                int ij = index[j];\n                double f = c[ii][ij] - e * b[j][r];\n                c[ii][ij] = f;\n                c[ij][ii] = f;\n            }\n        }\n\n        // move to next pivot\n        r++;\n    }\n\n    // build the root matrix\n    rank = r;\n    root = MatrixUtils.createRealMatrix(order, rank);\n    for (int i = 0; i < order; i++) {\n        for (int j = 0; j < rank; j++) {\n            root.setEntry(index[i], j, b[i][j]);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}