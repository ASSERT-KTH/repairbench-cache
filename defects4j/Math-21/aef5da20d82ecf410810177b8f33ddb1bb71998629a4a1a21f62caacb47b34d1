{
    "generation": "/**\n * Decompose a symmetric positive semidefinite matrix.\n *\n * @param matrix Symmetric positive semidefinite matrix.\n * @param small Diagonal elements threshold under which\n *              columns are considered to be dependent on\n *              previous ones and are discarded.\n * @exception NonPositiveDefiniteMatrixException if the matrix is not\n *            positive semidefinite.\n */\npublic RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n    throws NonPositiveDefiniteMatrixException {\n\n    final int order = matrix.getRowDimension();\n    // make a working copy of the data\n    final double[][] c = matrix.getData();\n    // will hold the cholesky factor in permuted order\n    final double[][] b = new double[order][order];\n\n    // index will track row/column pivots\n    int[] index = new int[order];\n    for (int i = 0; i < order; i++) {\n        index[i] = i;\n    }\n\n    int r = 0;\n    boolean loop = true;\n    while (loop) {\n\n        // 1) find the pivot: the largest diagonal element among\n        //    rows/cols r..order-1\n        int pivot = r;\n        double maxDiag = c[index[r]][index[r]];\n        for (int i = r + 1; i < order; i++) {\n            double dii = c[index[i]][index[i]];\n            if (dii > maxDiag) {\n                maxDiag = dii;\n                pivot = i;\n            }\n        }\n        // 2) swap row/col r and row/col pivot in the index array\n        if (pivot != r) {\n            int tmp = index[r];\n            index[r] = index[pivot];\n            index[pivot] = tmp;\n        }\n\n        // 3) test for positive semidefiniteness\n        int ir = index[r];\n        if (c[ir][ir] < small) {\n            // if even the first pivot is too small, fail\n            if (r == 0) {\n                throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n            }\n            // check remaining diagonals are not significantly negative\n            for (int i = r; i < order; i++) {\n                if (c[index[i]][index[i]] < -small) {\n                    throw new NonPositiveDefiniteMatrixException(\n                        c[index[i]][index[i]], index[i], small);\n                }\n            }\n            // remaining pivots are ~zero: stop, rank = r+1\n            r++;\n            loop = false;\n        } else {\n            // 4) perform the Cholesky step for pivot r\n            double s = FastMath.sqrt(c[ir][ir]);\n            b[r][r] = s;\n            double inv = 1.0 / s;\n            for (int i = r + 1; i < order; i++) {\n                int ii = index[i];\n                double e = c[ii][ir] * inv;\n                b[i][r] = e;\n                // update the Schur complement\n                c[ii][ii] -= e * e;\n                for (int j = r + 1; j < i; j++) {\n                    int ij = index[j];\n                    double f = c[ii][ij] - e * b[j][r];\n                    c[ii][ij] = f;\n                    c[ij][ii] = f;\n                }\n            }\n            // move to next pivot\n            r++;\n            loop = (r < order);\n        }\n    }\n\n    // build the root matrix in original ordering\n    rank = r;\n    root = MatrixUtils.createRealMatrix(order, r);\n    for (int i = 0; i < order; i++) {\n        for (int j = 0; j < r; j++) {\n            root.setEntry(index[i], j, b[i][j]);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}