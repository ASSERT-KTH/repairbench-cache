{
    "generation": "    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n\n        final int order = matrix.getRowDimension();\n        final double[][] c = matrix.getData();\n        // Make a copy of the original matrix data since we'll modify it\n        final double[][] cCopy = new double[order][order];\n        for (int i = 0; i < order; ++i) {\n            System.arraycopy(c[i], 0, cCopy[i], 0, order);\n        }\n        c = cCopy;\n\n        final double[][] b = new double[order][order];\n\n        int[] index = new int[order];\n        for (int i = 0; i < order; ++i) {\n            index[i] = i;\n        }\n\n        int r = 0;\n        int maxCol = 0;\n        while (r < order) {\n            // find maximal remaining diagonal element\n            maxCol = r;\n            double maxVal = c[index[maxCol]][index[maxCol]];\n            for (int i = r + 1; i < order; ++i) {\n                int ii = index[i];\n                double val = c[ii][ii];\n                if (val > maxVal) {\n                    maxVal = val;\n                    maxCol = i;\n                }\n            }\n\n            // swap columns\n            if (maxCol != r) {\n                int tmp = index[r];\n                index[r] = index[maxCol];\n                index[maxCol] = tmp;\n            }\n\n            // check diagonal element\n            int ir = index[r];\n            if (c[ir][ir] < small) {\n                if (r == 0) {\n                    // Check if all diagonal elements are negative\n                    boolean allNegative = true;\n                    for (int i = 0; i < order; ++i) {\n                        if (c[index[i]][index[i]] >= 0) {\n                            allNegative = false;\n                            break;\n                        }\n                    }\n                    if (allNegative) {\n                        throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n                    }\n                }\n\n                // Check remaining diagonal elements\n                boolean hasNegative = false;\n                for (int i = r; i < order; ++i) {\n                    if (c[index[i]][index[i]] < -small) {\n                        hasNegative = true;\n                        break;\n                    }\n                }\n\n                if (hasNegative) {\n                    // There's at least one sufficiently negative diagonal element\n                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n                }\n\n                // All remaining diagonal elements are close to zero, stop here\n                break;\n            }\n\n            // transform the matrix\n            final double sqrt = Math.sqrt(c[ir][ir]);\n            b[r][r] = sqrt;\n            final double inverse = 1 / sqrt;\n            for (int i = r + 1; i < order; ++i) {\n                final int ii = index[i];\n                final double e = inverse * c[ii][ir];\n                b[i][r] = e;\n                c[ii][ii] -= e * e;\n                for (int j = r + 1; j < i; ++j) {\n                    final int ij = index[j];\n                    final double f = c[ii][ij] - e * b[j][r];\n                    c[ii][ij] = f;\n                    c[ij][ii] = f;\n                }\n                // Also update the upper triangle\n                c[ir][ii] = c[ii][ir] = 0;\n            }\n            c[ir][ir] = 0;\n\n            r++;\n        }\n        rank = r;\n        root = MatrixUtils.createRealMatrix(order, r);\n        for (int i = 0; i < order; ++i) {\n            for (int j = 0; j < r; ++j) {\n                root.setEntry(index[i], j, b[i][j]);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}