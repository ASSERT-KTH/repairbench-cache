{
    "generation": "    /**\n     * Parse an entry name from a buffer.\n     * Parsing stops when a NUL is found\n     * or the buffer length is reached.\n     * <p>\n     * The parser assumes that the name is encoded using simple US-ASCII\n     * bytes. If the name is encoded using UTF-8, it can be corrupted\n     * if it contains multi-byte characters. Thus, it is preferred to\n     * use {@link #parseName(byte[], int, int, ZipEncoding)} with the\n     * UTF-8 encoding.\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse.\n     * @return The entry name.\n     */\n    public static String parseName(byte[] buffer, final int offset, final int length) {\n        // Tar entries are expected to be NUL terminated\n        // NUL is used as a marker, so it should not occur in the file name.\n\n        // Tar names are officially encoded in variant of ASCII that treats\n        // bytes between 128 and 255 as-is. This is the same behaviour\n        // as ISO-8859-1. So using the US-ASCII encoding, which treats\n        // values > 127 as question marks, is problematic.\n        // Further, it is common practice to store UTF-8 encoded names\n        // in tar archives. So using the platform default encoding is\n        // also problematic.\n        // For these reasons, the following parsing loop converts bytes\n        // between 0 and 255 into the respective chars. This is the same\n        // behaviour as ISO-8859-1.\n\n        final StringBuffer result = new StringBuffer(length);\n        int          end = offset + length;\n\n        for (int i = offset; i < end; ++i) {\n            final byte b = buffer[i];\n            if (b == 0) { // Trailing null\n                break;\n            }\n            // CheckStyle:MagicNumber OFF\n            result.append((char) (b & 0xFF)); // Allow for extended ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}