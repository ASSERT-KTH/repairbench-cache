{
    "generation": "    /**\n     * Parse an entry name from a buffer.\n     * Parsing stops when a NUL is found\n     * or the buffer length is reached.\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse.\n     * @return The entry name.\n     */\n    public static String parseName(byte[] buffer, final int offset, final int length) {\n        // Determine the actual length of the name, respecting NUL termination.\n        // The original logic iterated to build a StringBuffer, which was inefficient\n        // and, more importantly, performed a problematic direct cast from byte to char\n        // for non-ASCII characters (e.g., negative byte values in Java).\n        // This led to incorrect character representation for certain byte sequences.\n        int effectiveLength = 0;\n        final int end = offset + length;\n\n        for (int i = offset; i < end; ++i) {\n            if (buffer[i] == 0) {\n                effectiveLength = i - offset; // NUL byte found, this is the end of the name\n                break;\n            }\n            effectiveLength++; // Increment effective length if no NUL byte is found yet\n        }\n\n        // Convert the bytes to a String using a specific character encoding.\n        // Tar archives commonly use ISO-8859-1 (Latin-1) for filenames.\n        // This encoding correctly maps byte values to characters, especially those\n        // outside the basic ASCII range (e.g., byte 0xB1 correctly maps to '\u00b1').\n        // This approach avoids the incorrect character mapping caused by direct (char)byte casting.\n        try {\n            return new String(buffer, offset, effectiveLength, \"ISO-8859-1\");\n        } catch (java.io.UnsupportedEncodingException e) {\n            // ISO-8859-1 is a mandatory encoding in all Java environments,\n            // so this exception should theoretically never be thrown.\n            // If it does, it indicates a severe issue with the JVM's character set support.\n            throw new RuntimeException(\"ISO-8859-1 encoding not found, which is highly unexpected.\", e);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}