{
    "generation": "    /**\n     * Parse an entry name from a buffer.\n     * Parsing stops when a NUL is found\n     * or the buffer length is reached.\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse.\n     * @return The entry name.\n     */\n    public static String parseName(byte[] buffer, final int offset, final int length) {\n        int end = offset + length;\n        int nulPos = -1;\n\n        // First find where the null terminator is\n        for (int i = offset; i < end; ++i) {\n            if (buffer[i] == 0) {\n                nulPos = i;\n                break;\n            }\n        }\n\n        // Determine the actual length to read\n        int actualLength;\n        if (nulPos != -1) {\n            actualLength = nulPos - offset;\n        } else {\n            actualLength = length;\n        }\n\n        // Create a new byte array with just the relevant portion\n        byte[] nameBytes = new byte[actualLength];\n        System.arraycopy(buffer, offset, nameBytes, 0, actualLength);\n\n        try {\n            // Use platform default charset or specify one if needed\n            return new String(nameBytes, java.nio.charset.Charset.defaultCharset());\n        } catch (Exception e) {\n            // Fallback to simple char-by-char conversion if charset fails\n            StringBuffer result = new StringBuffer(actualLength);\n            for (int i = 0; i < actualLength; ++i) {\n                result.append((char) nameBytes[i]);\n            }\n            return result.toString();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}