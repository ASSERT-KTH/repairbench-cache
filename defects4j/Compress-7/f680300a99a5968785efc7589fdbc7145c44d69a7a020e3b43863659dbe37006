{
    "generation": "import java.nio.charset.StandardCharsets;\n\npublic class TarUtils {\n    /**\n     * Parse an entry name from a buffer.\n     * Parsing stops when a NUL is found\n     * or the buffer length is reached.\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse.\n     * @return The entry name.\n     */\n    public static String parseName(byte[] buffer, final int offset, final int length) {\n        int effectiveLength = 0;\n        int end = offset + length;\n\n        // Find the effective length of the string, up to the first NUL byte or the specified length.\n        for (int i = offset; i < end; ++i) {\n            if (buffer[i] == 0) {\n                break; // NUL byte found, stop here\n            }\n            effectiveLength++; // Increment effective length for each non-NUL byte\n        }\n\n        // Construct the String from the byte array using ISO-8859-1 encoding.\n        // This encoding is chosen because TarUtils.formatName, which creates\n        // the byte array for names, effectively truncates characters to 8 bits,\n        // which corresponds to ISO-8859-1 (Latin-1) for characters within that range.\n        // The original code's character-by-character casting can lead to issues\n        // if the default platform encoding is not compatible (e.g., UTF-8 for non-ASCII bytes),\n        // causing misinterpretations like the observed U+FFB1 for 0xB1.\n        return new String(buffer, offset, effectiveLength, StandardCharsets.ISO_8859_1);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}