{
    "generation": "    /** {@inheritDoc} */\n    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n        clearResult();\n        verifyInterval(min, max);\n\n        double ret = Double.NaN;\n        double fMin = f.value(min);\n        double fMax = f.value(max);\n        double fInitial = f.value(initial);\n\n        // Verify bracketing\n        if (fMin * fMax >= 0) {\n            throw new IllegalArgumentException(\n                \"Function values at endpoints do not have opposite signs.  Endpoints: [\" +\n                min + \",\" + max + \"], Values: [\" + fMin + \",\" + fMax + \"]\");\n        }\n\n        // Verify initial guess is within the interval\n        if (initial < min || initial > max) {\n            throw new IllegalArgumentException(\n                \"Initial guess must be within the search interval.\");\n        }\n\n        // If initial guess is a root, return it\n        if (fInitial == 0) {\n            ret = initial;\n            setResult(ret, 0);\n            return ret;\n        }\n\n        // Perform bisection\n        double m, fM;\n        int i = 0;\n        while (i < maximalIterationCount) {\n            m = (min + max) / 2.0;\n            fM = f.value(m);\n\n            if (fM == 0) {\n                ret = m;\n                break;\n            } else if (fMin * fM < 0) {\n                max = m;\n                fMax = fM;\n            } else {\n                min = m;\n                fMin = fM;\n            }\n\n            if (Math.abs(max - min) <= absoluteAccuracy) {\n                ret = (min + max) / 2.0;\n                break;\n            }\n\n            i++;\n        }\n\n        if (i >= maximalIterationCount) {\n            throw new MaxIterationsExceededException(maximalIterationCount);\n        }\n\n        setResult(ret, i);\n        return ret;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}