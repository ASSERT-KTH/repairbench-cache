{
    "generation": "    @Override\n    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        if (resultEqualsValue) {\n          // If we're looking for 'function' (e.g., typeof x === 'function' or goog.isFunction(x)):\n          // Return the Function type if the current ObjectType 'type' is compatible.\n          // This means 'type' is either the Function type itself or a supertype like 'Object'\n          // that can be narrowed down to 'Function'.\n          // ctorType.isSubtype(type) checks if Function is a subtype of 'type' (e.g., type is Object or Function).\n          return ctorType.isSubtype(type) ? ctorType : null;\n        } else {\n          // If we're looking for 'not function' (e.g., typeof x !== 'function' or !goog.isFunction(x)):\n          // If the current ObjectType 'type' is a function type, filter it out (return null).\n          // Otherwise, it's a non-function object type, so keep it (return type).\n          return type.isFunctionType() ? null : type;\n        }\n      }\n      return matchesExpectation(\"object\") ? type : null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}