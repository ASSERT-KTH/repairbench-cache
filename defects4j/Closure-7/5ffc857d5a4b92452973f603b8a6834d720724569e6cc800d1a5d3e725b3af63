{
    "generation": "    @Override\n    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE); // Represents the 'Function' type\n\n        // If the comparison (e.g., typeof x == \"function\" or goog.isFunction(x)) evaluates to TRUE\n        if (resultEqualsValue) {\n          // If the current type 'type' can potentially be a Function (i.e., ctorType is a subtype of type),\n          // then narrow 'type' to 'Function'.\n          // Otherwise, if 'type' cannot be a Function (e.g., 'type' is a String), then this is an\n          // impossible state given the true comparison, so return null.\n          return ctorType.isSubtype(type) ? ctorType : null;\n        } else { // The comparison (e.g., typeof x == \"function\" or goog.isFunction(x)) evaluates to FALSE\n          // This means 'x' is NOT a function.\n          // If the current 'type' is a Function type (or a specific subtype of Function),\n          // then it's an impossible state given that we now know 'x' is not a function. Return null.\n          // Otherwise, if 'type' is an ObjectType that is NOT a Function (e.g., Array, Date, or a generic Object),\n          // then 'type' remains as is, as it correctly represents an object that is not a function.\n          return type.isSubtype(ctorType) ? null : type;\n        }\n      }\n      // This block handles cases like \"typeof x == 'object'\".\n      // This line is reached only if 'value' is not \"function\".\n      // 'matchesExpectation(\"object\")' helper determines the outcome based on 'value' and 'resultEqualsValue'.\n      // - If 'value' is \"object\" and 'resultEqualsValue' is true (i.e., typeof x == \"object\"):\n      //   'matchesExpectation(\"object\")' returns true, so 'type' is returned. This is correct.\n      // - If 'value' is \"object\" and 'resultEqualsValue' is false (i.e., typeof x != \"object\"):\n      //   'matchesExpectation(\"object\")' returns false, so 'null' is returned. This is correct as 'x' is not an object.\n      // - If 'value' is something else (e.g., \"number\", \"string\", etc.) and not \"function\":\n      //   'matchesExpectation(\"object\")' returns false (as 'value' is not \"object\"), so 'null' is returned.\n      //   This is correct, as this visitor (caseObjectType) should not provide type information for non-object primitives.\n      return matchesExpectation(\"object\") ? type : null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}