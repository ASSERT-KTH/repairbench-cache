{
    "generation": "    @Override\n    public JSType caseObjectType(ObjectType type) {\n      if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE); // Represents the 'Function' type\n        if (resultEqualsValue) { // Corresponds to \"typeof x === 'function'\"\n          // If the current object type 'type' can potentially be a Function\n          // (i.e., Function is a subtype of 'type', e.g., type is Object),\n          // then narrow 'type' to 'Function'.\n          // Otherwise, this specific 'type' (e.g., Array) is not possible\n          // under this condition, so return null to remove it.\n          return ctorType.isSubtype(type) ? ctorType : null;\n        } else { // Corresponds to \"typeof x !== 'function'\"\n          // If the current object type 'type' is Function itself, or a subtype of Function,\n          // then it's impossible for 'x' to be of this 'type' given the condition.\n          // Return null to effectively remove it from the union.\n          // Otherwise, if 'type' is not Function (e.g., Object, Array),\n          // it's still possible for 'x' to be of this 'type'. So return 'type'.\n          return type.isSubtype(ctorType) ? null : type;\n        }\n      }\n      // This part handles other typeof values like \"object\", \"string\", etc.\n      // applied to an ObjectType. The existing logic is correct for these cases.\n      // `matchesExpectation(\"object\")` correctly evaluates to:\n      // - true if value is \"object\" and resultEqualsValue is true (keep object types)\n      // - false if value is \"object\" and resultEqualsValue is false (remove object types)\n      // - false if value is not \"object\" and resultEqualsValue is true (remove object types)\n      // - true if value is not \"object\" and resultEqualsValue is false (keep object types)\n      return matchesExpectation(\"object\") ? type : null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}