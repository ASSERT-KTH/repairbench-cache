{
    "generation": "    public static boolean testNode(Node node, NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof NodeNameTest) {\n            if (node.getNodeType() != Node.ELEMENT_NODE) {\n                return false;\n            }\n\n            NodeNameTest nodeNameTest = (NodeNameTest) test;\n            QName testName = nodeNameTest.getNodeName();\n            String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard(); // true if testName.getLocalName() is \"*\"\n            String testPrefix = testName.getPrefix(); // Prefix from XPath\n\n            // Case 1: XPath is '*'\n            // nodeNameTest.getNodeName() is QName(null, \"*\")\n            // wildcard is true, testPrefix is null\n            if (wildcard && testPrefix == null) {\n                return true;\n            }\n\n            // Case 2: XPath is 'prefix:*'\n            // nodeNameTest.getNodeName() is QName(\"prefix\", \"*\")\n            // wildcard is true, testPrefix is \"prefix\"\n            if (wildcard) {\n                String nodeNS = DOMNodePointer.getNamespaceURI(node);\n                return equalStrings(namespaceURI, nodeNS);\n            }\n\n            // Case 3: XPath is '*:localName'\n            // nodeNameTest.getNodeName() is QName(\"*\", \"localName\")\n            // wildcard is false, testPrefix is \"*\"\n            if (\"*\".equals(testPrefix)) {\n                return testName.getName().equals(DOMNodePointer.getLocalName(node));\n            }\n\n            // Case 4: XPath is 'prefix:localName' or 'localName' (no prefix)\n            // nodeNameTest.getNodeName() is QName(\"prefix\", \"localName\") or QName(null, \"localName\")\n            // wildcard is false, testPrefix is \"prefix\" or null\n            if (testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n                String nodeNS = DOMNodePointer.getNamespaceURI(node);\n                return equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof ProcessingInstructionTest) {\n            if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n                String testPI = ((ProcessingInstructionTest) test).getTarget();\n                String nodePI = ((ProcessingInstruction) node).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}