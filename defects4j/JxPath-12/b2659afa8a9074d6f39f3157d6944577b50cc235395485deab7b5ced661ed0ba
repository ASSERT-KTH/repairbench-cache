{
    "generation": "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n            return false;\n        }\n\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && (testPrefix == null || testPrefix.length() == 0)) {\n            // Accept any element regardless of namespace\n            return true;\n        }\n        String localName = DOMNodePointer.getLocalName(node);\n        String nodeNS = DOMNodePointer.getNamespaceURI(node);\n\n        boolean localNameMatches = wildcard \n                || testName.getName().equals(localName);\n        boolean nsMatches;\n        if (wildcard && testPrefix != null && testPrefix.length() > 0) {\n            // Wildcard with a prefix: wildcard in local name but must match namespace\n            nsMatches = equalStrings(namespaceURI, nodeNS);\n        } else if (!wildcard && testPrefix != null && testPrefix.length() > 0) {\n            // Named node with prefix: must match namespace\n            nsMatches = equalStrings(namespaceURI, nodeNS);\n        } else {\n            // No prefix: ignore namespace\n            nsMatches = true;\n        }\n\n        return localNameMatches && nsMatches;\n    }\n    if (test instanceof NodeTypeTest) {\n        int nodeType = node.getNodeType();\n        switch (((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE :\n                return nodeType == Node.ELEMENT_NODE\n                        || nodeType == Node.DOCUMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT :\n                return nodeType == Node.CDATA_SECTION_NODE\n                    || nodeType == Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT :\n                return nodeType == Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI :\n                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI = ((ProcessingInstructionTest) test).getTarget();\n            String nodePI = ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}