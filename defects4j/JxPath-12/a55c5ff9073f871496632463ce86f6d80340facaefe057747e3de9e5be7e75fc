{
    "generation": "    public static boolean testNode(Node node, NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof NodeNameTest) {\n            if (node.getNodeType() != Node.ELEMENT_NODE) {\n                return false;\n            }\n\n            NodeNameTest nodeNameTest = (NodeNameTest) test;\n            QName testName = nodeNameTest.getNodeName();\n            String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard(); // True if testName.getName().equals(\"*\")\n            String testPrefix = testName.getPrefix();\n\n            // Case 1: Test is \"*\" (any node)\n            if (wildcard && testPrefix == null) {\n                return true;\n            }\n\n            String nodeLocalName = DOMNodePointer.getLocalName(node);\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n\n            // Check local name match if not a wildcard name test\n            if (!wildcard && !testName.getName().equals(nodeLocalName)) {\n                return false;\n            }\n\n            // Check namespace match\n            if (NodeTest.WILDCARD_NAMESPACE.equals(namespaceURI)) {\n                // Case 5: Test is \"*:localname\" (if !wildcard) or \"prefix:*\" (if wildcard and testPrefix != null)\n                // or just \"*\" (already handled above).\n                // For \"*:localname\", it matches if the node has ANY namespace (not null).\n                // For \"prefix:*\", testName.getName() is \"*\", so wildcard is true. This branch is reached if namespaceURI is WILDCARD_NAMESPACE.\n                // However, NodeNameTest for prefix:* will have a specific namespaceURI, not WILDCARD_NAMESPACE.\n                // So this specific condition only applies to \"*:localname\".\n                return nodeNS != null;\n            } else {\n                // Cases 2, 3, 4: Specific namespace or no namespace.\n                // Case 2: \"prefix:*\" (wildcard is true, testPrefix != null, namespaceURI is specific)\n                // Case 3: \"localname\" (wildcard is false, testPrefix is null, namespaceURI is null)\n                // Case 4: \"prefix:localname\" (wildcard is false, testPrefix != null, namespaceURI is specific)\n                return equalStrings(namespaceURI, nodeNS);\n            }\n        }\n        if (test instanceof NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof ProcessingInstructionTest) {\n            if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n                String testPI = ((ProcessingInstructionTest) test).getTarget();\n                String nodePI = ((ProcessingInstruction) node).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}