{
    "generation": "    public static boolean testNode(Node node, NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof NodeNameTest) {\n            if (node.getNodeType() != Node.ELEMENT_NODE) {\n                return false;\n            }\n\n            NodeNameTest nodeNameTest = (NodeNameTest) test;\n            QName testName = nodeNameTest.getNodeName();\n            String testNamespaceURI = nodeNameTest.getNamespaceURI();\n            boolean isWildcardLocalName = nodeNameTest.isWildcard();\n            String testPrefix = testName.getPrefix();\n\n            String nodeLocalName = DOMNodePointer.getLocalName(node);\n            String nodeNamespaceURI = DOMNodePointer.getNamespaceURI(node);\n\n            // Handle the '*' case (matches any element)\n            if (isWildcardLocalName && testPrefix == null) {\n                return true;\n            }\n\n            // Check if local name matches (for 'name', 'prefix:name', '*:name', 'prefix:*')\n            boolean localNameMatches;\n            if (isWildcardLocalName) { // Handles 'prefix:*'\n                localNameMatches = true;\n            } else { // Handles 'name', 'prefix:name', '*:name'\n                localNameMatches = testName.getName().equals(nodeLocalName);\n            }\n\n            if (!localNameMatches) {\n                return false;\n            }\n\n            // Check if namespace matches\n            // If the test has a namespace wildcard (e.g., '*:name'), any namespace matches.\n            if (testPrefix != null && testPrefix.equals(\"*\")) {\n                return true;\n            }\n            \n            // For other cases ('name', 'prefix:name', 'prefix:*'), \n            // the test's resolved namespace URI must match the node's namespace URI.\n            return equalStrings(testNamespaceURI, nodeNamespaceURI);\n        }\n        if (test instanceof NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof ProcessingInstructionTest) {\n            if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n                String testPI = ((ProcessingInstructionTest) test).getTarget();\n                String nodePI = ((ProcessingInstruction) node).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}