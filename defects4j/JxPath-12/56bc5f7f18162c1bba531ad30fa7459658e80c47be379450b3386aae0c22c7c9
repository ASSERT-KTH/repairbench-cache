{
    "generation": "    /**\n     * Test a node.\n     * @param node Node to test\n     * @param test NodeTest to apply\n     * @return true if the test passes\n     */\n    public static boolean testNode(Node node, NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof NodeNameTest) {\n            // NodeNameTest tests only ELEMENT nodes\n            if (node.getNodeType() != Node.ELEMENT_NODE) {\n                return false;\n            }\n\n            NodeNameTest nodeNameTest = (NodeNameTest) test;\n            QName testName = nodeNameTest.getNodeName();\n            String testLocalName = testName.getName();\n            String testPrefix = testName.getPrefix();\n            boolean isNameWildcard = nodeNameTest.isWildcard(); // Test local name is '*'\n\n            // Step 1: Check local name match\n            // If the test's local name is not a wildcard, it must match the node's local name.\n            if (!isNameWildcard) {\n                String nodeLocalName = DOMNodePointer.getLocalName(node);\n                // Note: Use Objects.equals for null-safety, although local names shouldn't be null for elements.\n                // Assuming equalStrings handles nulls appropriately as well.\n                if (!equalStrings(testLocalName, nodeLocalName)) {\n                    return false; // Local names mismatch\n                }\n            }\n            // If we are here, either the test's local name was '*' or it matched the node's local name.\n\n            // Step 2: Check namespace match\n\n            // Case A: Test prefix is '*' (e.g., *:name or *:*). Matches any namespace.\n            if (\"*\".equals(testPrefix)) {\n                return true; // Name matched, prefix is wildcard, namespace match is implicit.\n            }\n\n            // Case B: Test prefix is specific or null (e.g., prefix:name, name, prefix:*, *).\n            // Namespaces must match.\n            String namespaceURI = nodeNameTest.getNamespaceURI(); // Expected NS URI based on test prefix (or default NS)\n            String nodeNS = DOMNodePointer.getNamespaceURI(node); // Actual NS URI of the node\n\n            // Use a null-safe equality check for namespace URIs\n            return equalStrings(namespaceURI, nodeNS);\n        }\n        if (test instanceof NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    // In DOM model, NODE_TYPE_NODE test selects Element nodes.\n                    // Document node is not reachable via navigation, context node can be a document node.\n                    // This behavior is somewhat confusing - different models may vary.\n                    // Sticking to original logic for now:\n                    return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    // Check for specific PI target added below. Is this reachable?\n                    // Original logic seems to imply this case handles PI('*')\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false; // Should not happen if NodeTypeTest has valid type\n        }\n        if (test instanceof ProcessingInstructionTest) {\n            if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n                String testPI = ((ProcessingInstructionTest) test).getTarget();\n                String nodePI = ((ProcessingInstruction) node).getTarget();\n                // Use null-safe equality check\n                return equalStrings(testPI, nodePI);\n            }\n            // Node is not a PI node, so it cannot match a ProcessingInstructionTest\n            return false;\n        }\n        // Unknown test type\n        return false;\n    }\n\n    /**\n     * Helper method for null-safe string comparison.\n     * Assumes the behavior needed by the original code.\n     * @param s1 String 1\n     * @param s2 String 2\n     * @return true if strings are equal (null == null is true)\n     */\n    private static boolean equalStrings(String s1, String s2) {\n        if (s1 == null) {\n            return s2 == null;\n        }\n        return s1.equals(s2);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}