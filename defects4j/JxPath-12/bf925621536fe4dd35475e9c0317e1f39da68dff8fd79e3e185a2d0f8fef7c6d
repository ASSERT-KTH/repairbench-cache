{
    "generation": "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n            return false;\n        }\n\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = testName.equals AnyNameTest.ANY_NAME TEST;\n\n        if (wildcard) {\n            return equalStrings(namespaceURI, DOMNodePointer.getNamespaceURI(node));\n        }\n\n        boolean matchesName = DOMNodePointer.getLocalName(node).equals(testName.getName());\n        String nodeNS = DOMNodePointer.getNamespaceURI(node);\n        return equalStrings(namespaceURI, nodeNS) && matchesName;\n    }\n    if (test instanceof NodeTypeTest) {\n        return handleNodeType(node, (NodeTypeTest) test);\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        return handleProcessingInstruction(node, (ProcessingInstructionTest) test);\n    }\n    return false;\n}\n\nprivate static boolean handleNodeType(Node node, NodeTypeTest test) {\n    int nodeType = node.getNodeType();\n    int expectedType = test.getNodeType();\n    switch (expectedType) {\n        case Compiler.NODE_TYPE_NODE :\n            return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;\n        case Compiler.NODE_TYPE_TEXT :\n            return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;\n        case Compiler.NODE_TYPE_COMMENT :\n            return nodeType == Node.COMMENT_NODE;\n        case Compiler.NODE_TYPE_PI :\n            return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n        default:\n            return false;\n    }\n}\n\nprivate static boolean handleProcessingInstruction(Node node, ProcessingInstructionTest test) {\n    if (node.getNodeType() != Node.PROCESSING_INSTRUCTION_NODE) {\n        return false;\n    }\n    String testPI = test.getTarget();\n    String nodePI = ((ProcessingInstruction) node).getTarget();\n    return testPI.equals(nodePI);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}