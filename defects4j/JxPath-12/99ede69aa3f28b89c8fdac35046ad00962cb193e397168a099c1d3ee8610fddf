{
    "generation": "    public static boolean testNode(Node node, NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof NodeNameTest) {\n            if (node.getNodeType() != Node.ELEMENT_NODE) {\n                return false;\n            }\n\n            NodeNameTest nodeNameTest = (NodeNameTest) test;\n            QName testName = nodeNameTest.getNodeName();\n            String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            String testPrefix = testName.getPrefix();\n            \n            // Handle different types of NodeNameTests:\n            // 1. Wildcard name test with no prefix (e.g., \"*\")\n            if (wildcard && testPrefix == null) {\n                return true; // Matches any element node regardless of its name or namespace.\n            }\n\n            // 2. Wildcard name test with a prefix (e.g., \"prefix:*\")\n            // 3. Specific name test with or without a prefix (e.g., \"localname\", \"prefix:localname\")\n            // These cases require matching the local name (unless it's prefix:*) and matching the namespace URI.\n\n            String nodeLocalName = DOMNodePointer.getLocalName(node);\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n\n            if (wildcard) { // This handles \"prefix:*\" cases\n                // For \"prefix:*\", only the namespace URI needs to match.\n                // The local name is effectively a wildcard.\n                return equalStrings(namespaceURI, nodeNS);\n            } else { // This handles \"localname\" and \"prefix:localname\" cases\n                // For specific names, both the local name and the namespace URI must match.\n                if (testName.getName().equals(nodeLocalName)) {\n                    return equalStrings(namespaceURI, nodeNS);\n                }\n                return false; // Local names do not match for non-wildcard tests.\n            }\n        }\n        if (test instanceof NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof ProcessingInstructionTest) {\n            if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n                String testPI = ((ProcessingInstructionTest) test).getTarget();\n                String nodePI = ((ProcessingInstruction) node).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}