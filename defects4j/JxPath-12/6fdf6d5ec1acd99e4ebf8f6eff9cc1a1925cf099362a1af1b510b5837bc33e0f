{
    "generation": "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n            return false;\n        }\n\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            // Accept any element\n            return true;\n        }\n\n        // Bug fix: When a testName has a prefix, compare both local names and namespace URIs.\n        String testLocalName = testName.getName();\n        String nodeLocalName = DOMNodePointer.getLocalName(node);\n        String nodeNS = DOMNodePointer.getNamespaceURI(node);\n\n        if (wildcard) {\n            // Wildcard, but with a prefix, so namespace must match\n            if (testPrefix != null) {\n                return equalStrings(namespaceURI, nodeNS);\n            }\n            // General wildcard matched above.\n            return true;\n        }\n        // Not wildcard: match local name and namespace\n        if (testLocalName.equals(nodeLocalName)) {\n            // Compare namespace URIs. If test has a namespace URI, require match. If test namespaceURI is null, accept empty or null nodeNS.\n            if (namespaceURI == null) {\n                return nodeNS == null || nodeNS.length() == 0;\n            }\n            return equalStrings(namespaceURI, nodeNS);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        int nodeType = node.getNodeType();\n        switch (((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE :\n                return nodeType == Node.ELEMENT_NODE\n                        || nodeType == Node.DOCUMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT :\n                return nodeType == Node.CDATA_SECTION_NODE\n                    || nodeType == Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT :\n                return nodeType == Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI :\n                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI = ((ProcessingInstructionTest) test).getTarget();\n            String nodePI = ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}