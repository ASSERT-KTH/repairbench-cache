{
    "generation": "    public static boolean testNode(Node node, NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof NodeNameTest) {\n            if (node.getNodeType() != Node.ELEMENT_NODE) {\n                return false;\n            }\n\n            NodeNameTest nodeNameTest = (NodeNameTest) test;\n            QName testName = nodeNameTest.getNodeName();\n            String testNamespaceURI = nodeNameTest.getNamespaceURI();\n            boolean testLocalNameIsWildcard = nodeNameTest.isWildcard(); // True if testName.getName() is \"*\"\n            String testPrefix = testName.getPrefix(); // Can be null, a prefix, or \"*\"\n\n            String nodeLocalName = DOMNodePointer.getLocalName(node);\n            String nodeNamespaceURI = DOMNodePointer.getNamespaceURI(node);\n\n            // Handle cases where the local name in the test is a wildcard \"*\"\n            if (testLocalNameIsWildcard) {\n                // Case 1: Test QName is `*` (any local name, any namespace)\n                // This implies testPrefix is null.\n                if (testPrefix == null) {\n                    return true;\n                }\n                // Case 2: Test QName is `prefix:*` (specific namespace, any local name)\n                // Match if the node's namespace URI matches the test's resolved namespace URI.\n                return equalStrings(testNamespaceURI, nodeNamespaceURI);\n            }\n\n            // At this point, the test local name is specific (not \"*\").\n            // First, check if the local names match.\n            if (!testName.getName().equals(nodeLocalName)) {\n                return false;\n            }\n\n            // Local names match. Now, check the namespace.\n            // Case 3: Test QName is `*:localName` (any namespace, specific local name)\n            // If the test prefix is a wildcard \"*\", any namespace URI on the node is acceptable.\n            if (\"*\".equals(testPrefix)) {\n                return true;\n            }\n\n            // Case 4: Test QName is `localName` (no prefix) or `prefix:localName` (specific prefix/namespace)\n            // Match if the node's namespace URI matches the test's resolved namespace URI.\n            return equalStrings(testNamespaceURI, nodeNamespaceURI);\n        }\n        if (test instanceof NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((NodeTypeTest) test).getNodeType()) {\n                case Compiler.NODE_TYPE_NODE :\n                    return nodeType == Node.ELEMENT_NODE\n                            || nodeType == Node.DOCUMENT_NODE;\n                case Compiler.NODE_TYPE_TEXT :\n                    return nodeType == Node.CDATA_SECTION_NODE\n                        || nodeType == Node.TEXT_NODE;\n                case Compiler.NODE_TYPE_COMMENT :\n                    return nodeType == Node.COMMENT_NODE;\n                case Compiler.NODE_TYPE_PI :\n                    return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof ProcessingInstructionTest) {\n            if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n                String testPI = ((ProcessingInstructionTest) test).getTarget();\n                String nodePI = ((ProcessingInstruction) node).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}