{
    "generation": "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n            return false;\n        }\n\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            // wildcard match without prefix - match any element\n            return true;\n        }\n        String nodeLocalName = DOMNodePointer.getLocalName(node);\n        String testLocalName = testName.getName();\n        String nodeNS = DOMNodePointer.getNamespaceURI(node);\n\n        // fix: use localName and namespace for matching if namespaceURI is specified,\n        // also handle prefix wildcard and null/empty namespace cases\n        if (wildcard) {\n            // wildcard with prefix: match elements with matching namespace only\n            if (testPrefix != null && namespaceURI != null) {\n                return equalStrings(namespaceURI, nodeNS);\n            }\n            // wildcard with no prefix: match any element, already handled above\n            return true;\n        }\n        // Match if local names are the same AND namespaces are the same (null/empty considered equal)\n        if (testLocalName.equals(nodeLocalName)) {\n            if (namespaceURI == null && (nodeNS == null || \"\".equals(nodeNS))) {\n                return true;\n            }\n            return equalStrings(namespaceURI, nodeNS);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        int nodeType = node.getNodeType();\n        switch (((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType == Node.ELEMENT_NODE\n                        || nodeType == Node.DOCUMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType == Node.CDATA_SECTION_NODE\n                    || nodeType == Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType == Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI = ((ProcessingInstructionTest) test).getTarget();\n            String nodePI = ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}