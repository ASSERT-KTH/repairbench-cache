{
    "generation": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\n\npublic class DOMNodeUtil { // Assuming this utility class or similar context\n\n    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri\n     */\n    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n        }\n\n        // Use the standard DOM method first, which handles Element, Attr, and other node types correctly.\n        // For Element and Attr, it returns the resolved namespace URI.\n        // For other node types (Text, Comment, etc.), it returns null, as expected.\n        String uri = node.getNamespaceURI();\n\n        // If the standard method returns null, it means either:\n        // 1. The node truly has no namespace (e.g., it's a Text node, or an Element under xmlns=\"\").\n        // 2. The underlying DOM implementation is deficient and doesn't correctly propagate inherited default namespaces.\n        // The original code had a fallback for the latter case, which is preserved but improved.\n        if (uri == null && node.getNodeType() == Node.ELEMENT_NODE) {\n            // The node is an Element whose getNamespaceURI() returned null.\n            // This might happen if the element inherits a default namespace and the DOM implementation\n            // doesn't resolve it for elements without explicit prefixes.\n            // We ensure this fallback only applies to Element nodes.\n            Element element = (Element) node; // Safe cast here because node.getNodeType() is ELEMENT_NODE.\n\n            // Get the prefix of the current node to construct the attribute name for lookup.\n            String prefix = element.getPrefix();\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n    \n            Node aNode = node;\n            // Traverse up the hierarchy to find a relevant namespace declaration.\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        String attrValue = attr.getValue();\n                        // CRITICAL FIX: An empty default namespace declaration (xmlns=\"\")\n                        // means the element is in no namespace, so getNamespaceURI should return null.\n                        // The original code would return \"\", which is incorrect.\n                        if (\"xmlns\".equals(qname) && attrValue.isEmpty()) {\n                            return null;\n                        }\n                        return attrValue; // Return the found namespace URI.\n                    }\n                }\n                aNode = aNode.getParentNode();\n            }\n            // If no relevant namespace declaration attribute is found up the hierarchy, return null.\n            return null;\n        }\n        // If uri was not null initially, or if the node was not an Element,\n        // or if the fallback didn't find a namespace declaration, return the current uri (which could be null).\n        return uri;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}