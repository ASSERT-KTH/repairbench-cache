{
    "generation": "    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri\n     */\n    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n        }\n\n        if (!(node instanceof Element)) {\n            return null;\n        }\n\n        Element element = (Element) node;\n\n        String uri = element.getNamespaceURI();\n        if (uri == null) {\n            String prefix = getPrefix(node);\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n            Node aNode = node;\n            while (aNode != null && aNode.getNodeType() == Node.ELEMENT_NODE) {\n                Attr attr = ((Element) aNode).getAttributeNode(qname);\n                if (attr != null) {\n                    String value = attr.getValue();\n                    // For default namespace declaration xmlns=\"\" return empty string,\n                    // but that really means \"no namespace\" per DOM spec: return null.\n                    if (value.length() == 0) {\n                        return null;\n                    }\n                    return value;\n                }\n                aNode = aNode.getParentNode();\n            }\n            return null;\n        }\n        // For elements in the null namespace, DOM getNamespaceURI() returns null,\n        // so for comparison with test expectation, also map empty ns to null\n        if (uri.length() == 0) {\n            return null;\n        }\n        return uri;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}