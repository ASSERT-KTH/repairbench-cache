{
    "generation": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\n// Note: The org.apache.commons.jxpath.ri.model.dom.DOMNodePointer class\n// contains the relevant getPrefix method, which is assumed to be accessible.\n// import static org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix;\n\n// Placeholder for the getPrefix method if needed for context, assuming similar signature\n// class DOMNodePointer { public static String getPrefix(Node node) { return node.getPrefix(); } }\n// import static DOMNodePointer.getPrefix;\n\n\n    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri\n     */\n    public static String getNamespaceURI(Node node) {\n        Node targetNode = node;\n        if (targetNode instanceof Document) {\n            // If the node is a Document, use its document element.\n            targetNode = ((Document) targetNode).getDocumentElement();\n        }\n\n        // If the target node is not an Element (e.g., null document element,\n        // or input was not Element/Document), return null as namespace doesn't apply\n        // or cannot be determined in the context of this method's logic.\n        if (!(targetNode instanceof Element)) {\n            return null;\n        }\n\n        Element element = (Element) targetNode;\n\n        // Use the standard DOM Level 2/3 method first. This is generally the most reliable.\n        String uri = element.getNamespaceURI();\n\n        // If the standard method returns null, it might be because the DOM implementation\n        // is not fully namespace-aware, or the namespace is defined via an ancestor's\n        // xmlns attribute which getNamespaceURI() might not resolve.\n        // We perform a manual lookup in the ancestor chain as a fallback mechanism.\n        if (uri == null) {\n            // Determine the prefix of the element. This uses the static getPrefix method\n            // assumed to be available in this context (likely from DOMNodePointer).\n            // Pass 'element' instead of the original 'node' for clarity and safety.\n            String prefix = getPrefix(element);\n            // Construct the qualified name of the namespace attribute to search for (e.g., \"xmlns\" or \"xmlns:prefix\").\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n            // Search the element and its ancestors for the namespace declaration attribute.\n            Node aNode = element; // Start search from the element itself\n            while (aNode != null) {\n                // Only check Element nodes, as namespace attributes reside on elements.\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        // Found the namespace declaration attribute. Get its value (the URI).\n                        uri = attr.getValue();\n                        break; // Stop searching once the closest declaration is found.\n                    }\n                }\n                // Move up to the parent node.\n                aNode = aNode.getParentNode();\n            }\n            // If the loop completes without finding the attribute, uri remains null.\n        }\n\n        // FIX: The XML Namespaces specification defines that an empty string URI,\n        // typically declared via xmlns=\"\", means the element and its descendants\n        // (unless overridden) belong to *no* namespace. XPath processors often\n        // represent \"no namespace\" as a null URI when matching nodes.\n        // To ensure consistent behavior and fix matching issues like the one observed\n        // in the test, map an empty string URI result to null.\n        if (\"\".equals(uri)) {\n            return null;\n        }\n\n        // Return the determined namespace URI (can be null or a non-empty string).\n        return uri;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}