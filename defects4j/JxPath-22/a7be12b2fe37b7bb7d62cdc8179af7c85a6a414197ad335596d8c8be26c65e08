{
    "generation": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\n\npublic class DOMUtils { // Assuming this method is part of a DOMUtils class or similar.\n\n    // Note: getPrefix(Node node) is assumed to be an existing method in DOMUtils or similar context.\n    // Its behavior for Element nodes is typically a wrapper around Node.getPrefix().\n    // We are making this method more robust to potential quirks of getPrefix() or the DOM implementation itself.\n    // For the purpose of this fix, we assume getPrefix is available and works similarly to Node.getPrefix().\n    private static String getPrefix(Node node) {\n        // This is a placeholder for the actual DOMUtils.getPrefix method.\n        // If DOMUtils.getPrefix is not provided, this would be a ClassCastException.\n        // Assuming its presence given the original code structure.\n        if (node instanceof Element) {\n            return ((Element) node).getPrefix();\n        }\n        if (node instanceof Attr) {\n            String prefix = ((Attr) node).getPrefix();\n            if (prefix == null && ((Attr)node).getName().startsWith(\"xmlns:\")) {\n                 return ((Attr)node).getName().substring(6);\n            }\n            return prefix;\n        }\n        return node.getPrefix();\n    }\n\n    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri\n     */\n    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n        }\n\n        // Assuming 'node' is an Element after the Document check.\n        // A ClassCastException would occur if it's an Attr or Text node, but the test failure\n        // indicates a namespace resolution issue, not a casting issue.\n        Element element = (Element) node;\n\n        String uri = element.getNamespaceURI();\n        if (uri == null) {\n            // This block is executed if element.getNamespaceURI() returns null.\n            // This might happen for non-standard DOM implementations where xmlns=\"\" resolves to null\n            // instead of \"\" (empty string), or for truly non-namespaced elements.\n            \n            // Get the node's prefix. This should be null for unprefixed elements.\n            String prefix = getPrefix(node); \n            \n            // Construct the qualified name for a prefixed namespace declaration, if a prefix exists.\n            // If prefix is null, this will remain null, correctly not searching for xmlns:null.\n            String prefixedNsQname = prefix == null ? null : \"xmlns:\" + prefix;\n    \n            Node aNode = node;\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Element currentElement = (Element) aNode;\n\n                    // 1. Always check for a default namespace declaration attribute (xmlns=\"some_uri\")\n                    // This handles cases like <test xmlns=\"\"/> where prefix is null, but we need to find \"xmlns\" attribute.\n                    Attr defaultNsAttr = currentElement.getAttributeNode(\"xmlns\");\n                    if (defaultNsAttr != null) {\n                        return defaultNsAttr.getValue();\n                    }\n                    \n                    // 2. If a specific prefix was found for the original node, check for its declaration (xmlns:prefix=\"some_uri\")\n                    // This handles cases like <b:foo> and searches for xmlns:b.\n                    if (prefixedNsQname != null) {\n                        Attr prefixedNsAttr = currentElement.getAttributeNode(prefixedNsQname);\n                        if (prefixedNsAttr != null) {\n                            return prefixedNsAttr.getValue();\n                        }\n                    }\n                }\n                aNode = aNode.getParentNode();\n            }\n            return null; // If no namespace declaration attribute is found in the hierarchy, return null.\n        }\n        return uri;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}