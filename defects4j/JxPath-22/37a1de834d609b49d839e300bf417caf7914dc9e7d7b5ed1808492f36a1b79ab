{
    "generation": "    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri\n     */\n    public static String getNamespaceURI(Node node) {\n        // If the node is a Document, the namespace URI is relevant for its document element.\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n        }\n\n        // If, after handling a Document, the node is no longer an Element (e.g., if the document was empty,\n        // or if the original node was not an Element or Document type to begin with, like Text, Comment etc.),\n        // it does not have an element namespace URI. Return null.\n        if (!(node instanceof Element)) {\n            return null;\n        }\n\n        // Cast the node to an Element as we are now sure it's an element node.\n        Element element = (Element) node;\n\n        // According to DOM Level 2 and higher, Element.getNamespaceURI() correctly\n        // returns the namespace URI for the element, taking into account:\n        // - Prefixed elements (e.g., <prefix:name>).\n        // - Default namespace declarations (e.g., <name xmlns=\"http://example.com/ns\">).\n        // - Inherited default namespaces from ancestors.\n        // - Explicit empty namespace declarations (e.g., <name xmlns=\"\">), which result in an empty string (\"\").\n        // - Elements in \"no namespace\" (where no default namespace is in scope and no prefix is used),\n        //   which result in null.\n        //\n        // The original code's manual lookup for \"xmlns\" or \"xmlns:prefix\" attributes when\n        // element.getNamespaceURI() returned null was redundant and problematic.\n        // It could incorrectly find an ancestor's default namespace URI and assign it to an element\n        // that should, according to DOM's getNamespaceURI() (and XPath 1.0's interpretation of unprefixed names),\n        // be in \"no namespace\" (null) or \"empty namespace\" (\"\").\n        // JXPath's XPath 1.0 engine typically treats both null and \"\" as \"no namespace\" for unprefixed element names.\n        // Therefore, relying directly on element.getNamespaceURI() provides the correct and expected behavior.\n        return element.getNamespaceURI();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}