{
    "generation": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\n\npublic class MyClass { // Assuming the function is part of a class\n    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri\n     */\n    public static String getNamespaceURI(Node node) {\n        // Step 1: Handle Document nodes first. A Document itself does not have a namespace URI.\n        // We typically resolve the namespace of the document's root element.\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n            // If the document is empty (no document element), there's no namespace to derive.\n            if (node == null) {\n                return null;\n            }\n            // After resolving to the document element, proceed to determine its namespace.\n        }\n\n        // Step 2: Use the standard DOM method node.getNamespaceURI().\n        // This is the most reliable way as it correctly reflects the namespace based on the\n        // qualified name and inherited declarations (including default namespaces like xmlns=\"\").\n        String uri = node.getNamespaceURI();\n        if (uri != null) {\n            // This covers cases where the DOM implementation correctly returns \"\" for xmlns=\"\".\n            return uri;\n        }\n\n        // Step 3: If node.getNamespaceURI() returned null, perform a fallback lookup.\n        // This fallback is primarily applicable to Element nodes that might declare a namespace\n        // via an 'xmlns' attribute, but for which the standard DOM method returned null.\n        // For other node types (like Text, Comment, ProcessingInstruction, or Attributes\n        // that are not namespace declarations themselves), if their standard getNamespaceURI()\n        // returned null, they genuinely don't have a direct namespace URI in this context.\n        if (node.getNodeType() == Node.ELEMENT_NODE) {\n            // It's now safe to cast to Element, as we've confirmed the node type.\n            Element element = (Element) node;\n\n            // Determine the qualified attribute name for the namespace declaration (xmlns or xmlns:prefix).\n            // This assumes 'getPrefix' is another utility method that correctly extracts the prefix\n            // from the node, returning null if no prefix is present.\n            String prefix = getPrefix(node); // Assuming getPrefix is an accessible helper method\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n            // Traverse up the parent hierarchy from the current element to find a matching 'xmlns' declaration.\n            Node aNode = node;\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        // If an 'xmlns' attribute is found, its value is the namespace URI.\n                        return attr.getValue();\n                    }\n                }\n                aNode = aNode.getParentNode();\n            }\n        }\n\n        // Step 4: If no namespace URI was found by standard means or by searching 'xmlns' attributes,\n        // then the node is considered to be in no namespace, or is a node type that doesn't have\n        // a direct namespace URI. In this case, null is the appropriate return value.\n        return null;\n    }\n\n    // Note: The original problem description implies 'getPrefix' is an existing helper method.\n    // For completeness, if it were part of the fix, it might look like this (from original source context):\n    // public static String getPrefix(Node node) {\n    //     if (node instanceof Document) {\n    //         node = ((Document) node).getDocumentElement();\n    //         if (node == null) {\n    //             return null; // Empty document\n    //         }\n    //     }\n    //     return node.getPrefix();\n    // }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}