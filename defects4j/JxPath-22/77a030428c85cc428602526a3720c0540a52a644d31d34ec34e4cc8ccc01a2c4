{
    "generation": "    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri\n     */\n    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n            // If the document has no root element, node might become null.\n            if (node == null) {\n                return null;\n            }\n        }\n\n        // Use the standard DOM method first. It should handle most cases correctly,\n        // including attributes.\n        String uri = node.getNamespaceURI();\n\n        // If the standard DOM method returns null for an element, it might mean\n        // it's in the default namespace or no namespace. We need to check ancestor declarations.\n        // According to DOM Level 3, getNamespaceURI should return null for no namespace\n        // (e.g. <foo xmlns=\"\"> or <foo/> in a document with no default ns).\n        // However, some DOM implementations might return null incorrectly when a\n        // default namespace is defined higher up. So, we perform manual lookup\n        // specifically for elements if the standard method returns null.\n        if (uri == null && node.getNodeType() == Node.ELEMENT_NODE) {\n            Element element = (Element) node;\n            String prefix = getPrefix(node);\n\n            // If there's no prefix, we're looking for the default namespace (xmlns).\n            if (prefix == null) {\n                Node aNode = node;\n                while (aNode != null) {\n                    if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                        // Check for xmlns=\"\" declaration specifically first\n                        Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\");\n                        if (attr != null) {\n                            uri = attr.getValue();\n                            // An empty string value means \"no namespace\".\n                            // We represent \"no namespace\" as null.\n                            if (uri != null && uri.length() == 0) {\n                                return null;\n                            }\n                            // Found a non-empty default namespace declaration.\n                            return uri;\n                        }\n                    }\n                    // Stop searching at the document root or if no more parents\n                    if (aNode == node.getOwnerDocument()) break;\n                    aNode = aNode.getParentNode();\n                }\n                // No default namespace found in ancestors, so it's truly null.\n                return null;\n            }\n            // If there IS a prefix, getNamespaceURI() should ideally have returned\n            // the correct URI. The manual lookup for prefixed elements below might\n            // be redundant if the DOM impl follows the spec, but could help in\n            // rare cases or with older DOM levels. Let's keep the original logic's\n            // lookup for prefixed elements as a fallback, though it might be less critical.\n            else {\n                 String qname = \"xmlns:\" + prefix;\n                 Node aNode = node;\n                 while (aNode != null) {\n                     if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                         Attr attr = ((Element) aNode).getAttributeNode(qname);\n                         if (attr != null) {\n                             uri = attr.getValue();\n                             break; // Found the URI for the prefix\n                         }\n                     }\n                     if (aNode == node.getOwnerDocument()) break;\n                     aNode = aNode.getParentNode();\n                 }\n            }\n        }\n\n        // Final check: Ensure empty string \"\" is treated as null (no namespace).\n        // This handles cases like xmlns=\"\" found by the DOM's getNamespaceURI or\n        // our manual lookup for prefixed elements.\n        if (uri != null && uri.length() == 0) {\n            return null;\n        }\n\n        return uri;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}