{
    "generation": "/**\n * Get the ns uri of the specified node.\n * @param node Node to check\n * @return String ns uri\n */\npublic static String getNamespaceURI(Node node) {\n    if (node instanceof Document) {\n        node = ((Document) node).getDocumentElement();\n    }\n\n    Element element = (Element) node;\n\n    String uri = element.getNamespaceURI();\n    if (uri == null) {\n        String prefix = getPrefix(node);\n        String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n        Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                // Bug fix: call getAttributeNodeNS for namespace attributes\n                Attr attr;\n                if (prefix == null) {\n                    attr = ((Element) aNode).getAttributeNode(\"xmlns\");\n                } else {\n                    attr = ((Element) aNode).getAttributeNodeNS(\"http://www.w3.org/2000/xmlns/\", prefix);\n                    // Also handle xmlns:prefix=\"\" meaning default namespace unbound\n                    if (attr != null && attr.getValue().isEmpty()) {\n                        return null;\n                    }\n                }\n                if (attr != null) {\n                    String value = attr.getValue();\n                    // An empty string means no namespace for this prefix.\n                    return value.isEmpty() ? null : value;\n                }\n            }\n            aNode = aNode.getParentNode();\n        }\n        return null;\n    }\n    // If the uri is an empty string, treat as null for namespace-unbound\n    return uri.isEmpty() ? null : uri;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}