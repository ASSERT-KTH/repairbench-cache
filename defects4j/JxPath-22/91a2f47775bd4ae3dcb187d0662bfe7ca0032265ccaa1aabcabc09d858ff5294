{
    "generation": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\n\n// NOTE: The getPrefix helper method is assumed to exist elsewhere,\n// as it was used but not defined in the original provided buggy function snippet.\n// A possible implementation is included here for context during review, but should\n// not be part of the final code block if only the target function is requested.\n/*\n * Helper function assumed to exist.\n * Gets the prefix from a node name (e.g., \"b\" from \"b:foo\").\n * @param node Node\n * @return String prefix or null\n */\n/* static String getPrefix(Node node) {\n    String name = node.getNodeName();\n    int index = name.indexOf(':');\n    if (index < 0) {\n        return null;\n    }\n    return name.substring(0, index);\n}\n*/\n\n\n    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri\n     */\n    public static String getNamespaceURI(Node node) {\n        if (node == null) { // Basic null check for input\n             return null;\n        }\n        // Handle Document node by using its document element\n        if (node.getNodeType() == Node.DOCUMENT_NODE) {\n            node = ((Document) node).getDocumentElement();\n            // If document has no root element, it has no namespace context\n            if (node == null) {\n                return null;\n            }\n        }\n\n        // We need an Element to determine namespace in context\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n             // For non-elements (Attributes, Text, etc.), namespace URI is generally null.\n             // Return null consistent with this and original code's implicit assumption.\n             return null;\n        }\n\n        Element element = (Element) node;\n\n        // Use the element's inherent namespaceURI if available.\n        String uri = element.getNamespaceURI();\n\n        // Per DOM spec and XML Namespaces, an empty string URI signifies \"no namespace\".\n        // We should consistently return null for \"no namespace\".\n        if (uri != null && uri.length() == 0) {\n             uri = null;\n        }\n\n        // If the element's namespace URI is null (either inherently or because it was \"\"),\n        // we need to check ancestors for a default namespace (xmlns) or a specific prefix declaration (xmlns:prefix).\n        if (uri == null) {\n            // Assuming getPrefix helper exists and works correctly (not provided in original snippet)\n            String prefix = getPrefix(node);\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n\n            Node aNode = node; // Start search from the element itself upwards\n            while (aNode != null) {\n                // Only check Element nodes for namespace attributes\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Element currentElement = (Element) aNode;\n                    // Check if the current element defines the namespace\n                    Attr attr = currentElement.getAttributeNode(qname);\n                    if (attr != null) {\n                        String value = attr.getValue();\n                        // Fix: An empty string value from xmlns=\"\" or xmlns:prefix=\"\"\n                        // means the prefix/default is unbound (no namespace). Return null.\n                        return \"\".equals(value) ? null : value;\n                    }\n                }\n                // Move up to the parent node\n                aNode = aNode.getParentNode();\n                 // Stop if we hit non-element nodes (like Document) or run out of parents\n                 // The loop condition (aNode != null) handles running out of parents.\n            }\n            // No namespace declaration (xmlns=\"...\", xmlns:prefix=\"...\") found in ancestors.\n            // This means the element is in no namespace.\n            return null;\n        }\n\n        // uri was non-null and non-empty initially, return it.\n        return uri;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}