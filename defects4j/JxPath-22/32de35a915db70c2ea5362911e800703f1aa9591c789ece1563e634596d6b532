{
    "generation": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\n\npublic class MyClass { // Assuming this is part of a class, e.g., DOMNodePointer\n    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri\n     */\n    public static String getNamespaceURI(Node node) {\n        if (node == null) {\n            return null;\n        }\n\n        // Handle Document nodes: get namespace URI of the document element\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n            if (node == null) {\n                return null; // Document might be empty\n            }\n        }\n\n        // Get namespace URI using standard DOM method for the current node.\n        // This handles explicit namespaces and empty default namespaces (returns \"\").\n        String uri = node.getNamespaceURI();\n\n        // If standard DOM method returns non-null, use it.\n        if (uri != null) {\n            return uri;\n        }\n\n        // If uri is null, it means the node is not in a namespace\n        // according to getNamespaceURI().\n        // However, for Element nodes, a default namespace might be declared\n        // higher up in the hierarchy, and some DOM implementations might not propagate it\n        // correctly via getNamespaceURI() for unprefixed elements.\n        // For other node types like Attr, Text, Comment, etc., a null URI is often correct.\n        if (node.getNodeType() == Node.ELEMENT_NODE) {\n            // This block is only for Element nodes whose getNamespaceURI() returned null.\n            // This implies they are unprefixed and might be in a default namespace,\n            // which needs to be looked up by searching for xmlns attributes up the tree.\n\n            // Assuming getPrefix(node) internally uses node.getPrefix() or similar DOM API.\n            // For an unprefixed element (e.g., <test/>), node.getPrefix() returns null.\n            String prefix = node.getPrefix(); // Use DOM's getPrefix directly.\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n    \n            Node aNode = node;\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        // If a default namespace (xmlns) or a prefixed namespace (xmlns:prefix)\n                        // is found, return its value (which can be an empty string for xmlns=\"\").\n                        return attr.getValue();\n                    }\n                }\n                aNode = aNode.getParentNode();\n            }\n        }\n\n        // If it's not an Element (or if it's an Element but the fallback loop found no namespace,\n        // or its direct getNamespaceURI was already null), then its namespace URI is genuinely null.\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}