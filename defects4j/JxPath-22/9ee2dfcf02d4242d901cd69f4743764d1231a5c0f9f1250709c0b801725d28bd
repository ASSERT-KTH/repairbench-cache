{
    "generation": "    /**\n     * Get the ns uri of the specified node.\n     * @param node Node to check\n     * @return String ns uri\n     */\n    public static String getNamespaceURI(Node node) {\n        if (node instanceof Document) {\n            node = ((Document) node).getDocumentElement();\n        }\n\n        // Assuming 'node' is an Element or DocumentElement here.\n        // If node could be other types like Attr, Text etc., a ClassCastException would occur.\n        // The current test failure points to a logical error, not a ClassCastException.\n        Element element = (Element) node; \n\n        String uri = element.getNamespaceURI();\n        if (uri == null) {\n            // If the standard DOM getNamespaceURI returns null,\n            // we try to find an explicit xmlns declaration up the hierarchy.\n            String prefix = getPrefix(node); // This gets the prefix of the 'node' itself.\n            String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;\n    \n            Node aNode = node; // Start searching from the current node\n            while (aNode != null) {\n                if (aNode.getNodeType() == Node.ELEMENT_NODE) {\n                    Attr attr = ((Element) aNode).getAttributeNode(qname);\n                    if (attr != null) {\n                        String value = attr.getValue();\n                        // If the declared value is an empty string (e.g., from xmlns=\"\"),\n                        // return null to conform with DOM's getNamespaceURI behavior for \"no namespace\".\n                        return \"\".equals(value) ? null : value;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            }\n            return null; // No matching namespace declaration found in ancestors\n        }\n        return uri; // Return the URI obtained from the standard DOM method\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}