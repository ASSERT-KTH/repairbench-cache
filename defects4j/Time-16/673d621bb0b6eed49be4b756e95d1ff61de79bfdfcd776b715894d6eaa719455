{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    // Capture the original chronology and millis\n    long instantMillis = instant.getMillis();\n    Chronology baseChrono = instant.getChronology();\n    // Convert to local (unoffset) millisecond instant\n    long instantLocal = instantMillis + baseChrono.getZone().getOffset(instantMillis);\n    // Select the chronology to use for parsing (may apply formatter\u2010level overrides)\n    Chronology chrono = selectChronology(baseChrono);\n\n    // Per the javadoc for parseInto, ignore the formatter's default year\n    // and use the year of the supplied instant instead\n    int defaultYear = baseChrono.year().get(instantLocal);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Compute the new millis and apply to the instant\n    instant.setMillis(bucket.computeMillis(false, text));\n\n    // Handle any parsed offset or zone\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n\n    // Finally apply any formatter\u2010level zone override\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}