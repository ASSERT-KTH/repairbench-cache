{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    chrono = selectChronology(chrono);\n\n    // Get the local time from the millis, taking into account the chronology's zone\n    long instantLocal = instantMillis;\n    DateTimeZone zone = chrono.getZone();\n    if (zone != null) {\n        instantLocal += zone.getOffset(instantMillis);\n    }\n\n    // Important fix: override defaultYear in the bucket with base year from the instant\n    int baseYear = chrono.year().get(instantMillis);\n\n    // Use base year from instant as defaultYear so partial parses (e.g. 'M d') keep correct year\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, baseYear\n    );\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}