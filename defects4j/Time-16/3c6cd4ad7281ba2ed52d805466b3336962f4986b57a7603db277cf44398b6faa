{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n        // Get the original fields to preserve values that weren't parsed\n        long originalInstant = instant.getMillis();\n        Chronology originalChrono = instant.getChronology();\n\n        // Compute new millis with parsed fields\n        long newInstant = bucket.computeMillis(false, text);\n\n        // Blend the original instant with the parsed fields, preserving unparsed fields\n        // by converting both to LocalDateTime then combining them\n        long blendedInstant;\n        if (bucket.isParsed(DateTimeFieldType.year())) {\n            blendedInstant = newInstant;\n        } else {\n            // If year wasn't parsed, preserve original year (and higher fields if needed)\n            DateTime originalDatetime = new Instant(originalInstant, originalChrono).toDateTime();\n            DateTime parsedDatetime = new Instant(newInstant, chrono).toDateTime();\n\n            // Field types to copy from original\n            int[] preservedFields = {\n                DateTimeFieldType.era(),\n                DateTimeFieldType.centuryOfEra(),\n                DateTimeFieldType.yearOfCentury(),\n                DateTimeFieldType.yearOfEra(),\n                DateTimeFieldType.year()\n            };\n\n            DateTime blendedDatetime = new DateTime(\n                originalInstant,\n                chrono.withZone(originalChrono.getZone())\n            );\n\n            // Copy parsed fields to the blended datetime\n            for (DateTimeFieldType type : DateTimeFieldType.values()) {\n                if (bucket.isParsed(type)) {\n                    blendedDatetime = blendedDatetime.withField(type, parsedDatetime.get(type));\n                } else if (!containsType(preservedFields, type)) {\n                    // For unparsed non-year fields, keep original values\n                    blendedDatetime = blendedDatetime.withField(type, originalDatetime.get(type));\n                }\n            }\n\n            blendedInstant = blendedDatetime.getMillis();\n        }\n\n        instant.setMillis(blendedInstant);\n    }\n\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}\n\nprivate boolean containsType(int[] types, DateTimeFieldType type) {\n    for (int t : types) {\n        if (DateTimeFieldType.constants().get(t).equals(type)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}