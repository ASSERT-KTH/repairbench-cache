{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    // Capture the instant millis and chronology\n    long instantMillis = instant.getMillis();\n    Chronology origChrono = instant.getChronology();\n    DateTimeZone origZone = origChrono.getZone();\n    // Convert to a local millis for the bucket\n    long instantLocal = instantMillis + origZone.getOffset(instantMillis);\n    // Apply any formatter\u2010specified chronology/zone\n    Chronology chrono = selectChronology(origChrono);\n\n    // Per javadoc, ignore the formatter's default year and use the instant's year\n    int defaultYear = chrono.year().get(instantLocal);\n\n    // Build the bucket with the instant's year as the default\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n\n    // Parse into the bucket\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Compute the new millis and set it on the instant\n    instant.setMillis(bucket.computeMillis(false, text));\n\n    // Handle any parsed offset or zone\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n\n    // Finally apply any formatter\u2010specified zone override\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}