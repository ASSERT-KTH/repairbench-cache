{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    // Capture the base instant and chronology\n    long instantMillis = instant.getMillis();\n    Chronology baseChrono = instant.getChronology();\n    // Convert to local millis for parsing\n    long instantLocal = instantMillis + baseChrono.getZone().getOffset(instantMillis);\n    // Apply any forced chronology from the formatter\n    Chronology chrono = selectChronology(baseChrono);\n    // For parseInto we ignore iDefaultYear and use the year of the supplied instant\n    int defaultYear = baseChrono.year().get(instantMillis);\n\n    DateTimeParserBucket bucket =\n        new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n\n    int newPos = parser.parseInto(bucket, text, position);\n    // Compute the new millis and update the instant\n    instant.setMillis(bucket.computeMillis(false, text));\n\n    // Handle parsed offset or zone\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int off = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(off);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n\n    // Finally apply any forced zone from the formatter\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}