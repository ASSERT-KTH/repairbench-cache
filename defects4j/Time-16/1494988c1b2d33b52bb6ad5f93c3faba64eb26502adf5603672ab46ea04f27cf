{
    "generation": "    /**\n     * Parses a datetime from the given text, at the given position, saving the\n     * result into the fields of the given ReadWritableInstant. If the parse\n     * succeeds, the return value is the new text position. Note that the parse\n     * may succeed without fully reading the text and in this case those fields\n     * that were read will be set.\n     * <p>\n     * Only those fields present in the string will be changed in the specified\n     * instant. All other fields will remain unaltered. Thus if the string only\n     * contains a year and a month, then the day and time will be retained from\n     * the input instant. If this is not the behaviour you want, then reset the\n     * fields before calling this method, or use {@link #parseDateTime(String)}\n     * or {@link #parseMutableDateTime(String)}.\n     * <p>\n     * If it fails, the return value is negative, but the instant may still be\n     * modified. To determine the position where the parse failed, apply the\n     * one's complement operator (~) on the return value.\n     * <p>\n     * This parse method ignores the {@link #getDefaultYear() default year} and\n     * parses using the year from the supplied instant as the default.\n     * <p>\n     * The parse will use the chronology of the instant.\n     *\n     * @param instant  an instant that will be modified, not null\n     * @param text  the text to parse\n     * @param position  position to start parsing from\n     * @return new position, negative value means parse failed -\n     *  apply complement operator (~) to get position of failure\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the instant is null\n     * @throws IllegalArgumentException if any field is out of range\n     */\n    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        // Use the instant's chronology to get the default year, as per method Javadoc.\n        Chronology instantChrono = instant.getChronology();\n        int defaultYear = instantChrono.year().get(instantMillis);\n\n        // Select the chronology for parsing. This might differ from the instant's chronology\n        // if the formatter has a chronic override.\n        Chronology parseChrono = selectChronology(instantChrono);\n\n        // Calculate the local instant millis using the *parsing* chronology's zone offset.\n        // This ensures the base instant used by the bucket aligns with the parsing context.\n        long instantLocal = instantMillis + parseChrono.getZone().getOffset(instantMillis);\n\n        // Create the bucket using the parsing chrono and the instant's year as the default year.\n        // This ensures unspecified fields (like year) default to the instant's original values.\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, parseChrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        // Update the instant's millis using the computed value from the bucket.\n        // bucket.computeMillis handles merging parsed fields with the base instant and applies\n        // any parsed offset or zone.\n        instant.setMillis(bucket.computeMillis(false, text));\n\n        // Set the final chronology on the instant.\n        // Start with the chronology from the bucket (which reflects parsed zone/offset).\n        // Then, apply the formatter's zone override (iZone) if it exists.\n        Chronology resultChrono = bucket.getChronology();\n        if (iZone != null) {\n            resultChrono = resultChrono.withZone(iZone);\n        }\n        instant.setChronology(resultChrono);\n        // The original code had an incorrect instant.setZone(iZone) call here.\n        // Setting the chronology's zone above is the correct approach.\n\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}