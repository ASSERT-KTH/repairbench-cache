{
    "generation": "    /**\n     * Parses a datetime from the given text, at the given position, saving the\n     * result into the fields of the given ReadWritableInstant. If the parse\n     * succeeds, the return value is the new text position. Note that the parse\n     * may succeed without fully reading the text and in this case those fields\n     * that were read will be set.\n     * <p>\n     * Only those fields present in the string will be changed in the specified\n     * instant. All other fields will remain unaltered. Thus if the string only\n     * contains a year and a month, then the day and time will be retained from\n     * the input instant. If this is not the behaviour you want, then reset the\n     * fields before calling this method, or use {@link #parseDateTime(String)}\n     * or {@link #parseMutableDateTime(String)}.\n     * <p>\n     * If it fails, the return value is negative, but the instant may still be\n     * modified. To determine the position where the parse failed, apply the\n     * one's complement operator (~) on the return value.\n     * <p>\n     * This parse method ignores the {@link #getDefaultYear() default year} and\n     * parses using the year from the supplied instant as the default.\n     * <p>\n     * The parse will use the chronology of the instant.\n     *\n     * @param instant  an instant that will be modified, not null\n     * @param text  the text to parse\n     * @param position  position to start parsing from\n     * @return new position, negative value means parse failed -\n     *  apply complement operator (~) to get position of failure\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the instant is null\n     * @throws IllegalArgumentException if any field is out of range\n     */\n    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology originalChrono = instant.getChronology();\n        // Use the year from the instant as the default year, ignore iDefaultYear\n        int defaultYear = originalChrono.year().get(instantMillis);\n        long instantLocal = instantMillis + originalChrono.getZone().getOffset(instantMillis);\n        \n        // Select chronology for parsing, potentially applying zone override or UTC for offset parsing\n        Chronology parseChrono = selectChronology(originalChrono);\n        \n        // Create bucket using instant's year as default\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, parseChrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        \n        // Compute new millis by merging parsed fields onto the base instant\n        instant.setMillis(bucket.computeMillis(false, text));\n        \n        // Determine the final zone based on overrides or parsed values\n        DateTimeZone resultZone = null;\n        if (iZone != null) {\n            // Formatter's explicit zone overrides everything\n            resultZone = iZone;\n        } else if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            // Parsed offset applies if no explicit zone\n            resultZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n        } else if (bucket.getZone() != null) {\n            // Parsed zone name applies if no explicit zone or offset\n            resultZone = bucket.getZone();\n        } else {\n            // Otherwise, retain the original zone\n            resultZone = originalChrono.getZone();\n        }\n        \n        // Set the final chronology on the instant (original type with final zone)\n        Chronology resultChrono = originalChrono.withZone(resultZone);\n        instant.setChronology(resultChrono);\n        \n        // Note: The original code had a final instant.setZone(iZone) call here.\n        // This is now handled by the iZone check above when determining resultZone,\n        // ensuring the formatter's zone correctly overrides others.\n        \n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}