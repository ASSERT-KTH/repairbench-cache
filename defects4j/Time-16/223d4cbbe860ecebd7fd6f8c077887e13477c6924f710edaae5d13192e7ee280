{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long originalMillis = instant.getMillis();\n    int originalYear = instant.getChronology().year().get();\n    \n    long instantMillis = originalMillis;\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    if (newPos >= 0) {\n        // Check if the year was parsed; if not, retain the original year\n        if (!bucket.getFields().contains(DateTimeFieldType.year())) {\n            bucket.getFields().add(DateTimeFieldType.year());\n            bucket.set(defaultYearProvider(), originalYear);\n        }\n        long computedMillis = bucket.computeMillis(false, text);\n        instant.setMillis(computedMillis);\n        \n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        \n        if (iZone != null) {\n            instant.setZone(iZone);\n        } else {\n            instant.setChronology(chrono);\n        }\n    }\n    \n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}