{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    // Grab the original instant and chronology\n    long instantMillis = instant.getMillis();\n    Chronology originalChrono = instant.getChronology();\n    // Compute local milliseconds (to seed the bucket)\n    long instantLocal = instantMillis + originalChrono.getZone().getOffset(instantMillis);\n    // Apply any formatter\u2010level chronology override\n    Chronology chrono = selectChronology(originalChrono);\n\n    // Use the year of the supplied instant as the default year\n    int defaultYear = chrono.year().get(instantMillis);\n\n    // Create the bucket with the instant's year as default\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n\n    // Parse into the bucket\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Commit the parsed fields back to the instant\n    instant.setMillis(bucket.computeMillis(false, text));\n\n    // Handle any parsed offset/zone\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n\n    // Finally apply any formatter\u2010level zone override\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}