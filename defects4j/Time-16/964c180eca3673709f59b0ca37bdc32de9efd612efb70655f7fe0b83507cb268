{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    chrono = selectChronology(chrono);\n\n    // Supply the *current* year as defaultYear in the case of parseInto\n    int effectiveDefaultYear = iDefaultYear;\n    if (!isParser() || (text == null || text.length() == 0) || iDefaultYear == 0) {\n        // iDefaultYear == 0 means no explicitly set default year\n        effectiveDefaultYear = chrono.year().get(instantMillis);\n    }\n\n    // Note: do NOT add the zone offset to instantMillis here, otherwise the base date might be wrong\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chrono, iLocale, iPivotYear, effectiveDefaultYear);\n\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}