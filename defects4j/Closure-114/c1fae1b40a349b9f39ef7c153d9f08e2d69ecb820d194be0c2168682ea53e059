{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        // Check if the assignment expression itself is the target of a CALL.\n        // Example: (fun = function(){ x; })();\n        // In this case, the result of the assignment (the function) is immediately called.\n        // The variable 'fun' itself is not \"referenced\" in a way that requires it to be kept,\n        // as its value is used directly. The name 'fun' can be optimized away if not used elsewhere.\n        // The original code was incorrectly recording a dependency that prevented 'fun' from being removed,\n        // contrary to the comment's intention for this specific scenario.\n        if (parent.isCall() && parent.getFirstChild() == n) {\n          // Do not record a dependency for the LHS variable in this context.\n          // This allows NameAnalyzer to correctly identify 'fun' as removable\n          // if it's not used by any other reference.\n          return;\n        }\n\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (parent.getFirstChild().getNext() != n) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else {\n          // The rhs of the assignment is the caller, so it's used by the\n          // context. Don't associate it w/ the lhs.\n          // FYI: this fixes only the specific case where the assignment is the\n          // caller expression, but it could be nested deeper in the caller and\n          // we would still get a bug.\n          // See testAssignWithCall2 for an example of this.\n          recordDepScope(recordNode, ns);\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}