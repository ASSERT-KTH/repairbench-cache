{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (parent.getFirstChild().getNext() != n) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else if (parent.isCall() && parent.getFirstChild() == n) {\n          // Assignment is the callee in a call expression, e.g., (a=b)().\n          // The assigned value (RHS) is immediately used by the call.\n          // Associate the name 'a' with the CALL node itself, representing\n          // the context where the assignment happens and is immediately used.\n          // This prevents the RHS (recordNode) from being incorrectly linked\n          // solely to the LHS name 'a', which might allow 'a' to be removed\n          // if it's not used elsewhere.\n          recordDepScope(parent, ns);\n        } else {\n          // Default case: The rhs of the assignment represents the value dependency.\n          // Associate the name with the RHS node's scope/dependency.\n          recordDepScope(recordNode, ns);\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}