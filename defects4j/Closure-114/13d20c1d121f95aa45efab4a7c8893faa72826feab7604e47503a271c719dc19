{
    "generation": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      // Patch for assignments that appear in the init,\n      // condition or iteration part of a FOR loop.  Without\n      // this change, all 3 of those parts try to claim the for\n      // loop as their dependency scope.  The last assignment in\n      // those three fields wins, which can result in incorrect\n      // reference edges between referenced and assigned variables.\n      //\n      // TODO(user) revisit the dependency scope calculation\n      // logic.\n      if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n    } else {\n      // If the LHS is being assigned the result of a function expression and this\n      // assignment is the direct caller expression, don't associate the assignment node\n      // as the dependency, but instead associate the name (to prevent spurious edges).\n      //\n      // For (fun = function(){x;})();\n      // Use nameNode as the dependency scope.\n      if (parent.isCall() && parent.getFirstChild() == n &&\n          n.getLastChild() != null &&\n          n.getLastChild().isFunction()) {\n        recordDepScope(nameNode, ns);\n      } else {\n        recordDepScope(recordNode, ns);\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}