{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        // Special case for FOR loops.\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n\n          // Assignments in the init or incr block are handled differently\n          // than assignments in the condition block.\n          if (parent.getFirstChild().getNext() != n) { // Condition is the second child\n            // Init or Incr\n            recordDepScope(recordNode, ns);\n          } else {\n            // Condition\n            recordDepScope(nameNode, ns);\n          }\n        } else {\n          // For general assignments, e.g., `a = b`, `var a = b;`, or assigns\n          // whose result is used directly like `(a = function() {})()`,\n          // associate the dependency scope with the NAME node itself.\n          // This allows the analysis to potentially remove the variable if\n          // it's assigned but never referenced elsewhere. Associating with\n          // recordNode (the ASSIGN node or VAR node) could incorrectly\n          // mark the variable as used by the surrounding context.\n          // This mirrors the logic used for the FOR loop condition.\n          recordDepScope(nameNode, ns);\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}