{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (parent.getFirstChild().getNext() != n) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else {\n          // The rhs of the assignment is the caller, so it's used by the\n          // context. Don't associate it w/ the lhs.\n          // FYI: this fixes only the specific case where the assignment is the\n          // caller expression, but it could be nested deeper in the caller and\n          // we would still get a bug.\n          // See testAssignWithCall2 for an example of this.\n          //\n          // If the assignment node (n) is the target of a CALL or NEW operation,\n          // like (fun = function(){})(), then the nameNode (fun) is not actually\n          // used by the recordNode (the function expression). The variable 'fun'\n          // is simply assigned a value which is then immediately consumed by the\n          // surrounding call. In this specific case, we should not record a\n          // dependency from the nameNode to the recordNode, as it prevents the\n          // nameNode from being correctly identified as unused if it has no\n          // other references.\n          if ((parent.isCall() || parent.isNew()) && parent.getFirstChild() == n) {\n            // Do not record a dependency scope. The nameNode's usage is determined\n            // by its other references, not by the RHS in this context.\n          } else {\n            recordDepScope(recordNode, ns);\n          }\n        }\n      }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}