{
    "generation": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      // For loop assignments are handled specially.\n      if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n    } else if (parent.isCall() && parent.getFirstChild() == n) {\n      // When the assignment is used as the callee of a call expression,\n      // record the dependency with the left-hand side name rather than the\n      // call node. (The call node is used by the caller context and should not\n      // tie the dependency to the lhs.)\n      recordDepScope(nameNode, ns);\n    } else {\n      // In all other cases, use the recordNode.\n      recordDepScope(recordNode, ns);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}