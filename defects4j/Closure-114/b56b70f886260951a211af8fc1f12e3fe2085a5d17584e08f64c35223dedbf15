{
    "generation": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n    Node nameNode = n.getFirstChild();\n    Node parent = n.getParent();\n    NameInformation ns = createNameInformation(t, nameNode);\n    if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n            if (parent.getFirstChild().getNext() != n) {\n                recordDepScope(recordNode, ns);\n            } else {\n                recordDepScope(nameNode, ns);\n            }\n        } else if (NodeUtil.isExpressionResult(parent) &&\n                   parent.getParent().isExprResult() &&\n                   parent.getParent().getParent().isCall()) {\n            // Handle the case where the assignment is part of a call expression\n            // and should not be associated with the lhs in the dependency scope.\n            // This fixes the specific case where the assignment is the caller expression.\n            recordDepScope(nameNode, ns);\n        } else {\n            recordDepScope(recordNode, ns);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}