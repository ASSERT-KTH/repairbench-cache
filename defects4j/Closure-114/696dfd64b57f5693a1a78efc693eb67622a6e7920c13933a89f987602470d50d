{
    "generation": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      // Patch for assignments that appear in the init, condition, or iteration part of a FOR loop.\n      // Without this change, all 3 of those parts try to claim the for loop as their dependency scope.\n      // The last assignment in those three fields wins, which can result in incorrect reference edges between referenced and assigned variables.\n      //\n      // TODO(user) revisit the dependency scope calculation logic.\n      if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n    } else {\n      // The rhs of the assignment is the caller, so it's used by the context. Don't associate it w/ the lhs.\n      // FYI: this fixes only the specific case where the assignment is the caller expression, but it could be nested deeper in the caller and we would still get a bug.\n      // See testAssignWithCall2 for an example of this.\n      if (n.getParent() != null && n.getParent().isCall()) {\n        // Do not record the dependency scope if the assignment is a caller expression\n        return;\n      }\n      recordDepScope(recordNode, ns);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}