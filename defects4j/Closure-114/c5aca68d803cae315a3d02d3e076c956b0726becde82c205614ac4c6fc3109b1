{
    "generation": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n    Node nameNode = n.getFirstChild();\n    Node parent = n.getParent();\n    NameInformation ns = createNameInformation(t, nameNode);\n    if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n            // Patch for assignments that appear in the init,\n            // condition or iteration part of a FOR loop.  Without\n            // this change, all 3 of those parts try to claim the for\n            // loop as their dependency scope.  The last assignment in\n            // those three fields wins, which can result in incorrect\n            // reference edges between referenced and assigned variables.\n            //\n            // TODO(user) revisit the dependency scope calculation\n            // logic.\n            if (NodeUtil.isForInit(n)) {\n                recordDepScope(recordNode, ns);\n            } else {\n                recordDepScope(nameNode, ns);\n            }\n        } else if (NodeUtil.isCall(parent) && parent.getFirstChild() == n) {\n            // The assignment is the callee of a call expression.\n            // The callee is not considered to be used by the call expression.\n            recordDepScope(nameNode, ns);\n        } else {\n            // The rhs of the assignment is the caller, so it's used by the\n            // context. Don't associate it w/ the lhs.\n            recordDepScope(recordNode, ns);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}