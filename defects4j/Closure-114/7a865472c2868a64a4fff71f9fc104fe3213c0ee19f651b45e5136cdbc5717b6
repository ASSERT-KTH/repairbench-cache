{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (parent.getFirstChild().getNext() != n) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else {\n          // The rhs of the assignment is the caller, so it's used by the\n          // context. Don't associate it w/ the lhs.\n          // FYI: this fixes only the specific case where the assignment is the\n          // caller expression, but it could be nested deeper in the caller and\n          // we would still get a bug.\n          // See testAssignWithCall2 for an example of this.\n\n          // Fix for testAssignWithCall:\n          // When an ASSIGN node (n) is the direct callee of a CALL expression (parent),\n          // the variable on the LHS (nameNode, e.g., 'fun' in '(fun = function(){})()')\n          // is not 'used' as a reference after the assignment. Its value is immediately\n          // consumed by the CALL. Therefore, recording a dependency scope for the LHS\n          // variable (ns) on the RHS node (recordNode) would incorrectly mark the\n          // LHS variable as used. To allow for proper dead-code elimination of 'fun',\n          // we skip recording this specific dependency.\n          if (parent.isCall() && parent.getFirstChild() == n) {\n            // Do not record a dependency scope for the LHS variable (ns) in this specific case.\n            // The variable's assigned value is used by the call, but the variable name itself\n            // is not referenced and should be eligible for removal if not used elsewhere.\n          } else {\n            recordDepScope(recordNode, ns);\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}