{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n\n          // Check if the assignment node 'n' is the condition part of the FOR loop.\n          // The FOR structure is FOR <init>; <condition>; <increment>.\n          // So, the condition is the second child.\n          if (parent.getFirstChild().getNext() == n) {\n             // Condition: Associate scope with the name node itself.\n            recordDepScope(nameNode, ns);\n          } else {\n             // Init or Increment: Associate scope with the containing FOR node.\n            recordDepScope(recordNode, ns);\n          }\n        } else {\n          // Fix: For assignments, especially those involved in calls (like IIFEs)\n          // or complex expressions, the dependency scope should be associated\n          // with the name being assigned (LHS), not the surrounding expression\n          // (recordNode). Associating with recordNode incorrectly implied that\n          // the name itself was used by the surrounding context (e.g., the call),\n          // preventing removal of unused variables like in `(func = function(){})()`.\n          // Associating with nameNode marks this as the point of definition.\n          recordDepScope(nameNode, ns);\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}