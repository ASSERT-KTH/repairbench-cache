{
    "generation": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      // Patch for assignments in a FOR loop.\n      if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n    } else if (parent.isCall() && parent.getFirstChild() == n) {\n      // If the assignment is being used as a callee in a call,\n      // then the right-hand side (the function expression) is actually\n      // the caller. Record its dependency scope rather than that of the lhs.\n      recordDepScope(n.getLastChild(), ns);\n    } else {\n      // In the normal case, the assignment's result is used by the context.\n      // (i.e. the rhs is used) so do not bind the dependency to the lhs.\n      recordDepScope(recordNode, ns);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}