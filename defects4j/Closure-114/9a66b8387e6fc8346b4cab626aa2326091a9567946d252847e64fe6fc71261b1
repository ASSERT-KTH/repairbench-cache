{
    "generation": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n    Node nameNode = n.getFirstChild();\n    Node parent = n.getParent();\n    NameInformation ns = createNameInformation(t, nameNode);\n    if (ns != null) {\n        if (parent.isCall()) {\n            // If the assignment is part of a call expression, the scope should\n            // be recorded on the call node itself, not the assignment node.\n            // This ensures that the assignment is properly associated with the\n            // call context.\n            recordDepScope(parent, ns);\n        } else if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n            // Patch for assignments that appear in the init, condition or iteration\n            // part of a FOR loop. Without this change, all 3 of those parts try to\n            // claim the for loop as their dependency scope. The last assignment in\n            // those three fields wins, which can result in incorrect reference\n            // edges between referenced and assigned variables.\n            if (parent.getFirstChild().getNext() != n) {\n                recordDepScope(recordNode, ns);\n            } else {\n                recordDepScope(nameNode, ns);\n            }\n        } else {\n            // The rhs of the assignment is the caller, so it's used by the\n            // context. Don't associate it w/ the lhs.\n            recordDepScope(recordNode, ns);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}