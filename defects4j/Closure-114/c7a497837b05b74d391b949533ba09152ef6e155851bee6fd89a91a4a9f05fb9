{
    "generation": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      // For a FOR loop, if the assignment is not the initializer,\n      // use the provided record node; otherwise use the LHS.\n      if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n    } else if (recordNode.isCall()) {\n      // When the assignment appears as the caller of a call,\n      // don\u2019t let the call\u2019s dependency force the LHS to be retained.\n      // Instead, record the dependency using the LHS so that it can be dropped.\n      recordDepScope(nameNode, ns);\n    } else {\n      recordDepScope(recordNode, ns);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}