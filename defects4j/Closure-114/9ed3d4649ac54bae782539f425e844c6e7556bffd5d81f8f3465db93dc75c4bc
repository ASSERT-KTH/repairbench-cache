{
    "generation": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n    } else if (parent.isExprResult() &&\n               parent.getParent() != null &&\n               parent.getParent().isCall()) {\n      // Special case: an assignment that *is* the direct child expression of\n      // a call (i.e. (x=func())()). Here, the RHS defines a new function\n      // that is immediately called, so it's not associated with the lhs var.\n      // This avoids incorrectly removing the function expression.\n      recordDepScope(nameNode, ns);\n    } else {\n      recordDepScope(recordNode, ns);\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}