{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n\n          // Assignments in the init are treated differently than assignments\n          // in the condition or increment. This is because the iterations of\n          // the loop are controlled by the condition and increment, whereas the\n          // init is executed only once.\n          if (parent.getFirstChild().getNext() == n // Is 'n' the condition?\n              || parent.getFirstChild().getNext().getNext() == n) { // Is 'n' the increment?\n            recordDepScope(recordNode, ns);\n          } else { // init\n            recordDepScope(nameNode, ns);\n          }\n        } else {\n          // Default case: Associate the name with the node representing the name\n          // itself. This handles cases like `(a = b)()` or `foo(a = b)`, where\n          // the *value* of the assignment expression is used by the parent context,\n          // but the assigned variable `a` itself isn't necessarily read by that\n          // context. Associating with `nameNode` marks the definition/assignment\n          // point without incorrectly implying usage by the parent context.\n          recordDepScope(nameNode, ns);\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}