{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n\n          // This logic assumes 'n' is a direct child of the FOR node,\n          // which happens if the init/condition/iteration clause is\n          // exactly the assignment.\n          if (parent.getFirstChild().getNext() != n) {\n             // Init or Iteration\n            recordDepScope(recordNode, ns);\n          } else {\n            // Condition\n            recordDepScope(nameNode, ns);\n          }\n        } else {\n          // Check if the assignment node is the callee of a call.\n          if (parent.isCall() && parent.getFirstChild() == n) {\n            // Assignment is the function being called (e.g., (fn = ...)()).\n            // The result (RHS, the function) is used immediately by the call,\n            // but the name (LHS, 'fn') itself isn't referenced by this use.\n            // Avoid recording a dependency from the RHS scope to the LHS name,\n            // as this might incorrectly prevent the removal of an unused LHS name.\n            // The usage of the function expression itself should be handled elsewhere.\n            // Thus, we do *not* call recordDepScope here for this specific case.\n          } else {\n            // Standard assignment (e.g., x = y, obj.prop = z, fn = func; fn(); )\n            // Record that the scope containing the RHS depends on the LHS name.\n            recordDepScope(recordNode, ns);\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}