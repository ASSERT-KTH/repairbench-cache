{
    "generation": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (parent.getFirstChild().getNext() != n) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else if (parent.isCall() && n == parent.getFirstChild()) {\n          // If the assignment expression is the function being called\n          // (e.g., `(foo = function() {})()`), the name itself (`foo`)\n          // isn't truly referenced in a way that prevents its removal\n          // if it's otherwise unused. The *value* of the assignment\n          // (the function) is used by the call, but the name binding\n          // is temporary for the call. Don't record a dependency scope\n          // here, otherwise 'foo' might be incorrectly kept.\n        } else {\n          // Default case: The assignment might represent a use of the variable,\n          // so record the dependency scope.\n          recordDepScope(recordNode, ns);\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}