{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException {\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        // First, try to resolve the type from the custom type id.\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // 10-May-2016, tatu: We may get some help...\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) { // what should this be taken to mean?\n                    return null;\n                }\n                // Obtain a deserializer for the \"actual\" (resolved) type.\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            // Instead of checking the JavaType implementation classes,\n            // we now check whether the type id resolved type is a subtype of _baseType;\n            // if so, we \"narrow\" the declared base type to the more specific type,\n            // which is necessary in polymorphic cases.\n            if (_baseType != null && _baseType.getRawClass().isAssignableFrom(type.getRawClass())) {\n                type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}