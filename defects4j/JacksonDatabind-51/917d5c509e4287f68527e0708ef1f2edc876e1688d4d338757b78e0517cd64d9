{
    "generation": "    @Override\n    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        // see if we already have one\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            // ask resolver to materialize a JavaType from the id\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                // no mapping: fall back to default impl, then unknown\u2010id handling\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                    if (actual == null) {\n                        return null;\n                    }\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            } else {\n                /*\n                 * Preserve any generic bindings that came from the _baseType:\n                 * if the raw class matches, re-narrow against base so we keep\n                 * parameterization (databind#1270).\n                 */\n                if (_baseType != null\n                        && _baseType.getRawClass() == type.getRawClass()) {\n                    type = ctxt.getTypeFactory()\n                        .constructSpecializedType(_baseType, type.getRawClass());\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n            _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}