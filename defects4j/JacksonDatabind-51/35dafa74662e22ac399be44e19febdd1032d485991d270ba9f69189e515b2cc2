{
    "generation": "    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            /* As per [Databind#305], need to provide contextual info. But for\n             * backwards compatibility, let's start by only supporting this\n             * for base class, not via interface. Later on we can add this\n             * to the interface, assuming deprecation at base class helps.\n             */\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                // As per [JACKSON-614], use the default impl if no type id available:\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    // 10-May-2016, tatu: We may get some help...\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                    // TODO: may need to figure out a better way to indicate permanently failed lookups\n                    if (actual == null) {\n                        // 29-Jun-2017, tatu: As per [databind#1698], need to ensure we don't cache null\n                        //    for transient problems, only for those within our control. Need to report problem...\n                        // 10-Mar-2017, tatu: Important! We must NOT cache `null` here, implies actual failure,\n                        //   needs to be converted to exception (but not here?). Indicates an issue either with\n                        //   configuration, or input processing. Let's simply return `null` for now.\n                         return null;\n                    }\n                    // ... would this actually work?\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            } else {\n                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,\n                 *   we actually now need to explicitly narrow from base type (which may have parameterization)\n                 *   using raw type.\n                 *\n                 *   One complication, though; can not change 'type class' (simple type to container); otherwise\n                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual\n                 *   type in process (getting SimpleType of Map.class which will not work as expected)\n                 */\n                 // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full\n                 //   generic type with custom type resolvers. If so, should try to retain them.\n                 //  Whether this is sufficient to avoid problems remains to be seen, but for\n                 //  now it should improve things.\n                 // 02-Aug-2017, tatu: Seems like [databind#1270] fix was actually wrong, and broke\n                 //   more general case described in comment above: nominal type does not have generic\n                 //   type parameters. So, must possibly specialize. Let's also remove JavaType class\n                 //   check, it seems dubious. But may be problematic...\n//                if ((_baseType != null) // && _baseType.getClass() == type.getClass()) {\n                // 10-Oct-2017, tatu: Turns out that `constructSpecializedType` is not exactly what\n                //   we want/need here: instead, we need `constructType`. Related to [databind#1780].\n                if (_baseType != null && _baseType.getClass() == type.getClass()) {\n                    // 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;\n                    //   but it appears to check that JavaType impl class is the same which is\n                    //   important for some reason?\n                    //   Disabling the check will break 2 Enum-related tests. Fixed by\n                    //   explicitly adding check for enums back. See [databind#1868]\n                    // 28-Oct-2017, tatu: Reverted the reversion... :-) Need this apparently.\n                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                 }\n                 // NOTE: BEFORE 2.8.0, code was just:\n//                 deser = ctxt.findContextualValueDeserializer(type, _property);\n                 //   Let's revert to that: specialization seems problematic. May need to revisit\n                 // 29-Jun-2018, tatu: As per [databind#2077], let's revert to code pre-2.8\n                 //   (... maybe? Need to reconsider what is the problem)\n                 // 15-Aug-2018, tatu: Ok. Back to 2.8.3 code which seemed to work ok.\n                 //   Need test case for #2077.\n//                if (_baseType != null && _baseType.getClass() == type.getClass()) {\n//                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n//                }\n\n                // 28-Sep-2018, tatu: As per [databind#2132], need to revert the revert.\n                //   Problem is that `constructSpecializedType` does not work for type refinements\n                //   correctly. Need to reconsider approach here... but for now, revert.\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n            _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}