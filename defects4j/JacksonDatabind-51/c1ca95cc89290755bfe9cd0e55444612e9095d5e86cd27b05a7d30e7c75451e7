{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    return null;\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            /* Narrow down from _baseType if appropriate; also, if type is a container, and _baseType\n             * contains generic type information, we must merge them to retain generics. \n             */\n            // [databind#1270]: Only use constructSpecializedType if new type is same kind (container/simple) as baseType,\n            // otherwise use resolved type as-is. This preserves full generic type info (in hierarchical polymorphic case).\n            if ((_baseType != null) && !_baseType.hasRawClass(type.getRawClass())) {\n                // Don't narrow if types are different containers/etc, just use as-is.\n            } else if (_baseType != null && _baseType.getClass() == type.getClass()) {\n                // Use _baseType to keep full generic type info\n                type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}