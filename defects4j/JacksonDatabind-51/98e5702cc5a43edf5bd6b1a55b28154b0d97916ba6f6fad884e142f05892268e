{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    return null;\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            /*\n             * 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,\n             *   we actually now need to explicitly narrow from base type (which may have parameterization)\n             *   using raw type.\n             */\n            if (_baseType != null) {\n                // [databind#1270]: Only specialize if type has no generic parameters from type id resolver,\n                // i.e., is a raw class type (no type parameters), but _baseType itself is parameterized\n                if (_baseType.getClass() == type.getClass()) {\n                    if (type.hasGenericTypes() || _baseType.hasGenericTypes()) {\n                        // If type from resolver has generics, use it as is, don't specialize from _baseType\n                        // else, specialize from _baseType to raw class\n                        if (!type.hasGenericTypes() && _baseType.hasGenericTypes()) {\n                            type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                        }\n                    } else {\n                        // If neither has generics, proceed to specialize as before\n                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                    }\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}