{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    return null;\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            // BEGIN FIX for [databind#1270]\n            // Always specialize _baseType if it exists, unless it already matches the id-resolved type\n            if (_baseType != null) {\n                // Only narrow if baseType and resolved types are *not* the same, and resolved type\n                // is simple (for backwards compat) or does not contain generics from base (for [#1270])\n                // But to make this safe, only constructSpecializedType if it makes sense\n                if (!_baseType.equals(type)) {\n                    // To avoid type erasure (lose generics), only call constructSpecializedType\n                    // if type is a subclass of baseType's raw class.\n                    Class<?> baseRaw = _baseType.getRawClass();\n                    Class<?> typeRaw = type.getRawClass();\n                    if (baseRaw != typeRaw && baseRaw.isAssignableFrom(typeRaw)) {\n                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, typeRaw);\n                    }\n                }\n                // else: already right type (or exact JavaType with generics as resolved)\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}