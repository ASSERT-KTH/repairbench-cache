{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    return null;\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            /*\n             * The bug in the original code: if the custom TypeIdResolver already\n             * produces an appropriately specialized JavaType (with parameters),\n             * we must NOT re-specialize (narrow) from _baseType, because that\n             * may strip useful type arguments. Only re-specialize if we do not\n             * have generic parameters (i.e., if type == type.narrowBy(type.getRawClass()))\n             */\n            if ((_baseType != null)\n                    && _baseType.getClass() == type.getClass()) {\n                // Only narrow if we did NOT get full parameterization\n                // Don't overwrite custom Type with just the raw type specialization\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}