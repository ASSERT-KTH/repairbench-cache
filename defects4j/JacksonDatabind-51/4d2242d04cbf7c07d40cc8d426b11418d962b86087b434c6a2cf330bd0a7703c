{
    "generation": "    protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n            String typeId) throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(typeId);\n        if (deser == null) {\n            JavaType type = _idResolver.typeFromId(ctxt, typeId);\n            if (type == null) {\n                // As per [JACKSON-614], use the default impl if no type id available:\n                deser = _findDefaultImplDeserializer(ctxt);\n                if (deser == null) {\n                    JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                    if (actual == null) {\n                        return null;\n                    }\n                    deser = ctxt.findContextualValueDeserializer(actual, _property);\n                }\n            } else {\n                if (_baseType != null) {\n                    // Modified to handle cases where base type has generic parameters\n                    // but resolved type doesn't\n                    if (type.getRawClass() == _baseType.getRawClass()) {\n                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                    } else if (_baseType.hasGenericTypes()) {\n                        // If base type has generics but resolved type doesn't, try to construct\n                        // a type that preserves the generic information\n                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                    }\n                }\n                deser = ctxt.findContextualValueDeserializer(type, _property);\n            }\n            _deserializers.put(typeId, deser);\n        }\n        return deser;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}