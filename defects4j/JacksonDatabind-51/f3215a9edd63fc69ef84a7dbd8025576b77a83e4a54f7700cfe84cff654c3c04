{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    return null;\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            if ((_baseType != null)) {\n                // Whether to specialize depends on generic types\n                JavaType base = _baseType;\n\n                // 19-Jun-2016, tatu: Use the logic similar to PolymorphicTypeValidator.Base which does:\n                //   \"Specialize into the target raw class unless assignable\" \n                // Before doing narrow, check if 'type' is a plain class (no generics) and _baseType contains generics\n                if (!type.hasGenericTypes() && base.hasGenericTypes()) {\n                    // So, prevent raw narrowing, and instead preserve base with generic info\n                    // e.g. base=Base1270<Poly1>, type=Object\n                    // Result: leave base as target type\n                    type = base;\n                } else if (base.getClass() == type.getClass()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(base, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}