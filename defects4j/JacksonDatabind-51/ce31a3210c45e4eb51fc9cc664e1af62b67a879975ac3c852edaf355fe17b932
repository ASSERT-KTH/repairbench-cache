{
    "generation": "@Override\nprotected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    // First: have we already resolved this id?\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        // ask resolver for a JavaType\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // no explicit type: maybe there is a default impl?\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // still nothing: delegate to \"unknown id\" handler\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    return null;\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            /*\n             * We only want to narrow the base type when the type returned by\n             * the resolver has NO generic parameters of its own. If the resolver\n             * already handed us a fully\u2010parameterized type, we keep it intact.\n             */\n            if (_baseType != null\n                    && _baseType.getClass() == type.getClass()\n                    && type.containedTypeCount() == 0) {\n                type = ctxt.getTypeFactory()\n                           .constructSpecializedType(_baseType, type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        // cache for future use\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}