{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // Try default implementation first, if one exists:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // Fallback: let _handleUnknownTypeId figure out the actual type\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    return null;\n                }\n                // When falling back to a resolved type, be sure to narrow it using the base type\n                if ((_baseType != null) && (_baseType.getClass() == actual.getClass())) {\n                    actual = ctxt.getTypeFactory().constructSpecializedType(_baseType, actual.getRawClass());\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            // When we have a type from the resolver, narrow it from the base type if possible\n            if ((_baseType != null) && (_baseType.getClass() == type.getClass())) {\n                type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}