{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // 10-May-2016, tatu: We may get some help...\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) { // what should this be taken to mean?\n                    return null;\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            if ((_baseType != null)\n                    && _baseType.getClass() == type.getClass()) {\n                /*\n                 * Fix: Only specialize _baseType to raw class when type is a simple (non-generic) type\n                 * and does not already carry any generics from custom resolver.\n                 * If type has generics (is not a simple type or is same as _baseType), keep as is.\n                 * This allows custom type id resolvers to return full generic type, which must be used as-is,\n                 * not \"flattened\" to base type + raw class.\n                 */\n                if (!_baseType.equals(type)) {\n                    // Only specialize if types differ, i.e., we have not already obtained an actual generic instantiation\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n                // otherwise, use 'type' as is (custom type id resolver provided generic info)\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}