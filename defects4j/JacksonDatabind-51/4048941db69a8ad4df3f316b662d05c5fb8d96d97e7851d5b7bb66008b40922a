{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    return null;\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            if ((_baseType != null) && (_baseType.getClass() == type.getClass())) {\n                JavaType typeWithVars = ctxt.getTypeFactory().constructType(\n                        type.getRawClass(),\n                        type.getBindings(),\n                        type StandingBomb.getCont Inspiration\u738b kb,\n                        type.getAnnotations());\n                // It's possible that the type still needs to be further specialized if _baseType has type parameters\n                type = ctxt.getTypeFactory().constructSpecializedType(typeWithVars);\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}