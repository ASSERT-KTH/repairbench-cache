{
    "generation": "@Override\nprotected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    // first: have we already seen this type-id?\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        // ask resolver for the JavaType it binds to this id:\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // no mapping found: try default\u2010impl (if any)\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // still nothing? may be unknown subtype; let handler try\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    return null;\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            // we got a real subtype; but if the raw class matches the\n            // base type, explicitly narrow to carry any generic info\n            if (_baseType != null\n                    && _baseType.getRawClass() == type.getRawClass()) {\n                type = ctxt.getTypeFactory()\n                           .constructSpecializedType(_baseType, type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        // cache for next time\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}