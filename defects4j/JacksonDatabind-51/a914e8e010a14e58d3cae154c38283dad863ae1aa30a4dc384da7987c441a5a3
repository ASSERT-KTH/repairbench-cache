{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614]: use default impl if type id not available.\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                // 10-May-2016, tatu: try to get some help...\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) { \n                    // TODO: try to figure out something better\n                    return null;\n                }\n                // Use the \"actual\" type (possibly with default settings)\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            /*\n             * 16-Dec-2010, tatu: Since the nominal type we get here has no (generic)\n             * type parameters, we need to narrow from base type (which may have parameterization)\n             * using raw type. But we must not change type class (SimpleType to container type)\n             * so we only narrow if the raw classes differ and the JavaType implementations are the same.\n             */\n            if ((_baseType != null)\n                    && (_baseType.getRawClass() != type.getRawClass())\n                    && (_baseType.getClass() == type.getClass())) {\n                type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}