{
    "generation": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            // As per [JACKSON-614], use the default impl if no type id available:\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);\n                if (actual == null) {\n                    return null;\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            /* \n             * Fix: Use constructSpecializedType to retain full generic type, \n             * but only if _baseType is not null and _baseType can be assigned from type's raw class\n             * This fixes issues where raw type should not replace generic base type.\n             */\n            if (_baseType != null) {\n                // New: Only specialize if necessary\n                if (!_baseType.equals(type)) {\n                    try {\n                        type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                    } catch (IllegalArgumentException iae) {\n                        // Fallback to type as is if specialization fails (can happen for enums etc)\n                    }\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}