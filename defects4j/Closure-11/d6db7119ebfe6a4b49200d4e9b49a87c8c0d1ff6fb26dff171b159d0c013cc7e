{
    "generation": "  /**\n   * Visits a GETPROP node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of <code>n</code>\n   */\n  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    // Handle dictionary access\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    } else if (childType.isNullType() || childType.isVoidType()) {\n      // Check for null or undefined access first.\n      // We can't just rely on expectNotNullOrUndefined because we might be\n      // assigning to this property, and we still want to check the base object.\n      // Example: var x = null; x.prop = 3;\n      validator.expectNotNullOrUndefined(\n          t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE));\n    } else {\n      // Check property access on other types.\n      // expectNotNullOrUndefined has already ensured childType is not null/undefined here.\n      // We still need expectNotNullOrUndefined for the warning message\n      // and to return the OBJECT_TYPE if the type is invalid.\n      if (validator.expectNotNullOrUndefined(t, n, childType,\n          \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n         // Only check property access if the base type is valid (not null/undefined).\n         checkPropertyAccess(childType, property.getString(), t, n);\n      }\n    }\n\n    // Ensure the GETPROP node itself has a type.\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}