{
    "generation": "  /**\n   * Visits a GETPROP node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of <code>n</code>\n   */\n  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    // First, always check if the object itself is null or undefined.\n    // If it is, report an error and return early as no properties can be accessed.\n    if (!validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n      ensureTyped(t, n); // Ensure the node is typed even if an error occurred.\n      return;\n    }\n\n    // If the object is a dictionary, report an illegal property access.\n    // This check should happen after the null/undefined check.\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    }\n\n    // Check if the property exists on the object type. This check is necessary\n    // for both reading properties (e.g., `var x = obj.prop;`) and writing properties\n    // (e.g., `obj.prop = value;`).\n    // The previous code's `else if (n.getJSType() != null && parent.isAssign()) { return; }`\n    // was problematic as it prematurely exited, preventing necessary property existence checks\n    // in assignment contexts (e.g., `testIssue810`).\n    // By removing that conditional return, we ensure `checkPropertyAccess` is always called\n    // if the object itself is valid (not null/undefined).\n    checkPropertyAccess(childType, property.getString(), t, n);\n\n    // Ensure the node (the GETPROP node itself) has a type.\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}