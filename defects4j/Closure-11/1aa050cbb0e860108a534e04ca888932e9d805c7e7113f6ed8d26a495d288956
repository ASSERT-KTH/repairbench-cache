{
    "generation": "/**\n * Visits a GETPROP node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of <code>n</code>\n */\nprivate void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    if (childType.isDict()) {\n        report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    } else if (validator.expectNotNullOrUndefined(t, n, childType,\n            \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n        if (parent.isAssign() && parent.getFirstChild() == n) {\n            // If the parent is an assignment and the GETPROP is the left-hand side,\n            // we should not check property access here. The check will be done\n            // when visiting the assignment node.\n            ensureTyped(t, n);\n            return;\n        }\n        checkPropertyAccess(childType, property.getString(), t, n);\n    }\n    ensureTyped(t, n);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}