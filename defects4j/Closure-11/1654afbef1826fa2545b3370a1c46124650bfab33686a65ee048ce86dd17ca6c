{
    "generation": "  /**\n   * Visits a GETPROP node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of <code>n</code>\n   */\n  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    // TODO(user): We should eventually check for null/undefined on the left\n    // side of assignments. We can recognize this by checking if parent is an\n    // assign and n is the first child of parent. But this requires us to\n    // look ahead in the type checking, and the infrastructure isn't quite\n    // there yet.\n\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    // This early return used to skip the property access check below,\n    // including the null check and the unknown property check, primarily\n    // for assignments like `var x = {}; x.prop = 3;`. However, this caused\n    // legitimate warnings (like null checks and unknown property checks on the\n    // LHS of assignments) to be skipped. Removing it fixes these cases.\n    // The type system might still have challenges with gradual typing of\n    // object literals via assignment, but skipping fundamental checks is\n    // not the right approach.\n    // } else if (n.getJSType() != null && parent.isAssign()) {\n    //   return;\n    } else if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n      // Check property access, possibly adding warnings for unknown properties.\n      checkPropertyAccess(childType, property.getString(), t, n);\n    }\n    ensureTyped(t, n);\n  }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}