{
    "generation": "  /**\n   * Visits a GETPROP node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of <code>n</code>\n   */\n  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    // First, check if the object being accessed is null or undefined.\n    // validator.expectNotNullOrUndefined returns true if the type is NOT null/undefined,\n    // and reports an error otherwise. If it reports an error, we should stop\n    // further property access checks for this node.\n    if (!validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n      ensureTyped(t, n); // Ensure the node has a type even if there's an error.\n      return;\n    }\n\n    // Now, childType is guaranteed to be non-null and non-undefined.\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    } else {\n      // The previous 'else if (n.getJSType() != null && parent.isAssign()) { return; }'\n      // block was removed. This block was preventing `checkPropertyAccess` from running\n      // in assignment contexts, which could lead to missed warnings (e.g., assigning\n      // to properties of `null` or undefined properties).\n      // `checkPropertyAccess` is designed to handle property existence and\n      // assignability, and should generally always be run when the object\n      // itself is valid (not null/undefined or a dictionary).\n      checkPropertyAccess(childType, property.getString(), t, n);\n    }\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}