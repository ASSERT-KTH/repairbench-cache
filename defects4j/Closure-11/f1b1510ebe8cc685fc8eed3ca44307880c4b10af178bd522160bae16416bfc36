{
    "generation": "/**\n * Visits a GETPROP node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of <code>n</code>\n */\nprivate void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  // obj.prop or obj.method()\n  // Lots of types can appear on the left, a call to a void function can\n  // never be on the left. getPropertyType will decide what is acceptable\n  // and what isn't.\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n\n  boolean warnedAboutNullUndef = false;\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n  } else {\n    warnedAboutNullUndef = validator.expectNotNullOrUndefined(\n        t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE));\n  }\n\n  // Only suppress property correctness checking if we issued\n  // a null/undefined property access warning AND this getprop node is\n  // being assigned *to* (e.g., x.nullableField = 3). This avoids spurious\n  // secondary warnings due to incomplete object type info when writing.\n  boolean suppressPropertyCheck =\n      warnedAboutNullUndef && parent.isAssign();\n\n  if (!suppressPropertyCheck) {\n    checkPropertyAccess(childType, property.getString(), t, n);\n  }\n\n  ensureTyped(t, n);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}