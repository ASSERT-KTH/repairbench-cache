{
    "generation": "/**\n * Visits a GETPROP node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of <code>n</code>\n */\nprivate void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    } else if (n.getJSType() != null && parent.isAssign() && parent.getFirstChild() == n) {\n      // Do nothing if this is an assignment to a property of a typed object\n      // and the GETPROP is the left-hand side of the assignment.\n    } else if (validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n      if (!childType.isUnknownType() && !childType.isObjectType()) {\n        // If the type is not an object type, we can't check property access.\n        // However, we should still check if the property exists on the object.\n        if (!childType.hasProperty(property.getString())) {\n          report(t, property, TypeValidator.INEXISTENT_PROPERTY,\n              childType.toString(), property.getString());\n        }\n      } else {\n        checkPropertyAccess(childType, property.getString(), t, n);\n      }\n    }\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}