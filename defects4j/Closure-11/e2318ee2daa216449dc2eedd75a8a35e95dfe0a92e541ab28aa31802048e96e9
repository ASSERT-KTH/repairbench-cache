{
    "generation": "  /**\n   * Visits a GETPROP node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of <code>n</code>\n   */\n  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    // 1. Check for null or undefined base object.\n    // This is the most critical check for runtime errors.\n    // If the base object is null/undefined, expectNotNullOrUndefined reports a warning\n    // and returns false. In this case, further property checks are not applicable.\n    if (!validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n      // If it returns false, it means childType was null or undefined,\n      // and a warning was already reported. No further property checks needed.\n      ensureTyped(t, n); // Ensure the node has a type, even if it's an error type.\n      return;\n    }\n\n    // From here, childType is guaranteed to be non-null and non-undefined.\n\n    // 2. Check for illegal property access using dot notation on dictionary types.\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    } else {\n      // 3. Perform property existence/type checking, unless it's on the LHS of an assignment.\n      // If 'n' is on the LHS of an assignment, `visitAssign` handles the property checks\n      // including property creation. We should not duplicate/interfere here.\n      boolean isLhsOfAssignment = parent.isAssign() && parent.getFirstChild() == n;\n\n      if (!isLhsOfAssignment) {\n        // If n is on the RHS of an assignment (e.g. `obj.unknownProp` in `a = obj.unknownProp`)\n        // or not part of an assignment at all (e.g. `obj.knownProp;` as a statement),\n        // then we must check property access validity.\n        checkPropertyAccess(childType, property.getString(), t, n);\n      }\n    }\n\n    // Always ensure the node has a JSType assigned to it.\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}