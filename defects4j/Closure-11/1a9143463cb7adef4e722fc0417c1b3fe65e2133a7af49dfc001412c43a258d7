{
    "generation": "  /**\n   * Visits a GETPROP node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of <code>n</code>\n   */\n  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n    } else {\n      // The previous condition `else if (n.getJSType() != null && parent.isAssign()) { return; }`\n      // was incorrectly skipping property validation for GETPROP nodes that were children\n      // of an ASSIGN node. Property access should always be validated, regardless of whether\n      // it's on the LHS or RHS of an assignment.\n      if (validator.expectNotNullOrUndefined(t, n, childType,\n          \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n        checkPropertyAccess(childType, property.getString(), t, n);\n      }\n    }\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}