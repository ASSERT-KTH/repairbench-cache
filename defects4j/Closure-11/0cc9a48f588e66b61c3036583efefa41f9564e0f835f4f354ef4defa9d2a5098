{
    "generation": "  /**\n   * Visits a GETPROP node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of <code>n</code>\n   */\n  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    // Rule 1: Cannot access properties on dictionaries using '.'\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n      // Continue to ensureTyped, but skip further checks on this property access.\n    } else {\n      // Rule 2: Cannot access properties on null or undefined base objects.\n      // This check must always happen if the object is not a dictionary.\n      // The previous logic suppressed this check if n.getJSType() was already known\n      // and it was an assignment, which was incorrect.\n      boolean propertyAccessOnValidObject = validator.expectNotNullOrUndefined(\n          t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE));\n\n      // Rule 3: Check if the property itself is defined on the object's type.\n      // This check should only happen if:\n      // a) The base object was valid (or assumed valid by expectNotNullOrUndefined).\n      // b) This GETPROP node is NOT the left-hand side of an assignment.\n      //    If it's the LHS of an assignment (e.g., `obj.prop = value;`),\n      //    we are potentially defining or assigning to the property, so we\n      //    don't want to report \"property never defined\".\n      //    If it's the RHS (e.g., `value = obj.prop;`) or not an assignment,\n      //    we DO want to check for undefined properties.\n      boolean isLhsOfAssignment = (parent.isAssign() && parent.getFirstChild() == n);\n\n      if (propertyAccessOnValidObject && !isLhsOfAssignment) {\n        checkPropertyAccess(childType, property.getString(), t, n);\n      }\n    }\n    \n    // Always ensure the GETPROP node itself gets a type.\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}