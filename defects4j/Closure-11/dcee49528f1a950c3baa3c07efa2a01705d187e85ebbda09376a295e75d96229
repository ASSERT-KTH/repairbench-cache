{
    "generation": "  /**\n   * Visits a GETPROP node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of <code>n</code>\n   */\n  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    // Dicts are handled separately -- they don't have properties.\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n      ensureTyped(t, n); // Ensure the node gets a type even in case of error.\n      return;\n    }\n\n    // Check that the property access is on a type that actually has properties.\n    // This check should fail for null and undefined, and optionally for other\n    // types like string primitives.\n    boolean PRED = validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE));\n\n    // If the base type is not null or undefined, check the property existence.\n    if (PRED) {\n      checkPropertyAccess(childType, property.getString(), t, n);\n    }\n\n    // Ensure the GETPROP node gets a type assigned. This is necessary even if\n    // the checks above failed (e.g., accessing property on null). ensureTyped\n    // will assign the UNKNOWN_TYPE in such cases.\n    ensureTyped(t, n);\n\n    // The earlier version had an early return here for assignments:\n    // else if (n.getJSType() != null && parent.isAssign()) { return; }\n    // This was incorrect because it prevented the null check (expectNotNullOrUndefined)\n    // and the property existence check (checkPropertyAccess) from running\n    // on the left-hand side of assignments (like in `x.prop = 3;` where x is null)\n    // and potentially on the right-hand side as well if the node already had a type.\n    // These checks are necessary regardless of the assignment context.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}