{
    "generation": "  /**\n   * Visits a GETPROP node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   * @param parent The parent of <code>n</code>\n   */\n  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n    // obj.prop or obj.method()\n    // Lots of types can appear on the left, a call to a void function can\n    // never be on the left. getPropertyType will decide what is acceptable\n    // and what isn't.\n    Node property = n.getLastChild();\n    Node objNode = n.getFirstChild();\n    JSType childType = getJSType(objNode);\n\n    // Check for dictionary access.\n    if (childType.isDict()) {\n      report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n      // Don't check property access on dicts, but ensure the node gets typed.\n      ensureTyped(t, n);\n      return;\n    }\n\n    // Check if the property access is on a null or undefined object.\n    // This check should happen regardless of whether it's an assignment.\n    // Note: JSType objects can be null if the node has not been type-checked\n    // (e.g. in externs). Let the validator handle this.\n    boolean validated = validator.expectNotNullOrUndefined(t, n, childType,\n        \"No properties on this expression\", getNativeType(OBJECT_TYPE));\n\n    // If the base object is not null or undefined, check the property access.\n    if (validated) {\n      checkPropertyAccess(childType, property.getString(), t, n);\n    }\n\n    // Ensure the GETPROP node has a type, especially for type inference.\n    ensureTyped(t, n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}