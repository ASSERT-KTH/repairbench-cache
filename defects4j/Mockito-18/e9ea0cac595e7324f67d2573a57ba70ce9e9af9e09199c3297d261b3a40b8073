{
    "generation": "Object returnValueFor(Class<?> type) {\n    if (Primitives.isPrimitiveOrWrapper(type)) {\n        return Primitives.defaultValueForPrimitiveOrWrapper(type);\n        //new instances are used instead of Collections.emptyList(), etc.\n        //to avoid UnsupportedOperationException if code under test modifies returned collection\n    } else if (type == Collection.class || type == Iterable.class) {\n        return new LinkedList<>();\n    } else if (type == Set.class) {\n        return new HashSet<>();\n    } else if (type == HashSet.class) {\n        return new HashSet<>();\n    } else if (type == SortedSet.class) {\n        return new TreeSet<>();\n    } else if (type == TreeSet.class) {\n        return new TreeSet<>();\n    } else if (type == LinkedHashSet.class) {\n        return new LinkedHashSet<>();\n    } else if (type == List.class) {\n        return new LinkedList<>();\n    } else if (type == LinkedList.class) {\n        return new LinkedList<>();\n    } else if (type == ArrayList.class) {\n        return new ArrayList<>();\n    } else if (type == Map.class) {\n        return new HashMap<>();\n    } else if (type == HashMap.class) {\n        return new HashMap<>();\n    } else if (type == SortedMap.class) {\n        return new TreeMap<>();\n    } else if (type == TreeMap.class) {\n        return new TreeMap<>();\n    } else if (type == LinkedHashMap.class) {\n        return new LinkedHashMap<>();\n    }\n    //Let's not care about the rest of collections.\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}