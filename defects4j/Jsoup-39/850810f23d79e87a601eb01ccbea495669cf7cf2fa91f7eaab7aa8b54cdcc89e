{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // 1. Decode as defaultCharset (likely \"UTF-8\")\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        // 2. Remove leading BOM, if present\n        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n            docData = docData.substring(1);\n        }\n        // 3. Parse document\n        doc = parser.parseInput(docData, baseUri);\n        // 4. Check for meta charset\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                // Remove BOM again in re-decoded content, if present\n                if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n                    docData = docData.substring(1);\n                }\n                doc = null; // force reparse\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        // Remove BOM if present\n        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n            docData = docData.substring(1);\n        }\n    }\n    // At this point, docData has BOM removed if present, and is decoded fully\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}