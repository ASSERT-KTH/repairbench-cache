{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // Decode with default charset\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        \n        // Check for UTF-8 BOM immediately after decoding\n        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n            // BOM present, strip it and set charset\n            docData = docData.substring(1);\n            charsetName = defaultCharset;\n        } else {\n            // Look for meta tags if no BOM\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                    if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                        try {\n                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n                                foundCharset = meta.attr(\"charset\");\n                            }\n                        } catch (IllegalCharsetNameException e) {\n                            foundCharset = null;\n                        }\n                    }\n                } else {\n                    foundCharset = meta.attr(\"charset\");\n                }\n\n                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null; // Force re-parse after re-decoding\n                }\n            }\n        }\n\n        // After handling BOM and meta, parse if doc is null or re-parse if needed\n        if (doc == null) {\n            // Before parsing, ensure we don't have a BOM in the final docData\n            if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n                docData = docData.substring(1);\n            }\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        // Check for UTF-8 BOM in case specified charset is not UTF-8 but data has BOM\n        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n            docData = docData.substring(1);\n            // If BOM found, override charsetName to UTF-8 as it takes precedence\n            charsetName = defaultCharset;\n        }\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}