{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                    if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                        try {\n                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n                                foundCharset = meta.attr(\"charset\");\n                            }\n                        } catch (IllegalCharsetNameException e) {\n                            foundCharset = null;\n                        }\n                    }\n                } else {\n                    foundCharset = meta.attr(\"charset\");\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else { // specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        // Check for BOM before parsing if doc is null (we hadn't parsed yet)\n        if (doc == null) {\n            // Check for UTF-8 BOM indicator before parsing\n            byteData.rewind();\n            byte[] bom = new byte[3];\n            byteData.get(bom);\n            byteData.rewind();\n            boolean hasBom = (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF);\n\n            if (hasBom) {\n                if (charsetName == null) {\n                    charsetName = defaultCharset;\n                }\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n                // Remove BOM character if present in the string (though decode might have handled it)\n                if (docData.length() > 0 && docData.charAt(0) == 0xFEFF) {\n                    docData = docData.substring(1);\n                }\n            } else {\n                // Original BOM check for the case where the BOM wasn't handled by the byte array check\n                if (docData.length() > 0 && docData.charAt(0) == 65279) {\n                    byteData.rewind();\n                    docData = Charset.forName(defaultCharset).decode(byteData).toString();\n                    docData = docData.substring(1);\n                    charsetName = defaultCharset;\n                }\n            }\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n        }\n\n        // Handle BOM in the parsed text (in case it wasn't caught earlier)\n        if (docData.length() > 0 && docData.charAt(0) == 0xFEFF) {\n            doc = parser.parseInput(docData.substring(1), baseUri);\n            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n        }\n\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}