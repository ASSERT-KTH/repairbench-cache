{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    boolean hasBom = false;\n\n    // First, check for UTF-8 BOM and skip it if present.\n    byteData.mark();\n    if (byteData.remaining() >= 3) {\n        byte b1 = byteData.get(), b2 = byteData.get(), b3 = byteData.get();\n        if ((b1 == (byte)0xEF) && (b2 == (byte)0xBB) && (b3 == (byte)0xBF)) {\n            hasBom = true;\n        } else {\n            byteData.reset();\n        }\n    } else {\n        byteData.reset();\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        // Remove BOM char if present at start\n        if (hasBom && docData.length() > 0 && docData.charAt(0) == 65279) {\n            docData = docData.substring(1);\n        }\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                // Skip BOM again if present and decoding charset is not UTF-8\n                if (!foundCharset.equalsIgnoreCase(\"UTF-8\") && byteData.remaining() >= 3) {\n                    byteData.mark();\n                    byte b1 = byteData.get(), b2 = byteData.get(), b3 = byteData.get();\n                    if (!((b1 == (byte)0xEF) && (b2 == (byte)0xBB) && (b3 == (byte)0xBF))) {\n                        byteData.reset();\n                    }\n                }\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        // Remove BOM char if present at start\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            docData = docData.substring(1);\n        }\n    }\n    // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly\n    // (This code becomes redundant due to the above logic -- kept for completeness)\n    if (docData.length() > 0 && docData.charAt(0) == 65279) {\n        byteData.rewind();\n        // skip UTF-8 BOM\n        byteData.mark();\n        if (byteData.remaining() >= 3) {\n            byte b1 = byteData.get(), b2 = byteData.get(), b3 = byteData.get();\n            if (!((b1 == (byte)0xEF) && (b2 == (byte)0xBB) && (b3 == (byte)0xBF))) {\n                byteData.reset();\n            }\n        } else {\n            byteData.reset();\n        }\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            docData = docData.substring(1);\n        }\n        charsetName = defaultCharset;\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}