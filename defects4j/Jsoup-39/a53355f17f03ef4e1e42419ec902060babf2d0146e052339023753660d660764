{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        // UTF-8 BOM indicator takes precedence over everything else\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n            // strip BOM and parse immediately as UTF-8\n            docData = docData.substring(1);\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(defaultCharset);\n            return doc;\n        }\n        // no BOM detected \u2013 rewind and proceed\n        byteData.rewind();\n        if (charsetName == null) {\n            // safe parse as UTF-8, then look for meta charset\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                    if ((foundCharset == null || foundCharset.isEmpty()) && meta.hasAttr(\"charset\")) {\n                        String cs = meta.attr(\"charset\");\n                        try {\n                            if (Charset.isSupported(cs)) {\n                                foundCharset = cs;\n                            }\n                        } catch (IllegalCharsetNameException e) {\n                            foundCharset = null;\n                        }\n                    }\n                } else if (meta.hasAttr(\"charset\")) {\n                    foundCharset = meta.attr(\"charset\");\n                }\n                if (foundCharset != null && !foundCharset.isEmpty()\n                        && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else {\n            // charset was specified by header or user\n            Validate.notEmpty(charsetName,\n                \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}