{
    "generation": "    // todo - this is getting gnarly. needs a rewrite.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        boolean initialParseAttemptedWithDefaultCharset = false; // Flag to know if `doc` was set initially with defaultCharset\n        boolean redecodeDueToCharsetChange = false; // Flag to know if a charset was found in meta and caused a re-decode\n\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri); // First parse attempt with defaultCharset\n            initialParseAttemptedWithDefaultCharset = true;\n\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                    if (foundCharset == null && meta.hasAttr(\"charset\")) { // e.g. <meta http-equiv=\"Content-Type\" content=\"text/html;\" charset=\"UTF-8\">\n                        try {\n                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n                                foundCharset = meta.attr(\"charset\");\n                            }\n                        } catch (IllegalCharsetNameException e) {\n                            foundCharset = null;\n                        }\n                    }\n                } else { // HTML5 <meta charset=\"gb2312\">\n                    foundCharset = meta.attr(\"charset\");\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // Change: use equalsIgnoreCase\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset; // Update charsetName\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    redecodeDueToCharsetChange = true; // Signal that a re-decode (and thus re-parse) is needed\n                    doc = null; // Nullify doc to force re-parse after charset is determined\n                }\n            }\n        } else { // specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly\n        boolean bomStripped = false;\n        if (docData.length() > 0 && docData.charAt(0) == 65279) { // 65279 is decimal for U+FEFF\n            byteData.rewind(); // Rewind the byte buffer for re-decoding\n            docData = Charset.forName(defaultCharset).decode(byteData).toString(); // Re-decode with default (UTF-8)\n            docData = docData.substring(1); // Remove BOM\n            charsetName = defaultCharset; // Set charset to default (UTF-8)\n            bomStripped = true; // Mark that BOM was stripped\n        }\n\n        // Re-parse logic:\n        // 1. If doc is null (meaning initial charset was explicitly given, or meta charset caused a re-decode).\n        // 2. If doc was parsed initially (charsetName was null, initialParseAttemptedWithDefaultCharset is true),\n        //    AND a BOM was stripped *after* that initial parse, AND no charset re-decode was performed (redecodeDueToCharsetChange is false).\n        //    In this case, the first 'doc' was parsed from 'docData' WITH the BOM, which is incorrect.\n        if (doc == null || (initialParseAttemptedWithDefaultCharset && bomStripped && !redecodeDueToCharsetChange)) {\n            doc = parser.parseInput(docData, baseUri);\n        }\n\n        // Set the final charset on the document.\n        // This should happen regardless of whether doc was parsed initially or re-parsed.\n        if (charsetName != null) {\n            doc.outputSettings().charset(charsetName);\n        } else {\n            // If charsetName is still null here, it means no meta charset was found,\n            // and no BOM was found. So defaultCharset was used for the initial parse.\n            // In this case, the charset of the doc should be defaultCharset.\n            doc.outputSettings().charset(defaultCharset);\n        }\n\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}