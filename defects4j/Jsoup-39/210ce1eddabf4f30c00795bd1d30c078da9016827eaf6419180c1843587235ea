{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    boolean detectedCharset = false;\n\n    if (charsetName == null) {\n        // Decode with default charset\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        byteData.rewind();\n\n        // Check for BOM\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            docData = docData.substring(1);\n            charsetName = defaultCharset;\n        }\n\n        Element meta = extractCharsetMeta(docData);\n        if (meta != null) {\n            charsetName = extractCharsetFromMeta(meta);\n            if (charsetName != null && !charsetName.equals(defaultCharset)) {\n                // Re-decode with detected charset\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n            }\n        } else if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            // Handle BOM if no meta charset found\n            charsetName = defaultCharset;\n            docData = docData.substring(1);\n        }\n    } else {\n        // specified by content type header or user\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}\n\n// Helper method to extract charset from meta tags\nprivate static String extractCharsetFromMeta(Element meta) {\n    String foundCharset = null;\n    if (meta.hasAttr(\"http-equiv\")) {\n        foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n        if (foundCharset == null && meta.hasAttr(\"charset\")) {\n            try {\n                if (Charset.isSupported(meta.attr(\"charset\"))) {\n                    foundCharset = meta.attr(\"charset\");\n                }\n            } catch (IllegalCharsetNameException e) {\n                foundCharset = null;\n            }\n        }\n    } else {\n        foundCharset = meta.attr(\"charset\");\n    }\n    return foundCharset != null && !foundCharset.isEmpty() ? foundCharset.trim().replaceAll(\"[\\\"']\", \"\") : null;\n}\n\n// Helper method to find charset meta element\nprivate static Element extractCharsetMeta(String docData) {\n    Document tempDoc = parser.parseInput(docData, baseUri);\n    return tempDoc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}