{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // Use the default charset (typically \"UTF-8\") when none is provided.\n    // Assumes that \"defaultCharset\" is defined elsewhere (e.g., as \"UTF-8\").\n    String docData;\n    Document doc;\n    if (charsetName == null) {\n        // Decode using the default charset first.\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        // If the BOM is present at the start, remove it.\n        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF')\n            docData = docData.substring(1);\n        // Parse the document to allow meta charset detection.\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\")))\n                            foundCharset = meta.attr(\"charset\");\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            // If a different charset is declared in the meta tag, re-decode and re-parse.\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF')\n                    docData = docData.substring(1);\n                doc = parser.parseInput(docData, baseUri);\n            }\n        }\n        // Set the output charset; if still null, fall back to defaultCharset.\n        doc.outputSettings().charset(charsetName == null ? defaultCharset : charsetName);\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        // Remove a spurious BOM if present.\n        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF')\n            docData = docData.substring(1);\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}