{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // if no charset given, try UTF-8 and look for a meta tag to override\n    if (charsetName == null) {\n        // safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=...\"> or <meta charset=\"...\">\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null\n                && foundCharset.length() != 0\n                && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // user/specified charset, just decode once\n        Validate.notEmpty(charsetName,\n            \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // UTF-8 BOM marker. If present, strip it and re\u2013decode & re\u2013parse\n    if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString().substring(1);\n        charsetName = defaultCharset;\n        doc = null;  // force re-parse with BOM removed\n    }\n\n    // final parse (if we haven't already)\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        // if charsetName still null here, outputSettings will default to UTF-8\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}