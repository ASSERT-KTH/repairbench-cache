{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    boolean hasBOM = false;\n    // always detect BOM first (for UTF-8), even if charsetName is provided or not\n    if (byteData.remaining() >= 3) {\n        byte b1 = byteData.get(byteData.position());\n        byte b2 = byteData.get(byteData.position() + 1);\n        byte b3 = byteData.get(byteData.position() + 2);\n        if ((b1 == (byte)0xEF) && (b2 == (byte)0xBB) && (b3 == (byte)0xBF)) {\n            hasBOM = true;\n            charsetName = defaultCharset; // UTF-8 BOM, force use UTF-8\n        }\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        // Remove BOM after decoding\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            docData = docData.substring(1);\n        }\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else if (meta.hasAttr(\"charset\")) {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                // Remove BOM after decoding\n                if (docData.length() > 0 && docData.charAt(0) == 65279) {\n                    docData = docData.substring(1);\n                }\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        // Remove BOM after decoding\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            docData = docData.substring(1);\n        }\n    }\n    // UTF-8 BOM indicator. This is now handled after decoding above; this block now redundant.\n    // if (docData.length() > 0 && docData.charAt(0) == 65279) {\n    //     byteData.rewind();\n    //     docData = Charset.forName(defaultCharset).decode(byteData).toString();\n    //     docData = docData.substring(1);\n    //     charsetName = defaultCharset;\n    // }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}