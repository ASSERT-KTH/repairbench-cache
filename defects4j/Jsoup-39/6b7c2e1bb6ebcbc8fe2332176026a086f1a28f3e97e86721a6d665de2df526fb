{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    \n    if (charsetName == null) {\n        // Check for BOM to determine the charset before decoding\n        ByteBuffer tempBuffer = byteData.duplicate();\n        if (tempBuffer.hasRemaining() && tempBuffer.get() == (byte) 0xEF &&\n            tempBuffer.hasRemaining() && tempBuffer.get() == (byte) 0xBB &&\n            tempBuffer.hasRemaining() && tempBuffer.get() == (byte) 0xBF) {\n            // UTF-8 BOM detected, set charset and adjust position\n            charsetName = \"UTF-8\";\n            byteData.position(tempBuffer.position() + 3); // Move position past BOM\n        } else {\n            // No BOM found, use default charset\n            charsetName = defaultCharset;\n        }\n    }\n\n    // Now decode with determined charset\n    Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n    docData = Charset.forName(charsetName).decode(byteData).toString();\n    doc = parser.parseInput(docData, baseUri);\n\n    // Check for meta tags for charset\n    Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n    if (meta != null) {\n        String foundCharset;\n        if (meta.hasAttr(\"http-equiv\")) {\n            foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n        } else {\n            foundCharset = meta.attr(\"charset\");\n        }\n\n        if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(charsetName)) {\n            byteData.rewind();\n            docData = Charset.forName(foundCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            charsetName = foundCharset;\n        }\n    }\n\n    // If we detected BOM but didn't parse any meta tags, ensure charset is correct\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}