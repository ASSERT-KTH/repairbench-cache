{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    boolean hasBom = false;\n\n    // First, determine if the buffer starts with a UTF-8 BOM (EF BB BF)\n    if (byteData.remaining() >= 3) {\n        byte first = byteData.get(byteData.position());\n        byte second = byteData.get(byteData.position() + 1);\n        byte third = byteData.get(byteData.position() + 2);\n        if ((first & 0xff) == 0xEF && (second & 0xff) == 0xBB && (third & 0xff) == 0xBF) {\n            hasBom = true;\n            // Skip BOM\n            byteData.position(byteData.position() + 3);\n            charsetName = defaultCharset; // force UTF-8\n        }\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        if (hasBom && docData.length() > 0 && docData.charAt(0) == 0xFEFF) {\n            docData = docData.substring(1);\n        }\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                // skip BOM again if present and new charset is UTF-8\n                if (hasBom && foundCharset.equalsIgnoreCase(defaultCharset) && byteData.remaining() >= 3) {\n                    byte first = byteData.get(byteData.position());\n                    byte second = byteData.get(byteData.position() + 1);\n                    byte third = byteData.get(byteData.position() + 2);\n                    if ((first & 0xff) == 0xEF && (second & 0xff) == 0xBB && (third & 0xff) == 0xBF) {\n                        byteData.position(byteData.position() + 3);\n                    }\n                }\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                if (hasBom && docData.length() > 0 && docData.charAt(0) == 0xFEFF) {\n                    docData = docData.substring(1);\n                }\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        // handle BOM if present and charset is UTF-8\n        if (hasBom && docData.length() > 0 && docData.charAt(0) == 0xFEFF) {\n            docData = docData.substring(1);\n        }\n    }\n    // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly (legacy handling)\n    if (!hasBom && docData.length() > 0 && docData.charAt(0) == 0xFEFF) {\n        // Only if not already stripped BOM above (for test compatibility)\n        docData = docData.substring(1); // don't re-decode, since that loses charset detection\n        charsetName = defaultCharset;\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}