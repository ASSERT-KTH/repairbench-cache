{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) { \n        // Attempt to detect charset from HTML meta tags\n        String detectedCharset;\n        try {\n            detectedCharset = detectHtmlCharset(byteData);\n            if (detectedCharset != null) {\n                charsetName = detectedCharset;\n            } else {\n                charsetName = defaultCharset;\n            }\n        } catch (Exception e) {\n            charsetName = defaultCharset;\n        }\n\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n\n        // Check for UTF-8 BOM\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            docData = docData.substring(1);\n        }\n\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        if (docData.length() > 0 && docData.charAt(0) == 65279) {\n            docData = docData.substring(1);\n        }\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static String detectHtmlCharset(ByteBuffer byteData) {\n    byte[] bytes = new byte[byteData.remaining()];\n    byteData.get(bytes);\n    byteData.rewind();\n\n    try (InputStream is = new ByteArrayInputStream(bytes)) {\n        return new InputStreamCharsetDetector(is).detect();\n    } catch (Exception e) {\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}