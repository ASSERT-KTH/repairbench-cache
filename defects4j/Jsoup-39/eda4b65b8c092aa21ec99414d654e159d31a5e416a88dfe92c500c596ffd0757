{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) { // Determine charset from meta or BOM\n        // Check for BOM\n        byte[] bytes = new byte[byteData.remaining()];\n        byteData.get(bytes);\n        String detectedCharset = null;\n        // Check for UTF-8 BOM\n        if (bytes.length > 0 && bytes[0] == (byte) 0xEF && bytes[1] == (byte) 0xBB && bytes[2] == (byte) 0xBF) {\n            detectedCharset = \"UTF-8\";\n            // Skip BOM when decoding\n            docData = Charset.forName(detectedCharset).decode(ByteBuffer.wrap(bytes, 3, bytes.length - 3));\n        } else {\n            // Decode with default charset for now\n            docData = Charset.forName(defaultCharset).decode(ByteBuffer.wrap(bytes));\n        }\n        doc = parser.parseInput(docData, baseUri);\n        \n        //Look for meta tags for charset\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n            if (foundCharset != null && !foundCharset.equals(detectedCharset, StringComparison.OrdinalIgnoreCase)) {\n                // Re-decode with detected charset from meta\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData);\n                doc = null;\n            }\n        }\n        // If no charset found from meta tags, use detected BOM charset or default\n        if (foundCharset == null && detectedCharset != null) {\n            charsetName = detectedCharset;\n        } else {\n            charsetName = defaultCharset;\n        }\n    } else { // use specified charset\n        Validate.notEmpty(charsetName, \"Must set charset arg\");\n        docData = Charset.forName(charsetName).decode(byteData);\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}