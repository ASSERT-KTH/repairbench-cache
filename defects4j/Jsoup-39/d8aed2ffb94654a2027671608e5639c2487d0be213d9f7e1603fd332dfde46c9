{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    boolean hasBOM = false;\n\n    // Helper to decode the ByteBuffer using the specified charset\n    java.util.function.Function<String, String> decode = (charset) -> {\n        byteData.rewind();\n        String decoded = Charset.forName(charset).decode(byteData).toString();\n        return decoded;\n    };\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = decode.apply(defaultCharset);\n\n        // Check for BOM (U+FEFF)\n        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n            hasBOM = true;\n            docData = docData.substring(1);\n        }\n\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else if (meta.hasAttr(\"charset\")) {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                docData = decode.apply(foundCharset);\n\n                if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n                    hasBOM = true;\n                    docData = docData.substring(1);\n                } else {\n                    hasBOM = false;\n                }\n\n                doc = parser.parseInput(docData, baseUri);\n            }\n        }\n        if (charsetName == null) {\n            charsetName = defaultCharset;\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = decode.apply(charsetName);\n        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n            hasBOM = true;\n            docData = docData.substring(1);\n        }\n        doc = parser.parseInput(docData, baseUri);\n    }\n\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}