{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    \n    // Check for BOM first - UTF-8 BOM indicator takes precedence over everything else\n    byteData.mark();\n    ByteBuffer firstBytes = byteData.duplicate();\n    firstBytes.limit(Math.min(firstBytes.remaining(), 4));\n    boolean hasBom = false;\n    String detectedCharset = null;\n    \n    if (firstBytes.remaining() >= 3) {\n        int b1 = firstBytes.get() & 0xFF;\n        int b2 = firstBytes.get() & 0xFF;\n        int b3 = firstBytes.get() & 0xFF;\n        \n        if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {\n            // UTF-8 BOM detected\n            hasBom = true;\n            detectedCharset = \"UTF-8\";\n            byteData.position(3); // Skip the BOM\n        }\n    }\n    byteData.reset();\n    \n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData.duplicate()).toString();\n        if (hasBom) {\n            docData = docData.substring(1);\n        }\n        \n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                if (hasBom && \"UTF-8\".equals(charsetName))\n                    byteData.position(3); // Skip BOM for UTF-8\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            } else if (hasBom) {\n                charsetName = \"UTF-8\";\n            }\n        } else if (hasBom) {\n            charsetName = \"UTF-8\";\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        if (hasBom && \"UTF-8\".equals(charsetName))\n            byteData.position(3); // Skip BOM for UTF-8\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    \n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}