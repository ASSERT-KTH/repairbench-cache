{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    boolean hasBom = false;\n\n    // BOM check before decoding if charset unspecified\n    if (charsetName == null && byteData.remaining() >= 3) {\n        byte b0 = byteData.get(byteData.position());\n        byte b1 = byteData.get(byteData.position() + 1);\n        byte b2 = byteData.get(byteData.position() + 2);\n        // Check for UTF-8 BOM: 0xEF 0xBB 0xBF\n        if ((b0 & 0xFF) == 0xEF && (b1 & 0xFF) == 0xBB && (b2 & 0xFF) == 0xBF) {\n            hasBom = true;\n            byteData.position(byteData.position() + 3);\n        }\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                // Skip BOM again if present for new decode\n                if (charsetName.equalsIgnoreCase(\"UTF-8\") && byteData.remaining() >= 3) {\n                    byte b0 = byteData.get(byteData.position());\n                    byte b1 = byteData.get(byteData.position() + 1);\n                    byte b2 = byteData.get(byteData.position() + 2);\n                    if ((b0 & 0xFF) == 0xEF && (b1 & 0xFF) == 0xBB && (b2 & 0xFF) == 0xBF) {\n                        byteData.position(byteData.position() + 3);\n                    }\n                }\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        // Skip BOM if decoding as UTF-8\n        if (charsetName.equalsIgnoreCase(\"UTF-8\") && byteData.remaining() >= 3) {\n            byte b0 = byteData.get(byteData.position());\n            byte b1 = byteData.get(byteData.position() + 1);\n            byte b2 = byteData.get(byteData.position() + 2);\n            if ((b0 & 0xFF) == 0xEF && (b1 & 0xFF) == 0xBB && (b2 & 0xFF) == 0xBF) {\n                byteData.position(byteData.position() + 3);\n            }\n        }\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // Remove Unicode BOM character, if present, from decoded string. Only necessary if not already skipped.\n    if (docData.length() > 0 && docData.charAt(0) == 65279) {\n        docData = docData.substring(1);\n        charsetName = defaultCharset;\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        // Set charset, default to fallback if null\n        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}