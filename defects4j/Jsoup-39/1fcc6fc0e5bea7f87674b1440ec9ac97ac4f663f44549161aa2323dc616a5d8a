{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    boolean hasBom = false;\n    final char BOM_CHAR = '\\uFEFF';\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // decode as UTF-8 for meta sniffing\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        // check BOM *before* parsing, strip if present\n        if (docData.length() > 0 && docData.charAt(0) == BOM_CHAR) {\n            hasBom = true;\n            docData = docData.substring(1);\n        }\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n            } else {\n                foundCharset = meta.attr(\"charset\");\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 &&\n                !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                if (docData.length() > 0 && docData.charAt(0) == BOM_CHAR) {\n                    hasBom = true;\n                    docData = docData.substring(1);\n                }\n                doc = null;\n            }\n        } else {\n            charsetName = defaultCharset;\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        if (docData.length() > 0 && docData.charAt(0) == BOM_CHAR) {\n            hasBom = true;\n            docData = docData.substring(1);\n        }\n    }\n\n    // Output settings BOM/charset precedence: forcibly remove BOM if present.\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}