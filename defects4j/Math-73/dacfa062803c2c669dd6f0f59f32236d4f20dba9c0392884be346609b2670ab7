{
    "generation": "    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root), or if the function values at the\n     * three points (min, max, initial) have the same sign.\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // Calculate function values\n        final double yInitial = f.value(initial);\n        final double yMin = f.value(min);\n        final double yMax = f.value(max);\n\n        // Check for roots at the input points\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0); // Use min, not yMin\n            return result;\n        }\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0); // Use max, not yMax\n            return result;\n        }\n\n        // Check for bracketing condition\n        if (yMin * yInitial < 0) {\n            // The interval [min, initial] brackets the root.\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        } else if (yInitial * yMax < 0) {\n            // The interval [initial, max] brackets the root.\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        } else if (yMin * yMax < 0) {\n             // The interval [min, max] brackets the root.\n             // Use the full Brent algorithm starting with initial guess.\n            return solve(f, min, yMin, max, yMax, initial, yInitial);\n        } else {\n            // If none of the pairs bracket the root, the function values must have the same sign.\n            throw new IllegalArgumentException(String.format(\n                    \"Function values at endpoints [%.10g, %.10g] and initial guess %.10g \" +\n                    \"do not bracket a root. Values are [%.10g, %.10g] and %.10g.\",\n                    min, max, initial, yMin, yMax, yInitial));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}