{
    "generation": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // return the initial guess if it is good enough\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // return the first endpoint if it is good enough\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    // check if min and initial bracket the root\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n\n    // return the second endpoint if it is good enough\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // check if initial and max bracket the root\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n\n    // After this, check if min and max bracket the root\n    if (yMin * yMax < 0) {\n        return solve(f, min, yMin, max, yMax, initial, yInitial);\n    }\n\n    // If none of the above, check if any interval brackets the root\n    boolean minInitial = (yMin * yInitial) < 0;\n    boolean initialMax = (yInitial * yMax) < 0;\n    if (!minInitial && !initialMax) {\n        throw MathRuntimeException.createIllegalArgumentException(\n            \"function values at endpoints do not have different signs.  \" +\n            \"Endpoints: [{0}, {1}], Values: [{2}, {3}]\",\n            min, max, yMin, yMax);\n    }\n\n    // If we reach here, min and initial or initial and max bracket the root\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}