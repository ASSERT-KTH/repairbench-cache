{
    "generation": "    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // return the initial guess if it is good enough\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0); // Corrected: should be 'min' not 'yMin' for the result value\n            return result;\n        }\n\n        // reduce interval if min and initial bracket the root\n        if (yInitial * yMin < 0) {\n            // The Javadoc for the internal solve method suggests min, f(min), max, f(max), initial, f(initial)\n            // So if min and initial bracket, the new interval is (min, initial)\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        }\n\n        // return the second endpoint if it is good enough\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0); // Corrected: should be 'max' not 'yMax' for the result value\n            return result;\n        }\n\n        // reduce interval if initial and max bracket the root\n        if (yInitial * yMax < 0) {\n            // If initial and max bracket, the new interval is (initial, max)\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        }\n\n        // If we reach here, it means:\n        // 1. Neither initial, min, nor max were roots themselves (checked by functionValueAccuracy).\n        // 2. yInitial and yMin have the same sign (because yInitial * yMin < 0 was false).\n        // 3. yInitial and yMax have the same sign (because yInitial * yMax < 0 was false).\n        // Therefore, yMin, yInitial, and yMax all have the same sign.\n        // This is a non-bracketing situation for the three points according to the Javadoc.\n        // Throw an IllegalArgumentException as specified.\n        throw new IllegalArgumentException\n            (\"Function values at points do not bracket a root. \" +\n             \"Expected signs to be opposite, but got: f(min)=\" + yMin +\n             \", f(initial)=\" + yInitial + \", f(max)=\" + yMax);\n\n        // The original code would proceed to call the full Brent algorithm,\n        // but this violates the Javadoc's pre-condition.\n        // return solve(f, min, yMin, max, yMax, initial, yInitial); // This line is now unreachable.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}