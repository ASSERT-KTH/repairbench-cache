{
    "generation": "    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     * <p>Throws <code>IllegalArgumentException</code> if the function values\n     * at the endpoints {@code min} and {@code max} do not bracket a root (i.e.\n     * {@code f(min) * f(max) >= 0}), unless the value at the {@code initial}\n     * point has a different sign than either endpoint.</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root), or if the function values do not\n     * indicate a root is bracketed by the interval / initial point.\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max); // Check min <= initial <= max\n\n        // Evaluate function values\n        double yInitial = f.value(initial);\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n\n        // return the initial guess if it is good enough\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0); // Use min as the result, not yMin\n            return result;\n        }\n\n        // return the second endpoint if it is good enough\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0); // Use max as the result, not yMax\n            return result;\n        }\n\n        // Check bracketing condition between min and initial\n        if (yInitial * yMin < 0) {\n            // Root is in [min, initial]\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        }\n\n        // Check bracketing condition between initial and max\n        if (yInitial * yMax < 0) {\n            // Root is in [initial, max]\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        }\n\n        // If neither [min, initial] nor [initial, max] brackets a root,\n        // check the overall interval [min, max]. This is the standard\n        // requirement for Brent's method.\n        if (yMin * yMax < 0) {\n             // Root is in [min, max], proceed with the Brent algorithm using initial\n             return solve(f, min, yMin, max, yMax, initial, yInitial);\n        } else {\n             // If yMin * yMax >= 0, no interval brackets the root according to the signs.\n             // This includes the case where yMin, yInitial, yMax all have the same sign.\n             throw new IllegalArgumentException(\n                 String.format(\"Function values at endpoints do not bracket a root. Values at [%f, %f]: [%f, %f]\",\n                               min, max, yMin, yMax));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}