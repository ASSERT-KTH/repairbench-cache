{
    "generation": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // return the initial guess if it is good enough\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // return the first endpoint if it is good enough\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    // return the second endpoint if it is good enough\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // Make sure that at least one subinterval brackets a root\n    boolean bracket1 = (yMin * yInitial < 0);\n    boolean bracket2 = (yInitial * yMax < 0);\n\n    if (!bracket1 && !bracket2) {\n        throw new IllegalArgumentException(\n            \"Function values at endpoints do not have different signs. \" +\n            \"Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yInitial + \",\" + yMax + \"]\"\n        );\n    }\n\n    // reduce interval if min and initial bracket the root\n    if (bracket1) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n\n    // reduce interval if initial and max bracket the root\n    if (bracket2) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n\n    // This shouldn't happen due to prior bracketing checks, but keep for completeness\n    throw new IllegalArgumentException(\n        \"Function values at endpoints do not bracket a root. \" +\n        \"Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yInitial + \",\" + yMax + \"]\"\n    );\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}