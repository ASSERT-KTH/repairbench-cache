{
    "generation": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Check endpoints are bracketing or initial is bracketing with endpoint\n    double yInitial = f.value(initial);\n\n    // If any endpoint is a root, accept it\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // Now check bracketing: \n    // At least one pair (min, initial) or (initial, max) must bracket the root.\n    boolean bracket1 = (yMin * yInitial < 0);\n    boolean bracket2 = (yInitial * yMax < 0);\n\n    if (!bracket1 && !bracket2) {\n        // If all function values have the same sign or zero, no bracket\n        throw new IllegalArgumentException(\"Function values at endpoints do not have different signs. No bracketing: f(min)=\"+yMin+\", f(initial)=\"+yInitial+\", f(max)=\"+yMax);\n    }\n\n    if (bracket1) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    } else { // bracket2 is true\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}