{
    "generation": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // evaluate function at initial guess\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // now check endpoints for bracketing\n    boolean minInitialBracket = yMin * yInitial < 0;\n    boolean initialMaxBracket = yInitial * yMax < 0;\n    boolean minMaxBracket = yMin * yMax < 0;\n\n    if (minInitialBracket) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    } else if (initialMaxBracket) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    } else if (minMaxBracket) {\n        return solve(f, min, yMin, max, yMax, initial, yInitial);\n    } else {\n        // no bracketing, throw IAE per javadoc\n        throw new IllegalArgumentException(\"Function values at endpoints do not have different signs. Cannot bracket root.\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}