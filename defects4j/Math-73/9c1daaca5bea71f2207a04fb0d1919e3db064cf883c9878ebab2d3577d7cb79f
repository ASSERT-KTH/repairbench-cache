{
    "generation": "    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // return the initial guess if it is good enough\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0); // FIX: Should set the x-coordinate (min), not the y-coordinate (yMin)\n            return result;\n        }\n\n        // reduce interval if min and initial bracket the root\n        if (yInitial * yMin < 0) {\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        }\n\n        // return the second endpoint if it is good enough\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0); // FIX: Should set the x-coordinate (max), not the y-coordinate (yMax)\n            return result;\n        }\n\n        // reduce interval if initial and max bracket the root\n        if (yInitial * yMax < 0) {\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        }\n\n        // If we reach this point, it means no root was found directly at min, initial, or max,\n        // and no bracketing interval was found between (min,initial) or (initial,max).\n        // This implies that (yInitial * yMin >= 0) AND (yInitial * yMax >= 0).\n        // Since we've already checked for values being close to zero, this means:\n        // (yInitial * yMin > 0) AND (yInitial * yMax > 0).\n        // This indicates that yInitial, yMin, and yMax all have the same sign.\n        // As per the Javadoc, this scenario should throw an IllegalArgumentException.\n        if ((yInitial * yMin > 0) && (yInitial * yMax > 0)) {\n            throw new IllegalArgumentException(\n                \"Function values at min, initial, and max have the same sign. \" +\n                \"No bracketing interval could be found. \" +\n                \"min=\" + min + \", max=\" + max + \", initial=\" + initial +\n                \", yMin=\" + yMin + \", yMax=\" + yMax + \", yInitial=\" + yInitial);\n        }\n\n        // This final call is reached if min and max bracket the root, but initial does not\n        // form a tighter bracket with either min or max.\n        // This case is covered by the Javadoc's \"note that it is allowed to have endpoints\n        // with the same sign if the initial point has opposite sign function-wise\".\n        // However, if the above `if` block was true (all same sign), this line would not be reached.\n        // If the above `if` block was false, AND the previous `if` blocks were false,\n        // it implies that a bracket *does* exist between min and max (yMin * yMax < 0).\n        // For example, if yMin=-1, yInitial=0.5, yMax=1. In this scenario, the (min,initial) bracket is formed (yInitial * yMin < 0) and the function returns early.\n        // The original logic here assumes that if no sub-bracket is found, the general Brent algorithm\n        // with the full interval [min, max] and initial guess 'initial' will proceed.\n        // Given the test failure, it seems the underlying solver does not always throw the expected exception\n        // or the requirement is for this top-level method to throw it more directly.\n        // The added check handles the scenario where all three points share the same sign.\n        return solve(f, min, yMin, max, yMax, initial, yInitial);\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}