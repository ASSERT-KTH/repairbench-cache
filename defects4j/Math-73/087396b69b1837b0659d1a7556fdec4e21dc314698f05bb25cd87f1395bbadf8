{
    "generation": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // return the initial guess if it is good enough\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // return the first endpoint if it is good enough\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    // return the second endpoint if it is good enough\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // Check that the interval brackets the root\n    // That is, at least one pair of [min, initial] or [initial, max] or [min, max] has opposite signs\n    boolean bracket1 = yMin * yInitial < 0;\n    boolean bracket2 = yInitial * yMax < 0;\n    boolean bracket3 = yMin * yMax < 0;\n\n    if (!bracket1 && !bracket2 && !bracket3) {\n        throw new IllegalArgumentException(\"Function values at endpoints do not have different signs. No bracketing: [\" + min + \", \" + max + \", \" + initial + \"]\");\n    }\n\n    // reduce interval if min and initial bracket the root\n    if (bracket1) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n\n    // reduce interval if initial and max bracket the root\n    if (bracket2) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n\n    // fallback to full Brent algorithm using [min, max] as interval\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}