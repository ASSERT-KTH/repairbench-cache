{
    "generation": "    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // return the initial guess if it is good enough\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n            return result;\n        }\n\n        // return the second endpoint if it is good enough\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0);\n            return result;\n        }\n\n        // Check that the initial is strictly between min and max\n        if (initial < min || initial > max) {\n            throw new IllegalArgumentException(\"Initial value is not in the interval\");\n        }\n\n        // the function values must have opposite signs on some subinterval\n        boolean bracksMin = yInitial * yMin < 0;\n        boolean bracksMax = yInitial * yMax < 0;\n        boolean bracksEndpoints = yMin * yMax < 0;\n\n        if (bracksMin) {\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        }\n\n        if (bracksMax) {\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        }\n\n        // If none of the intervals bracket a root, throw an exception\n        if (!(bracksMin || bracksMax || bracksEndpoints)) {\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs, \"\n                                               + \"no bracketing: [\" + min + \",\" + max + \"] \"\n                                               + \"f(min)=\" + yMin + \", f(initial)=\" + yInitial + \", f(max)=\" + yMax);\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        return solve(f, min, yMin, max, yMax, initial, yInitial);\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}