{
    "generation": "    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n\n        // Check that min < max\n        if (min >= max) {\n            throw new IllegalArgumentException(\"Min must be less than max.\");\n        }\n\n        // Check that initial is between min and max\n        verifyInterval(min, max, initial);\n\n        // Evaluate function at endpoints and initial guess\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        double yInitial = f.value(initial);\n\n        // Check if endpoints bracket a root\n        if (yMin * yMax >= 0) {\n            throw new IllegalArgumentException(\"Function values at endpoints do not bracket a root.\");\n        }\n\n        // return the initial guess if it is good enough\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n            return result;\n        }\n\n        // return the second endpoint if it is good enough\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0);\n            return result;\n        }\n\n        // reduce interval if min and initial bracket the root\n        if (yInitial * yMin < 0) {\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        }\n\n        // reduce interval if initial and max bracket the root\n        if (yInitial * yMax < 0) {\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        return solve(f, min, yMin, max, yMax, initial, yInitial);\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}