{
    "generation": "    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // return the initial guess if it is good enough\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0); // Fix: Should return the x-value (min), not the y-value (yMin)\n            return result;\n        }\n\n        // reduce interval if min and initial bracket the root\n        if (yInitial * yMin < 0) {\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        }\n\n        // return the second endpoint if it is good enough\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0); // Fix: Should return the x-value (max), not the y-value (yMax)\n            return result;\n        }\n\n        // reduce interval if initial and max bracket the root\n        if (yInitial * yMax < 0) {\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        }\n\n        // If at this point, no bracketing occurred with the initial guess,\n        // and the function values at min, initial, and max all have the same sign,\n        // then throw an exception. The previous `if` blocks mean:\n        // (yInitial * yMin >= 0) AND (yInitial * yMax >= 0).\n        // Combined with the earlier `Math.abs` checks, this implies yMin, yInitial, and yMax\n        // all have the same non-zero sign.\n        if (yMin * yInitial > 0 && yInitial * yMax > 0) {\n            throw new IllegalArgumentException\n                (\"Function values at min, initial, and max have the same sign. \" +\n                 \"No bracketing could be performed.\");\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        // This case means that either min and max bracket the root (yMin * yMax < 0),\n        // or one of the points is exactly zero (which is handled by functionValueAccuracy),\n        // but no bracketing with the 'initial' point was found.\n        // The underlying solve method handles the specific Brent algorithm logic for this case.\n        return solve(f, min, yMin, max, yMax, initial, yInitial);\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}