{
    "generation": "    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // return the initial guess if it is good enough\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0); // Corrected: should be 'min', not 'yMin'\n            return result;\n        }\n\n        // reduce interval if min and initial bracket the root\n        if (yInitial * yMin < 0) {\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        }\n\n        // return the second endpoint if it is good enough\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0); // Corrected: should be 'max', not 'yMax'\n            return result;\n        }\n\n        // reduce interval if initial and max bracket the root\n        if (yInitial * yMax < 0) {\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        }\n\n        // If we reach this point, it means:\n        // 1. None of initial, min, max are roots (within accuracy).\n        // 2. Neither (min, initial) nor (initial, max) bracket a root.\n        // This implies that yInitial * yMin >= 0 and yInitial * yMax >= 0.\n        // Since none of the values are zero, this means yMin, yInitial, and yMax\n        // must all have the same sign. This violates the bracketing condition\n        // specified in the Javadoc.\n        if (yMin * yInitial > 0 && yInitial * yMax > 0) {\n            throw new IllegalArgumentException\n                (\"Function values at points are not bracketing: \" +\n                 \"f(min)=\" + yMin + \", f(initial)=\" + yInitial + \", f(max)=\" + yMax);\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        // At this point, it implies that min and max must bracket the root,\n        // as otherwise the above check would have failed.\n        // (If yMin and yMax bracket, but initial doesn't help narrow,\n        // then yMin * yInitial < 0 or yInitial * yMax < 0 would have been false,\n        // AND yMin * yMax < 0 must be true. This means yInitial has the same sign as one endpoint.\n        // E.g., if yMin < 0, yMax > 0, yInitial < 0. Then yInitial * yMin > 0 (false for exception check)\n        // but yInitial * yMax < 0 (true for initial/max bracket). So it would have taken the `if (yInitial * yMax < 0)` branch.\n        // So the flow ensures this path is only taken if no bracketing is found among any of the three points,\n        // leading to the IllegalArgumentException.)\n        return solve(f, min, yMin, max, yMax, initial, yInitial);\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}