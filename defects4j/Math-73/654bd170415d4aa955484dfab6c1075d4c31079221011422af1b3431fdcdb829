{
    "generation": "/**\n * Find a zero in the given interval with an initial guess.\n * <p>Throws <code>IllegalArgumentException</code> if the values of the\n * function at the three points have the same sign (note that it is\n * allowed to have endpoints with the same sign if the initial point has\n * opposite sign function-wise), or if the initial guess is not between min and max.</p>\n *\n * @param f function to solve.\n * @param min the lower bound for the interval.\n * @param max the upper bound for the interval.\n * @param initial the start value to use (must be set to min if no\n * initial point is known).\n * @return the value where the function is zero\n * @throws MaxIterationsExceededException the maximum iteration count\n * is exceeded\n * @throws FunctionEvaluationException if an error occurs evaluating\n *  the function\n * @throws IllegalArgumentException if initial is not between min and max\n * (even if it <em>is</em> a root), or if the function values at min, max, and initial do not bracket a root.\n */\npublic double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // Check if the initial guess is within the interval\n    if (initial < min || initial > max) {\n        throw new IllegalArgumentException(\"Initial guess must be between min and max\");\n    }\n\n    // return the initial guess if it is good enough\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // return the first endpoint if it is good enough\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n\n    // Check if min and initial bracket the root\n    if (yInitial * yMin >= 0) {\n        throw new IllegalArgumentException(\"Function values at min and initial do not bracket a root\");\n    }\n\n    // return the second endpoint if it is good enough\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n\n    // Check if initial and max bracket the root\n    if (yInitial * yMax >= 0) {\n        throw new IllegalArgumentException(\"Function values at initial and max do not bracket a root\");\n    }\n\n    // full Brent algorithm starting with provided initial guess\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n\nprivate void verifySequence(double start, double midpoint, double end) {\n    if (start >= midpoint || midpoint >= end) {\n        throw new IllegalArgumentException(\"Endpoints and initial guess must be in increasing order\");\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}