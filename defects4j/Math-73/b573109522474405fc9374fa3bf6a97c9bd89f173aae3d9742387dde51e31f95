{
    "generation": "    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // Evaluate function values at all three points upfront.\n        double yInitial = f.value(initial);\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n\n        // Return the initial guess if it is good enough\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // Return the first endpoint if it is good enough\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0); // Corrected: Should set result to the x-value (min), not the y-value (yMin)\n            return result;\n        }\n\n        // Return the second endpoint if it is good enough\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0); // Corrected: Should set result to the x-value (max), not the y-value (yMax)\n            return result;\n        }\n\n        // Throws IllegalArgumentException if the values of the function\n        // at the three points (min, initial, max) have the same sign.\n        // This is true if yInitial has the same sign as yMin, AND\n        // yInitial has the same sign as yMax.\n        if (yInitial * yMin > 0 && yInitial * yMax > 0) {\n            throw new IllegalArgumentException(\n                \"Function values at points min, initial, max have same sign. No bracketing found.\");\n        }\n\n        // Reduce interval if min and initial bracket the root\n        if (yInitial * yMin < 0) {\n            // The root is bracketed by min and initial. Use initial as the guess.\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        }\n\n        // Reduce interval if initial and max bracket the root\n        // This path is taken only if (yInitial * yMin >= 0).\n        if (yInitial * yMax < 0) {\n            // The root is bracketed by initial and max. Use initial as the guess.\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        }\n\n        // If control reaches here, it implies:\n        // 1. No trivial root found at initial, min, or max.\n        // 2. The function values at min, initial, and max do NOT all have the same sign.\n        // 3. No bracketing was found between (min, initial) or (initial, max).\n        // Since (yInitial * yMin >= 0) and (yInitial * yMax >= 0) are true, and not all three\n        // have the same sign, the only remaining possibility for a root to exist is if\n        // (yMin * yMax < 0) but initial does not help narrow the bracket.\n        // In this case, the algorithm proceeds with the full [min, max] interval.\n        return solve(f, min, yMin, max, yMax, initial, yInitial);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}