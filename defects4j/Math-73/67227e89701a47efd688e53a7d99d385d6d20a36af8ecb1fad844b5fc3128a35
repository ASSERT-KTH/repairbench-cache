{
    "generation": "    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root) or if the function values at the\n     * three points (min, initial, max) have the same sign.\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // return the initial guess if it is good enough\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            // Use 'min' as the result, not 'yMin'\n            setResult(min, 0);\n            return result;\n        }\n\n        // reduce interval if min and initial bracket the root\n        if (yInitial * yMin < 0) {\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        }\n\n        // return the second endpoint if it is good enough\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            // Use 'max' as the result, not 'yMax'\n            setResult(max, 0);\n            return result;\n        }\n\n        // reduce interval if initial and max bracket the root\n        if (yInitial * yMax < 0) {\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        }\n\n        // If we reach here, it implies yInitial * yMin >= 0 and yInitial * yMax >= 0.\n        // If yInitial is not zero (checked earlier), this means that\n        // sgn(yInitial) == sgn(yMin) and sgn(yInitial) == sgn(yMax).\n        // Therefore, the function values at min, initial, and max all have the same sign.\n        // The Javadoc requires throwing an IllegalArgumentException in this situation.\n        // The message should reflect this condition.\n        throw new IllegalArgumentException(String.format(\n                \"Function values at the three points %.15g, %.15g, %.15g do not bracket the root: values are %.15g, %.15g, %.15g\",\n                min, initial, max, yMin, yInitial, yMax));\n\n        // The original code called the internal solve method here:\n        // return solve(f, min, yMin, max, yMax, initial, yInitial);\n        // This path is incorrect based on the method's contract specified in the Javadoc\n        // and the expectation of the failing unit test, as it violates the precondition\n        // that the function values at the three points should not have the same sign unless\n        // one of the subintervals [min, initial] or [initial, max] brackets the root.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}