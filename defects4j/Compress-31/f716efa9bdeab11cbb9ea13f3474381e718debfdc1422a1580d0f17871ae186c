{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (start < buffer.length && buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Check for empty buffer after skipping spaces\n        if (start >= end) {\n            return 0L;\n        }\n\n        // Trim all trailing NULs and spaces\n        int originalEnd = end;\n        while (end > start) {\n            byte trailer = buffer[end - 1];\n            if (trailer == 0 || trailer == ' ') {\n                end--;\n            } else {\n                break;\n            }\n        }\n\n        // If we've removed all characters (e.g., buffer was all spaces/NULs)\n        if (start >= end) {\n            return 0L;\n        }\n\n        // Check if we've removed too much (trailing bytes are required)\n        if (end < originalEnd - 1) { // At least one trailing NUL/space should remain\n            throw new IllegalArgumentException(\"Missing trailing space/NUL\");\n        }\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            if (currentByte == 0 || currentByte == ' ') {\n                break; // Stop at embedded NULs or spaces\n            }\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        // Check that we actually parsed something\n        if (start == offset) { // No digits found (excluding leading spaces)\n            return 0L;\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}