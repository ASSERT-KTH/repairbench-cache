{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        if (length < 2) {\n            throw new IllegalArgumentException(\"Length must be at least 2\");\n        }\n        \n        int end = offset + length;\n        int start = offset;\n\n        // Check if all bytes are NUL\n        boolean allNull = true;\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNull = false;\n                break;\n            }\n        }\n        if (allNull) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end && buffer[start] == ' ') {\n            start++;\n        }\n\n        // Check for leading NUL\n        if (start < end && buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Trim trailing spaces and NULs\n        end = offset + length;\n        while (end > start && (buffer[end - 1] == ' ' || buffer[end - 1] == 0)) {\n            end--;\n        }\n\n        for (int i = start; i < end; i++) {\n            byte currentByte = buffer[i];\n            if (currentByte == 0) {\n                throw new IllegalArgumentException(\"Embedded NUL at position \" + i);\n            }\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                    \"Invalid octal character: \" + currentByte + \" at position \" + i);\n            }\n            result = (result << 3) | (currentByte - '0');\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}