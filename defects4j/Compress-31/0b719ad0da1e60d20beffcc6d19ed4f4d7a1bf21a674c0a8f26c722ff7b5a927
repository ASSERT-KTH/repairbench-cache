{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Handle special case: all NULs (allowed to be field missing)\n    boolean allNuls = true;\n    for (int i = offset; i < end; i++) {\n        if (buffer[i] != 0) {\n            allNuls = false;\n            break;\n        }\n    }\n    if (allNuls) {\n        return 0L;\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim trailing NULs and spaces\n    int trailerIdx = end - 1;\n    while (trailerIdx >= start && (buffer[trailerIdx] == 0 || buffer[trailerIdx] == ' ')) {\n        trailerIdx--;\n    }\n    end = trailerIdx + 1;\n\n    // It must end with at least one trailing space or NUL, otherwise it's invalid\n    if (end < offset + length - 1 || ((buffer[offset + length - 1] != 0) && (buffer[offset + length - 1] != ' '))) {\n        throw new IllegalArgumentException(\"Invalid octal: missing required trailing space or NUL\");\n    }\n\n    boolean foundDigit = false;\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n\n        // Embedded NUL or space is NOT allowed (only at start or tail)\n        if (currentByte == 0 || currentByte == ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        foundDigit = true;\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n    // If no digits found, treat as 0L (compat, e.g. all spaces except trailer)\n    return foundDigit ? result : 0L;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}