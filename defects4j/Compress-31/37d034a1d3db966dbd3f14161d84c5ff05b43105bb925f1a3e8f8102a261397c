{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (length == 0 || buffer.length < offset + length) {\n            throw new IllegalArgumentException(\"Invalid buffer length or offset\");\n        }\n\n        if (buffer.length == 0 || (length == 1 && buffer[offset] == 0)) {\n            return 0L;\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        byte trailer = (start < end) ? buffer[end - 1] : 0;\n        while (start < end && (trailer == 0 || trailer == ' ')) {\n            end--;\n            trailer = (start < end) ? buffer[end - 1] : 0;\n        }\n\n        boolean seenDigit = false;\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            if (currentByte == 0) {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            if (currentByte == ' ' && seenDigit) {\n                break; // trailing space allowed after digits\n            }\n            // Check for invalid characters\n            if (currentByte < '0' || currentByte > '7'){\n                if (currentByte != ' ') {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n            }\n            if (currentByte >= '0' && currentByte <= '7') {\n                result = (result << 3) + (currentByte - '0'); // convert from ASCII\n                seenDigit = true;\n            } else if (currentByte != ' ' || !seenDigit) {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}