{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (buffer.length < offset + length) {\n        throw new IllegalArgumentException(\n            \"Buffer too small for offset \"+offset+\" and length \"+length+\": \"+buffer.length);\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    // The ustar and POSIX tar specs require a trailing NUL or\n    // space but some implementations use the extra digit for big\n    // sizes/uids/gids ...\n    // Buffer must have at least one trailing NUL or space\n    if (end <= offset) {\n        throw new IllegalArgumentException(\n            exceptionMessage(buffer, offset, length, end - 1, (byte) 0));\n    }\n    byte trailer = buffer[end - 1];\n    boolean hasTrailer = false;\n    while (end > start && (trailer == 0 || trailer == ' ')) {\n        hasTrailer = true;\n        end--;\n        if (end > start) {\n            trailer = buffer[end - 1];\n        }\n    }\n    if (!hasTrailer) {\n        throw new IllegalArgumentException(\n                \"Buffer does not end with trailing space or NUL: \" +\n                exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));\n    }\n\n    boolean digitFound = false;\n    for ( ; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (!digitFound && currentByte == 0) {\n            break;\n        }\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        digitFound = true;\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    // If there is any remaining (non-trailer) character in the parse area, that's an error\n    // This check isn't strictly necessary as we already did the validation above, but we keep for clarity\n    for (int i = start; i < end; i++) {\n        byte b = buffer[i];\n        if (b != 0 && b != ' ') {\n            throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, i, b));\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}