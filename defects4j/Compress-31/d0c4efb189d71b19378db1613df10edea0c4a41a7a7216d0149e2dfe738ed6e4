{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Check if we have only spaces/NULs (empty field)\n        boolean onlySpacesAndNulls = true;\n        for (int i = start; i < end; i++) {\n            if (buffer[i] != ' ' && buffer[i] != 0) {\n                onlySpacesAndNulls = false;\n                break;\n            }\n        }\n        if (onlySpacesAndNulls) {\n            return 0L;\n        }\n\n        // Trim all trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids ...\n        int origEnd = end;\n        byte trailer = buffer[end - 1];\n        while (start < end && (trailer == 0 || trailer == ' ')) {\n            end--;\n            if (end > start) {\n                trailer = buffer[end - 1];\n            }\n        }\n\n        // Ensure we have a valid trailing character (either original or trimmed)\n        if (end == origEnd) { // no trimming was done\n            trailer = buffer[end - 1];\n            if (!(trailer == 0 || trailer == ' ')) {\n                throw new IllegalArgumentException(\n                        \"Buffer does not seem to contain a trailing NUL or space\");\n            }\n        } else { // trimming was done\n            // Check the new last character\n            if (end > start) {\n                byte lastChar = buffer[end - 1];\n                if (lastChar == ' ' || lastChar == 0) {\n                    end--; // Also remove the last space/NUL if present\n                }\n            }\n        }\n\n        // Now parse the content\n        boolean hasDigits = false;\n        for (; start < end; start++) {\n            final byte currentByte = buffer[start];\n            if (currentByte == 0) {\n                throw new IllegalArgumentException(\n                        \"Unexpected embedded NUL in octal string\");\n            }\n            if (currentByte == ' ') {\n                throw new IllegalArgumentException(\n                        \"Unexpected embedded space in octal string\");\n            }\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            hasDigits = true;\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        if (!hasDigits && start < origEnd) {\n            // If we didn't see any digits but there were characters, it's invalid\n            throw new IllegalArgumentException(\"No valid digits found in octal string\");\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}