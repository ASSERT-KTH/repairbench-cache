{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (buffer.length < offset + length){\n        throw new IllegalArgumentException(\"Buffer too small for offset + length\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    byte trailer;\n    while (end > start) {\n        trailer = buffer[end - 1];\n        if (trailer == 0 || trailer == ' ') {\n            end--;\n        } else {\n            break;\n        }\n    }\n\n    if (start >= end){\n        // All spaces or NULs\n        return 0L;\n    }\n\n    boolean foundDigit = false;\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte >= '0' && currentByte <= '7') {\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            foundDigit = true;\n        } else {\n            // Embedded NUL or space or any invalid char is not allowed\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n    }\n\n    if (!foundDigit) {\n        // Empty field (all spaces), treat as 0 per spec?\n        return 0L;\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}