{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    // The ustar and POSIX tar specs require a trailing NUL or\n    // space but some implementations use the extra digit for big\n    // sizes/uids/gids ...\n    int realEnd = end;\n    while (realEnd > start && (buffer[realEnd - 1] == 0 || buffer[realEnd - 1] == ' ')) {\n        realEnd--;\n    }\n\n    boolean foundNonOctal = false;\n    for (int i = start; i < realEnd; i++) {\n        final byte currentByte = buffer[i];\n        // NUL or space in the middle is only legal padding at the END, not inside\n        if (currentByte == 0 || currentByte == ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n\n    // Make sure all remaining chars are NUL or space (already checked at least one at the end)\n    for (int i = realEnd; i < end; i++) {\n        byte currentByte = buffer[i];\n        if (currentByte != 0 && currentByte != ' ') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}