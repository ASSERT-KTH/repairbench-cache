{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle cases of leading NUL bytes, returning 0 as specified.\n        // This accounts for archives created with certain tools like GNU tar >= 1.14\n        // or archives potentially corrupted with NULs.\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids instead. We are flexible here.\n        // Initialize trailer this way to handle case where start == end after trimming spaces.\n        byte trailer = 0;\n        if (start < end) {\n            trailer = buffer[end - 1];\n        }\n\n        while (start < end && (trailer == 0 || trailer == ' ')) {\n            end--;\n            // Avoid reading buffer[end-1] if end becomes <= start after decrement\n            // which happens if the buffer segment consisted only of spaces/NULs\n            if (start < end) {\n                 trailer = buffer[end - 1];\n            } else {\n                // If start == end, then the segment was all NULs/spaces\n                // The loop below won't run, result is 0, which is correct.\n                break;\n            }\n        }\n\n        // Process digits: leading spaces and trailing NULs/spaces are ignored\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            // Any non-octal digit (including NUL or SPACE) encountered signifies corruption\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method (assuming it exists elsewhere or is added for context)\n    // to generate meaningful exception messages\n    private static String exceptionMessage(byte[] buffer, final int offset,\n                                           final int length, int currentOffset, final byte currentByte) {\n        // Create a string representation for the error message, replacing NULs for visibility\n        String WipBuffer = new String(buffer, offset, length, java.nio.charset.StandardCharsets.ISO_8859_1);\n        WipBuffer = WipBuffer.replace(\"\\0\", \"{NUL}\");\n        return \"Invalid byte \" + currentByte + \" at offset \" + (currentOffset - offset) + \" in '\" + WipBuffer + \"' len=\" + length;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}