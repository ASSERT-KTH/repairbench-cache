{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    int end = offset + length;\n    int start = offset;\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    if (start >= end) {\n        return 0L;\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Find the end of the octal part\n    int trailingStart = end - 1;\n    while (trailingStart >= start && (buffer[trailingStart] == ' ' || buffer[trailingStart] == 0)) {\n        trailingStart--;\n    }\n    end = trailingStart + 1;\n\n    long result = 0;\n    for (; start < end; start++) {\n        byte currentByte = buffer[start];\n        if (currentByte == 0 || currentByte == ' ') {\n            break;\n        }\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}