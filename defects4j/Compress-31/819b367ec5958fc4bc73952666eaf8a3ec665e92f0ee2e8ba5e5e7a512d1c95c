{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (length == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end) {\n            if (buffer[start] == ' ') {\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Check for leading NUL (return 0 as per documentation)\n        if (start < end && buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Trim trailing NULs and spaces\n        byte trailer = 0;\n        while (end > start) {\n            trailer = buffer[end-1];\n            if (trailer == 0 || trailer == ' ') {\n                end--;\n            } else {\n                break;\n            }\n        }\n\n        // Validate there's at least one valid character (not just spaces/NULs)\n        if (start >= end) {\n            return 0L;\n        }\n\n        // Check for invalid characters in the middle of the string\n        for (int i = start; i < end; i++) {\n            if (buffer[i] < '0' || buffer[i] > '7') {\n                if (buffer[i] == ' ' || buffer[i] == 0) {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, i, buffer[i]));\n                }\n            }\n        }\n\n        // Actually parse the octal value\n        for (; start < end; start++) {\n            final byte currentByte = buffer[start];\n            if (currentByte == 0) {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}