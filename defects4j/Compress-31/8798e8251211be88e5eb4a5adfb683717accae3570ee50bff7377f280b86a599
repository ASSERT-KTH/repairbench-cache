{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int end = offset + length;\n    int start = offset;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ') {\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    // The ustar and POSIX tar specs require a trailing NUL or\n    // space but some implementations use the extra digit for big\n    // sizes/uids/gids ...\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer == ' ')) {\n        end--;\n        if (end > start) { // To avoid ArrayIndexOutOfBoundsException\n            trailer = buffer[end - 1];\n        }\n    }\n\n    boolean seenDigit = false;\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte == 0 || currentByte == ' ') {\n            // embedded NULs or spaces inside the number field are invalid\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        seenDigit = true;\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n    }\n\n    return seenDigit ? result : 0L;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}