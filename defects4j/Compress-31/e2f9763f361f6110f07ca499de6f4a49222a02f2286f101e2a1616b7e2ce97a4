{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    int start = offset;\n    int end = offset + length;\n    long result = 0;\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer == ' ')) {\n        end--;\n        // avoid underflow\n        if (end == start) {\n            break;\n        }\n        trailer = buffer[end -1];\n    }\n\n    boolean digitSeen = false;\n\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        digitSeen = true;\n\n        // After the first digit, any embedded SP or NUL is invalid\n        if (start + 1 < end) {\n            byte nextByte = buffer[start + 1];\n            if (nextByte == 0 || nextByte == ' ') {\n                int j = start + 1;\n                // Consume trailing spaces or NULs\n                while (j < end && (buffer[j] == 0 || buffer[j] == ' ')) {\n                    j++;\n                }\n                if (j != end) {\n                    // found non-trailing junk after embedded space or NUL\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, j, buffer[j]));\n                }\n                break; // end processing digits\n            }\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}