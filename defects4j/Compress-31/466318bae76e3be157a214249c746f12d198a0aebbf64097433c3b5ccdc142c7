{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n\n    if (length == 0) {\n        return 0L;\n    }\n\n    // Check if first byte is NUL (special case)\n    if (length > 0 && buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end) {\n        if (buffer[start] == ' ' || buffer[start] == 0) {\n            // If we encounter a NUL during skipping spaces, it's invalid\n            if (buffer[start] == 0) {\n                throw new IllegalArgumentException(\"Invalid octal string (embedded NUL)\");\n            }\n            start++;\n        } else {\n            break;\n        }\n    }\n\n    // Trim all trailing NULs and spaces.\n    // The ustar and POSIX tar specs require a trailing NUL or\n    // space but some implementations use the extra digit for big\n    // sizes/uids/gids ...\n    while (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    // Check if the remaining range is empty (all spaces/NULs)\n    if (start >= end) {\n        return 0L;\n    }\n\n    // Verify we have a trailing space or NUL by checking the original buffer\n    // (since we modified end to exclude trailing spaces/NULs)\n    int originalEnd = offset + length;\n    if (originalEnd > buffer.length) {\n        originalEnd = buffer.length;\n    }\n    boolean hasTrailer = false;\n    for (int i = end; i < originalEnd; i++) {\n        if (buffer[i] == ' ' || buffer[i] == 0) {\n            hasTrailer = true;\n            break;\n        }\n    }\n    if (!hasTrailer && end == originalEnd) {\n        // If we consumed all characters and didn't find a trailer\n        // but length was exactly 2, that's acceptable (special case)\n        if (originalEnd - offset != 2) {\n            throw new IllegalArgumentException(\"Trailing space or NUL is missing\");\n        }\n    }\n\n    // Now parse the octal digits\n    boolean hasDigits = false;\n    for (; start < end; start++) {\n        final byte currentByte = buffer[start];\n\n        // Any NUL byte in the middle is invalid\n        if (currentByte == 0) {\n            throw new IllegalArgumentException(\"Invalid octal string (embedded NUL)\");\n        }\n\n        // CheckStyle:MagicNumber OFF\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        // CheckStyle:MagicNumber ON\n\n        result = (result << 3) + (currentByte - '0'); // convert from ASCII\n        hasDigits = true;\n    }\n\n    // If we only saw spaces/NULs, return 0\n    if (!hasDigits) {\n        return 0L;\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}