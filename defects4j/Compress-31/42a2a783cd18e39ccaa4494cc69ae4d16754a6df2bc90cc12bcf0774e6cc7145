{
    "generation": "/**\n * Parse an octal string from a buffer.\n *\n * <p>Leading spaces are ignored.\n * The buffer must contain a trailing space or NUL,\n * and may contain an additional trailing space or NUL.</p>\n *\n * <p>The input buffer is allowed to contain all NULs,\n * in which case the method returns 0L\n * (this allows for missing fields).</p>\n *\n * <p>To work-around some tar implementations that insert a\n * leading NUL this method returns 0 if it detects a leading NUL\n * since Commons Compress 1.4.</p>\n *\n * @param buffer The buffer from which to parse.\n * @param offset The offset into the buffer from which to parse.\n * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n * @return The long value of the octal string.\n * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n */\npublic static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long result = 0;\n    int start = offset;\n    int end = offset + length;\n\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    // Enforce that the last byte is a space or NUL\n    byte last = buffer[end - 1];\n    if (last != 0 && last != ' ') {\n        throw new IllegalArgumentException(\"Missing trailing space or NUL\");\n    }\n\n    // If the very first byte is NUL, treat as zero field\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // Trim all trailing NULs and spaces\n    while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n        end--;\n    }\n\n    // Parse octal digits\n    for (int i = start; i < end; i++) {\n        byte b = buffer[i];\n        // CheckStyle:MagicNumber OFF\n        if (b < '0' || b > '7') {\n            throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, i, b));\n        }\n        result = (result << 3) + (b - '0');\n        // CheckStyle:MagicNumber ON\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}