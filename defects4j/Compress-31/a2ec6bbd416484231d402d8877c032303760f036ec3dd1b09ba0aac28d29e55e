{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Check for empty buffer (all NULs)\n        boolean allNulls = true;\n        for (int i = offset; i < end; i++) {\n            if (buffer[i] != 0) {\n                allNulls = false;\n                break;\n            }\n        }\n        if (allNulls) {\n            return 0L;\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end) {\n            if (buffer[start] == ' ') {\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // If we have empty data after skipping spaces (but not all NULs)\n        if (start >= end) {\n            return 0L;\n        }\n\n        // Check for embedded NULs and invalid characters\n        for (int i = start; i < end; i++) {\n            if (buffer[i] == 0 && i < end - 1) {\n                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, buffer[i]));\n            }\n        }\n\n        // Trim trailing NULs and spaces\n        byte trailer;\n        int originalEnd = end;\n        if (end > offset) {\n            trailer = buffer[end - 1];\n            while (end > start && (trailer == 0 || trailer == ' ')) {\n                end--;\n                if (end > offset) {\n                    trailer = buffer[end - 1];\n                }\n            }\n        }\n\n        // Check if we have any valid digits left\n        if (end <= start) {\n            // If we had only spaces and NULs, check if the last character was valid\n            if (originalEnd > offset && (buffer[originalEnd-1] == ' ' || buffer[originalEnd-1] == 0)) {\n                return 0L;\n            }\n            throw new IllegalArgumentException(\"Missing trailing space/NUL\");\n        }\n\n        // Now parse the actual number\n        for (; start < end; start++) {\n            final byte currentByte = buffer[start];\n            if (currentByte == 0) {\n                break;\n            }\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0');\n            // CheckStyle:MagicNumber ON\n        }\n\n        // Verify that after the number there's either trailing space/NUL or we're at the end\n        if (start < originalEnd) {\n            boolean validTrailer = false;\n            while (start < originalEnd) {\n                if (buffer[start] == ' ' || buffer[start] == 0) {\n                    validTrailer = true;\n                    start++;\n                } else {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, buffer[start]));\n                }\n            }\n            if (!validTrailer) {\n                throw new IllegalArgumentException(\"Missing trailing space/NUL\");\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}