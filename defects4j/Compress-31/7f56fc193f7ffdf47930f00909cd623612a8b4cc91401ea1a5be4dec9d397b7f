{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        byte trailer = buffer[end - 1];\n        while (start < end && (trailer == 0 || trailer == ' ')) {\n            end--;\n            if (end > start) {\n                trailer = buffer[end - 1];\n            }\n        }\n\n        boolean digitFound = false;\n        for (; start < end; start++) {\n            final byte currentByte = buffer[start];\n            if (currentByte == 0) {\n                // If we already encountered digits and now find a NUL, it's an error\n                if (digitFound) {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n                // We allow leading NULs (but already handled at the start), otherwise break\n                break;\n            }\n            if (currentByte == ' ') {\n                // If we already encountered digits and now find a space, it's an error\n                if (digitFound) {\n                    throw new IllegalArgumentException(\n                            exceptionMessage(buffer, offset, length, start, currentByte));\n                }\n                // We'll treat spaces like we do leading spaces, break the loop\n                break;\n            }\n            // CheckStyle:MagicNumber OFF\n            if (currentByte < '0' || currentByte > '7'){\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            digitFound = true;\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        // Check if we have trailing NUL or space exactly once\n        if (start < end) {\n            byte b = buffer[start];\n            if ((b != 0 && b != ' ') || start + 1 < end) {\n                throw new IllegalArgumentException(\"Trailing character missing\");\n            }\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}