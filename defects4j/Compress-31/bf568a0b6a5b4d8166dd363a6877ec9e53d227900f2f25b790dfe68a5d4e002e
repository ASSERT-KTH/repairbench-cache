{
    "generation": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    if (length < 2) {\n        throw new IllegalArgumentException(\"Length \" + length + \" must be at least 2\");\n    }\n\n    int end = offset + length;\n    int start = offset;\n\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n\n    // Skip leading spaces\n    while (start < end && buffer[start] == ' ') {\n        start++;\n    }\n\n    // Check for embedded NULs before reaching the end\n    for (int i = start; i < end; i++) {\n        if (buffer[i] == 0) {\n            throw new IllegalArgumentException(\"Embedded NUL found in octal string\");\n        }\n    }\n\n    // Trim trailing spaces and NULs\n    while (end > start && (buffer[end - 1] == ' ' || buffer[end - 1] == 0)) {\n        end--;\n    }\n\n    long result = 0;\n    boolean valid = false;\n\n    for (int i = start; i < end; i++) {\n        final byte currentByte = buffer[i];\n        if (currentByte == 0 || currentByte == ' ') {\n            break;\n        }\n        if (currentByte < '0' || currentByte > '7') {\n            throw new IllegalArgumentException(\"Invalid octal digit: \" + currentByte);\n        }\n        result = (result << 3) + (currentByte - '0');\n        valid = true;\n    }\n\n    if (!valid) {\n        throw new IllegalArgumentException(\"No valid octal digits found\");\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}