{
    "generation": "    /**\n     * Parse an octal string from a buffer.\n     *\n     * <p>Leading spaces are ignored.\n     * The buffer must contain a trailing space or NUL,\n     * and may contain an additional trailing space or NUL.</p>\n     *\n     * <p>The input buffer is allowed to contain all NULs,\n     * in which case the method returns 0L\n     * (this allows for missing fields).</p>\n     *\n     * <p>To work-around some tar implementations that insert a\n     * leading NUL this method returns 0 if it detects a leading NUL\n     * since Commons Compress 1.4.</p>\n     *\n     * @param buffer The buffer from which to parse.\n     * @param offset The offset into the buffer from which to parse.\n     * @param length The maximum number of bytes to parse - must be at least 2 bytes.\n     * @return The long value of the octal string.\n     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.\n     */\n    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        // Handle leading NUL as specified in javadoc\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end){\n            if (buffer[start] == ' '){\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Trim all trailing NULs and spaces.\n        // The ustar and POSIX tar specs require a trailing NUL or\n        // space but some implementations use the extra digit for big\n        // sizes/uids/gids ...\n        // Ensure loop terminates before accessing invalid index\n        while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {\n            end--;\n        }\n\n        // After trimming, if start == end, the buffer contained only spaces/NULs.\n        // The loop below will not execute and 0 will be returned, which is correct.\n\n        for ( ;start < end; start++) {\n            final byte currentByte = buffer[start];\n            // CheckStyle:MagicNumber OFF\n            // Reject non-octal digits. This will also reject NULs and spaces\n            // if they appear after skipping leading spaces and before the trailing NUL/space.\n            if (currentByte < '0' || currentByte > '7'){\n                // Provide a helpful exception message detailing the problem\n                // (Assuming exceptionMessage helper method exists and works as before)\n                throw new IllegalArgumentException(\n                        exceptionMessage(buffer, offset, length, start, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0'); // convert from ASCII\n            // CheckStyle:MagicNumber ON\n        }\n\n        return result;\n    }\n\n    // Helper method assumed to exist in the original class (like org.apache.commons.compress.archivers.tar.TarUtils)\n    // It's not part of the fix, just needed for the code to be syntactically valid if compiled standalone.\n    private static String exceptionMessage(byte[] buffer, int offset, int length, int currentOffset, byte currentByte) {\n        // Example implementation:\n        String W = new String(buffer, offset, length); // NOSONAR\n        return \"Invalid byte \" + currentByte + \" at offset \" + (currentOffset - offset)\n            + \" in '\" + W + \"'\";\n   }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}