{
    "generation": "    public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n        long    result = 0;\n        int     end = offset + length;\n        int     start = offset;\n\n        if (length < 2){\n            throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n        }\n\n        if (buffer[start] == 0) {\n            return 0L;\n        }\n\n        // Skip leading spaces\n        while (start < end) {\n            if (buffer[start] == ' ') {\n                start++;\n            } else {\n                break;\n            }\n        }\n\n        // Find the real end of content, trimming trailing NULs and spaces\n        int contentEnd = end;\n        while (contentEnd > start && (buffer[contentEnd-1] == 0 || buffer[contentEnd-1] == ' ')) {\n            contentEnd--;\n        }\n\n        // Now validate that there's exactly one trailing space/NUL\n        // and that there are no embedded NULs or spaces\n        boolean foundTrailing = false;\n        for (int i = start; i < end; i++) {\n            if (i >= contentEnd) {\n                if (!foundTrailing && (buffer[i] == ' ' || buffer[i] == 0)) {\n                    foundTrailing = true;\n                    continue;\n                }\n                // If we get here, we have more than one trailing space/NUL\n                // which is invalid per the specs\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, buffer[i]));\n            }\n            if (buffer[i] == 0 || buffer[i] == ' ') {\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, buffer[i]));\n            }\n        }\n\n        // If we didn't find any trailing space/NUL, the format is invalid\n        if (!foundTrailing && contentEnd > start) {\n            throw new IllegalArgumentException(\n                \"Missing trailing space/NUL in octal input\");\n        }\n\n        // Now parse the octal value\n        for (int i = start; i < contentEnd; i++) {\n            final byte currentByte = buffer[i];\n            if (currentByte < '0' || currentByte > '7') {\n                throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, i, currentByte));\n            }\n            result = (result << 3) + (currentByte - '0');\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}