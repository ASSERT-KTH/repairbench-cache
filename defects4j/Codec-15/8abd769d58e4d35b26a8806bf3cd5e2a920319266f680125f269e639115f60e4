{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     * Vowels and H, W are mapped to '0'.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        // Request the mapping for the current character.\n        final char mappedChar = this.map(str.charAt(index));\n\n        // HW rule check\n        // Check if the current character is a consonant and not the first letter.\n        if (index > 1 && mappedChar != '0') {\n            final char hwChar = str.charAt(index - 1);\n            // Check if the preceding character is H or W.\n            if ('H' == hwChar || 'W' == hwChar) {\n                // Get the character before H/W.\n                final char preHWChar = str.charAt(index - 2);\n                // Get the mapping code for the character before H/W.\n                final char firstCode = this.map(preHWChar);\n                // Check if the character before H/W is a consonant (code != '0')\n                // and has the same mapping code as the current character.\n                // If so, the current character is ignored (treated as code 0).\n                // The original code incorrectly ignored the current character\n                // if the character before H/W was also H or W (code '0').\n                if (firstCode != '0' && firstCode == mappedChar) {\n                    // Ignore code\n                    return 0;\n                }\n            }\n        }\n        // Return the mapping code (possibly 0 if vowel/H/W, or if HW rule applied).\n        return mappedChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}