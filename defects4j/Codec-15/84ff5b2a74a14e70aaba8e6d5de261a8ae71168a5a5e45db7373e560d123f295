{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\n        // Consonants from the same code group separated by W or H are treated as one.\n        // This implies: C1 [H|W] C2 where map(C1) == map(C2) => C2 is ignored (mapped to 0).\n        // The rule explicitly states \"Consonants\", meaning C1 must itself be a consonant (not H, W, or a vowel).\n        if (index > 1 && mappedChar != '0') { // Ensure current character (C2) is a mapped consonant and enough history exists\n            final char hwChar = str.charAt(index - 1); // Character at (index - 1) is the potential separator\n            if ('H' == hwChar || 'W' == hwChar) { // Check if separator is H or W\n                final char preHWChar = str.charAt(index - 2); // Character at (index - 2) is the potential previous consonant (C1)\n                final char firstCode = this.map(preHWChar); // Mapped code of C1\n\n                // Apply the rule: if C1 is a consonant (firstCode != '0') AND its code matches C2's code (mappedChar),\n                // then C2 should be treated as one with C1 (i.e., ignored).\n                // The original condition `|| 'H' == preHWChar || 'W' == preHWChar` was incorrect,\n                // as 'H' or 'W' are not consonants that form a \"code group\".\n                if (firstCode != '0' && firstCode == mappedChar) {\n                    return 0; // Return 0 to indicate this character should be ignored/skipped\n                }\n            }\n        }\n        return mappedChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}