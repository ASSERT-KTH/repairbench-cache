{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     * Vowels and H, W do not separate consonants with the same code.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        // retrieve the mapped digit for the current character\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\n        // if the current character is a consonant and it's not the first character\n        if (index > 0 && mappedChar != '0') {\n            final char prevChar = str.charAt(index - 1);\n            // Check if the previous character was H or W\n            if ('H' == prevChar || 'W' == prevChar) {\n                // If the character before H/W exists (i.e., index > 1)\n                if (index > 1) {\n                    final char preHWChar = str.charAt(index - 2);\n                    final char firstCode = this.map(preHWChar);\n                    // If the code of the char before H/W is the same as the current char's code\n                    // NARA Rule 4: \"Two letters with the same number separated by 'h' or 'w' are coded as a single number\"\n                    // This means the current character's code should be ignored (treated as 0).\n                    // The original code had an additional check \"|| 'H' == preHWChar || 'W' == preHWChar\"\n                    // which incorrectly ignored the current character if the character *before* H/W was also H/W.\n                    // This part is removed in the fix.\n                    if (firstCode == mappedChar) {\n                        return 0; // Ignore the current character's code\n                    }\n                }\n                // If index == 1, prevChar is H/W, preHWChar doesn't exist.\n                // The current consonant is the first consonant after an initial H/W.\n                // It should be coded normally. mappedChar is already correct.\n            }\n            // Note: NARA Rule 5 (\"Vowels ... Like 'h' and 'w', they do not separate consonants that have the same soundex code.\")\n            // implies that the main encoding loop should handle adjacent consonants or consonants separated by vowels having the same code.\n            // This function only needs to handle the specific H/W separation rule.\n        }\n        return mappedChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}