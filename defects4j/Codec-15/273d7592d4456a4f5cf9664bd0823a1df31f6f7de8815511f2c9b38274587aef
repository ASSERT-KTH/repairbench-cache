{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\n        if (index > 1 && mappedChar != '0') {\n            final char hwChar = str.charAt(index - 1);\n            if ('H' == hwChar || 'W' == hwChar) {\n                final char preHWChar = str.charAt(index - 2);\n                final char firstCode = this.map(preHWChar);\n                // The HW rule states that consonants from the same code group separated by W or H are treated as one.\n                // This means the current character (at 'index') should be ignored (mapped to '0')\n                // only if its mapping ('mappedChar') is the same as the mapping of the character two positions back ('firstCode'),\n                // and the character in between ('hwChar') is 'H' or 'W'.\n                // The original condition '|| 'H' == preHWChar || 'W' == preHWChar' was incorrectly causing characters to be ignored\n                // simply if the character two positions back was 'H' or 'W', regardless of its mapping.\n                if (firstCode == mappedChar) {\n                    return 0;\n                }\n            }\n        }\n        return mappedChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}