{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\n        // Consonants from the same code group separated by W or H are treated as one.\n        // This rule applies when the current character (at `index`) is C2,\n        // the character immediately preceding it (at `index - 1`) is 'H' or 'W',\n        // and the character before that (at `index - 2`, which is C1) maps to the\n        // same Soundex code as C2. In such cases, C2 should be ignored (mapped to '0').\n        // The condition `index > 1` ensures that `index - 2` is a valid string index.\n        if (index > 1 && mappedChar != '0') {\n            final char hwChar = str.charAt(index - 1);\n            if ('H' == hwChar || 'W' == hwChar) {\n                final char preHWChar = str.charAt(index - 2);\n                final char firstCode = this.map(preHWChar);\n                // The original condition `firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar`\n                // incorrectly suppressed characters if the character two positions back was 'H' or 'W' itself.\n                // The rule states that it should be a *consonant* (C1) that maps to the same\n                // code group as the current character (C2). 'H' and 'W' are typically ignored\n                // and do not belong to a 'code group' in this context; they are the separators.\n                // The fix removes the erroneous check for `preHWChar` being 'H' or 'W'.\n                if (firstCode == mappedChar) {\n                    return 0;\n                }\n            }\n        }\n        return mappedChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}