{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     * Vowels separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\n        // Index > 0 means there is a previous char.\n        // Index > 1 means there is a char before the previous char.\n        if (index > 1 && mappedChar != '0') { // Check '0' character, not integer 0\n            final char hwChar = str.charAt(index - 1);\n            if ('H' == hwChar || 'W' == hwChar) {\n                final char preHWChar = str.charAt(index - 2);\n                final char firstCode = this.map(preHWChar);\n                // Fixed condition: only check if the codes are the same\n                if (firstCode == mappedChar) {\n                    // Return 0 (integer) to signal skipping the current character.\n                    // This relies on the main soundex method handling 0 correctly (e.g., by ignoring it)\n                    return 0;\n                }\n                // According to http://www.archives.gov/research_room/genealogy/census/soundex.html\n                // RULE B: Vowels are disregarded UNLESS they separate two consonants that have the same code.\n                // H and W are disregarded UNLESS they separate two consonants that have the same code.\n                // Let's assume map() returns '0' for vowels and H/W.\n                // If the code above didn't return 0, it means the codes were different (firstCode != mappedChar)\n                // OR the preHWChar was a vowel/H/W (firstCode was '0').\n                // In either case, the current mappedChar should be returned.\n                // The original code had an additional check: || 'H' == preHWChar || 'W' == preHWChar\n                // This was incorrect, as it would return 0 if the preHWChar was H or W, even if the codes differed.\n                // For example, YHWDYT: D (index 3), hwChar='W', preHWChar='H'. map('H')=0, map('D')=3.\n                // Original check: (0 == 3 || 'H' == 'H' || 'W' == 'H') -> true -> returns 0 (incorrect)\n                // Fixed check: (0 == 3) -> false -> returns map('D')=3 (correct)\n            }\n        }\n        return mappedChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}