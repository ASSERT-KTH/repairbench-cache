{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\n        // Rule: Consonants from the same code group separated by W or H are treated as one.\n        // This implies: char_X (code C) - (H or W) - char_Y (code C)\n        // If char_Y would map to code C, it should be ignored.\n        // So, if the char at index-2 (preHWChar) maps to the same code as current char (mappedChar),\n        // AND the char at index-1 (hwChar) is 'H' or 'W', then return '0' (ignore current char).\n        if (index > 1 && mappedChar != '0') {\n            final char hwChar = str.charAt(index - 1);\n            if ('H' == hwChar || 'W' == hwChar) {\n                final char preHWChar = str.charAt(index - 2);\n                final char firstCode = this.map(preHWChar);\n                // The original condition `firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar`\n                // was incorrect. If `preHWChar` itself was 'H' or 'W', then `firstCode` would be '0'.\n                // The `|| 'H' == preHWChar || 'W' == preHWChar` part would then cause characters\n                // (e.g., 'D' in \"YHWDYT\") to be incorrectly ignored, because `preHWChar` (e.g., 'H')\n                // matches one of the conditions, even if `firstCode` (0) is not equal to `mappedChar` (3).\n                // The rule applies only if the *codes* of the characters flanking H/W are the same.\n                if (firstCode == mappedChar) {\n                    return 0; // Ignore current character based on HW rule\n                }\n            }\n        }\n        return mappedChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}