{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     * Vowels and H, W are generally ignored.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character, or 0 if the character should be skipped.\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped (though map() handles this)\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException if char is not in the map\n        // Request the mapping for the current character.\n        final char mappedChar = this.map(str.charAt(index));\n\n        // HW rule check: Consonants from the same code group separated by H or W\n        // are treated as one. Rule applies only if the current character has a\n        // mapping code (!= '0'), and there are at least two preceding characters.\n        if (index > 1 && mappedChar != '0') {\n            final char hwChar = str.charAt(index - 1);\n            // Check if the immediately preceding character is H or W.\n            if ('H' == hwChar || 'W' == hwChar) {\n                // Get the character before H/W.\n                final char preHWChar = str.charAt(index - 2);\n                // Get the code for the character before H/W.\n                final char firstCode = this.map(preHWChar);\n                // If the code before H/W is the same as the current character's code,\n                // the current character is skipped (treated as one with the char before H/W).\n                // Note: The original code included an erroneous check '|| 'H' == preHWChar || 'W' == preHWChar'\n                // which caused valid consonants after sequences like H-H or W-H to be skipped.\n                if (firstCode == mappedChar) {\n                    return 0; // Return 0 ('skip')\n                }\n            }\n        }\n        // If the HW rule check did not result in skipping the character, return its mapped code.\n        // The main loop will handle skipping based on vowels ('0' mapping) and simple adjacency (`last` variable).\n        return mappedChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}