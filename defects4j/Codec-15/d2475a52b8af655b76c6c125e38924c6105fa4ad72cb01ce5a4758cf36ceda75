{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\n        // Rule: Consonants from the same code group separated by W or H are treated as one.\n        // This means, if we have C1 (at index-2) followed by H/W (at index-1) followed by C2 (at index),\n        // and map(C1) == map(C2) (where C1 and C2 are actual consonants, not '0' mapped chars),\n        // then C2 should be ignored (mapped to '0').\n        if (index > 1 && mappedChar != '0') { // Current character (C2) must be a consonant\n            final char hwChar = str.charAt(index - 1); // This is the separator (H or W)\n            if ('H' == hwChar || 'W' == hwChar) { // Check if the separator is H or W\n                final char preHWChar = str.charAt(index - 2); // This is C1\n                final char firstCode = this.map(preHWChar); // Get mapping for C1\n\n                // Apply the rule: C1 must be a consonant (firstCode != '0')\n                // AND map(C1) must be equal to map(C2) (firstCode == mappedChar)\n                if (firstCode != '0' && firstCode == mappedChar) {\n                    return '0'; // Ignore C2 as per the rule\n                }\n            }\n        }\n        return mappedChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}