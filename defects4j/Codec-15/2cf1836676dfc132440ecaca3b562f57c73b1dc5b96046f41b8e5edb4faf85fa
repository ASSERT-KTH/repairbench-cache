{
    "generation": "    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\n        if (index > 0 && mappedChar != '0') {\n            // Check if previous character is H or W\n            if (index > 0) {\n                final char hwChar = str.charAt(index - 1);\n                if ('H' == hwChar || 'W' == hwChar) {\n                    // Get the character before the H/W if it exists\n                    if (index > 1) {\n                        final char preHWChar = str.charAt(index - 2);\n                        final char firstCode = this.map(preHWChar);\n                        if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {\n                            return 0;\n                        }\n                    }\n                    // If there's no character before H/W (index == 1), or if the above condition wasn't met,\n                    // we still need to check if the current character and the one after H/W are the same\n                    // But since we're only looking at the character before, this might need more consideration\n                }\n            }\n        }\n        return mappedChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}