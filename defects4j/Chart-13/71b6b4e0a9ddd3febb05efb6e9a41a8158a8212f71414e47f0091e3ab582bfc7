{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    double totalHeight = 0.0;\n\n    // Calculate top block\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    } else {\n        h[0] = 0.0;\n    }\n\n    // Calculate bottom block\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        double maxBottomHeight = constraint.getHeight() - h[0];\n        if (maxBottomHeight < 0) {\n            maxBottomHeight = 0;\n        }\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, maxBottomHeight),\n                LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    } else {\n        h[1] = 0.0;\n    }\n\n    // Calculate remaining height for center block and side blocks\n    h[2] = Math.max(0.0, constraint.getHeight() - h[0] - h[1]);\n\n    // Calculate left block\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    } else {\n        w[2] = 0.0;\n    }\n\n    // Calculate right block\n    h[3] = h[2];\n    w[3] = 0.0;\n    if (this.rightBlock != null) {\n        double maxRightWidth = Math.max(0.0, constraint.getWidth() - w[2]);\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n                new Range(0.0, maxRightWidth),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n\n    // Calculate center block dimensions\n    h[4] = h[2];\n    w[4] = Math.max(0.0, constraint.getWidth() - w[2] - w[3]);\n\n    // Ensure\u975e\u8d1f width for center block\n    w[4] = Math.max(0.0, w[4]);\n\n    if (w[4] < 0) {\n        w[4] = 0;\n    }\n\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    // Set bounds for all blocks\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                w[3], h[3]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                h[4]));\n    }\n\n    // Calculate total height considering all blocks\n    double totalH = h[0] + h[2] + h[1];\n\n    // If we have a height constraint, respect it; otherwise use total height\n    double resultHeight = constraint.getHeight();\n    if (Double.isNaN(resultHeight)) {\n        resultHeight = totalH;\n    }\n\n    return new Size2D(constraint.getWidth(), resultHeight);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}