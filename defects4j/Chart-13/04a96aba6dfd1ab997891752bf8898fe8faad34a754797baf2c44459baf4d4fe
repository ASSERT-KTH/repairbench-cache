{
    "generation": "    /**\n     * Arranges the items within a container.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The container size after the arrangement.\n     */\n    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        boolean heightFixed = constraint.getHeightConstraintType() == LengthConstraintType.FIXED;\n        double totalHeight = 0.0;\n\n        // Arrange the top block\n        if (this.topBlock != null) {\n            double maxTopHeight = heightFixed ? constraint.getHeight() : Double.MAX_VALUE;\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, maxTopHeight), LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n            totalHeight += h[0];\n        }\n\n        // Arrange the bottom block\n        if (this.bottomBlock != null) {\n            double maxBottomHeight = heightFixed ? (constraint.getHeight() - h[0]) : Double.MAX_VALUE;\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, new Range(0.0, maxBottomHeight),\n                    LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n            totalHeight += h[1];\n        }\n\n        double middleRowHeight = 0.0;\n        if (heightFixed) {\n            h[2] = constraint.getHeight() - h[0] - h[1];\n            middleRowHeight = h[2];\n        } else {\n            // Arrange left, right, and center blocks with natural heights\n            if (this.leftBlock != null) {\n                RectangleConstraint c3 = new RectangleConstraint(0.0,\n                        new Range(0.0, constraint.getWidth()),\n                        LengthConstraintType.RANGE, 0.0, null,\n                        LengthConstraintType.NONE);\n                Size2D size = this.leftBlock.arrange(g2, c3);\n                w[2] = size.width;\n                middleRowHeight = Math.max(middleRowHeight, size.height);\n            }\n            if (this.rightBlock != null) {\n                double availableRightWidth = constraint.getWidth() - (this.leftBlock != null ? w[2] : 0);\n                RectangleConstraint c4 = new RectangleConstraint(0.0,\n                        new Range(0.0, availableRightWidth),\n                        LengthConstraintType.RANGE, 0.0, null,\n                        LengthConstraintType.NONE);\n                Size2D size = this.rightBlock.arrange(g2, c4);\n                w[3] = size.width;\n                middleRowHeight = Math.max(middleRowHeight, size.height);\n            }\n            if (this.centerBlock != null) {\n                w[4] = constraint.getWidth() - w[3] - w[2];\n                RectangleConstraint c5 = new RectangleConstraint(w[4], 0.0,\n                        LengthConstraintType.FIXED, 0.0, null,\n                        LengthConstraintType.NONE);\n                Size2D size = this.centerBlock.arrange(g2, c5);\n                middleRowHeight = Math.max(middleRowHeight, size.height);\n            }\n            h[2] = middleRowHeight;\n            h[3] = middleRowHeight;\n            h[4] = middleRowHeight;\n            totalHeight += middleRowHeight;\n        }\n\n        double usedHeight = heightFixed ? constraint.getHeight() : totalHeight;\n\n        // Arrange middle blocks if height is fixed\n        if (heightFixed) {\n            if (this.leftBlock != null) {\n                RectangleConstraint c3 = new RectangleConstraint(0.0,\n                        new Range(0.0, constraint.getWidth()),\n                        LengthConstraintType.RANGE, h[2], null,\n                        LengthConstraintType.FIXED);\n                Size2D size = this.leftBlock.arrange(g2, c3);\n                w[2] = size.width;\n            }\n            h[3] = h[2];\n            if (this.rightBlock != null) {\n                RectangleConstraint c4 = new RectangleConstraint(0.0,\n                        new Range(0.0, constraint.getWidth() - w[2]),\n                        LengthConstraintType.RANGE, h[2], null,\n                        LengthConstraintType.FIXED);\n                Size2D size = this.rightBlock.arrange(g2, c4);\n                w[3] = size.width;\n            }\n            h[4] = h[2];\n            w[4] = constraint.getWidth() - w[3] - w[2];\n            if (this.centerBlock != null) {\n                RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n                this.centerBlock.arrange(g2, c5);\n            }\n        }\n\n        // Set the bounds for each block\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));\n        }\n        if (this.bottomBlock != null) {\n            double y = heightFixed ? h[0] + h[2] : totalHeight - h[1];\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, y, w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));\n        }\n        if (this.rightBlock != null) {\n            double x = w[2] + (heightFixed ? w[4] : (constraint.getWidth() - w[3] - w[2]));\n            this.rightBlock.setBounds(new Rectangle2D.Double(x, h[0], w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));\n        }\n\n        return new Size2D(constraint.getWidth(), usedHeight);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}