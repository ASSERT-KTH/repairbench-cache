{
    "generation": "    /**\n     * Arranges the items within a container assuming a fixed width and height.\n     * This method is intended for use when the constraint type is FIXED for\n     * both width and height. It includes clamping to handle potential\n     * negative intermediate values.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint (assumed Fixed/Fixed).\n     * @param g2  the graphics device.\n     *\n     * @return The container size after the arrangement. Returns the fixed\n     *         width from the constraint and the calculated total height based\n     *         on arranged blocks.\n     */\n    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth(); // Fixed width from constraint\n\n        // Arrange top block\n        if (this.topBlock != null) {\n            // Constraint for top block: Fixed width, Ranged height (up to constraint height)\n            // Clamp upper bound of range to be at least 0.0\n            Range heightRange = new Range(0.0, Math.max(0.0, constraint.getHeight()));\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, heightRange,\n                    LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n\n        w[1] = w[0]; // Bottom block has same fixed width\n\n        // Arrange bottom block\n        if (this.bottomBlock != null) {\n            // Calculate available height, ensuring non-negative\n            double h_avail_for_bottom = Math.max(0.0, constraint.getHeight() - h[0]);\n            // Constraint for bottom block: Fixed width, Ranged height (up to available)\n            Range heightRange = new Range(0.0, h_avail_for_bottom);\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, heightRange,\n                    LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n\n        // Calculate height for the middle row (left, center, right)\n        // Ensure non-negative height\n        h[2] = Math.max(0.0, constraint.getHeight() - h[1] - h[0]);\n\n        // Arrange left block\n        if (this.leftBlock != null) {\n            // Constraint for left block: Ranged width (up to constraint width), Fixed height (h[2])\n            // Clamp upper bound of width range to be at least 0.0\n             Range widthRange = new Range(0.0, Math.max(0.0, constraint.getWidth()));\n            RectangleConstraint c3 = new RectangleConstraint(0.0, widthRange,\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n\n        h[3] = h[2]; // Right block has same height as middle row\n\n        // Arrange right block\n        if (this.rightBlock != null) {\n            // Calculate available width, ensuring non-negative\n            double w_avail_for_right = Math.max(0.0, constraint.getWidth() - w[2]);\n            // Constraint for right block: Ranged width (up to available), Fixed height (h[2])\n             Range widthRange = new Range(0.0, w_avail_for_right);\n            RectangleConstraint c4 = new RectangleConstraint(0.0, widthRange,\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n\n        h[4] = h[2]; // Center block has same height as middle row\n\n        // Calculate width for center block, ensuring non-negative\n        w[4] = Math.max(0.0, constraint.getWidth() - w[3] - w[2]);\n\n        // Constraint for center block: Fixed width (w[4]), Fixed height (h[4])\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n\n        // Arrange center block\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n            // In FF mode, the center block must fit the calculated space.\n            // We don't update w[4] or h[4] from its arranged size.\n        }\n\n        // --- Set Bounds ---\n        // Use calculated dimensions, ensuring non-negative coordinates and sizes.\n        // Note: w[], h[] themselves might not be negative due to arrange() returning\n        // non-negative sizes, but intermediate calculations for position/available\n        // space need clamping (which was done above).\n\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            // y-position depends on top height and middle row height\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                    w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n             // y-position depends on top height\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n             // x-position depends on left and center widths; y-position on top height\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                    w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n             // x-position depends on left width; y-position on top height\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                    h[4]));\n        }\n\n        // Calculate final size. Width is fixed by constraint.\n        // Height is sum of calculated row heights.\n        double actualTotalHeight = h[0] + h[2] + h[1];\n        return new Size2D(constraint.getWidth(), actualTotalHeight);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}