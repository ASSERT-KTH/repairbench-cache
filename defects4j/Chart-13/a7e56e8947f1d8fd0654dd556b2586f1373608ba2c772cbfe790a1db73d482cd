{
    "generation": "/**\n * Arranges the items within a container when the width is fixed.\n * If the height constraint is NONE (unbounded), we compute the\n * total height dynamically (top\u2010middle\u2010bottom). Otherwise we\n * fall back to the original fixed\u2010height algorithm.\n *\n * @param container   the container.\n * @param g2          the graphics device.\n * @param constraint  the constraint.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n\n    // --- if height is unconstrained, do a \"fixed\u2010width / free\u2010height\" layout ---\n    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {\n        final double totalWidth = constraint.getWidth();\n\n        // 1) top block\n        double topH = 0.0;\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(\n                totalWidth, null, LengthConstraintType.FIXED,\n                0.0,       null, LengthConstraintType.NONE\n            );\n            Size2D size1 = this.topBlock.arrange(g2, c1);\n            topH = size1.height;\n        }\n\n        // 2) bottom block\n        double bottomH = 0.0;\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(\n                totalWidth, null, LengthConstraintType.FIXED,\n                0.0,       null, LengthConstraintType.NONE\n            );\n            Size2D size2 = this.bottomBlock.arrange(g2, c2);\n            bottomH = size2.height;\n        }\n\n        // 3) left block\n        double leftW = 0.0;\n        Size2D leftSize = null;\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(\n                0.0,                        new Range(0.0, totalWidth),\n                LengthConstraintType.RANGE, 0.0,\n                null,                       LengthConstraintType.NONE\n            );\n            leftSize = this.leftBlock.arrange(g2, c3);\n            leftW = leftSize.width;\n        }\n\n        // 4) right block\n        double rightW = 0.0;\n        Size2D rightSize = null;\n        if (this.rightBlock != null) {\n            double availW = totalWidth - leftW;\n            if (availW < 0.0) {\n                availW = 0.0;\n            }\n            RectangleConstraint c4 = new RectangleConstraint(\n                0.0,                         new Range(0.0, availW),\n                LengthConstraintType.RANGE,  0.0,\n                null,                        LengthConstraintType.NONE\n            );\n            rightSize = this.rightBlock.arrange(g2, c4);\n            rightW = rightSize.width;\n        }\n\n        // 5) center block\n        double centerW = totalWidth - leftW - rightW;\n        if (centerW < 0.0) {\n            centerW = 0.0;\n        }\n        double centerH = 0.0;\n        if (this.centerBlock != null) {\n            RectangleConstraint c5 = new RectangleConstraint(\n                centerW, null, LengthConstraintType.FIXED,\n                0.0,     null, LengthConstraintType.NONE\n            );\n            Size2D size5 = this.centerBlock.arrange(g2, c5);\n            centerH = size5.height;\n        }\n\n        // compute the height of the \"middle row\"\n        double midH = 0.0;\n        if (leftSize   != null) midH = Math.max(midH, leftSize.height);\n        if (rightSize  != null) midH = Math.max(midH, rightSize.height);\n                               midH = Math.max(midH, centerH);\n\n        // now set the bounds\n        double y = 0.0;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(\n                new Rectangle2D.Double(0.0,     y,\n                                       totalWidth, topH)\n            );\n        }\n        y += topH;\n\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(\n                new Rectangle2D.Double(0.0,        y,\n                                       leftW,      midH)\n            );\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(\n                new Rectangle2D.Double(leftW,      y,\n                                       centerW,    midH)\n            );\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(\n                new Rectangle2D.Double(leftW + centerW, y,\n                                       rightW,           midH)\n            );\n        }\n\n        y += midH;\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(\n                new Rectangle2D.Double(0.0,        y,\n                                       totalWidth, bottomH)\n            );\n        }\n\n        // return the actual used size\n        return new Size2D(totalWidth, topH + midH + bottomH);\n    }\n\n    // --- else height is constrained (FIXED or RANGE): use the original code ---\n\n    double[] w = new double[5];\n    double[] h = new double[5];\n\n    // full\u2010width for top\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(\n            w[0],   null, LengthConstraintType.FIXED,\n            0.0, new Range(0.0, constraint.getHeight()),\n                 LengthConstraintType.RANGE\n        );\n        Size2D s1 = this.topBlock.arrange(g2, c1);\n        h[0] = s1.height;\n    }\n\n    // full\u2010width for bottom\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(\n            w[0],   null, LengthConstraintType.FIXED,\n            0.0, new Range(0.0, constraint.getHeight() - h[0]),\n                 LengthConstraintType.RANGE\n        );\n        Size2D s2 = this.bottomBlock.arrange(g2, c2);\n        h[1] = s2.height;\n    }\n\n    // middle\u2010height region\n    h[2] = constraint.getHeight() - h[0] - h[1];\n\n    // left in middle\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(\n            0.0, new Range(0.0, constraint.getWidth()),\n            LengthConstraintType.RANGE,\n            h[2], null, LengthConstraintType.FIXED\n        );\n        Size2D s3 = this.leftBlock.arrange(g2, c3);\n        w[2] = s3.width;\n    }\n    h[3] = h[2];\n\n    // right in middle\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(\n            0.0,\n            new Range(0.0, constraint.getWidth() - w[2]),\n            LengthConstraintType.RANGE,\n            h[2], null, LengthConstraintType.FIXED\n        );\n        Size2D s4 = this.rightBlock.arrange(g2, c4);\n        w[3] = s4.width;\n    }\n\n    // center in middle\n    h[4] = h[2];\n    w[4] = constraint.getWidth() - w[2] - w[3];\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    // set bounds (top, bottom, left, right, center)\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(\n            new Rectangle2D.Double(0.0, 0.0, w[0], h[0])\n        );\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(\n            new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])\n        );\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(\n            new Rectangle2D.Double(0.0, h[0], w[2], h[2])\n        );\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(\n            new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])\n        );\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(\n            new Rectangle2D.Double(w[2], h[0], w[4], h[4])\n        );\n    }\n\n    return new Size2D(constraint.getWidth(), constraint.getHeight());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}