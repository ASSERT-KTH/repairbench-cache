{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n\n    // the total available width and height\n    double totalW = constraint.getWidth();\n    double totalH = constraint.getHeight();\n\n    // ---- top ----\n    w[0] = totalW;\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(\n            w[0], null,\n            LengthConstraintType.FIXED,\n            0.0, new Range(0.0, totalH),\n            LengthConstraintType.RANGE\n        );\n        Size2D size1 = this.topBlock.arrange(g2, c1);\n        h[0] = size1.height;\n    }\n\n    // ---- bottom ----\n    w[1] = totalW;\n    if (this.bottomBlock != null) {\n        // guard against negative range\n        double availH = totalH - h[0];\n        if (availH < 0.0) {\n            availH = 0.0;\n        }\n        RectangleConstraint c2 = new RectangleConstraint(\n            w[1], null,\n            LengthConstraintType.FIXED,\n            0.0, new Range(0.0, availH),\n            LengthConstraintType.RANGE\n        );\n        Size2D size2 = this.bottomBlock.arrange(g2, c2);\n        h[1] = size2.height;\n    }\n\n    // ---- middle region height ----\n    h[2] = totalH - h[0] - h[1];\n    if (h[2] < 0.0) {\n        h[2] = 0.0;\n    }\n\n    // ---- left ----\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(\n            0.0, new Range(0.0, totalW),\n            LengthConstraintType.RANGE,\n            h[2], null,\n            LengthConstraintType.FIXED\n        );\n        Size2D size3 = this.leftBlock.arrange(g2, c3);\n        w[2] = size3.width;\n    }\n\n    // ---- right ----\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        double maxW = totalW - w[2];\n        if (maxW < 0.0) {\n            maxW = 0.0;\n        }\n        RectangleConstraint c4 = new RectangleConstraint(\n            0.0, new Range(0.0, maxW),\n            LengthConstraintType.RANGE,\n            h[2], null,\n            LengthConstraintType.FIXED\n        );\n        Size2D size4 = this.rightBlock.arrange(g2, c4);\n        w[3] = size4.width;\n    }\n\n    // ---- center ----\n    h[4] = h[2];\n    w[4] = totalW - w[2] - w[3];\n    if (w[4] < 0.0) {\n        w[4] = 0.0;\n    }\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    // ---- set bounds ----\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(\n            0.0, 0.0, w[0], h[0]\n        ));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(\n            0.0, h[0] + h[2], w[1], h[1]\n        ));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(\n            0.0, h[0], w[2], h[2]\n        ));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(\n            w[2] + w[4], h[0], w[3], h[3]\n        ));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(\n            w[2], h[0], w[4], h[4]\n        ));\n    }\n\n    // for a fixed\u2010width/fixed\u2010height arrangement we return exactly\n    // the constraint values (height clamped above prevents negatives)\n    return new Size2D(totalW, totalH);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}