{
    "generation": "/**\n * Arranges the items within a container.\n *\n * In the case where the height constraint is NONE (i.e. an unconstrained height),\n * the overall height is computed as the sum of the top block height, the maximum \u201cmiddle\u201d\n * height (from the left, center and right blocks) and the bottom block height.\n *\n * Otherwise (when the height is fixed or given as a range) we mimic the original code,\n * with defensive clamping to avoid creating a Range with a negative upper bound.\n *\n * @param container  the container.\n * @param g2  the graphics device.\n * @param constraint  the constraint.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    // If the vertical constraint is NONE, calculate the height from the blocks\u2019 preferred sizes.\n    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {\n        double topHeight = 0.0;\n        double bottomHeight = 0.0;\n        if (this.topBlock != null) {\n            RectangleConstraint topConstraint = new RectangleConstraint(\n                constraint.getWidth(), null, LengthConstraintType.FIXED,\n                0.0, null, LengthConstraintType.NONE\n            );\n            Size2D s = this.topBlock.arrange(g2, topConstraint);\n            topHeight = s.getHeight();\n        }\n        if (this.bottomBlock != null) {\n            RectangleConstraint bottomConstraint = new RectangleConstraint(\n                constraint.getWidth(), null, LengthConstraintType.FIXED,\n                0.0, null, LengthConstraintType.NONE\n            );\n            Size2D s = this.bottomBlock.arrange(g2, bottomConstraint);\n            bottomHeight = s.getHeight();\n        }\n\n        // Arrange the \"middle\" blocks (left, center and right) without a vertical constraint.\n        double leftWidth = 0.0;\n        double rightWidth = 0.0;\n        double middleHeight = 0.0; // will be the max height among left/center/right\n        if (this.leftBlock != null) {\n            RectangleConstraint leftConstraint = new RectangleConstraint(\n                new Range(0.0, constraint.getWidth()), null, LengthConstraintType.RANGE,\n                0.0, null, LengthConstraintType.NONE\n            );\n            Size2D s = this.leftBlock.arrange(g2, leftConstraint);\n            leftWidth = s.getWidth();\n            middleHeight = Math.max(middleHeight, s.getHeight());\n        }\n        if (this.rightBlock != null) {\n            double availableForRight = Math.max(constraint.getWidth() - leftWidth, 0.0);\n            RectangleConstraint rightConstraint = new RectangleConstraint(\n                new Range(0.0, availableForRight), null, LengthConstraintType.RANGE,\n                0.0, null, LengthConstraintType.NONE\n            );\n            Size2D s = this.rightBlock.arrange(g2, rightConstraint);\n            rightWidth = s.getWidth();\n            middleHeight = Math.max(middleHeight, s.getHeight());\n        }\n        if (this.centerBlock != null) {\n            double centerWidth = Math.max(constraint.getWidth() - leftWidth - rightWidth, 0.0);\n            RectangleConstraint centerConstraint = new RectangleConstraint(\n                centerWidth, null, LengthConstraintType.FIXED,\n                0.0, null, LengthConstraintType.NONE\n            );\n            Size2D s = this.centerBlock.arrange(g2, centerConstraint);\n            middleHeight = Math.max(middleHeight, s.getHeight());\n        }\n        \n        // Position the blocks.\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0,\n                constraint.getWidth(), topHeight));\n        }\n        // The three middle blocks share the same vertical space.\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight,\n                leftWidth, middleHeight));\n        }\n        if (this.centerBlock != null) {\n            double centerWidth = Math.max(constraint.getWidth() - leftWidth - rightWidth, 0.0);\n            this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, topHeight,\n                centerWidth, middleHeight));\n        }\n        if (this.rightBlock != null) {\n            // When a right block is present along with a center block, it is positioned immediately to the right of center.\n            // But if there\u2019s no center block, we align it flush with the right edge.\n            double centerWidth = (this.centerBlock != null) \n                    ? Math.max(constraint.getWidth() - leftWidth - rightWidth, 0.0)\n                    : 0.0;\n            this.rightBlock.setBounds(new Rectangle2D.Double(leftWidth + centerWidth, topHeight,\n                rightWidth, middleHeight));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topHeight + middleHeight,\n                constraint.getWidth(), bottomHeight));\n        }\n        \n        return new Size2D(constraint.getWidth(), topHeight + middleHeight + bottomHeight);\n    }\n    else { \n        // Otherwise (with a fixed or ranged height), follow the original layout (with slight clamping to avoid negatives).\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(\n                w[0], null, LengthConstraintType.FIXED,\n                0.0, new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE\n            );\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.getHeight();\n        } else {\n            h[0] = 0.0;\n        }\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(\n                w[0], null, LengthConstraintType.FIXED,\n                0.0, new Range(0.0, Math.max(constraint.getHeight() - h[0], 0.0)), LengthConstraintType.RANGE\n            );\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.getHeight();\n        } else {\n            h[1] = 0.0;\n        }\n        h[2] = Math.max(constraint.getHeight() - h[1] - h[0], 0.0);\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(\n                0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE,\n                h[2], null, LengthConstraintType.FIXED\n            );\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.getWidth();\n        } else {\n            w[2] = 0.0;\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(\n                0.0, new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),\n                LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED\n            );\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.getWidth();\n        } else {\n            w[3] = 0.0;\n        }\n        h[4] = h[2];\n        w[4] = Math.max(constraint.getWidth() - w[3] - w[2], 0.0);\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n    \n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));\n        }\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}