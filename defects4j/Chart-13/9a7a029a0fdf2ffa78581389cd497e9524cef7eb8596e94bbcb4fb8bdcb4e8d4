{
    "generation": "/**\n * Arranges the items within a container.\n *\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    h[0] = 0.0;\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                (constraint.getHeight() >= 0.0\n                        ? new Range(0.0, constraint.getHeight()) : new Range(0.0, 0.0)),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    h[1] = 0.0;\n    double bottomMaxHeight = Math.max(0.0, constraint.getHeight() - h[0]);\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, \n                new Range(0.0, bottomMaxHeight), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = Math.max(0.0, constraint.getHeight() - h[1] - h[0]);\n    w[2] = 0.0;\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, w[0]),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = Math.min(size.width, w[0]);\n    }\n    h[3] = h[2];\n    w[3] = 0.0;\n    double rightMaxWidth = Math.max(0.0, w[0] - w[2]);\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n                new Range(0.0, rightMaxWidth),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = Math.min(size.width, rightMaxWidth);\n    }\n    h[4] = h[2];\n    w[4] = Math.max(0.0, w[0] - w[3] - w[2]);\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                w[3], h[3]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                h[4]));\n    }\n    // Calculate total height\n    double totalHeight = h[0] + h[2] + h[1];\n\n    // If top, bottom and center blocks are present, center (h[2]) may already incorporate center/left/right\n    // If only top or only bottom, h[2] is the remaining space\n    // If only left, right, center: h[0] = h[1] = 0, so totalHeight = h[2]\n\n    // If no items: totalHeight = 0\n\n    // When only one block is present, set totalHeight accordingly\n    if (this.topBlock == null && this.bottomBlock == null && this.leftBlock == null\n            && this.rightBlock == null && this.centerBlock == null) {\n        totalHeight = 0.0;\n    }\n\n    // If just one block, ensure height equals its height\n    if (this.topBlock != null && this.bottomBlock == null && this.leftBlock == null\n            && this.rightBlock == null && this.centerBlock == null) {\n        totalHeight = h[0];\n    }\n    if (this.bottomBlock != null && this.topBlock == null && this.leftBlock == null\n            && this.rightBlock == null && this.centerBlock == null) {\n        totalHeight = h[1];\n    }\n    if (this.leftBlock != null && this.topBlock == null && this.bottomBlock == null\n            && this.rightBlock == null && this.centerBlock == null) {\n        totalHeight = h[3]; // = h[2]\n    }\n    if (this.rightBlock != null && this.topBlock == null && this.bottomBlock == null\n            && this.leftBlock == null && this.centerBlock == null) {\n        totalHeight = h[3]; // = h[2]\n    }\n    if (this.centerBlock != null && this.topBlock == null && this.bottomBlock == null\n            && this.leftBlock == null && this.rightBlock == null) {\n        totalHeight = h[4]; // = h[2]\n    }\n\n    return new Size2D(constraint.getWidth(), totalHeight);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}