{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    // If the height is not fixed, use an additive layout.\n    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {\n        double width = constraint.getWidth();\n        \n        // Arrange the top block using the full fixed width and no height restriction.\n        double topHeight = 0.0;\n        if (this.topBlock != null) {\n            RectangleConstraint topConstraint = new RectangleConstraint(width, null);\n            Size2D topSize = this.topBlock.arrange(g2, topConstraint);\n            topHeight = topSize.height;\n        }\n        \n        // Arrange the bottom block similarly.\n        double bottomHeight = 0.0;\n        if (this.bottomBlock != null) {\n            RectangleConstraint bottomConstraint = new RectangleConstraint(width, null);\n            Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);\n            bottomHeight = bottomSize.height;\n        }\n        \n        // Arrange the left block: give it a width range from 0 to the overall width.\n        double leftWidth = 0.0;\n        double leftHeight = 0.0;\n        if (this.leftBlock != null) {\n            RectangleConstraint leftConstraint = new RectangleConstraint(new Range(0.0, width));\n            Size2D leftSize = this.leftBlock.arrange(g2, leftConstraint);\n            leftWidth = leftSize.width;\n            leftHeight = leftSize.height;\n        }\n        \n        // Arrange the right block: its maximum allowable width is (width - leftWidth).\n        double rightWidth = 0.0;\n        double rightHeight = 0.0;\n        if (this.rightBlock != null) {\n            double availableForRight = Math.max(width - leftWidth, 0.0);\n            RectangleConstraint rightConstraint = new RectangleConstraint(new Range(0.0, availableForRight));\n            Size2D rightSize = this.rightBlock.arrange(g2, rightConstraint);\n            rightWidth = rightSize.width;\n            rightHeight = rightSize.height;\n        }\n        \n        // The center block gets the remaining width.\n        double centerWidth = Math.max(width - leftWidth - rightWidth, 0.0);\n        double centerHeight = 0.0;\n        if (this.centerBlock != null) {\n            RectangleConstraint centerConstraint = new RectangleConstraint(centerWidth, null);\n            Size2D centerSize = this.centerBlock.arrange(g2, centerConstraint);\n            centerHeight = centerSize.height;\n        }\n        \n        // The height for the middle region (where left, center, and right are placed)\n        // is the maximum of the individual block heights.\n        double middleHeight = Math.max(Math.max(leftHeight, rightHeight), centerHeight);\n        double totalHeight = topHeight + middleHeight + bottomHeight;\n        \n        // Now set the bounds for each block.\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width, topHeight));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight, leftWidth, middleHeight));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, topHeight, centerWidth, middleHeight));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(leftWidth + centerWidth, topHeight, rightWidth, middleHeight));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topHeight + middleHeight, width, bottomHeight));\n        }\n        \n        return new Size2D(width, totalHeight);\n    }\n    else {\n        // Otherwise, use the fixed height algorithm.\n        double[] w = new double[5];\n        double[] h = new double[5];\n        double width = constraint.getWidth();\n        w[0] = width;\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(width, null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight()),\n                    LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n        w[1] = width;\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(width, null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight() - h[0]),\n                    LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n        h[2] = constraint.getHeight() - h[1] - h[0];\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, width),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, width - w[2]),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n        h[4] = h[2];\n        w[4] = width - w[3] - w[2];\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));\n        }\n        return new Size2D(width, constraint.getHeight());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}