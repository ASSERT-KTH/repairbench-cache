{
    "generation": "/**\n * Arranges the items within a container for the case where the width is\n * fixed and the height is free.\n *\n * @param container   the container.\n * @param g2          the graphics device.\n * @param constraint  the constraint (fixed width, free height).\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n\n    // total available width is fixed\n    double totalW = constraint.getWidth();\n\n    // 1) arrange top block (fixed width, free height)\n    double topH = 0.0;\n    if (this.topBlock != null) {\n        RectangleConstraint cTop = new RectangleConstraint(\n                totalW, null, LengthConstraintType.FIXED,\n                0.0,  null, LengthConstraintType.NONE\n        );\n        Size2D topSize = this.topBlock.arrange(g2, cTop);\n        topH = topSize.height;\n    }\n\n    // 2) arrange bottom block (fixed width, free height)\n    double bottomH = 0.0;\n    if (this.bottomBlock != null) {\n        RectangleConstraint cBottom = new RectangleConstraint(\n                totalW, null, LengthConstraintType.FIXED,\n                0.0,  null, LengthConstraintType.NONE\n        );\n        Size2D botSize = this.bottomBlock.arrange(g2, cBottom);\n        bottomH = botSize.height;\n    }\n\n    // 3) arrange left block (free width, free height)\n    double leftW = 0.0;\n    double leftH = 0.0;\n    if (this.leftBlock != null) {\n        RectangleConstraint cLeft = new RectangleConstraint(\n                0.0,  null, LengthConstraintType.NONE,\n                0.0,  null, LengthConstraintType.NONE\n        );\n        Size2D leftSize = this.leftBlock.arrange(g2, cLeft);\n        leftW = leftSize.width;\n        leftH = leftSize.height;\n    }\n\n    // 4) arrange right block (free width, free height)\n    double rightW = 0.0;\n    double rightH = 0.0;\n    if (this.rightBlock != null) {\n        RectangleConstraint cRight = new RectangleConstraint(\n                0.0,  null, LengthConstraintType.NONE,\n                0.0,  null, LengthConstraintType.NONE\n        );\n        Size2D rightSize = this.rightBlock.arrange(g2, cRight);\n        rightW = rightSize.width;\n        rightH = rightSize.height;\n    }\n\n    // 5) determine center width (fill remaining space)\n    double centerW = totalW - leftW - rightW;\n    if (centerW < 0.0) {\n        centerW = 0.0;\n    }\n\n    // 6) arrange center block (fixed width, free height)\n    double centerH = 0.0;\n    if (this.centerBlock != null) {\n        RectangleConstraint cCenter = new RectangleConstraint(\n                centerW, null, LengthConstraintType.FIXED,\n                0.0,     null, LengthConstraintType.NONE\n        );\n        Size2D cenSize = this.centerBlock.arrange(g2, cCenter);\n        centerH = cenSize.height;\n    }\n\n    // 7) the middle\u2010row height is the max of left/center/right heights\n    double middleH = Math.max(centerH, Math.max(leftH, rightH));\n\n    // set the bounds for each block\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(\n                new Rectangle2D.Double(0.0, 0.0, totalW, topH)\n        );\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(\n                new Rectangle2D.Double(0.0, topH, leftW, middleH)\n        );\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(\n                new Rectangle2D.Double(leftW, topH, centerW, middleH)\n        );\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(\n                new Rectangle2D.Double(leftW + centerW, topH, rightW, middleH)\n        );\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(\n                new Rectangle2D.Double(0.0, topH + middleH, totalW, bottomH)\n        );\n    }\n\n    // total height is sum of top, middle and bottom\n    double totalH = topH + middleH + bottomH;\n    return new Size2D(totalW, totalH);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}