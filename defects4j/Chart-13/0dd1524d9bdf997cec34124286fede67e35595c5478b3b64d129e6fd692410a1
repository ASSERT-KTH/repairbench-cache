{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    // If the vertical constraint is NONE then we compute the overall height\n    // from the preferred sizes of the blocks rather than subtracting from a fixed height.\n    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {\n        double fixedWidth = constraint.getWidth();\n        double topHeight = 0.0;\n        if (this.topBlock != null) {\n            RectangleConstraint topConstraint = new RectangleConstraint(\n                    fixedWidth, null, LengthConstraintType.FIXED);\n            Size2D topSize = this.topBlock.arrange(g2, topConstraint);\n            topHeight = topSize.getHeight();\n        }\n        double bottomHeight = 0.0;\n        if (this.bottomBlock != null) {\n            RectangleConstraint bottomConstraint = new RectangleConstraint(\n                    fixedWidth, null, LengthConstraintType.FIXED);\n            Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);\n            bottomHeight = bottomSize.getHeight();\n        }\n        \n        // For the centre area we need to arrange the left, right, and center blocks.\n        // We first get the preferred widths for the side blocks.\n        double leftWidth = 0.0;\n        Size2D leftSize = null;\n        if (this.leftBlock != null) {\n            // Arrange with no width/height constraints to obtain its natural size\n            leftSize = this.leftBlock.arrange(g2, RectangleConstraint.none());\n            leftWidth = leftSize.getWidth();\n        }\n        double rightWidth = 0.0;\n        Size2D rightSize = null;\n        if (this.rightBlock != null) {\n            rightSize = this.rightBlock.arrange(g2, RectangleConstraint.none());\n            rightWidth = rightSize.getWidth();\n        }\n        \n        // The remaining width is for the center block.\n        double centerWidth = fixedWidth - leftWidth - rightWidth;\n        if (centerWidth < 0) {\n            centerWidth = 0;\n        }\n        Size2D centerSize = null;\n        if (this.centerBlock != null) {\n            RectangleConstraint centerConstraint = new RectangleConstraint(\n                    centerWidth, null, LengthConstraintType.FIXED);\n            centerSize = this.centerBlock.arrange(g2, centerConstraint);\n        }\n        \n        // The height for the middle area is the maximum of the heights returned\n        // by the left, right and center blocks.\n        double middleHeight = 0.0;\n        if (centerSize != null) {\n            middleHeight = Math.max(middleHeight, centerSize.getHeight());\n        }\n        if (leftSize != null) {\n            middleHeight = Math.max(middleHeight, leftSize.getHeight());\n        }\n        if (rightSize != null) {\n            middleHeight = Math.max(middleHeight, rightSize.getHeight());\n        }\n        \n        double totalHeight = topHeight + middleHeight + bottomHeight;\n        \n        // Set block bounds.\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, fixedWidth,\n                    topHeight));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,\n                    topHeight + middleHeight, fixedWidth, bottomHeight));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight,\n                    leftWidth, middleHeight));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(fixedWidth - rightWidth,\n                    topHeight, rightWidth, middleHeight));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, topHeight,\n                    centerWidth, middleHeight));\n        }\n        return new Size2D(fixedWidth, totalHeight);\n    }\n    else {\n        // When the height is fixed (or a range) we use the fixed-height algorithm.\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.getHeight();\n        }\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n            double availableHeightForBottom = Math.max(constraint.getHeight() - h[0], 0.0);\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, availableHeightForBottom), LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.getHeight();\n        }\n        h[2] = constraint.getHeight() - h[0] - h[1];\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth()),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.getWidth();\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth() - w[2]),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.getWidth();\n        }\n        h[4] = h[2];\n        w[4] = constraint.getWidth() - w[2] - w[3];\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                    w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                    w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                    h[4]));\n        }\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}