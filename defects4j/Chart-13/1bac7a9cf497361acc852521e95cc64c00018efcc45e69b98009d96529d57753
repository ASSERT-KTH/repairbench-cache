{
    "generation": "/**\n * Arranges the items within a container.\n *\n * Note: This version distinguishes between a fixed\u2010height constraint and a free (NONE)\n * height constraint. In the free\u2010height case the overall height is computed from the blocks\u2019 preferred sizes.\n *\n * @param container  the container.\n * @param g2  the graphics device.\n * @param constraint  the constraint.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    // When the height is fixed we \u201cforce\u201d the blocks into that height.\n    if (constraint.getHeightConstraintType() == LengthConstraintType.FIXED) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(\n                w[0], null, LengthConstraintType.FIXED,\n                0.0, new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE\n            );\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        } else {\n            h[0] = 0.0;\n        }\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n            double availForBottom = Math.max(0.0, constraint.getHeight() - h[0]);\n            RectangleConstraint c2 = new RectangleConstraint(\n                w[0], null, LengthConstraintType.FIXED,\n                0.0, new Range(0.0, availForBottom),\n                LengthConstraintType.RANGE\n            );\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        } else {\n            h[1] = 0.0;\n        }\n        // Middle area height is whatever space remains (or 0 if negative)\n        h[2] = Math.max(0.0, constraint.getHeight() - h[0] - h[1]);\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(\n                0.0, new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2],\n                null, LengthConstraintType.FIXED\n            );\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        } else {\n            w[2] = 0.0;\n        }\n        if (this.rightBlock != null) {\n            double availForRight = Math.max(0.0, constraint.getWidth() - w[2]);\n            RectangleConstraint c4 = new RectangleConstraint(\n                0.0, new Range(0.0, availForRight),\n                LengthConstraintType.RANGE, h[2],\n                null, LengthConstraintType.FIXED\n            );\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        } else {\n            w[3] = 0.0;\n        }\n        w[4] = Math.max(0.0, constraint.getWidth() - w[2] - w[3]);\n        h[4] = h[2];\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[2]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));\n        }\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    } \n    // Free (NONE) height constraint: compute the natural height from the blocks.\n    else {\n        double availableWidth = constraint.getWidth();\n        double topHeight = 0.0;\n        if (this.topBlock != null) {\n            // Allow the top block to determine its natural height.\n            RectangleConstraint topConstraint = new RectangleConstraint(\n                availableWidth, null, LengthConstraintType.FIXED,\n                0.0, new Range(0.0, Double.POSITIVE_INFINITY),\n                LengthConstraintType.RANGE\n            );\n            Size2D size = this.topBlock.arrange(g2, topConstraint);\n            topHeight = size.height;\n        }\n        double bottomHeight = 0.0;\n        if (this.bottomBlock != null) {\n            RectangleConstraint bottomConstraint = new RectangleConstraint(\n                availableWidth, null, LengthConstraintType.FIXED,\n                0.0, new Range(0.0, Double.POSITIVE_INFINITY),\n                LengthConstraintType.RANGE\n            );\n            Size2D size = this.bottomBlock.arrange(g2, bottomConstraint);\n            bottomHeight = size.height;\n        }\n        // Get natural sizes (with no constraint) for the left, right and center blocks.\n        Size2D leftSize = (this.leftBlock != null) ? this.leftBlock.arrange(g2, RectangleConstraint.NONE)\n                                                  : new Size2D(0.0, 0.0);\n        Size2D rightSize = (this.rightBlock != null) ? this.rightBlock.arrange(g2, RectangleConstraint.NONE)\n                                                    : new Size2D(0.0, 0.0);\n        Size2D centerSize = (this.centerBlock != null) ? this.centerBlock.arrange(g2, RectangleConstraint.NONE)\n                                                      : new Size2D(0.0, 0.0);\n        // The middle area's height is the maximum of the left, right and center block heights.\n        double middleHeight = Math.max(centerSize.height, Math.max(leftSize.height, rightSize.height));\n        double centerWidth = availableWidth - leftSize.width - rightSize.width;\n        if (centerWidth < 0.0) {\n            centerWidth = 0.0;\n        }\n        if (this.centerBlock != null) {\n            // Re-arrange the center block to fit the available width and the determined middle height.\n            RectangleConstraint centerConstraint = new RectangleConstraint(centerWidth, middleHeight);\n            this.centerBlock.arrange(g2, centerConstraint);\n        }\n        // Set the bounds of each block.\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, availableWidth, topHeight));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topHeight + middleHeight, availableWidth, bottomHeight));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight, leftSize.width, middleHeight));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(availableWidth - rightSize.width, topHeight, rightSize.width, middleHeight));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(leftSize.width, topHeight, centerWidth, middleHeight));\n        }\n        double totalHeight = topHeight + middleHeight + bottomHeight;\n        return new Size2D(availableWidth, totalHeight);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}