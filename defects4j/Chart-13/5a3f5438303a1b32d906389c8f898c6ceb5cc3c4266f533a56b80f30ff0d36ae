{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    // If the height is not fixed (i.e. unconstrained), compute the overall height\n    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {\n        // Arrange the top block with the fixed width and an unbounded height.\n        double topHeight = 0.0;\n        if (this.topBlock != null) {\n            RectangleConstraint topConstraint = new RectangleConstraint(\n                    constraint.getWidth(), null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, Double.POSITIVE_INFINITY),\n                    LengthConstraintType.RANGE\n            );\n            Size2D topSize = this.topBlock.arrange(g2, topConstraint);\n            topHeight = topSize.height;\n        }\n\n        // Arrange the bottom block similarly.\n        double bottomHeight = 0.0;\n        if (this.bottomBlock != null) {\n            RectangleConstraint bottomConstraint = new RectangleConstraint(\n                    constraint.getWidth(), null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, Double.POSITIVE_INFINITY),\n                    LengthConstraintType.RANGE\n            );\n            Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);\n            bottomHeight = bottomSize.height;\n        }\n\n        // Arrange the left and right blocks with no constraints.\n        double leftWidth = 0.0;\n        double leftHeight = 0.0;\n        if (this.leftBlock != null) {\n            Size2D leftSize = this.leftBlock.arrange(g2, new RectangleConstraint(null, null));\n            leftWidth = leftSize.width;\n            leftHeight = leftSize.height;\n        }\n        double rightWidth = 0.0;\n        double rightHeight = 0.0;\n        if (this.rightBlock != null) {\n            Size2D rightSize = this.rightBlock.arrange(g2, new RectangleConstraint(null, null));\n            rightWidth = rightSize.width;\n            rightHeight = rightSize.height;\n        }\n\n        // The center block is given the available width (fixed width minus the side blocks).\n        double centerAvailWidth = Math.max(0.0, constraint.getWidth() - leftWidth - rightWidth);\n        double centerHeight = 0.0;\n        if (this.centerBlock != null) {\n            Size2D centerSize = this.centerBlock.arrange(g2, new RectangleConstraint(centerAvailWidth, null));\n            centerHeight = centerSize.height;\n        }\n        // The middle area\u2019s height is the maximum among left, center, and right.\n        double middleHeight = Math.max(centerHeight, Math.max(leftHeight, rightHeight));\n\n        // Total height is the sum of the top, middle, and bottom heights.\n        double totalHeight = topHeight + middleHeight + bottomHeight;\n\n        // Set the bounds for each block.\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, constraint.getWidth(), topHeight));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight, leftWidth, middleHeight));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, topHeight, centerAvailWidth, middleHeight));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(leftWidth + centerAvailWidth, topHeight, rightWidth, middleHeight));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topHeight + middleHeight, constraint.getWidth(), bottomHeight));\n        }\n        return new Size2D(constraint.getWidth(), totalHeight);\n    }\n    else {\n        // Fixed height branch (unchanged)\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight()),\n                    LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight() - h[0]),\n                    LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n        h[2] = constraint.getHeight() - h[1] - h[0];\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth()),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth() - w[2]),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n        h[4] = h[2];\n        w[4] = constraint.getWidth() - w[3] - w[2];\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));\n        }\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}