{
    "generation": "/**\n * Arranges the items within a container.\n *\n * @param container  the container.\n * @param constraint the constraint.\n * @param g2         the graphics device.\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n\n    w[0] = constraint.getWidth(); // total width\n\n    // --- Top block ---\n    h[0] = 0.0;\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(\n                w[0], null, LengthConstraintType.FIXED, \n                0.0, null, LengthConstraintType.NONE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n\n    // --- Bottom block ---\n    h[1] = 0.0;\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(\n                w[0], null, LengthConstraintType.FIXED, \n                0.0, null, LengthConstraintType.NONE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n\n    // Height left for center row (left/center/right)\n    h[2] = Math.max(constraint.getHeight() - h[0] - h[1], 0.0);\n\n    // --- Left block ---\n    w[2] = 0.0;\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(\n                0.0, new Range(0.0, w[0]),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n\n    // --- Right block ---\n    w[3] = 0.0;\n    double widthRightMax = Math.max(w[0] - w[2], 0.0);\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(\n                0.0, new Range(0.0, widthRightMax),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n\n    // Center width/height\n    h[4] = h[2];\n    w[4] = Math.max(w[0] - w[2] - w[3], 0.0);\n\n    // --- Center block ---\n    if (this.centerBlock != null) {\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    // --- Position the blocks ---\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[2]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));\n    }\n\n    // Compute requested height (in FF, height can be larger than request if blocks are larger)\n    double totalHeight = h[0] + h[2] + h[1];\n    return new Size2D(w[0], totalHeight);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}