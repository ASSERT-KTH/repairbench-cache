{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    final double width = constraint.getWidth();\n    // special case: fixed width, unconstrained height (NONE) => compute dynamic height\n    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {\n        // arrange top\n        double h0 = 0.0;\n        if (this.topBlock != null) {\n            RectangleConstraint cTop = new RectangleConstraint(\n                    width, null, LengthConstraintType.FIXED,\n                    0.0, null, LengthConstraintType.NONE);\n            Size2D s = this.topBlock.arrange(g2, cTop);\n            h0 = s.height;\n        }\n        // arrange bottom\n        double h1 = 0.0;\n        if (this.bottomBlock != null) {\n            RectangleConstraint cBottom = new RectangleConstraint(\n                    width, null, LengthConstraintType.FIXED,\n                    0.0, null, LengthConstraintType.NONE);\n            Size2D s = this.bottomBlock.arrange(g2, cBottom);\n            h1 = s.height;\n        }\n        // arrange left\n        double w2 = 0.0, h2 = 0.0;\n        if (this.leftBlock != null) {\n            RectangleConstraint cLeft = new RectangleConstraint(\n                    0.0, new Range(0.0, width), LengthConstraintType.RANGE,\n                    0.0, null, LengthConstraintType.NONE);\n            Size2D s = this.leftBlock.arrange(g2, cLeft);\n            w2 = s.width;\n            h2 = s.height;\n        }\n        // arrange right\n        double w3 = 0.0, h3 = 0.0;\n        if (this.rightBlock != null) {\n            RectangleConstraint cRight = new RectangleConstraint(\n                    0.0, new Range(0.0, width - w2), LengthConstraintType.RANGE,\n                    0.0, null, LengthConstraintType.NONE);\n            Size2D s = this.rightBlock.arrange(g2, cRight);\n            w3 = s.width;\n            h3 = s.height;\n        }\n        // arrange center\n        double w4 = width - w2 - w3;\n        double h4 = 0.0;\n        if (this.centerBlock != null) {\n            RectangleConstraint cCenter = new RectangleConstraint(\n                    w4, null, LengthConstraintType.FIXED,\n                    0.0, null, LengthConstraintType.NONE);\n            Size2D s = this.centerBlock.arrange(g2, cCenter);\n            h4 = s.height;\n        }\n        // the middle region height is the max of left, right, center\n        double hMiddle = Math.max(h2, Math.max(h3, h4));\n        // set block bounds\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(\n                    0.0, 0.0, width, h0));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(\n                    0.0, h0 + hMiddle, width, h1));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(\n                    0.0, h0, w2, hMiddle));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(\n                    w2 + w4, h0, w3, hMiddle));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(\n                    w2, h0, w4, hMiddle));\n        }\n        // return total required size\n        return new Size2D(width, h0 + hMiddle + h1);\n    }\n\n    // original fixed\u2010height logic\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = width;\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(\n            w[0], null, LengthConstraintType.FIXED,\n            0.0, new Range(0.0, constraint.getHeight()),\n            LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(\n            w[0], null, LengthConstraintType.FIXED,\n            0.0, new Range(0.0, constraint.getHeight() - h[0]),\n            LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(\n            0.0, new Range(0.0, width),\n            LengthConstraintType.RANGE,\n            h[2], null, LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(\n            0.0, new Range(0.0, width - w[2]),\n            LengthConstraintType.RANGE,\n            h[2], null, LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n    h[4] = h[2];\n    w[4] = width - w[3] - w[2];\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(\n            0.0, 0.0, w[0], h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(\n            0.0, h[0] + h[2], w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(\n            0.0, h[0], w[2], h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(\n            w[2] + w[4], h[0], w[3], h[3]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(\n            w[2], h[0], w[4], h[4]));\n    }\n    return new Size2D(width, constraint.getHeight());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}