{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double totalWidth = constraint.getWidth();\n    LengthConstraintType heightType = constraint.getHeightConstraintType();\n\n    // Case 1: height is fixed \u2013 use the existing algorithm\n    if (heightType == LengthConstraintType.FIXED) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        // top\n        w[0] = totalWidth;\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(\n                    w[0], null, LengthConstraintType.FIXED,\n                    0.0, new Range(0.0, constraint.getHeight()),\n                    LengthConstraintType.RANGE);\n            Size2D size1 = this.topBlock.arrange(g2, c1);\n            h[0] = size1.height;\n        }\n        // bottom\n        w[1] = totalWidth;\n        if (this.bottomBlock != null) {\n            double remHeight = constraint.getHeight() - h[0];\n            if (remHeight < 0) {\n                remHeight = 0.0;\n            }\n            RectangleConstraint c2 = new RectangleConstraint(\n                    w[1], null, LengthConstraintType.FIXED,\n                    0.0, new Range(0.0, remHeight),\n                    LengthConstraintType.RANGE);\n            Size2D size2 = this.bottomBlock.arrange(g2, c2);\n            h[1] = size2.height;\n        }\n        // centre-row height\n        h[2] = constraint.getHeight() - h[0] - h[1];\n\n        // left\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(\n                    0.0, new Range(0.0, totalWidth),\n                    LengthConstraintType.RANGE,\n                    h[2], null, LengthConstraintType.FIXED);\n            Size2D size3 = this.leftBlock.arrange(g2, c3);\n            w[2] = size3.width;\n        }\n        // right\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(\n                    0.0,\n                    new Range(0.0, totalWidth - w[2]),\n                    LengthConstraintType.RANGE,\n                    h[2], null, LengthConstraintType.FIXED);\n            Size2D size4 = this.rightBlock.arrange(g2, c4);\n            w[3] = size4.width;\n        }\n        // centre\n        h[4] = h[2];\n        w[4] = totalWidth - w[2] - w[3];\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        // set bounds\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(\n                    0.0, 0.0, w[0], h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(\n                    0.0, h[0] + h[2], w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(\n                    0.0, h[0], w[2], h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(\n                    w[2] + w[4], h[0], w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(\n                    w[2], h[0], w[4], h[4]));\n        }\n\n        return new Size2D(totalWidth, constraint.getHeight());\n    }\n\n    // Case 2: height is RANGE or NONE \u2013 compute heights freely\n    double hTop = 0.0;\n    if (this.topBlock != null) {\n        // width fixed, height unconstrained\n        RectangleConstraint cTop = new RectangleConstraint(\n                totalWidth, null, LengthConstraintType.FIXED,\n                0.0, null, LengthConstraintType.NONE);\n        Size2D sTop = this.topBlock.arrange(g2, cTop);\n        hTop = sTop.height;\n    }\n    double hBottom = 0.0;\n    if (this.bottomBlock != null) {\n        RectangleConstraint cBot = new RectangleConstraint(\n                totalWidth, null, LengthConstraintType.FIXED,\n                0.0, null, LengthConstraintType.NONE);\n        Size2D sBot = this.bottomBlock.arrange(g2, cBot);\n        hBottom = sBot.height;\n    }\n\n    // measure left and right\n    double wLeft = 0.0, hLeft = 0.0;\n    if (this.leftBlock != null) {\n        RectangleConstraint cLeft = new RectangleConstraint(\n                0.0, new Range(0.0, totalWidth),\n                LengthConstraintType.RANGE,\n                0.0, null, LengthConstraintType.NONE);\n        Size2D sLeft = this.leftBlock.arrange(g2, cLeft);\n        wLeft = sLeft.width;\n        hLeft = sLeft.height;\n    }\n    double wRight = 0.0, hRight = 0.0;\n    if (this.rightBlock != null) {\n        RectangleConstraint cRight = new RectangleConstraint(\n                0.0, new Range(0.0, totalWidth - wLeft),\n                LengthConstraintType.RANGE,\n                0.0, null, LengthConstraintType.NONE);\n        Size2D sRight = this.rightBlock.arrange(g2, cRight);\n        wRight = sRight.width;\n        hRight = sRight.height;\n    }\n\n    // measure centre\n    double wCentre = totalWidth - wLeft - wRight;\n    double hCentre = 0.0;\n    if (this.centerBlock != null) {\n        RectangleConstraint cCentre = new RectangleConstraint(\n                wCentre, null, LengthConstraintType.FIXED,\n                0.0, null, LengthConstraintType.NONE);\n        Size2D sCentre = this.centerBlock.arrange(g2, cCentre);\n        wCentre = sCentre.width;\n        hCentre = sCentre.height;\n    }\n\n    // the middle\u2010row height is the max of left/right/centre\n    double hMiddle = Math.max(Math.max(hLeft, hRight), hCentre);\n\n    // set bounds now that we know all dims\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(\n                0.0, 0.0, totalWidth, hTop));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(\n                0.0, hTop + hMiddle, totalWidth, hBottom));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(\n                0.0, hTop, wLeft, hMiddle));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(\n                wLeft + wCentre, hTop, wRight, hMiddle));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(\n                wLeft, hTop, wCentre, hMiddle));\n    }\n\n    // total height is top + middle + bottom\n    return new Size2D(totalWidth, hTop + hMiddle + hBottom);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}