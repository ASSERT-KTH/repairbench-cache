{
    "generation": "/**\n * Arranges the items within a container (fixed\u2010width, possibly fixed/range/none\u2010height).\n *\n * @param container  the container.\n * @param constraint the constraint.\n * @param g2         the graphics device.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n\n    double containerWidth = constraint.getWidth();\n    LengthConstraintType hct = constraint.getHeightConstraintType();\n\n    // determine the \"upper\" height bound for children\n    double heightUpper;\n    if (hct == LengthConstraintType.FIXED) {\n        heightUpper = constraint.getHeight();\n    }\n    else if (hct == LengthConstraintType.RANGE) {\n        heightUpper = constraint.getHeightRange().getUpperBound();\n    }\n    else {  // NONE = unconstrained\n        heightUpper = Double.POSITIVE_INFINITY;\n    }\n\n    // --- arrange top block ---\n    double topH = 0.0;\n    Size2D topSize = null;\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(\n            containerWidth, null, LengthConstraintType.FIXED,\n            0.0, new Range(0.0, heightUpper), LengthConstraintType.RANGE\n        );\n        topSize = this.topBlock.arrange(g2, c1);\n        topH = topSize.height;\n    }\n\n    // --- arrange bottom block ---\n    double bottomH = 0.0;\n    Size2D bottomSize = null;\n    if (this.bottomBlock != null) {\n        double maxBottom = heightUpper - topH;\n        if (maxBottom < 0.0) {\n            maxBottom = 0.0;\n        }\n        RectangleConstraint c2 = new RectangleConstraint(\n            containerWidth, null, LengthConstraintType.FIXED,\n            0.0, new Range(0.0, maxBottom), LengthConstraintType.RANGE\n        );\n        bottomSize = this.bottomBlock.arrange(g2, c2);\n        bottomH = bottomSize.height;\n    }\n\n    // --- compute available height for left/center/right ---\n    double availableH;\n    if (hct == LengthConstraintType.FIXED || hct == LengthConstraintType.RANGE) {\n        availableH = heightUpper - topH - bottomH;\n        if (availableH < 0.0) {\n            availableH = 0.0;\n        }\n    }\n    else { // unconstrained\n        availableH = Double.POSITIVE_INFINITY;\n    }\n\n    // --- arrange left block ---\n    double leftW = 0.0;\n    Size2D leftSize = null;\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(\n            0.0, new Range(0.0, containerWidth),\n            LengthConstraintType.RANGE,\n            availableH, null, LengthConstraintType.FIXED\n        );\n        leftSize = this.leftBlock.arrange(g2, c3);\n        leftW = leftSize.width;\n    }\n\n    // --- arrange right block ---\n    double rightW = 0.0;\n    Size2D rightSize = null;\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(\n            0.0, new Range(0.0, containerWidth - leftW),\n            LengthConstraintType.RANGE,\n            availableH, null, LengthConstraintType.FIXED\n        );\n        rightSize = this.rightBlock.arrange(g2, c4);\n        rightW = rightSize.width;\n    }\n\n    // --- arrange center block ---\n    double centerW = containerWidth - leftW - rightW;\n    if (centerW < 0.0) {\n        centerW = 0.0;\n    }\n    Size2D centerSize = null;\n    RectangleConstraint c5 = new RectangleConstraint(centerW, availableH);\n    if (this.centerBlock != null) {\n        centerSize = this.centerBlock.arrange(g2, c5);\n    }\n\n    // --- determine actual region height ---\n    double regionH;\n    if (hct == LengthConstraintType.FIXED) {\n        // fixed\u2010height: we must use the allotted space\n        regionH = availableH;\n    }\n    else {\n        // range or none: use the maximum of left/center/right actual heights\n        regionH = 0.0;\n        if (leftSize != null) {\n            regionH = Math.max(regionH, leftSize.height);\n        }\n        if (centerSize != null) {\n            regionH = Math.max(regionH, centerSize.height);\n        }\n        if (rightSize != null) {\n            regionH = Math.max(regionH, rightSize.height);\n        }\n    }\n\n    // --- set the block bounds ---\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(\n            0.0, 0.0, containerWidth, topH\n        ));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(\n            0.0, topH + regionH, containerWidth, bottomH\n        ));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(\n            0.0, topH, leftW, regionH\n        ));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(\n            leftW + centerW, topH, rightW, regionH\n        ));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(\n            leftW, topH, centerW, regionH\n        ));\n    }\n\n    // --- return the total size used ---\n    double totalHeight;\n    if (hct == LengthConstraintType.FIXED) {\n        totalHeight = heightUpper;\n    }\n    else {\n        totalHeight = topH + regionH + bottomH;\n    }\n    return new Size2D(containerWidth, totalHeight);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}