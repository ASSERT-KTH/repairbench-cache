{
    "generation": "    /**\n     * Arranges the items within a container.\n     *\n     * @param container  the container.\n     * @param g2  the graphics device.\n     * @param constraint  the constraint.\n     *\n     * @return The container size after the arrangement.\n     */\n    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        \n        // Ensure initial height constraints are non-negative\n        double availableHeight = constraint.getHeight();\n\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, availableHeight), // Max height for top block\n                    LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n        \n        w[1] = w[0]; // Bottom block takes full container width\n        if (this.bottomBlock != null) {\n            // Clamp available height to 0.0 to prevent negative range for bottom block\n            double bottomAvailableHeight = Math.max(0.0, availableHeight - h[0]);\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                    bottomAvailableHeight), LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n        \n        // Calculate the height available for left, right, and center blocks\n        // Clamp to 0.0 to prevent negative fixed height\n        h[2] = Math.max(0.0, availableHeight - h[1] - h[0]);\n\n        if (this.leftBlock != null) {\n            // Left block has fixed height h[2], max width is container width\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth()),\n                    LengthConstraintType.RANGE, h[2], null, // Fixed height h[2] (clamped)\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n        \n        h[3] = h[2]; // Right block takes the same fixed height as left/center\n        if (this.rightBlock != null) {\n            // Right block has fixed height h[2], max width is remaining width\n            // Clamp to 0.0 to prevent negative range for right block\n            double rightAvailableWidth = Math.max(0.0, constraint.getWidth() - w[2]);\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, rightAvailableWidth),\n                    LengthConstraintType.RANGE, h[2], null, // Fixed height h[2] (clamped)\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n        \n        h[4] = h[2]; // Center block takes the same fixed height as left/right\n        // Center block width is the total width minus space taken by left and right.\n        // Clamp to 0.0.\n        w[4] = Math.max(0.0, constraint.getWidth() - w[3] - w[2]);\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); // Center block has fixed width and height (both clamped)\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        // Set bounds for the blocks\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            // Original calculation h[0] + h[2] correctly places the bottom block\n            // at constraint.getHeight() - h[1] given h[2] = constraint.getHeight() - h[0] - h[1]\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                    w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                    w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                    h[4]));\n        }\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}