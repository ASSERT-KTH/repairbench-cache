{
    "generation": "    /**\n     * Arranges the items within a container.\n     *\n     * @param container  the container.\n     * @param constraint  the constraint.\n     * @param g2  the graphics device.\n     *\n     * @return The container size after the arrangement.\n     */\n    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            // Constraint for top block: fixed width, range height bounded by container height\n             RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight()), // Upper bound is constraint.getHeight()\n                    LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n        w[1] = w[0]; // Bottom block width is also fixed to container width\n        if (this.bottomBlock != null) {\n            // Height constraint range is bounded by remaining height, ensure non-negative\n            double H1 = Math.max(0.0, constraint.getHeight() - h[0]); // Available height for bottom\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, new Range(0.0, H1), // Use Range(0, H1)\n                    LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n        // Middle section height is what's left, ensure non-negative\n        h[2] = Math.max(0.0, constraint.getHeight() - h[1] - h[0]);\n        if (this.leftBlock != null) {\n            // Width constraint is range (0, container width), height is fixed h[2]\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth()), // Range width\n                    LengthConstraintType.RANGE, h[2], null, // Fixed height h[2]\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n        h[3] = h[2]; // Right block height is also h[2]\n        if (this.rightBlock != null) {\n            // Width constraint is range (0, remaining width), height is fixed h[2], ensure non-negative range\n            double W3 = Math.max(0.0, constraint.getWidth() - w[2]); // Available width for right\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, W3), // Use Range(0, W3)\n                    LengthConstraintType.RANGE, h[2], null, // Fixed height h[2]\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n        h[4] = h[2]; // Center block height is also h[2]\n        // Center block width is what's left, ensure non-negative\n        w[4] = Math.max(0.0, constraint.getWidth() - w[3] - w[2]);\n        // Center block constraint is fixed width w[4], fixed height h[4]\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        // Set bounds using calculated non-negative dimensions\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                    h[0]));\n        }\n        if (this.bottomBlock != null) {\n            // Y-coordinate is after top and middle sections\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                    w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            // Y-coordinate is after top section\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                    h[2]));\n        }\n        if (this.rightBlock != null) {\n            // X-coordinate is after left and center sections\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                    w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            // X-coordinate is after left section\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                    h[4]));\n        }\n        // Return the fixed size specified by the input constraint, consistent with FF name.\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}