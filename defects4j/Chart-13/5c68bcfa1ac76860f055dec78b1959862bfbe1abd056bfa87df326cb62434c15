{
    "generation": "/**\n * Arranges the items within a container.\n *\n * @param container  the container.\n * @param g2  the graphics device.\n * @param constraint  the constraint.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    // The width is fixed.\n    double fixedWidth = constraint.getWidth();\n    \n    // If the height is fixed, follow the original fixed\u2010height strategy.\n    if (constraint.getHeightConstraintType() == LengthConstraintType.FIXED) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        \n        w[0] = fixedWidth;\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(\n                    fixedWidth, null, LengthConstraintType.FIXED,\n                    0.0, new Range(0.0, constraint.getHeight()),\n                    LengthConstraintType.RANGE\n            );\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n        w[1] = fixedWidth;\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(\n                    fixedWidth, null, LengthConstraintType.FIXED,\n                    0.0, new Range(0.0, constraint.getHeight() - h[0]),\n                    LengthConstraintType.RANGE\n            );\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n        h[2] = constraint.getHeight() - h[0] - h[1];\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(\n                    0.0, new Range(0.0, fixedWidth),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED\n            );\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n        else {\n            w[2] = 0.0;\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(\n                    0.0, new Range(0.0, fixedWidth - w[2]),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED\n            );\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n        else {\n            w[3] = 0.0;\n        }\n        h[4] = h[2];\n        w[4] = fixedWidth - w[2] - w[3];\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, fixedWidth, h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], fixedWidth, h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[2]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[2]));\n        }\n        return new Size2D(fixedWidth, constraint.getHeight());\n    }\n    // Otherwise, if the height is unconstrained (LengthConstraintType.NONE), compute the natural height.\n    else {\n        double topHeight = 0.0, bottomHeight = 0.0, middleHeight = 0.0;\n        double leftWidth = 0.0, rightWidth = 0.0;\n        Size2D topSize = null, bottomSize = null, leftSize = null, rightSize = null, centerSize = null;\n        \n        // Arrange the top block (if any) using the fixed width and no height constraint.\n        if (this.topBlock != null) {\n            RectangleConstraint ct = new RectangleConstraint(\n                    fixedWidth, null, LengthConstraintType.FIXED,\n                    0.0, null, LengthConstraintType.NONE\n            );\n            topSize = this.topBlock.arrange(g2, ct);\n            topHeight = topSize.height;\n        }\n        \n        // Arrange the bottom block (if any).\n        if (this.bottomBlock != null) {\n            RectangleConstraint cb = new RectangleConstraint(\n                    fixedWidth, null, LengthConstraintType.FIXED,\n                    0.0, null, LengthConstraintType.NONE\n            );\n            bottomSize = this.bottomBlock.arrange(g2, cb);\n            bottomHeight = bottomSize.height;\n        }\n        \n        // Arrange the left block (if any) with a width range capped at the full width.\n        if (this.leftBlock != null) {\n            RectangleConstraint cl = new RectangleConstraint(\n                    null, new Range(0.0, fixedWidth), LengthConstraintType.RANGE,\n                    Double.POSITIVE_INFINITY, null, LengthConstraintType.NONE\n            );\n            leftSize = this.leftBlock.arrange(g2, cl);\n            leftWidth = leftSize.width;\n            middleHeight = Math.max(middleHeight, leftSize.height);\n        }\n        \n        // Arrange the right block (if any) such that it does not exceed the remaining width.\n        double availableForRight = fixedWidth - leftWidth;\n        if (availableForRight < 0) {\n            availableForRight = 0;\n        }\n        if (this.rightBlock != null) {\n            RectangleConstraint cr = new RectangleConstraint(\n                    null, new Range(0.0, availableForRight), LengthConstraintType.RANGE,\n                    Double.POSITIVE_INFINITY, null, LengthConstraintType.NONE\n            );\n            rightSize = this.rightBlock.arrange(g2, cr);\n            rightWidth = rightSize.width;\n            middleHeight = Math.max(middleHeight, rightSize.height);\n        }\n        \n        // Arrange the center block (if any) using the remaining width.\n        double availableForCenter = fixedWidth - leftWidth - rightWidth;\n        if (availableForCenter < 0) {\n            availableForCenter = 0;\n        }\n        if (this.centerBlock != null) {\n            RectangleConstraint cc = new RectangleConstraint(\n                    availableForCenter, null, LengthConstraintType.FIXED,\n                    Double.POSITIVE_INFINITY, null, LengthConstraintType.NONE\n            );\n            centerSize = this.centerBlock.arrange(g2, cc);\n            middleHeight = Math.max(middleHeight, centerSize.height);\n        }\n        \n        double totalHeight = topHeight + middleHeight + bottomHeight;\n        \n        // Set bounds for the blocks.\n        double y = 0.0;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, y, fixedWidth, topHeight));\n            y += topHeight;\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, y, leftWidth, middleHeight));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, y, availableForCenter, middleHeight));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(leftWidth + availableForCenter, y, rightWidth, middleHeight));\n        }\n        y += middleHeight;\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, y, fixedWidth, bottomHeight));\n        }\n        return new Size2D(fixedWidth, totalHeight);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}