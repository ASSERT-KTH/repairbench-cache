{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    // This method is intended for \u201cfixed\u2013fixed\u201d constraints.\n    // However, when the height constraint is not FIXED (for example, when it is NONE),\n    // we must delegate to the \u201cfixed\u2013natural\u201d strategy.\n    if (constraint.getHeightConstraintType() != LengthConstraintType.FIXED) {\n        return arrangeFN(container, g2, constraint);\n    }\n\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(\n            w[0], null, LengthConstraintType.FIXED, 0.0,\n            new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE\n        );\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.getHeight();\n    }\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        // Make sure the available height is not negative.\n        double availableHeight = Math.max(0.0, constraint.getHeight() - h[0]);\n        RectangleConstraint c2 = new RectangleConstraint(\n            w[0], null, LengthConstraintType.FIXED, 0.0,\n            new Range(0.0, availableHeight), LengthConstraintType.RANGE\n        );\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.getHeight();\n    }\n    h[2] = Math.max(0.0, constraint.getHeight() - h[0] - h[1]);\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(\n            0.0, new Range(0.0, constraint.getWidth()),\n            LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED\n        );\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.getWidth();\n    }\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(\n            0.0, new Range(0.0, constraint.getWidth() - w[2]),\n            LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED\n        );\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.getWidth();\n    }\n    w[4] = Math.max(0.0, constraint.getWidth() - w[3] - w[2]);\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[2]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[2]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[2]));\n    }\n    return new Size2D(constraint.getWidth(), constraint.getHeight());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}