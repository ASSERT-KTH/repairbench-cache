{
    "generation": "/**\n * Arranges the items within a container.\n *\n * If the height constraint is NONE (i.e. no fixed height is provided), then the\n * natural (preferred) heights of the blocks are used to compute the overall height.\n * Otherwise, the fixed height is used (and the original algorithm is applied).\n *\n * @param container  the container.\n * @param g2  the graphics device.\n * @param constraint  the rectangle constraint.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    // If the height is not fixed, we must compute the natural (preferred) height.\n    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {\n        double fixedWidth = constraint.getWidth();\n        double topHeight = 0.0;\n        double bottomHeight = 0.0;\n        double leftWidth = 0.0;\n        double rightWidth = 0.0;\n        double middleHeight = 0.0;\n        \n        // Arrange TOP block (if any) using the fixed width; height is free.\n        if (this.topBlock != null) {\n            // Constrain the width only...\n            RectangleConstraint topConstraint \n                    = new RectangleConstraint(fixedWidth, null, LengthConstraintType.FIXED);\n            Size2D topSize = this.topBlock.arrange(g2, topConstraint);\n            topHeight = topSize.getHeight();\n        }\n        \n        // Arrange BOTTOM block (if any) using the fixed width.\n        if (this.bottomBlock != null) {\n            RectangleConstraint bottomConstraint \n                    = new RectangleConstraint(fixedWidth, null, LengthConstraintType.FIXED);\n            Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);\n            bottomHeight = bottomSize.getHeight();\n        }\n        \n        // Arrange LEFT block (if any) with no constraints.\n        if (this.leftBlock != null) {\n            Size2D leftSize = this.leftBlock.arrange(g2, RectangleConstraint.NONE);\n            leftWidth = leftSize.getWidth();\n            middleHeight = Math.max(middleHeight, leftSize.getHeight());\n        }\n        \n        // Arrange RIGHT block (if any) with no constraints.\n        if (this.rightBlock != null) {\n            Size2D rightSize = this.rightBlock.arrange(g2, RectangleConstraint.NONE);\n            rightWidth = rightSize.getWidth();\n            middleHeight = Math.max(middleHeight, rightSize.getHeight());\n        }\n        \n        // Arrange CENTER block (if any). Its available width is what\u2019s left.\n        if (this.centerBlock != null) {\n            double centerWidth = Math.max(0.0, fixedWidth - leftWidth - rightWidth);\n            RectangleConstraint centerConstraint \n                    = new RectangleConstraint(centerWidth, null, LengthConstraintType.FIXED);\n            Size2D centerSize = this.centerBlock.arrange(g2, centerConstraint);\n            middleHeight = Math.max(middleHeight, centerSize.getHeight());\n        }\n        \n        // Overall height is the sum of top, middle and bottom heights.\n        double totalHeight = topHeight + middleHeight + bottomHeight;\n        \n        // Set bounds for each block.\n        double y = 0.0;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, y, fixedWidth, topHeight));\n            y += topHeight;\n        }\n        double middleY = y;\n        double x = 0.0;\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(x, middleY, leftWidth, middleHeight));\n            x += leftWidth;\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(\n                    x, middleY, Math.max(0.0, fixedWidth - leftWidth - rightWidth), middleHeight));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(fixedWidth - rightWidth, middleY, rightWidth, middleHeight));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, y + middleHeight, fixedWidth, bottomHeight));\n        }\n        return new Size2D(fixedWidth, totalHeight);\n    }\n    else { \n        // Otherwise, use the fixed height algorithm (original code)...\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.getHeight();\n        }\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.getHeight();\n        }\n        h[2] = constraint.getHeight() - h[1] - h[0];\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth()),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.getWidth();\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth() - w[2]),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.getWidth();\n        }\n        h[4] = h[2];\n        w[4] = constraint.getWidth() - w[3] - w[2];\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));\n        }\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}