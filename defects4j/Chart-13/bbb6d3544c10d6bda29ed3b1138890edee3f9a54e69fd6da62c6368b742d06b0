{
    "generation": "/**\n * Arranges the items within a container.\n *\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    h[0] = 0.0;\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, Double.POSITIVE_INFINITY),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    h[1] = 0.0;\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, Double.POSITIVE_INFINITY),\n                LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    // The height for left, right, and center is not constrained by remaining vertical space, so use their preferred heights\n    h[2] = 0.0; // max height among left, right, center blocks\n    double leftHeight = 0.0;\n    double rightHeight = 0.0;\n    double centerHeight = 0.0;\n\n    w[2] = 0.0;\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, w[0]),\n                LengthConstraintType.RANGE, 0.0, null,\n                LengthConstraintType.NONE);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n        leftHeight = size.height;\n    }\n\n    w[3] = 0.0;\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n                new Range(0.0, w[0] - w[2]),\n                LengthConstraintType.RANGE, 0.0, null,\n                LengthConstraintType.NONE);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n        rightHeight = size.height;\n    }\n\n    w[4] = Math.max(0.0, w[0] - w[2] - w[3]);\n    h[4] = 0.0;\n    if (this.centerBlock != null) {\n        RectangleConstraint c5 = new RectangleConstraint(w[4], 0.0,\n                LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE);\n        Size2D size = this.centerBlock.arrange(g2, c5);\n        h[4] = size.height;\n        centerHeight = h[4];\n    }\n\n    // Compute heights for left and right blocks based on previous arrange\n    if (this.leftBlock != null) {\n        leftHeight = Math.max(leftHeight, h[4]);\n    }\n    if (this.rightBlock != null) {\n        rightHeight = Math.max(rightHeight, h[4]);\n    }\n    // Compute the height of the middle row (max among left, right, center)\n    double midHeight = Math.max(Math.max(leftHeight, rightHeight), centerHeight);\n\n    double totalHeight = h[0] + midHeight + h[1];\n\n    // Set bounds for the blocks\n    double yCursor = 0.0;\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, yCursor, w[0], h[0]));\n    }\n    yCursor += h[0];\n\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, yCursor, w[2], midHeight));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], yCursor, w[3], midHeight));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], yCursor, w[4], midHeight));\n    }\n    yCursor += midHeight;\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, yCursor, w[1], h[1]));\n    }\n\n    return new Size2D(constraint.getWidth(), totalHeight);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}