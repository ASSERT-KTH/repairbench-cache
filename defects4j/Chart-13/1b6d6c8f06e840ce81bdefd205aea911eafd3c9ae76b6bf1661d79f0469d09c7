{
    "generation": "/**\n * Arranges the items within a container.\n *\n * If the height constraint is fixed, the blocks are laid out in a fixed\u2010height\n * arrangement. But if the height constraint is NONE (as when only a width constraint\n * is provided), then the overall height is computed from the natural (preferred)\n * sizes of the blocks.\n *\n * @param container  the container.\n * @param g2  the graphics device.\n * @param constraint  the constraint.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    // Branch: if height is not specified (NONE), we compute the final height from the blocks'\n    // natural (unconstrained) sizes.\n    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {\n        // The container width is fixed.\n        double fixedWidth = constraint.getWidth();\n\n        // Arrange the top block with a fixed width and no vertical constraint.\n        double topHeight = 0.0;\n        if (this.topBlock != null) {\n            RectangleConstraint topConstraint = new RectangleConstraint(\n                    fixedWidth, null, LengthConstraintType.FIXED,\n                    0.0, null, LengthConstraintType.NONE\n            );\n            Size2D topSize = this.topBlock.arrange(g2, topConstraint);\n            topHeight = topSize.height;\n        }\n\n        // Arrange the bottom block similarly.\n        double bottomHeight = 0.0;\n        if (this.bottomBlock != null) {\n            RectangleConstraint bottomConstraint = new RectangleConstraint(\n                    fixedWidth, null, LengthConstraintType.FIXED,\n                    0.0, null, LengthConstraintType.NONE\n            );\n            Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);\n            bottomHeight = bottomSize.height;\n        }\n\n        // Next, arrange the left block.\n        double leftWidth = 0.0;\n        Size2D leftSize = new Size2D(0.0, 0.0);\n        if (this.leftBlock != null) {\n            // Constrain the left block's width to be at most the container width.\n            RectangleConstraint leftConstraint = new RectangleConstraint(\n                    0.0, new Range(0.0, fixedWidth), LengthConstraintType.RANGE,\n                    0.0, null, LengthConstraintType.NONE\n            );\n            leftSize = this.leftBlock.arrange(g2, leftConstraint);\n            leftWidth = leftSize.width;\n        }\n\n        // Arrange the right block. Its width is constrained to not exceed (container width - leftWidth).\n        double rightWidth = 0.0;\n        Size2D rightSize = new Size2D(0.0, 0.0);\n        if (this.rightBlock != null) {\n            RectangleConstraint rightConstraint = new RectangleConstraint(\n                    0.0, new Range(0.0, fixedWidth - leftWidth), LengthConstraintType.RANGE,\n                    0.0, null, LengthConstraintType.NONE\n            );\n            rightSize = this.rightBlock.arrange(g2, rightConstraint);\n            rightWidth = rightSize.width;\n        }\n\n        // With left/right determined, the center gets the remaining width.\n        double centerAvailableWidth = fixedWidth - leftWidth - rightWidth;\n        if (centerAvailableWidth < 0) {\n            centerAvailableWidth = 0;\n        }\n        Size2D centerSize = new Size2D(0.0, 0.0);\n        if (this.centerBlock != null) {\n            RectangleConstraint centerConstraint = new RectangleConstraint(\n                    centerAvailableWidth, null, LengthConstraintType.FIXED,\n                    0.0, null, LengthConstraintType.NONE\n            );\n            centerSize = this.centerBlock.arrange(g2, centerConstraint);\n        }\n\n        // The middle area height is the maximum natural height among the left, center and right blocks.\n        double middleHeight = Math.max(\n                (this.centerBlock != null ? centerSize.height : 0.0),\n                Math.max(leftSize.height, rightSize.height)\n        );\n\n        // Now re-arrange the blocks in the middle so that they use the allocated (fixed) height.\n        if (this.leftBlock != null) {\n            RectangleConstraint leftFixed = new RectangleConstraint(leftWidth, middleHeight);\n            this.leftBlock.arrange(g2, leftFixed);\n        }\n        if (this.rightBlock != null) {\n            RectangleConstraint rightFixed = new RectangleConstraint(rightWidth, middleHeight);\n            this.rightBlock.arrange(g2, rightFixed);\n        }\n        if (this.centerBlock != null) {\n            RectangleConstraint centerFixed = new RectangleConstraint(centerAvailableWidth, middleHeight);\n            this.centerBlock.arrange(g2, centerFixed);\n        }\n\n        // Set the bounds for each block.\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, fixedWidth, topHeight));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, topHeight, leftWidth, middleHeight));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(leftWidth, topHeight, centerAvailableWidth, middleHeight));\n        }\n        if (this.rightBlock != null) {\n            // Position the right block at the far right.\n            this.rightBlock.setBounds(new Rectangle2D.Double(fixedWidth - rightWidth, topHeight, rightWidth, middleHeight));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topHeight + middleHeight, fixedWidth, bottomHeight));\n        }\n\n        // The overall container height is the sum of the top, middle and bottom areas.\n        return new Size2D(fixedWidth, topHeight + middleHeight + bottomHeight);\n    }\n    else {\n        // Height is fixed; use the original algorithm.\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight()),\n                    LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n        h[2] = constraint.getHeight() - h[1] - h[0];\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth()),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth() - w[2]),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n        h[4] = h[2];\n        w[4] = constraint.getWidth() - w[3] - w[2];\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));\n        }\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}