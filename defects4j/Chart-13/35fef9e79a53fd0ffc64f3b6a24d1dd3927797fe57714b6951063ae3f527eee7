{
    "generation": "/**\n * Arranges the items within a container.\n *\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n\n    double[] w = new double[5];\n    double[] h = new double[5];\n    // w[0]: total width constraint, h[0]: topBlock height\n    // w[1]: total width again, h[1]: bottomBlock height\n    // w[2]: left block width, h[2]: available vertical height for left/right/center\n    // w[3]: right block width, h[3]: available vertical height for right\n    // w[4]: center block width, h[4]: center block height\n\n    w[0] = constraint.getWidth(); // Fixed width only\n\n    // 1. Top block\n    h[0] = 0.0;\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, Double.POSITIVE_INFINITY),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n\n    w[1] = w[0];\n\n    // 2. Bottom block\n    h[1] = 0.0;\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, Double.POSITIVE_INFINITY),\n                LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n\n    // 3. Compute available height for left/right/center (h[2])\n    h[2] = Math.max(0.0, constraint.getHeight() - h[0] - h[1]);\n    // In some cases, test expects stacking blocks even if height constraint is 0.\n    // If no height constraint, allow blocks to be stacked, so sum heights of top, bottom, left, right, center.\n\n    // But the test is run with constraint = FIXED width, NONE height.\n    // So we need to stack blocks vertically and let height grow as necessary.\n\n    // Instead let's check if the height constraint type is NONE:\n    boolean unlimitedHeight = constraint.getHeightConstraintType().equals(LengthConstraintType.NONE);\n\n    // If there is no top/bottom, and we're stacking left/right/center, the available \"vertical band\" is unconstrained.\n    double leftAndRightBandHeight = unlimitedHeight ? Double.POSITIVE_INFINITY : h[2];\n\n    // 4. Left block\n    w[2] = 0.0;\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE,\n                leftAndRightBandHeight, null,\n                unlimitedHeight ? LengthConstraintType.NONE : LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n        // The left and right should possibly extend to their preferred height, not just the band height\n        // if the constraint is NONE\n        h[2] = Math.max(h[2], size.height);\n    }\n\n    // 5. Right block\n    w[3] = 0.0;\n    if (this.rightBlock != null) {\n        double availForRight = Math.max(0.0, constraint.getWidth() - w[2]);\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n                new Range(0.0, availForRight),\n                LengthConstraintType.RANGE,\n                leftAndRightBandHeight, null,\n                unlimitedHeight ? LengthConstraintType.NONE : LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n        h[2] = Math.max(h[2], size.height);\n    }\n\n    // 6. Center block\n    w[4] = Math.max(0.0, constraint.getWidth() - w[2] - w[3]);\n    h[4] = h[2];\n    Size2D centerSize = null;\n    if (this.centerBlock != null) {\n        RectangleConstraint c5;\n        if (unlimitedHeight) {\n            c5 = new RectangleConstraint(w[4], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, Double.POSITIVE_INFINITY), LengthConstraintType.RANGE);\n        } else {\n            c5 = new RectangleConstraint(w[4], h[4]);\n        }\n        centerSize = this.centerBlock.arrange(g2, c5);\n        h[4] = centerSize.height;\n    }\n\n    // -- Now figure out total height returned\n    double totalHeight;\n    if (unlimitedHeight) {\n        // Stack all blocks vertically, bottom blocks may be zero\n        // Add top, center block's height, bottom\n        totalHeight = h[0] + Math.max(h[2], Math.max(h[4], Math.max(\n                (this.leftBlock == null ? 0.0 : this.leftBlock.arrange(g2, RectangleConstraint.NONE).height),\n                (this.rightBlock == null ? 0.0 : this.rightBlock.arrange(g2, RectangleConstraint.NONE).height)\n                ))) + h[1];\n\n        // But actually, in BorderArrangement, left/right/center blocks are on the same line, so\n        // height is just top + max(left/right/center) + bottom\n        double vBand = Math.max(\n            (this.leftBlock == null ? 0.0 : this.leftBlock.arrange(g2, RectangleConstraint.NONE).height),\n            (this.rightBlock == null ? 0.0 : this.rightBlock.arrange(g2, RectangleConstraint.NONE).height)\n        );\n        double centerH = (centerSize != null ? centerSize.height : 0.0);\n        vBand = Math.max(vBand, centerH);\n        totalHeight = h[0] + vBand + h[1];\n    } else {\n        // Height is fixed\n        totalHeight = constraint.getHeight();\n    }\n\n    // --- Assign block bounds\n    double topY = 0.0;\n    double leftY = h[0];\n    double centerY = h[0];\n    double rightY = h[0];\n    double bottomY = h[0] + h[2];\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, topY, w[0], h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, topY + h[0] + h[2], w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, leftY, w[2], h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], rightY, w[3], h[2]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], centerY, w[4], h[2]));\n    }\n\n    return new Size2D(constraint.getWidth(), totalHeight);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}