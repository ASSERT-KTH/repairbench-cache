{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    // special handling: width fixed, height unconstrained\n    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {\n        double w0 = constraint.getWidth();\n        // top\n        double hTop = 0.0;\n        if (this.topBlock != null) {\n            RectangleConstraint tc = new RectangleConstraint(\n                w0, null, LengthConstraintType.FIXED,\n                0.0, null, LengthConstraintType.NONE\n            );\n            Size2D size = this.topBlock.arrange(g2, tc);\n            hTop = size.height;\n        }\n        // bottom\n        double hBottom = 0.0;\n        if (this.bottomBlock != null) {\n            RectangleConstraint bc = new RectangleConstraint(\n                w0, null, LengthConstraintType.FIXED,\n                0.0, null, LengthConstraintType.NONE\n            );\n            Size2D size = this.bottomBlock.arrange(g2, bc);\n            hBottom = size.height;\n        }\n        // left and right\n        double leftWidth = 0.0;\n        double rightWidth = 0.0;\n        double midHeight = 0.0;\n        if (this.leftBlock != null) {\n            RectangleConstraint lc = new RectangleConstraint(\n                0.0, new Range(0.0, w0),\n                LengthConstraintType.RANGE,\n                0.0, null, LengthConstraintType.NONE\n            );\n            Size2D size = this.leftBlock.arrange(g2, lc);\n            leftWidth = size.width;\n            midHeight = Math.max(midHeight, size.height);\n        }\n        if (this.rightBlock != null) {\n            double avail = Math.max(0.0, w0 - leftWidth);\n            RectangleConstraint rc = new RectangleConstraint(\n                0.0, new Range(0.0, avail),\n                LengthConstraintType.RANGE,\n                0.0, null, LengthConstraintType.NONE\n            );\n            Size2D size = this.rightBlock.arrange(g2, rc);\n            rightWidth = size.width;\n            midHeight = Math.max(midHeight, size.height);\n        }\n        // center\n        double centerWidth = Math.max(0.0, w0 - leftWidth - rightWidth);\n        if (this.centerBlock != null) {\n            RectangleConstraint cc = new RectangleConstraint(\n                centerWidth, null, LengthConstraintType.FIXED,\n                0.0, null, LengthConstraintType.NONE\n            );\n            Size2D size = this.centerBlock.arrange(g2, cc);\n            midHeight = Math.max(midHeight, size.height);\n        }\n        // set bounds\n        double y = 0.0;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(\n                new Rectangle2D.Double(0.0, y, w0, hTop)\n            );\n            y += hTop;\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(\n                new Rectangle2D.Double(0.0, y, leftWidth, midHeight)\n            );\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(\n                new Rectangle2D.Double(leftWidth, y, centerWidth, midHeight)\n            );\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(\n                new Rectangle2D.Double(leftWidth + centerWidth, y,\n                                       rightWidth, midHeight)\n            );\n        }\n        y += midHeight;\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(\n                new Rectangle2D.Double(0.0, y, w0, hBottom)\n            );\n        }\n        return new Size2D(w0, hTop + midHeight + hBottom);\n    }\n\n    // fixed-height logic (unchanged)\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight() - h[0]),\n                LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth() - w[2]),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n    h[4] = h[2];\n    w[4] = constraint.getWidth() - w[3] - w[2];\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                w[3], h[3]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                h[4]));\n    }\n    return new Size2D(constraint.getWidth(), constraint.getHeight());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}