{
    "generation": "/**\n * Arranges the items within a container.\n *\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    double maxHeight = constraint.getHeight();\n    if (Double.isNaN(maxHeight)) {\n        maxHeight = Double.POSITIVE_INFINITY;\n    }\n\n    double maxForBottom = maxHeight - h[0];\n    if (maxForBottom < 0.0) {\n        maxForBottom = 0.0;\n    }\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, maxForBottom), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    double centerHeight = maxHeight;\n    if (!Double.isInfinite(centerHeight)) {\n        centerHeight = maxHeight - h[0] - h[1];\n        if (centerHeight < 0.0) {\n            centerHeight = 0.0;\n        }\n    } else {\n        centerHeight = Math.max(0.0, 0.0); // fallback\n    }\n    h[2] = centerHeight;\n\n    double maxForLeftWidth = constraint.getWidth();\n    if (Double.isNaN(maxForLeftWidth)) {\n        maxForLeftWidth = Double.POSITIVE_INFINITY;\n    }\n\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, maxForLeftWidth),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n\n    double maxForRightWidth = maxForLeftWidth;\n    if (!Double.isInfinite(maxForRightWidth)) {\n        maxForRightWidth = maxForLeftWidth - w[2];\n        if (maxForRightWidth < 0.0) {\n            maxForRightWidth = 0.0;\n        }\n    }\n\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n                new Range(0.0, maxForRightWidth),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n\n    double centerWidth = maxForLeftWidth;\n    if (!Double.isInfinite(centerWidth)) {\n        centerWidth = maxForLeftWidth - w[2] - w[3];\n        if (centerWidth < 0.0) {\n            centerWidth = 0.0;\n        }\n    } else {\n        centerWidth = Math.max(0.0, 0.0);\n    }\n    h[4] = h[2];\n    w[4] = centerWidth;\n\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                w[3], h[3]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                h[4]));\n    }\n    double totalHeight = h[0] + h[2] + h[1];\n    double totalWidth = constraint.getWidth();\n    return new Size2D(totalWidth, totalHeight);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}