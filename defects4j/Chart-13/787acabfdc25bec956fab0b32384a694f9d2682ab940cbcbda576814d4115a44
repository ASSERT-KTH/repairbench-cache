{
    "generation": "/**\n * Arranges the items within a container.\n *\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n *\n * @return The container size after the arrangement.\n */\nprotected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    double maxHeight = 0.0;\n\n    // Arrange top block\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                RectangleConstraint.NONE, LengthConstraintType.NONE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n        maxHeight += h[0];\n    }\n\n    w[1] = w[0];\n    // Arrange bottom block\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                RectangleConstraint.NONE, LengthConstraintType.NONE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n        maxHeight += h[1];\n    }\n\n    // Calculate available height for middle row (left, center, right)\n    double availableHeight = 0.0;\n    if (constraint.getHeight() != Double.POSITIVE_INFINITY) {\n        availableHeight = Math.max(constraint.getHeight() - maxHeight, 0.0);\n    }\n    double leftHeight = availableHeight;\n    double rightHeight = availableHeight;\n    double centerHeight = availableHeight;\n\n    // If both top and bottom are null, center, left, right determine height.\n    // If at least one is present, these get only the remainder, but if the constraint is NONE, let them expand.\n\n    // Arrange left block\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, w[0]),\n                LengthConstraintType.RANGE, leftHeight, null,\n                (availableHeight > 0.0) ? LengthConstraintType.FIXED : LengthConstraintType.NONE);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n        h[2] = size.height; // Could be largest\n        if (availableHeight == 0.0) {\n            maxHeight = Math.max(maxHeight, h[2]);\n        }\n    }\n\n    // Arrange right block\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n                new Range(0.0, w[0] - w[2]),\n                LengthConstraintType.RANGE, rightHeight, null,\n                (availableHeight > 0.0) ? LengthConstraintType.FIXED : LengthConstraintType.NONE);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n        h[3] = size.height;\n        if (availableHeight == 0.0) {\n            maxHeight = Math.max(maxHeight, h[3]);\n        }\n    }\n\n    // Available width for center block\n    w[4] = w[0] - w[2] - w[3];\n    if (w[4] < 0.0) {\n        w[4] = 0.0;\n    }\n    h[4] = centerHeight;\n\n    Size2D centerSize = null;\n    if (this.centerBlock != null) {\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        centerSize = this.centerBlock.arrange(g2, c5);\n        h[4] = centerSize.height;\n        if (availableHeight == 0.0) {\n            maxHeight = Math.max(maxHeight, h[4]);\n        }\n    }\n\n    // If availableHeight was 0 (NONE on height constraint), calculate max of h[2], h[3], h[4]\n    if (constraint.getHeight() == 0.0 || constraint.getHeight() == Double.POSITIVE_INFINITY) {\n        if (this.leftBlock != null || this.centerBlock != null || this.rightBlock != null) {\n            double maxMiddleHeight = Math.max(h[2], Math.max(h[3], h[4]));\n            maxHeight += maxMiddleHeight;\n            leftHeight = maxMiddleHeight;\n            rightHeight = maxMiddleHeight;\n            h[2] = h[3] = h[4] = maxMiddleHeight;\n        }\n    } else {\n        leftHeight = rightHeight = centerHeight;\n        maxHeight = Math.max(constraint.getHeight(), maxHeight);\n    }\n\n    // Set block bounds\n    double topY = 0.0;\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));\n        topY = h[0];\n    }\n    double bottomY = maxHeight - (this.bottomBlock != null ? h[1] : 0.0);\n\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, bottomY, w[1], h[1]));\n    }\n    // Calculate the heights for left, center, right blocks\n    double middleY = topY;\n    double middleHeight = maxHeight - (this.topBlock != null ? h[0] : 0.0) - (this.bottomBlock != null ? h[1] : 0.0);\n\n    if (middleHeight < 0.0) {\n        middleHeight = 0.0;\n    }\n\n    // Adjust the heights for the blocks in the middle row, use calculated heights\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, middleY, w[2], middleHeight));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[0] - w[3], middleY, w[3], middleHeight));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], middleY, w[4], middleHeight));\n    }\n\n    return new Size2D(w[0], maxHeight);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}