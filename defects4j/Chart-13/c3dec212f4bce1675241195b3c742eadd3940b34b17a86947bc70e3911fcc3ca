{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n\n    double totalWidth = constraint.getWidth();\n    LengthConstraintType heightType = constraint.getHeightConstraintType();\n\n    // free (or range) height: compute each child's preferred height and sum/stack\n    if (heightType != LengthConstraintType.FIXED) {\n        // 1. top block (width fixed, height free)\n        double topH = 0.0;\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(\n                totalWidth, null, LengthConstraintType.FIXED,\n                0.0,    null, LengthConstraintType.NONE\n            );\n            Size2D s1 = this.topBlock.arrange(g2, c1);\n            topH = s1.height;\n        }\n        // 2. bottom block (width fixed, height free)\n        double bottomH = 0.0;\n        if (this.bottomBlock != null) {\n            RectangleConstraint c2 = new RectangleConstraint(\n                totalWidth, null, LengthConstraintType.FIXED,\n                0.0,       null, LengthConstraintType.NONE\n            );\n            Size2D s2 = this.bottomBlock.arrange(g2, c2);\n            bottomH = s2.height;\n        }\n        // 3. left block (height free, width range)\n        double leftW = 0.0, leftH = 0.0;\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(\n                0.0,\n                new Range(0.0, totalWidth),\n                LengthConstraintType.RANGE,\n                0.0, null,\n                LengthConstraintType.NONE\n            );\n            Size2D s3 = this.leftBlock.arrange(g2, c3);\n            leftW = s3.width;\n            leftH = s3.height;\n        }\n        // 4. right block (height free, width range)\n        double rightW = 0.0, rightH = 0.0;\n        if (this.rightBlock != null) {\n            RectangleConstraint c4 = new RectangleConstraint(\n                0.0,\n                new Range(0.0, Math.max(0.0, totalWidth - leftW)),\n                LengthConstraintType.RANGE,\n                0.0, null,\n                LengthConstraintType.NONE\n            );\n            Size2D s4 = this.rightBlock.arrange(g2, c4);\n            rightW = s4.width;\n            rightH = s4.height;\n        }\n        // 5. center block (width fixed by leftover, height free)\n        double centerW = Math.max(0.0, totalWidth - leftW - rightW);\n        double centerH = 0.0;\n        if (this.centerBlock != null) {\n            RectangleConstraint c5 = new RectangleConstraint(\n                centerW, null, LengthConstraintType.FIXED,\n                0.0,     null, LengthConstraintType.NONE\n            );\n            Size2D s5 = this.centerBlock.arrange(g2, c5);\n            centerH = s5.height;\n        }\n        // compute the maximum of the three middle-row heights\n        double midH = Math.max(centerH, Math.max(leftH, rightH));\n\n        // now set the bounds of each block\n        double y = 0.0;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(\n                0.0, y, totalWidth, topH\n            ));\n        }\n        y += topH;\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(\n                0.0, y, leftW, midH\n            ));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(\n                leftW, y, centerW, midH\n            ));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(\n                leftW + centerW, y, rightW, midH\n            ));\n        }\n        y += midH;\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(\n                0.0, y, totalWidth, bottomH\n            ));\n        }\n\n        // final container height is sum of top, mid, bottom\n        double resultH = topH + midH + bottomH;\n        // if there's a height-range constraint, clamp to [min, max]\n        if (heightType == LengthConstraintType.RANGE) {\n            Range hr = constraint.getHeightRange();\n            resultH = Math.max(hr.getLowerBound(),\n                               Math.min(resultH, hr.getUpperBound()));\n        }\n        return new Size2D(totalWidth, resultH);\n    }\n\n    // fixed height \u2013 original implementation\n    double[] w = new double[5];\n    double[] h = new double[5];\n\n    w[0] = totalWidth;\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(\n            w[0], null, LengthConstraintType.FIXED,\n            0.0,\n            new Range(0.0, constraint.getHeight()),\n            LengthConstraintType.RANGE\n        );\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(\n            w[0], null, LengthConstraintType.FIXED,\n            0.0,\n            new Range(0.0, constraint.getHeight() - h[0]),\n            LengthConstraintType.RANGE\n        );\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n\n    h[2] = constraint.getHeight() - h[0] - h[1];\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(\n            0.0,\n            new Range(0.0, totalWidth),\n            LengthConstraintType.RANGE,\n            h[2], null,\n            LengthConstraintType.FIXED\n        );\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(\n            0.0,\n            new Range(0.0, totalWidth - w[2]),\n            LengthConstraintType.RANGE,\n            h[2], null,\n            LengthConstraintType.FIXED\n        );\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n\n    h[4] = h[2];\n    w[4] = totalWidth - w[2] - w[3];\n\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(\n            0.0, 0.0, w[0], h[0]\n        ));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(\n            0.0, h[0] + h[2], w[1], h[1]\n        ));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(\n            0.0, h[0], w[2], h[2]\n        ));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(\n            w[2] + w[4], h[0], w[3], h[3]\n        ));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(\n            w[2], h[0], w[4], h[4]\n        ));\n    }\n\n    return new Size2D(totalWidth, constraint.getHeight());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}