{
    "generation": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n        RectangleConstraint constraint) {\n    // If the height is not fixed then we compute the natural height (fixed width only)\n    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {\n        double width = constraint.getWidth();\n        double topHeight = 0.0;\n        if (this.topBlock != null) {\n            // Arrange the top block with fixed width and no height constraint.\n            RectangleConstraint topConstraint = new RectangleConstraint(width, null, LengthConstraintType.FIXED);\n            Size2D topSize = this.topBlock.arrange(g2, topConstraint);\n            topHeight = topSize.height;\n        }\n        double bottomHeight = 0.0;\n        if (this.bottomBlock != null) {\n            // Arrange the bottom block similarly.\n            RectangleConstraint bottomConstraint = new RectangleConstraint(width, null, LengthConstraintType.FIXED);\n            Size2D bottomSize = this.bottomBlock.arrange(g2, bottomConstraint);\n            bottomHeight = bottomSize.height;\n        }\n        // Arrange the left and right blocks with no height constraint so that their natural sizes are used.\n        Size2D leftSize = new Size2D(0.0, 0.0);\n        if (this.leftBlock != null) {\n            leftSize = this.leftBlock.arrange(g2, RectangleConstraint.NONE);\n        }\n        Size2D rightSize = new Size2D(0.0, 0.0);\n        if (this.rightBlock != null) {\n            rightSize = this.rightBlock.arrange(g2, RectangleConstraint.NONE);\n        }\n        // The center area gets the remaining width.\n        double centerAvailWidth = width - leftSize.width - rightSize.width;\n        if (centerAvailWidth < 0) {\n            centerAvailWidth = 0;\n        }\n        Size2D centerSize = new Size2D(0.0, 0.0);\n        if (this.centerBlock != null) {\n            RectangleConstraint centerConstraint = new RectangleConstraint(centerAvailWidth, null, LengthConstraintType.FIXED);\n            centerSize = this.centerBlock.arrange(g2, centerConstraint);\n        }\n        // The height for the middle (central) area is the maximum of the natural heights.\n        double middleHeight = Math.max(centerSize.height, Math.max(leftSize.height, rightSize.height));\n        double totalHeight = topHeight + middleHeight + bottomHeight;\n\n        // Set the bounds: top first...\n        double y = 0.0;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, y, width, topHeight));\n            y += topHeight;\n        }\n        // Left and right are positioned in the middle area.\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, y, leftSize.width, middleHeight));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(width - rightSize.width, y, rightSize.width, middleHeight));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(leftSize.width, y, centerAvailWidth, middleHeight));\n        }\n        y += middleHeight;\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, y, width, bottomHeight));\n        }\n        return new Size2D(width, totalHeight);\n    }\n    // Else: use the fixed height calculations, with safety checks.\n    else {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        w[0] = constraint.getWidth();\n        if (this.topBlock != null) {\n            RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0,\n                    new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE);\n            Size2D size = this.topBlock.arrange(g2, c1);\n            h[0] = size.height;\n        }\n        w[1] = w[0];\n        if (this.bottomBlock != null) {\n            double available = Math.max(0.0, constraint.getHeight() - h[0]);\n            RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                    LengthConstraintType.FIXED, 0.0, new Range(0.0, available),\n                    LengthConstraintType.RANGE);\n            Size2D size = this.bottomBlock.arrange(g2, c2);\n            h[1] = size.height;\n        }\n        h[2] = Math.max(0.0, constraint.getHeight() - h[1] - h[0]);\n        if (this.leftBlock != null) {\n            RectangleConstraint c3 = new RectangleConstraint(0.0,\n                    new Range(0.0, constraint.getWidth()),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.leftBlock.arrange(g2, c3);\n            w[2] = size.width;\n        }\n        h[3] = h[2];\n        if (this.rightBlock != null) {\n            double availableWidth = Math.max(0.0, constraint.getWidth() - w[2]);\n            RectangleConstraint c4 = new RectangleConstraint(0.0,\n                    new Range(0.0, availableWidth),\n                    LengthConstraintType.RANGE, h[2], null,\n                    LengthConstraintType.FIXED);\n            Size2D size = this.rightBlock.arrange(g2, c4);\n            w[3] = size.width;\n        }\n        h[4] = h[2];\n        w[4] = Math.max(0.0, constraint.getWidth() - w[3] - w[2]);\n        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n        if (this.centerBlock != null) {\n            this.centerBlock.arrange(g2, c5);\n        }\n\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));\n        }\n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));\n        }\n        return new Size2D(constraint.getWidth(), constraint.getHeight());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}