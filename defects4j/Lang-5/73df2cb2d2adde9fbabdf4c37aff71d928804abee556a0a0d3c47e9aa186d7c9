{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"en__POSIX\")  = new Locale(\"en\", \"\", \"POSIX\")\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\")\n     *   LocaleUtils.toLocale(\"_GB_POSIX\")  = new Locale(\"\", \"GB\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase letters.\n     * The country code must be uppercase letters.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        if (len == 0) {\n             throw new IllegalArgumentException(\"Invalid locale format: []\");\n        }\n\n        // Handle the _CC_VVV and _CC cases first (country, variant only)\n        if (str.charAt(0) == '_') {\n            if (len < 3) { // Must be at least _CC\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            // Check country code: 2 uppercase letters\n            if (!Character.isLetter(ch1) || !Character.isLetter(ch2) ||\n                !Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            if (len == 3) { // Format: _CC\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            // Format must be _CC_VVV...\n            if (len < 5) { // Must be at least _CC_V\n                 // This catches \"_GBA\" (invalid) and also \"_GB_\" (invalid length 4)\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(3) != '_') { // Must have underscore separator after country\n                 // This catches \"_GBAP\"\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Variant is everything after _CC_\n            if (str.substring(4).isEmpty()) { // Check specifically for empty variant like \"_GB_\"\n                 // Note: Locale(\"\", \"GB\", \"\") is represented as \"_GB\", not \"_GB_\"\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(\"\", str.substring(1, 3), str.substring(4)); // _CC_VVV...\n        }\n\n        // Now handle the ll, ll_CC, ll__VVV, ll_CC_VVV cases\n\n        // Language code: first 2 chars, lowercase letters\n        if (len < 2) { // e.g., \"e\" is invalid length\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch0 = str.charAt(0);\n        final char ch1 = str.charAt(1);\n        if (!Character.isLetter(ch0) || !Character.isLetter(ch1) ||\n            !Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n            // Check language: 2 lowercase letters\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (len == 2) { // Format: ll\n            return new Locale(str.substring(0, 2));\n        }\n\n        // Must have an underscore separator after language (for lengths > 2)\n        if (str.charAt(2) != '_') {\n            // Handles \"enX\", \"eng\" (invalid length/format) etc.\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Now we have ll_...\n\n        // Check for ll__VVV format (empty country)\n        if (len == 3) { // Handles \"en_\" (invalid format)\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(3) == '_') { // Format: ll__VVV...\n             if (len < 5) { // Must be at least ll__V\n                  throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Handles \"en__\"\n             }\n             // Variant is everything after ll__\n             if (str.substring(4).isEmpty()) { // Ensure variant is not empty e.g. \"en__\"\n                 // This should technically be caught by len < 5 check, but good to be explicit\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(str.substring(0, 2), \"\", str.substring(4)); // ll__VVV...\n        }\n\n\n        // Format must be ll_CC... or ll_CC_VVV... (non-empty country)\n        if (len < 5) { // Must be at least ll_CC\n            // Handles \"en_G\", \"en_G_\" etc.\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // Country code: 2 uppercase letters at index 3, 4\n        final char ch3 = str.charAt(3);\n        final char ch4 = str.charAt(4);\n        if (!Character.isLetter(ch3) || !Character.isLetter(ch4) ||\n            !Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n            // Check country: 2 uppercase letters\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (len == 5) { // Format: ll_CC\n            return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n\n        // Format must be ll_CC_VVV...\n        if (len < 7) { // Must be at least ll_CC_V\n            // Handles \"en_GBX\" (invalid format) and \"en_GB_\" (invalid length 6)\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(5) != '_') { // Must have underscore separator after country\n            // Handles \"en_GBX...\"\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // Variant is everything after ll_CC_\n        if (str.substring(6).isEmpty()) { // Check for empty variant after underscore (\"en_GB_\")\n             // Note: Locale(\"en\", \"GB\", \"\") is represented as \"en_GB\", not \"en_GB_\"\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6)); // ll_CC_VVV...\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}