{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\")\n     *   LocaleUtils.toLocale(\"_GB_xxx\")    = new Locale(\"\", \"GB\", \"xxx\")     (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        // Check for invalid lengths (1, 4, 6) explicitly. Lengths 2, 3, 5, 7+ are potentially valid.\n        if (len != 2 && len != 3 && len < 5) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch0 = str.charAt(0);\n        if (ch0 == '_') {\n            // Format: _CC or _CC_variant\n            if (len < 3) { // Must be at least _CC\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            // Check country code: must be uppercase letters\n            // Note: Locale constructor checks if country is valid ISO code, but this method requires uppercase letters.\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 3) { // Format: _CC\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            // Must be _CC_variant format now (len >= 5)\n            if (len < 5) { // Cannot be length 4: _CCX\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(3) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Format: _CC_variant\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n\n        } else { // Starts with language code: ll or ll_CC or ll_CC_variant\n            // Check language code: must be lowercase letters\n            // Note: Locale constructor checks if language is valid ISO code, but this method requires lowercase letters.\n            if (len < 2) { // Should have been caught by initial length check, but included for robustness\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 2) { // Format: ll\n                return new Locale(str);\n            }\n            // Must be ll_CC or ll_CC_variant (len >= 5)\n            if (len < 5) { // Cannot be length 3 or 4: llX or ll_X\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Check country code: must be uppercase letters\n            final char ch3 = str.charAt(3);\n            final char ch4 = str.charAt(4);\n            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) { // Format: ll_CC\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n            // Must be ll_CC_variant format now (len >= 7)\n            if (len < 7) { // Cannot be length 6: ll_CC_X\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(5) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Format: ll_CC_variant\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}