{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\")\n     *   LocaleUtils.toLocale(\"_GB_xxx\")    = new Locale(\"\", \"GB\", \"xxx\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n\n        // Check for general minimum length.\n        // A locale must have at least 2 characters (e.g., \"en\")\n        // or 3 characters if starting with underscore (e.g., \"_GB\").\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final char ch0 = str.charAt(0);\n\n        // Case 1: Starts with an underscore, e.g., \"_GB\" or \"_GB_xxx\"\n        if (ch0 == '_') {\n            if (len < 3) { // \"_G\" is too short\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                // \"_Gb\", \"_gB\", \"_1B\", \"_G1\" are invalid\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 3) { // \"_CC\" format\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            // Must be \"_CC_VVV\" format\n            if (str.charAt(3) != '_') { // \"_GBX\" (missing underscore) or \"_GBAP\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len < 5) { // \"_GB_\" is too short, must have variant character\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Variant can be any character string (after \"_CC_\")\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n        }\n\n        // Case 2: Starts with a language code, e.g., \"en\", \"en_GB\", \"en__xxx\"\n        final char ch1 = str.charAt(1);\n        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n            // \"EN\", \"eN\", \"12\", \"A\", etc. are invalid\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (len == 2) { // \"ll\" format\n            return new Locale(str);\n        }\n\n        // For formats longer than \"ll\", they must use underscores as separators.\n        // Minimum length for \"ll_CC\" or \"ll__VVV\" is 5.\n        if (len < 5) { // \"en_\", \"en_G\" are too short\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(2) != '_') { // \"enGB\" (missing underscore)\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final char ch3 = str.charAt(3);\n        if (ch3 == '_') { // \"ll__VVV\" format (language and variant, no country)\n            // Example: \"en__US\"\n            // Variant must be present, so \"en__\" (len 4) should already be caught by len < 5.\n            // So, substring(4) will have at least one char.\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        }\n\n        // Must be \"ll_CC\" or \"ll_CC_VVV\" format\n        final char ch4 = str.charAt(4);\n        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n            // \"en_gB\", \"en_12\" are invalid country codes\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (len == 5) { // \"ll_CC\" format\n            return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n\n        // Must be \"ll_CC_VVV\" format\n        if (str.charAt(5) != '_') { // \"en_GBX\" (missing underscore)\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len < 7) { // \"en_GB_\" is too short, must have variant character\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // Variant can be any character string (after \"ll_CC_\")\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}