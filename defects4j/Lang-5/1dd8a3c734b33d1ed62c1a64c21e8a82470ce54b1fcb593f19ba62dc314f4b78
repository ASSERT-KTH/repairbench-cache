{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"en__POSIX\")  = new Locale(\"en\", \"\", \"POSIX\")\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\")\n     *   LocaleUtils.toLocale(\"_GB_POSIX\")  = new Locale(\"\", \"GB\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        if (len == 0) {\n             throw new IllegalArgumentException(\"Invalid locale format: Empty string\");\n        }\n\n        // Handle formats starting with _\n        // Format: _CC or _CC_VVV\n        if (str.charAt(0) == '_') {\n            if (len < 3) { // Needs to be at least _CC\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            // LANG-941: Also allow digits for country code, required for UN M.49\n            // But the tests require uppercase letters based on testLang865.\n            // Assuming uppercase letters required based on tests and Javadoc.\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                throw new IllegalArgumentException(\"Invalid locale format: Country code must be uppercase - \" + str);\n            }\n            if (len == 3) { // _CC\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            if (len < 5) { // Needs to be _CC_VVV requires len >= 5\n                 throw new IllegalArgumentException(\"Invalid locale format: Expected underscore after country code - \" + str);\n            }\n            if (str.charAt(3) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: Expected underscore after country code - \" + str);\n            }\n            // Variant can be any length >= 1 (_CC_V)\n            return new Locale(\"\", str.substring(1, 3), str.substring(4)); // _CC_VVV\n        }\n\n        // Handle formats starting with language code ll\n        // Format: ll or ll_CC or ll_CC_VVV or ll__VVV\n\n        // Must check length >= 2 first\n        if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final char ch0 = str.charAt(0);\n        final char ch1 = str.charAt(1);\n        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n             throw new IllegalArgumentException(\"Invalid locale format: Language code must be lowercase - \" + str);\n        }\n        if (len == 2) { // ll\n             return new Locale(str); // Use Locale(language) constructor\n        }\n\n        // Format must be ll_CC, ll_CC_VVV, or ll__VVV now. Minimum length is 5.\n        if (len < 5) {\n             throw new IllegalArgumentException(\"Invalid locale format: Length must be 2 or >= 5 - \" + str);\n        }\n        if (str.charAt(2) != '_') {\n             throw new IllegalArgumentException(\"Invalid locale format: Expecting underscore after language code - \" + str);\n        }\n\n        final char ch3 = str.charAt(3);\n        if (ch3 == '_') { // ll__VVV format\n            // Variant must exist, requires len >= 5 (ll__V)\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        }\n\n        // Format must be ll_CC or ll_CC_VVV\n        final char ch4 = str.charAt(4);\n        // LANG-941: Allow digits for country code? Tests require uppercase letters. Sticking to letters.\n        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n             throw new IllegalArgumentException(\"Invalid locale format: Country code must be uppercase - \" + str);\n        }\n        if (len == 5) { // ll_CC\n             return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n\n        // Format must be ll_CC_VVV\n        if (len < 7) { // Requires ll_CC_V minimum\n             throw new IllegalArgumentException(\"Invalid locale format: Length must be 5 or >= 7 for language_country locale - \" + str);\n        }\n        if (str.charAt(5) != '_') {\n             throw new IllegalArgumentException(\"Invalid locale format: Expecting underscore after country code - \" + str);\n        }\n        // Variant must exist, requires len >= 7 (ll_CC_V)\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}