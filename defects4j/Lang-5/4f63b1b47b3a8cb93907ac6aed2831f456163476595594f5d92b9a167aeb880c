{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\", \"\")\n     *   LocaleUtils.toLocale(\"_GB_P\")      = new Locale(\"\", \"GB\", \"P\")\n     *   LocaleUtils.toLocale(\"_GB_POSIX\")  = new Locale(\"\", \"GB\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final char ch0 = str.charAt(0);\n\n        if (ch0 == '_') {\n            // Handles cases like \"_GB\", \"_GB_P\", where language is empty.\n            // Expected format: \"_CC\" or \"_CC_VV\"\n            if (len < 3) { // e.g., \"_G\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            // Country code must be two uppercase letters\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 3) { // e.g., \"_GB\"\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            // len > 3, must be \"_CC_VV\"\n            if (str.charAt(3) != '_') { // e.g., \"_GBX\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 4) { // e.g., \"_GB_\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // len > 4 and str.charAt(3) == '_'\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n\n        } else {\n            // Original logic for \"ll\", \"ll_CC\", \"ll_CC_VV\"\n            final char ch1 = str.charAt(1);\n            // Language code must be two lowercase letters\n            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 2) { // \"ll\"\n                return new Locale(str);\n            }\n            // len > 2, must have an underscore for \"ll_...\"\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            // len > 2 and str.charAt(2) == '_'\n            // Check for \"ll_CC\" or \"ll_CC_VV\"\n            if (len < 5) { // \"ll_C\" or \"ll_\" (too short for country code)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch3 = str.charAt(3);\n            final char ch4 = str.charAt(4);\n            // Country code must be two uppercase letters\n            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            if (len == 5) { // \"ll_CC\"\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n\n            // len > 5, must be \"ll_CC_VV\"\n            if (str.charAt(5) != '_') { // \"ll_CCX\" (variant not prefixed by underscore)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Variant present\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}