{
    "generation": "    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n\n        // LANG-865: Support for empty language code like \"_GB\" or \"_GB_POSIX\"\n        if (len >= 1 && str.charAt(0) == '_') {\n            if (len < 3) { // e.g. \"_G\" (len 2) or \"_\" (len 1)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            // Country code must be uppercase letters\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) { // e.g. \"_Gb\", \"_gB\", \"_1B\", \"_G1\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 3) { // e.g. \"_GB\"\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            // Must have underscore after country for variant\n            if (str.charAt(3) != '_') { // e.g. \"_GBX\" (country followed by non-underscore)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Variant part must be present (not empty after second underscore)\n            if (len < 5) { // e.g. \"_GB_\" (len 4)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(\"\", str.substring(1, 3), str.substring(4)); // e.g. \"_GB_P\", \"_GB_POSIX\"\n        }\n\n        // Original logic for language code present, e.g. \"en\", \"en_GB\", \"en_GB_xxx\"\n        if (len < 2) { // e.g. \"a\" (len 1)\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch0 = str.charAt(0);\n        final char ch1 = str.charAt(1);\n        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) { // e.g. \"EN\", \"aB\" (for len=2)\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) { // e.g. \"en\"\n            return new Locale(str);\n        }\n        // At this point, len > 2, and starts with \"ll\". It must be \"ll_...\"\n        // Minimum length for \"ll_CC\" or \"ll__V\" is 5.\n        if (len < 5) { // e.g. \"en_G\" (len 4)\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(2) != '_') { // e.g. \"enGB\" (len 4)\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch3 = str.charAt(3);\n        final char ch4 = str.charAt(4);\n\n        if (ch3 == '_') { // e.g. \"en__GB\" (country code is empty, variant \"GB\")\n            // This is \"ll__V\". Variant needs to be present (substring(4) won't be empty due to len >= 5 check above)\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        }\n\n        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) { // e.g. \"en_Gb\" (country code not uppercase)\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 5) { // e.g. \"en_GB\"\n            return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n        // At this point, len > 5. Must be \"ll_CC_...\"\n        // Minimum length for \"ll_CC_V\" is 7. Variant must be non-empty.\n        if (len < 7) { // e.g. \"en_GB_\" (len 6) - variant is empty, which is not allowed by this check\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(5) != '_') { // e.g. \"en_GBX\" (country followed by non-underscore)\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6)); // e.g. \"en_GB_xxx\"\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}