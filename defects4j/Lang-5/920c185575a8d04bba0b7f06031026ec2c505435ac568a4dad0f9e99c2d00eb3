{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"en__POSIX\")  = new Locale(\"en\", \"\", \"POSIX\")\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\", \"\")\n     *   LocaleUtils.toLocale(\"_GB_POSIX\")  = new Locale(\"\", \"GB\", \"POSIX\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase letters.\n     * The country code must be uppercase letters.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        // Check for minimum length requirements\n        if (len == 0 || (str.charAt(0) == '_' && len < 3) || len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final char ch0 = str.charAt(0);\n        if (ch0 == '_') {\n            // Format: _CC or _CC_variant\n            if (len < 3) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - must be at least 3 characters if starting with underscore\");\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            // Country code must be uppercase letters\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - second and third characters must be uppercase letters\");\n            }\n            if (len == 3) {\n                // Format: _CC\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            // Must be _CC_variant now\n            if (len < 5) { // Need at least _CC_v\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - expected format _CC or _CC_variant\");\n            }\n            if (str.charAt(3) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - expected underscore after country code\");\n            }\n            // Variant cannot be empty if underscore is present\n            if (len == 4) { // Handles _CC_\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - variant cannot be empty when underscore is present\");\n            }\n            // Format: _CC_variant\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n\n        } else {\n            // Format: ll or ll_CC or ll_CC_variant or ll__variant\n            final char ch1 = str.charAt(1);\n            // Language code must be lowercase letters\n            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - language code must be lowercase letters\");\n            }\n            if (len == 2) {\n                // Format: ll\n                return new Locale(str);\n            }\n            // Must have underscore separator beyond ll\n            if (len < 5) { // Need at least ll_CC or ll__v\n                // Check for languages with invalid format like \"abc\" or \"ab_c\"\n                 if (len == 3 && str.charAt(2) == '_') {\n                     // Allows ll_ but Locale constructor doesn't seem to support this directly without country/variant.\n                     // Strict validation rejects this.\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - expected country code or variant after underscore\");\n                 }\n                 if (len == 4 && str.charAt(2) == '_') {\n                    // Allows ll_C but country code must be 2 letters.\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - country code must be two uppercase letters\");\n                 }\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - expected format ll, ll_CC, ll__variant or ll_CC_variant\");\n            }\n            if (str.charAt(2) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - expected underscore after language code\");\n            }\n\n            final char ch3 = str.charAt(3);\n            if (ch3 == '_') {\n                // Format: ll__variant\n                if (len < 5) { // Need at least ll__v\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - variant cannot be empty when double underscore is present\");\n                }\n                // Format: ll__variant\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n\n            // Format: ll_CC or ll_CC_variant\n            final char ch4 = str.charAt(4);\n            // Country code must be uppercase letters\n            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - country code must be two uppercase letters\");\n            }\n            if (len == 5) {\n                // Format: ll_CC\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n            // Must be ll_CC_variant now\n            if (len < 7) { // Need at least ll_CC_v\n                // Check for formats like en_GBAP\n                if(str.charAt(5) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - expected underscore after country code for variant\");\n                }\n                // Handles ll_CC_ but variant must not be empty\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - variant cannot be empty when underscore is present\");\n            }\n            if (str.charAt(5) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - expected underscore after country code\");\n            }\n            // Variant cannot be empty if underscore is present after country\n            if (len == 6) { // Handles ll_CC_\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str + \" - variant cannot be empty when underscore is present\");\n            }\n            // Format: ll_CC_variant\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}