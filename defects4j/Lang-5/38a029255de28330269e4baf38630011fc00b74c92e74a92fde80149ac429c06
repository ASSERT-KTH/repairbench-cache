{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\", \"\")\n     *   LocaleUtils.toLocale(\"_GB_xxx\")    = new Locale(\"\", \"GB\", \"xxx\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n\n        // Find the positions of underscores\n        final int underscore1 = str.indexOf('_');\n        final int underscore2 = str.indexOf('_', underscore1 + 1);\n\n        // Case 1: No underscores (e.g., \"en\")\n        if (underscore1 == -1) {\n            // Must be exactly two lowercase characters for a language code\n            if (len != 2 || !Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1))) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(str);\n        }\n\n        // Case 2: One underscore (e.g., \"en_GB\" or \"_GB\")\n        if (underscore2 == -1) {\n            if (underscore1 == 0) { // Pattern: _CC (empty language, country)\n                // Country must be 2 uppercase characters\n                if (len != 3 || !Character.isUpperCase(str.charAt(1)) || !Character.isUpperCase(str.charAt(2))) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(\"\", str.substring(1, 3));\n            } else { // Pattern: LL_CC (language, country)\n                // Language must be 2 lowercase characters, country must be 2 uppercase characters\n                if (len != 5 || !Character.isLowerCase(str.charAt(0)) || !Character.isLowerCase(str.charAt(1)) ||\n                        !Character.isUpperCase(str.charAt(3)) || !Character.isUpperCase(str.charAt(4))) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n        }\n\n        // Case 3: Two underscores (e.g., \"en_GB_xxx\" or \"_GB_xxx\")\n        // This indicates a language, country, and variant.\n        \n        final String language = str.substring(0, underscore1);\n        final String country = str.substring(underscore1 + 1, underscore2);\n        final String variant = str.substring(underscore2 + 1);\n\n        if (language.length() == 0) { // Pattern: _CC_VVV (empty language, country, variant)\n            // Country must be 2 uppercase characters\n            if (country.length() != 2 || !Character.isUpperCase(country.charAt(0)) || !Character.isUpperCase(country.charAt(1))) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Variant cannot be empty\n            if (variant.isEmpty()) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(\"\", country, variant);\n\n        } else if (language.length() == 2) { // Pattern: LL_CC_VVV (language, country, variant)\n            // Language must be 2 lowercase characters\n            if (!Character.isLowerCase(language.charAt(0)) || !Character.isLowerCase(language.charAt(1))) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Country must be 2 uppercase characters\n            if (country.length() != 2 || !Character.isUpperCase(country.charAt(0)) || !Character.isUpperCase(country.charAt(1))) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Variant cannot be empty\n            if (variant.isEmpty()) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            return new Locale(language, country, variant);\n\n        } else { // Invalid format (e.g., language code is not 2 chars, or other unexpected structure)\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}