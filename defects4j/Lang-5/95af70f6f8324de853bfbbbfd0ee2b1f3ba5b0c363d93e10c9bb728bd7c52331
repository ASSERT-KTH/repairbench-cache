{
    "generation": "import java.util.Locale;\n\npublic class LocaleUtils {\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\")\n     *   LocaleUtils.toLocale(\"_GB_P\")      = new Locale(\"\", \"GB\", \"P\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n\n        // Check for basic length constraints\n        if (len < 2) { // Handles \"\", \"a\", \"A\", \"_\" etc.\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Handle language only (e.g., \"en\")\n        if (len == 2) {\n            final char ch0 = str.charAt(0);\n            final char ch1 = str.charAt(1);\n            if (Character.isLowerCase(ch0) && Character.isLowerCase(ch1)) {\n                return new Locale(str);\n            } else {\n                // Catches \"EN\", \"eN\", \"E\", \"_G\" (len 2)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        }\n\n        // Handle cases starting with underscore (e.g., \"_GB\", \"_GB_P\")\n        // This implies an empty language code.\n        if (str.charAt(0) == '_') {\n            // Must be at least \"_CC\" (length 3)\n            // Strings like \"_G\" (len 2) are already caught by the len == 2 block above.\n            if (len < 3) {\n                 // This specific condition is technically unreachable if len==2 is handled,\n                 // but defensively it ensures len >= 3 for this path.\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                // Catches \"_Gb\", \"_gB\", \"_1B\", \"_G1\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            if (len == 3) { // Format: \"_CC\"\n                return new Locale(\"\", str.substring(1, 3));\n            }\n\n            // If len > 3, it must be \"_CC_V\" format\n            if (str.charAt(3) != '_') { // Must have underscore after country\n                // Catches \"_GBX\" where X is not '_' (e.g., \"_GBAP\")\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len < 5) { // Format: \"_CC_\" (length 4) - variant missing\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Format: \"_CC_V\" (length >= 5)\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n        }\n\n        // Handle standard formats: \"ll_CC\", \"ll_CC_V\", \"ll__V\"\n        // At this point, len >= 3 and str does not start with '_'.\n        // Minimum valid length for these is \"ll_CC\" (5 chars).\n        if (len < 5) { // Catches \"en_\", \"en_G\" (len 3, 4) etc.\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final char ch0 = str.charAt(0);\n        final char ch1 = str.charAt(1);\n        // Language code must be lowercase\n        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Must have underscore after language\n        if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final char ch3 = str.charAt(3);\n        if (ch3 == '_') { // Format: \"ll__V\" (country empty)\n            // Variant starts from index 4\n            // For \"en__\", len=4, already caught by len < 5 check\n            // For \"en__U\", len=5, str.substring(4) = \"U\"\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        }\n\n        // Must be \"ll_CC\" or \"ll_CC_V\"\n        final char ch4 = str.charAt(4);\n        // Country code must be uppercase\n        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (len == 5) { // Format: \"ll_CC\"\n            return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n\n        // Must be \"ll_CC_V\"\n        // Min length for \"ll_CC_V\" is 7 (2+1+2+1+1)\n        if (len < 7) { // Catches \"ll_CC_\" (len 6) or \"ll_CCV\" (len 6)\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // Must have underscore after country\n        if (str.charAt(5) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Format: \"ll_CC_V\"\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}