{
    "generation": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final int len = str.length();\n    if (len == 0) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // Special handling for locales with no language (strings starting with '_')\n    if (str.charAt(0) == '_') {\n        // Must be at least 3 characters: \"_\" followed by a 2-letter country code.\n        if (len < 3) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch1 = str.charAt(1);\n        char ch2 = str.charAt(2);\n        // The country code must be exactly two uppercase letters.\n        if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)\n                || !Character.isLetter(ch1) || !Character.isLetter(ch2)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 3) {\n            // e.g., \"_GB\" -> Locale(\"\", \"GB\")\n            return new Locale(\"\", str.substring(1, 3));\n        }\n        // When longer than 3 characters, the character immediately after the country must be an underscore.\n        if (str.charAt(3) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // Variant must not be empty.\n        if (len == 4) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // e.g., \"_GB_P\" -> Locale(\"\", \"GB\", \"P\")\n        return new Locale(\"\", str.substring(1, 3), str.substring(4));\n    }\n\n    // Handle locales with a language (must be at least 2 characters long)\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch0 = str.charAt(0);\n    final char ch1 = str.charAt(1);\n    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        // e.g., \"en\" -> Locale(\"en\", \"\")\n        return new Locale(str);\n    }\n    if (len < 5) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch3 = str.charAt(3);\n    if (ch3 == '_') {\n        // e.g., \"en__POSIX\" -> Locale(\"en\", \"\", \"POSIX\")\n        return new Locale(str.substring(0, 2), \"\", str.substring(4));\n    }\n    final char ch4 = str.charAt(4);\n    if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 5) {\n        // e.g., \"en_GB\" -> Locale(\"en\", \"GB\")\n        return new Locale(str.substring(0, 2), str.substring(3, 5));\n    }\n    if (len < 7) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(5) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // e.g., \"en_GB_xxx\" -> Locale(\"en\", \"GB\", \"xxx\")\n    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}