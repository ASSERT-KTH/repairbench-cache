{
    "generation": "import java.util.Locale;\n\npublic class LocaleUtils {\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\")\n     *   LocaleUtils.toLocale(\"_GB_P\")      = new Locale(\"\", \"GB\", \"P\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase (or empty for _COUNTRY format).\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n\n        // LANG-865. Supports the format \"_COUNTRY\" or \"_COUNTRY_VARIANT\"\n        if (len >= 1 && str.charAt(0) == '_') {\n            if (len < 3) { // Minimum length for _COUNTRY (e.g., \"_GB\") is 3\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str); // e.g., \"_G\", \"_\"\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str); // e.g., \"_Gb\", \"_gB\", \"_1B\", \"_G1\"\n            }\n            if (len == 3) { // Only \"_CC\" format, e.g., \"_GB\"\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            // Length is greater than 3, so expecting \"_CC_VARIANT\"\n            if (str.charAt(3) != '_') { // e.g., \"_GBAP\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Length is 4 (\"_CC_\"). This is invalid as variant must be present.\n            if (len < 5) { // e.g., \"_GB_\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // Format \"_CC_VARIANT\", variant starts at index 4\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n\n        } else { // Original logic for language_country_variant (e.g., \"en\", \"en_GB\", \"en_GB_xxx\")\n            if (len < 2) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str); // e.g., \"a\"\n            }\n            final char ch0 = str.charAt(0);\n            final char ch1 = str.charAt(1);\n            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str); // e.g., \"EN\", \"En\"\n            }\n            if (len == 2) { // \"en\"\n                return new Locale(str);\n            }\n            // At this point, len > 2. Expecting \"ll_...\"\n            // Minimum length for \"ll_CC\" is 5.\n            // For \"ll_C\" (len=4), it should be invalid.\n            if (len < 5) { // e.g., \"en_\", \"en_G\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str); // e.g., \"enGB\"\n            }\n            final char ch3 = str.charAt(3);\n            // This handles \"ll__variant\" case (e.g., \"en__variant\")\n            if (ch3 == '_') {\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n            // This handles \"ll_CC\" or \"ll_CC_variant\"\n            final char ch4 = str.charAt(4);\n            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str); // e.g., \"en_gb\", \"en_gB\"\n            }\n            if (len == 5) { // \"en_GB\"\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n            // At this point, len > 5. Expecting \"ll_CC_variant\"\n            // Minimum length for \"ll_CC_V\" is 7.\n            if (len < 7) { // e.g., \"en_GB_\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(5) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str); // e.g., \"en_GBX\"\n            }\n            // Format \"ll_CC_variant\"\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}