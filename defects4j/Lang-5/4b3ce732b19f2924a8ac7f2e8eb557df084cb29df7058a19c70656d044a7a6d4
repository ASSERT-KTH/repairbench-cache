{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\")\n     *   LocaleUtils.toLocale(\"_GB_P\")      = new Locale(\"\", \"GB\", \"P\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n\n        // Check for minimum length\n        if (len < 2) { // e.g. \"\", \"a\", \"_\"\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final char ch0 = str.charAt(0);\n\n        // Handle variants starting with an underscore, e.g., \"_GB\", \"_GB_POSIX\"\n        if (ch0 == '_') {\n            if (len < 3) { // e.g., \"_G\" (too short for country)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) { // e.g., \"_Gb\", \"_gB\", \"_1B\", \"_G1\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 3) { // e.g., \"_GB\"\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            // If len > 3, it must be \"_CC_VVV\"\n            if (len < 5) { // e.g., \"_GB_\", \"_GB_X\" (too short for variant if '_' is present)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(3) != '_') { // e.g., \"_GBAP\" (must have underscore after country)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // At this point, format is \"_CC_VVV\" and len >= 5\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n\n        } else { // Assume it starts with a language code, e.g., \"en\", \"en_GB\", \"en_GB_xxx\", \"en__xxx\"\n            final char ch1 = str.charAt(1);\n            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) { // e.g., \"EN\", \"eN\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 2) { // e.g., \"en\"\n                return new Locale(str);\n            }\n            // At this point, len > 2, and \"ll\" is valid. Next must be '_'\n            if (str.charAt(2) != '_') { // e.g., \"enX\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // At this point, len > 2 and format is \"ll_\"\n            if (len < 5) { // e.g., \"en_\", \"en_G\" (too short for country or empty country)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch3 = str.charAt(3);\n            if (ch3 == '_') { // Empty country, e.g., \"en__xxx\"\n                if (len < 6) { // e.g., \"en__\" (too short for variant)\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n            }\n\n            // Must be \"ll_CC\" or \"ll_CC_VVV\"\n            final char ch4 = str.charAt(4);\n            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) { // e.g., \"en_gb\", \"en_gB\", \"en_Gb\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 5) { // e.g., \"en_GB\"\n                return new Locale(str.substring(0, 2), str.substring(3, 5));\n            }\n            // At this point, len > 5 and format is \"ll_CC\", must be \"ll_CC_VVV\"\n            if (len < 7) { // e.g., \"en_GB_\", \"en_GB_X\" (too short for variant)\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (str.charAt(5) != '_') { // e.g., \"en_GBX\"\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // At this point, format is \"ll_CC_VVV\"\n            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}