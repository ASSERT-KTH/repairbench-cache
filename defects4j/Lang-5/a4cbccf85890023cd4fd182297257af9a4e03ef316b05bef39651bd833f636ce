{
    "generation": "import java.util.Locale;\n\npublic class LocaleUtils {\n    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\")\n     *   LocaleUtils.toLocale(\"_GB_P\")      = new Locale(\"\", \"GB\", \"P\")\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase.\n     * The country code must be uppercase.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n\n        // Check for empty string or too short string\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Case: Starts with underscore, meaning no language code, only country or country_variant\n        if (str.charAt(0) == '_') {\n            // Must be at least \"_CC\" (length 3)\n            if (len < 3) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            // Country code must be two uppercase letters\n            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // If it's exactly \"_CC\"\n            if (len == 3) {\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            // If it's longer than \"_CC\", it must be \"_CC_VARIANT\"\n            // So, it must be at least \"_CC_X\" (length 5)\n            if (len < 5) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // The 4th character must be an underscore for a variant\n            if (str.charAt(3) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            // All checks passed, create Locale(\"\", \"CC\", \"VARIANT\")\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n        }\n\n        // Case: Starts with two lowercase letters (language code)\n        final char ch0 = str.charAt(0);\n        final char ch1 = str.charAt(1);\n        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // If it's just \"LL\"\n        if (len == 2) {\n            return new Locale(str);\n        }\n\n        // If longer than \"LL\", it must be \"LL_CC\" or \"LL_CC_VARIANT\"\n        // So, it must be at least \"LL_C\" (length 4) or \"LL_CC\" (length 5)\n        // Per spec, \"LL_C\" is invalid, must be \"LL_CC\", so min length 5 for country code\n        if (len < 5) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // The 3rd character must be an underscore\n        if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        final char ch3 = str.charAt(3);\n        final char ch4 = str.charAt(4);\n        // Country code must be two uppercase letters\n        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // If it's exactly \"LL_CC\"\n        if (len == 5) {\n            return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n\n        // If longer than \"LL_CC\", it must be \"LL_CC_VARIANT\"\n        // So, it must be at least \"LL_CC_X\" (length 7)\n        if (len < 7) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // The 6th character must be an underscore for a variant\n        if (str.charAt(5) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // All checks passed, create Locale(\"LL\", \"CC\", \"VARIANT\")\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}