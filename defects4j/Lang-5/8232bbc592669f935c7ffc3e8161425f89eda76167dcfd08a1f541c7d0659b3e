{
    "generation": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    if (str.isEmpty()) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // Handle locale strings starting with '_' (i.e. no language specified)\n    if (str.charAt(0) == '_') {\n        final int len = str.length();\n        if (len < 3) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // The next two characters must be the country code in uppercase letters.\n        char ch1 = str.charAt(1);\n        char ch2 = str.charAt(2);\n        if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2) ||\n            !Character.isLetter(ch1) || !Character.isLetter(ch2)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String country = str.substring(1, 3);\n        if (len == 3) {\n            return new Locale(\"\", country);\n        }\n        // For longer strings, the character at index 3 must be an underscore.\n        if (str.charAt(3) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // There must be a non-empty variant after the second underscore.\n        if (len == 4) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String variant = str.substring(4);\n        if (variant.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(\"\", country, variant);\n    }\n    \n    // Handle locale strings with a language component.\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch0 = str.charAt(0);\n    final char ch1 = str.charAt(1);\n    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        return new Locale(str);\n    }\n    if (len < 5) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch3 = str.charAt(3);\n    if (ch3 == '_') { // Pattern like \"en__variant\"\n        return new Locale(str.substring(0, 2), \"\", str.substring(4));\n    }\n    // Expect the country code to be two uppercase letters.\n    final char ch4 = str.charAt(4);\n    if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 5) {\n        return new Locale(str.substring(0, 2), str.substring(3, 5));\n    }\n    if (len < 7) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(5) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}