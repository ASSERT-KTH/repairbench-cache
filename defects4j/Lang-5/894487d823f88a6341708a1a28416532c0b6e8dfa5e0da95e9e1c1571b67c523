{
    "generation": "    /**\n     * <p>Converts a String to a Locale.</p>\n     *\n     * <p>This method takes the string format of a locale and creates the\n     * locale object from it.</p>\n     *\n     * <pre>\n     *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n     *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n     *   LocaleUtils.toLocale(\"_GB\")        = new Locale(\"\", \"GB\")\n     *   LocaleUtils.toLocale(\"_GB_xxx\")    = new Locale(\"\", \"GB\", \"xxx\")      (#)\n     * </pre>\n     *\n     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n     * Thus, the result from getVariant() may vary depending on your JDK.</p>\n     *\n     * <p>This method validates the input strictly.\n     * The language code must be lowercase letters.\n     * The country code must be uppercase letters.\n     * The separator must be an underscore.\n     * The length must be correct.\n     * </p>\n     *\n     * @param str  the locale String to convert, null returns null\n     * @return a Locale, null if null input\n     * @throws IllegalArgumentException if the string is an invalid format\n     */\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        if (len == 0) {\n            throw new IllegalArgumentException(\"Invalid locale format: []\");\n        }\n\n        // Handle the _CC format and _CC_variant format\n        if (str.charAt(0) == '_') {\n            if (len < 3) { // Must be at least _CC\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final char ch1 = str.charAt(1);\n            final char ch2 = str.charAt(2);\n            // Check if country code chars are uppercase letters\n            if (!Character.isLetter(ch1) || !Character.isUpperCase(ch1) ||\n                !Character.isLetter(ch2) || !Character.isUpperCase(ch2)) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (len == 3) {\n                // _CC format\n                return new Locale(\"\", str.substring(1, 3));\n            }\n            if (len < 5) { // Must be at least _CC_V\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Handles _CCX\n            }\n            if (str.charAt(3) != '_') { // Must have underscore after country\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Handles _CCXX...\n            }\n            // _CC_variant format\n            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n        }\n\n        // Handle the ll, ll_CC, ll__variant, ll_CC_variant formats\n\n        // Validate language code: ll\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Handles single char like \"e\"\n        }\n        final char ch0 = str.charAt(0);\n        final char ch1 = str.charAt(1);\n        // Check if language code chars are lowercase letters\n        if (!Character.isLetter(ch0) || !Character.isLowerCase(ch0) ||\n            !Character.isLetter(ch1) || !Character.isLowerCase(ch1)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (len == 2) {\n            // ll format\n            return new Locale(str);\n        }\n\n        // Format must be ll_??...\n        if (len < 5) {\n            // Covers llX, ll_X, ll_XX where XX is not valid country/variant separator\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Covers llXXX...\n        }\n\n        final char ch3 = str.charAt(3);\n        if (ch3 == '_') {\n            // Format ll__variant (Language and Variant only)\n             if (len < 5) { // Should be len >= 5: ll__V requires length 5 minimum\n                 // This check is slightly redundant as len < 5 was checked before,\n                 // but clarifies the minimum length for this specific format.\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Handles ll__\n             }\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        }\n\n        // Format ll_CC... (Language and Country)\n        final char ch4 = str.charAt(4);\n        // Validate country code: CC\n        if (!Character.isLetter(ch3) || !Character.isUpperCase(ch3) ||\n            !Character.isLetter(ch4) || !Character.isUpperCase(ch4)) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Handles ll_c? or ll_Cc etc.\n        }\n\n        if (len == 5) {\n            // Format ll_CC\n            return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n\n        // Format must be ll_CC_variant\n        if (len < 7) { // Must be at least ll_CC_V\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Handles ll_CCX\n        }\n        if (str.charAt(5) != '_') { // Must have underscore after country\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str); // Handles ll_CCXXX...\n        }\n        // Format ll_CC_variant\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}