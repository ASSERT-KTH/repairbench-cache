{
    "generation": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final int len = str.length();\n    if (len == 0) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    int languageStart = 0;\n    int languageEnd = 0;\n    int countryStart = 0;\n    int countryEnd = 0;\n    int variantStart = 0;\n\n    if (str.charAt(0) == '_') {\n        // Handle case where language is empty (e.g., \"_GB\" or \"_GB_XXX\")\n        languageStart = 1;\n        languageEnd = 1;\n        if (len < 3) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        countryStart = 1;\n        countryEnd = countryStart + 2;\n        if (countryEnd > len) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char chCountry1 = str.charAt(1);\n        char chCountry2 = str.charAt(2);\n        if (!Character.isUpperCase(chCountry1) || !Character.isUpperCase(chCountry2)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (len == 3) {\n            return new Locale(\"\", str.substring(1, 3), \"\");\n        }\n\n        if (str.charAt(3) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        variantStart = 4;\n        if (variantStart >= len) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(\"\", str.substring(1, 3), str.substring(4));\n\n    } else {\n        // Original logic for non-underline case\n        final int lenCheck = str.length();\n        if (lenCheck < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch0 = str.charAt(0);\n        final char ch1 = str.charAt(1);\n        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (lenCheck == 2) {\n            return new Locale(str);\n        }\n        if (lenCheck < 5) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch3 = str.charAt(3);\n        if (ch3 == '_') {\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        }\n        final char ch4 = str.charAt(4);\n        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (lenCheck == 5) {\n            return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n        if (lenCheck < 7) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(5) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}