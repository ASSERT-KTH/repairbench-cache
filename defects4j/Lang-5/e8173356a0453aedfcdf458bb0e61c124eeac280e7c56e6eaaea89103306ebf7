{
    "generation": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final int len = str.length();\n    // Handle locales with empty language (strings starting with '_')\n    if (str.charAt(0) == '_') {\n        // Must be at least 3 chars: _XX\n        if (len < 3) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char c1 = str.charAt(1);\n        char c2 = str.charAt(2);\n        if (!Character.isUpperCase(c1) || !Character.isUpperCase(c2) ||\n            !Character.isLetter(c1) || !Character.isLetter(c2)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String country = str.substring(1, 3);\n        if (len == 3) {\n            return new Locale(\"\", country);\n        }\n        // If there's more, the next char must be an underscore\n        if (str.charAt(3) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // There must be a non-empty variant\n        if (len == 4) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String variant = str.substring(4);\n        return new Locale(\"\", country, variant);\n    }\n    // Process locales with non-empty language\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    char c0 = str.charAt(0);\n    char c1 = str.charAt(1);\n    if (!Character.isLowerCase(c0) || !Character.isLowerCase(c1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String language = str.substring(0, 2);\n    if (len == 2) {\n        return new Locale(language);\n    }\n    // The third character must be an underscore\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // Check for the \"ll__variant\" syntax (empty country)\n    if (len >= 3 && str.charAt(3) == '_') {\n        if (len == 4) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        String variant = str.substring(4);\n        return new Locale(language, \"\", variant);\n    }\n    // Otherwise, expect a country code\n    if (len < 5) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    char countryChar1 = str.charAt(3);\n    char countryChar2 = str.charAt(4);\n    if (!Character.isUpperCase(countryChar1) || !Character.isUpperCase(countryChar2) ||\n        !Character.isLetter(countryChar1) || !Character.isLetter(countryChar2)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String country = str.substring(3, 5);\n    if (len == 5) {\n        return new Locale(language, country);\n    }\n    // If there is a variant, the next character must be an underscore and variant must be non-empty.\n    if (len < 7 || str.charAt(5) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    String variant = str.substring(6);\n    return new Locale(language, country, variant);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}