{
    "generation": "/**\n * <p>Converts a String to a Locale.</p>\n *\n * <p>This method takes the string format of a locale and creates the\n * locale object from it.</p>\n *\n * <pre>\n *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n * </pre>\n *\n * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n * Thus, the result from getVariant() may vary depending on your JDK.</p>\n *\n * <p>This method validates the input strictly.\n * The language code must be lowercase.\n * The country code must be uppercase.\n * The separator must be an underscore.\n * The length must be correct.\n * </p>\n *\n * @param str  the locale String to convert, null returns null\n * @return a Locale, null if null input\n * @throws IllegalArgumentException if the string is an invalid format\n */\npublic static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // handle locales starting with '_' (no language)\n    if (str.charAt(0) == '_') {\n        // must be at least \"_CC\"\n        if (len < 3) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char cc0 = str.charAt(1);\n        char cc1 = str.charAt(2);\n        if (!Character.isUpperCase(cc0) || !Character.isUpperCase(cc1)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // \"_CC\"\n        if (len == 3) {\n            return new Locale(\"\", str.substring(1, 3));\n        }\n        // must be at least \"_CC_V\"\n        if (len < 5) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(3) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // \"_CC_V...\"\n        return new Locale(\"\", str.substring(1, 3), str.substring(4));\n    }\n    // normal cases: language first\n    char ch0 = str.charAt(0);\n    char ch1 = str.charAt(1);\n    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // \"ll\"\n    if (len == 2) {\n        return new Locale(str);\n    }\n    // must be at least \"ll_CC\"\n    if (len < 5) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    char ch3 = str.charAt(3);\n    // \"ll__VVV\"\n    if (ch3 == '_') {\n        return new Locale(str.substring(0, 2), \"\", str.substring(4));\n    }\n    // \"ll_CC...\"\n    char ch4 = str.charAt(4);\n    if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // \"ll_CC\"\n    if (len == 5) {\n        return new Locale(str.substring(0, 2), str.substring(3, 5));\n    }\n    // must be at least \"ll_CC_V\"\n    if (len < 7) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(5) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // \"ll_CC_V...\"\n    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}