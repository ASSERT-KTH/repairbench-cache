{
    "generation": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    // Handle the case where the language is empty (i.e. string starts with an underscore)\n    if (str.startsWith(\"_\")) {\n        final int len = str.length();\n        if (len < 3) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // Country code must be at positions 1 and 2, and both must be uppercase\n        char c1 = str.charAt(1);\n        char c2 = str.charAt(2);\n        if (!Character.isUpperCase(c1) || !Character.isUpperCase(c2)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 3) {\n            // Format: \"_GB\" becomes Locale(\"\", \"GB\")\n            return new Locale(\"\", str.substring(1, 3));\n        }\n        // If there are more characters, position 3 must be an underscore\n        if (str.charAt(3) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // Variant must not be empty if an underscore is present at position 3\n        if (len == 4) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        // Format: \"_GB_P\" becomes Locale(\"\", \"GB\", \"P\")\n        return new Locale(\"\", str.substring(1, 3), str.substring(4));\n    }\n\n    // Standard case where a language code is provided\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch0 = str.charAt(0);\n    final char ch1 = str.charAt(1);\n    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 2) {\n        // Format: \"en\" becomes Locale(\"en\")\n        return new Locale(str);\n    }\n    if (len < 5) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(2) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch3 = str.charAt(3);\n    if (ch3 == '_') {\n        // Format: \"en__POSIX\" becomes Locale(\"en\", \"\", \"POSIX\")\n        if (len == 4) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str.substring(0, 2), \"\", str.substring(4));\n    }\n    final char ch4 = str.charAt(4);\n    if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len == 5) {\n        // Format: \"en_GB\" becomes Locale(\"en\", \"GB\")\n        return new Locale(str.substring(0, 2), str.substring(3, 5));\n    }\n    if (len < 7) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.charAt(5) != '_') {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    // Format: \"en_GB_xxx\" becomes Locale(\"en\", \"GB\", \"xxx\")\n    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}