{
    "generation": "    /**\n     * <p>If an {@link Option} exists for <code>token</code> then\n     * set the current option and add the token to the processed \n     * list.</p>\n     *\n     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n     * is set then ignore the current token and add the remaining tokens\n     * to the processed tokens list directly.</p>\n     *\n     * @param token The current option token\n     * @param stopAtNonOption Specifies whether flattening should halt\n     * at the first non option.\n     * @throws UnrecognizedOptionException if an option does not exist and stopAtNonOption is false.\n     */\n    private void processOptionToken(String token, boolean stopAtNonOption) throws UnrecognizedOptionException\n    {\n        if (options.hasOption(token))\n        {\n            currentOption = options.getOption(token);\n            tokens.add(token);\n        }\n        else if (stopAtNonOption)\n        {\n            eatTheRest = true;\n            tokens.add(token);\n        }\n        else // Option does not exist AND stopAtNonOption is false\n        {\n            // This is the case where an unrecognized option token is encountered,\n            // and the parser is not instructed to stop at non-options by treating it as such.\n            // In this scenario, an UnrecognizedOptionException should be thrown.\n            throw new UnrecognizedOptionException(\"Unrecognized option: \" + token, token);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}