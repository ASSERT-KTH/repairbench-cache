{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            // Fix: Use logical AND (&&) instead of bitwise AND (&) for boolean conditions\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int end; // 'end' will store the index of the *last byte* of the current multi-byte character\n            for (int j = input.length; i < j; ++i) { // 'i' is the index of the *leading byte* of a character\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII character (single byte)\n                }\n\n                // UTF-8 multi-byte leading byte:\n                // Determine the 'end' index based on the leading byte\n                if ((o & 0xE0) == 0xC0) { // 2-byte sequence (e.g., C2-DF followed by 80-BF)\n                    end = i + 1;\n                } else if ((o & 0xF0) == 0xE0) { // 3-byte sequence (e.g., E0-EF followed by two 80-BF)\n                    end = i + 2;\n                } else if ((o & 0xF8) == 0xF0) { // 4-byte sequence (e.g., F0-F7 followed by three 80-BF)\n                    end = i + 3;\n                } else {\n                    return false; // Invalid leading byte for UTF-8\n                }\n\n                // FIX: Ensure that the entire multi-byte sequence is within the input array bounds.\n                // If 'end' (the index of the last expected byte) is out of bounds, it's an incomplete sequence.\n                // If end is input.length - 1, it's valid. If end is input.length or greater, it's out of bounds.\n                // So, if `end >= input.length`, it's an incomplete multi-byte sequence.\n                if (end >= input.length) {\n                    return false; // Incomplete multi-byte character sequence\n                }\n\n                // Validate continuation bytes (should be 10xxxxxx, i.e., & 0xC0 == 0x80)\n                // The loop starts with 'i' at the leading byte's index.\n                // It increments 'i' and then checks 'input[i]' for continuation bytes.\n                // It continues until 'i' reaches 'end' (the index of the last byte of the sequence).\n                while (i < end) {\n                    i++; // Move 'i' to the next byte, which should be a continuation byte\n                    o = input[i]; // Get the byte at the new 'i' position\n                    if ((o & 0xC0) != 0x80) { // Check if it's a valid continuation byte\n                        return false; // Invalid continuation byte\n                    }\n                }\n                // After this loop, 'i' will be equal to 'end'.\n                // The outer for loop's '++i' will then correctly advance 'i' to 'end + 1',\n                // positioning it at the start of the next potential character.\n            }\n            return true;\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}