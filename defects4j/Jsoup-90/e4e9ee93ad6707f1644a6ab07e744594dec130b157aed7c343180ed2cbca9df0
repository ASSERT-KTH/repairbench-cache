{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            // Declare end inside the loop as in the original code\n            int end;\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII\n                }\n\n                // UTF-8 leading:\n                if ((o & 0xE0) == 0xC0) {\n                    end = i + 1; // Expected 1 continuation byte\n                } else if ((o & 0xF0) == 0xE0) {\n                    end = i + 2; // Expected 2 continuation bytes\n                } else if ((o & 0xF8) == 0xF0) {\n                    end = i + 3; // Expected 3 continuation bytes\n                } else {\n                    return false; // Not a valid UTF-8 leading byte\n                }\n\n                // Check if the input byte array has enough bytes for the expected sequence.\n                // 'end' marks the index *after* the last byte of the current character.\n                // If 'end' is greater than or equal to input.length, it means we don't have enough bytes.\n                if (end >= input.length) {\n                    return false; // Incomplete character sequence\n                }\n\n                // Check continuation bytes:\n                // The loop iterates from the byte after the leading byte up to 'end' (exclusive).\n                // 'i' is incremented first, then input[i] is accessed.\n                // The bounds check 'end >= input.length' ensures that 'input[i]' will be within bounds.\n                while (i < end) {\n                    i++; // Move to the next byte, which should be a continuation byte\n                    o = input[i]; // Access the byte (safe due to the check above)\n                    if ((o & 0xC0) != 0x80) { // Check if it's a valid continuation byte (10xxxxxx)\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}