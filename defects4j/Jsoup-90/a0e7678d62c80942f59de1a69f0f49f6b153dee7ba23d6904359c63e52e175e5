{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) { // Note: Bug in original & vs &&, fixed here for correctness, though not the main issue\n                i = 3;\n            }\n\n            int end;\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII\n                }\n\n                // UTF-8 leading:\n                if ((o & 0xE0) == 0xC0) { // 2 bytes\n                    end = i + 1;\n                } else if ((o & 0xF0) == 0xE0) { // 3 bytes\n                    end = i + 2;\n                } else if ((o & 0xF8) == 0xF0) { // 4 bytes\n                    end = i + 3;\n                } else {\n                    return false; // Does not match UTF-8 leading byte pattern\n                }\n\n                // Check if the declared sequence length fits within the array bounds\n                if (end >= j) { // Fix: check if 'end' goes beyond the input length 'j'\n                    return false; // Truncated sequence\n                }\n\n                // Check validity of continuation bytes\n                while (i < end) {\n                    i++; // Move to the next byte, which should be a continuation byte\n                    o = input[i];\n                    if ((o & 0xC0) != 0x80) { // Check if it has the 10xxxxxx pattern\n                        return false; // Invalid continuation byte\n                    }\n                }\n                // At this point, i == end, and the outer loop's ++i will move to the start of the next character\n            }\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}