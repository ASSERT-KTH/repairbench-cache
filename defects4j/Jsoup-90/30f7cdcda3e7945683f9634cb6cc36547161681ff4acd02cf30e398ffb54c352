{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int end; // Declared outside the loop, as it's used after the if/else if chain\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII\n                }\n\n                // UTF-8 leading:\n                if ((o & 0xE0) == 0xC0) {\n                    end = i + 1; // Expected end index (exclusive) for 2-byte sequence\n                } else if ((o & 0xF0) == 0xE0) {\n                    end = i + 2; // Expected end index (exclusive) for 3-byte sequence\n                } else if ((o & 0xF8) == 0xF0) {\n                    end = i + 3; // Expected end index (exclusive) for 4-byte sequence\n                } else {\n                    return false; // Not ASCII and not a valid UTF-8 leading byte\n                }\n\n                // Check if the expected 'end' of the sequence is beyond the input array's length.\n                // 'end' is the index *after* the last byte of the current character.\n                // If 'end' is greater than or equal to 'input.length', it means\n                // one or more bytes of the current multi-byte sequence are missing.\n                if (end >= input.length) {\n                    return false; // Incomplete character sequence detected\n                }\n\n                // Consume continuation bytes\n                while (i < end) {\n                    i++; // Increment 'i' to point to the next byte (first continuation byte)\n                    // The access input[i] is now safe because we checked if 'end' is within bounds.\n                    // Since 'i' will at most reach 'end-1' before the loop condition 'i < end' becomes false,\n                    // and 'end' is guaranteed to be <= input.length, then 'i' will be < input.length.\n                    o = input[i];\n                    if ((o & 0xC0) != 0x80) { // Check if it's a valid continuation byte (0b10xxxxxx)\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}