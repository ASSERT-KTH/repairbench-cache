{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            // Corrected bitwise AND (&) to logical AND (&&)\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int end;\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII 0xxxxxxx\n                }\n\n                // Check for UTF-8 leading byte\n                if ((o & 0xE0) == 0xC0) { // 110xxxxx\n                    end = i + 1;\n                } else if ((o & 0xF0) == 0xE0) { // 1110xxxx\n                    end = i + 2;\n                } else if ((o & 0xF8) == 0xF0) { // 11110xxx\n                    end = i + 3;\n                } else {\n                    return false; // Not a valid UTF-8 leading byte\n                }\n\n                // Check if the sequence is truncated\n                // Use j (input.length) for boundary check\n                if (end >= j) {\n                    return false; // Need continuation bytes, but reach end of input\n                }\n\n                // Check validity of continuation bytes (10xxxxxx)\n                while (i < end) {\n                    i++; // Move to the next byte index\n                    // We already checked bounds with 'end < j', so input[i] is safe\n                    o = input[i];\n                    if ((o & 0xC0) != 0x80) { // Check for 10xxxxxx pattern\n                        return false; // Not a valid continuation byte\n                    }\n                }\n                // The outer loop's ++i will increment i past the validated sequence correctly\n            }\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}