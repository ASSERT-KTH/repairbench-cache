{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            // 'j' is used as the upper bound for the main loop, equivalent to input.length.\n            // It's already defined within the loop, but using input.length directly is also fine.\n            // int end; // This 'end' variable is redefined in the loop, so it can be declared inside if preferred.\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII\n                }\n\n                int end; // Represents the index one past the last byte of the current UTF-8 sequence\n                // UTF-8 leading byte checks:\n                if ((o & 0xE0) == 0xC0) { // 2-byte sequence (1 continuation byte)\n                    end = i + 1;\n                } else if ((o & 0xF0) == 0xE0) { // 3-byte sequence (2 continuation bytes)\n                    end = i + 2;\n                } else if ((o & 0xF8) == 0xF0) { // 4-byte sequence (3 continuation bytes)\n                    end = i + 3;\n                } else {\n                    return false; // Not a valid UTF-8 leading byte\n                }\n\n                // Check for continuation bytes\n                // The loop iterates while 'i' is still less than 'end'.\n                // 'i' points to the *last* byte processed so far (initially the leading byte).\n                // We need to read bytes from 'i + 1' up to 'end - 1'.\n                while (i < end) {\n                    // Increment 'i' to point to the *next* byte in the sequence.\n                    i++;\n                    // Crucial boundary check: ensure 'i' is within array bounds before accessing input[i].\n                    // If 'i' is already at or beyond input.length, it means the input is truncated\n                    // and doesn't contain the expected number of continuation bytes.\n                    if (i >= input.length) {\n                        return false; // Malformed: sequence is shorter than expected\n                    }\n                    o = input[i]; // Now it's safe to access input[i]\n\n                    // All continuation bytes must have the form 10xxxxxx (0x80 to 0xBF)\n                    if ((o & 0xC0) != 0x80) {\n                        return false; // Malformed: not a valid continuation byte\n                    }\n                }\n            }\n            return true;\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}