{
    "generation": "private static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3\n            && (input[0] & 0xFF) == 0xEF\n            && (input[1] & 0xFF) == 0xBB\n            && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n\n    int length = input.length;\n    while (i < length) {\n        int o = input[i] & 0xFF;\n        // ASCII\n        if ((o & 0x80) == 0) {\n            i++;\n            continue;\n        }\n\n        int expected;\n        if ((o & 0xE0) == 0xC0) {\n            expected = 1;\n        } else if ((o & 0xF0) == 0xE0) {\n            expected = 2;\n        } else if ((o & 0xF8) == 0xF0) {\n            expected = 3;\n        } else {\n            return false;\n        }\n\n        // Check if enough bytes remain for the expected continuation bytes:\n        if (i + expected >= length) {\n            return false;\n        }\n\n        // Validate each continuation byte:\n        for (int k = 0; k < expected; k++) {\n            i++;\n            o = input[i] & 0xFF;\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}