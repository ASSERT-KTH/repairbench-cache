{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int endSeq; // Renamed from 'end' for clarity\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII\n                }\n\n                // UTF-8 leading:\n                if ((o & 0xE0) == 0xC0) {\n                    endSeq = i + 1; // 2-byte sequence: one continuation byte at input[i+1]\n                } else if ((o & 0xF0) == 0xE0) {\n                    endSeq = i + 2; // 3-byte sequence: two continuation bytes at input[i+1], input[i+2]\n                } else if ((o & 0xF8) == 0xF0) {\n                    endSeq = i + 3; // 4-byte sequence: three continuation bytes at input[i+1], input[i+2], input[i+3]\n                } else {\n                    return false; // Not a valid UTF-8 leading byte\n                }\n\n                // Check if the calculated end index for the current multi-byte sequence\n                // goes beyond the actual input buffer. If it does, the sequence is truncated,\n                // and thus not valid UTF-8.\n                // The 'while' loop below will access bytes up to 'input[endSeq]', so 'endSeq' must be a valid index.\n                if (endSeq >= input.length) {\n                    return false;\n                }\n\n                // Now, i points to the leading byte. The loop needs to check bytes from original_i + 1 up to endSeq.\n                // The 'i' variable is incremented *before* accessing `input[i]` inside this loop.\n                while (i < endSeq) {\n                    i++; // increment i to point to the next byte in sequence\n                    o = input[i]; // This accesses input[original_i + 1], input[original_i + 2], ..., input[endSeq]\n                    if ((o & 0xC0) != 0x80) { // Check if it's a continuation byte (starts with 0x80)\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}