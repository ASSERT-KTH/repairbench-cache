{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int end;\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII\n                }\n\n                // Determine number of continuation bytes expected for this leading byte\n                int numContinuationBytes;\n                if ((o & 0xE0) == 0xC0) {\n                    numContinuationBytes = 1; // 2-byte sequence (1 continuation byte)\n                } else if ((o & 0xF0) == 0xE0) {\n                    numContinuationBytes = 2; // 3-byte sequence (2 continuation bytes)\n                } else if ((o & 0xF8) == 0xF0) {\n                    numContinuationBytes = 3; // 4-byte sequence (3 continuation bytes)\n                } else {\n                    return false; // Not a valid UTF-8 leading byte\n                }\n\n                // CRITICAL CHECK: Ensure there are enough bytes remaining in the input\n                // for the full UTF-8 sequence. The last byte of the sequence would be\n                // at index `i + numContinuationBytes`. This index must be less than `input.length`.\n                if (i + numContinuationBytes >= input.length) {\n                    return false; // Incomplete UTF-8 sequence\n                }\n\n                // Set `end` for the inner loop. `end` is the index `i` should not reach or exceed\n                // in the `while` loop (i.e., the index *after* the last byte of the character).\n                // `i` will become `original_i + numContinuationBytes` after the loop.\n                end = i + numContinuationBytes;\n\n                // Check continuation bytes\n                while (i < end) {\n                    i++; // Move to the next byte, which should be a continuation byte\n                    o = input[i]; // Access the byte (now guaranteed to be in bounds)\n                    if ((o & 0xC0) != 0x80) { // Check if it's a valid continuation byte (starts with 10xxxxxx)\n                        return false;\n                    }\n                }\n                // After the inner loop, `i` is at `end`, which is `original_i + numContinuationBytes`.\n                // The outer `for` loop's `++i` will then correctly advance `i` to the start of the next character.\n            }\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}