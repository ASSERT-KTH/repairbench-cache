{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII\n                }\n\n                int charLen; // Expected total length of the character\n                // UTF-8 leading byte checks:\n                if ((o & 0xE0) == 0xC0) { // 2-byte sequence (110xxxxx)\n                    charLen = 2;\n                } else if ((o & 0xF0) == 0xE0) { // 3-byte sequence (1110xxxx)\n                    charLen = 3;\n                } else if ((o & 0xF8) == 0xF0) { // 4-byte sequence (11110xxx)\n                    charLen = 4;\n                } else {\n                    // Invalid leading byte (e.g., 10xxxxxx which is a continuation byte,\n                    // or 11111xxx which is an invalid start byte for UTF-8)\n                    return false;\n                }\n\n                // Check if there are enough bytes remaining in the input array for this character\n                // i + charLen is the index AFTER the last byte of the current character.\n                // It must not exceed input.length.\n                if (i + charLen > input.length) {\n                    return false; // Truncated multi-byte character\n                }\n\n                // Check continuation bytes (must be 10xxxxxx)\n                // Loop from the byte *after* the leading byte up to the last byte of the character\n                // (i.e., from index i+1 to i+charLen-1)\n                for (int k = 1; k < charLen; k++) {\n                    int continuationByte = input[i + k];\n                    if ((continuationByte & 0xC0) != 0x80) {\n                        return false; // Malformed: continuation byte does not start with 10\n                    }\n                }\n\n                // Advance 'i' to the last byte of the current character.\n                // The outer loop's '++i' will then correctly move 'i' to the\n                // leading byte of the next character.\n                i += (charLen - 1);\n            }\n            return true;\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}