{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int end;\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII\n                }\n\n                // UTF-8 leading:\n                if ((o & 0xE0) == 0xC0) {\n                    end = i + 1; // 2-byte sequence (1 continuation byte)\n                } else if ((o & 0xF0) == 0xE0) {\n                    end = i + 2; // 3-byte sequence (2 continuation bytes)\n                } else if ((o & 0xF8) == 0xF0) {\n                    end = i + 3; // 4-byte sequence (3 continuation bytes)\n                } else {\n                    return false; // Not a valid UTF-8 leading byte\n                }\n\n                // Crucial fix: Check if there are enough bytes remaining for the\n                // expected multi-byte character sequence.\n                // 'end' is the index of the last byte of the sequence.\n                // If 'end' is beyond the input length, it's an incomplete sequence.\n                if (end >= input.length) {\n                    return false;\n                }\n\n                while (i < end) {\n                    i++; // Move to the next byte within the sequence\n                    // At this point, i is guaranteed to be < input.length due to the\n                    // 'if (end >= input.length)' check above.\n                    o = input[i];\n                    if ((o & 0xC0) != 0x80) { // Check if it's a valid continuation byte (0x10xxxxxx)\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}