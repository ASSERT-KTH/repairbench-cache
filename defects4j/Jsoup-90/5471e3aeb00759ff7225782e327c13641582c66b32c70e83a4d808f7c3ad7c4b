{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int end;\n            for (int j = input.length; i < j; ++i) {\n                int o = input[i];\n                if ((o & 0x80) == 0) {\n                    continue; // ASCII\n                }\n\n                // UTF-8 leading:\n                if ((o & 0xE0) == 0xC0) { // 2-byte sequence (1 continuation byte)\n                    end = i + 1;\n                } else if ((o & 0xF0) == 0xE0) { // 3-byte sequence (2 continuation bytes)\n                    end = i + 2;\n                } else if ((o & 0xF8) == 0xF0) { // 4-byte sequence (3 continuation bytes)\n                    end = i + 3;\n                } else {\n                    return false; // Not a valid UTF-8 leading byte (e.g., 0x80-0xBF for continuation bytes, 0xF8-0xFF for invalid ranges)\n                }\n\n                // The 'end' variable indicates the index that 'i' must not reach (i.e., 'i' must be < end).\n                // It means we expect bytes up to 'end-1'.\n                // The loop `while (i < end)` will process bytes from `i+1` up to `end-1`.\n                // The length of the sequence is 'end - original_i + 1'.\n                // If 'end' itself is beyond input.length - 1, the sequence is truncated.\n                // Or more simply, check that `end` doesn't point past the actual array end.\n\n                // Loop through continuation bytes\n                while (i < end) {\n                    i++; // Move to the next byte, which should be a continuation byte\n                    \n                    // Check if 'i' has gone beyond the array's actual length.\n                    // This handles truncated multi-byte sequences (e.g., [0xC0] or [0xE0, 0x80]).\n                    if (i >= input.length) { \n                        return false; // Malformed: truncated sequence\n                    }\n                    \n                    o = input[i]; // Now 'i' is guaranteed to be a valid index\n                    if ((o & 0xC0) != 0x80) { // Check if it's a valid continuation byte (10xxxxxx)\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}