{
    "generation": "private static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // check for BOM (EF BB BF)\n    if (input.length >= 3\n            && (input[0] & 0xFF) == 0xEF\n            && (input[1] & 0xFF) == 0xBB\n            && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n\n    int len = input.length;\n    while (i < len) {\n        int b = input[i] & 0xFF;\n        if ((b & 0x80) == 0) {\n            // ASCII\n            i++;\n        } else if ((b & 0xE0) == 0xC0) {\n            // 2-byte UTF-8\n            if (i + 1 >= len) return false;\n            if ((input[i + 1] & 0xC0) != 0x80) return false;\n            i += 2;\n        } else if ((b & 0xF0) == 0xE0) {\n            // 3-byte UTF-8\n            if (i + 2 >= len) return false;\n            if ((input[i + 1] & 0xC0) != 0x80\n             || (input[i + 2] & 0xC0) != 0x80) return false;\n            i += 3;\n        } else if ((b & 0xF8) == 0xF0) {\n            // 4-byte UTF-8\n            if (i + 3 >= len) return false;\n            if ((input[i + 1] & 0xC0) != 0x80\n             || (input[i + 2] & 0xC0) != 0x80\n             || (input[i + 3] & 0xC0) != 0x80) return false;\n            i += 4;\n        } else {\n            // invalid leading byte\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}