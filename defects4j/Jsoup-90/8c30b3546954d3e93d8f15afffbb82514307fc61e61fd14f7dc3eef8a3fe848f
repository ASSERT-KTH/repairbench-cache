{
    "generation": "        private static boolean looksLikeUtf8(byte[] input) {\n            int i = 0;\n            // BOM:\n            if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n                && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n                i = 3;\n            }\n\n            int len = input.length;\n\n            // Iterate through the input bytes, checking for valid UTF-8 sequences.\n            // 'i' will always point to the start of a new character (or potential start).\n            for (; i < len; ++i) {\n                int o = input[i];\n\n                // ASCII character (0xxxxxxx)\n                if ((o & 0x80) == 0) {\n                    continue;\n                }\n\n                int numExpectedContinuationBytes;\n                // Determine number of continuation bytes based on the leading byte.\n                // 2-byte sequence (110xxxxx 10xxxxxx)\n                if ((o & 0xE0) == 0xC0) {\n                    numExpectedContinuationBytes = 1;\n                }\n                // 3-byte sequence (1110xxxx 10xxxxxx 10xxxxxx)\n                else if ((o & 0xF0) == 0xE0) {\n                    numExpectedContinuationBytes = 2;\n                }\n                // 4-byte sequence (11110xxx 10xxxxxx 10xxxxxx 10xxxxxx)\n                else if ((o & 0xF8) == 0xF0) {\n                    numExpectedContinuationBytes = 3;\n                }\n                // Invalid leading byte for UTF-8 multi-byte sequence (e.g., 10xxxxxx, 11111xxx, 111111xx)\n                else {\n                    return false;\n                }\n\n                // Check if there are enough bytes remaining in the input array for the\n                // expected continuation bytes.\n                // The index of the last byte of the current character sequence would be\n                // `i + numExpectedContinuationBytes`. This index must be less than `len`.\n                if (i + numExpectedContinuationBytes >= len) {\n                    return false; // Not enough bytes for the declared multi-byte char\n                }\n\n                // Check the continuation bytes (10xxxxxx)\n                // 'k' iterates from the first continuation byte (at i+1) to the last.\n                for (int k = 1; k <= numExpectedContinuationBytes; ++k) {\n                    int continuationByte = input[i + k];\n                    if ((continuationByte & 0xC0) != 0x80) {\n                        return false; // Not a valid continuation byte\n                    }\n                }\n\n                // Advance 'i' by the number of continuation bytes consumed.\n                // The outer for loop's `++i` will then move it past the last byte of the\n                // current character to the start of the next one.\n                i += numExpectedContinuationBytes;\n            }\n            return true;\n        }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}