{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          // Post-increment and post-decrement: the returned value is the previous value,\n          // which is NOT a local value (e.g., x++ returns the old value of x).\n          return NodeUtil.isImmutableValue(value.getFirstChild());\n        }\n      case Token.THIS:\n        // \"this\" is only local if so determined by locals predicate\n        return locals.apply(value);\n      case Token.NAME:\n        // Immutable names (constants) are local, otherwise check via locals predicate\n        return NodeUtil.isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties,\n        // so conservatively treat them as non-local unless locals says otherwise\n        return locals.apply(value);\n      case Token.CALL:\n        return NodeUtil.callHasLocalResult(value)\n            || NodeUtil.isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // \"new\" may allocate a new object, but by default we do not assume it's a local value\n        // unless locals predicate says it's local.\n        return locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literal objects/arrays/functions/regexps are local\n        return true;\n      case Token.IN:\n        // The result of `in` is always boolean (primitive)\n        return true;\n      default:\n        // Other operators force a local value by producing a new primitive result.\n        if (NodeUtil.isAssignmentOp(value)\n            || NodeUtil.isSimpleOperator(value)\n            || NodeUtil.isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}