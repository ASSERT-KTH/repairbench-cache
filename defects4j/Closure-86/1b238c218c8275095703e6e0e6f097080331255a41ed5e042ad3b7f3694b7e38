{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) { // INCRDECR_PROP means post-increment (result is original value)\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else { // No INCRDECR_PROP means pre-increment (result is new primitive value)\n          return true; // Result is always a number, which is a local immutable value.\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        // A property access itself is generally not considered a \"local value\"\n        // in the sense of a primitive or literal. It refers to a potentially\n        // non-local property. Only if the entire expression itself is\n        // explicitly identified as a local by the predicate can it be local.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // A newly constructed object is known to be local if its constructor\n        // is known to produce local results (e.g., primitive wrappers like Array, Object,\n        // or constructors explicitly marked @pure).\n        // It's also local if the 'new' expression itself is identified as a local value\n        // by the predicate (e.g., if it's the RHS of a local variable assignment).\n        return callHasLocalResult(value)\n            || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // 'in' operator always returns a boolean, which is a local immutable value.\n        return true;\n      default:\n        // Other operators that force a local value (e.g., arithmetic ops, logical ops, comparisons).\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value) // e.g., x += y, x |= y (result is number/string)\n            || isSimpleOperator(value) // e.g., !, ~, +, -, typeof, void, ==, !=, >, <, etc. (result is primitive)\n            || isImmutableValue(value)) { // e.g., null, undefined, number, string, boolean\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}