{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // For an assignment \"LHS = RHS\", if the RHS is immutable then the result is local;\n      // otherwise the assignment is local only if the LHS is known to be a local name.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value.getFirstChild())\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      // Only the right-hand operand matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      // Both operands must be local.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      // Only the 'then' and 'else' parts matter.\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // For prefix ++/--, the result is the updated primitive value (local);\n      // for postfix, the pre-update value matters.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // There is no detailed information about property accesses, so defer to the predicate.\n      return locals.apply(value);\n    case Token.CALL:\n      // A call is local if it is known to produce a local result or is a toString() call.\n      if (callHasLocalResult(value) || isToStringMethodCall(value)) {\n        return true;\n      }\n      // In method calls the receiver can \u201clocalize\u201d the call result.\n      Node callee = value.getFirstChild();\n      if (callee.getType() == Token.GETPROP) {\n        Node receiver = callee.getFirstChild();\n        if (evaluatesToLocalValue(receiver, locals)) {\n          return true;\n        }\n      }\n      return locals.apply(value);\n    case Token.NEW:\n      // A new expression is considered to yield a local value\n      // only if we can tell its constructor call produces an unaliased result.\n      return callHasLocalResult(value);\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literals and function/regexp/array/object expressions are deemed local.\n      return true;\n    case Token.IN:\n      return true;\n    default:\n      // Other operators force a local value.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}