{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        // If it's a pre-increment/decrement (e.g., ++x, --x), the result is a\n        // new primitive number, which is always local.\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return true;\n        } else {\n          // If it's a post-increment/decrement (e.g., x++, x--), the result is\n          // the original value of the operand.\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return NodeUtil.isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        // Assumed non-local unless explicitly covered by locals predicate.\n        return locals.apply(value);\n      case Token.CALL:\n        return NodeUtil.callHasLocalResult(value)\n            || NodeUtil.isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // A new object is generally a reference that can escape. It's\n        // considered local only if the constructed value itself is an immutable\n        // primitive wrapper (e.g., new String('')), or if it's explicitly\n        // marked as local by the predicate.\n        return NodeUtil.isImmutableValue(value) || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed. The container\n        // itself is local.\n        return true;\n      case Token.IN:\n        // TODO(johnlenis): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other ops force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (NodeUtil.isAssignmentOp(value)\n            || NodeUtil.isSimpleOperator(value)\n            || NodeUtil.isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}