{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        Node rhs = value.getLastChild();\n        // If RHS is a truly immutable primitive, function, or regexp, it's local.\n        // NodeUtil.isImmutableValue is problematic for ARRAYLIT/OBJECTLIT\n        // as it considers them immutable even though their contents are not.\n        // We filter out ARRAYLIT and OBJECTLIT from this initial check.\n        if (NodeUtil.isImmutableValue(rhs)\n            && !(rhs.isArrayLit() || rhs.isObjectLit())) {\n          return true;\n        }\n        // For mutable values (including ARRAYLIT/OBJECTLIT), the result of the\n        // assignment is local if the assignment itself ensures locality\n        // (e.g., assigning to a local variable that doesn't escape) AND\n        // the right-hand side is also considered local (e.g., its components are local).\n        return locals.apply(value) && evaluatesToLocalValue(rhs, locals);\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          // Post-increment/decrement, returns the original value, so check its locality.\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          // Pre-increment/decrement, returns a new number, which is local.\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties by default.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // A NEW expression results in a new object. It's local only if we can prove it doesn't escape.\n        // By default, assume it's not local unless the 'locals' predicate specifically knows otherwise.\n        return locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed as the literal instance itself is new and local.\n        return true;\n      case Token.IN:\n        // The IN operator always results in a local boolean value.\n        return true;\n      default:\n        // Other operators typically force a local value (e.g., arithmetic, comparison, logical ops produce primitives).\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) { // This last part handles primitive literals directly (like '1', 'true') if they somehow fall here.\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}