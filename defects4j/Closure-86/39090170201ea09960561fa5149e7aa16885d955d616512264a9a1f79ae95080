{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // For an assignment, we are local if the right\u2010hand side is immutable or\n      // if the assignment itself is known to be local and its right\u2010hand side is local.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      // Only the rightmost value matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      // Both operands must yield a local value.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      // Only the two branch values determine the local result.\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // For ++/--, if the node is in postfix mode then its value is the old one;\n      // if it is prefix then the result is the computed number.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // We have no intrinsic info about property accesses.\n      return locals.apply(value);\n    case Token.CALL:\n      // Only certain calls produce a local result.\n      // Remove the fallback to locals.apply(value) so that calls like f(), or\n      // ones to methods known to modify their receiver (e.g. setLocation)\n      // aren\u2019t mistakenly treated as local.\n      return callHasLocalResult(value) || isToStringMethodCall(value);\n    case Token.NEW:\n      // We can\u2019t be sure a newly created object hasn\u2019t been aliased.\n      return false;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literals and functions (or regexps) are always local.\n      return true;\n    case Token.IN:\n      // For the IN operator we assume the result is local.\n      return true;\n    default:\n      // Other operators force a local value if they\u2019re assignments, simple\n      // operators, or immutable.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}