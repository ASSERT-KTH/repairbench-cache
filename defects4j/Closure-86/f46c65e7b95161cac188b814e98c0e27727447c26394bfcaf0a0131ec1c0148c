{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // The result of an assignment is the value of the right-hand side.\n        // This value is local if it's a primitive literal (e.g., x=1).\n        // Or if the LHS (e.g., variable 'x') is a local variable,\n        // and the RHS also evaluates to a local value.\n        Node rhs = value.getLastChild();\n        return NodeUtil.isPrimitiveValue(rhs) // Checks for true primitives: null, undefined, boolean, number, string\n            || (locals.apply(value.getFirstChild()) // Check if LHS (the assignment target) is local\n                && evaluatesToLocalValue(rhs, locals)); // And if the RHS is also local\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) { // True for post-increment/decrement (e.g., x++)\n          // The result of a post-increment/decrement is the *previous* value of the operand.\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else { // Pre-increment/decrement (e.g., ++x) results in a new number.\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        // A name is local if it refers to an immutable primitive value (like undefined, NaN),\n        // or if the 'locals' predicate explicitly marks the name as local (e.g., a local variable).\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no general information about the locality of object properties.\n        // It's only considered local if the GETPROP/GETELEM node itself is marked local by the predicate.\n        return locals.apply(value);\n      case Token.CALL:\n        // A call result is local if the call has a known local result (e.g., String(), Number()),\n        // or if it's a toString() method call, or if the call node itself is marked local by the predicate.\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // A new object created by the 'new' operator is generally not known to be a local value,\n        // as its reference can escape the expression scope (e.g., by being assigned to a global\n        // variable or returned from a function).\n        return false; // Changed from true\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literal objects (functions, regexps, arrays, objects) themselves\n        // are new values created within the expression scope. When they appear\n        // as the final value of an expression, they are considered local values\n        // as their immediate reference is created in place.\n        return true;\n      case Token.IN:\n        // The 'in' operator always returns a boolean, which is a local primitive value.\n        return true;\n      default:\n        // Other operators that force a local value:\n        //  x = '' + g  (result x is a local string)\n        //  x -= g      (result x is a local number)\n        //  x == y      (result is a local boolean)\n        if (isAssignmentOp(value) // e.g., x += y, x *= y\n            || isSimpleOperator(value) // e.g., !x, x + y, x == y, typeof x, void x\n            || isImmutableValue(value)) { // e.g., true primitive literals appearing directly\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}