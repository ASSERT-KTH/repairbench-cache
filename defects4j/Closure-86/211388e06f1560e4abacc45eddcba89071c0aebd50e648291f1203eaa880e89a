{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // The result of \"x = y\" is local iff the RHS is local AND\n      // either the RHS is immutable or the assigned (LHS) name is local.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value.getFirstChild())\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // pre-inc/pre-dec: the result is local as it's a number primitive;\n      // post-inc/post-dec: the previous value is potentially non-local.\n      // Node.INCRDECR_PROP==true means pre, ==false means post\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return true;\n      } else {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // There is no information about the locality of object properties,\n      // so these are non-local except for immutable values.\n      return false;\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value);\n    case Token.NEW:\n      // Only return true iff we know the result is not potentially aliased.\n      // For most constructors, this is not safe, so conservatively return false.\n      return false;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literals objects with non-literal children are allowed.\n      return true;\n    case Token.IN:\n      // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n      return true;\n    default:\n      // Other ops force a local value:\n      //  x = '' + g (x is now a local string)\n      //  x -= g (x is now a local number)\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}