{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // For ASSIGN, we only return true if the RHS is known to be immutable.\n      // Otherwise, if we assign a non-primitive (object/array) to a variable, it's not guaranteed to be local.\n      return NodeUtil.isImmutableValue(value.getLastChild());\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // Pre-increment/decrement (e.g., ++x) returns a primitive local, but post-increment/decrement (e.g., x++) returns original value.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // Pre-increment/decrement: always a local primitive number.\n        return true;\n      } else {\n        // Post-increment/decrement: need value of the operand\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      }\n    case Token.THIS:\n      return false;\n    case Token.NAME:\n      // Only true if the variable is an immutable value (literal) or is known to be a local temporary.\n      // The default locals.apply for names (e.g., \"x\") should be false.\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // There is no information about the locality of object properties.\n      // Values like o.x or o['x'] are not local.\n      return false;\n    case Token.CALL:\n      // Known pure/toString methods OR explicitly local-only calls may be OK\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n      // \"new\" objects are not guaranteed to be local, because they may alias themselves or be globally visible.\n      return false;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literal objects with possibly non-literal children are allowed.\n      return true;\n    case Token.IN:\n      return true;\n    default:\n      // Other ops force a local value:\n      //  x = '' + g (x is now an local string)\n      //  x -= g (x is now an local number)\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}