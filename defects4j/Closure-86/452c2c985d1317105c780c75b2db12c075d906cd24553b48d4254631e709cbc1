{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // For plain assignment, the result is only local if the rhs is local and immutable.\n        // Otherwise, it may escape.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        // Only the value of the rightmost child matters.\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        // Both sides must be local values.\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        // Only the true and false branches matter.\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        // If pre increment/decrement, result is a primitive number (local)\n        // If post, the read result is the value before updating, which can escape.\n        if (value.getFirstChild() != null && value.getBooleanProp(Node.INCRDECR_PROP)) {\n          // Pre, always local\n          return true;\n        } else {\n          // Post, not local\n          return false;\n        }\n      case Token.THIS:\n        // \"this\" is assumed to be non-local unless known otherwise.\n        return locals.apply(value);\n      case Token.NAME:\n        // Only if immutable value or known to be local.\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // Property access is only local if known.\n        return locals.apply(value);\n      case Token.CALL:\n        // Only .toString() is local, others are not unless known.\n        return isToStringMethodCall(value) || locals.apply(value);\n      case Token.NEW:\n        // The result of 'new' is NOT guaranteed to be local unless 'locals.apply' determines it is.\n        // By default, 'new' may return an escaped value.\n        return locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals and anonymous functions, regexps are local.\n        return true;\n      case Token.IN:\n        // \"in\" operator always returns a local boolean.\n        return true;\n      default:\n        // Simple assignment ops (=, +=, -=, etc), comparisons, math, unary ops, etc, are local\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}