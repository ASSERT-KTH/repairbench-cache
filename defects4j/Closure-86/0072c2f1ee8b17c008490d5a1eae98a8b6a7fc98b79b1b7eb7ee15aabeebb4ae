{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // A result that is aliased by a non-local name, is the effectively the\n      // same as returning a non-local name, but this doesn't matter if the\n      // value is immutable.\n      // Only assignment of immutable values are local.\n      // e.g., x = 1; // local, x=arr; // not local\n      return NodeUtil.isImmutableValue(value.getLastChild());\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      // the \"then\" and \"else\" branches\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // Only pre-increment and decrement force a local result.\n      // Post-increment/decrement may return a non-local value.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return false;\n      }\n    case Token.THIS:\n      // \"this\" is never local, unless overridden via locals predicate.\n      // In practice, locals will only match function expressions, not THIS.\n      return locals.apply(value);\n    case Token.NAME:\n      // Immutable values and explicit locals allowed, but plain NAME is non-local.\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // There is no information about the locality of object properties.\n      // So unless the predicate matches, we don't treat them as local.\n      return locals.apply(value);\n    case Token.CALL:\n      // Calls can only be considered local if we're very sure.\n      // Only certain patterns allowed.\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n      // \"new\" is NOT known local unless predicate says so.\n      // e.g. new A() could leak itself (this) from constructor.\n      return locals.apply(value);\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literal objects with non-literal children are allowed.\n      return true;\n    case Token.IN:\n      // \"in\" results in a boolean, always a local primitive\n      return true;\n    default:\n      // Operators and literals: force a local value\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}