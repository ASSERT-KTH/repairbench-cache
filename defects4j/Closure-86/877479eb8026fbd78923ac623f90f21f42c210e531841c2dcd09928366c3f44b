{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        // Check if LHS is local AND RHS evaluates to local, OR if RHS is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value.getFirstChild()) // Check locality of LHS\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        // Result is the result of the right-hand side.\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        // The result is local iff both operands evaluate to local values.\n        // A non-local value on either side results in a non-local value.\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        // The result is local iff both potential results evaluate to local values.\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) { // Prefix operation\n          // Prefix increment/decrement results in a primitive number.\n          return true;\n        } else { // Postfix operation\n          // Postfix increment/decrement results in the value *before* modification.\n          // Its locality depends on the locality of the operand.\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        }\n      case Token.THIS:\n        // 'this' is local only if the predicate says so.\n        return locals.apply(value);\n      case Token.NAME:\n        // A name is local if it's inherently immutable (undefined, NaN, Infinity)\n        // or the predicate says so.\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // Property accesses generally return non-local values, as we don't\n        // know what the property holds. Assume non-local unless it's an\n        // immutable value (handled by the default case).\n        return false;\n      case Token.CALL:\n        // Method calls generally return non-local values, unless it's a specific\n        // known-local primitive function like toString(), or an immutable value\n        // (handled by the default case). Results of other calls are assumed non-local.\n        return isToStringMethodCall(value);\n      case Token.NEW:\n        // A constructor *can* alias 'this' to global scope (e.g. assign 'this'\n        // to a global variable). Without specific analysis of the constructor,\n        // we assume the result is non-local.\n        // TODO(nicksantos): This needs to be changed so that it\n        // returns true iff we're sure the value was never aliased from inside\n        // the constructor (similar to callHasLocalResult)\n        return false; // Assume non-local by default\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals are created locally. Their properties might be non-local,\n        // but the literal object/array/function itself is local.\n        return true;\n      case Token.IN:\n        // Result of 'in' is a boolean primitive.\n        return true;\n      default:\n        // Assignment ops (e.g., +=, *=), simple ops (e.g., +, -, !, typeof),\n        // and known immutable values are always local primitives or immutable objects.\n        if (isAssignmentOp(value) // e.g., +=, *=. Result is primitive.\n            || isSimpleOperator(value) // e.g., +, -, !, typeof. Result is primitive/boolean.\n            || isImmutableValue(value)) { // e.g., null, true, 1, \"a\".\n          return true;\n        }\n\n        // If we reach here, it's an unexpected node type for this function.\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}