{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // A result that is aliased by a non-local name, is effectively the\n      // same as returning a non-local name, but this doesn't matter if the\n      // value is immutable.\n      // Only return true here if the right side is immutable.\n      return NodeUtil.isImmutableValue(value.getLastChild());\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // Pre-increment result is always the resulting primitive number.\n      // Post-increment returns the *original* (possibly non-local) value.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // pre-increment/decrement (++x, --x)\n        return true;\n      } else {\n        // post-increment/decrement (x++, x--)\n        return false;\n      }\n    case Token.THIS:\n      return false;\n    case Token.NAME:\n      // Only if the value is known to be immutable, not just a NAME.\n      return isImmutableValue(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // Property accesses are not local values unless the receiver is a known local\n      // and the property is known to yield an immutable value.\n      // For example: ({}).x is an object property, but not a guaranteed local value.\n      return false;\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value);\n    case Token.NEW:\n      // Only treat some new objects as truly local.\n      // In general, do NOT treat NEW as local unless we are sure.\n      // Most constructors may alias `this`, so this is false by default.\n      return false;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literals objects with non-literal children are allowed.\n      return true;\n    case Token.IN:\n      // 'in' returns a boolean which is always local.\n      return true;\n    default:\n      // Other ops force a local value:\n      //  x = '' + g (x is now a local string)\n      //  x -= g (x is now a local number)\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}