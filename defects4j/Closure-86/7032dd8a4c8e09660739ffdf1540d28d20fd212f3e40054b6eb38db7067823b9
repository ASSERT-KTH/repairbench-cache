{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n        case Token.ASSIGN:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.COMMA:\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            return evaluatesToLocalValue(value.getFirstChild(), locals)\n                && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n                && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            } else {\n                return true;\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            return locals.apply(value);\n        case Token.CALL:\n            Node recv = value.getFirstChild();\n            if ( recv != null && recv.getType() == Token.THIS \n                || (recv.getType() == Token.NAME && locals.apply(recv)) \n                || (recv.getType() == Token.GETPROP && evaluatesToLocalValue(recv, locals))) {\n                return callHasLocalResult(value);\n            }\n            return isToStringMethodCall(value) || locals.apply(value);\n        case Token.NEW:\n            Node constructor = value.getFirstChild();\n            return (constructor != null && constructor.getType() == Token.NAME && locals.apply(constructor))\n                || isImmutableValue(value);\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            return true;\n        case Token.IN:\n            return true;\n        default:\n            if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n                return true;\n            }\n            throw new IllegalStateException(\"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}