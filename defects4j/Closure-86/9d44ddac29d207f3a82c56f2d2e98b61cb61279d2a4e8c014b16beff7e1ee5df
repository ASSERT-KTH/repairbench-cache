{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // The result of an assignment is only local if the right side is immutable.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (isImmutableValue(value.getLastChild())\n              || (locals.apply(value)\n                  && isImmutableValue(value.getLastChild())));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // Pre-increment results in a number (local), post-increment results in possibly original value (not local)\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // pre-increment (++x), always returns a new number (local value)\n        return true;\n      } else {\n        // post-increment (x++), returns original value, so not local\n        return false;\n      }\n    case Token.THIS:\n    case Token.NAME:\n      // Name and this are not local unless locals.apply(value) returns true\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // There is no information about the locality of object properties.\n      return false;\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n      // \"new\" is only local if nobody else gets a pointer to the created object\n      // which we generally cannot prove, so must be conservative.\n      return false;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literal objects with non-literal children are allowed.\n      return true;\n    case Token.IN:\n      // Operators always yield local primitive values\n      return true;\n    default:\n      // Other ops force a local value:\n      //  x = '' + g (x is now a local string)\n      //  x -= g (x is now a local number)\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}