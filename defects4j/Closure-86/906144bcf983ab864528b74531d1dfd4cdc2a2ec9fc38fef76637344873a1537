{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // A result that is aliased by a non-local name is effectively\n      // the same as returning a non-local name, but this doesn't matter if\n      // the value is immutable.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n\n    case Token.COMMA:\n      // Only the rightmost operand matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.AND:\n    case Token.OR:\n      // Both operands must be local values.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.HOOK:\n      // Only the two result arms matter.\n      Node thenBranch = value.getFirstChild().getNext();\n      return evaluatesToLocalValue(thenBranch, locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.INC:\n    case Token.DEC:\n      // Prefix yields a new primitive; postfix yields the old value.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // Postfix: result is the original child.\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        // Prefix: always a local number.\n        return true;\n      }\n\n    case Token.THIS:\n      return locals.apply(value);\n\n    case Token.NAME:\n      return NodeUtil.isImmutableValue(value) || locals.apply(value);\n\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // We have no general knowledge of whether a property read is local.\n      return locals.apply(value);\n\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n\n    case Token.NEW:\n      // A newly constructed object is only local if the \"locals\" predicate\n      // tells us it is (i.e., we know it wasn't aliased inside its constructor).\n      return locals.apply(value);\n\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // These literals (and literal-like nodes) are always local values.\n      return true;\n\n    case Token.IN:\n      // The 'in' operator always yields a primitive boolean.\n      return true;\n\n    default:\n      // Other operators produce local primitives, or are immutable.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node \" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}