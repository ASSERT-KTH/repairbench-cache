{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // A result that is aliased by a non-local name is effectively\n      // the same as returning a non-local name, but this doesn't matter\n      // if the value is immutable.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n\n    case Token.COMMA:\n      // Only the right-hand side of a comma matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.AND:\n    case Token.OR:\n      // Both operands of && and || must be local.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.HOOK:\n      // Only the 'then' and 'else' matters, not the condition.\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.INC:\n    case Token.DEC:\n      // Prefix ++/-- yield a new primitive number; postfix yields\n      // the old value, which may be non-local.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) { // postfix\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else { // prefix\n        return true;\n      }\n\n    case Token.THIS:\n      return locals.apply(value);\n\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // No inherent locality info for a bare property reference.\n      return locals.apply(value);\n\n    case Token.CALL: {\n      // A method call on a freshly constructed or otherwise local object\n      // can be considered to return a local value.\n      Node callee = value.getFirstChild();\n      if ((callee.getType() == Token.GETPROP || callee.getType() == Token.GETELEM)) {\n        Node target = callee.getFirstChild();\n        if (target.getType() == Token.NEW\n            || evaluatesToLocalValue(target, locals)) {\n          return true;\n        }\n      }\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    }\n\n    case Token.NEW:\n      // We only consider a 'new' expression local if the user-supplied\n      // predicate says so.\n      return locals.apply(value);\n\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Function/regexp/array/object literals are always local.\n      return true;\n\n    case Token.IN:\n      // The 'in' operator returns a primitive boolean.\n      return true;\n\n    default:\n      // Other ops force a local value:\n      //   '' + g  (string)\n      //   g - 0   (number)\n      //   etc.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node \" + value +\n          \"\\n parent: \" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}