{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // For assignment, the result is the right-hand side.\n      // Only if the right hand side is a value that cannot be referenced from elsewhere,\n      // or we are told that the left side is a local (alias), then result is local.\n      // We must avoid assuming assignment of a non-local is local!\n      return NodeUtil.isImmutableValue(value.getLastChild()) ||\n          (locals.apply(value.getFirstChild()) &&\n              evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      // Result is the rightmost value.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      // Both operands need to be local-valued\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      // Only result of the clause matters (second and third children).\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // For ++/-- operator, distinguish between prefix and postfix\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // Prefix (++x, --x) is always local (primitive number)\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        // Postfix (x++, x--): result is original value, could be non-local\n        return false;\n      }\n    case Token.THIS:\n      // Only local if told so (usually false unless in a local scope).\n      return locals.apply(value);\n    case Token.NAME:\n      // Only local if immutable or matched by locals predicate.\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // There is no information about the locality of object properties.\n      // Return true only if locals predicate matches.\n      return locals.apply(value);\n    case Token.CALL:\n      // Only certain CALLs are known to return local values, otherwise false unless locals.apply\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n      // Do *not* assume NEW returns local value, because NEW may alias\n      // as in (new Object()), etc.\n      // Only if locals.apply(\"new\" node) tells us it is local.\n      return locals.apply(value);\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literal objects/values are local.\n      return true;\n    case Token.IN:\n      return true;\n    default:\n      // Other ops that force a local value:\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}