{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // For basic assignments (not ASSIGN ops), the value is only local\n        // if the RHS is local and the LHS is not an alias or mutable value.\n        // Immutable RHS is local, but otherwise LHS must NOT be an alias.\n        // (x = 1) is local, but (x = y) is not local if y is not local.\n        return NodeUtil.isImmutableValue(value.getLastChild());\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        // Only pre-increment/pre-decrement result in a local primitive value.\n        // Post-versions return the old value, so not always local.\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return false;\n        }\n      case Token.THIS:\n        // 'this' is never a local value except in inline function wrappers.\n        return false;\n      case Token.NAME:\n        // Only constants (immutables) are local.\n        return isImmutableValue(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // Properties are aliases, so not local.\n        return false;\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value);\n      case Token.NEW:\n        // The result of 'new' is only local if it is not ever aliased\n        // or stored in a mutable place. We conservatively assume it is NOT local,\n        // unless explicitly known.\n        return false;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Object and array literals and their children do not leak.\n        return true;\n      case Token.IN:\n        // The result is always a boolean primitive.\n        return true;\n      default:\n        // Other ops force a local value:\n        //  x = '' + g (x is now a local string)\n        //  x -= g (x is now a local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}