{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // For assignments the aliasing comes from the lhs.\n      // e.g. in \"x=1\" we ignore x if 1 (the rhs) is immutable.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value.getFirstChild())\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n\n    case Token.COMMA:\n      // Only the last comma operand matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.AND:\n    case Token.OR:\n      // Both operands are important.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.HOOK:\n      // Only the true and false branches matter.\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.INC:\n    case Token.DEC:\n      // Pre-increment yields the new primitive value (local),\n      // whereas post-increment produces the original value.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // pre-increment (e.g. ++x) always produces a new number.\n        return true;\n      } else {\n        // post-increment (e.g. x++) returns the old value.\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      }\n\n    case Token.THIS:\n      return locals.apply(value);\n\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // Without extra alias-tracking for properties, we rely on the predicate.\n      return locals.apply(value);\n\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n\n    case Token.NEW:\n      // We no longer assume NEW always yields a local result.\n      // Its locality is decided by the predicate.\n      return locals.apply(value);\n\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literals are considered local.\n      return true;\n\n    case Token.IN:\n      return true;\n\n    default:\n      // Operators like x+=y, comparisons, etc.\n      if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}