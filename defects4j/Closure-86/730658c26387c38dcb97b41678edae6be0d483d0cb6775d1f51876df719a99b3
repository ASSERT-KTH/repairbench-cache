{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // A result that is aliased by a non-local name, is effectively\n      // the same as returning a non-local name, but this doesn't matter\n      // if the value is immutable.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n\n    case Token.COMMA:\n      // Only the last sub\u2010expression matters for the value.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.AND:\n    case Token.OR:\n      // Both sides must be local.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.HOOK:\n      // Only the \"then\" and \"else\" arms matter.\n      return evaluatesToLocalValue(\n                 value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.INC:\n    case Token.DEC:\n      // Postfix returns the old value; prefix returns a primitive.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // postfix: old value\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        // prefix: always a primitive\n        return true;\n      }\n\n    case Token.THIS:\n      return locals.apply(value);\n\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // We have no general guarantee about properties.\n      return locals.apply(value);\n\n    case Token.CALL:\n      // A few calls we know return a fresh/primitive value.\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n\n    case Token.NEW:\n      // We cannot assume a \"new\" expression is local\n      // unless we know the constructor never aliases 'this'.\n      return false;\n\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // All of these produce a fresh value.\n      return true;\n\n    case Token.IN:\n      // \"in\" always yields a boolean.\n      return true;\n\n    default:\n      // Other operators that produce primitives.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node \" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}