{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // For \"x = y\", the assignment is local only if the right\u2010hand side (y)\n      // is an immutable value or if the left side \u201cx\u201d is known to be local.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      // Only the right-hand operand determines the value of a comma expression.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      // Both operands must yield a local value.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      // In a ternary operator only the two results matter.\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // For prefix increments/decrements, the result is a new primitive value;\n      // for postfix, the original value is returned.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // Postfix: the previous value matters.\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        // Prefix: the result is a new primitive.\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      // A name is local only if it\u2019s known to be immutable or if it\n      // is declared locally.\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // We have no detailed info on object property accesses.\n      return locals.apply(value);\n    case Token.CALL:\n      // A function call is known to yield a local result\n      // only if we can analyze its call target. Do not simply fall back\n      // to \"locals\" on the CALL node.\n      return callHasLocalResult(value) || isToStringMethodCall(value);\n    case Token.NEW:\n      // Instead of always returning true, we now rely on callHasLocalResult.\n      // This ensures that \u201cnew\u201d expressions (like \"new x()\") are considered non\u2010local\n      // when we cannot be sure that the constructed object has not been aliased.\n      return callHasLocalResult(value);\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literals or function/regexp/array/object literals always yield a local value.\n      return true;\n    case Token.IN:\n      // The IN operator is treated as forcing a local value.\n      return true;\n    default:\n      // For most operators that force a local (such as simple arithmetic,\n      // assignment ops, or immutable values), we assume the result is local.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}