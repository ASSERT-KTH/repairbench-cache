{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        // The returned value of ASSIGN is the assignment's right hand side.\n        // But the result is only local if both:\n        //   - The LHS is a local (otherwise, the value can leak by aliasing)\n        //   - The RHS is a local value\n        // (unless the RHS is a primitive/immutable value, which is always local)\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value.getFirstChild())\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        // Pre-increment returns the new value, which is a primitive and local;\n        // post-increment returns the previous value, which may not be local.\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          // Pre-increment/decrement (++x, --x)\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          // Post-increment/decrement (x++, x--): the returned value is the previous value of x\n          // which is not guaranteed to be a local value (could have come from elsewhere).\n          return false;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return false;\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // It's unsafe to assume \"new\" returns a local value, because the object could\n        // have been aliased or escaped via the constructor.\n        // See https://github.com/google/closure-compiler/issues/930\n        return false;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // \"in\" always results in a boolean local (primitive)\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now a local string)\n        //  x -= g (x is now a local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}