{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // A result that is aliased by a non-local name is effectively the\n      // same as returning a non-local name, but this doesn't matter if the\n      // value is immutable.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n\n    case Token.COMMA:\n      // Only the right side of a comma matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.AND:\n    case Token.OR:\n      // Both operands must be local.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.HOOK:\n      // Only the \"then\" and \"else\" arms matter.\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.INC:\n    case Token.DEC:\n      // Post-inc/dec yields the old value; pre-inc/dec yields a number.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n\n    case Token.THIS:\n      return locals.apply(value);\n\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // We have no information about property reads, so only if the user\n      // explicitly told us it's a local.\n      return locals.apply(value);\n\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n\n    case Token.NEW:\n      // By default we only trust constructors we know don't leak 'this'\n      // (via callHasLocalResult), or nodes the user marked local.\n      // However, if the NEW \u2192 GETPROP \u2192 CALL pattern occurs (i.e.,\n      // new X().m()), then we know 'this' is the new instance, so any\n      // mutation is on a local object.\n      Node parent = value.getParent();\n      if (parent != null\n          && (parent.getType() == Token.GETPROP\n              || parent.getType() == Token.GETELEM)) {\n        // Skip through a chain of GETPROP/GETELEM to see if we're\n        // ultimately the callee of a CALL.\n        Node maybeCall = parent;\n        while (maybeCall != null\n            && (maybeCall.getType() == Token.GETPROP\n                || maybeCall.getType() == Token.GETELEM)) {\n          maybeCall = maybeCall.getParent();\n        }\n        if (maybeCall != null\n            && maybeCall.getType() == Token.CALL\n            && maybeCall.getFirstChild() == parent) {\n          return true;\n        }\n      }\n      return callHasLocalResult(value) || locals.apply(value);\n\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literals (even with non-literal children) are always local.\n      return true;\n\n    case Token.IN:\n      // The 'in' operator always produces a boolean.\n      return true;\n\n    default:\n      // Other binary/unary ops yield a primitive or are simple.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node \" + value +\n          \"\\n parent: \" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}