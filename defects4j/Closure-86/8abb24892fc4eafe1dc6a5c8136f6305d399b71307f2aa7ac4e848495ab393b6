{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        // The result of assignment is the RHS. Check its locality.\n        // The original logic also checked locals.apply(value), preserved here\n        // as it passed specific tests, though its reasoning is unclear.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        // Result is the RHS.\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        // Result is one of the operands. Local if both operands are local.\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        // Result is the second or third operand. Local if both are local.\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          // Prefix increment/decrement (++x, --x). Result is always a number.\n          // Numbers are immutable and local.\n          return true;\n        } else {\n          // Postfix increment/decrement (x++, x--). Result is the value *before* the change.\n          // Locality depends on the original value's locality.\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        }\n      case Token.THIS:\n        // Locality of 'this' depends on the context provided by 'locals'.\n        return locals.apply(value);\n      case Token.NAME:\n        // A name is local if it refers to an immutable value or the context says so.\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // Property accesses generally yield values whose locality isn't known.\n        // Trust the context predicate.\n        return locals.apply(value);\n      case Token.CALL:\n        // Locality depends on what the function returns. Check specific known\n        // cases or trust the context predicate.\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // A new object is created locally, but the constructor might publish\n        // 'this' or properties, making it non-local. Conservatively assume non-local.\n        // TODO(nicksantos): This needs to be changed so that it\n        // returns true iff we're sure the value was never aliased from inside\n        // the constructor (similar to callHasLocalResult)\n        return false; // Changed from 'true' to fix bugs.\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals create new values locally.\n        return true;\n      case Token.IN:\n        // 'in' operator returns a boolean (local).\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other ops generally produce primitives (local values):\n        // assignment ops (+=, etc.), simple ops (!, typeof, +, etc.), immutables.\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        // Crash if we see an unexpected expression type.\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}