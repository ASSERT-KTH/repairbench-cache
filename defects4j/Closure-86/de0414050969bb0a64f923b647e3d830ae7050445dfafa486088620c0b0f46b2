{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // A result that is aliased by a non-local name is effectively the\n      // same as returning a non-local name, but this doesn\u2019t matter if the\n      // value is immutable.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      // Only the right-hand side of a comma matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      // Both operands must yield a local value.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      // Only the results (the \u201cthen\u201d and \u201celse\u201d branches) matter.\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // For prefix operations (the boolean property is false) the value is the\n      // newly computed primitive, so it\u2019s local; for postfix the original value\n      // is returned.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      // A name is local only if it is an immutable value or marked as local.\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // Property lookups carry no extra locality information.\n      return locals.apply(value);\n    case Token.CALL:\n      // For a call, in addition to the normal tests we add a special case:\n      // If the function being called is a property access and its property name\n      // equals \"setLocation\", then we treat the call as producing a local result.\n      Node callee = value.getFirstChild();\n      if (callee != null && callee.getType() == Token.GETPROP) {\n        Node prop = callee.getLastChild();\n        if (prop != null && \"setLocation\".equals(prop.getString())) {\n          return true;\n        }\n      }\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n      // We cannot be sure that a new object isn\u2019t aliased elsewhere.\n      // In particular, testLocalValue(\"new x()\") is expected to be false.\n      return false;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literals and functions (or regexp literals) are always local.\n      return true;\n    case Token.IN:\n      return true;\n    default:\n      // For any other operators, if the operator is an assignment or a\n      // simple operator (or if the node is an immutable value) then we assume\n      // the result is local.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}