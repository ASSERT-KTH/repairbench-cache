{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // A result that is aliased by a non-local name is effectively the\n      // same as returning a non-local name, but this doesn\u2019t matter if the\n      // value is immutable.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      // Only the last expression in a comma matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      // Both operands must be local.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      // Only the two result expressions matter.\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // For prefix inc/dec, the value of the expression is the updated value.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        // Postfix: For side\u2010effect analysis we conservatively assume a change.\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // There is no further information about the property, so we rely on\n      // the local predicate.\n      return locals.apply(value);\n    case Token.CALL:\n      // A CALL is local if (a) the call is known to return a local value,\n      // (b) it is a toString() call, or (c) the node itself is known to be local.\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n      // Instead of always returning true, we now distinguish between cases.\n      // When constructing an object via \"new\", the result is considered local\n      // only if we know the constructor is locally defined.\n      // In BROKEN_NEW mode (typically used in tests over externs or unknown\n      // constructors), we use the locality of the constructor (the first child)\n      // to decide. Otherwise we rely on callHasLocalResult(\u2026) to be conservative.\n      if (BROKEN_NEW) {\n        return locals.apply(value.getFirstChild());\n      } else {\n        return callHasLocalResult(value);\n      }\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literals (and functions, regexps, literal arrays/objects) are inherently local.\n      return true;\n    case Token.IN:\n      // The IN operator always produces a primitive result.\n      return true;\n    default:\n      // For any other operator, if it is an assignment op or a simple operator\n      // or already an immutable value, assume it yields a local value.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}