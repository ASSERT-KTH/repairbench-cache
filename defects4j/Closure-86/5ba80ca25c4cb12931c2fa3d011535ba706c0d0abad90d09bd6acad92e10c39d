{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // A result that is aliased by a non-local name is effectively\n      // the same as returning a non-local name, but this doesn't\n      // matter if the value is immutable.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n\n    case Token.COMMA:\n      // Only the right\u2010most expression in a comma matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.AND:\n    case Token.OR:\n      // Both operands must be local.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.HOOK:\n      // Only the two branches (skip the condition).\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.INC:\n    case Token.DEC:\n      // Prefix produces a new primitive; postfix returns the old value.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // Postfix: must check the input.\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        // Prefix: always a primitive local.\n        return true;\n      }\n\n    case Token.THIS:\n      return locals.apply(value);\n\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // No general info about property locality.\n      return locals.apply(value);\n\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n\n    case Token.NEW:\n      // A `new` expression only yields a local value if we know\n      // the constructor won\u2019t alias `this` (via callHasLocalResult),\n      // or if it\u2019s explicitly marked local.\n      return callHasLocalResult(value)\n          || locals.apply(value);\n\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Function literals, regexps, arrays, and object literals\n      // are always fresh/local.\n      return true;\n\n    case Token.IN:\n      // The `in` operator yields a boolean.\n      return true;\n\n    default:\n      // Other operations that yield a primitive or a fresh value:\n      //   x = '' + g   (x is a local string)\n      //   x -= g       (x is a local number)\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node \" + value +\n          \"\\n parent: \" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}