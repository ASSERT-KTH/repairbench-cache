{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // A result that is aliased by a non-local name is effectively the\n      // same as returning a non-local name, but this doesn't matter if the\n      // value is immutable.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n\n    case Token.COMMA:\n      // Only the right-hand side of a comma matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.AND:\n    case Token.OR:\n      // Both sides of && and || must be local.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.HOOK:\n      // Only the two result branches matter.\n      Node thenBranch = value.getFirstChild().getNext();\n      Node elseBranch = value.getLastChild();\n      return evaluatesToLocalValue(thenBranch, locals)\n          && evaluatesToLocalValue(elseBranch, locals);\n\n    case Token.INC:\n    case Token.DEC:\n      // Postfix returns the old value; prefix always returns a primitive.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // postfix\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        // prefix\n        return true;\n      }\n\n    case Token.THIS:\n      return locals.apply(value);\n\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // No information about the locality of object properties.\n      return locals.apply(value);\n\n    case Token.CALL:\n      // A call is local if it's known to return a local result,\n      // or it's a toString() on a literal, or it's marked local.\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n\n    case Token.NEW:\n      // A 'new' expression is considered local only if the constructor\n      // is known not to leak 'this' (i.e., it has a local result)\n      // or it's explicitly marked local.\n      return callHasLocalResult(value) || locals.apply(value);\n\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Function and literal nodes always produce local values.\n      return true;\n\n    case Token.IN:\n      // 'in' always returns a primitive boolean.\n      return true;\n\n    default:\n      // Other operators that force a local primitive or are assignments.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node \" + value +\n          \"\\n parent: \" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}