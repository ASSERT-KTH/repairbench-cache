{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        // The result of an assignment is the left-hand side value, so it's only local\n        // if the left hand is local, or if the right side is an immutable value.\n        // See testLocalValue(\"x=1\"): true; (\"x=[]\"): false; (\"x=y\"): false.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value.getFirstChild())\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        // condition ? ifTrue : ifFalse; only branches matter.\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        // Pre-increment (side effect, but result is always a local number)\n        // Post-increment (result is the original variable, may be not local)\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          // Pre increment/decrement: result is a primitive number\n          return true;\n        } else {\n          // Post increment/decrement: result is value before update, may not be local\n          return false;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return NodeUtil.isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return false;\n      case Token.CALL:\n        return NodeUtil.callHasLocalResult(value)\n            || NodeUtil.isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // Only treat as a local value if the object isn't escaping.\n        // Otherwise, we can't assume this is a local value\n        // See PR and testLocalValue(\"new x()\"): should be false.\n        return false;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literal objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // The in operator always returns a boolean\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now a local string)\n        //  x -= g (x is now a local number)\n        if (NodeUtil.isAssignmentOp(value)\n            || NodeUtil.isSimpleOperator(value)\n            || NodeUtil.isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}