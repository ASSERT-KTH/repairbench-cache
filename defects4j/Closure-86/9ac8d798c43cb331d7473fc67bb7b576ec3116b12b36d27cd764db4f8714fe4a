{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // Only return true if the RHS is an immutable value;\n      // otherwise, assignment makes the LHS an alias and not local.\n      return NodeUtil.isImmutableValue(value.getLastChild());\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // For ++x or --x, result is local. For x++ or x--, result is not.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // pre-increment/pre-decrement\n        return true;\n      } else {\n        // post-increment/post-decrement\n        return false;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // Object property access is not local\n      return false;\n    case Token.CALL:\n      // Only calls to toString methods (or known local-result calls) are local\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n      // It's only local if the NEW is known to be localizable\n      return NodeUtil.constructorCallHasLocalResult(value)\n          || locals.apply(value);\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literals (arrays, objects, regex, fn) are always local\n      return true;\n    case Token.IN:\n      // Result is always a local boolean\n      return true;\n    default:\n      // Other ops force a local value:\n      //  x = '' + g (x is now a local string)\n      //  x -= g (x is now a local number)\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}