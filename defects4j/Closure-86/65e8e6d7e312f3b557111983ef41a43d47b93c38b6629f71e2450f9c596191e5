{
    "generation": "  /**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name.\n        Node lhs = value.getFirstChild();\n        Node rhs = value.getLastChild();\n\n        // If the RHS is a primitive literal value (e.g., 1, 'a', true, null),\n        // the result of the assignment is that primitive, which is local.\n        if (NodeUtil.isLiteralValue(rhs, true)) {\n          return true;\n        }\n\n        // If the RHS is a reference (e.g., [], {}, new X(), function()),\n        // its locality depends on how it's assigned.\n        // If assigned to a non-local name or property, the reference escapes.\n        if (lhs.isName()) {\n          // If LHS is a local name, then the assignment result is local\n          // (e.g., `var a = []` implies `a` and `[]` are local within the function).\n          // Otherwise (LHS is a non-local name, e.g., a global), the assignment result is non-local.\n          return locals.apply(lhs);\n        } else if (lhs.isGetProp() || lhs.isGetElem()) {\n          // Assigning to a property (e.g., obj.prop = val) typically makes the value non-local\n          // because the object itself might be non-local or the property is publicly accessible.\n          return false;\n        } else {\n          // For other complex LHS types (e.g., array/object destructuring, etc.),\n          // be conservative and assume non-local.\n          return false;\n        }\n\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        // For post-increment/decrement (x++), the result is the original value of x.\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          // For pre-increment/decrement (++x), the result is a new numeric value, which is local.\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        // Immutable literal names ('undefined', 'Infinity', 'NaN') are local.\n        // Otherwise, check if the name is considered local by the predicate.\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no general information about the locality of object properties.\n        // Rely on the 'locals' predicate to determine if this specific property access is known to be local.\n        return locals.apply(value);\n      case Token.CALL:\n        // A call result is local if the call is known to return a local value (e.g., certain pure functions,\n        // toString() calls), or if the 'locals' predicate can determine its locality.\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // A newly created object is a new reference. It is local unless it escapes.\n        // Rely on the 'locals' predicate to determine if the specific 'NEW' expression is considered local\n        // (e.g., if the object is immediately assigned to a local variable and doesn't escape via the constructor).\n        return locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literal objects and functions create new, isolated references which are considered local within the expression.\n        return true;\n      case Token.IN:\n        // The IN operator returns a boolean primitive, which is always local.\n        return true;\n      default:\n        // Other operators that force a local value (e.g., binary ops, unary ops that result in primitives):\n        //  x = '' + g (result is local string)\n        //  x -= g (result is local number)\n        if (isAssignmentOp(value) // e.g., +=, -=, *=, etc., which produce primitive results.\n            || isSimpleOperator(value) // e.g., +, -, *, /, ==, !=, typeof, void, instanceof; these return primitives.\n            || isImmutableValue(value)) { // Catch-all for any remaining immutable constants.\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}