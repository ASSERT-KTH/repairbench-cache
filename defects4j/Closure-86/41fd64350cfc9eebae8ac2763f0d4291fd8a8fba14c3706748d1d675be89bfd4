{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // When assigning, only the left\u2010hand side (the alias) determines\n      // whether the result is \u201clocal\u201d if the right\u2010hand side isn\u2019t immutable.\n      Node lhs = value.getFirstChild();\n      Node rhs = value.getLastChild();\n      return NodeUtil.isImmutableValue(rhs)\n          || (locals.apply(lhs) && evaluatesToLocalValue(rhs, locals));\n    case Token.COMMA:\n      // Only the right operand of a comma matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      // Both operands must evaluate to a local value.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      // Only the results of the two branches (second and third children)\n      // determine locality.\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // For increment/decrement, if the old value is used (post-inc/dec)\n      // then we care about the operand; but pre-inc/dec produces a new value.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // No information about property references; rely on the predicate.\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n      // Instead of assuming a NEW always yields a local value,\n      // determine it via similar logic to CALL.\n      return callHasLocalResult(value) || locals.apply(value);\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literals (and functions/regexps) always yield local values.\n      return true;\n    case Token.IN:\n      // The result of the IN operator is a primitive.\n      return true;\n    default:\n      // Other operators (e.g. assignment operators, simple arithmetic,\n      // comparisons) force a local value.\n      if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}