{
    "generation": "/**\n   * @param locals A predicate to apply to unknown local values.\n   * @return Whether the node is known to be a value that is not a reference\n   *     outside the expression scope.\n   */\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        // For method calls, we need to check if the method is known to return a local value\n        // or if it's a toString method which is generally considered side-effect free.\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // For 'new' expressions, we need to be conservative. If the constructor function\n        // is not known to be side-effect free or does not return a local object, we cannot\n        // assume the result is local.\n        return isConstructorCallLocal(value, locals);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n\n  private static boolean isConstructorCallLocal(Node value, Predicate<Node> locals) {\n    Node constructor = value.getFirstChild();\n    if (constructor == null) return false;\n\n    // If the constructor function is known to be side-effect free and does not alias 'this',\n    // then we can consider the result local.\n    return locals.apply(constructor) && isSideEffectFreeConstructor(constructor);\n  }\n\n  private static boolean isSideEffectFreeConstructor(Node constructor) {\n    // This method should check if the constructor function is known to be side-effect free.\n    // For simplicity, this example assumes that any constructor not explicitly marked as having\n    // side effects is considered side-effect free. In a real implementation, this would involve\n    // more complex analysis, potentially using annotations or a list of known side-effect free\n    // constructors.\n    return true; // Placeholder logic\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}