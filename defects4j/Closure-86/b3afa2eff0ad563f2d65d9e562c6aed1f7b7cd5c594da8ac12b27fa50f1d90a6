{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n        case Token.ASSIGN:\n            // A result that is aliased by a non-local name, is the effectively the\n            // same as returning a non-local name, but this doesn't matter if the\n            // value is immutable.\n            return NodeUtil.isImmutableValue(value.getLastChild())\n                    || (locals.apply(value.getFirstChild())\n                        && evaluatesToLocalValue(value.getLastChild(), locals));\n        case Token.COMMA:\n            // Only the rightmost expression in a comma-separated list matters\n            return evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.AND:\n        case Token.OR:\n            // Both operands of AND and OR matter, as they can be evaluated conditionally\n            return evaluatesToLocalValue(value.getFirstChild(), locals)\n                    && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.HOOK:\n            // Only the result of the conditional (second and third operands) matters\n            return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n                    && evaluatesToLocalValue(value.getLastChild(), locals);\n        case Token.INC:\n        case Token.DEC:\n            if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n                // Pre-increment/decrement results in a primitive number\n                return true;\n            } else {\n                // Post-increment/decrement depends on the previous value\n                return evaluatesToLocalValue(value.getFirstChild(), locals);\n            }\n        case Token.THIS:\n            return locals.apply(value);\n        case Token.NAME:\n            return isImmutableValue(value) || locals.apply(value);\n        case Token.GETELEM:\n        case Token.GETPROP:\n            // There is no information about the locality of object properties.\n            return locals.apply(value);\n        case Token.CALL:\n            return callHasLocalResult(value)\n                    || isToStringMethodCall(value)\n                    || locals.apply(value);\n        case Token.NEW:\n            // Assume new objects are local unless we know they alias themselves\n            return true;\n        case Token.FUNCTION:\n        case Token.REGEXP:\n        case Token.ARRAYLIT:\n        case Token.OBJECTLIT:\n            // Literals objects with non-literal children are allowed.\n            return true;\n        case Token.IN:\n            // IN operator always results in a local boolean value\n            return true;\n        default:\n            // Other operators force a local value:\n            //  x = '' + g (x is now a local string)\n            //  x -= g (x is now a local number)\n            if (isAssignmentOp(value)\n                    || isSimpleOperator(value)\n                    || isImmutableValue(value)) {\n                return true;\n            }\n\n            throw new IllegalStateException(\n                    \"Unexpected expression node\" + value +\n                    \"\\n parent:\" + value.getParent());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}