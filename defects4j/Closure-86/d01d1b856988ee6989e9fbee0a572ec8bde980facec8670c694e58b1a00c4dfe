{
    "generation": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\nstatic boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // For normal assignment (=), the locality depends entirely on the rhs,\n      // if it is an immutable value. Otherwise, always false.\n      if (NodeUtil.isImmutableValue(value.getLastChild())) {\n        return true;\n      }\n      // If this is a compound assignment (+=, -=, etc.), they're handled below \n      // in the default case as isAssignmentOp().\n      return false;\n\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.INC:\n    case Token.DEC:\n      // For ++x/--x (prefix), result is local (number); for x++/x-- (postfix), result is previous value (could be non-local).\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // prefix\n        return true;\n      } else {\n        // postfix\n        return false;\n      }\n\n    case Token.THIS:\n      return locals.apply(value);\n\n    case Token.NAME:\n      // Primitives are always local, otherwise apply locals.\n      return isImmutableValue(value) || locals.apply(value);\n\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // There is no information about the locality of object properties\u2014cannot guarantee locality.\n      return false;\n\n    case Token.CALL:\n      // Only pure calls, toString or known-pure locals are local.\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n\n    case Token.NEW:\n      // \"new SomeClass(...)\" is only local if the result is not possibly escaped.\n      // If \"locals\" says so (typically for some known constructor) then allow it.\n      return locals.apply(value);\n\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Function, regexp, literals, objects and arrays literals are always local values\n      return true;\n\n    case Token.IN:\n      // \"foo in bar\" always returns a boolean (primitive local)\n      return true;\n\n    default:\n      // Assignment operators (+=, -=, etc) always produce local primitives.\n      // Simple operators (+, -, !, etc) always produce local primitives.\n      // Literals (numbers, strings, etc) are always local.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}