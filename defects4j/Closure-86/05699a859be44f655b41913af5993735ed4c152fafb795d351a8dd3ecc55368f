{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN: {\n      // In a simple assignment \u201cx = rhs\u201d, the value of the expression is\n      // considered \u201clocal\u201d (i.e. not escaping) only if either the rhs is an\n      // immutable literal, or if we\u2019re writing to a local name and the rhs\u2019s\n      // computed value is itself local.\n      Node lhs = value.getFirstChild();\n      Node rhs = value.getLastChild();\n      if (lhs.getType() == Token.NAME && locals.apply(lhs)) {\n        return evaluatesToLocalValue(rhs, locals);\n      }\n      return NodeUtil.isImmutableValue(rhs);\n    }\n\n    case Token.COMMA:\n      // Only the value of the last comma child matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.AND:\n    case Token.OR:\n      // For logical operators both sides must evaluate to a local value.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.HOOK:\n      // In a ternary expression only the two branch values are considered.\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n\n    case Token.INC:\n    case Token.DEC:\n      // For increment/decrement, the prefix case returns the new (numeric)\n      // value, which is a fresh primitive, but the postfix value is the old\n      // value (that might be externally visible).\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // Prefix: Always produces a new primitive.\n        return true;\n      } else {\n        // Postfix: returns the original value.\n        return false;\n      }\n\n    case Token.THIS:\n      return locals.apply(value);\n\n    case Token.NAME:\n      // A name is local only if it is an immutable value or the locally declared one.\n      return NodeUtil.isImmutableValue(value) || locals.apply(value);\n\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // We don\u2019t have enough info about object property aliases.\n      return locals.apply(value);\n\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n\n    case Token.NEW:\n      // Instead of assuming a NEW always produces a local result, we delegate to\n      // callHasLocalResult. That helper will return false for a \u201cnew\u201d expression if\n      // we can\u2019t rule out aliasing (as in \u201cnew x()\u201d) but might return true when we\u2019re\n      // sure no alias escapes (for example, a call to a pure constructor).\n      return callHasLocalResult(value);\n\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // Literals and inline functions/objects are considered local.\n      return true;\n\n    case Token.IN:\n      // In operator results in a local boolean.\n      return true;\n\n    default:\n      // For other operators, if they are assignments, simple operators, or\n      // already immutable, then the overall expression is local.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || NodeUtil.isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}