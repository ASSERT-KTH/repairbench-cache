{
    "generation": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      // A result that is aliased by a non-local name is effectively\n      // the same as returning a non-local name, but this doesn't matter\n      // if the value is immutable.\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      // Only the rightmost comma subexpression matters.\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      // Both sides of && and || must be local values.\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      // Only the two result branches of the hook matter.\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      // Prefix (++x, --x) yields a primitive (local), postfix (x++, x--) yields the old value.\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        // postfix: result is the old value\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        // prefix: result is a new primitive\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      // Cannot know property locality, so only if the predicate says it's local.\n      return locals.apply(value);\n    case Token.CALL:\n      // A call is local if it is known to produce a fresh result,\n      // or if it's a toString() call on something local,\n      // or if the predicate says so.\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n      // A `new` expression is not assumed local unless the predicate says so.\n      return locals.apply(value);\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      // These literals always produce a fresh (local) value.\n      return true;\n    case Token.IN:\n      // `in` always produces a boolean (local primitive).\n      return true;\n    default:\n      // Other simple ops and immutable values are local.\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node \" + value +\n          \"\\nparent: \" + value.getParent());\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}