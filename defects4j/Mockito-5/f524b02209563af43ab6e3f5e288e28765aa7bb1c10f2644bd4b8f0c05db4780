{
    "generation": "    /**\n     * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode\n     * before the full duration has passed.\n     *\n     * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once\n     * the full duration has passed, the last error returned by the delegate verification mode will be thrown\n     * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known\n     * to never recover from this situation (e.g. {@link AtMost}).\n     *\n     * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter\n     * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If\n     * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.\n     *\n     * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\n     */\n    public void verify(VerificationData data) {\n        AssertionError error = null; // Store the last encountered assertion error\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                // Attempt verification using the delegate mode\n                delegate.verify(data);\n\n                // If verification succeeds:\n                if (returnOnSuccess) {\n                    // If configured to return immediately on success, exit now.\n                    return;\n                } else {\n                    // If configured to wait for the full duration, clear any previously recorded error\n                    // because the delegate verification succeeded *this time*. We continue polling.\n                    error = null;\n                }\n            } catch (MockitoAssertionError e) {\n                // If Mockito verification fails, record the error.\n                // handleVerifyException might decide if this error is fatal or recoverable.\n                // We store the error to potentially throw it after the timeout.\n                error = handleVerifyException(e);\n            }\n            // Removed the catch block for org.mockito.exceptions.verification.junit.ArgumentsAreDifferent\n            // to eliminate the JUnit dependency from this core class.\n            // Any necessary handling for specific assertion errors like ArgumentsAreDifferent should\n            // ideally occur within delegate.verify() or be managed by framework-specific integrations,\n            // not directly in this core polling logic.\n        }\n\n        // After the timer expires (or if the loop exited for other reasons not handled above):\n        // If an error was recorded (typically from the last failed verification attempt), throw it.\n        if (error != null) {\n            throw error;\n        }\n        // If no error is pending (either because the last attempt succeeded or returnOnSuccess was true and we returned early),\n        // then the verification is considered successful according to the rules of this VerificationOverTimeImpl mode.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}