{
    "generation": "    /**\n     * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode\n     * before the full duration has passed.\n     *\n     * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once\n     * the full duration has passed, the last error returned by the delegate verification mode will be thrown\n     * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known\n     * to never recover from this situation (e.g. {@link AtMost}).\n     *\n     * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter\n     * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If\n     * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.\n     *\n     * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\n     */\n    public void verify(VerificationData data) {\n        AssertionError error = null;\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                delegate.verify(data);\n\n                if (returnOnSuccess) {\n                    return;\n                } else {\n                    error = null;\n                }\n            } catch (MockitoAssertionError e) {\n                // MockitoAssertionError is the base class for all Mockito verification errors.\n                // org.mockito.exceptions.verification.junit.ArgumentsAreDifferent is a subclass of MockitoAssertionError,\n                // so it will be caught here. The separate catch block was redundant and introduced a JUnit dependency.\n                error = handleVerifyException(e);\n            }\n            // Removed the following catch block because org.mockito.exceptions.verification.junit.ArgumentsAreDifferent\n            // extends MockitoAssertionError, making this catch block redundant and introducing an unnecessary\n            // compile-time dependency on a JUnit-related class, which fails the pure_mockito_should_not_depend_JUnit test.\n            // catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n            //     error = handleVerifyException(e);\n            // }\n        }\n\n        if (error != null) {\n            throw error;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}