{
    "generation": "    /**\n     * Turns out that these are expensive enough to create so that caching\n     * does make sense.\n     *<p>\n     * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is\n     * a value type deserializer; this caused an issue with 2.4.4 of\n     * JAXB Annotations (failing a test).\n     * It is also possible that some other settings could make deserializers\n     * un-cacheable; but on the other hand, caching can make a big positive\n     * difference with performance... so it's a hard choice.\n     * <p>\n     * Also: May not be cachable if it has key or value deserializers,\n     * or value type deserializer\n     * \n     * @since 2.4.4\n     */\n    @Override\n    public boolean isCachable() {\n        /* As per [databind#735], existence of value or key deserializer (only passed\n         * if annotated to use non-standard one) should also prevent caching.\n         * Same goes for value type deserializer (used for generics).\n         */\n        // NOTE: key/value deserializer instances may NOT be cachable, if they are\n        // contextual; for now assume they are NOT reliably cachable.\n        // Later perhaps try to determine if they are standard ones that are\n        // indeed cachable.\n        return (_valueDeserializer == null)\n                && (_keyDeserializer == null)\n                && (_valueTypeDeserializer == null);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}