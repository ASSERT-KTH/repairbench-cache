{
    "generation": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// The original implementation performs char-by-char comparison.\n\t\t// This approach is problematic for supplementary characters (code points outside the\n\t\t// Basic Multilingual Plane, U+0000 to U+FFFF), which are represented by\n\t\t// two `char` values (a surrogate pair). A single `char` comparison might\n\t\t// incorrectly match a surrogate from one code point with a surrogate from another,\n\t\t// leading to false positives as seen in the failing tests.\n\n\t\t// To correctly handle all Unicode characters, comparisons must be done at the\n\t\t// code point level.\n\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\n\t\t// 1. Convert the `searchChars` array into a set of Unicode code points.\n\t\t// This allows for efficient O(1) average time lookups later.\n\t\tjava.util.Set<Integer> searchCodePoints = new java.util.HashSet<>();\n\t\tfor (int i = 0; i < searchLength; ) {\n\t\t\t// Character.codePointAt extracts a code point, correctly handling surrogate pairs.\n\t\t\tint codePoint = Character.codePointAt(searchChars, i);\n\t\t\tsearchCodePoints.add(codePoint);\n\t\t\t// Advance the index by the number of chars consumed by the current code point (1 for BMP, 2 for supplementary).\n\t\t\ti += Character.charCount(codePoint);\n\t\t}\n\n\t\t// 2. Iterate through the `cs` CharSequence, extracting code points one by one.\n\t\t// For each code point, check if it exists in the `searchCodePoints` set.\n\t\tfor (int i = 0; i < csLength; ) {\n\t\t\t// Character.codePointAt extracts a code point from the CharSequence.\n\t\t\tint codePoint = Character.codePointAt(cs, i);\n\t\t\tif (searchCodePoints.contains(codePoint)) {\n\t\t\t\treturn true; // Found a match at the code point level\n\t\t\t}\n\t\t\t// Advance the index by the number of chars consumed by the current code point.\n\t\t\ti += Character.charCount(codePoint);\n\t\t}\n\n\t\treturn false; // No common code points found\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}