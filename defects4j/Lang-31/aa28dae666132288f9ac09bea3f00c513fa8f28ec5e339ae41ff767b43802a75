{
    "generation": "\t/**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Use a Set to store search code points for efficient lookup.\n\t\t// This also correctly handles supplementary characters (characters\n\t\t// represented by two 'char' values, a surrogate pair) by\n\t\t// converting them into single code points.\n\t\tjava.util.Set<Integer> searchCodePoints = new java.util.HashSet<>();\n\t\tfor (int i = 0; i < searchChars.length; i++) {\n\t\t\tchar ch = searchChars[i];\n\t\t\tif (Character.isHighSurrogate(ch) && i + 1 < searchChars.length && Character.isLowSurrogate(searchChars[i+1])) {\n\t\t\t\t// Found a surrogate pair, form a supplementary code point\n\t\t\t\tsearchCodePoints.add(Character.toCodePoint(ch, searchChars[i+1]));\n\t\t\t\ti++; // Skip the low surrogate as it's part of the current code point\n\t\t\t} else {\n\t\t\t\t// It's a Basic Multilingual Plane (BMP) character or a standalone surrogate.\n\t\t\t\t// For matching purposes, treat as a single code point.\n\t\t\t\tsearchCodePoints.add((int) ch);\n\t\t\t}\n\t\t}\n\n\t\t// Iterate through the CharSequence by code points\n\t\t// and check if any of these code points are in our set of search code points.\n\t\tint csLength = cs.length();\n\t\tfor (int i = 0; i < csLength; ) {\n\t\t\tint codePoint = Character.codePointAt(cs, i);\n\t\t\tif (searchCodePoints.contains(codePoint)) {\n\t\t\t\treturn true; // Found a match\n\t\t\t}\n\t\t\ti += Character.charCount(codePoint); // Advance index by the number of chars in this code point\n\t\t}\n\n\t\treturn false; // No match found\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}