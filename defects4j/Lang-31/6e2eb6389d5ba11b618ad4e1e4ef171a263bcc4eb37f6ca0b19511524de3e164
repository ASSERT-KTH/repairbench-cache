{
    "generation": "import org.apache.commons.lang3.ArrayUtils;\nimport static org.apache.commons.lang3.StringUtils.isEmpty;\n\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <p>Note that supplementary characters (those requiring two chars in Java) are handled.\n     * If the input CharSequence contains a supplementary character, the method checks if\n     * either of its surrogate chars is in the search array. However, a match is only returned\n     * if the matched char in the input sequence is not a high-surrogate forming a valid\n     * surrogate pair.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * StringUtils.containsAny(\"\\uD840\\uDC00\", ['\\uD840']) = false // U+20000 not found by matching high surrogate alone\n     * StringUtils.containsAny(\"\\uD840\\uDC00\", ['\\uDC00']) = true  // U+20000 found by matching low surrogate\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\t\tfor (int i = 0; i < csLength; i++) {\n\t\t\tchar ch = cs.charAt(i);\n            // Check if ch is a high surrogate that is part of a valid pair.\n            boolean isHighSurrogateInPair = false;\n            if (Character.isHighSurrogate(ch)) {\n                // Check existence of subsequent character\n                if (i + 1 < csLength) {\n                    char nextChar = cs.charAt(i + 1);\n                    // Check if the next character is a low surrogate.\n                    if (Character.isLowSurrogate(nextChar)) {\n                        isHighSurrogateInPair = true;\n                    }\n                }\n            }\n\n\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\tif (searchChars[j] == ch) {\n                    // If the matched char 'ch' is NOT a high surrogate part of a valid pair,\n                    // then we found a match. Matches on low surrogates or BMP chars or unpaired high surrogates are valid.\n                    if (!isHighSurrogateInPair) {\n\t\t\t\t\t    return true;\n                    }\n                    // If ch is a high surrogate part of a pair, we continue searching in searchChars,\n                    // but this specific match (searchChars[j] == ch) based on the high surrogate alone is ignored.\n                    // We proceed to check the low surrogate in the next iteration of the outer loop.\n\t\t\t\t}\n\t\t\t}\n            // If the current char was a high surrogate part of a valid pair,\n            // skip the next char (low surrogate) in the outer loop iteration.\n            if (isHighSurrogateInPair) {\n                i++;\n            }\n\t\t}\n\t\treturn false;\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}