{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    // Build an array of code points from searchChars (grouping surrogate pairs)\n    int[] searchCps = new int[searchLength];\n    int cpCount = 0;\n    for (int j = 0; j < searchLength; j++) {\n        char sc = searchChars[j];\n        if (Character.isHighSurrogate(sc) && j + 1 < searchLength) {\n            char sc2 = searchChars[j + 1];\n            if (Character.isLowSurrogate(sc2)) {\n                searchCps[cpCount++] = Character.toCodePoint(sc, sc2);\n                j++;\n                continue;\n            }\n        }\n        searchCps[cpCount++] = sc;\n    }\n    // Scan cs by code point and look for any match\n    for (int i = 0; i < csLength; i++) {\n        char c = cs.charAt(i);\n        if (Character.isHighSurrogate(c) && i + 1 < csLength) {\n            char c2 = cs.charAt(i + 1);\n            if (Character.isLowSurrogate(c2)) {\n                int cp = Character.toCodePoint(c, c2);\n                for (int j = 0; j < cpCount; j++) {\n                    if (searchCps[j] == cp) {\n                        return true;\n                    }\n                }\n                i++; // skip the low\u2010surrogate\n                continue;\n            }\n        }\n        int cVal = c;\n        for (int j = 0; j < cpCount; j++) {\n            if (searchCps[j] == cVal) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}