{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                // For supplementary characters, we need to check if it's part of a surrogate pair\n                if (Character.isHighSurrogate(ch)) {\n                    // Check if we have a following low surrogate in the input\n                    if (i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                        // It's a supplementary character, so we need to check both chars together\n                        String csChar = cs.subSequence(i, i + 2).toString();\n                        for (int k = 0; k < searchLength; k++) {\n                            // If searchChars contains a surrogate pair at k and k+1 that matches\n                            if (k + 1 < searchLength &&\n                                Character.isHighSurrogate(searchChars[k]) &&\n                                Character.isLowSurrogate(searchChars[k + 1])) {\n                                String searchChar = new String(new char[]{searchChars[k], searchChars[k + 1]});\n                                if (csChar.equals(searchChar)) {\n                                    return true;\n                                }\n                            }\n                        }\n                        i++; // skip the next char since we've processed this surrogate pair\n                    }\n                }\n                else if (Character.isLowSurrogate(ch)) {\n                    // Skip low surrogates that are processed with their high surrogates\n                    continue;\n                }\n                else {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}