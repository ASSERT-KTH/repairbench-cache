{
    "generation": "    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    // Check if this is a high surrogate and if so, check the next character\n                    if (Character.isHighSurrogate(ch)) {\n                        if (i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {\n                            // This is a surrogate pair, we need to check both characters\n                            boolean found = false;\n                            for (int k = 0; k < searchLength; k++) {\n                                if (searchChars[k] == ch && k + 1 < searchLength &&\n                                    searchChars[k + 1] == cs.charAt(i + 1)) {\n                                    found = true;\n                                    break;\n                                }\n                            }\n                            if (found) {\n                                return true;\n                            }\n                        }\n                    } else {\n                        // Not a surrogate, just return true\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}