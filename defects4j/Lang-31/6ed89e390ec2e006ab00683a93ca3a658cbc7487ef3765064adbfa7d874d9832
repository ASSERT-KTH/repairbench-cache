{
    "generation": "import org.apache.commons.lang3.ArrayUtils;\n\n// assume StringUtils.isEmpty is available and works as expected.\n\n\t/**\n\t * <p>Checks if the CharSequence contains any character in the given\n\t * set of characters.</p>\n\t *\n\t * <p>A <code>null</code> CharSequence will return <code>false</code>.\n\t * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n\t *\n\t * <p>This method handles supplementary characters correctly. A supplementary character in the\n     * {@code cs} sequence is considered found if and only if both of its surrogate {@code char}\n     * values are present in the {@code searchChars} array.</p>\n\t *\n\t * <pre>\n\t * StringUtils.containsAny(null, *)                = false\n\t * StringUtils.containsAny(\"\", *)                  = false\n\t * StringUtils.containsAny(*, null)                = false\n\t * StringUtils.containsAny(*, [])                  = false\n\t * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n\t * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n\t * StringUtils.containsAny(\"aba\", ['z'])           = false\n\t * StringUtils.containsAny(\"\\uD840\\uDC00\", ['\\uD840','\\uDC00']) = true // Supplementary U+20000\n     * StringUtils.containsAny(\"\\uD840\\uDC00\", ['\\uD840','\\uDC01']) = false\n     * StringUtils.containsAny(\"\\uD840\\uDC00\", ['a','\\uD840','b','\\uDC00']) = true\n\t * </pre>\n\t *\n\t * @param cs  the CharSequence to check, may be null\n\t * @param searchChars  the chars to search for, may be null\n\t * @return the <code>true</code> if any of the chars are found,\n\t * <code>false</code> if no match or null input\n\t * @since 2.4\n\t */\n\tpublic static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n        // Mimic the behavior of the isEmpty method if it's not directly available\n        // or if we need to ensure null-safety and length check locally.\n        final boolean csIsEmpty = cs == null || cs.length() == 0;\n\n        if (csIsEmpty || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n\n        final int csLength = cs.length();\n        final int searchLength = searchChars.length;\n\n        // Iterate through the CharSequence by code points\n        for (int i = 0; i < csLength; i++) {\n            final int codePoint = Character.codePointAt(cs, i);\n            boolean found = false; // Flag: does the current codePoint match based on searchChars?\n\n            if (Character.isSupplementaryCodePoint(codePoint)) {\n                // Handle supplementary character (requires two chars)\n                final char high = Character.highSurrogate(codePoint);\n                final char low = Character.lowSurrogate(codePoint);\n                boolean highFound = false;\n                boolean lowFound = false;\n                // Check if BOTH surrogates are present in searchChars\n                for (int j = 0; j < searchLength; j++) {\n                    if (searchChars[j] == high) {\n                        highFound = true;\n                    }\n                    if (searchChars[j] == low) {\n                        lowFound = true;\n                    }\n                    // Optimization: If both found, no need to check further for this code point\n                    if (highFound && lowFound) {\n                        break;\n                    }\n                }\n                // A supplementary code point matches only if both its surrogates are in searchChars\n                if (highFound && lowFound) {\n                    found = true;\n                }\n                // Advance the index by one extra step, as this code point used two chars\n                i++;\n            } else {\n                // Handle BMP character (single char)\n                final char ch = (char) codePoint; // Safe cast for BMP code points\n                // Check if this single char is present in searchChars\n                for (int j = 0; j < searchLength; j++) {\n                    if (searchChars[j] == ch) {\n                        found = true;\n                        break; // Found the char, no need to check further in searchChars\n                    }\n                }\n            }\n\n            // If a match was found for the current code point (either BMP or supplementary)\n            if (found) {\n                return true;\n            }\n        }\n\n        // No match found after iterating through all code points in cs\n        return false;\n    }\n\n    // Dummy isEmpty method if not provided by the context/class this method belongs to.\n    // Replace with actual StringUtils.isEmpty if available.\n    private static boolean isEmpty(final CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}