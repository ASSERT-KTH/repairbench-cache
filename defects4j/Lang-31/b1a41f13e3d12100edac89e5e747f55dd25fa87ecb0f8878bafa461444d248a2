{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n\n    Set<Integer> searchCodePoints = new HashSet<>();\n    int searchLength = searchChars.length;\n    int i = 0;\n\n    // Process searchChars into code points\n    while (i < searchLength) {\n        if (i + 1 < searchLength && Character.isHighSurrogate(searchChars[i]) && Character.isLowSurrogate(searchChars[i + 1])) {\n            int codePoint = Character.toCodePoint(searchChars[i], searchChars[i + 1]);\n            searchCodePoints.add(codePoint);\n            i += 2;\n        } else {\n            int codePoint = searchChars[i];\n            searchCodePoints.add(codePoint);\n            i += 1;\n        }\n    }\n\n    int csLength = cs.length();\n    for (i = 0; i < csLength; ) {\n        if (i + 1 < csLength && Character.isHighSurrogate(cs.charAt(i)) && Character.isLowSurrogate(cs.charAt(i + 1))) {\n            int codePoint = Character.toCodePoint(cs.charAt(i), cs.charAt(i + 1));\n            if (searchCodePoints.contains(codePoint)) {\n                return true;\n            }\n            i += 2;\n        } else {\n            int codePoint = cs.charAt(i);\n            if (searchCodePoints.contains(codePoint)) {\n                return true;\n            }\n            i += 1;\n        }\n    }\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}