{
    "generation": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\t\tfor (int i = 0; i < csLength; i++) {\n\t\t\tchar ch = cs.charAt(i);\n\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\tif (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        // ch is a high surrogate. We need to check if it forms a complete supplementary character.\n                        // If it's a high surrogate, a match means it could be part of a two-char code point.\n                        // We need to ensure that the next characters also match to confirm it's the same supplementary character.\n                        if (j == searchLength - 1) {\n                            // The search character is a high surrogate at the end of searchChars.\n                            // It cannot form a complete pair in searchChars.\n                            // In this ambiguous case, we consider the single char match sufficient (consistent with Commons Lang behavior).\n                            return true;\n                        }\n                        if (i == csLength - 1) {\n                            // The current char in cs is a high surrogate at the end of cs.\n                            // It cannot form a complete pair in cs.\n                            // In this ambiguous case, we consider the single char match sufficient (consistent with Commons Lang behavior).\n                            return true;\n                        }\n                        // Both cs and searchChars have a high surrogate. Check if the next char (low surrogate) also matches.\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return true; // Found a full supplementary character match\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane (BMP) or a low surrogate.\n                        // For these characters, a direct char match is sufficient.\n                        return true;\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}