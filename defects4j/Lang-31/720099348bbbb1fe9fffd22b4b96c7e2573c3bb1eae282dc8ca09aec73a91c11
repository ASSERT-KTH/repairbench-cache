{
    "generation": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Use a Set to store search code points for efficient lookup.\n\t\t// This correctly handles supplementary characters (represented by two chars)\n\t\t// by converting them into single code points.\n\t\tjava.util.Set<Integer> searchCodePoints = new java.util.HashSet<>();\n\t\tfor (int j = 0; j < searchChars.length; ) {\n\t\t\tint codePoint = Character.codePointAt(searchChars, j);\n\t\t\tsearchCodePoints.add(codePoint);\n\t\t\tj += Character.charCount(codePoint);\n\t\t}\n\n\t\t// Iterate through the input CharSequence by code points.\n\t\tint csLength = cs.length();\n\t\tfor (int i = 0; i < csLength; ) {\n\t\t\tint codePoint = Character.codePointAt(cs, i);\n\t\t\tif (searchCodePoints.contains(codePoint)) {\n\t\t\t\treturn true; // Found a matching code point\n\t\t\t}\n\t\t\ti += Character.charCount(codePoint); // Advance index by 1 or 2 depending on code point type\n\t\t}\n\t\treturn false;\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}