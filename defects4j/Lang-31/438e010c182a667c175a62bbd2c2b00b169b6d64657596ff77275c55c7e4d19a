{
    "generation": "import org.apache.commons.lang3.ArrayUtils; // Assuming this import exists based on ArrayUtils.isEmpty call\n\n// We assume the existence of a helper method isEmpty(CharSequence) like the one below\n// or similar functionality available in the context (e.g., from StringUtils itself or another utility class).\nimport static org.apache.commons.lang3.StringUtils.isEmpty; // Example import\n\n// ... other imports if necessary ...\n\npublic class StringUtils { // Assuming the method is in a class named StringUtils\n\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * <p>This method handles supplementary characters (code points &gt; 0xFFFF) correctly.</p>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\t\t// Iterate through code points of cs\n\t\tfor (int i = 0; i < csLength; ) {\n\t\t\tint csCodePoint = Character.codePointAt(cs, i);\n\t\t\tint csCharCount = Character.charCount(csCodePoint);\n\n\t\t\t// Iterate through code points of searchChars\n\t\t\tfor (int j = 0; j < searchLength; ) {\n\t\t\t\t int searchCodePoint = Character.codePointAt(searchChars, j);\n\t\t\t\t int searchCharCount = Character.charCount(searchCodePoint);\n\t\t\t\t if (searchCodePoint == csCodePoint) {\n\t\t\t\t\t // Found a matching code point\n\t\t\t\t\t return true;\n\t\t\t\t }\n\t\t\t\t // Increment j by the number of chars for the current search code point\n\t\t\t\t j += searchCharCount;\n\t\t\t}\n\t\t\t// Increment i by the number of chars for the current cs code point\n\t\t\ti += csCharCount;\n\t\t}\n\t\treturn false;\n\t}\n\n    // Helper method stub for isEmpty (if not already available)\n    // private static boolean isEmpty(CharSequence cs) {\n    //     return cs == null || cs.length() == 0;\n    // }\n\n} // End of StringUtils class example",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}