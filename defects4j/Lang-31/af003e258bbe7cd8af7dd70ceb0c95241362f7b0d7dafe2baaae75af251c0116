{
    "generation": "import java.util.HashSet;\nimport java.util.Set;\n\n// Assuming StringUtils.isEmpty and org.apache.commons.lang3.ArrayUtils.isEmpty are accessible.\n// The problem statement implies these helper methods are part of the StringUtils class or its dependencies.\n\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\t// Initial null/empty checks remain the same.\n\t\t// Assuming isEmpty and ArrayUtils.isEmpty are available (as in the original context).\n\t\tif (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) { // Replaced calls to isEmpty/ArrayUtils.isEmpty for self-containment\n\t\t\treturn false;\n\t\t}\n\n\t\t// To correctly handle supplementary characters, we need to compare code points,\n\t\t// not just individual char units.\n\t\t// First, convert the searchChars array into a Set of Unicode code points.\n\t\tSet<Integer> searchCodePoints = new HashSet<>();\n\t\tfor (int i = 0; i < searchChars.length; ) {\n\t\t\t// Character.codePointAt handles surrogate pairs correctly,\n\t\t\t// treating two chars as one code point if they form a valid pair.\n\t\t\tfinal int codePoint = Character.codePointAt(searchChars, i);\n\t\t\tsearchCodePoints.add(codePoint);\n\t\t\t// Move the index by the number of char units the current code point occupies (1 or 2).\n\t\t\ti += Character.charCount(codePoint);\n\t\t}\n\n\t\t// Now, iterate through the input CharSequence by code points\n\t\tfor (int i = 0; i < cs.length(); ) {\n\t\t\tfinal int csCodePoint = Character.codePointAt(cs, i);\n\t\t\t// Check if this code point is present in our set of search code points.\n\t\t\tif (searchCodePoints.contains(csCodePoint)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// Move the index by the number of char units the current code point occupies.\n\t\t\ti += Character.charCount(csCodePoint);\n\t\t}\n\n\t\treturn false;\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}