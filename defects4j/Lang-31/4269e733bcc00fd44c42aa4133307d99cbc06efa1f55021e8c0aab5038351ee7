{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int i = 0;\n    while (i < csLength) {\n        int cp = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchLength; j++) {\n            char searchChar = searchChars[j];\n            // If searchChar is a high surrogate and there's a next char, check for surrogate pair\n            if (Character.isHighSurrogate(searchChar)) {\n                if (j + 1 < searchLength && Character.isLowSurrogate(searchChars[j + 1])) {\n                    int searchCp = Character.toCodePoint(searchChar, searchChars[j + 1]);\n                    if (cp == searchCp) {\n                        return true;\n                    }\n                    j++; // Skip the low surrogate in next iteration\n                } else {\n                    // Unpaired high surrogate, treat as character unit\n                    if (cp == searchChar) {\n                        return true;\n                    }\n                }\n            } else if (Character.isLowSurrogate(searchChar)) {\n                // Unpaired low surrogate\n                if (cp == searchChar) {\n                    return true;\n                }\n            } else {\n                // Normal BMP character\n                if (cp == searchChar) {\n                    return true;\n                }\n            }\n        }\n        i += Character.charCount(cp);\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}