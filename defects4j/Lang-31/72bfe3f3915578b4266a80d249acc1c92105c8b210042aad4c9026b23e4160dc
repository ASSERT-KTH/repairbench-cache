{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    // Convert the searchChars array into codepoints, so we handle\n    // surrogate pairs as single codepoints\n    int scLen = searchChars.length;\n    int[] searchCps = new int[scLen];\n    int scpCount = 0;\n    for (int i = 0; i < scLen; i++) {\n        char c = searchChars[i];\n        if (Character.isHighSurrogate(c) && i < scLen - 1) {\n            char low = searchChars[i + 1];\n            if (Character.isLowSurrogate(low)) {\n                searchCps[scpCount++] = Character.toCodePoint(c, low);\n                i++;\n                continue;\n            }\n        }\n        searchCps[scpCount++] = c;\n    }\n    // Scan the input CharSequence by codepoint\n    int csLen = cs.length();\n    for (int i = 0; i < csLen; ) {\n        char c = cs.charAt(i);\n        int cp;\n        int inc = 1;\n        if (Character.isHighSurrogate(c) && i < csLen - 1) {\n            char low = cs.charAt(i + 1);\n            if (Character.isLowSurrogate(low)) {\n                cp = Character.toCodePoint(c, low);\n                inc = 2;\n            } else {\n                cp = c;\n            }\n        } else {\n            cp = c;\n        }\n        // Check against all search codepoints\n        for (int j = 0; j < scpCount; j++) {\n            if (searchCps[j] == cp) {\n                return true;\n            }\n        }\n        i += inc;\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}