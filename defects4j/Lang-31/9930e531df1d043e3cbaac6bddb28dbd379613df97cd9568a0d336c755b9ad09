{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        if (Character.isHighSurrogate(ch) && i + 1 < csLength) {\n            // Handle supplementary characters (surrogate pairs)\n            char lowSurrogate = cs.charAt(i + 1);\n            if (Character.isLowSurrogate(lowSurrogate)) {\n                // Check if the surrogate pair matches any searchChars\n                // We must search for a surrogate pair in searchChars\n                // which is tricky since searchChars is char[], so we need to find consecutive high/low surrogates\n                for (int j = 0; j < searchLength - 1; j++) {\n                    if (Character.isHighSurrogate(searchChars[j]) && Character.isLowSurrogate(searchChars[j + 1])) {\n                        if (ch == searchChars[j] && lowSurrogate == searchChars[j + 1]) {\n                            return true;\n                        }\n                    }\n                }\n                i++; // Skip the next character as it's part of this surrogate pair\n                continue;\n            }\n        }\n        // Regular check for BMP (Basic Multilingual Plane) characters\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}