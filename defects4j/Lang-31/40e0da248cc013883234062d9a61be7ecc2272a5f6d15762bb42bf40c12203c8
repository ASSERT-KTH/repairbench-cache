{
    "generation": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <p>Note that supplementary characters (those needing two {@code char}s)\n     * are handled correctly.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * StringUtils.containsAny(\" \\uD800\\uDC00 \", ['\\uD800\\uDC00']) = true // Example with supplementary char\n     * StringUtils.containsAny(\" \\uD800\\uDC00 \", ['D', '\\uDC00']) = false // Example with partial surrogate match\n     * StringUtils.containsAny(\" \\uD800\\uDC00 \", ['\\uD800', 'C']) = false // Example with partial surrogate match\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n        // Check if cs is null or empty or searchChars is null or empty\n        // Note: Using explicit check for cs to avoid potential dependency cycles\n        // if StringUtils.isEmpty calls this method internally.\n        if (cs == null || cs.length() == 0 || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        final int csLength = cs.length();\n        final int searchLength = searchChars.length;\n        // Outer loop iterates through code points of cs\n        for (int i = 0; i < csLength; ) {\n            final int csCodePoint = Character.codePointAt(cs, i);\n            // Inner loop iterates through potential code points in searchChars\n            for (int j = 0; j < searchLength; ) {\n                final int searchCodePoint = Character.codePointAt(searchChars, j, searchLength); // Use boundary-checking version\n                if (searchCodePoint == csCodePoint) {\n                    return true;\n                }\n                // Advance inner loop index by char count of searchCodePoint\n                j += Character.charCount(searchCodePoint);\n            }\n            // Advance outer loop index by char count of csCodePoint\n            i += Character.charCount(csCodePoint);\n        }\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}