{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n\n    for (char searchChar : searchChars) {\n        if (is2829Supplement(searchChar)) {\n            if (containsSupplementary(cs, searchChar)) {\n                return true;\n            }\n        } else {\n            for (int i = 0; i < cs.length(); i++) {\n                if (cs.charAt(i) == searchChar) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean is2829Supplement(char ch) {\n    return ch >= Character.MIN_supplementary_CODE_POINT && ch <= Character.MAX_CODE_POINT;\n}\n\nprivate static boolean containsSupplementary(CharSequence cs, char[] searchChars) {\n    for (int i = 0; i < cs.length(); i++) {\n        if (isSurrogate(cs.charAt(i))) {\n            if (i + 1 < cs.length() && isSurrogatePair(cs.charAt(i), cs.charAt(i + 1))) {\n                char[] s = new char[2];\n                s[0] = cs.charAt(i);\n                s[1] = cs.charAt(i + 1);\n                return contains(searchChars, s);\n            }\n        } else {\n            if (contains(searchChars, cs.charAt(i))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean contains(char[] array, char[] s) {\n    for (char[] arr : array) {\n        if (Arrays.equals(arr, s)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static boolean contains(char[] array, char c) {\n    for (char ch : array) {\n        if (ch == c) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static boolean isSurrogate(char c) {\n    return Character.isLowSurrogate(c) || Character.isHighSurrogate(c);\n}\n\nprivate static boolean isSurrogatePair(char c1, char c2) {\n    return Character.isHighSurrogate(c1) && Character.isLowSurrogate(c2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}