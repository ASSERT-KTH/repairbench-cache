{
    "generation": "import java.util.HashSet;\nimport java.util.Set;\n\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n\n    // Pre-process searchChars into a set of codepoints for efficient lookup.\n    // This handles both Basic Multilingual Plane (BMP) characters (single char)\n    // and supplementary characters (surrogate pairs).\n    Set<Integer> searchCodePoints = new HashSet<>();\n    for (int i = 0; i < searchChars.length; ) {\n        // Character.codePointAt correctly extracts a codepoint from a char array,\n        // handling surrogate pairs.\n        final int codePoint = Character.codePointAt(searchChars, i);\n        searchCodePoints.add(codePoint);\n        if (Character.isSupplementaryCodePoint(codePoint)) {\n            i += 2; // Advance by two chars for a supplementary codepoint\n        } else {\n            i += 1; // Advance by one char for a BMP codepoint\n        }\n    }\n\n    // Iterate through the CharSequence 'cs' codepoint by codepoint.\n    for (int i = 0; i < cs.length(); ) {\n        // Character.codePointAt correctly extracts a codepoint from a CharSequence,\n        // handling surrogate pairs.\n        final int csCodePoint = Character.codePointAt(cs, i);\n        if (searchCodePoints.contains(csCodePoint)) {\n            return true; // Found a matching codepoint\n        }\n        if (Character.isSupplementaryCodePoint(csCodePoint)) {\n            i += 2; // Advance by two chars for a supplementary codepoint\n        } else {\n            i += 1; // Advance by one char for a BMP codepoint\n        }\n    }\n\n    return false; // No matching codepoint found\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}