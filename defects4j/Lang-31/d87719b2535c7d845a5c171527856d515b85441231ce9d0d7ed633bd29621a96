{
    "generation": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// The original implementation compares individual 'char' values.\n\t\t// This causes issues with supplementary characters (code points represented by\n\t\t// two 'char's, a surrogate pair) because their high surrogates might match\n\t\t// even if the full code points are different.\n\t\t// To fix this, we need to compare full code points.\n\n\t\tint csLength = cs.length();\n\t\tint searchLength = searchChars.length;\n\n\t\t// Iterate through the input CharSequence 'cs' by code points\n\t\tfor (int i = 0; i < csLength; ) {\n\t\t\tfinal int csCodePoint = Character.codePointAt(cs, i);\n\n\t\t\t// Iterate through the 'searchChars' array by code points\n\t\t\tfor (int j = 0; j < searchLength; ) {\n\t\t\t\tfinal int searchCodePoint = Character.codePointAt(searchChars, j);\n\n\t\t\t\t// If any code point from 'cs' matches any code point from 'searchChars', return true\n\t\t\t\tif (csCodePoint == searchCodePoint) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// Advance 'j' by the number of 'char's in the current searchCodePoint\n\t\t\t\tj += Character.charCount(searchCodePoint);\n\t\t\t}\n\t\t\t// Advance 'i' by the number of 'char's in the current csCodePoint\n\t\t\ti += Character.charCount(csCodePoint);\n\t\t}\n\t\treturn false;\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}