{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    // Convert the searchChars array into an array of Unicode code points,\n    // so that supplementary characters (represented by surrogate pairs)\n    // are handled properly.\n    int[] searchCodePoints = new int[searchChars.length];\n    int count = 0;\n    for (int i = 0; i < searchChars.length; i++) {\n        char ch = searchChars[i];\n        if (Character.isHighSurrogate(ch) && i + 1 < searchChars.length\n                && Character.isLowSurrogate(searchChars[i + 1])) {\n            searchCodePoints[count++] = Character.toCodePoint(ch, searchChars[i + 1]);\n            i++; // skip the low surrogate\n        } else {\n            searchCodePoints[count++] = ch;\n        }\n    }\n    // Trim the array if necessary\n    if (count < searchCodePoints.length) {\n        int[] tmp = new int[count];\n        System.arraycopy(searchCodePoints, 0, tmp, 0, count);\n        searchCodePoints = tmp;\n    }\n\n    int csLength = cs.length();\n    for (int i = 0; i < csLength; ) {\n        int cp = Character.codePointAt(cs, i);\n        for (int searchCp : searchCodePoints) {\n            if (cp == searchCp) {\n                return true;\n            }\n        }\n        i += Character.charCount(cp);\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}