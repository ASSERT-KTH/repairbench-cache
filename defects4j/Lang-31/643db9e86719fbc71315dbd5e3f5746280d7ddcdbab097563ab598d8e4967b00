{
    "generation": "    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\n        // To correctly handle Unicode supplementary characters, we need to compare code points,\n        // not just individual char units (which can be surrogates).\n        // The searchChars array is interpreted as a sequence of code points.\n        // We first build a set of code points from searchChars for efficient lookup.\n        java.util.Set<Integer> searchCodePoints = new java.util.HashSet<>();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < searchLength; ) {\n            // Check if current char and the next one form a valid supplementary code point\n            if (i + 1 < searchLength && Character.isHighSurrogate(searchChars[i]) && Character.isLowSurrogate(searchChars[i + 1])) {\n                searchCodePoints.add(Character.toCodePoint(searchChars[i], searchChars[i + 1]));\n                i += 2; // Move past both surrogate characters\n            } else {\n                // Otherwise, it's a BMP character or an unpaired surrogate; treat as a single code point\n                searchCodePoints.add((int) searchChars[i]);\n                i++; // Move past the current character\n            }\n        }\n\n        // Now, iterate through the CharSequence 'cs' by code points\n        int csLength = cs.length();\n        for (int i = 0; i < csLength; ) {\n            int codePoint = Character.codePointAt(cs, i);\n            if (searchCodePoints.contains(codePoint)) {\n                return true; // Found a matching code point\n            }\n            i += Character.charCount(codePoint); // Move past the current code point (1 or 2 characters)\n        }\n\n\t\treturn false; // No matching code point found\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}