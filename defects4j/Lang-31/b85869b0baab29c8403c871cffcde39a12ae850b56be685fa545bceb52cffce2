{
    "generation": "import java.util.HashSet;\nimport java.util.Set;\n// Assuming ArrayUtils.isEmpty and StringUtils.isEmpty are available in the context.\n// If not, the direct checks below can be used, or local helper methods implemented.\n// import org.apache.commons.lang3.ArrayUtils;\n\n\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <p>This method handles supplementary characters defined by surrogate pairs.\n     * If a surrogate pair is included in <code>searchChars</code>, it is treated as a single\n     * character (code point).</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * StringUtils.containsAny(\"ab\\uD800\\uDC00c\", ['\\uD800', '\\uDC00']) = true // U+10000 in searchChars matches U+10000 in cs\n     * StringUtils.containsAny(\"ab\\uD800\\uDC00c\", ['a', '\\uDC00'])      = true // 'a' matches 'a'\n     * StringUtils.containsAny(\"ab\\uD800\\uDC00c\", ['\\uD800'])           = false // High surrogate alone doesn't match code point U+10000\n     * StringUtils.containsAny(\"ab\\uD83D\\uDE00d\", ['\\uD83D', '\\uDE00']) = true // U+1F600 in searchChars matches U+1F600 in cs\n     * StringUtils.containsAny(\"\\uD800\\uDC00\", ['\\uD800', '\\uDC01'])    = false // U+10000 in cs does not match U+10001 in searchChars\n     * StringUtils.containsAny(\"\\uD800\\uDC00\", ['\\uD800'])              = false // U+10000 in cs does not match high surrogate alone\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return <code>true</code> if any of the characters (code points) are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     * @since 3.0 Changed signature from containsAny(String, char[]) to containsAny(CharSequence, char[])\n     * @since 3.0 Handled supplementary characters correctly (code point aware).\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n        // Replace with StringUtils.isEmpty(cs) || ArrayUtils.isEmpty(searchChars) if those utils are available\n\t\tif (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) {\n\t\t\treturn false;\n\t\t}\n\n        // Build a set of code points from the search characters for efficient lookup.\n        // This set will contain integers representing code points.\n        Set<Integer> searchCodePoints = new HashSet<>();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < searchLength; i++) {\n            char c1 = searchChars[i];\n            // Check if c1 is a high surrogate and if the next char forms a valid pair\n            if (Character.isHighSurrogate(c1)) {\n                if (i + 1 < searchLength) {\n                    char c2 = searchChars[i + 1];\n                    if (Character.isLowSurrogate(c2)) {\n                        // Valid supplementary character found, add its code point to the set\n                        searchCodePoints.add(Character.toCodePoint(c1, c2));\n                        i++; // Skip the low surrogate in the next iteration\n                        continue; // Continue to the next potential code point start\n                    }\n                    // else: High surrogate not followed by a low surrogate. Treat it as an individual char below.\n                }\n                // else: High surrogate at the end of the array. Treat it as an individual char below.\n            }\n            // Add BMP character or an isolated surrogate (treated as a single code point value) to the set.\n            // Casting char to int gives its UTF-16 value, which is the code point for BMP chars.\n            searchCodePoints.add((int) c1);\n        }\n\n        // Iterate through the input CharSequence by code points.\n        int csLength = cs.length();\n        for (int i = 0; i < csLength; ) {\n            // Get the code point at the current index\n            int codePoint = Character.codePointAt(cs, i);\n            // Check if this code point is present in our set of search code points\n            if (searchCodePoints.contains(codePoint)) {\n                return true; // Found a match\n            }\n            // Advance the index by the number of chars used by the current code point\n            // (1 for BMP characters, 2 for supplementary characters)\n            i += Character.charCount(codePoint);\n        }\n\n        // No matching code point found in the entire CharSequence\n\t\treturn false;\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}