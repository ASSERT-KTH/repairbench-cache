{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) {\n        return false;\n    }\n    // First, convert searchChars into an array of code points.\n    int searchCharsLen = searchChars.length;\n    int cpCount = 0;\n    for (int i = 0; i < searchCharsLen; i++) {\n        char ch = searchChars[i];\n        if (Character.isHighSurrogate(ch) && (i + 1) < searchCharsLen && Character.isLowSurrogate(searchChars[i + 1])) {\n            cpCount++;\n            i++; // Skip the low surrogate.\n        } else {\n            cpCount++;\n        }\n    }\n    int[] searchCodePoints = new int[cpCount];\n    for (int i = 0, cpIndex = 0; i < searchCharsLen; i++) {\n        char ch = searchChars[i];\n        if (Character.isHighSurrogate(ch) && (i + 1) < searchCharsLen && Character.isLowSurrogate(searchChars[i + 1])) {\n            searchCodePoints[cpIndex++] = Character.toCodePoint(ch, searchChars[i + 1]);\n            i++; // Skip the low surrogate.\n        } else {\n            searchCodePoints[cpIndex++] = ch;\n        }\n    }\n\n    // Now iterate through cs by code points.\n    for (int i = 0, csLen = cs.length(); i < csLen; ) {\n        int cp = Character.codePointAt(cs, i);\n        for (int searchCp : searchCodePoints) {\n            if (cp == searchCp) {\n                return true;\n            }\n        }\n        i += Character.charCount(cp);\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}