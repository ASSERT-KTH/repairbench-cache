{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n\n    // Convert searchChars into an array of complete Unicode code points.\n    int sLen = searchChars.length;\n    int cpCount = 0;\n    for (int i = 0; i < sLen; i++) {\n        char ch = searchChars[i];\n        if (Character.isHighSurrogate(ch) && i + 1 < sLen && Character.isLowSurrogate(searchChars[i + 1])) {\n            cpCount++;\n            i++; // Skip low surrogate as it is part of this code point.\n        } else {\n            cpCount++;\n        }\n    }\n    int[] searchCodePoints = new int[cpCount];\n    cpCount = 0;\n    for (int i = 0; i < sLen; i++) {\n        char ch = searchChars[i];\n        if (Character.isHighSurrogate(ch) && i + 1 < sLen && Character.isLowSurrogate(searchChars[i + 1])) {\n            searchCodePoints[cpCount++] = Character.toCodePoint(ch, searchChars[i + 1]);\n            i++;\n        } else {\n            searchCodePoints[cpCount++] = ch;\n        }\n    }\n\n    // Iterate through the CharSequence cs, processing full code points.\n    int csLen = cs.length();\n    for (int i = 0; i < csLen; i++) {\n        char current = cs.charAt(i);\n        int cp;\n        if (Character.isHighSurrogate(current) && i + 1 < csLen && Character.isLowSurrogate(cs.charAt(i + 1))) {\n            cp = Character.toCodePoint(current, cs.charAt(i + 1));\n            i++; // Advance past the surrogate pair.\n        } else {\n            cp = current;\n        }\n        for (int searchCp : searchCodePoints) {\n            if (cp == searchCp) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}