{
    "generation": "import java.util.HashSet;\nimport java.util.Set;\nimport org.apache.commons.lang3.ArrayUtils; // Assuming this import exists based on the original code\n\n// We assume StringUtils.isEmpty is available in the context.\n// If not, it can be defined as:\n// public static boolean isEmpty(final CharSequence cs) {\n//     return cs == null || cs.length() == 0;\n// }\n\n\n    /**\n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     * @since 3.0 Changed signature from containsAny(String, char[]) to containsAny(CharSequence, char[])\n     * @since 3.0 Changed signature from containsAny(String, String) to containsAny(CharSequence, CharSequence)\n     *          Added tests for supplementary characters\n     */\n\tpublic static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\n        // Convert searchChars to a set of code points for efficient lookup\n        // This correctly handles supplementary characters specified in searchChars\n        final Set<Integer> searchCodepoints = new HashSet<>();\n        final int searchLength = searchChars.length;\n        for (int i = 0; i < searchLength; ) {\n            final int codepoint = Character.codePointAt(searchChars, i);\n            searchCodepoints.add(codepoint);\n            // Increment by the number of chars composing the code point (1 for BMP, 2 for supplementary)\n            i += Character.charCount(codepoint);\n        }\n\n        final int csLength = cs.length();\n        // Iterate through the input CharSequence by code points\n\t\tfor (int i = 0; i < csLength; ) {\n\t\t\tfinal int codepoint = Character.codePointAt(cs, i);\n            // Check if the current code point exists in the set of search code points\n\t\t\tif (searchCodepoints.contains(codepoint)) {\n\t\t\t\treturn true;\n\t\t\t}\n            // Increment by the number of chars composing the code point (1 for BMP, 2 for supplementary)\n            i += Character.charCount(codepoint);\n\t\t}\n\t\treturn false;\n\t}\n\n    // Helper method assumed to be available from StringUtils context\n    private static boolean isEmpty(final CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}