{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    // Decode the searchChars into code points (to handle surrogate pairs)\n    int searchLen = searchChars.length;\n    int codePointCount = 0;\n    for (int i = 0; i < searchLen; ) {\n        char ch = searchChars[i];\n        if (Character.isHighSurrogate(ch)\n            && i + 1 < searchLen\n            && Character.isLowSurrogate(searchChars[i + 1])) {\n            codePointCount++;\n            i += 2;\n        } else {\n            codePointCount++;\n            i++;\n        }\n    }\n    int[] searchCps = new int[codePointCount];\n    for (int i = 0, j = 0; i < searchLen; ) {\n        char ch = searchChars[i];\n        if (Character.isHighSurrogate(ch)\n            && i + 1 < searchLen\n            && Character.isLowSurrogate(searchChars[i + 1])) {\n            searchCps[j++] = Character.toCodePoint(ch, searchChars[i + 1]);\n            i += 2;\n        } else {\n            searchCps[j++] = ch;\n            i++;\n        }\n    }\n    // Scan the input CharSequence by code point\n    int csLen = cs.length();\n    for (int i = 0; i < csLen; ) {\n        char ch = cs.charAt(i);\n        int cp;\n        if (Character.isHighSurrogate(ch)\n            && i + 1 < csLen\n            && Character.isLowSurrogate(cs.charAt(i + 1))) {\n            cp = Character.toCodePoint(ch, cs.charAt(i + 1));\n            i += 2;\n        } else {\n            cp = ch;\n            i++;\n        }\n        for (int scp : searchCps) {\n            if (scp == cp) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}