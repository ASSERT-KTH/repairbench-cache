{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        // Check if this char and the next form a supplementary character\n        if (i + 1 < csLength && Character.isSurrogatePair(cs.charAt(i), cs.charAt(i + 1))) {\n            // This is part of a surrogate pair, so we'll handle it specially\n            int codePoint = Character.toCodePoint(cs.charAt(i), cs.charAt(i + 1));\n            for (int j = 0; j < searchLength; j++) {\n                // Check if searchChars[j] is the first part of a surrogate pair\n                if (j + 1 < searchLength && Character.isSurrogatePair(searchChars[j], searchChars[j + 1])) {\n                    int searchCodePoint = Character.toCodePoint(searchChars[j], searchChars[j + 1]);\n                    if (codePoint == searchCodePoint) {\n                        return true;\n                    }\n                    j++; // skip the next char as we've processed it\n                } else {\n                    // Compare with single character\n                    if (searchChars[j] == ch || searchChars[j] == cs.charAt(i + 1)) {\n                        // Only return true if it's not part of a surrogate pair match\n                        // (though this case would have been caught above)\n                        continue; // we need to check both parts of the surrogate pair\n                    }\n                }\n            }\n            i++; // skip the next char as we've processed both parts of the surrogate pair\n        } else {\n            // Regular character (BMP character)\n            for (int j = 0; j < searchLength; j++) {\n                // Check if searchChars[j] is part of a surrogate pair\n                if (j + 1 < searchLength && Character.isSurrogatePair(searchChars[j], searchChars[j + 1])) {\n                    j++; // skip the surrogate pair as we can't match half of it\n                } else if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}