{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    \n    // Convert the searchChars array into an array of Unicode code points.\n    int searchLen = searchChars.length;\n    int codePointCount = 0;\n    for (int i = 0; i < searchLen; i++) {\n        if (Character.isHighSurrogate(searchChars[i]) && i + 1 < searchLen \n                && Character.isLowSurrogate(searchChars[i + 1])) {\n            codePointCount++;\n            i++; // skip the low surrogate as it was paired\n        } else {\n            codePointCount++;\n        }\n    }\n    int[] searchCodePoints = new int[codePointCount];\n    int index = 0;\n    for (int i = 0; i < searchLen; i++) {\n        if (Character.isHighSurrogate(searchChars[i]) && i + 1 < searchLen \n                && Character.isLowSurrogate(searchChars[i + 1])) {\n            searchCodePoints[index++] = Character.toCodePoint(searchChars[i], searchChars[i + 1]);\n            i++; // skip the pair\n        } else {\n            searchCodePoints[index++] = searchChars[i];\n        }\n    }\n    \n    // Now iterate through the cs by Unicode code points.\n    int csLen = cs.length();\n    for (int i = 0; i < csLen; ) {\n        int cp = Character.codePointAt(cs, i);\n        for (int candidate : searchCodePoints) {\n            if (cp == candidate) {\n                return true;\n            }\n        }\n        i += Character.charCount(cp);\n    }\n    \n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}