{
    "generation": "import java.util.HashSet;\nimport java.util.Set;\n// Note: The ArrayUtils.isEmpty method is assumed to be available from org.apache.commons.lang3.ArrayUtils\n\n    /**\n     * <p>Checks if the CharSequence contains any character (code point) in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <p>This method handles supplementary characters based on code points.\n     * If a surrogate pair appears in <code>searchChars</code>, it is treated as\n     * a single supplementary character code point. Unpaired surrogates are\n     * treated as separate code points.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * StringUtils.containsAny(\"\\uD800\\uDC00\", ['\\uD800', '\\uDC00']) = true // U+10000 in cs, U+10000 in searchChars\n     * StringUtils.containsAny(\"\\uD800\\uDC01\", ['\\uD800', '\\uDC00']) = false // U+10001 in cs, U+10000 in searchChars\n     * StringUtils.containsAny(\"\\uD800\", ['\\uD800', '\\uDC00'])      = false // U+D800 in cs, U+10000 in searchChars\n     * StringUtils.containsAny(\"\\uD800\\uDC00\", ['\\uD800'])          = false // U+10000 in cs, U+D800 in searchChars\n     * StringUtils.containsAny(\"\\uD800\", ['\\uD800'])                = true // U+D800 in both\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return <code>true</code> if any code point in <code>cs</code> is also represented in <code>searchChars</code>,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\t// Check for null or empty inputs\n        // Note: Using explicit check for cs instead of isEmpty(cs) from the original code\n        // to avoid potential recursion if this is StringUtils.isEmpty itself.\n\t\tif (cs == null || cs.length() == 0 || org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\n        // Build a set of code points from searchChars for efficient lookup.\n        // This handles supplementary characters correctly if they are represented\n        // by adjacent surrogate pairs in searchChars. Unpaired surrogates are treated\n        // as individual code points (their char values).\n        final Set<Integer> searchCodePoints = new HashSet<>();\n        final int searchLength = searchChars.length;\n        for (int i = 0; i < searchLength; ) {\n            final int codePoint = Character.codePointAt(searchChars, i);\n            searchCodePoints.add(codePoint);\n            i += Character.charCount(codePoint); // Advance index by 1 or 2\n        }\n\n        // Iterate through the input CharSequence by code points.\n        final int csLength = cs.length();\n        for (int i = 0; i < csLength; ) {\n            final int codePoint = Character.codePointAt(cs, i);\n            // Check if the current code point exists in the search set.\n            if (searchCodePoints.contains(codePoint)) {\n                return true;\n            }\n            i += Character.charCount(codePoint); // Advance index by 1 or 2\n        }\n\n\t\treturn false; // No matching code point found\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}