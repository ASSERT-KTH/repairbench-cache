{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    for (int i = 0; i < csLength; ) {\n        char ch = cs.charAt(i);\n        for (int j = 0; j < searchLength; ) {\n            char searchChar = searchChars[j];\n            if (ch == searchChar) {\n                return true;\n            }\n            // handle supplementary characters in the search array\n            if (Character.isHighSurrogate(searchChar) && j + 1 < searchLength) {\n                char nextChar = searchChars[j + 1];\n                if (Character.isLowSurrogate(nextChar)) {\n                    int codePoint = Character.toCodePoint(searchChar, nextChar);\n                    int currentCodePoint;\n                    if (Character.isHighSurrogate(ch) && i + 1 < csLength) {\n                        char nextCh = cs.charAt(i + 1);\n                        if (Character.isLowSurrogate(nextCh)) {\n                            currentCodePoint = Character.toCodePoint(ch, nextCh);\n                            if (currentCodePoint == codePoint) {\n                                return true;\n                            }\n                        }\n                    }\n                    j += 2; // skip low surrogate\n                    continue;\n                }\n            }\n            // handle supplementary characters in the CharSequence\n            if (Character.isHighSurrogate(ch) && i + 1 < csLength) {\n                char nextCh = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(nextCh)) {\n                    int currentCodePoint = Character.toCodePoint(ch, nextCh);\n                    // check against BMP characters in search array\n                    for (int k = 0; k < searchLength; k++) {\n                        if (!Character.isHighSurrogate(searchChars[k])) {\n                            if (currentCodePoint == searchChars[k]) {\n                                return true;\n                            }\n                        }\n                    }\n                    i += 2; // skip low surrogate\n                    ch = '\\0'; // prevent normal char check below\n                }\n            }\n            // normal case\n            if (ch != '\\0' && ch == searchChars[j]) {\n                return true;\n            }\n            if (Character.isHighSurrogate(searchChar) && j + 1 < searchLength && Character.isLowSurrogate(searchChars[j + 1])) {\n                j += 2;\n            } else {\n                j++;\n            }\n        }\n        if (Character.isHighSurrogate(ch) && i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {\n            i += 2;\n        } else {\n            i++;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}