{
    "generation": "\t/**\n\t * <p>Checks if the CharSequence contains any character in the given\n\t * set of characters.</p>\n\t *\n\t * <p>A <code>null</code> CharSequence will return <code>false</code>.\n\t * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n\t *\n\t * <pre>\n\t * StringUtils.containsAny(null, *)                = false\n\t * StringUtils.containsAny(\"\", *)                  = false\n\t * StringUtils.containsAny(*, null)                = false\n\t * StringUtils.containsAny(*, [])                  = false\n\t * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n\t * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n\t * StringUtils.containsAny(\"aba\", ['z'])           = false\n\t * </pre>\n\t *\n\t * @param cs  the CharSequence to check, may be null\n\t * @param searchChars  the chars to search for, may be null\n\t * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n\t * @since 2.4\n\t */\n\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n\t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n\t\t\treturn false;\n\t\t}\n\t\t// Convert CharSequence and searchChars to code point arrays\n\t\tint[] csCodePoints = toCodePoints(cs);\n\t\tint[] searchCodePoints = toCodePoints(searchChars);\n\t\t// Create a set of search code points for quick lookup\n\t\tSet<Integer> searchSet = new HashSet<>();\n\t\tfor (int codePoint : searchCodePoints) {\n\t\t\tsearchSet.add(codePoint);\n\t\t}\n\t\t// Check each code point in cs for presence in searchSet\n\t\tfor (int codePoint : csCodePoints) {\n\t\t\tif (searchSet.contains(codePoint)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\t// Helper method to convert a CharSequence to an array of code points\n\tprivate static int[] toCodePoints(CharSequence cs) {\n\t\tint length = cs.length();\n\t\tint[] codePoints = new int[length];\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\tcodePoints[i] = cs.charAt(i);\n\t\t}\n\t\treturn codePoints;\n\t}\n\t\n\t// Helper method to convert a char array to an array of code points\n\tprivate static int[] toCodePoints(char[] chars) {\n\t\tList<Integer> codePointsList = new ArrayList<>();\n\t\tfor (int i = 0; i < chars.length; ) {\n\t\t\tchar c = chars[i];\n\t\t\tif (Character.isLowSurrogate(c) && i + 1 < chars.length) {\n\t\t\t\tchar nextC = chars[i + 1];\n\t\t\t\tif (Character.isHighSurrogate(nextC)) {\n\t\t\t\t\t// This is a supplementary character, represented by a surrogate pair\n\t\t\t\t\tint codePoint = Character.toCodePoint(c, nextC);\n\t\t\t\t\tcodePointsList.add(codePoint);\n\t\t\t\t\ti += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// BMP character\n\t\t\tcodePointsList.add(Character.codePointAt(chars, i));\n\t\t\ti++;\n\t\t}\n\t\t// Convert the list to an array\n\t\tint[] codePoints = new int[codePointsList.size()];\n\t\tfor (int j = 0; j < codePointsList.size(); j++) {\n\t\t\tcodePoints[j] = codePointsList.get(j);\n\t\t}\n\t\treturn codePoints;\n\t}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}