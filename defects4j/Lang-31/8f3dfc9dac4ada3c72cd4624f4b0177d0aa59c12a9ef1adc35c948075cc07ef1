{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    \n    // Convert searchChars into an array of code points.\n    int[] searchCodePoints = new int[searchChars.length];\n    int searchCpCount = 0;\n    for (int i = 0; i < searchChars.length; i++) {\n        char ch = searchChars[i];\n        if (Character.isHighSurrogate(ch) && i + 1 < searchChars.length\n                && Character.isLowSurrogate(searchChars[i + 1])) {\n            searchCodePoints[searchCpCount++] = Character.toCodePoint(ch, searchChars[i + 1]);\n            i++; // Skip the low surrogate.\n        } else {\n            searchCodePoints[searchCpCount++] = ch;\n        }\n    }\n    \n    // Iterate over cs code point by code point.\n    int csLength = cs.length();\n    for (int i = 0; i < csLength; ) {\n        int cp = Character.codePointAt(cs, i);\n        for (int j = 0; j < searchCpCount; j++) {\n            if (cp == searchCodePoints[j]) {\n                return true;\n            }\n        }\n        i += Character.charCount(cp);\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}