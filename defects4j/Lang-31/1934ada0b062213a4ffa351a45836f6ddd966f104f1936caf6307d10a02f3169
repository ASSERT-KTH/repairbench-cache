{
    "generation": "import org.apache.commons.lang3.ArrayUtils; // Added for clarity, assumed available in context\n\n/**\n * <p>Checks if the CharSequence contains any character in the given\n * set of characters.</p>\n *\n * <p>A <code>null</code> CharSequence will return <code>false</code>.\n * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n *\n * <pre>\n * StringUtils.containsAny(null, *)                = false\n * StringUtils.containsAny(\"\", *)                  = false\n * StringUtils.containsAny(*, null)                = false\n * StringUtils.containsAny(*, [])                  = false\n * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n * StringUtils.containsAny(\"aba\", ['z'])           = false\n * StringUtils.containsAny(\"ab\\uD800\\uDC00c\", ['\\uD800\\uDC00']) = true // Example with supplementary\n * StringUtils.containsAny(\"ab\\uD800\\uDC00c\", ['d', '\\uD800\\uDC00']) = true // Example with supplementary\n * StringUtils.containsAny(\"ab\\uD800\\uDC00c\", ['d', 'x']) = false // Example with supplementary\n * </pre>\n *\n * @param cs  the CharSequence to check, may be null\n * @param searchChars  the chars to search for, may be null\n * @return the <code>true</code> if any of the chars are found,\n * <code>false</code> if no match or null input\n * @since 2.4\n * @since 3.0 Changed signature from containsAny(String, char[]) to containsAny(CharSequence, char[])\n */\npublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n    // Assuming StringUtils.isEmpty handles CharSequence correctly\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    int csIdx = 0;\n    while (csIdx < csLength) {\n        // Get the code point at the current index in cs\n        int csCodePoint = Character.codePointAt(cs, csIdx);\n        int csCharCount = Character.charCount(csCodePoint); // Number of chars for this code point\n\n        int searchIdx = 0;\n        while (searchIdx < searchLength) {\n            // Get the code point at the current index in searchChars\n            int searchCodePoint = Character.codePointAt(searchChars, searchIdx);\n             // Number of chars for this code point\n            int searchCharCount = Character.charCount(searchCodePoint);\n\n            // Compare the code points\n            if (searchCodePoint == csCodePoint) {\n                return true; // Found a matching code point\n            }\n\n            // Move to the next code point in searchChars\n            searchIdx += searchCharCount;\n        }\n\n        // Move to the next code point in cs\n        csIdx += csCharCount;\n    }\n    return false; // No match found\n}\n\n// Assuming isEmpty is available, e.g.:\n// private static boolean isEmpty(final CharSequence cs) {\n//      return cs == null || cs.length() == 0;\n// }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}