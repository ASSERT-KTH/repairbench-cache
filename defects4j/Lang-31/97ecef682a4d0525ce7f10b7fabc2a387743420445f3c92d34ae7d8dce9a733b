{
    "generation": "    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        int csLength = cs.length();\n        int searchLength = searchChars.length;\n        for (int i = 0; i < csLength; ) {\n            char ch = cs.charAt(i);\n            // Check if it's a high surrogate (start of a supplementary character)\n            if (Character.isHighSurrogate(ch) && i + 1 < csLength) {\n                char low = cs.charAt(i + 1);\n                if (Character.isLowSurrogate(low)) {\n                    // Process as a supplementary character\n                    int codePoint = Character.toCodePoint(ch, low);\n                    for (int j = 0; j < searchLength; ) {\n                        char searchCh = searchChars[j];\n                        if (Character.isHighSurrogate(searchCh) && j + 1 < searchLength) {\n                            char searchLow = searchChars[j + 1];\n                            if (Character.isLowSurrogate(searchLow)) {\n                                int searchCodePoint = Character.toCodePoint(searchCh, searchLow);\n                                if (codePoint == searchCodePoint) {\n                                    return true;\n                                }\n                                j += 2;  // skip low surrogate\n                                continue;\n                            }\n                        }\n                        if (ch == searchCh || (i + 1 < csLength && cs.charAt(i + 1) == searchCh)) {\n                            return true;\n                        }\n                        j++;\n                    }\n                    i += 2;  // skip low surrogate\n                    continue;\n                }\n            }\n            // Regular character check\n            for (int j = 0; j < searchLength; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n            i++;\n        }\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}