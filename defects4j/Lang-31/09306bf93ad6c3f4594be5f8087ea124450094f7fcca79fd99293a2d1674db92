{
    "generation": "public static boolean containsAny(CharSequence cs, char[] searchChars) {\n    if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = cs.length();\n    int searchLength = searchChars.length;\n    // Convert the searchChars array into an array of Unicode code points\n    int[] searchCodePoints = new int[searchLength];\n    int searchCpCount = 0;\n    for (int i = 0; i < searchLength; i++) {\n        char ch = searchChars[i];\n        if (Character.isHighSurrogate(ch)\n            && i + 1 < searchLength\n            && Character.isLowSurrogate(searchChars[i + 1])) {\n            // supplementary character in search array\n            searchCodePoints[searchCpCount++] = Character.toCodePoint(ch, searchChars[++i]);\n        } else {\n            // BMP character or unpaired surrogate\n            searchCodePoints[searchCpCount++] = ch;\n        }\n    }\n    // Scan the input CharSequence by code points\n    for (int i = 0; i < csLength; i++) {\n        char ch = cs.charAt(i);\n        int cp;\n        if (Character.isHighSurrogate(ch)\n            && i + 1 < csLength\n            && Character.isLowSurrogate(cs.charAt(i + 1))) {\n            // supplementary character in cs\n            cp = Character.toCodePoint(ch, cs.charAt(++i));\n        } else {\n            // BMP character or unpaired surrogate\n            cp = ch;\n        }\n        // check if this code point is in the search set\n        for (int j = 0; j < searchCpCount; j++) {\n            if (searchCodePoints[j] == cp) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}