{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped\n    //    value itself is NOT passed via `CreatorProperty` (which isn't supported).\n    //    Ok however to pass via setter or field.\n\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // Cache the value so that the token is not lost\n            Object value = _deserializeWithErrorWrapping(p, ctxt, creatorProp);\n            // Last creator property to set?\n            if (buffer.assignParameter(creatorProp, value)) {\n                t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    bean = wrapInstantiationProblem(e, ctxt);\n                }\n                // [databind#631]: Assign current value, to be accessible by custom serializers\n                p.setCurrentValue(bean);\n                // ------------- FIX START --------------\n                // After last creator property is set, we must continue to process all fields until END_OBJECT!\n                for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n                    String remName = p.getCurrentName();\n                    p.nextToken();\n                    // regular property? needs buffering\n                    SettableBeanProperty prop = _beanProperties.find(remName);\n                    if (prop != null) {\n                        Object propValue = _deserializeWithErrorWrapping(p, ctxt, prop);\n                        prop.set(bean, propValue);\n                        continue;\n                    }\n                    // Object Id property?\n                    if (buffer.readIdProperty(remName)) {\n                        continue;\n                    }\n                    // Things marked as ignorable should not be passed to any setter\n                    if (_ignorableProps != null && _ignorableProps.contains(remName)) {\n                        handleIgnoredProperty(p, ctxt, handledType(), remName);\n                        continue;\n                    }\n                    // Any setter, or unwrapped\n                    if (_anySetter == null) {\n                        tokens.writeFieldName(remName);\n                        tokens.copyCurrentStructure(p);\n                    } else {\n                        // Need to copy to a separate buffer first\n                        TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);\n                        tokens.writeFieldName(remName);\n                        tokens.append(b2);\n                        try {\n                            _anySetter.set(bean, remName,\n                                    _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));\n                        } catch (Exception e) {\n                            wrapAndThrow(e, _beanType.getRawClass(), remName, ctxt);\n                        }\n                        continue;\n                    }\n                }\n                // ------------- FIX END --------------\n\n                tokens.writeEndObject();\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportInputMismatch(creatorProp,\n                            \"Cannot create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n            continue;\n        }\n        // Things marked as ignorable should not be passed to any setter\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // 29-Nov-2016, tatu: probably should try to avoid sending content\n        //    both to any setter AND buffer... but, for now, the only thing\n        //    we can do.\n        // how about any setter? We'll get copies but...\n        if (_anySetter == null) {\n            // but... others should be passed to unwrapped property deserializers\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n        } else {\n            // Need to copy to a separate buffer first\n            TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);\n            tokens.writeFieldName(propName);\n            tokens.append(b2);\n            try {\n                buffer.bufferAnyProperty(_anySetter, propName,\n                        _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));\n            } catch (Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n            }\n            continue;\n        }\n    }\n\n    // We hit END_OBJECT, so:\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; // never gets here\n    }\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}