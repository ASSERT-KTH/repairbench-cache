{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // Last creator property to set?\n            if (buffer.assignParameter(creatorProp,\n                    _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    bean = wrapInstantiationProblem(e, ctxt);\n                }\n                // [databind#631]: Assign current value, to be accessible by custom serializers\n                p.setCurrentValue(bean);\n\n                // [databind#2088] Instead of skipping tokens, we must copy ALL the remaining\n                // fields from the current FIELD_NAME, including the current one and its value,\n                // into the tokens buffer, and also process them for setting on the object.\n                // Since current token is the value for the last creator property,\n                // we need to collect from the next FIELD_NAME (or END_OBJECT).\n                t = p.getCurrentToken();\n                while (t == JsonToken.FIELD_NAME) {\n                    String name = p.getCurrentName();\n                    p.nextToken();\n                    // regular property? needs buffering\n                    SettableBeanProperty prop = _beanProperties.find(name);\n                    if (prop != null) {\n                        Object value = _deserializeWithErrorWrapping(p, ctxt, prop);\n                        prop.deserializeAndSet(p, ctxt, bean);\n                        tokens.writeFieldName(name);\n                        tokens.writeObject(value);\n                        t = p.nextToken();\n                        continue;\n                    }\n                    // Object Id property?\n                    if (_objectIdReader != null && _objectIdReader.maySerializeAsObject() && _objectIdReader.isValidReferencePropertyName(name, p)) {\n                        _objectIdReader.readObjectReference(p, ctxt);\n                        t = p.nextToken();\n                        continue;\n                    }\n                    // Things marked as ignorable should not be passed to any setter\n                    if (_ignorableProps != null && _ignorableProps.contains(name)) {\n                        handleIgnoredProperty(p, ctxt, handledType(), name);\n                        t = p.nextToken();\n                        continue;\n                    }\n                    // anySetter?\n                    if (_anySetter == null) {\n                        tokens.writeFieldName(name);\n                        tokens.copyCurrentStructure(p);\n                    } else {\n                        TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);\n                        tokens.writeFieldName(name);\n                        tokens.append(b2);\n                        try {\n                            _anySetter.deserializeAndSet(b2.asParserOnFirstToken(), ctxt, bean, name);\n                        } catch (Exception e) {\n                            wrapAndThrow(e, _beanType.getRawClass(), name, ctxt);\n                        }\n                    }\n                    p.skipChildren();\n                    t = p.nextToken();\n                }\n\n                tokens.writeEndObject();\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportInputMismatch(creatorProp,\n                            \"Cannot create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n            continue;\n        }\n        // Things marked as ignorable should not be passed to any setter\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // how about any setter? We'll get copies but...\n        if (_anySetter == null) {\n            // but... others should be passed to unwrapped property deserializers\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n        } else {\n            // Need to copy to a separate buffer first\n            TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);\n            tokens.writeFieldName(propName);\n            tokens.append(b2);\n            try {\n                buffer.bufferAnyProperty(_anySetter, propName,\n                        _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));\n            } catch (Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n            }\n            continue;\n        }\n    }\n\n    // We hit END_OBJECT, so:\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; // never gets here\n    }\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}