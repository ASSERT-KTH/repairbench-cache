{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped\n        //    value itself is NOT passed via `CreatorProperty` (which isn't supported).\n        //    Ok however to pass via setter or field.\n\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Last creator property to set?\n                // 21-Feb-2017, tatu: With [databind#1555], we may need to ensure we have value...\n                if (buffer.assignParameter(creatorProp,\n                        _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        bean = wrapInstantiationProblem(e, ctxt);\n                    }\n                    // [databind#631]: Assign current value, to be accessible by custom serializers\n                    p.setCurrentValue(bean);\n\n                    // if so, need to copy all remaining tokens into buffer\n                    // [databind#2088]: may need to skip name to get value\n                    while (t == JsonToken.FIELD_NAME) {\n                        // 23-Mar-2017, tatu: Initially had simple `copyCurrentStructure` call here,\n                        //   but that is not quite sufficient, for two reasons:\n                        //   (1) Need to FIELD_NAME, VALUE pair -- copyCurrentStructure() does not do that\n                        //   (2) Unwrapped values may require further processing by `UnwrappedPropertyHandler`\n                        //  So we'll have to simply use same logic as prior to calling creator\n                        tokens.writeFieldName(p.getCurrentName());\n                        p.nextToken(); // value\n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        // !!! 08-Jul-2011, tatu: Could probably support; but for now\n                        //   it's too complicated, so bail out\n                        // 17-Jan-2018, tatu: as per [databind#1853] better be explicit.\n                        return ctxt.reportBadDefinition(_beanType, String.format(\n                                \"Cannot create polymorphic instances with unwrapped values. Problem encountered with definition of %s: \",\n                                _beanType.getRawClass().getName()));\n                    }\n                    // 28-Aug-2018, tatu: As per [databind#2088] need to make sure handler gets called\n                    //   AND that token stream contains buffered properties as well as remaining main-level\n                    //   ones.\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n            // Things marked as ignorable should not be passed to any setter\n            Set<String> ignored = _ignorableProps;\n            if (ignored != null && ignored.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            // External type id? No, not known how to handle those...\n            if (_externalTypeIdHandler != null) {\n                if (_externalTypeIdHandler.handlePropertyValue(p, ctxt, propName, null)) {\n                    continue;\n                }\n            }\n\n            // 29-Nov-2016, tatu: probably should try to avoid sending content\n            //    both to any setter AND buffer... but, for now, the only thing\n            //    we can do.\n            // how about any setter? We'll get copies but...\n            if (_anySetter == null) {\n                // but... others should be passed to unwrapped property deserializers\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n            } else {\n                // Need to copy to a separate buffer first\n                TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);\n                tokens.writeFieldName(propName);\n                tokens.append(b2);\n                try {\n                    // 11-Jun-2018, tatu: [databind#1349] This is problematic wrt ordering;\n                    //    may need to change but...\n                    buffer.bufferAnyProperty(_anySetter, propName,\n                            _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                continue;\n            }\n        }\n\n        // We hit END_OBJECT, so:\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            // We wrap, then caller needs to re-throw? Or we could just re-throw? Or.. leave it?\n            // 24-Aug-2018, tatu: Let's actually wrap it here, simplifies call site\n            // (note: can NOT return null, may get confused with absent value for primitive props)\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        // 28-Aug-2018, tatu: As per [databind#2088] need to make sure handler gets called\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}