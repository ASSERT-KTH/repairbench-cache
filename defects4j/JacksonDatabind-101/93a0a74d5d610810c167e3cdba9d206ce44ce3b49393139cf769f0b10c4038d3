{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped\n        //    value itself is NOT passed via `CreatorProperty` (which isn't supported).\n        //    Ok however to pass via setter or field.\n        \n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        Object bean = null; // Declare bean here, initialized to null\n\n        // Loop through all tokens (fields and their values)\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // Advance parser to point to the value of the current field\n            \n            // 1. Check for creator properties\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // If this is the last creator property needed\n                if (buffer.assignParameter(creatorProp,\n                        _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    // All creator properties found, build the bean instance\n                    t = p.nextToken(); // Move parser to the next FIELD_NAME or END_OBJECT (after current value)\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        bean = wrapInstantiationProblem(e, ctxt);\n                    }\n                    // [databind#631]: Assign current value, to be accessible by custom serializers\n                    p.setCurrentValue(bean);\n                    // Continue the loop to process remaining tokens, they will be handled\n                    // by the appropriate branches below (regular property, unwrapped property etc.)\n                }\n                continue; // Creator property handled\n            }\n            // 2. Check for Object Id property\n            if (buffer.readIdProperty(propName)) {\n                continue; // Object Id property handled\n            }\n            // 3. Check for regular properties\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                // If bean has already been instantiated by creator, apply property directly\n                if (bean != null) {\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                } else { // Bean not yet instantiated, buffer property for later application\n                    buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                }\n                continue; // Regular property handled\n            }\n            // 4. Check for ignorable properties\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue; // Ignorable property handled\n            }\n            // 5. If none of the above, it's either an unwrapped property or handled by any-setter.\n            //    In either case, it needs to be buffered into `tokens` for later processing.\n            if (_anySetter == null) { // No any-setter, so it's an unwrapped property (or unknown)\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n            } else { // Has any-setter, so it gets buffered for that handler\n                // Need to copy to a separate buffer first\n                TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);\n                tokens.writeFieldName(propName);\n                tokens.append(b2);\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName,\n                            _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                continue; // Any-setter property handled\n            }\n        }\n\n        // We've processed all incoming tokens up to END_OBJECT.\n        // Finalize bean creation if not already done, and apply pending properties.\n        if (bean == null) {\n            // If bean was not created by creator properties (e.g., no creator properties, or empty input)\n            try {\n                bean = creator.build(ctxt, buffer); // Builds bean and applies any buffered creator/regular properties\n            } catch (Exception e) {\n                return wrapInstantiationProblem(e, ctxt); // Return the problematic bean instance or null\n            }\n        } else {\n            // Bean was already created by creator properties.\n            // Ensure any remaining buffered non-creator properties (like _anySetter properties buffered via `bufferAnyProperty`)\n            // are applied to this existing bean instance.\n            bean = (Object) buffer.handlePending(p, ctxt, bean);\n        }\n\n        // Final sanity check for polymorphic type if `bean` is built\n        // (This check assumes `bean` has been successfully created)\n        if (bean.getClass() != _beanType.getRawClass()) {\n            // !!! 08-Jul-2011, tatu: Could probably support; but for now\n            //   it's too complicated, so bail out\n            ctxt.reportInputMismatch(p, // Use 'p' as source of error, or null, if creatorProp not reliable\n                    \"Cannot create polymorphic instances with unwrapped values\");\n            return null; // Return null if invalid\n        }\n\n        // Process buffered unwrapped properties using the handler\n        tokens.writeEndObject(); // Ensure the buffered tokens form a complete JSON object\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}