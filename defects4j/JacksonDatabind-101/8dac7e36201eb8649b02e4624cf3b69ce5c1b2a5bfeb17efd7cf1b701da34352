{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken();\n\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            if (buffer.assignParameter(creatorProp,\n                    _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                t = p.nextToken();\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    bean = wrapInstantiationProblem(e, ctxt);\n                }\n                p.setCurrentValue(bean);\n\n                if (t == JsonToken.END_OBJECT) {\n                    // If no more properties, proceed\n                    tokens.writeEndObject();\n                    bean = processUnwrappedAndReturn(p, ctxt, bean, tokens);\n                    return bean;\n                }\n\n                // Skip the next token if it's FIELD_NAME and hasn't been processed\n                boolean isNextField = (t == JsonToken.FIELD_NAME);\n                t = p.nextToken();\n                while (t == JsonToken.FIELD_NAME) {\n                    processFieldAfterCreatorProp(p, ctxt, propName, tokens, t);\n                    t = p.nextToken();\n                }\n                if (isNextField) { // Ensure we don't miss the next token after the last FIELD_NAME\n                    p.nextToken();\n                }\n                tokens.writeEndObject();\n                return processUnwrappedAndReturn(p, ctxt, bean, tokens);\n            }\n            continue;\n        }\n\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n            continue;\n        }\n\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n\n        if (_anySetter != null) {\n            TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);\n            tokens.writeFieldName(propName);\n            tokens.append(b2);\n            buffer.bufferAnyProperty(_anySetter, propName,\n                    _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));\n        } else {\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n        }\n    }\n\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n    tokens.writeEndObject();\n\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}\n\nprivate Object processUnwrappedAndReturn(JsonParser p, DeserializationContext ctxt, Object bean, TokenBuffer tokens) {\n    if (bean.getClass() != _beanType.getRawClass()) {\n        ctxt.reportInputMismatch(null, \"Cannot create polymorphic instances with unwrapped values\");\n        return null;\n    }\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}\n\nprivate void processFieldAfterCreatorProp(JsonParser p, DeserializationContext ctxt, String propName, TokenBuffer tokens, JsonToken t) {\n    if (t == JsonToken.FIELD_NAME) {\n        String name = p.getCurrentName();\n        p.nextToken();\n        tokens.writeFieldName(name);\n        tokens.copyCurrentStructure(p);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}