{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            if (buffer.assignParameter(creatorProp,\n                    _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    bean = wrapInstantiationProblem(e, ctxt);\n                }\n                p.setCurrentValue(bean);\n                // Note: DO NOT advance parser token here; we already did p.nextToken() at start of loop\n                // So 'p' is pointing at value we just passed into creator property.\n                // But we have to skip past this value, as well as copy it to tokens\n                // Write the creator property into tokens as well:\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n                t = p.nextToken(); // move to next token after creator property value\n                // then process all remaining tokens to preserve unwrapped contents:\n                while (t == JsonToken.FIELD_NAME) {\n                    tokens.writeFieldName(p.getCurrentName());\n                    p.nextToken();\n                    tokens.copyCurrentStructure(p);\n                    t = p.nextToken();\n                }\n                tokens.writeEndObject();\n\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportInputMismatch(creatorProp,\n                        \"Cannot create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n            // else, more creator properties to find, continue:\n            // But ALSO, buffer the property value so that it is available to \"vanilla\" properties processing\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            continue;\n        }\n\n        if (buffer.readIdProperty(propName)) {\n            // Also need to copy id property to tokens so that unwrapped also gets to see it\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            continue;\n        }\n\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            Object value = _deserializeWithErrorWrapping(p, ctxt, prop);\n            buffer.bufferProperty(prop, value);\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            continue;\n        }\n\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n\n        if (_anySetter == null) {\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n        } else {\n            TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);\n            tokens.writeFieldName(propName);\n            tokens.append(b2);\n            try {\n                buffer.bufferAnyProperty(_anySetter, propName,\n                        _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));\n            } catch (Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n            }\n            continue;\n        }\n    }\n\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null;\n    }\n    tokens.writeEndObject();\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}