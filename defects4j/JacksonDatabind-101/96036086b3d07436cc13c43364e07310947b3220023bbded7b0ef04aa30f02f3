{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        Object bean = null;\n        boolean beanBuilt = false;\n\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                        beanBuilt = true;\n                    } catch (Exception e) {\n                        bean = wrapInstantiationProblem(e, ctxt);\n                    }\n                    p.setCurrentValue(bean);\n                    t = p.nextToken(); // move to next token\n                    break; // exit loop iteration to continue processing remaining fields\n                }\n                continue;\n            }\n\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n\n            if (_anySetter == null) {\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n            } else {\n                TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);\n                tokens.writeFieldName(propName);\n                tokens.append(b2);\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName,\n                            _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n            }\n        }\n\n        // If bean not yet built, build it\n        if (!beanBuilt) {\n            try {\n                bean = creator.build(ctxt, buffer);\n            } catch (Exception e) {\n                wrapInstantiationProblem(e, ctxt);\n                return null; // never gets here\n            }\n        }\n\n        tokens.writeEndObject();\n\n        // Verify bean type\n        if (bean.getClass() != _beanType.getRawClass()) {\n            ctxt.reportInputMismatch(creator.properties().iterator().next(),\n                    \"Cannot create polymorphic instances with unwrapped values\");\n            return null;\n        }\n\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}