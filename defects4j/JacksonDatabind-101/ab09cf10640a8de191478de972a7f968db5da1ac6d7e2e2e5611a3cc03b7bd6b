{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n        throws IOException\n    {\n        // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped\n        //    value itself is NOT passed via `CreatorProperty` (which isn't supported).\n        //    Ok however to pass via setter or field.\n\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Last creator property to set?\n                if (buffer.assignParameter(creatorProp,\n                        _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        // 28-Oct-2016, tatu: As per original comment, seems like this may not\n                        //    be the best place... but works for now\n                         bean = wrapInstantiationProblem(e, ctxt);\n                    }\n                    // [databind#631]: Assign current value, to be accessible by custom serializers\n                    p.setCurrentValue(bean);\n\n                    // if so, need to copy all remaining tokens into buffer\n                    // [databind#2088]: May need to copy name/value separately\n                    while (t == JsonToken.FIELD_NAME) {\n                        // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that\n                        // 23-May-2019, tatu: ... this was actually wrong comment / code combo. Fixed.\n                        //   We must NOT call `p.nextToken()` as that loses name\n                        // p.nextToken();\n                        // tokens.copyCurrentStructure(p);\n\n                        // Need to copy name/value separately:\n                        String name = p.getCurrentName();\n                        p.nextToken(); // Needed to point value etc, for `copyCurrentStructure`\n                        tokens.writeFieldName(name);\n                        tokens.copyCurrentStructure(p); // which will also advance parser\n                        t = p.nextToken();\n                    }\n                    // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some\n                    //    problems if we maintain invariants\n                    if (t != JsonToken.END_OBJECT) { // sanity check\n                        ctxt.reportWrongTokenException(this, JsonToken.END_OBJECT,\n                                \"Attempted to unwrap properties after filtering input tokens, but there are some left\",\n                                new Object[0]);\n                    }\n\n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        // !!! 08-Jul-2011, tatu: Could probably support; but for now\n                        //   it's too complicated, so bail out\n                        // 17-Dec-2013, tatu: Actually, seems possible, see [databind#380]\n                        //   But not necessarily simple. Try, fail if anything funky.\n                        //  Need to do some more work here...\n                        ctxt.reportInputMismatch(creatorProp,\n                                \"Cannot create polymorphic instances with unwrapped values\");\n                        // but could also go other way...\n                        // Widen type if necessary? Note, this would require POJO to be mutable...\n                        // (or maybe use `TypeDeserializer`?)\n                        // ... if so, need to leave it up to `processUnwrapped` to handle\n                         return bean;\n                    }\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n            // Things marked as ignorable should not be passed to any setter\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            // 29-Nov-2016, tatu: probably should try to avoid sending content\n            //    both to any setter AND buffer... but, for now, the only thing\n            //    we can do.\n            // how about any setter? We'll get copies but...\n            if (_anySetter == null) {\n                // but... others should be passed to unwrapped property deserializers\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n            } else {\n                // Need to copy to a separate buffer first\n                TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);\n                tokens.writeFieldName(propName);\n                tokens.append(b2);\n                try {\n                    // NOTE: MUST move parser to point to the END of copy, to be safe\n                    // (although it does not seem to matter for this particular case)\n                    p.skipChildren();\n                    buffer.bufferAnyProperty(_anySetter, propName,\n                            _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                continue; // important!\n            }\n        }\n\n        // We hit END_OBJECT; resolve the pieces towards result Object\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            // We may actually wrap the problem... but not necessarily the best place. Oh well.\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        // ... and then need to pass accumulated JsonTokens through UnwrappedPropertyHandler...\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}