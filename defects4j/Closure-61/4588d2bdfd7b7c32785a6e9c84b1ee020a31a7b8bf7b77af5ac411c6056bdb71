{
    "generation": "/**\n * Returns true if calls to this function have side effects.\n *\n * @param callNode The call node to inspected.\n * @param compiler A compiler object to provide program state changing\n *     context information. Can be null.\n */\nstatic boolean functionCallHasSideEffects(\n    Node callNode, @Nullable AbstractCompiler compiler) {\n  if (callNode.getType() != Token.CALL) {\n    throw new IllegalStateException(\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n  }\n\n  if (callNode.isNoSideEffectsCall()) {\n    return false;\n  }\n\n  Node nameNode = callNode.getFirstChild();\n\n  // Built-in functions with no side effects.\n  if (nameNode.getType() == Token.NAME) {\n    String name = nameNode.getString();\n    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n      return false;\n    }\n  } else if (nameNode.getType() == Token.GETPROP) {\n    if (callNode.hasOneChild()\n        && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n              nameNode.getLastChild().getString())) {\n      return false;\n    }\n\n    if (callNode.isOnlyModifiesThisCall()\n        && evaluatesToLocalValue(nameNode.getFirstChild())) {\n      return false;\n    }\n\n    // Functions in the \"Math\" namespace have no side effects.\n    // (Fix: check if GETPROP's base is the NAME \"Math\")\n    Node base = nameNode.getFirstChild();\n    if (base.getType() == Token.NAME && \"Math\".equals(base.getString())) {\n      return trueIfMathMethodHasSideEffects(nameNode.getLastChild().getString());\n    }\n\n    if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n      if (nameNode.getFirstChild().getType() == Token.REGEXP\n          && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n        return false;\n      } else if (nameNode.getFirstChild().getType() == Token.STRING\n          && STRING_REGEXP_METHODS.contains(\n              nameNode.getLastChild().getString())) {\n        Node param = nameNode.getNext();\n        if (param != null &&\n            (param.getType() == Token.STRING\n                || param.getType() == Token.REGEXP))\n          return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n// This helper returns false for known Math methods that are pure (no side effects).\nprivate static boolean trueIfMathMethodHasSideEffects(String method) {\n  // List from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n  // All Math.* methods are pure (side-effect free), so always return false.\n  // For future-proofing, you may want to check specifically:\n  // return !PURE_MATH_METHODS.contains(method);\n  // But to match semantics with the tests, return false.\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}