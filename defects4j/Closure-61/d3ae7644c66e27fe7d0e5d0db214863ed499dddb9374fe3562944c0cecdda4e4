{
    "generation": "static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {\n  if (callNode.getType() != Token.CALL) {\n    throw new IllegalStateException(\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n  }\n\n  if (callNode.isNoSideEffectsCall()) {\n    return false;\n  }\n\n  Node nameNode = callNode.getFirstChild();\n\n  // Built-in functions with no side effects.\n  if (nameNode.getType() == Token.NAME) {\n    String name = nameNode.getString();\n    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n      return false;\n    }\n  } else if (nameNode.getType() == Token.GETPROP) {\n    // If this is a call on the Math object, then it is side-effect free.\n    Node receiver = nameNode.getFirstChild();\n    if (receiver != null &&\n        receiver.getType() == Token.NAME &&\n        \"Math\".equals(receiver.getString())) {\n      return false;\n    }\n\n    if (callNode.hasOneChild() &&\n        OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {\n      return false;\n    }\n\n    if (callNode.isOnlyModifiesThisCall() &&\n        evaluatesToLocalValue(nameNode.getFirstChild())) {\n      return false;\n    }\n\n    if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n      if (nameNode.getFirstChild().getType() == Token.REGEXP &&\n          REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n        return false;\n      } else if (nameNode.getFirstChild().getType() == Token.STRING &&\n                 STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n        Node param = nameNode.getNext();\n        if (param != null &&\n            (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}