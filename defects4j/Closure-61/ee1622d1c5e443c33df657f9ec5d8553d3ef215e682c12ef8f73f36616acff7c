{
    "generation": "  /**\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode The call node to inspected.\n   * @param compiler A compiler object to provide program state changing\n   *     context information. Can be null.\n   */\n  static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      // Functions in the \"Math\" namespace have no side effects.\n      if (nameNode.getFirstChild().isName() &&\n          nameNode.getFirstChild().getString().equals(\"Math\")) {\n        return false;\n      }\n\n      // Check for known side-effect free methods of immutable objects.\n      // TODO(johnlenz): We might need more information than just the\n      // object type to make this determination (e.g. is the object an\n      // immutable literal like \"a\", 1, true).\n      if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        // If the object expression itself has no side effects, then the method call\n        // doesn't have side effects.\n        // This isn't true for things like .sort() or .reverse() on an Array\n        // literal.\n        if (!NodeUtil.nodeTypeMayHaveSideEffects(nameNode.getFirstChild(), compiler)) {\n           return false;\n        }\n      }\n\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Check for RegExp and String methods that don't have side effects,\n      // but only if the RegExp object is not global.\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        Node objectNode = nameNode.getFirstChild();\n        String methodName = nameNode.getLastChild().getString();\n\n        // Methods applied to RegExp literals have no side effects.\n        if (objectNode.getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(methodName)) {\n          return false;\n        } else if (objectNode.getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(methodName)) {\n          // Methods applied to String literals have no side effects if the\n          // argument has no side effect.\n          Node firstArg = nameNode.getNext();\n          if (firstArg == null || !NodeUtil.nodeTypeMayHaveSideEffects(firstArg, compiler)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    // TODO(johnlenz): Add some mechanism for determining known functions that\n    // have side effects. Functions like alert() have side effects. Functions\n    // like parseInt() are problematic because they have toString() side effects.\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}