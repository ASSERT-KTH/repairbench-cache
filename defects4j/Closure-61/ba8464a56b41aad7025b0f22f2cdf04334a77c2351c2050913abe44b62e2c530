{
    "generation": "static boolean functionCallHasSideEffects(\n    Node callNode, @Nullable AbstractCompiler compiler) {\n  if (callNode.getType() != Token.CALL) {\n    throw new IllegalStateException(\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n  }\n\n  // First, honor any explicit no-side-effects annotations.\n  if (callNode.isNoSideEffectsCall()) {\n    return false;\n  }\n\n  Node nameNode = callNode.getFirstChild();\n\n  // Bare names like alert, decodeURI, etc.\n  if (nameNode.getType() == Token.NAME) {\n    String name = nameNode.getString();\n    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n      return false;\n    }\n  } else if (nameNode.getType() == Token.GETPROP) {\n    // Math.* methods are pure.\n    Node obj = nameNode.getFirstChild();\n    if (obj.getType() == Token.NAME && \"Math\".equals(obj.getString())) {\n      return false;\n    }\n\n    // Object.prototype methods like toString/valueOf with a single arg\n    if (callNode.hasOneChild()\n        && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n            nameNode.getLastChild().getString())) {\n      return false;\n    }\n\n    // Methods that only modify 'this' on a known local object.\n    if (callNode.isOnlyModifiesThisCall()\n        && evaluatesToLocalValue(obj)) {\n      return false;\n    }\n\n    // RegExp/String regexp methods when no global RegExp references exist.\n    if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n      String method = nameNode.getLastChild().getString();\n      if (obj.getType() == Token.REGEXP\n          && REGEXP_METHODS.contains(method)) {\n        return false;\n      } else if (obj.getType() == Token.STRING\n          && STRING_REGEXP_METHODS.contains(method)) {\n        Node param = nameNode.getNext();\n        if (param != null &&\n            (param.getType() == Token.STRING\n             || param.getType() == Token.REGEXP)) {\n          return false;\n        }\n      }\n    }\n  }\n\n  // Conservatively assume the call has side effects.\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}