{
    "generation": "  /**\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode The call node to inspected.\n   * @param compiler A compiler object to provide program state changing\n   *     context information. Can be null.\n   */\n  static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      // Object methods with no side effects e.g. Object.prototype.toString.call(someVar)\n      if (callNode.hasOneChild() // No arguments are passed to the method.\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      // Functions that only modify 'this'. Modifies this should be handled\n      // elsewhere. See NodeUtil.constructorCallHasSideEffects and\n      // NodeUtil.callHasLocalResult.\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Functions in the \"Math\" namespace have no side effects.\n      if (nameNode.getFirstChild().isName()\n          && nameNode.getFirstChild().getString().equals(\"Math\")) {\n        return false;\n      }\n\n      // RegExp methods. Note that testing a regex may have side effects\n      // because it advances the pointer, but we happen to know that the\n      // \u0627\u0644\u0645\u0647\u0646\u062f\u0633\u064a\u0646 compiler never uses this state. See b/4712441\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          // String.prototype.search, split, match, replace can have side\n          // effects if the argument is a regex object with 'g' flag,\n          // because the regex object's state is changed. However, if the\n          // argument is a string or regex literal, then the object is\n          // implicitly created has no side effects.\n          if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))\n          return false;\n        }\n      }\n    }\n\n    // We don't consider modifications to the Function prototype to be side\n    // effects, because we assume that the Function prototype is constantly\n    // aliased.\n\n    // We assume all other functions have side effects. This plays safe.\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}