{
    "generation": "  /**\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode The call node to inspected.\n   * @param compiler A compiler object to provide program state changing\n   *     context information. Can be null.\n   */\n  static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n              nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Functions in the \"Math\" namespace have no side effects.\n      if (nameNode.getFirstChild().getType() == Token.NAME && \"Math\".equals(nameNode.getFirstChild().getString())) {\n        String methodName = nameNode.getLastChild().getString();\n        if (REGEXP_METHODS.contains(methodName) || STRING_REGEXP_METHODS.contains(methodName) || methodName.equals(\"sin\") || methodName.equals(\"cos\") || methodName.equals(\"tan\") || methodName.equals(\"asin\") || methodName.equals(\"acos\") || methodName.equals(\"atan\") || methodName.equals(\"log\") || methodName.equals(\"exp\") || methodName.equals(\"sqrt\") || methodName.equals(\"abs\") || methodName.equals(\"ceil\") || methodName.equals(\"floor\") || methodName.equals(\"round\") || methodName.equals(\"random\")) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}