{
    "generation": "static boolean functionCallHasSideEffects(\n    Node callNode, @Nullable AbstractCompiler compiler) {\n  if (callNode.getType() != Token.CALL) {\n    throw new IllegalStateException(\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n  }\n\n  // Honor explicit @nosideeffects annotations first.\n  if (callNode.isNoSideEffectsCall()) {\n    return false;\n  }\n\n  Node nameNode = callNode.getFirstChild();\n\n  // Simple built\u2010in functions known to have no side\u2010effects.\n  if (nameNode.getType() == Token.NAME) {\n    String name = nameNode.getString();\n    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n      return false;\n    }\n  } else if (nameNode.getType() == Token.GETPROP) {\n    // e.g. {}.toString(), valueOf(), etc.\n    if (callNode.hasOneChild()\n        && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n               nameNode.getLastChild().getString())) {\n      return false;\n    }\n\n    // e.g. obj.clone() when clone only modifies a transient \"this\"\n    if (callNode.isOnlyModifiesThisCall()\n        && evaluatesToLocalValue(nameNode.getFirstChild())) {\n      return false;\n    }\n\n    // Functions in the \"Math\" namespace have no side effects.\n    if (nameNode.getFirstChild().getType() == Token.NAME\n        && \"Math\".equals(nameNode.getFirstChild().getString())) {\n      return false;\n    }\n\n    // Treat safe RegExp and String->RegExp methods as side\u2010effect free\n    if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n      // /regex/.test()/exec()/...\n      if (nameNode.getFirstChild().getType() == Token.REGEXP\n          && REGEXP_METHODS.contains(\n               nameNode.getLastChild().getString())) {\n        return false;\n      } else if (nameNode.getFirstChild().getType() == Token.STRING\n          && STRING_REGEXP_METHODS.contains(\n               nameNode.getLastChild().getString())) {\n        Node param = nameNode.getNext();\n        if (param != null\n            && (param.getType() == Token.STRING\n                || param.getType() == Token.REGEXP)) {\n          return false;\n        }\n      }\n    }\n  }\n\n  // All other calls are assumed to have side\u2010effects.\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}