{
    "generation": "  /**\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode The call node to inspected.\n   * @param compiler A compiler object to provide program state changing\n   *     context information. Can be null.\n   */\n  static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      // Functions in the \"Math\" namespace have no side effects.\n      if (nameNode.getFirstChild().isName() &&\n          \"Math\".equals(nameNode.getFirstChild().getString())) {\n        return false;\n      }\n\n      // Object methods with no side effects, e.g. toString, valueOf.\n      if (callNode.hasOneChild() // No arguments? Check this logic...\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      // Methods annotated @modifies {this} that are called on a local object\n      // are assumed to not modify global state.\n      if (callNode.isOnlyModifiesThisCall()\n          && NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // RegExp and String methods with no side effects IF the RegExp object\n      // has no global flag.\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          // Some String methods like search take a RegExp object or string\n          // as the first parameter. We assume that if the parameter is\n          // a literal RegExp or string, then the method has no side effects.\n          if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))\n          return false;\n        }\n      }\n    }\n\n    // We assume all other functions have side effects.\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}