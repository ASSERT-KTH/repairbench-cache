{
    "generation": "  /**\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode The call node to inspected.\n   * @param compiler A compiler object to provide program state changing\n   *     context information. Can be null.\n   */\n  static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      // Object methods that have no side effects.\n      if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n              nameNode.getLastChild().getString())) {\n         // TODO(johnlenz): Generally, extern methods that don't change\n         // state are reasonable candidates but they are not currently\n         // modeled.\n\n         // Handle methods of String, Number, Boolean, RegExp, Math explicitly\n         // here. For the moment ignore all others.\n         Node lhs = nameNode.getFirstChild();\n         if (NodeUtil.isImmutableValue(lhs)) {\n           // Immutable types known to have no side effects on their methods.\n           return false;\n         } else if (lhs.getType() == Token.NAME && lhs.getString().equals(\"Math\")) {\n           // Math functions have no side effects.\n           return false;\n         }\n      }\n\n      // Modifies this on a known local value is fine.\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // RegExp methods have no side effects if the RegExp object is not global.\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (NodeUtil.isImmutableValue(nameNode.getFirstChild()) // string literal\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          // Methods like replace that take a function argument can not be\n          // safely removed. Assume the function expression is side-effect\n          // free as this is verified later.\n          if (param != null &&\n              (NodeUtil.isImmutableValue(param) || param.isRegExp())) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}