{
    "generation": "  /**\n   * Returns true if calls to this function have side effects.\n   *\n   * @param callNode The call node to inspected.\n   * @param compiler A compiler object to provide program state changing\n   *     context information. Can be null.\n   */\n  static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Functions in the \"Math\" namespace have no side effects.\n\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))\n          return false;\n        }\n      }\n\n      // Check for Math functions without side effects\n      if (nameNode.getFirstChild().getType() == Token.NAME \n          && \"Math\".equals(nameNode.getFirstChild().getString())) {\n        String methodName = nameNode.getLastChild().getString();\n        if (MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(methodName)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  // Define a new set for Math methods without side effects\n  private static final Set<String> MATH_METHODS_WITHOUT_SIDEEFFECTS = new HashSet<>();\n  static {\n    MATH_METHODS_WITHOUT_SIDEEFFECTS.add(\"sin\");\n    MATH_METHODS_WITHOUT_SIDEEFFECTS.add(\"cos\");\n    MATH_METHODS_WITHOUT_SIDEEFFECTS.add(\"random\");\n    // Add more Math methods as needed\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}