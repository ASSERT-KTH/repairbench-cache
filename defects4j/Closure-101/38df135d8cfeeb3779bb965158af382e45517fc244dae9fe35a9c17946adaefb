{
    "generation": "@Override\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n\n    // Set closurePass based on the flag, but only if it's explicitly set.\n    // This allows the default behavior to be determined by the CompilationLevel.\n    if (flags.process_closure_primitives != null) {\n        options.closurePass = flags.process_closure_primitives;\n    } else {\n        // If the flag is not set, use the default behavior based on the CompilationLevel.\n        options.closurePass = level.shouldRunClosurePass();\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}