{
    "generation": "        @Override\n        public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException\n        {\n            // Case 1: Standard start, parser positioned at START_OBJECT\n            if (p.getCurrentToken() == JsonToken.START_OBJECT) {\n                // Advance past START_OBJECT. For an empty object, this will move to END_OBJECT.\n                // For a non-empty object, this will move to FIELD_NAME.\n                p.nextToken();\n                return deserializeObject(p, ctxt, ctxt.getNodeFactory());\n            }\n            // Case 2: Parser positioned at FIELD_NAME. This can happen if a parent deserializer has\n            // already consumed the START_OBJECT token for a nested object, and we're now at the\n            // first field name of that object.\n            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {\n                return deserializeObject(p, ctxt, ctxt.getNodeFactory());\n            }\n            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),\n            //    if caller has advanced to the first token of Object, but for empty Object.\n            // Case 3: Parser positioned at END_OBJECT.\n            // This specific scenario causes the `JsonMappingException` when deserializing\n            // an empty object \"{}\" in certain contexts (e.g., when the START_OBJECT token\n            // has already been consumed by a wrapping deserializer, or when `ObjectNodeDeserializer`\n            // is invoked when the parser is already positioned at the END_OBJECT of an empty object).\n            if (p.getCurrentToken() == JsonToken.END_OBJECT) {\n                // If we are at END_OBJECT, it means we are trying to deserialize an empty object.\n                // In this case, we should return an empty ObjectNode.\n                return ctxt.getNodeFactory().objectNode();\n            }\n            // For any other token, it's an unexpected state for ObjectNode deserialization.\n            throw ctxt.mappingException(ObjectNode.class);\n         }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}