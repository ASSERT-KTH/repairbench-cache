{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void computeGeometricalProperties() {\n\n    final Vector2D[][] v = getVertices();\n\n    if (v.length == 0) {\n        // no finite loops: region is either empty or the whole plane\n        final BSPTree<Euclidean2D> tree = getTree(false);\n        Object attr = tree.getAttribute();\n        if (attr instanceof Boolean) {\n            if ((Boolean) attr) {\n                // the instance covers the whole space\n                setSize(Double.POSITIVE_INFINITY);\n                setBarycenter(Vector2D.NaN);\n            } else {\n                // the instance is empty\n                setSize(0);\n                setBarycenter(new Vector2D(0, 0));\n            }\n        } else {\n            // boundary attributes present but no loops found \u21d2 infinite region\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        }\n\n    } else if (v[0][0] == null) {\n        // there is at least one open-loop: the polygon is infinite\n        setSize(Double.POSITIVE_INFINITY);\n        setBarycenter(Vector2D.NaN);\n\n    } else {\n        // all loops are closed, we compute the usual area / centroid integrals\n        double sum  = 0;\n        double sumX = 0;\n        double sumY = 0;\n\n        for (Vector2D[] loop : v) {\n            double x1 = loop[loop.length - 1].getX();\n            double y1 = loop[loop.length - 1].getY();\n            for (final Vector2D point : loop) {\n                final double x0 = x1;\n                final double y0 = y1;\n                x1 = point.getX();\n                y1 = point.getY();\n                final double factor = x0 * y1 - y0 * x1;\n                sum  += factor;\n                sumX += factor * (x0 + x1);\n                sumY += factor * (y0 + y1);\n            }\n        }\n\n        if (sum < 0) {\n            // the polygon has a finite outside surrounded by an infinite inside\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        } else {\n            setSize(sum / 2);\n            setBarycenter(new Vector2D(sumX / (3 * sum),\n                                       sumY / (3 * sum)));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}