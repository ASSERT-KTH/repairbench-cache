{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void computeGeometricalProperties() {\n\n        final Vector2D[][] v = getVertices();\n\n        if (v.length == 0) {\n            final BSPTree<Euclidean2D> tree = getTree(false);\n            if (tree.getCut() == null) {\n                // the instance covers the whole space\n                setSize(Double.POSITIVE_INFINITY);\n                setBarycenter(Vector2D.NaN);\n            } else {\n                // determine if the region is empty\n                AttributeHandle<Euclidean2D, Object> handle = new AttributeHandle<>();\n                if ( FAILED == tree.getAttribute(handle) || tree.getAttribute(handle) == null || ((Region<Euclidean2D>) tree.getAttribute(handle)).isEmpty()) {\n                    setSize(0);\n                    setBarycenter(new Vector2D(0, 0));\n                } else {\n                    // the instance covers the whole space\n                    setSize(Double.POSITIVE_INFINITY);\n                    setBarycenter(Vector2D.NaN);\n                }\n            }\n        } else if (v[0][0] == null) {\n            // there is at least one open-loop: the polygon is infinite\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        } else {\n            // all loops are closed, we compute some integrals around the shape\n\n            double sum  = 0;\n            double sumX = 0;\n            double sumY = 0;\n\n            for (Vector2D[] loop : v) {\n                double x1 = loop[loop.length - 1].getX();\n                double y1 = loop[loop.length - 1].getY();\n                for (final Vector2D point : loop) {\n                    final double x0 = x1;\n                    final double x = point.getX();\n                    final double y0 = y1;\n                    final double y = point.getY();\n                    x1 = x;\n                    y1 = y;\n                    final double factor = x0 * y - y0 * x;\n                    sum  += factor;\n                    sumX += factor * (x0 + x);\n                    sumY += factor * (y0 + y);\n                }\n            }\n\n            if (sum < 0) {\n                // the polygon as a finite outside surrounded by an infinite inside\n                setSize(Double.POSITIVE_INFINITY);\n                setBarycenter(Vector2D.NaN);\n            } else {\n                setSize(sum / 2);\n                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}