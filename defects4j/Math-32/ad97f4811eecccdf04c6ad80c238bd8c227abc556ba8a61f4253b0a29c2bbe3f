{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void computeGeometricalProperties() {\n\n    final Vector2D[][] v = getVertices();\n\n    if (v.length == 0) {\n        // no boundary loops \u2192 region is either empty or the whole space\n        final BSPTree<Euclidean2D> tree = getTree(false);\n        // only if the tree is a leaf is its attribute a Boolean\n        if (tree.getCut() == null) {\n            Boolean inside = (Boolean) tree.getAttribute();\n            if (inside) {\n                // the instance covers the whole space\n                setSize(Double.POSITIVE_INFINITY);\n                setBarycenter(Vector2D.NaN);\n            } else {\n                setSize(0);\n                setBarycenter(new Vector2D(0, 0));\n            }\n        } else {\n            // it has cuts but produced no loops \u2192 it is unbounded\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        }\n    } else if (v[0][0] == null) {\n        // there is at least one open\u2010loop: the polygon is infinite\n        setSize(Double.POSITIVE_INFINITY);\n        setBarycenter(Vector2D.NaN);\n    } else {\n        // all loops are closed, compute area and barycenter via Green\u2019s theorem\n        double sum  = 0;\n        double sumX = 0;\n        double sumY = 0;\n        for (Vector2D[] loop : v) {\n            double x1 = loop[loop.length - 1].getX();\n            double y1 = loop[loop.length - 1].getY();\n            for (Vector2D p : loop) {\n                double x0 = x1;\n                double y0 = y1;\n                x1 = p.getX();\n                y1 = p.getY();\n                double factor = x0 * y1 - y0 * x1;\n                sum  += factor;\n                sumX += factor * (x0 + x1);\n                sumY += factor * (y0 + y1);\n            }\n        }\n        if (sum < 0) {\n            // finite outside region surrounded by infinite inside\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        } else {\n            setSize(sum / 2);\n            setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));\n        }\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}