{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void computeGeometricalProperties() {\n\n        final Vector2D[][] v = getVertices();\n\n        if (v.length == 0) {\n            // If getVertices() returns an empty array, it means the PolygonsSet has no\n            // closed loops that define a finite area. This typically implies the region\n            // is either entirely empty or covers the whole space.\n            final BSPTree<Euclidean2D> tree = getTree(false);\n            final Object attribute = tree.getAttribute();\n\n            if (attribute instanceof Boolean) {\n                // If the attribute is a Boolean, it directly indicates whether the space is full or empty.\n                if ((Boolean) attribute) {\n                    // The instance covers the whole space (infinite size)\n                    setSize(Double.POSITIVE_INFINITY);\n                    setBarycenter(Vector2D.NaN);\n                } else {\n                    // The instance is empty (zero size)\n                    setSize(0);\n                    setBarycenter(new Vector2D(0, 0));\n                }\n            } else {\n                // If getVertices() is empty but the tree attribute is not a Boolean\n                // (e.g., it's a BoundaryAttribute or null, which happens for degenerate cases\n                // or internal nodes), it implies that the region has no defined finite interior.\n                // In such scenarios, the size is considered zero. A BoundaryAttribute on the\n                // root and no vertices means the region is effectively empty in terms of area.\n                setSize(0);\n                setBarycenter(new Vector2D(0, 0));\n            }\n        } else if (v[0][0] == null) {\n            // There is at least one open-loop: the polygon is infinite.\n            // This happens when the loops don't completely enclose a finite area.\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        } else {\n            // All loops are closed, we compute some integrals around the shape.\n            // This calculates the finite area and barycenter for closed polygons.\n\n            double sum  = 0;\n            double sumX = 0;\n            double sumY = 0;\n\n            for (Vector2D[] loop : v) {\n                double x1 = loop[loop.length - 1].getX();\n                double y1 = loop[loop.length - 1].getY();\n                for (final Vector2D point : loop) {\n                    final double x0 = x1;\n                    final double y0 = y1;\n                    x1 = point.getX();\n                    y1 = point.getY();\n                    final double factor = x0 * y1 - y0 * x1;\n                    sum  += factor;\n                    sumX += factor * (x0 + x1);\n                    sumY += factor * (y0 + y1);\n                }\n            }\n\n            if (sum < 0) {\n                // The polygon has a finite outside surrounded by an infinite inside.\n                // This means the region itself is infinite.\n                setSize(Double.POSITIVE_INFINITY);\n                setBarycenter(Vector2D.NaN);\n            } else {\n                // The polygon has a finite area.\n                setSize(sum / 2);\n                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}