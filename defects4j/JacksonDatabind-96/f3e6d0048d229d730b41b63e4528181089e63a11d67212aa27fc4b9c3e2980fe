{
    "generation": "    /**\n     * Helper method called when there is the explicit \"is-creator\", but no mode declaration.\n     *\n     * @since 2.9.2\n     */\n    protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n            BeanDescription beanDesc, CreatorCollector creators,\n            CreatorCandidate candidate)\n        throws JsonMappingException\n    {\n        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:\n        if (1 != candidate.paramCount()) {\n            // Ok: for delegates, we want one and exactly one parameter without\n            // injection AND without name\n            int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n            if (oneNotInjected >= 0) {\n                // getting close; but most not have name\n                if (candidate.paramName(oneNotInjected) == null) {\n                    _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                    return;\n                }\n            }\n            // Otherwise, property-based is the only other possibility\n            _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n            return;\n        }\n\n        // Single parameter case:\n        AnnotatedParameter param = candidate.parameter(0);\n        JacksonInject.Value injectId = candidate.injection(0);\n        PropertyName explicitParamName = candidate.explicitParamName(0); // Explicit name from @JsonProperty\n        BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n\n        // Default decision: use properties-based if explicit name or injection exists\n        boolean useProps = (explicitParamName != null) || (injectId != null);\n        PropertyName nameToUse = explicitParamName; // Start with explicit name if available\n\n        // If not decided yet, check for implicit property match\n        if (!useProps && (paramDef != null)) {\n            // Try to find implicit name (logical name, pre-strategy)\n            PropertyName implicitName = candidate.findImplicitParamName(0);\n\n            // If implicit name found AND matches a potentially serializable property,\n            // consider it property-based\n            // 16-Oct-2019, tatu: Need to ensure we handle possible renaming by strategy\n            if (implicitName != null && paramDef.couldSerialize()) {\n                 useProps = true;\n                 // IMPORTANT: For property-based creator, use the name as expected in JSON,\n                 // which means applying the naming strategy. Get it from paramDef.\n                 nameToUse = paramDef.findNameForDeserialization(ctxt.getConfig());\n                 // Should not be null if implicit name found, but defensive check best:\n                 if (nameToUse == null) {\n                     nameToUse = implicitName;\n                 }\n            }\n        }\n\n        // Now, construct and add creator\n        if (useProps) {\n            // For injection, name might be null, constructCreatorProperty handles this.\n            // If explicit name, nameToUse has it.\n            // If implicit match, nameToUse has the strategy-applied name (or fallback).\n            SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                    constructCreatorProperty(ctxt, beanDesc, nameToUse, 0, param, injectId)\n            };\n            creators.addPropertyCreator(candidate.creator(), true, properties);\n            // We are done with properties-based creator\n            return;\n        }\n\n        // If not properties-based, treat as delegating or scalar\n        // 13-Jun-2017, tatu: Important; force as implicit regardless of what auto-detection may have found\n        _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n\n        // one more thing: sever link to creator property, to avoid possible later\n        // problems with \"unresolved\" constructor property (see [databind#1868])\n        if (paramDef != null) {\n            // For [databind#2611]: Needs to be POJO, not general PropertyBased...\n            if (paramDef instanceof POJOPropertyBuilder) {\n                ((POJOPropertyBuilder) paramDef).removeConstructors();\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}