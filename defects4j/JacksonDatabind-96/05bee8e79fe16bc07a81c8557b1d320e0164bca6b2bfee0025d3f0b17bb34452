{
    "generation": "    /**\n     * Helper method called when there is the explicit \"is-creator\", but no mode declaration.\n     *\n     * @since 2.9.2\n     */\n    protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n            BeanDescription beanDesc, CreatorCollector creators,\n            CreatorCandidate candidate)\n        throws JsonMappingException\n    {\n        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:\n        if (1 != candidate.paramCount()) {\n            // Ok: for delegates, we want one and exactly one parameter without\n            // injection AND without name\n            int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n            if (oneNotInjected >= 0) {\n                // getting close; but most not have name\n                if (candidate.paramName(oneNotInjected) == null) {\n                    _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                    return;\n                }\n            }\n            _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n            return;\n        }\n\n        // One-parameter case:\n        AnnotatedParameter param = candidate.parameter(0);\n        JacksonInject.Value injectId = candidate.injection(0);\n        PropertyName explicitParamName = candidate.explicitParamName(0);\n        BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n\n        // If there's injection or explicit name, should be properties-based\n        boolean useProps = (explicitParamName != null) || (injectId != null);\n        if (!useProps && (paramDef != null)) {\n            // One more thing: if implicit name matches property with a getter\n            // or field, we'll consider it property-based as well\n\n            // 25-May-2018, tatu: as per [databind#2051], looks like we have to get\n            //    not implicit name, but name with possible strategy-based-rename.\n            //    The decision (`useProps`) is based on implicit name existing and matching\n            //    a serializable property. The REGISTRATION however needs the effective name.\n            PropertyName implicitName = candidate.findImplicitParamName(0);\n            if (implicitName != null && paramDef.couldSerialize()) {\n                 useProps = true;\n            }\n        }\n\n        if (useProps) {\n            // [databind#2051]: Need to use the effective parameter name, respecting\n            // explicit name, injection, and naming strategy, for registration.\n            PropertyName nameForRegistration;\n            if (explicitParamName != null) {\n                // Explicit name (`@JsonProperty`) always takes precedence\n                nameForRegistration = explicitParamName;\n            } else {\n                // Otherwise, implicit name should be used, BUT we need the one\n                // potentially modified by naming strategy. `paramName(0)` is\n                // designed to provide that name.\n                nameForRegistration = candidate.paramName(0);\n                 // Should not be null here if `useProps` is true, (since either\n                 // explicit name exists, or implicit name exists, or injected);\n                 // but defensively... handle? Currently assuming `paramName(0)` works.\n            }\n\n            SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                    constructCreatorProperty(ctxt, beanDesc, nameForRegistration, 0, param, injectId)\n            };\n            creators.addPropertyCreator(candidate.creator(), true, properties);\n            return;\n        }\n\n        // If not using properties, treat as delegating or scalar:\n        _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n\n        // one more thing: sever link to creator property, to avoid possible later\n        // problems with \"unresolved\" constructor property\n        if (paramDef != null) {\n            // Note: must use the property definition, not parameter name, to\n            // handle case of implicit name matching renamed property.\n            // 13-Dec-2020, tatu: Actually, looks like we may need to use official\n            //    property name instead.\n            // ... although, wait? The issue is just constructor/factory param... why rename?\n            // Let's use `paramDef` as is, assuming links properly setup\n           ((POJOPropertyBuilder) paramDef).removeConstructors();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}