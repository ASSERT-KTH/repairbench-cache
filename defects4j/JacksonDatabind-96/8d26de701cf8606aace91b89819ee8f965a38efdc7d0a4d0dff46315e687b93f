{
    "generation": "    /**\n     * Helper method called when there is the explicit \"is-creator\", but no mode declaration.\n     *\n     * @since 2.9.2\n     */\n    protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n            BeanDescription beanDesc, CreatorCollector creators,\n            CreatorCandidate candidate)\n        throws JsonMappingException\n    {\n        // Looks like there's bit of magic regarding 1-parameter creators; others simpler:\n        if (1 != candidate.paramCount()) {\n            // Ok: for delegates, we want one and exactly one parameter without\n            // injection AND without name\n            int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n            if (oneNotInjected >= 0) {\n                // getting close; but most not have name\n                if (candidate.paramName(oneNotInjected) == null) {\n                    _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                    return;\n                }\n            }\n            _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n            return;\n        }\n\n        // Handle the single-argument case\n        AnnotatedParameter param = candidate.parameter(0);\n        JacksonInject.Value injectId = candidate.injection(0);\n        PropertyName explicitName = candidate.explicitParamName(0);\n        BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n\n        // By default, assume property-based if there is explicit name or injection\n        boolean useProps = (explicitName != null) || (injectId != null);\n        PropertyName name = explicitName;\n\n        if (!useProps && (paramDef != null)) {\n            // No explicit name or injection, but parameter is linked to a property definition.\n            // This indicates an implicitly property-based creator.\n            // We need to determine the property name, considering NamingStrategy.\n            // [databind#2051]: Use the name derived from the property definition, not parameter name.\n            String baseName = paramDef.getName(); // Like \"paramName0\"\n            if (baseName != null && !baseName.isEmpty()) { // Ensure baseName is valid\n                PropertyNamingStrategy naming = ctxt.getConfig().getPropertyNamingStrategy();\n                String strategyName = null;\n                if (naming != null) {\n                    // Use the property's base name to apply the strategy\n                    strategyName = naming.nameForConstructorParameter(ctxt.getConfig(), param.getOwner(), baseName);\n                }\n                if (strategyName != null && !strategyName.isEmpty()) {\n                    name = PropertyName.construct(strategyName); // Use strategy-applied name like \"param_name0\"\n                } else {\n                    // If no strategy, or strategy returns null/empty, use base name\n                    name = PropertyName.construct(baseName);\n                }\n                useProps = true; // Yes, it's property based\n            }\n             // If baseName was null/empty (unlikely for paramDef), name remains null, useProps=false.\n        } else if (useProps && name == null) {\n            // Case: Injection used, but no explicit name. Need to determine implicit name.\n            // This also requires using the property definition + naming strategy.\n             if (paramDef != null) {\n                 String baseName = paramDef.getName();\n                 if (baseName != null && !baseName.isEmpty()) {\n                     PropertyNamingStrategy naming = ctxt.getConfig().getPropertyNamingStrategy();\n                     String strategyName = null;\n                     if (naming != null) {\n                         strategyName = naming.nameForConstructorParameter(ctxt.getConfig(), param.getOwner(), baseName);\n                     }\n                     if (strategyName != null && !strategyName.isEmpty()) {\n                         name = PropertyName.construct(strategyName);\n                     } else {\n                         name = PropertyName.construct(baseName);\n                     }\n                 }\n             }\n             // If paramDef is null, or baseName is null/empty, 'name' remains null.\n             // constructCreatorProperty might handle this, or it might fail downstream.\n        }\n\n        if (useProps) {\n            // We have decided to use properties-based creator\n             // Defensive check: If we intended to use properties but failed to find a name (edge case?),\n             // let constructCreatorProperty handle it (usually by failing)\n            SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                    constructCreatorProperty(ctxt, beanDesc, name, 0, param, injectId)\n            };\n            creators.addPropertyCreator(candidate.creator(), true, properties);\n            return;\n        }\n\n        // If not property-based (no explicit name, injection, or usable paramDef link),\n        // try standard single-argument creator handling (delegating, string, number etc)\n        _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n\n        // one more thing: sever link to creator property, to avoid possible later\n        // problems with \"unresolved\" constructor property\n        if (paramDef != null) {\n             // Severing the link seems necessary regardless of whether it was used as\n             // property-based or delegating, to prevent conflicts later.\n            ((POJOPropertyBuilder) paramDef).removeConstructors();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}