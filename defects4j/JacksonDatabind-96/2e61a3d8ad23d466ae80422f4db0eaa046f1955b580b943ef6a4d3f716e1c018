{
    "generation": "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1 != candidate.paramCount()) {\n        // For multi-parameter creators, try to find a single non-injected parameter...\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            // ...but if that parameter has no name, then it is considered a delegate creator\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    // For one-argument creators:\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    // Also get property definition (which may come with a naming strategy applied)\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n\n    // First, obtain the explicit parameter name (usually the Java name)\n    PropertyName paramName = candidate.explicitParamName(0);\n    // If a property definition is available, try to get the implicit name \n    // (which will have naming strategy applied, e.g. convert \"paramName0\" to \"param_name0\")\n    if (paramDef != null) {\n        PropertyName implicitName = candidate.findImplicitParamName(0);\n        if (implicitName != null) {\n            paramName = implicitName;\n        }\n    }\n\n    // If the parameter has a name (or injection) it is treated as a property-based creator:\n    boolean useProps = (paramName != null) || (injectId != null);\n    if (useProps) {\n        SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)\n        };\n        creators.addPropertyCreator(candidate.creator(), true, properties);\n        return;\n    }\n    // Fallback: treat single-argument creator as a delegate creator.\n    _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n    \n    // Sever links to creator properties to avoid later problems.\n    if (paramDef != null) {\n        ((POJOPropertyBuilder) paramDef).removeConstructors();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}