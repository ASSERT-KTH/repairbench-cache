{
    "generation": "    private void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n        int cache = 0;\n        int shift = 7; // Represents the bit position within the current byte, starting from the most significant bit (7).\n        for (int i = 0; i < length; i++) {\n            // Get the i-th bit from the BitSet and shift it to the 'shift' position within 'cache'.\n            // If bits.get(i) is true, it's 1, otherwise 0.\n            cache |= ((bits.get(i) ? 1 : 0) << shift);\n            --shift; // Move to the next bit position (towards LSB).\n            // If 'shift' becomes less than 0, it means we have just placed the bit at position 0,\n            // thus completing a full 8-bit byte.\n            if (shift < 0) {\n                header.write(cache); // Write the completed byte.\n                shift = 7; // Reset 'shift' for the next byte.\n                cache = 0; // Clear 'cache' for the next byte.\n            }\n        }\n        // After the loop, check if there are any remaining bits in 'cache' that haven't formed a full byte.\n        // This is true if 'shift' is not 7 (its initial value or reset value), meaning some bits were added\n        // to 'cache' but a full byte was not completed and flushed.\n        // If 'length' was a multiple of 8, 'shift' would have been reset to 7 by the in-loop flush.\n        // If 'length' was 0, the loop doesn't run, and 'shift' remains 7.\n        // So, 'shift != 7' correctly identifies if a partial byte needs to be written.\n        if (shift != 7) {\n            header.write(cache);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}