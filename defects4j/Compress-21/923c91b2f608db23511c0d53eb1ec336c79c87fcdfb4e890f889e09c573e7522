{
    "generation": "    private void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n        int cache = 0;\n        int shift = 7; // Represents the bit position (0-7) for the current byte, 7 being the most significant bit.\n        for (int i = 0; i < length; i++) {\n            // Get the i-th bit from the BitSet. If true, it's 1, else 0.\n            // Shift this bit to the 'shift' position in the 'cache' byte.\n            cache |= ((bits.get(i) ? 1 : 0) << shift);\n            --shift; // Move to the next lower bit position for the *next* bit.\n\n            // If shift becomes -1, it means the current byte is full (all 8 bits, from 7 down to 0, have been processed).\n            if (shift == -1) {\n                header.write(cache); // Write the full byte.\n                shift = 7; // Reset shift for the next byte.\n                cache = 0; // Reset cache.\n            }\n        }\n        // After the loop, check if there are any remaining bits in 'cache' that haven't been written.\n        // If 'shift' is still 7, it implies one of two scenarios:\n        // 1. 'length' was 0, so no bits were processed.\n        // 2. The last byte was perfectly filled (length was a multiple of 8), and 'shift' was reset to 7.\n        // In both these cases, we don't need to write anything more.\n        // If 'shift' is anything other than 7 (i.e., it's between 0 and 6 inclusive),\n        // it means we have a partial byte in 'cache' that needs to be written.\n        if (shift != 7) {\n            header.write(cache);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}