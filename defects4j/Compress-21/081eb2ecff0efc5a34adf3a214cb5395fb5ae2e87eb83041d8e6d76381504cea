{
    "generation": "    private void writeBits(final DataOutput header, final BitSet bits, final int length) throws IOException {\n        int cache = 0;\n        int shift = 7; // Represents the bit position (0-7) within the current byte, starting from MSB.\n                       // For the first bit, it's shifted by 7 to occupy the MSB position.\n        for (int i = 0; i < length; i++) {\n            // Get the bit at index 'i' from the BitSet.\n            // If true, 1; if false, 0.\n            // Shift this bit to the 'shift' position within 'cache'.\n            // OR it with cache to accumulate bits.\n            cache |= ((bits.get(i) ? 1 : 0) << shift);\n            --shift; // Move to the next lower bit position for the next bit.\n            \n            // If 'shift' becomes less than 0 (i.e., -1), it means 8 bits have been successfully packed\n            // (from position 7 down to 0). The byte is now full and ready to be written.\n            if (shift < 0) {\n                header.write(cache); // Write the full byte.\n                shift = 7; // Reset shift for the next byte, starting again from MSB.\n                cache = 0; // Reset cache for the next byte.\n            }\n        }\n        // After the loop, if there are any remaining bits in 'cache' that haven't formed a full byte.\n        // This happens if 'length' is not a multiple of 8.\n        // The condition 'shift != 7' correctly identifies this:\n        // - If 'length' was 0, 'shift' remains 7, so no write. Correct.\n        // - If 'length' was a multiple of 8, the last byte would have been written in the loop,\n        //   and 'shift' would have been reset to 7. So 'shift != 7' would be false. Correct.\n        // - If 'length' was not a multiple of 8, 'shift' will be somewhere between 0 and 6 (inclusive).\n        //   In this case, 'shift != 7' is true, and the partial byte in 'cache' is written. Correct.\n        if (shift != 7) {\n            header.write(cache);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}