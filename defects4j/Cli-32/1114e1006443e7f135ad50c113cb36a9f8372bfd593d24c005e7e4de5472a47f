{
    "generation": "    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos;\n\n        // the line ends before the max wrap pos or a new line char found\n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos - startPos < width)\n                || ((pos = text.indexOf('\\t', startPos)) != -1 && pos - startPos < width))\n        {\n            return pos + 1;\n        }\n        else if (startPos + width >= text.length())\n        {\n            return -1;\n        }\n\n        // look for the last whitespace character before startPos+width\n        pos = startPos + width - 1;\n\n        // Ensure pos doesn't exceed text length\n        if (pos >= text.length()) {\n            pos = text.length() - 1;\n        }\n\n        while ((pos >= startPos) && ((charAtIntro(text, pos) != ' ')\n                && (charAtIntro(text, pos) != '\\n') && (charAtIntro(text, pos) != '\\r')))\n        {\n            --pos;\n        }\n\n        // if we found it - just return\n        if (pos > startPos)\n        {\n            return pos + 1; // return position after whitespace\n        }\n\n        // if we didn't find one, simply chop at startPos+width\n        pos = startPos + width;\n        if (pos > text.length()) {\n            pos = text.length();\n        }\n        if (pos == text.length()) {\n            return -1;\n        }\n        return pos;\n    }\n\n    // Helper method to safely get character at position\n    private char charAtIntro(String text, int pos) {\n        if (pos >= text.length()) {\n            return '\\0'; // return null character if out of bounds\n        }\n        return text.charAt(pos);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}