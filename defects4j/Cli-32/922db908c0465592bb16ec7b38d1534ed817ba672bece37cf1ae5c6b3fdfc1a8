{
    "generation": "    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a \n     * whitespace character (space, \\n, \\r). If there is no whitespace character\n     * before startPos+width, it will return startPos+width.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return postion on which the text must be wrapped or -1 if the wrap\n     * position is at the end of the text\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos;\n        \n        // the line ends before the max wrap pos or a new line char found\n        // Check for '\\n' or '\\t' within the specified width, relative to startPos.\n        // 'pos < startPos + width' ensures the newline/tab is within the current segment.\n        // A newline/tab at 'pos' means the wrap point is 'pos + 1' (after the character).\n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos < startPos + width)\n                || ((pos = text.indexOf('\\t', startPos)) != -1 && pos < startPos + width))\n        {\n            return pos + 1;\n        }\n        else if (startPos + width >= text.length())\n        {\n            // If the segment from startPos + width is beyond or at the end of the text,\n            // it means the remaining text fits entirely or there's no more text to wrap.\n            // In this case, no further wrapping is needed for this segment, return -1.\n            return -1;\n        }\n\n        // Look for the last whitespace character before startPos+width.\n        // The effective search range for a wrap point (a whitespace) is [startPos, startPos + width - 1].\n        // We start searching backward from the rightmost character within this desired width,\n        // ensuring 'pos' is a valid index within 'text'.\n        pos = Math.min(text.length() - 1, startPos + width - 1); \n\n        char c;\n\n        // Search backward for a whitespace character (' ', '\\n', '\\r').\n        // The loop continues as long as 'pos' is within the valid start range\n        // and the character at 'pos' is not a whitespace.\n        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n                && (c != '\\n') && (c != '\\r'))\n        {\n            --pos;\n        }\n\n        // If we found a whitespace character (i.e., 'pos' is now the index of a whitespace\n        // and it's not 'startPos' itself, which implies the segment starts with whitespace,\n        // often not a desired wrap point), return its position.\n        // The condition 'pos > startPos' correctly handles cases where 'pos' became 'startPos'\n        // or went below 'startPos' (e.g., -1), meaning no suitable whitespace was found.\n        if (pos > startPos)\n        {\n            return pos;\n        }\n        \n        // If no whitespace character was found before 'startPos + width'\n        // (which means the backward search resulted in 'pos <= startPos'),\n        // then, as per the description, simply chop the text at 'startPos + width'.\n        return startPos + width;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}