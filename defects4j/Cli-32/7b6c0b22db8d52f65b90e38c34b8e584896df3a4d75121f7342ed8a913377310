{
    "generation": "protected int findWrapPos(String text, int width, int startPos) {\n    int pos;\n\n    // the line ends before the max wrap pos or a newline character found\n    if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= startPos + width)\n            || ((pos = text.indexOf('\\r', startPos)) != -1 && pos <= startPos + width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n\n    // look for the last whitespace character before startPos+width\n    pos = startPos + width;\n    if (pos >= text.length()) {\n        return -1;\n    }\n\n    char c;\n\n    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n            && (c != '\\n') && (c != '\\r'))\n    {\n        --pos;\n    }\n\n    // if we found it - just return the position (not pos+1)\n    if (pos >= startPos)\n    {\n        return pos + 1;\n    }\n\n    // if we didn't find one, simply chop at startPos+width\n    pos = startPos + width;\n    if (pos <= text.length()) {\n        c = text.charAt(pos);\n        while (pos < text.length() && c != ' ' && c != '\\n' && c != '\\r') {\n            ++pos;\n            if (pos < text.length()) {\n                c = text.charAt(pos);\n            }\n        }\n    }\n\n    // If we're at the end of the text, return -1\n    if (pos >= text.length()) {\n        return -1;\n    }\n    return pos + 1;  // Return position after whitespace (similar to first part)\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}