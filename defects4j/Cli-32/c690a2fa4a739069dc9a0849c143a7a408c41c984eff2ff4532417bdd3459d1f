{
    "generation": "    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a \n     * whitespace character (space, \\n, \\r). If there is no whitespace character\n     * before startPos+width, it will return startPos+width.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return postion on which the text must be wrapped or -1 if the wrap\n     * position is at the end of the text\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos;\n        \n        // Check for explicit line breaks (newline or tab) within the desired column width.\n        // If found, the wrap point is immediately after the explicit break.\n        // Note: The condition `pos <= width` here refers to the absolute position `pos`\n        // being within the global maximum column width. This behavior is preserved\n        // from the original code as it appears to be intended for explicit line breaks.\n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n                || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n        {\n            return pos + 1;\n        }\n        // If the calculated end position (startPos + width) is beyond or at the end of the text,\n        // it means no more wrapping is needed for this line.\n        else if (startPos + width >= text.length())\n        {\n            return -1;\n        }\n\n        // According to the description:\n        // \"The wrap point is the last position before startPos+width having a whitespace character (space, \\n, \\r).\"\n        // This means we should search backwards from `startPos + width - 1` down to `startPos`.\n        //\n        // \"If there is no whitespace character before startPos+width, it will return startPos+width.\"\n\n        // Iterate backwards from `startPos + width - 1` (the last character within the `width` limit)\n        // down to `startPos` to find the last whitespace character.\n        for (int i = startPos + width - 1; i >= startPos; i--) {\n            char c = text.charAt(i);\n            if (c == ' ' || c == '\\n' || c == '\\r') {\n                return i; // Found a whitespace, return its position as the wrap point.\n            }\n        }\n        \n        // If the loop completes, it means no whitespace character was found\n        // in the specified range [startPos, startPos + width - 1].\n        // In this case, as per the description, simply chop the text at `startPos + width`.\n        return startPos + width;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}