{
    "generation": "    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a \n     * whitespace character (space, \\n, \\r). If there is no whitespace character\n     * before startPos+width, it will return startPos+width. If a newline character\n     * is found before startPos+width, the wrap point is the position after the\n     * newline character.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return position on which the text must be wrapped or -1 if the wrap\n     * position would be past the end of the text.\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos;\n\n        // Look for a newline character within the wrap width\n        pos = text.indexOf('\\n', startPos);\n        // If found and it's strictly within the range [startPos, startPos + width)\n        if (pos != -1 && pos < startPos + width)\n        {\n            // Wrap on the character after the newline\n            return pos + 1;\n        }\n\n        // The potential wrap position if we have to cut a word\n        int potentialWrapPos = startPos + width;\n\n        // If the potential wrap position is at or beyond the end of the text,\n        // it means the rest of the text fits, return -1 to signal the end.\n        if (potentialWrapPos >= text.length())\n        {\n            return -1;\n        }\n\n        // Search backwards for the last whitespace character in the range\n        // [startPos, startPos + width - 1].\n        // Start searching from the character *before* the potential wrap position\n        // or the end of the string, whichever comes first.\n        int searchStart = Math.min(text.length() - 1, potentialWrapPos - 1);\n        int whitespacePos = -1; // Index of the last whitespace found\n\n        // Scan backwards from searchStart down to startPos inclusive\n        for (int currentPos = searchStart; currentPos >= startPos; --currentPos)\n        {\n            char c = text.charAt(currentPos);\n            // Check for space, newline, or carriage return\n            if (c == ' ' || c == '\\n' || c == '\\r')\n            {\n                whitespacePos = currentPos;\n                break; // Found the last whitespace in the viable range\n            }\n        }\n\n        // If a whitespace character was found (whitespacePos will be >= startPos)\n        if (whitespacePos >= startPos)\n        {\n            // Wrap on the character *after* the whitespace\n            return whitespacePos + 1;\n        }\n        \n        // No whitespace found in the range [startPos, startPos + width - 1].\n        // We have to cut the word at the width limit.\n        // Return the position startPos + width.\n        return potentialWrapPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}