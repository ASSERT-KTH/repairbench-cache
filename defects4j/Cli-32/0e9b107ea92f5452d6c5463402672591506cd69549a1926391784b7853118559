{
    "generation": "/**\n * Finds the next text wrap position after <code>startPos</code> for the\n * text in <code>text</code> with the column width <code>width</code>.\n * The wrap point is the last position (at or before startPos+width) that is a\n * whitespace character (space, \\n, or \\r). If no such whitespace is found,\n * then the text is simply chopped at startPos+width.\n *\n * @param text The text being searched for the wrap position\n * @param width width of the wrapped text\n * @param startPos position from which to start looking for a whitespace character\n * @return position on which the text must be wrapped, or -1 if the wrap\n *         position is at the end of the text\n */\nprotected int findWrapPos(String text, int width, int startPos) {\n    int pos;\n    \n    // If there is a newline or a tab before the wrap limit, break there.\n    if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= startPos + width)\n            || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= startPos + width)) {\n        return pos + 1;\n    } else if (startPos + width >= text.length()) {\n        return -1;\n    }\n\n    // Look backwards from startPos+width for a whitespace character.\n    pos = startPos + width;\n    while (pos > startPos) {\n        char c = text.charAt(pos);\n        if (c == ' ' || c == '\\n' || c == '\\r') {\n            break;\n        }\n        --pos;\n    }\n    \n    // If a whitespace was found (but not at the very start), use it.\n    if (pos > startPos) {\n        return pos;\n    }\n    \n    // No whitespace found in the backwards scan; break the word at startPos+width.\n    return startPos + width;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}