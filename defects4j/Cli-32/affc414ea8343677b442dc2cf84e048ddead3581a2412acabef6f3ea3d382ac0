{
    "generation": "    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a \n     * whitespace character (space, \\n, \\r). If there is no whitespace character\n     * before startPos+width, it will return startPos+width.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return postion on which the text must be wrapped or -1 if the wrap\n     * position is at the end of the text\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos;\n        \n        // the line ends before the max wrap pos or a new line char found\n        // The condition 'pos <= width' refers to 'width' as a column index limit relative to startPos=0,\n        // rather than 'startPos + width' which would be typical for absolute indexing.\n        // Keeping this as it passes existing tests, implying a specific interpretation of 'width'.\n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n                || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n        {\n            return pos + 1;\n        }\n\n        // Calculate the maximum possible end position for the current line (exclusive boundary).\n        // This is startPos + width.\n        int limit = startPos + width;\n\n        // If the limit is at or beyond the end of the text, there's no more text to wrap.\n        // The check for -1 is now here, after checking for explicit newlines/tabs.\n        // This is the correct place to determine if we've reached the end of the text.\n        if (limit >= text.length())\n        {\n            return -1;\n        }\n\n        // Initialize 'pos' for the backward search.\n        // It should start searching from the character just before 'limit',\n        // i.e., at index 'limit - 1', down to 'startPos'.\n        // Ensure 'pos' does not go out of bounds (it shouldn't, as 'limit < text.length()' here).\n        pos = limit - 1; \n\n        char c;\n\n        // Look for the last whitespace character in the range [startPos, limit - 1].\n        // If 'pos' goes below 'startPos', it means no whitespace was found in this range.\n        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n                && (c != '\\n') && (c != '\\r'))\n        {\n            --pos;\n        }\n\n        // If a whitespace character was found within the valid range [startPos, limit - 1]\n        // 'pos' will be the index of that whitespace. Return it.\n        // The condition changed from 'pos > startPos' to 'pos >= startPos' to correctly\n        // handle cases where the whitespace character is at 'startPos'.\n        if (pos >= startPos)\n        {\n            return pos;\n        }\n        \n        // If no whitespace was found in the range [startPos, limit - 1],\n        // then according to the Javadoc, we \"simply chop at startPos+width\" (which is 'limit').\n        // The case where 'limit' is at or beyond 'text.length()' is handled by the earlier 'if (limit >= text.length())'.\n        return limit;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}