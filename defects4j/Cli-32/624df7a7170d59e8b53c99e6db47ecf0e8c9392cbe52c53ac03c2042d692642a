{
    "generation": "/**\n * Finds the next text wrap position after <code>startPos</code> for the\n * text in <code>text</code> with the column width <code>width</code>.\n * The wrap point is the last position before startPos+width having a \n * whitespace character (space, \\n, \\r). If there is no whitespace character\n * before startPos+width, it will return the position where the text should be cut.\n *\n * @param text The text being searched for the wrap position\n * @param width width of the wrapped text\n * @param startPos position from which to start the lookup whitespace\n * character\n * @return position on which the text must be wrapped or -1 if the wrap\n * position is at the end of the text\n */\nprotected int findWrapPos(String text, int width, int startPos) {\n    int pos;\n\n    // Check for new line or tab characters within the width\n    if (((pos = text.indexOf('\\n', startPos)) != -1 && pos < startPos + width)\n            || ((pos = text.indexOf('\\t', startPos)) != -1 && pos < startPos + width)) {\n        return pos + 1;\n    } else if (startPos + width >= text.length()) {\n        return -1;\n    }\n\n    // Calculate the maximum wrap position\n    int maxWrapPos = startPos + width;\n\n    // Look for the last whitespace character before maxWrapPos\n    pos = maxWrapPos - 1;\n\n    char c;\n\n    while (pos >= startPos && pos < text.length()) {\n        c = text.charAt(pos);\n        if (c == ' ' || c == '\\n' || c == '\\r') {\n            return pos;\n        }\n        --pos;\n    }\n\n    // If no whitespace found, cut at maxWrapPos\n    return maxWrapPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}