{
    "generation": "    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a \n     * whitespace character (space, \\n, \\r, \\t). If there is no whitespace character\n     * before startPos+width, it will return startPos+width.\n     * <p>\n     * The wrap position is the index where the line should be broken. The character\n     * at the wrap position is the first character of the next line. If the wrap\n     * position is determined by a whitespace character, the whitespace character\n     * itself is skipped (it's not the first character of the next line).\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return position where the text wraps (first character of the next line)\n     * or -1 if the wrap position is at the end of the text.\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int limit = startPos + width;\n\n        // Handle case where wrap position is potentially beyond the end of text\n        // or the available text is shorter than the width starting from startPos\n        if (limit >= text.length())\n        {\n            // No wrap needed, we are at the end.\n            return -1;\n        }\n\n        // Check for the earliest significant whitespace (newline or tab)\n        // within the wrap range [startPos, limit). These force an early wrap.\n        int earliestForceWrapPos = -1;\n        int nlPos = text.indexOf('\\n', startPos);\n        int tabPos = text.indexOf('\\t', startPos);\n\n        // Check if newline is within the limit [startPos, limit)\n        if (nlPos != -1 && nlPos < limit) {\n            earliestForceWrapPos = nlPos;\n        }\n\n        // Check if tab is within the limit [startPos, limit) and is earlier than any found newline\n        if (tabPos != -1 && tabPos < limit) {\n            // If tab is earlier, or if no newline was found (-1)\n            if (earliestForceWrapPos == -1 || tabPos < earliestForceWrapPos) {\n                 earliestForceWrapPos = tabPos;\n            }\n        }\n\n        // If an explicit newline or tab forces a wrap before the width limit\n        if (earliestForceWrapPos != -1) {\n            return earliestForceWrapPos + 1; // Wrap position is after the newline/tab\n        }\n\n        // Look backwards for the last whitespace (' ', '\\n', '\\r')\n        // in the range [startPos, limit). Note limit is exclusive.\n        // Start search from limit-1 down to startPos.\n        int searchPos = limit; \n        while (searchPos > startPos)\n        {\n            // Check character at index searchPos - 1\n            searchPos--; \n            char c = text.charAt(searchPos);\n\n            // Check if the character is one of the whitespace types specified in original doc (' ', '\\n', '\\r')\n            if (c == ' ' || c == '\\n' || c == '\\r')\n            {\n                // Found a whitespace character. Wrap after this character.\n                return searchPos + 1; \n            }\n        }\n\n        // No whitespace found in the range [startPos, limit).\n        // We must cut the word at the limit (startPos + width).\n        return limit;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}