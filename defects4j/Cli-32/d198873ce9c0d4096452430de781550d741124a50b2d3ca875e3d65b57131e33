{
    "generation": "    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a \n     * whitespace character (space, \\n, \\r). If there is no whitespace character\n     * before startPos+width, it will return startPos+width.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return postion on which the text must be wrapped or -1 if the wrap\n     * position is at the end of the text\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos;\n        \n        // the line ends before the max wrap pos or a new line char found\n        // Corrected condition: pos <= startPos + width to correctly check if the found newline/tab\n        // falls within the current line's allowed width (from startPos to startPos + width).\n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= startPos + width)\n                || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= startPos + width))\n        {\n            return pos + 1; // Return the position *after* the newline/tab, effectively consuming it.\n        }\n        // If the remaining text segment from startPos to startPos + width extends beyond\n        // the actual end of the text, then no more wrapping is needed, return -1.\n        else if (startPos + width >= text.length())\n        {\n            return -1;\n        }\n\n\n        // Look for the last whitespace character within the range [startPos, startPos + width].\n        // Start searching from 'startPos + width' backwards.\n        pos = startPos + width;\n\n        char c;\n\n        // Loop while 'pos' is within the current segment (>= startPos) AND\n        // the character at 'pos' is NOT a whitespace (' ', '\\n', '\\r').\n        // The loop will stop when a whitespace is found, or 'pos' goes below 'startPos'.\n        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n                && (c != '\\n') && (c != '\\r'))\n        {\n            --pos;\n        }\n\n        // If a whitespace character was found such that 'pos' is still a valid index\n        // and greater than 'startPos', return that position. This means a valid wrap point\n        // (the index of the whitespace) was identified within the allowed width.\n        if (pos > startPos)\n        {\n            return pos;\n        }\n        \n        // If no suitable whitespace character was found within the [startPos, startPos + width] range\n        // (i.e., 'pos' became <= 'startPos' after the loop), then as per Javadoc,\n        // simply chop the text at 'startPos + width'.\n        return startPos + width;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}