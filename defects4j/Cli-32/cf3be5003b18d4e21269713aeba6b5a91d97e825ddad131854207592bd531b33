{
    "generation": "    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position within the wrap width (i.e. \n     * <code>[startPos, startPos + width)</code>) having a whitespace character \n     * (space, \\n, \\r, \\t). If such a position is found, the wrap point is the \n     * position immediately after the whitespace.\n     * If no whitespace character is found within the wrap width, the wrap point \n     * is <code>startPos + width</code>.\n     * If <code>startPos + width</code> is beyond the end of the text, returns -1.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return position on which the text must be wrapped or -1 if the wrap\n     * position is at the end of the text.\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos;\n\n        // Look for a newline or tab marker within the wrap width first.\n        // If found, wrap explicitly after it. Note: index is compared to startPos + width.\n        // Check specifically for \\n or \\t as these are sometimes handled differently\n        // (e.g., forcing a break) compared to spaces.\n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos < startPos + width) ||\n            ((pos = text.indexOf('\\t', startPos)) != -1 && pos < startPos + width))\n        {\n            // Wrap after the newline or tab\n            return pos + 1;\n        }\n\n        // Calculate the maximum potential end position on the current line.\n        int endPos = startPos + width;\n\n        // If the potential end position is at or past the end of the text,\n        // this indicates we are processing the last part of the text. Return -1 \n        // to signal no further wrapping is needed based on width.\n        if (endPos >= text.length())\n        {\n            return -1;\n        }\n\n        // Search backwards for the last whitespace character (' ', \\n, \\r - tab already handled)\n        // within the range [startPos, endPos - 1].\n        // Start searching from the character at index endPos - 1, as endPos is the first\n        // character of the next potential line.\n        pos = endPos - 1; \n\n        while (pos >= startPos)\n        {\n            char c = text.charAt(pos);\n            // Check for common whitespace characters (space, newline, carriage return).\n            if (c == ' ' || c == '\\n' || c == '\\r')\n            {\n                // Found a whitespace character. Return the position immediately after it\n                // as the wrap position.\n                return pos + 1;\n            }\n            pos--;\n        }\n\n        // No whitespace character found in the range [startPos, endPos - 1].\n        // This means either the segment starts with a long word that exceeds the width,\n        // or the entire segment within the width contains no whitespace.\n        // In this case, we must break the word at the width limit (endPos).\n        // Return the calculated end position as the wrap point.\n        return endPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}