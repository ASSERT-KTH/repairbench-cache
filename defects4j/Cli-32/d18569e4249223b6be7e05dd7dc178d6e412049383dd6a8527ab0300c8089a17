{
    "generation": "    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a \n     * whitespace character (space, \\n, \\r). If there is no whitespace character\n     * before startPos+width, it will return startPos+width.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return postion on which the text must be wrapped or -1 if the wrap\n     * position is at the end of the text\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos;\n        \n        // Check for explicit newline or tab characters within the potential wrap segment.\n        // If found, the wrap point is immediately after the character.\n        // The condition `pos < startPos + width` ensures the newline/tab is *before* the width boundary.\n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos < startPos + width)\n                || ((pos = text.indexOf('\\t', startPos)) != -1 && pos < startPos + width))\n        {\n            return pos + 1; // Return the position *after* the newline/tab character.\n        }\n        \n        // If the remaining text is shorter than the desired width, or exactly fits,\n        // no further wrapping is needed for this segment.\n        if (startPos + width >= text.length())\n        {\n            return -1; // Indicates that the end of the text or current segment is reached.\n        }\n\n        // Search backward for the last whitespace character before startPos+width.\n        // Start searching from the character at `startPos + width - 1` (the last char that fits).\n        pos = startPos + width - 1;\n        char c;\n\n        // Iterate backward as long as `pos` is within the current segment (>= startPos).\n        while (pos >= startPos)\n        {\n            c = text.charAt(pos);\n            if (c == ' ' || c == '\\n' || c == '\\r')\n            {\n                // Found a whitespace character. This is the wrap point.\n                // According to tests, this returns the index of the whitespace itself.\n                return pos;\n            }\n            --pos; // Move to the previous character.\n        }\n\n        // If the loop completes without finding a whitespace, it means the segment\n        // from `startPos` to `startPos + width - 1` contains no whitespace.\n        // This is the \"word cut\" scenario where a single word is longer than `width`.\n        // In this case, chop the text exactly at `startPos + width`.\n        return startPos + width;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}