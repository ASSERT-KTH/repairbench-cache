{
    "generation": "    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a \n     * whitespace character (space, \\n, \\r). If there is no whitespace character\n     * before startPos+width, it will return startPos+width.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return postion on which the text must be wrapped or -1 if the wrap\n     * position is at the end of the text\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos;\n        \n        // the line ends before the max wrap pos or a new line char found\n        // Corrected condition: pos should be < startPos + width, as 'pos' is absolute\n        // and 'width' is relative to 'startPos'.\n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos < startPos + width)\n                || ((pos = text.indexOf('\\t', startPos)) != -1 && pos < startPos + width))\n        {\n            return pos + 1;\n        }\n        else if (startPos + width >= text.length())\n        {\n            // If the potential wrap point is beyond or at the end of the text,\n            // no more wrapping is needed for this segment.\n            return -1;\n        }\n\n\n        // look for the last whitespace character before startPos+width\n        // Start search from startPos + width and go backward.\n        pos = startPos + width;\n\n        char c;\n\n        // Iterate backward until a whitespace character is found or startPos is reached/crossed.\n        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n                && (c != '\\n') && (c != '\\r'))\n        {\n            --pos;\n        }\n\n        // if a whitespace character was found before startPos+width (and not at startPos itself)\n        if (pos > startPos)\n        {\n            return pos;\n        }\n        \n        // if no whitespace character was found in the backward search (pos <= startPos),\n        // the Javadoc specifies that it should \"simply chop at startPos+width\".\n        // The original code's attempt to find the *next* whitespace was incorrect.\n        return startPos + width;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}