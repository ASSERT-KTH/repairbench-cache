{
    "generation": "    /**\n     * Finds the next text wrap position after <code>startPos</code> for the\n     * text in <code>text</code> with the column width <code>width</code>.\n     * The wrap point is the last position before startPos+width having a \n     * whitespace character (space, \\n, \\r). If there is no whitespace character\n     * before startPos+width, it will return startPos+width.\n     *\n     * @param text The text being searched for the wrap position\n     * @param width width of the wrapped text\n     * @param startPos position from which to start the lookup whitespace\n     * character\n     * @return postion on which the text must be wrapped or -1 if the wrap\n     * position is at the end of the text\n     */\n    protected int findWrapPos(String text, int width, int startPos)\n    {\n        int pos;\n        \n        // The line ends if a new line char or tab is found within the allowed width.\n        // The comparison 'pos <= width' was incorrect as 'pos' is an absolute index\n        // and 'width' is a column width. It should be 'pos <= startPos + width'\n        // to correctly check if the newline/tab is within the current segment (inclusive of boundary).\n        if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= startPos + width)\n                || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= startPos + width))\n        {\n            return pos + 1;\n        }\n        else if (startPos + width >= text.length())\n        {\n            // If the potential wrap position is beyond or at the end of the text,\n            // no further wrap is needed.\n            return -1;\n        }\n\n\n        // Look for the last whitespace character before startPos+width.\n        // The maximum index for a character to be \"before startPos+width\" is startPos + width - 1.\n        // We need to ensure 'pos' does not go out of bounds (e.g., if width is 0 or 1).\n        pos = startPos + width - 1;\n\n        // Ensure 'pos' is within text bounds and not less than 'startPos'\n        // for very short widths or texts.\n        if (pos >= text.length()) {\n            pos = text.length() - 1;\n        }\n        if (pos < startPos) {\n            pos = startPos; // If width is too small, make sure pos doesn't become less than startPos\n        }\n\n\n        char c;\n\n        // Search backward from 'pos' to 'startPos' for a whitespace character.\n        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n                && (c != '\\n') && (c != '\\r'))\n        {\n            --pos;\n        }\n\n        // If a whitespace character was found at or after 'startPos', return its position.\n        // Changed 'pos > startPos' to 'pos >= startPos' to correctly handle a wrap point at 'startPos' itself.\n        if (pos >= startPos)\n        {\n            return pos;\n        }\n        \n        // If no whitespace character was found in the range [startPos, startPos + width - 1],\n        // then, as per description, chop at startPos+width.\n        return startPos + width;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}