{
    "generation": "@Override\npublic CollectionDeserializer createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    // May need to resolve types for delegate-based creators:\n    JsonDeserializer<Object> delegateDeser = null;\n    JavaType delegateType = null;\n    if (_valueInstantiator != null) {\n        if (_valueInstantiator.canCreateUsingDelegate()) {\n            // [databind#2664]: getDelegateType takes (DeserializationConfig, BeanProperty)\n            delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig(), property);\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                        +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                        +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            delegateDeser = findDeserializer(ctxt, delegateType, property);\n        }\n    }\n    // [databind#1043]: allow per-property allow-wrapping of single overrides:\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    // also, often value deserializer is resolved here:\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    \n    // May have a content converter\n    valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n    final JavaType vt = _collectionType.getContentType();\n    if (valueDeser == null) {\n        valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n    } else { // if directly assigned, probably not yet contextual, so:\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n    }\n    // and finally, type deserializer needs context as well\n    TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n    if (valueTypeDeser != null) {\n        valueTypeDeser = valueTypeDeser.forProperty(property);\n    }\n\n    // [databind#3525]: If delegate-based creator exists, and collection is abstract/has no default ctor,\n    // allow fallback to delegate-based construction (for things like unmodifiable collections)\n    if (_valueInstantiator != null\n            && _valueInstantiator.canCreateUsingDelegate()\n            && !_valueInstantiator.canCreateUsingDefault()\n            && _collectionType.isAbstract()) {\n        // Nothing extra to do, just ensure delegateDeser is used (already assigned above)\n        // This helps cases like UnmodifiableSet where only delegate construction is possible\n    }\n\n    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}