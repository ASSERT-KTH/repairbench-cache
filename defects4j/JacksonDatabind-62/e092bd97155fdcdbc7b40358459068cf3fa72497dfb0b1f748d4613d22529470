{
    "generation": "    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // Start with existing delegate deserializer, if any:\n        JsonDeserializer<Object> delegateDeser = _delegateDeserializer;\n\n        // May need to resolve types for delegate-based creators:\n        if (_valueInstantiator != null) {\n            JavaType delegateType = null;\n            if (_valueInstantiator.canCreateUsingDelegate()) {\n                delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n                if (delegateType == null) {\n                    throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                            +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n                }\n            } else if (_valueInstantiator.canCreateUsingArrayDelegate()) { // Also check array delegate\n                delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n                if (delegateType == null) {\n                    throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                            +\") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'\");\n                }\n            }\n\n            // If potential delegate creator, find/validate/contextualize deserializer:\n            if (delegateType != null) {\n                if (delegateDeser == null) {\n                    // If no delegate deserializer assigned yet, find one\n                    delegateDeser = findDeserializer(ctxt, delegateType, property);\n                } else { // if we already had one, may need to contextualize\n                    // Note: MUST ensure contextualization, should be fine for secondary call\n                    delegateDeser = ctxt.handleSecondaryContextualization(delegateDeser,\n                            property, delegateType);\n                }\n            }\n        }\n\n        // [databind#1043]: allow per-property allow-wrapping of single overrides:\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n\n        // also, often value deserializer is resolved here:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n\n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n\n        // and finally, type deserializer needs context as well\n        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n        // Pass along resolved delegate, value deserializer, value type deserializer, unwrap single setting\n        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}