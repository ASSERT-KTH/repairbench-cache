{
    "generation": "    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // May need to resolve types for delegate-based creators:\n        JsonDeserializer<Object> delegateDeser = null;\n        if (_valueInstantiator != null) {\n            if (_valueInstantiator.canCreateUsingDelegate()) {\n                JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n                if (delegateType == null) {\n                    throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                            +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n                }\n                delegateDeser = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n        \n        // FIX: For unmodifiable collections (like those from Collections.unmodifiableSet/List/Collection),\n        // the ValueInstantiator might not correctly report a delegating creator,\n        // even if a mix-in @JsonCreator is present. In such cases, we explicitly try\n        // to find a delegate deserializer for the corresponding mutable base type (e.g., Set for UnmodifiableSet).\n        // This ensures the deserializer is correctly configured for delegation.\n        if (delegateDeser == null && _collectionType != null &&\n                _collectionType.getRawClass().getName().startsWith(\"java.util.Collections$Unmodifiable\")) {\n            \n            Class<?> rawType = _collectionType.getRawClass();\n            Class<?> mutableDelegateRawType = null;\n            \n            // Determine the appropriate mutable interface type as delegate for the unmodifiable collection\n            if (Set.class.isAssignableFrom(rawType)) {\n                mutableDelegateRawType = Set.class;\n            } else if (List.class.isAssignableFrom(rawType)) {\n                mutableDelegateRawType = List.class;\n            } else if (Collection.class.isAssignableFrom(rawType)) {\n                mutableDelegateRawType = Collection.class;\n            }\n\n            if (mutableDelegateRawType != null) {\n                // Construct the delegate JavaType, propagating content type from the original collection type\n                JavaType delegateType = ctxt.constructSpecializedType(_collectionType, mutableDelegateRawType);\n                if (delegateType != null && _collectionType.hasGenericTypes()) {\n                    delegateType = delegateType.withContentType(_collectionType.getContentType());\n                }\n                \n                // Try to find a deserializer for this derived delegate type\n                if (delegateType != null) {\n                    delegateDeser = findDeserializer(ctxt, delegateType, property);\n                }\n            }\n        }\n\n        // [databind#1043]: allow per-property allow-wrapping of single overrides:\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        // also, often value deserializer is resolved here:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        \n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n        // and finally, type deserializer needs context as well\n        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}