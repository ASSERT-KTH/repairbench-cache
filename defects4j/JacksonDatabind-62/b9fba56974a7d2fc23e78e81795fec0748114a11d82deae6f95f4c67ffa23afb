{
    "generation": "    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // Issue #684, #730: may need to resolve ValueInstantiator for collection\n        // if not already done, or if a more specific one is now available (e.g., via mix-ins).\n        // If _valueInstantiator is null, or if it needs to be updated (e.g., to find a @JsonCreator\n        // from a mix-in for a specific actual type like UnmodifiableSet), it should be resolved here.\n        ValueInstantiator inst = _valueInstantiator;\n        if (inst == null) {\n            inst = ctxt.getFactory().findValueInstantiator(ctxt.getConfig(), _collectionType);\n        }\n        // If 'inst' is now a different (and hopefully more specific/correct) instantiator,\n        // we should ensure this instance or the new one returned by withResolved uses it.\n        // Assuming _valueInstantiator field is mutable (not final) for this specific bug fix context,\n        // or that this effectively re-initializes it for subsequent uses.\n        if (_valueInstantiator != inst) {\n            _valueInstantiator = inst;\n        }\n\n        JsonDeserializer<Object> delegateDeser = null;\n        // Use the resolved 'inst' for delegate creator checks\n        if (_valueInstantiator != null && _valueInstantiator.canCreateUsingDelegate()) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                            +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            delegateDeser = findDeserializer(ctxt, delegateType, property);\n        }\n\n        // [databind#1043]: allow per-property allow-wrapping of single overrides:\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        // also, often value deserializer is resolved here:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n\n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n        // and finally, type deserializer needs context as well\n        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}