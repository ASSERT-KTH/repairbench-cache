{
    "generation": "@Override\npublic CollectionDeserializer createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    JsonDeserializer<Object> delegateDeser = null;\n\n    if (_valueInstantiator != null) {\n        if (_valueInstantiator.canCreateUsingDelegate()) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                        +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                        +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            delegateDeser = findDeserializer(ctxt, delegateType, property);\n        } else if (_collectionType.isConcrete()) {\n            // Special handling for certain JDK types like unmodifiable collections\n            final Class<?> raw = _collectionType.getRawClass();\n            if (Collection.class.isAssignableFrom(raw)) {\n                // Check if there is an accessible constructor taking a Collection (delegating creator)\n                // (This is hacky but necessary for \"Unmodifiable\" Collections wrappers etc)\n                JavaType delegateType = _collectionType.containedTypeOrUnknown(0);\n                if (delegateType == null || delegateType.hasRawClass(Object.class)) {\n                    delegateType = ctxt.getTypeFactory().constructCollectionType(Collection.class, Object.class);\n                } else {\n                    delegateType = ctxt.getTypeFactory().constructCollectionType(Collection.class, delegateType);\n                }\n                delegateDeser = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n    }\n\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n    final JavaType vt = _collectionType.getContentType();\n    if (valueDeser == null) {\n        valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n    } else {\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n    }\n\n    TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n    if (valueTypeDeser != null) {\n        valueTypeDeser = valueTypeDeser.forProperty(property);\n    }\n\n    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}