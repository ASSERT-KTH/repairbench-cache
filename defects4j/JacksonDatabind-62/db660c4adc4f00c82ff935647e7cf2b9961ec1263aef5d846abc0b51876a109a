{
    "generation": "/**\n * Method called to finalize setup of this deserializer,\n * when it is known for which property deserializer is needed\n * for.\n */\n@Override\npublic CollectionDeserializer createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    // May need to resolve types for delegate-based creators:\n    JsonDeserializer<Object> delegateDeser = null;\n    if (_valueInstantiator != null) {\n        if (_valueInstantiator.canCreateUsingDelegate()) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                        +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                        +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            delegateDeser = findDeserializer(ctxt, delegateType, property);\n        }\n    }\n    // [databind#1043]: allow per-property allow-wrapping of single overrides:\n    // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n    //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    // also, often value deserializer is resolved here:\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n\n    // May have a content converter\n    valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n    final JavaType vt = _collectionType.getContentType();\n    if (valueDeser == null) {\n        valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n    } else { // if directly assigned, probably not yet contextual, so:\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n    }\n    // and finally, type deserializer needs context as well\n    TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n    if (valueTypeDeser != null) {\n        valueTypeDeser = valueTypeDeser.forProperty(property);\n    }\n\n    // Ensure we can instantiate the collection type if it's a delegate-based creator\n    if (delegateDeser != null) {\n        // For delegate-based creators, we need to ensure the delegate type can be instantiated\n        // If not, we might need to modify our approach (but for now we'll proceed as is)\n    }\n\n    // Ensure we can handle unmodifiable collections\n    // The fix here is to handle the case where the collection type is unmodifiable\n    // by ensuring we don't try to modify it during deserialization\n    // We'll add special handling for Collections.unmodifiableSet cases\n    if (_collectionType.getRawClass().getName().startsWith(\"java.util.Collections$\")) {\n        // For unmodifiable collections, we'll use the raw type (Collection.class or Set.class)\n        // instead of the exact unmodifiable type which can't be instantiated directly\n        JavaType rawType;\n        if (Set.class.isAssignableFrom(_collectionType.getRawClass())) {\n            rawType = ctxt.constructType(Set.class);\n        } else if (List.class.isAssignableFrom(_collectionType.getRawClass())) {\n            rawType = ctxt.constructType(List.class);\n        } else if (Collection.class.isAssignableFrom(_collectionType.getRawClass())) {\n            rawType = ctxt.constructType(Collection.class);\n        } else {\n            rawType = _collectionType;\n        }\n        // Now create a new deserializer with the raw type\n        CollectionDeserializer deser = (CollectionDeserializer) super.createContextual(ctxt, property);\n        return deser.withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n    }\n\n    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}