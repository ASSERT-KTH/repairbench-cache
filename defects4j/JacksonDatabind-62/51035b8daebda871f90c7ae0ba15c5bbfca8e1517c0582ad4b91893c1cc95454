{
    "generation": "@Override\npublic CollectionDeserializer createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    // resolve delegate\u2010based creator, if any (e.g. @JsonCreator on a single\u2010arg factory)\n    JsonDeserializer<Object> delegateDeser = null;\n    if (_valueInstantiator != null) {\n        // instead of only checking canCreateUsingDelegate(), we look directly for a non\u2010null\n        // delegate type.  If the instantiator has declared one, bind a deserializer for it.\n        JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType != null) {\n            delegateDeser = findDeserializer(ctxt, delegateType, property);\n        }\n    }\n    // allow per\u2010property override of ACCEPT_SINGLE_VALUE_AS_ARRAY\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n\n    // resolve (or re\u2010resolve) the element deserializer\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n    final JavaType contentType = _collectionType.getContentType();\n    if (valueDeser == null) {\n        valueDeser = ctxt.findContextualValueDeserializer(contentType, property);\n    } else {\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, contentType);\n    }\n\n    // and type\u2010deserializer for contents, if any\n    TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n    if (valueTypeDeser != null) {\n        valueTypeDeser = valueTypeDeser.forProperty(property);\n    }\n\n    // return a new instance with the delegate deserializer (if one was found),\n    // the element deserializer, type\u2010deserializer, and unwrapSingle setting.\n    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}