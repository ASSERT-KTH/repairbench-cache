{
    "generation": "@Override\npublic CollectionDeserializer createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    // first: see if there is a single\u2010argument creator (delegating or property\u2010based)\n    JsonDeserializer<Object> delegateDeser = null;\n    if (_valueInstantiator != null) {\n        // pure delegating\u2010creator (Mode.DELEGATING)\n        if (_valueInstantiator.canCreateUsingDelegate()) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate\u2010creator definition for \"+_collectionType\n                        +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                        +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            delegateDeser = findDeserializer(ctxt, delegateType, property);\n        }\n        // single\u2010arg property\u2010based creator (Mode.PROPERTIES on 1\u2010arg ctor)\n        else if (_valueInstantiator.canCreateFromObjectWith()) {\n            SettableBeanProperty[] props = _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n            if (props != null && props.length == 1) {\n                delegateDeser = findDeserializer(ctxt, props[0].getType(), property);\n            }\n        }\n    }\n\n    // [databind#1043]: allow per\u2010property ACCEPT_SINGLE_VALUE_AS_ARRAY override\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n\n    // next: content deserializer / converter\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n    final JavaType contentType = _collectionType.getContentType();\n    if (valueDeser == null) {\n        valueDeser = ctxt.findContextualValueDeserializer(contentType, property);\n    } else {\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, contentType);\n    }\n\n    // and contextualize element type\u2010deserializer if any\n    TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n    if (valueTypeDeser != null) {\n        valueTypeDeser = valueTypeDeser.forProperty(property);\n    }\n\n    // return a new instance (or 'this' if nothing changed)\n    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}