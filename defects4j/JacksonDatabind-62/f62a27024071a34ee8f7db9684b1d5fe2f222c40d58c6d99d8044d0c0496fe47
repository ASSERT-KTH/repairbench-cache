{
    "generation": "/**\n * Method called to finalize setup of this deserializer,\n * when it is known for which property deserializer is needed\n * for.\n */\n@Override\npublic CollectionDeserializer createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    // start with any delegate we already have, so we don't drop it accidentally\n    @SuppressWarnings(\"unchecked\")\n    JsonDeserializer<Object> delegateDeser = (JsonDeserializer<Object>) _delegateDeserializer;\n\n    // May need to resolve (or first resolve) types for delegate\u2010based creators:\n    if (delegateDeser == null && _valueInstantiator != null) {\n        if (_valueInstantiator.canCreateUsingDelegate()) {\n            JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                        +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                        +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            // use contextual lookup for delegate\n            delegateDeser = findDeserializer(ctxt, delegateType, property);\n        }\n    }\n\n    // [databind#1043]: allow per-property override of single-value unwrapping:\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n\n    // now resolve content deserializer\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n    final JavaType contentType = _collectionType.getContentType();\n    if (valueDeser == null) {\n        valueDeser = ctxt.findContextualValueDeserializer(contentType, property);\n    } else {\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, contentType);\n    }\n\n    // and finally, type deserializer for contents\n    TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n    if (valueTypeDeser != null) {\n        valueTypeDeser = valueTypeDeser.forProperty(property);\n    }\n\n    // return a new instance (or 'this' if nothing changed)\n    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}