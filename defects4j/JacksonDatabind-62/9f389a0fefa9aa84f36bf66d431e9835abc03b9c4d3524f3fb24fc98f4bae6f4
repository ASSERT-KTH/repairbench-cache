{
    "generation": "    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // Try to resolve ValueInstantiator if it's not already resolved (or is default/null)\n        // This is crucial for types that don't have default constructors but rely on creators.\n        // _valueInstantiator is final, so we'll use a local 'inst' variable and pass it to the constructor.\n        ValueInstantiator inst = _valueInstantiator;\n        if (inst == null) {\n            inst = ctxt.getDeserializerFactory().findValueInstantiator(ctxt, _collectionType);\n        }\n\n        JsonDeserializer<Object> delegateDeser = null;\n        if (inst != null) { // Use the (potentially resolved) instantiator\n            if (inst.canCreateUsingDelegate()) {\n                JavaType delegateType = inst.getDelegateType(ctxt.getConfig());\n                if (delegateType == null) {\n                    throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+inst.getClass().getName()\n                            +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n                }\n                delegateDeser = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n        // [databind#1043]: allow per-property allow-wrapping of single overrides:\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        // also, often value deserializer is resolved here:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        \n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n        // and finally, type deserializer needs context as well\n        TypeDeserializer valueTypeDeser = _valueTypeDeser;\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n        \n        // We cannot use the existing `withResolved` method directly because it always\n        // passes the original `_valueInstantiator` (which might be null or incorrect).\n        // Instead, we directly call the constructor with the potentially newly resolved 'inst'.\n        // This sacrifices the `if same` optimization of `withResolved` for correctness.\n        return new CollectionDeserializer(_collectionType, valueDeser, valueTypeDeser, inst, delegateDeser, unwrapSingle);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}