{
    "generation": "@Override\npublic CollectionDeserializer createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    JsonDeserializer<Object> delegateDeser = null;\n    if (_valueInstantiator != null && _valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType == null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                    +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                    +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n        }\n        delegateDeser = findDeserializer(ctxt, delegateType, property);\n        // Check if the type is unmodifiable and adjust delegate accordingly\n        JavaType actualContentType = delegateType.getContentType();\n        if (actualContentType != null && _collectionType.getContentType().equals(actualContentType)) {\n            JavaType modifiableType = ctxt.getTypeFactory().constructCollectionType(\n                    getCorrespondingModifiableCollectionType(delegateType), actualContentType);\n            delegateDeser = findDeserializer(ctxt, modifiableType, property);\n        }\n    }\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    \n    valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n    final JavaType vt = _collectionType.getContentType();\n    if (valueDeser == null) {\n        valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n    } else {\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n    }\n    TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n    if (valueTypeDeser != null) {\n        valueTypeDeser = valueTypeDeser.forProperty(property);\n    }\n    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n}\n\nprivate Class<? extends Collection<?>> getCorrespondingModifiableCollectionType(JavaType type) {\n    if (type.isCollectionLikeType()) {\n        Class<? extends Collection<?>> rawType = type.getRawClass();\n        if (rawType.equals(Collections.UnmodifiableSet.class)) {\n            return Set.class;\n        } else if (rawType.equals(Collections.UnmodifiableList.class)) {\n            return List.class;\n        } else if (rawType.equals(Collections.UnmodifiableCollection.class)) {\n            return Collection.class;\n        }\n    }\n    return type.getRawClass();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}