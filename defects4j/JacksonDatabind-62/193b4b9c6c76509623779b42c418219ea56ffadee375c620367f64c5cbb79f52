{
    "generation": "    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // May need to resolve types for delegate-based creators:\n        // Let's make local copy since ValueInstantiator is immutable in common case\n        ValueInstantiator valueInstantiator = _valueInstantiator;\n        JsonDeserializer<Object> delegateDeser = null;\n        if (valueInstantiator != null) {\n            // Use getter for creator to be more specific/reliable than `canCreateXxx`\n            // (canCreateUsingDelegate() may rely on delegateType == null check; incorrect)\n            AnnotatedWithParams delegateCreator = valueInstantiator.getDelegateCreator();\n            if (delegateCreator != null) {\n                JavaType delegateType = valueInstantiator.getDelegateType(ctxt.getConfig());\n                if (delegateType == null) {\n                    throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+valueInstantiator.getClass().getName()\n                            +\") returned non-null Delegate Creator method, but null for 'getDelegateType()'\");\n                }\n                // Find the delegate deserializer\n                delegateDeser = findDeserializer(ctxt, delegateType, property);\n            }\n            // Note: Property-based creators are not handled here in the provided code snippet.\n            // They are handled elsewhere, possibly directly by ValueInstantiator logic.\n        }\n\n        // [databind#1043]: allow per-property allow-wrapping of single overrides:\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n\n        // also, often value deserializer is resolved here:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        \n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n\n        // and finally, type deserializer needs context as well\n        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n\n        // Compare resolved components with current ones; only create new instance if changed.\n        // Use Objects.equals() for potentially null Boolean values.\n        // Assuming the original 'withResolved' and state comparison didn't involve NullProvider.\n        // (Note: later versions might include NullProvider comparison here too)\n        if (Objects.equals(_unwrapSingle, unwrapSingle)\n                && (_delegateDeserializer == delegateDeser)\n                && (_valueDeserializer == valueDeser)\n                && (_valueTypeDeserializer == valueTypeDeser)) {\n            return this;\n        }\n\n        // Create new instance with potentially resolved components\n        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}