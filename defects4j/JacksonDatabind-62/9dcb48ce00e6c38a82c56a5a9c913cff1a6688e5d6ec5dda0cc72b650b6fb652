{
    "generation": "@Override\npublic CollectionDeserializer createContextual(DeserializationContext ctxt,\n        BeanProperty property) throws JsonMappingException\n{\n    // If there is a value instantiator, see if it defines a delegate type.\n    JsonDeserializer<Object> delegateDeser = null;\n    if (_valueInstantiator != null) {\n        JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType != null) {\n            delegateDeser = findDeserializer(ctxt, delegateType, property);\n        } else if (_valueInstantiator.canCreateUsingDelegate()) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _collectionType\n                    + \": value instantiator (\" + _valueInstantiator.getClass().getName()\n                    + \") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n        }\n    }\n    // [databind#1043]: allow per-property allow-wrapping of single overrides:\n    Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n            JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n    // resolve the value deserializer (possibly with content conversion)\n    JsonDeserializer<?> valueDeser = _valueDeserializer;\n    valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n    final JavaType vt = _collectionType.getContentType();\n    if (valueDeser == null) {\n        valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n    } else { // if directly assigned, probably not yet contextual; do secondary contextualization\n        valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n    }\n    // And finally, the type deserializer needs to get context as well\n    TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n    if (valueTypeDeser != null) {\n        valueTypeDeser = valueTypeDeser.forProperty(property);\n    }\n    return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}