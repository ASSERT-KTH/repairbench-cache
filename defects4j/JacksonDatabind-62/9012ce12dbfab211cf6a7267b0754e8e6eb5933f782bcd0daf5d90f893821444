{
    "generation": "    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // 1. Ensure ValueInstantiator is resolved, if not already.\n        // This is crucial for polymorphic types like UnmodifiableSet where\n        // the instantiator might be null or not correctly configured for delegate creation.\n        ValueInstantiator inst = _valueInstantiator;\n        if (inst == null) {\n            inst = ctxt.findValueInstantiator(_collectionType, property);\n        }\n\n        // May need to resolve types for delegate-based creators:\n        JsonDeserializer<Object> delegateDeser = null;\n        if (inst != null) { // Use the resolved 'inst'\n            if (inst.canCreateUsingDelegate()) {\n                JavaType delegateType = inst.getDelegateType(ctxt.getConfig());\n                if (delegateType == null) {\n                    throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+inst.getClass().getName() // Use 'inst'\n                            +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n                }\n                delegateDeser = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n        // [databind#1043]: allow per-property allow-wrapping of single overrides:\n        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly\n        //   comes down to \"List vs Collection\" I suppose... for now, pass Collection\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        // also, often value deserializer is resolved here:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        \n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n        // and finally, type deserializer needs context as well\n        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n        // 2. Pass the resolved 'inst' to withResolved, so the new instance uses it\n        return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle, inst);\n    }\n\n    // This is a helper method, assuming it is part of the same class or a superclass that needs modification.\n    // The original CollectionDeserializer.withResolved only passed _valueInstantiator, not 'inst'.\n    // To properly fix, this method needs to be updated to accept and use the resolved ValueInstantiator.\n    // If this method is not directly provided in the context, it implicitly needs to be modified or added.\n    protected CollectionDeserializer withResolved(JsonDeserializer<?> delegateDeser,\n            JsonDeserializer<?> valueDeser, TypeDeserializer valueTypeDeser,\n            Boolean unwrapSingle, ValueInstantiator inst) // Added 'inst' parameter\n    {\n        // Check if no changes occurred, including the instantiator\n        if (delegateDeser == _delegateDeserializer && valueDeser == _valueDeserializer\n                && valueTypeDeser == _valueTypeDeser && unwrapSingle == _unwrapSingle\n                && inst == _valueInstantiator) { // Compare 'inst' with current '_valueInstantiator'\n            return this;\n        }\n        // Create a new instance using the resolved 'inst'\n        return new CollectionDeserializer(_collectionType, valueDeser, valueTypeDeser,\n                inst, delegateDeser, unwrapSingle); // Use 'inst' in constructor call\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}