{
    "generation": "    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // 0. Resolve the ValueInstantiator based on the actual _collectionType.\n        // This is crucial if the initial deserializer was for a generic type (e.g. Set.class)\n        // and now needs to handle a concrete type (e.g. UnmodifiableSet) due to default typing.\n        // The original _valueInstantiator might be for a common mutable collection, not for the specific target type.\n        // We re-find the instantiator to ensure it's correct for the concrete _collectionType.\n        ValueInstantiator contextualInstantiator = ctxt.getFactory().findValueInstantiator(ctxt, _collectionType);\n\n        // 1. Resolve types for delegate-based creators:\n        JsonDeserializer<Object> delegateDeser = null;\n        if (contextualInstantiator != null) {\n            if (contextualInstantiator.canCreateUsingDelegate()) {\n                JavaType delegateType = contextualInstantiator.getDelegateType(ctxt.getConfig());\n                if (delegateType == null) {\n                    throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+contextualInstantiator.getClass().getName()\n                            +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n                }\n                delegateDeser = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n\n        // 2. [databind#1043]: allow per-property allow-wrapping of single overrides:\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n\n        // 3. Resolve value deserializer:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n\n        // 4. Resolve value type deserializer:\n        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n\n        // 5. Return a new instance using the (potentially re-resolved) contextualInstantiator\n        // We must use the constructor that allows specifying ValueInstantiator explicitly,\n        // as the default `withResolved` would copy the old `_valueInstantiator` (which might be wrong).\n        return new CollectionDeserializer(this, valueDeser, valueTypeDeser,\n                contextualInstantiator, delegateDeser, unwrapSingle);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}