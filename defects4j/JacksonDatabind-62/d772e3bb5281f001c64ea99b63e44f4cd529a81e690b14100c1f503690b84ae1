{
    "generation": "    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // 1. Resolve or confirm the ValueInstantiator.\n        // If _valueInstantiator is null, we need to find it here.\n        // If it's not null, we keep it, as it's assumed to be pre-resolved.\n        ValueInstantiator actualInst = _valueInstantiator;\n        if (actualInst == null) {\n            actualInst = ctxt.getFactory().findValueInstantiator(ctxt, _collectionType);\n        }\n\n        // 2. May need to resolve types for delegate-based creators, using the 'actualInst'.\n        JsonDeserializer<Object> delegateDeser = null;\n        if (actualInst != null) { // Use 'actualInst' for all checks\n            if (actualInst.canCreateUsingDelegate()) {\n                JavaType delegateType = actualInst.getDelegateType(ctxt.getConfig());\n                if (delegateType == null) {\n                    throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+actualInst.getClass().getName()\n                            +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n                }\n                delegateDeser = findDeserializer(ctxt, delegateType, property);\n            }\n        }\n\n        // 3. [databind#1043]: allow per-property allow-wrapping of single overrides:\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        \n        // 4. Also, often value deserializer is resolved here:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        \n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n\n        // 5. And finally, type deserializer needs context as well\n        TypeDeserializer valueTypeDeser = _valueTypeDeser;\n        if (valueTypeDeser != null) {\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n\n        // 6. Check if any of the resolved components necessitate creating a new deserializer instance.\n        // This includes the ValueInstantiator, delegate deserializer, value deserializer,\n        // value type deserializer, and the unwrapSingle feature setting.\n        if (actualInst != _valueInstantiator\n                || delegateDeser != _delegateDeserializer\n                || valueDeser != _valueDeserializer\n                || valueTypeDeser != _valueTypeDeser\n                || unwrapSingle != _unwrapSingle)\n        {\n            // If any relevant component has changed, create and return a new instance\n            // with all the resolved (and possibly updated) parameters.\n            return new CollectionDeserializer(_collectionType, valueDeser, valueTypeDeser, actualInst,\n                    delegateDeser, unwrapSingle);\n        }\n        // If no changes, return 'this' for efficiency.\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}