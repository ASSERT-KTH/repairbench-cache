{
    "generation": "    /**\n     * Method called to finalize setup of this deserializer,\n     * when it is known for which property deserializer is needed\n     * for.\n     */\n    @Override\n    public CollectionDeserializer createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n    {\n        // 0. Resolve ValueInstantiator if not already resolved.\n        // This is crucial for types like UnmodifiableSet that require specific creators.\n        ValueInstantiator inst = _valueInstantiator;\n        if (inst == null) {\n            inst = ctxt.getFactory().findValueInstantiator(ctxt.getConfig(), _collectionType);\n        }\n\n        // 1. Resolve delegate deserializer using the (potentially newly resolved) instantiator\n        JsonDeserializer<Object> newDelegateDeser = null;\n        if (inst.canCreateUsingDelegate()) {\n            JavaType delegateType = inst.getDelegateType(ctxt.getConfig());\n            if (delegateType == null) {\n                throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                            +\": value instantiator (\"+inst.getClass().getName()\n                            +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\");\n            }\n            newDelegateDeser = findDeserializer(ctxt, delegateType, property);\n        }\n        \n        // [databind#1043]: allow per-property allow-wrapping of single overrides:\n        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,\n                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        \n        // also, often value deserializer is resolved here:\n        JsonDeserializer<?> valueDeser = _valueDeserializer;\n        \n        // May have a content converter\n        valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);\n        final JavaType vt = _collectionType.getContentType();\n        if (valueDeser == null) {\n            valueDeser = ctxt.findContextualValueDeserializer(vt, property);\n        } else { // if directly assigned, probably not yet contextual, so:\n            valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);\n        }\n        \n        // and finally, type deserializer needs context as well\n        TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n        if (valueTypeDeser != null) { // Corrected: was `if (valueDeser != null)`\n            valueTypeDeser = valueTypeDeser.forProperty(property);\n        }\n\n        // Check if any of the resolved components changed from the original deserializer's state.\n        // If `inst` was null and is now resolved, or if any deserializer changed, return a new instance.\n        if (inst != _valueInstantiator\n                || newDelegateDeser != _delegateDeserializer\n                || valueDeser != _valueDeserializer\n                || valueTypeDeser != _valueTypeDeserializer\n                || unwrapSingle != _unwrapSingle)\n        {\n            // Return a new instance with the resolved components using the full constructor.\n            // Casts to JsonDeserializer<Object> are necessary due to generic type constraints.\n            return new CollectionDeserializer(_collectionType, (JsonDeserializer<Object>) valueDeser,\n                    valueTypeDeser, inst, (JsonDeserializer<Object>) newDelegateDeser, unwrapSingle);\n        }\n        // If nothing changed, return this instance\n        return this;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}