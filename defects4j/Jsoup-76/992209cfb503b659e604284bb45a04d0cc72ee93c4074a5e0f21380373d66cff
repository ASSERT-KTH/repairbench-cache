{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            // cast once\n            Token.Character c = t.asCharacter();\n            // ----------------------------------------------------------------\n            // FIX: skip the first LF in a freshly-opened <pre> or <listing>\n            // ----------------------------------------------------------------\n            Element cur = tb.currentElement();\n            if (cur != null) {\n                String curName = cur.nodeName();\n                // if we're in <pre> or <listing> and this is the very first text node\n                if ((curName.equals(\"pre\") || curName.equals(\"listing\")) \n                        && cur.childNodeSize() == 0) {\n                    String data = c.getData();\n                    if (data.length() > 0 && data.charAt(0) == '\\n') {\n                        // drop that first line feed\n                        String rest = data.substring(1);\n                        if (rest.isEmpty()) {\n                            // nothing left to do\n                            return true;\n                        }\n                        // replace the token with the trimmed data\n                        t = new Token.Character().data(rest);\n                        c = t.asCharacter();\n                    }\n                }\n            }\n            // ----------------------------------------------------------------\n            // original Character handling follows\n            // ----------------------------------------------------------------\n            if (c.getData().equals(nullString)) {\n                // todo confirm that check\n                tb.error(this);\n                return false;\n            } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            // ... all other branches unchanged ...\n            if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insert(startTag);\n                tb.framesetOk(false);\n            }\n            // ... rest of the StartTag branches ...\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n            // ... all EndTag branches unchanged ...\n            break;\n        case EOF:\n            // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n            // stop parsing\n            break;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}