{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            // SKIP THE FIRST NEWLINE IN A <pre> OR <listing> ELEMENT (authoring convenience)\n            if (tb.currentElement() != null) {\n                String nodeName = tb.currentElement().nodeName();\n                if ((nodeName.equals(\"pre\") || nodeName.equals(\"listing\"))\n                        && tb.currentElement().childNodeSize() == 0) {\n                    String data = c.getData();\n                    if (data.length() > 0 && data.charAt(0) == '\\n') {\n                        data = data.substring(1);\n                        if (data.isEmpty())\n                            return true;      // nothing left to insert\n                        c = new Token.Character().data(data);\n                    }\n                }\n            }\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (tb.framesetOk() && isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n\n        case StartTag: {\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            // ... all the existing StartTag logic unchanged ...\n            break;\n        }\n\n        case EndTag: {\n            Token.EndTag endTag = t.asEndTag();\n            String name = endTag.normalName();\n            // ... all the existing EndTag logic unchanged ...\n            break;\n        }\n\n        case EOF:\n            // ... existing EOF logic unchanged ...\n            break;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}