{
    "generation": "boolean process(Token t, HtmlTreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                // todo confirm that check\n                tb.error(this);\n                return false;\n            } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.normalName();\n            // ... all of the existing StartTag handling unchanged ...\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.processEndTag(\"p\");\n                }\n                tb.insert(startTag);\n                tb.framesetOk(false);\n            // ... remainder of StartTag handling unchanged ...\n            break;\n\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.normalName();\n\n            if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                // ... existing adoption agency algorithm ...\n            } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                // ... existing closers handling ...\n            } else if (name.equals(\"span\")) {\n                return anyOtherEndTag(t, tb);\n            } else if (name.equals(\"li\")) {\n                // ... existing li handling ...\n            } else if (name.equals(\"body\")) {\n                // ... existing body handling ...\n            } else if (name.equals(\"html\")) {\n                // ... existing html handling ...\n            } else if (name.equals(\"form\")) {\n                // ... existing form handling ...\n            } else if (name.equals(\"p\")) {\n                // ... existing p handling ...\n            } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                // ... existing dd/dt handling ...\n            } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                // ... existing heading handling ...\n            } else if (name.equals(\"sarcasm\")) {\n                return anyOtherEndTag(t, tb);\n            } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                // ... existing applet handling ...\n            } else if (name.equals(\"br\")) {\n                tb.error(this);\n                tb.processStartTag(\"br\");\n                return false;\n            } else if (name.equals(\"pre\")) {\n                // --- FIX: drop the very first newline in a <pre> before closing ---\n                Element preEl = tb.currentElement();\n                if (preEl.childNodeSize() > 0) {\n                    Node first = preEl.childNode(0);\n                    if (first instanceof org.jsoup.nodes.TextNode) {\n                        org.jsoup.nodes.TextNode tn = (org.jsoup.nodes.TextNode) first;\n                        String data = tn.getWholeText();\n                        if (data.startsWith(\"\\n\")) {\n                            tn.text(data.substring(1));\n                        }\n                    }\n                }\n                return anyOtherEndTag(t, tb);\n            } else {\n                return anyOtherEndTag(t, tb);\n            }\n\n        case EOF:\n            // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n            // stop parsing\n            break;\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}