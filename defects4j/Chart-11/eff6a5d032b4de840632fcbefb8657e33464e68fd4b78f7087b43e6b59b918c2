{
    "generation": "/**\n * Tests two polygons for equality.  If both are <code>null</code> this\n * method returns <code>true</code>.\n *\n * @param p1  path 1 (<code>null</code> permitted).\n * @param p2  path 2 (<code>null</code> permitted).\n *\n * @return A boolean.\n */\npublic static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n\n    PathIterator iterator1 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n\n    // walk both paths in lockstep\n    while (!iterator1.isDone() && !iterator2.isDone()) {\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        // compare only the relevant coords for this segment type\n        int coords = 0;\n        switch (seg1) {\n            case PathIterator.SEG_MOVETO:\n            case PathIterator.SEG_LINETO:\n                coords = 2;\n                break;\n            case PathIterator.SEG_QUADTO:\n                coords = 4;\n                break;\n            case PathIterator.SEG_CUBICTO:\n                coords = 6;\n                break;\n            case PathIterator.SEG_CLOSE:\n                coords = 0;\n                break;\n        }\n        for (int i = 0; i < coords; i++) {\n            if (d1[i] != d2[i]) {\n                return false;\n            }\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n\n    // both iterators should be done together\n    return iterator1.isDone() && iterator2.isDone();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}