{
    "generation": "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null); // FIX: use p2, not p1\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    while (true) {\n        boolean done1 = iterator1.isDone();\n        boolean done2 = iterator2.isDone();\n        if (done1 && done2) {\n            return true;\n        }\n        if (done1 != done2) {\n            return false;\n        }\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        // Only compare as many points as are used for this segment type\n        int numPoints;\n        switch (seg1) {\n            case PathIterator.SEG_MOVETO:\n            case PathIterator.SEG_LINETO:\n                numPoints = 2;\n                break;\n            case PathIterator.SEG_QUADTO:\n                numPoints = 4;\n                break;\n            case PathIterator.SEG_CUBICTO:\n                numPoints = 6;\n                break;\n            case PathIterator.SEG_CLOSE:\n                numPoints = 0;\n                break;\n            default:\n                return false; // unknown segment\n        }\n        for (int i = 0; i < numPoints; i++) {\n            if (Double.doubleToLongBits(d1[i]) != Double.doubleToLongBits(d2[i])) {\n                return false;\n            }\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}