{
    "generation": "    /**\n     * Tests two polygons for equality.  If both are <code>null</code> this\n     * method returns <code>true</code>.\n     *\n     * @param p1  path 1 (<code>null</code> permitted).\n     * @param p2  path 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        // Bug fix: Initialize iterator2 with p2, not p1\n        PathIterator iterator2 = p2.getPathIterator(null);\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            // Compare coordinates based on segment type\n            // The number of coordinates used depends on the segment type\n            int numCoords = 0;\n            switch (seg1) {\n                case PathIterator.SEG_MOVETO:\n                case PathIterator.SEG_LINETO:\n                    numCoords = 2;\n                    break;\n                case PathIterator.SEG_QUADTO:\n                    numCoords = 4;\n                    break;\n                case PathIterator.SEG_CUBICTO:\n                    numCoords = 6;\n                    break;\n                case PathIterator.SEG_CLOSE:\n                    numCoords = 0;\n                    break;\n                default:\n                    // Should not happen\n                    return false;\n            }\n            // Only compare the relevant coordinates for the segment type\n            boolean coordsEqual = true;\n            for (int i = 0; i < numCoords; i++) {\n                if (d1[i] != d2[i]) {\n                    coordsEqual = false;\n                    break;\n                }\n            }\n            if (!coordsEqual) {\n                 return false;\n            }\n\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}