{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            int equalIndex = arg.indexOf('=');\n            if (equalIndex != -1)\n            {\n                String optPart;\n                String valuePart = arg.substring(equalIndex + 1);\n\n                // get the actual option name part\n                String leading = arg.substring(0, equalIndex);\n                String stripped = Util.stripLeadingHyphens(leading);\n\n                if (options.hasOption(stripped))\n                {\n                    if (arg.startsWith(\"--\")) {\n                        tokens.add(\"--\" + stripped);\n                    } else {\n                        // Could be a single dash longOpt or shortOpt\n                        if (stripped.length() > 1) {\n                            // Single dash longOpt: -foo=bar\n                            tokens.add(\"-\" + stripped);\n                        } else {\n                            // Short option: -f=bar\n                            tokens.add(\"-\" + stripped);\n                        }\n                    }\n                    tokens.add(valuePart);\n                }\n                else\n                {\n                    tokens.add(arg);\n                }\n            }\n            else if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else\n            {\n                if (arg.length() > 2 && arg.startsWith(\"-\") && !arg.startsWith(\"--\") &&\n                        options.hasOption(arg.substring(1, 2)))\n                {\n                    // example: -Dproperty (no '='), treat as -D property\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}