{
    "generation": "    /**\n     * <p>This flatten method does so using the following rules:\n     * <ol>\n     *  <li>If an {@link Option} exists for the first character of\n     *  the <code>arguments</code> entry <b>AND</b> an {@link Option}\n     *  does not exist for the whole <code>argument</code> then\n     *  add the first character as an option to the processed tokens\n     *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n     *  <li>Otherwise just add the token to the processed tokens list.\n     *  </li>\n     * </ol>\n     * </p>\n     *\n     * @param options The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop\n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List<String> tokens = new ArrayList<String>();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n\n                // Check if the argument contains an equals sign\n                int pos = arg.indexOf('=');\n                boolean hasEquals = pos != -1;\n                String optionPart = hasEquals ? arg.substring(0, pos) : arg;\n                String optionName = Util.stripLeadingHyphens(optionPart);\n\n                if (options.hasOption(optionName))\n                {\n                    if (hasEquals)\n                    {\n                        tokens.add(optionPart); // Add the part before '='\n                        tokens.add(arg.substring(pos + 1)); // Add the value after '='\n                    }\n                    else\n                    {\n                        tokens.add(arg);\n                    }\n                }\n                else if (options.hasOption(arg.substring(0, 2)))\n                {\n                    // Handle case where the first two characters are a valid option (like -D)\n                    if (arg.length() > 2)\n                    {\n                        tokens.add(arg.substring(0, 2));\n                        tokens.add(arg.substring(2));\n                    }\n                    else\n                    {\n                        tokens.add(arg);\n                    }\n                }\n                else\n                {\n                    // Handle cases like -fvalue or -foovalue where 'f' or 'foo' is a valid option\n                    boolean handled = false;\n\n                    // First try to match as a long option (--foo or -foo)\n                    if (opt.startsWith(\"--\"))\n                    {\n                        // Already stripped leading hyphens, but let's handle --foo=bar case\n                        int equalPos = arg.indexOf('=');\n                        if (equalPos > 0)\n                        {\n                            String potentialOption = arg.substring(0, equalPos);\n                            String optionValue = arg.substring(equalPos + 1);\n                            String optionToCheck = Util.stripLeadingHyphens(potentialOption);\n\n                            if (options.hasOption(optionToCheck))\n                            {\n                                tokens.add(potentialOption);\n                                tokens.add(optionValue);\n                                handled = true;\n                            }\n                        }\n                    }\n                    else if (opt.startsWith(\"-\"))\n                    {\n                        // Handle single dash options\n                        String optionName = opt.substring(1);\n                        if (options.hasOption(optionName))\n                        {\n                            if (hasEquals)\n                            {\n                                tokens.add(arg.substring(0, pos));\n                                tokens.add(arg.substring(pos + 1));\n                            }\n                            else\n                            {\n                                tokens.add(arg);\n                            }\n                            handled = true;\n                        }\n                        else if (arg.length() > 1 && options.hasOption(arg.substring(1, 2)))\n                        {\n                            // Handle case like -f=value where -f is a valid option\n                            tokens.add(arg.substring(0, 2)); // -f\n                            tokens.add(arg.substring(2));    // rest (including =value)\n                            handled = true;\n                        }\n                    }\n\n                    if (!handled)\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}