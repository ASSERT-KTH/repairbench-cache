{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List<String> tokens = new ArrayList<>();\n    boolean eatTheRest = false;\n    \n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n        \n        if (eatTheRest) {\n            tokens.add(arg);\n            continue;\n        }\n        \n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            String prefix = arg.startsWith(\"--\") ? \"--\" : \"-\";\n            String stripped = arg.substring(prefix.length());\n            int eqIndex = stripped.indexOf('=');\n            if (eqIndex != -1) {\n                String potentialOption = stripped.substring(0, eqIndex);\n                // If the part before '=' is recognized then split the argument.\n                if (options.hasOption(potentialOption)) {\n                    tokens.add(prefix + potentialOption);\n                    tokens.add(stripped.substring(eqIndex + 1));\n                    continue;\n                } \n                // Otherwise, if it is a property option (e.g. -Dproperty=value) where the first character is defined\n                else if (prefix.equals(\"-\") && stripped.length() > 0 && options.hasOption(String.valueOf(stripped.charAt(0)))) {\n                    tokens.add(\"-\" + stripped.charAt(0));\n                    tokens.add(arg.substring(2));\n                    continue;\n                } else {\n                    if (stopAtNonOption) {\n                        eatTheRest = true;\n                    }\n                    tokens.add(arg);\n                    continue;\n                }\n            } else {\n                // No '=' present. If the option as a whole is not recognized and\n                // we should stop at the first non\u2010option then trigger the remainder.\n                if (!options.hasOption(stripped) && stopAtNonOption) {\n                    eatTheRest = true;\n                }\n                tokens.add(arg);\n            }\n        } else {\n            tokens.add(arg);\n            if (stopAtNonOption) {\n                // add the rest unchanged\n                for (int j = i + 1; j < arguments.length; j++) {\n                    tokens.add(arguments[j]);\n                }\n                break;\n            }\n        }\n        \n        if (eatTheRest) {\n            for (int j = i + 1; j < arguments.length; j++) {\n                tokens.add(arguments[j]);\n            }\n            break;\n        }\n    }\n    \n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}