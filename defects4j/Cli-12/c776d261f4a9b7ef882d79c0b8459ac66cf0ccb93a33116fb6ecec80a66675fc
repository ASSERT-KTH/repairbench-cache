{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List<String> tokens = new ArrayList<>();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            tokens.add(\"--\");\n            eatTheRest = true;\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            // If the argument contains an '=' sign, try to split it.\n            if (arg.indexOf('=') != -1) {\n                int eqIdx = arg.indexOf('=');\n                // Try to see if the full option (up to the '=') is recognized.\n                String candidateFull = Util.stripLeadingHyphens(arg.substring(0, eqIdx));\n                if (options.hasOption(candidateFull)) {\n                    tokens.add(arg.substring(0, eqIdx));\n                    tokens.add(arg.substring(eqIdx + 1));\n                } else if (arg.length() > 2 && options.hasOption(Util.stripLeadingHyphens(arg.substring(0, 2)))) {\n                    // Special case: the option exists for the first character only.\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                } else {\n                    tokens.add(arg);\n                    if (stopAtNonOption) {\n                        eatTheRest = true;\n                    }\n                }\n            } else {\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt)) {\n                    tokens.add(arg);\n                } else if (arg.length() > 2 && options.hasOption(Util.stripLeadingHyphens(arg.substring(0, 2)))) {\n                    // Special handling: e.g. -Dproperty (when -D is a recognized option)\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                } else {\n                    tokens.add(arg);\n                    if (stopAtNonOption) {\n                        eatTheRest = true;\n                    }\n                }\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (i = i + 1; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}