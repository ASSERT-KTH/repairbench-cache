{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = null;\n            String value = null;\n            int equalsIndex = arg.indexOf('=');\n\n            if (equalsIndex != -1)\n            {\n                opt = arg.substring(0, equalsIndex);\n                value = arg.substring(equalsIndex + 1);\n\n                String strippedOpt = Util.stripLeadingHyphens(opt);\n                // Try both short and long options\n                if (options.hasOption(strippedOpt))\n                {\n                    tokens.add(opt);\n                    tokens.add(value);\n                }\n                else\n                {\n                    // Try two character option (e.g. -Dfoo=bar)\n                    if (opt.length() == 2 && options.hasOption(opt.substring(1)))\n                    {\n                        tokens.add(opt);\n                        tokens.add(value);\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else\n            {\n                String strippedArg = Util.stripLeadingHyphens(arg);\n\n                if (options.hasOption(strippedArg))\n                {\n                    tokens.add(arg);\n                }\n                else if (arg.length() > 2 && options.hasOption(arg.substring(0, 2)))\n                {\n                    // the format is a special properties option (-Dproperty)\n                    tokens.add(arg.substring(0, 2)); // -D\n                    tokens.add(arg.substring(2)); // property\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}