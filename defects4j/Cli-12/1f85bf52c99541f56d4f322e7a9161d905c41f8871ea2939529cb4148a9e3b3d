{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List<String> tokens = new ArrayList<String>();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\")) {\n            int hyphens = arg.startsWith(\"--\") ? 2 : 1;\n            int indexEq = arg.indexOf('=');\n\n            // handle --foo=bar or -foo=bar or -f=bar when foo/f is a known option\n            if (indexEq > hyphens) {\n                String optName = arg.substring(hyphens, indexEq);\n                if (options.hasOption(optName)) {\n                    tokens.add(arg.substring(0, indexEq));\n                    tokens.add(arg.substring(indexEq + 1));\n                    continue;\n                }\n            }\n\n            // no matching --opt=val or -opt=val, fall back to other rules\n            String optNameFull = arg.substring(hyphens);\n            if (options.hasOption(optNameFull)) {\n                // exact match of long or single-dash long\n                tokens.add(arg);\n            }\n            else if (hyphens == 1 && optNameFull.length() > 0\n                     && options.hasOption(optNameFull.substring(0, 1))) {\n                // single-char option with the rest as its argument\n                tokens.add(arg.substring(0, 2));\n                if (arg.length() > 2) {\n                    tokens.add(arg.substring(2));\n                }\n            }\n            else {\n                // not an option, or stopAtNonOption forces remaining as args\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        }\n        else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            // add all remaining arguments as-is\n            for (i = i + 1; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}