{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List<String> tokens = new ArrayList<>();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (eatTheRest) {\n            tokens.add(arg);\n        } else if (arg.startsWith(\"-\")) {\n            // if the argument contains an '=' then we want to split it\n            if (arg.indexOf('=') != -1) {\n                int eq = arg.indexOf('=');\n                String optionToken = arg.substring(0, eq);\n                String valueToken   = arg.substring(eq + 1);\n                // if the option part (with any leading dashes stripped) is a known option then split it\n                if (options.hasOption(Util.stripLeadingHyphens(optionToken))) {\n                    tokens.add(optionToken);\n                    tokens.add(valueToken);\n                }\n                // check for the special \u201cproperty\u201d style (e.g., -Dproperty=value)\n                else if (arg.length() >= 2 && options.hasOption(Util.stripLeadingHyphens(arg.substring(0, 2)))) {\n                    tokens.add(arg.substring(0, 2)); // e.g. \"-D\"\n                    tokens.add(arg.substring(2));    // e.g. \"property=value\"\n                } else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            } else {\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt)) {\n                    tokens.add(arg);\n                } else if (arg.length() > 2 && options.hasOption(Util.stripLeadingHyphens(arg.substring(0, 2)))) {\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                } else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (int j = i + 1; j < arguments.length; j++) {\n                tokens.add(arguments[j]);\n            }\n            break;\n        }\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}