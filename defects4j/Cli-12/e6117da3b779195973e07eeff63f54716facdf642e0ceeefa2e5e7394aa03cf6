{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"--\"))\n        {\n            // handle --foo=bar\n            int equalsIndex = arg.indexOf('=');\n            if (equalsIndex != -1)\n            {\n                String opt = arg.substring(2, equalsIndex);\n                String value = arg.substring(equalsIndex + 1);\n                if (options.hasLongOption(opt))\n                {\n                    tokens.add(\"--\" + opt);\n                    tokens.add(value);\n                }\n                else\n                {\n                    tokens.add(arg);\n                }\n            }\n            else\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else if (arg.startsWith(\"-\") && arg.length() > 2 && arg.indexOf('=') != -1)\n        {\n            // handle -foo=bar, -f=bar\n            int equalsIndex = arg.indexOf('=');\n            String opt = arg.substring(1, equalsIndex);\n            String value = arg.substring(equalsIndex + 1);\n\n            // try both short/long form\n            boolean longOpt = options.hasLongOption(opt);\n            boolean shortOpt = options.hasOption(opt);\n\n            if (longOpt)\n            {\n                tokens.add(\"--\" + opt);\n                tokens.add(value);\n            }\n            else if (shortOpt)\n            {\n                tokens.add(\"-\" + opt);\n                tokens.add(value);\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else\n            {\n                if (options.hasOption(arg.substring(0, 2)))\n                {\n                    // the format is a special properties option (-Dproperty=value)\n                    tokens.add(arg.substring(0, 2)); // -D\n                    tokens.add(arg.substring(2)); // property=value\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n            break; // ensure we don't process more tokens\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}