{
    "generation": "    /**\n     * <p>This flatten method does so using the following rules:\n     * <ol>\n     *  <li>If an {@link Option} exists for the first character of \n     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} \n     *  does not exist for the whole <code>argument</code> then\n     *  add the first character as an option to the processed tokens\n     *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n     *  <li>Otherwise just add the token to the processed tokens list.\n     *  </li>\n     * </ol>\n     * </p>\n     *\n     * @param options The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop \n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n\n                // Check for options with equals sign (e.g., --foo=bar, -f=bar, -Dprop=value)\n                int equals = opt.indexOf('=');\n                if (equals != -1)\n                {\n                    String optName = opt.substring(0, equals);\n                    String optValue = opt.substring(equals + 1);\n\n                    // Determine the original prefix (single or double dash)\n                    // The substring call here needs to be careful: arg.length() - opt.length()\n                    // gives the length of the prefix.\n                    String prefix = arg.substring(0, arg.length() - opt.length());\n\n                    // If 'optName' is a registered option (e.g., \"foo\", \"f\", \"D\"), split it.\n                    if (options.hasOption(optName))\n                    {\n                        tokens.add(prefix + optName); // Add \"--foo\" or \"-f\" or \"-D\"\n                        tokens.add(optValue);         // Add \"bar\" or \"property=value\"\n                    }\n                    else\n                    {\n                        // If 'optName' itself is not a known option, treat the whole arg as unrecognized\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n                else // No '=' in the option string (e.g., -D, --foo, -f, -Dprop, -fvalue)\n                {\n                    if (options.hasOption(opt)) // E.g., options.hasOption(\"foo\") for \"--foo\", or \"f\" for \"-f\"\n                    {\n                        tokens.add(arg);\n                    }\n                    // This handles short options with attached arguments, like \"-Dprop\" or \"-fvalue\"\n                    // It applies if arg starts with a single dash, is longer than 2 chars (e.g., \"-fX\"),\n                    // and the *first character* of the stripped option is a known option.\n                    else if (arg.startsWith(\"-\") && arg.length() > 2 && !arg.startsWith(\"--\"))\n                    {\n                        String firstChar = String.valueOf(opt.charAt(0));\n                        if (options.hasOption(firstChar))\n                        {\n                            tokens.add(arg.substring(0, 2)); // e.g., \"-D\" or \"-f\"\n                            tokens.add(opt.substring(1));    // e.g., \"prop\" or \"value\"\n                        }\n                        else\n                        {\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    }\n                    else // Unrecognized single token (e.g., \"--unknown\", \"-unknown\")\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else // Not starting with '-' (a non-option argument)\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}