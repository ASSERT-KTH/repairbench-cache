{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(arg);\n        } else if (\"-\".equals(arg)) {\n            tokens.add(arg);\n        } else if (arg.startsWith(\"-\")) {\n            int equalsIndex = arg.indexOf('=');\n            if (equalsIndex > 0) {\n                String opt = arg.substring(0, equalsIndex);\n                String value = arg.substring(equalsIndex + 1);\n                \n                if (options.hasOption(opt) || options.hasOption(opt.substring(1))) {\n                    if (opt.startsWith(\"--\")) {\n                        tokens.add(opt);\n                        tokens.add(value);\n                    } else {\n                        String resolvedOpt = opt.startsWith(\"--\") ? opt : opt.substring(1);\n                        if (options.hasOption(resolvedOpt)) {\n                            tokens.add(resolvedOpt);\n                            tokens.add(value);\n                        } else {\n                            tokens.add(arg);\n                        }\n                    }\n                } else {\n                    tokens.add(arg);\n                }\n            } else {\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt)) {\n                    tokens.add(arg);\n                } else if (options.hasOption(arg.substring(0, 2))) {\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                } else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}