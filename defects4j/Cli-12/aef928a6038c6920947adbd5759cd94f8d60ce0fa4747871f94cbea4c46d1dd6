{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List<String> tokens = new ArrayList<>();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            // If the arg contains an '=' then split it into the option and its value.\n            if (arg.indexOf('=') != -1) {\n                int eqIdx = arg.indexOf('=');\n                String beforeEq = arg.substring(0, eqIdx);\n                String afterEq = arg.substring(eqIdx + 1);\n                String opt = Util.stripLeadingHyphens(beforeEq);\n                if (options.hasOption(opt)) {\n                    tokens.add(beforeEq);\n                    tokens.add(afterEq);\n                } else {\n                    // not recognized as a whole option so try the property style (first character only)\n                    if (beforeEq.length() > 1) {\n                        String firstOpt = beforeEq.substring(0, 2);\n                        if (options.hasOption(Util.stripLeadingHyphens(firstOpt))) {\n                            tokens.add(firstOpt);\n                            tokens.add(arg.substring(2));\n                        } else {\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    } else {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            } else { // no '=' in the argument\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt)) {\n                    tokens.add(arg);\n                } else {\n                    // Try splitting off the first character if that is a valid option (e.g. -Dproperty)\n                    if (arg.length() > 2) {\n                        String firstOpt = arg.substring(0, 2);\n                        if (options.hasOption(Util.stripLeadingHyphens(firstOpt))) {\n                            tokens.add(firstOpt);\n                            tokens.add(arg.substring(2));\n                        } else {\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    } else {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (++i; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}