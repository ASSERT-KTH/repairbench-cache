{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List tokens = new ArrayList();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\")) {\n            // special \"-Dproperty=value\" handling\n            if (arg.startsWith(\"-D\") && arg.length() > 2 && options.hasOption(\"D\")) {\n                tokens.add(\"-D\");\n                tokens.add(arg.substring(2));\n            }\n            else {\n                int eqIndex = arg.indexOf('=');\n                if (eqIndex > 0) {\n                    String name = arg.substring(0, eqIndex);\n                    String value = arg.substring(eqIndex + 1);\n\n                    if (name.startsWith(\"--\")) {\n                        // long option with \"--foo=bar\"\n                        String opt = Util.stripLeadingHyphens(name);\n                        if (options.hasOption(opt)) {\n                            tokens.add(name);\n                            tokens.add(value);\n                        } else {\n                            tokens.add(arg);\n                        }\n                    }\n                    else {\n                        // single-dash form, could be short \"-f=bar\" or single-dash long \"-foo=bar\"\n                        String opt = name.substring(1);\n                        if (opt.length() == 1) {\n                            // short option\n                            if (options.hasOption(opt)) {\n                                tokens.add(\"-\" + opt);\n                                tokens.add(value);\n                            } else {\n                                tokens.add(arg);\n                            }\n                        }\n                        else {\n                            // single-dash long option\n                            if (options.hasOption(opt)) {\n                                tokens.add(\"--\" + opt);\n                                tokens.add(value);\n                            } else {\n                                tokens.add(arg);\n                            }\n                        }\n                    }\n                }\n                else {\n                    // no \"=\" in arg, just pass through or stop\n                    String opt = Util.stripLeadingHyphens(arg);\n                    if (options.hasOption(opt)) {\n                        tokens.add(arg);\n                    } else {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n        }\n        else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}