{
    "generation": "    /**\n     * <p>This flatten method does so using the following rules:\n     * <ol>\n     *  <li>If an {@link Option} exists for the first character of \n     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} \n     *  does not exist for the whole <code>argument</code> then\n     *  add the first character as an option to the processed tokens\n     *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n     *  <li>Otherwise just add the token to the processed tokens list.\n     *  </li>\n     * </ol>\n     * </p>\n     *\n     * @param options The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop \n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt = Util.stripLeadingHyphens(arg); // e.g. \"f=bar\", \"foo=bar\", \"Dproperty=value\", \"Dvalue\"\n\n                // Check if the whole stripped argument (e.g., \"foo=bar\") is a known option.\n                // This covers cases where the option name itself is \"foo=bar\", which is unlikely but possible.\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else\n                {\n                    // Check for '=' sign (e.g., -f=bar, --foo=bar, -Dkey=value)\n                    int equalSign = arg.indexOf('=');\n\n                    if (equalSign != -1) // Argument contains '='\n                    {\n                        // Extract the part before '=' as the potential option name (stripped of hyphens)\n                        String optionName = Util.stripLeadingHyphens(arg.substring(0, equalSign)); // 'f', 'foo', 'Dproperty'\n                        String optionValue = arg.substring(equalSign + 1);      // 'bar', 'value'\n\n                        // If the part before '=' (e.g., \"f\", \"foo\") is a known option\n                        if (options.hasOption(optionName))\n                        {\n                            tokens.add(arg.substring(0, equalSign)); // Add the option part (e.g., \"-f\", \"--foo\")\n                            tokens.add(optionValue);                 // Add the value part (e.g., \"bar\")\n                        }\n                        // Handle the special \"-Dkey=value\" case according to rule 1:\n                        // where 'D' is an option, but 'Dkey' is not.\n                        // This applies to single-dash options with length > 2 (e.g., \"-D...\")\n                        else if (arg.startsWith(\"-\") && !arg.startsWith(\"--\") && arg.length() > 2)\n                        {\n                            String shortOptName = String.valueOf(arg.charAt(1)); // Extract 'D' from \"-Dkey=value\"\n                            if (options.hasOption(shortOptName)) // Check if 'D' is a known option\n                            {\n                                // This is a special property handling where the option is short (e.g., -D)\n                                // and the rest (e.g., 'key=value') is its value.\n                                tokens.add(arg.substring(0, 2)); // Add \"-D\"\n                                tokens.add(arg.substring(2));   // Add \"key=value\"\n                            }\n                            else\n                            {\n                                // Not a recognized option with '=', not a recognized D-type option.\n                                eatTheRest = stopAtNonOption;\n                                tokens.add(arg);\n                            }\n                        }\n                        else\n                        {\n                            // If it had '=', but the part before '=' isn't a recognized option,\n                            // and it's not a special short D-type option.\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    }\n                    else // Argument does not contain '=' (e.g., \"-f\", \"--foo\", \"-Dvalue\")\n                    {\n                        // This handles concatenated short options and their values, like '-Dvalue'.\n                        // Rule 1: \"If an Option exists for the first character of the arguments entry AND an Option does not exist for the whole argument\"\n                        // `options.hasOption(opt)` is already false (checked in the outer `else`).\n                        // Now, check if the first character after the hyphen is a known option.\n                        if (arg.length() > 1 && options.hasOption(String.valueOf(arg.charAt(1)))) // Checks if 'D' from \"-Dvalue\" is an option\n                        {\n                            tokens.add(arg.substring(0, 2)); // Add \"-D\"\n                            tokens.add(arg.substring(2));   // Add \"value\"\n                        }\n                        else\n                        {\n                            // If it's not a known option, and not a special concatenated value like -Dvalue\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    }\n                }\n            }\n            else // Argument does not start with '-' (i.e., it's a non-option argument)\n            {\n                tokens.add(arg);\n            }\n\n            // If eatTheRest flag is set, add all remaining arguments as non-options.\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}