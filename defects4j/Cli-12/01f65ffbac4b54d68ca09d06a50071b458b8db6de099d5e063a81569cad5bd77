{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            // handle --opt=val or -opt=val\n            int equalsIndex = arg.indexOf('=');\n            if (equalsIndex > 0)\n            {\n                String optName;\n                String optToken = arg.substring(0, equalsIndex);\n                String optValue = arg.substring(equalsIndex + 1);\n\n                // long option with '='\n                if (arg.startsWith(\"--\"))\n                {\n                    optName = arg.substring(2, equalsIndex);\n                    if (options.hasOption(optName))\n                    {\n                        tokens.add(optToken);\n                        tokens.add(optValue);\n                        continue;\n                    }\n                }\n                // single-dash option with '=' (short or single-dash long)\n                else\n                {\n                    optName = arg.substring(1, equalsIndex);\n                    if (options.hasOption(optName))\n                    {\n                        tokens.add(optToken);\n                        tokens.add(optValue);\n                        continue;\n                    }\n                }\n            }\n\n            String opt = Util.stripLeadingHyphens(arg);\n            if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else\n            {\n                // special properties-style handling (-Dproperty=value)\n                if (arg.length() > 1 && options.hasOption(arg.substring(0, 2)))\n                {\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}