{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else if (arg.contains(\"=\"))\n                {\n                    int equalsIndex = arg.indexOf('=');\n                    String optionPart = arg.substring(0, equalsIndex);\n                    String valuePart = arg.substring(equalsIndex + 1);\n                    String strippedOptionPart = Util.stripLeadingHyphens(optionPart);\n\n                    if (options.hasOption(strippedOptionPart))\n                    {\n                        Option option = options.getOption(strippedOptionPart);\n                        String fixedOption;\n                        if (option != null && strippedOptionPart.equals(option.getLongOpt()))\n                        {\n                            fixedOption = \"--\" + strippedOptionPart;\n                        }\n                        else\n                        {\n                            fixedOption = \"-\" + strippedOptionPart;\n                        }\n                        tokens.add(fixedOption);\n                        tokens.add(valuePart);\n                    }\n                    else\n                    {\n                        if (strippedOptionPart.length() > 0)\n                        {\n                            char firstChar = strippedOptionPart.charAt(0);\n                            if (options.hasOption(String.valueOf(firstChar)))\n                            {\n                                tokens.add(\"-\" + firstChar);\n                                String remaining = optionPart.substring(optionPart.indexOf(firstChar) + 1);\n                                if (!remaining.isEmpty() || !valuePart.isEmpty())\n                                {\n                                    tokens.add(remaining + (remaining.isEmpty() ? \"\" : \"=\") + valuePart);\n                                }\n                            }\n                            else if (optionPart.length() > 1 && options.hasOption(optionPart.substring(0, 2)))\n                            {\n                                tokens.add(optionPart.substring(0, 2));\n                                tokens.add(optionPart.substring(2) + \"=\" + valuePart);\n                            }\n                            else\n                            {\n                                tokens.add(arg);\n                            }\n                        }\n                        else\n                        {\n                            tokens.add(arg);\n                        }\n                    }\n                }\n                else\n                {\n                    if (arg.length() > 1 && options.hasOption(arg.substring(0, 2)))\n                    {\n                        tokens.add(arg.substring(0, 2));\n                        tokens.add(arg.substring(2));\n                    }\n                    else\n                    {\n                        String potentialShortOpt = opt.length() > 0 ? String.valueOf(opt.charAt(0)) : \"\";\n                        if (!potentialShortOpt.isEmpty() && options.hasOption(potentialShortOpt))\n                        {\n                            tokens.add(\"-\" + potentialShortOpt);\n                            String remaining = arg.substring(arg.indexOf(potentialShortOpt) + 1);\n                            if (!remaining.isEmpty())\n                            {\n                                tokens.add(remaining);\n                            }\n                        }\n                        else\n                        {\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}