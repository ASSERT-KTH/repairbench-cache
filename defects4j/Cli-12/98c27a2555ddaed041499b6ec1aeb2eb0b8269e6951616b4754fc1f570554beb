{
    "generation": "    /**\n     * <p>This flatten method does so using the following rules:\n     * <ol>\n     *  <li>If an {@link Option} exists for the first character of \n     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} \n     *  does not exist for the whole <code>argument</code> then\n     *  add the first character as an option to the processed tokens\n     *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n     *  <li>Otherwise, if it is a long option with an '=' char (e.g., \"--foo=bar\") \n     *  and an {@link Option} exists for the long option name, split the argument \n     *  into two tokens: the option and its value.</li>\n     *  <li>Otherwise just add the token to the processed tokens list.\n     *  </li>\n     * </ol>\n     * </p>\n     *\n     * @param options The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop \n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List<String> tokens = new ArrayList<>();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n                String[] parts = opt.split(\"=\");\n\n                if (parts.length > 1 && options.hasOption(parts[0]))\n                {\n                    tokens.add(\"--\" + parts[0]); // Add long option\n                    tokens.add(parts[1]); // Add value\n                }\n                else if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else if (opt.length() > 1 && options.hasOption(String.valueOf(opt.charAt(0))))\n                {\n                    if (opt.length() > 2 && options.hasOption(opt.substring(0, 2)))\n                    {\n                        tokens.add(\"-\" + opt.substring(0, 2));\n                        tokens.add(opt.substring(2));\n                    }\n                    else\n                    {\n                        tokens.add(\"-\" + opt.charAt(0));\n                        if (opt.length() > 1)\n                        {\n                            tokens.add(opt.substring(1));\n                        }\n                    }\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return tokens.toArray(new String[0]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}