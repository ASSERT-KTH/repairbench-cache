{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            String stripped = Util.stripLeadingHyphens(arg);\n            boolean found = false;\n\n            int equalsIndex = stripped.indexOf('=');\n            if (equalsIndex != -1) {\n                String potentialOpt = stripped.substring(0, equalsIndex);\n                if (options.hasOption(potentialOpt)) {\n                    int hyphens = arg.startsWith(\"--\") ? 2 : 1;\n                    String optPart = hyphens == 2 ? \"--\" + potentialOpt : \"-\" + potentialOpt;\n                    String valuePart = stripped.substring(equalsIndex + 1);\n                    tokens.add(optPart);\n                    tokens.add(valuePart);\n                    found = true;\n                } else {\n                    if (potentialOpt.length() > 0) {\n                        String firstChar = potentialOpt.substring(0, 1);\n                        if (options.hasOption(firstChar)) {\n                            int hyphens = arg.startsWith(\"--\") ? 2 : 1;\n                            String optPart = hyphens == 2 ? \"--\" + firstChar : \"-\" + firstChar;\n                            String valuePart = arg.substring(optPart.length() + 1); // +1 to skip '='\n                            tokens.add(optPart);\n                            tokens.add(valuePart);\n                            found = true;\n                        }\n                    }\n                }\n            }\n\n            if (!found) {\n                if (options.hasOption(stripped)) {\n                    tokens.add(arg);\n                    found = true;\n                } else {\n                    if (stripped.length() > 0) {\n                        String firstChar = stripped.substring(0, 1);\n                        if (options.hasOption(firstChar)) {\n                            int hyphens = arg.startsWith(\"--\") ? 2 : 1;\n                            String optPart = hyphens == 2 ? \"--\" + firstChar : \"-\" + firstChar;\n                            String remaining = arg.substring(optPart.length());\n                            tokens.add(optPart);\n                            tokens.add(remaining);\n                            found = true;\n                        }\n                    }\n                }\n            }\n\n            if (!found) {\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}