{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            int equalsIndex = opt.indexOf('=');\n            String optName = opt;\n            String optValue = null;\n\n            if (equalsIndex != -1)\n            {\n                optName = opt.substring(0, equalsIndex);\n                optValue = opt.substring(equalsIndex + 1);\n            }\n\n            if (options.hasOption(optName))\n            {\n                String prefix = arg.startsWith(\"--\") ? \"--\" : \"-\";\n                tokens.add(prefix + optName);\n                if (optValue != null && !optValue.isEmpty())\n                {\n                    tokens.add(optValue);\n                }\n            }\n            else\n            {\n                String prefix = arg.startsWith(\"--\") ? \"--\" : \"-\";\n                if (arg.length() > prefix.length() + 1 && options.hasOption(opt.substring(0, 1)))\n                {\n                    // e.g., \"-Dfoo=bar\" where D is an option\n                    tokens.add(prefix + opt.substring(0,1));\n                    String theRest = opt.substring(1);\n                    if (!theRest.isEmpty())\n                    {\n                        tokens.add(theRest);\n                    }\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}