{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List<String> tokens = new ArrayList<>();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            int eq = arg.indexOf('=');\n            if (eq != -1) {\n                // We have an argument of the form -X=foo, -long=foo, etc.\n                String candidate = arg.substring(0, eq);\n                // If the entire token (with its '=') is not a known option\n                // but the part before the '=' (when stripped of hyphens) is, then split.\n                if (!options.hasOption(Util.stripLeadingHyphens(arg)) &&\n                        options.hasOption(Util.stripLeadingHyphens(candidate))) {\n                    tokens.add(candidate);\n                    tokens.add(arg.substring(eq + 1));\n                } else if (arg.length() > 2 && options.hasOption(arg.substring(0, 2))) {\n                    // Special case (e.g. -Dproperty=value) where the option is only 2 characters.\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                } else {\n                    tokens.add(arg);\n                }\n            } else {\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt)) {\n                    tokens.add(arg);\n                } else if (arg.length() > 2 && options.hasOption(arg.substring(0, 2))) {\n                    // Special property options (e.g. -Dfoo) are split into the option and its argument\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                } else {\n                    tokens.add(arg);\n                }\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (++i; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n    }\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}