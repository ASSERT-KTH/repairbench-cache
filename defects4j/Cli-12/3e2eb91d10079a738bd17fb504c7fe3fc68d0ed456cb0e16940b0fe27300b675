{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            int equalSignIndex = arg.indexOf('=');\n\n            String opt = null;\n            String value = null;\n\n            if (equalSignIndex != -1)\n            {\n                opt = arg.substring(0, equalSignIndex);\n                value = arg.substring(equalSignIndex + 1);\n            }\n            else\n            {\n                opt = arg;\n            }\n\n            String strippedOpt = Util.stripLeadingHyphens(opt);\n\n            if (options.hasOption(strippedOpt))\n            {\n                tokens.add(opt);\n                if (value != null && value.length() > 0)\n                {\n                    tokens.add(value);\n                }\n            }\n            else\n            {\n                if (opt.startsWith(\"--\"))\n                {\n                    // handle long option with '=' sign which is not recognized\n                    tokens.add(opt);\n                    if (value != null && value.length() > 0)\n                    {\n                        tokens.add(value);\n                    }\n                }\n                else if (opt.startsWith(\"-\") && opt.length() > 2)\n                {\n                    String shortOpt = opt.substring(0, 2);\n                    String remainder = opt.substring(2);\n\n                    String strippedShortOpt = Util.stripLeadingHyphens(shortOpt);\n\n                    if (options.hasOption(strippedShortOpt))\n                    {\n                        tokens.add(shortOpt);\n                        String argValue = remainder;\n                        if (equalSignIndex != -1)\n                        {\n                            // e.g., -f=bar\n                            argValue = value;\n                        }\n                        else if (!remainder.isEmpty())\n                        {\n                            argValue = remainder;\n                        }\n                        else\n                        {\n                            argValue = null;\n                        }\n\n                        if (argValue != null && argValue.length() > 0)\n                        {\n                            tokens.add(argValue);\n                        }\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i = i +1; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}