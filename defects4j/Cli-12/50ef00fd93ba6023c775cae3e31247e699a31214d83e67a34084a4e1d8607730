{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List<String> tokens = new ArrayList<String>();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else\n            {\n                // check for options with equal sign\n                int equalSignPos = arg.indexOf('=');\n                if (equalSignPos > 0)\n                {\n                    String optionPart = arg.substring(0, equalSignPos);\n                    String valuePart = arg.substring(equalSignPos + 1);\n\n                    if (options.hasOption(Util.stripLeadingHyphens(optionPart)))\n                    {\n                        tokens.add(optionPart);\n                        tokens.add(valuePart);\n                        continue;\n                    }\n                }\n\n                if (arg.length() > 2 && arg.charAt(1) != '-')\n                {\n                    // handle case like -Dproperty=value\n                    if (options.hasOption(arg.substring(0, 2)))\n                    {\n                        tokens.add(arg.substring(0, 2));\n                        tokens.add(arg.substring(2));\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n                else if (arg.length() > 2 && arg.startsWith(\"--\"))\n                {\n                    // handle case like --foo=value\n                    int equalPos = arg.indexOf('=');\n                    if (equalPos > 0)\n                    {\n                        String option = arg.substring(0, equalPos);\n                        String value = arg.substring(equalPos + 1);\n                        if (options.hasOption(Util.stripLeadingHyphens(option)))\n                        {\n                            tokens.add(option);\n                            tokens.add(value);\n                            continue;\n                        }\n                    }\n                    tokens.add(arg);\n                }\n                else\n                {\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}