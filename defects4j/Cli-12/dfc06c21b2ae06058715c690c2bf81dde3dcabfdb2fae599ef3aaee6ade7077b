{
    "generation": "    /**\n     * <p>This flatten method does so using the following rules:\n     * <ol>\n     *  <li>If an {@link Option} exists for the first character of \n     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} \n     *  does not exist for the whole <code>argument</code> then\n     *  add the first character as an option to the processed tokens\n     *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n     *  <li>Otherwise just add the token to the processed tokens list.\n     *  </li>\n     * </ol>\n     * </p>\n     *\n     * @param options The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop \n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                // Find the index of the first '=' character\n                int equalSignIndex = arg.indexOf('=');\n\n                // Case 1: Argument contains an '=' and it's not immediately after the hyphen(s)\n                if (equalSignIndex != -1 && equalSignIndex > 0) // e.g., \"-f=bar\", \"--foo=bar\"\n                {\n                    // Extract the part before '=' as the potential option string (e.g., \"-f\", \"--foo\")\n                    String optionPart = arg.substring(0, equalSignIndex);\n                    // Extract the part after '=' as the value string (e.g., \"bar\", \"property=value\")\n                    String valuePart = arg.substring(equalSignIndex + 1);\n\n                    // Strip leading hyphens from the option part to check if it's a known option name\n                    String strippedOptionPart = Util.stripLeadingHyphens(optionPart);\n\n                    // If the stripped option part (e.g., \"f\", \"foo\", \"D\") is a registered option\n                    if (options.hasOption(strippedOptionPart))\n                    {\n                        // Add the option part with its original hyphens (e.g., \"-f\", \"--foo\", \"-D\")\n                        tokens.add(optionPart);\n                        // Add the value part\n                        tokens.add(valuePart);\n                    }\n                    else\n                    {\n                        // The part before '=' is not a known option. Treat the whole argument as unrecognized.\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n                else // Case 2: Argument does not contain an '=' or it's malformed (e.g., \"=foo\", \"-=foo\")\n                {\n                    // This is the original logic for options without equals, or the \"-D\" special case.\n                    String opt = Util.stripLeadingHyphens(arg); // e.g., \"f\", \"foo\", \"Dkey\"\n\n                    if (options.hasOption(opt)) // e.g., for \"-f\" or \"--foo\" where 'f'/'foo' is a defined option\n                    {\n                        tokens.add(arg);\n                    }\n                    else // The entire `opt` (e.g., \"Dkey\") is not a registered option.\n                    {\n                        // Apply the special rule for \"-D\" or similar cases where the first character forms an option,\n                        // and the rest is its value, without an explicit '='.\n                        // This corresponds to Rule 1 in the Javadoc.\n                        if (arg.length() > 1 && options.hasOption(arg.substring(0, 2)))\n                        {\n                            // Example: \"-Dproperty\" where 'D' is an option and 'property' is its value.\n                            tokens.add(arg.substring(0, 2)); // Add e.g., \"-D\"\n                            tokens.add(arg.substring(2));    // Add e.g., \"property\"\n                        }\n                        else\n                        {\n                            // Not a recognized option, not a special short-option-with-value case.\n                            // Treat as an unrecognized option or stop parsing if stopAtNonOption is true.\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    }\n                }\n            }\n            else // Argument does not start with a hyphen, so it's a regular argument.\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}