{
    "generation": "    /**\n     * <p>This flatten method does so using the following rules:\n     * <ol>\n     *  <li>If an {@link Option} exists for the first character of\n     *  the <code>arguments</code> entry <b>AND</b> an {@link Option}\n     *  does not exist for the whole <code>argument</code> then\n     *  add the first character as an option to the processed tokens\n     *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n     *  <li>Otherwise just add the token to the processed tokens list.\n     *  </li>\n     * </ol>\n     * </p>\n     *\n     * @param options The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop\n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List<String> tokens = new ArrayList<>(); // Use generics\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                int eqPos = arg.indexOf('=');\n\n                // Case 1: Argument contains '=', e.g., --opt=value, -o=value\n                if (eqPos != -1)\n                {\n                    String optionPart = arg.substring(0, eqPos); // e.g., --opt, -o\n                    String valuePart = arg.substring(eqPos + 1); // e.g., value\n\n                    // Check if the part before '=' is a known option (short, long, or gnu-style long)\n                    // options.hasOption() checks registered short/long/GNU-long opt names after stripping hyphens\n                    if (options.hasOption(optionPart))\n                    {\n                        tokens.add(optionPart);\n                        tokens.add(valuePart);\n                    }\n                    else // Unrecognized option before '='\n                    {\n                        // If stopAtNonOption is enabled, treat as non-option\n                        if (stopAtNonOption) {\n                            eatTheRest = true;\n                        }\n                        tokens.add(arg); // Add the original string unprocessed\n                    }\n                }\n                // Case 2: Argument does not contain '=', e.g., --opt, -o, -ovalue, -Dprop=value\n                else\n                {\n                    // Check if the whole argument is a known option (e.g., --verbose, -v)\n                    if (options.hasOption(arg))\n                    {\n                        tokens.add(arg);\n                    }\n                    // Check for short option with attached value: -fbar, -Dkey=value\n                    // Condition: single dash, length > 2 (more than just -X), starts with a known short opt\n                    else if (!arg.startsWith(\"--\") && arg.length() > 2 && options.hasOption(arg.substring(0, 2)))\n                    {\n                        // Need to ensure the whole arg is not also a registered option (e.g., -log vs -l)\n                        // If hasOption(arg) was false, we proceed to split.\n                        tokens.add(arg.substring(0, 2)); // Add the short option part like \"-f\" or \"-D\"\n                        tokens.add(arg.substring(2));    // Add the rest like \"bar\" or \"key=value\"\n                    }\n                    // Argument is not recognized as a known option or pattern\n                    else\n                    {\n                        // If stopAtNonOption is enabled, treat as non-option\n                        if (stopAtNonOption) {\n                             eatTheRest = true;\n                        }\n                        tokens.add(arg); // Add the original string unprocessed\n                    }\n                }\n            }\n            else // Argument does not start with \"-\", treat as value or stop processing\n            {\n                if (stopAtNonOption) {\n                    eatTheRest = true;\n                }\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                // Add all subsequent arguments unprocessed\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        // Convert List to String array\n        return tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}