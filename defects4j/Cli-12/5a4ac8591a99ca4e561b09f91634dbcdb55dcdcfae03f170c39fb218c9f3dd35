{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"--\"))\n        {\n            int equalIndex = arg.indexOf(\"=\");\n            if (equalIndex != -1)\n            {\n                String opt = arg.substring(2, equalIndex);\n                String optWithHyphens = arg.substring(0, equalIndex);\n                if (options.hasOption(opt) || options.hasOption(\"--\" + opt) || options.hasOption(optWithHyphens))\n                {\n                    tokens.add(\"--\" + opt);\n                    tokens.add(arg.substring(equalIndex + 1));\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else if (arg.startsWith(\"-\") && arg.length() > 2)\n        {\n            int equalIndex = arg.indexOf(\"=\");\n            if (equalIndex != -1)\n            {\n                String opt = arg.substring(1, equalIndex);\n                String optWithHyphens = arg.substring(0, equalIndex);\n                // e.g. -foo=bar or -f=bar\n                if (options.hasOption(opt) || options.hasOption(optWithHyphens))\n                {\n                    tokens.add(\"-\" + opt);\n                    tokens.add(arg.substring(equalIndex + 1));\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else if (options.hasOption(arg.substring(0, 2)))\n                {\n                    tokens.add(arg.substring(0, 2)); // -D\n                    tokens.add(arg.substring(2)); // property=value\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n            if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else\n            {\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}