{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"--\"))\n            {\n                int pos = arg.indexOf('=');\n                if (pos > 0)\n                {\n                    String opt = arg.substring(0, pos);\n                    String optPart = Util.stripLeadingHyphens(opt);\n                    if (options.hasOption(optPart))\n                    {\n                        tokens.add(opt);\n                        tokens.add(arg.substring(pos + 1));\n                        continue;\n                    }\n                }\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else\n                {\n                    // check if it's a combined option like -Dproperty=value\n                    int pos = arg.indexOf('=');\n                    if (pos > 0)\n                    {\n                        String optPart = arg.substring(0, pos);\n                        if (options.hasOption(Util.stripLeadingHyphens(optPart)))\n                        {\n                            tokens.add(arg.substring(0, pos));\n                            tokens.add(arg.substring(pos + 1));\n                            continue;\n                        }\n                    }\n\n                    // check for short options with attached values like -f=bar\n                    int end = arg.length();\n                    while (end > 1 && !options.hasOption(Util.stripLeadingHyphens(arg.substring(0, end))))\n                    {\n                        end--;\n                    }\n\n                    if (end < arg.length())\n                    {\n                        String option = arg.substring(0, end);\n                        String value = arg.substring(end);\n                        if (value.startsWith(\"=\")) {\n                            value = value.substring(1);\n                        }\n                        tokens.add(option);\n                        tokens.add(value);\n                    }\n                    else if (options.hasOption(arg.substring(0, 2)))\n                    {\n                        // the format is -foo=value\n                        tokens.add(arg.substring(0, 2)); // -D\n                        tokens.add(arg.substring(2)); // property=value\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}