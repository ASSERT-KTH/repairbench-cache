{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else\n            {\n                int equalsIndex = arg.indexOf('=');\n                if (equalsIndex != -1)\n                {\n                    String potentialOptPart = arg.substring(0, equalsIndex);\n                    String potentialOpt = Util.stripLeadingHyphens(potentialOptPart);\n                    if (options.hasOption(potentialOpt))\n                    {\n                        tokens.add(potentialOptPart);\n                        tokens.add(arg.substring(equalsIndex + 1));\n                        continue;\n                    }\n                }\n\n                if (opt.length() > 0 && options.hasOption(opt.substring(0, 1)))\n                {\n                    int hyphenCount = arg.startsWith(\"--\") ? 2 : 1;\n                    tokens.add(arg.substring(0, hyphenCount + 1));\n                    tokens.add(arg.substring(hyphenCount + 1));\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[0]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}