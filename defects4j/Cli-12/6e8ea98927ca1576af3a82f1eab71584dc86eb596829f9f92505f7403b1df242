{
    "generation": "    /**\n     * <p>This flatten method does so using the following rules:\n     * <ol>\n     *  <li>If an {@link Option} exists for the first character of \n     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} \n     *  does not exist for the whole <code>argument</code> then\n     *  add the first character as an option to the processed tokens\n     *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n     *  <li>Otherwise just add the token to the processed tokens list.\n     *  </li>\n     * </ol>\n     * </p>\n     *\n     * @param options The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop \n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt = Util.stripLeadingHyphens(arg); // e.g., \"foo=bar\", \"f=bar\", \"foo\", \"f\", \"Dproperty=value\"\n\n                // Check for options with attached values like `--foo=bar`, `-f=bar`, `-Dproperty=value`\n                int equalSignPos = opt.indexOf('='); \n\n                if (equalSignPos != -1) // If there is an '=' in the stripped part\n                {\n                    String optionName = opt.substring(0, equalSignPos);    // e.g., \"foo\", \"f\", \"D\"\n                    String optionValue = opt.substring(equalSignPos + 1); // e.g., \"bar\", \"property=value\"\n\n                    if (options.hasOption(optionName))\n                    {\n                        // The part before '=' is a known option.\n                        // Reconstruct the original hyphenated option part (e.g., \"--foo\", \"-f\", \"-D\")\n                        String originalOptionPrefix = arg.substring(0, arg.length() - opt.length());\n                        tokens.add(originalOptionPrefix + optionName); // Add the option part\n                        tokens.add(optionValue);                       // Add the value part\n                    }\n                    else\n                    {\n                        // The part before '=' is not a known option. Treat the whole argument as a single token.\n                        // This handles cases like `--unrecognized=value` or `-unrecognized=value`.\n                        // The GnuParser usually treats these as unrecognized options.\n                        tokens.add(arg);\n                        // Do not set eatTheRest here, as it's still a hyphenated argument, not a non-option.\n                        // If it were a truly unrecognized option, the GnuParser itself would throw UnrecognizedOptionException.\n                    }\n                }\n                else if (options.hasOption(opt)) // Original logic for standalone options like `--foo` or `-f`\n                {\n                    tokens.add(arg);\n                }\n                else // `opt` is not a known option, and no '=' was found in `opt`.\n                {\n                    // This handles cases like `-fvalue` (short option with attached value, no '=')\n                    // or `-Dkey` (property option where 'D' is the option and 'key' is the value).\n                    // This is based on Rule 1 in the Javadoc.\n                    if (arg.length() >= 2 && options.hasOption(Util.stripLeadingHyphens(arg.substring(0, 2))))\n                    {\n                        tokens.add(arg.substring(0, 2)); // Add the option part (e.g., \"-D\" or \"-f\")\n                        tokens.add(arg.substring(2));   // Add the remaining part as value (e.g., \"key\" or \"value\")\n                    }\n                    else\n                    {\n                        // Unrecognized option starting with hyphen, or other specific rule not matched.\n                        // In GnuParser, if `stopAtNonOption` is true, an unrecognized option (starting with -) will stop flattening.\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else // This means the argument does not start with a hyphen (e.g., \"file.txt\" or \"value\")\n            {\n                tokens.add(arg);\n                eatTheRest = stopAtNonOption; // This is a non-option, so stop flattening if `stopAtNonOption` is true.\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}