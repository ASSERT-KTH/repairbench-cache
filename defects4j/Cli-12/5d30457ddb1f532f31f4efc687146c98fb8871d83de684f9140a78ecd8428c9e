{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List<String> tokens = new ArrayList<String>();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            int equalSignIndex = arg.indexOf('=');\n            if (equalSignIndex != -1) {\n                // Split the token into the option part and its value.\n                String optPart = arg.substring(0, equalSignIndex);\n                String valuePart = arg.substring(equalSignIndex + 1);\n                String optStripped = Util.stripLeadingHyphens(optPart);\n                if (options.hasOption(optStripped)) {\n                    tokens.add(optPart);\n                    tokens.add(valuePart);\n                } else {\n                    tokens.add(arg);\n                }\n            } else {\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt)) {\n                    tokens.add(arg);\n                } else {\n                    // Handle the special property-like case (e.g. \"-Dproperty=value\")\n                    if (arg.length() > 2 && options.hasOption(arg.substring(0, 2))) {\n                        tokens.add(arg.substring(0, 2));\n                        tokens.add(arg.substring(2));\n                    } else {\n                        tokens.add(arg);\n                    }\n                }\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (++i; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}