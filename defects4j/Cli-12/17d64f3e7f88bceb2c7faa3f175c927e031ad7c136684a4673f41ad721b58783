{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List tokens = new ArrayList();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        // end of options marker\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(arg);\n\n        // single dash as argument\n        } else if (\"-\".equals(arg)) {\n            tokens.add(arg);\n\n        // potential option\n        } else if (arg.startsWith(\"-\")) {\n            // 1) handle inline equals: -f=bar, --foo=bar, -foo=bar\n            int eqPos = arg.indexOf('=');\n            if (eqPos > 0) {\n                String name    = arg.substring(0, eqPos);\n                String value   = arg.substring(eqPos + 1);\n                String optName = Util.stripLeadingHyphens(name);\n\n                if (options.hasOption(optName)) {\n                    // normalize long vs. short prefix\n                    String optionKey;\n                    if (name.startsWith(\"--\")) {\n                        optionKey = name;\n                    } else if (name.startsWith(\"-\") && optName.length() > 1) {\n                        // single-dash long option\n                        optionKey = \"--\" + optName;\n                    } else {\n                        // single-letter short option\n                        optionKey = name;\n                    }\n                    tokens.add(optionKey);\n                    tokens.add(value);\n                    // skip the rest of this loop; we've already consumed arg\n                    continue;\n                }\n            }\n\n            // 2) no inline '=', check if this is a known option\n            String stripped = Util.stripLeadingHyphens(arg);\n            if (options.hasOption(stripped)) {\n                // recognized option, leave as is\n                tokens.add(arg);\n\n            // 3) special single-letter option with attached value, e.g. -Dfoo or -fbar\n            } else if (arg.length() > 2 && options.hasOption(String.valueOf(arg.charAt(1)))) {\n                tokens.add(arg.substring(0, 2));  // e.g. \"-D\" or \"-f\"\n                tokens.add(arg.substring(2));     // the rest as argument\n\n            // 4) not an option\n            } else {\n                tokens.add(arg);\n                if (stopAtNonOption) {\n                    eatTheRest = true;\n                }\n            }\n\n        // plain argument\n        } else {\n            tokens.add(arg);\n        }\n\n        // if we've hit a non-option and we're supposed to stop,\n        // absorb all remaining tokens as arguments\n        if (eatTheRest) {\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}