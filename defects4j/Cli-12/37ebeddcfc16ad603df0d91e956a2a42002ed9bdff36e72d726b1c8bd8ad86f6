{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            int pos = arg.indexOf('=');\n            String opt;\n            if (pos != -1)\n            {\n                opt = Util.stripLeadingHyphens(arg.substring(0, pos));\n            }\n            else\n            {\n                opt = Util.stripLeadingHyphens(arg);\n            }\n\n            if (options.hasOption(opt))\n            {\n                if (pos != -1)\n                {\n                    tokens.add(arg.substring(0, pos));\n                    tokens.add(arg.substring(pos + 1));\n                }\n                else\n                {\n                    tokens.add(arg);\n                }\n            }\n            else\n            {\n                // special handling for -Dxxx=yyy or similar\n                if (arg.startsWith(\"--\"))\n                {\n                    String potentialOpt = null;\n                    String optPrefix = \"--\";\n                    int eqPos = arg.indexOf('=');\n                    if (eqPos != -1)\n                    {\n                        potentialOpt = arg.substring(2, eqPos);\n                        if (options.hasOption(potentialOpt))\n                        {\n                            tokens.add(arg.substring(0, eqPos));\n                            tokens.add(arg.substring(eqPos + 1));\n                            continue;\n                        }\n                    }\n                }\n                else if (arg.startsWith(\"-\"))\n                {\n                    String potentialOpt = null;\n                    String optPrefix = \"-\";\n                    int eqPos = arg.indexOf('=');\n                    if (eqPos != -1)\n                    {\n                        potentialOpt = arg.substring(1, eqPos);\n                        if (options.hasOption(potentialOpt))\n                        {\n                            tokens.add(arg.substring(0, eqPos));\n                            tokens.add(arg.substring(eqPos + 1));\n                            continue;\n                        }\n                    }\n                }\n\n                if (arg.length() > 2 && options.hasOption(arg.substring(0, 2)))\n                {\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}