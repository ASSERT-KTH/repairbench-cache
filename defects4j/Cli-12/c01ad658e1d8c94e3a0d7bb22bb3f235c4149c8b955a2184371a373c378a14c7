{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List tokens = new ArrayList();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(arg);\n        }\n        else if (\"-\".equals(arg)) {\n            tokens.add(arg);\n        }\n        else if (arg.startsWith(\"-\")) {\n            // split option and value on '=' if present\n            int eqIndex = arg.indexOf('=');\n            if (eqIndex > 0) {\n                String optPart = arg.substring(0, eqIndex);\n                String optName = Util.stripLeadingHyphens(optPart);\n                String optValue = arg.substring(eqIndex + 1);\n\n                if (options.hasOption(optName)) {\n                    // --foo=bar or -f=bar or -foo=bar\n                    tokens.add(optPart);\n                    tokens.add(optValue);\n                } else {\n                    // special single-character option, e.g. -Dproperty=value\n                    String shortOptPart = arg.substring(0, 2);\n                    String shortOptName = Util.stripLeadingHyphens(shortOptPart);\n                    if (options.hasOption(shortOptName)) {\n                        tokens.add(shortOptPart);\n                        tokens.add(arg.substring(2));\n                    } else {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else {\n                // no '=' in the token\n                String optName = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(optName)) {\n                    tokens.add(arg);\n                } else {\n                    // possible single-character option with trailing data, e.g. -Dproperty\n                    if (arg.length() > 2) {\n                        String shortOptPart = arg.substring(0, 2);\n                        String shortOptName = Util.stripLeadingHyphens(shortOptPart);\n                        if (options.hasOption(shortOptName)) {\n                            tokens.add(shortOptPart);\n                            tokens.add(arg.substring(2));\n                        } else {\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    } else {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n        }\n        else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (i = i + 1; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}