{
    "generation": "/**\n * <p>This flatten method does so using the following rules:\n * <ol>\n *  <li>If an {@link Option} exists for the first character of \n *  the <code>arguments</code> entry <b>AND</b> an {@link Option} \n *  does not exist for the whole <code>argument</code> then\n *  add the first character as an option to the processed tokens\n *  list e.g. \"-D\" and add the rest of the entry to the list.\n *  This is used to split assignments that are \u201cattached\u201d to the option.\n *  For example, \"-f=bar\" becomes two tokens: \"-f\" and \"bar\". Similarly,\n *  \"--foo=bar\" becomes \"--foo\" and \"bar\". For property-style options\n *  (e.g. \"-Dfoo=bar\"), if the complete string is not recognized but the \n *  first option letter is registered, then the option is split after the \n *  first two characters so that \"-Dfoo=bar\" becomes \"-D\" and \"foo=bar\".</li>\n *  <li>Otherwise just add the token to the processed tokens list.\n *  </li>\n * </ol>\n * </p>\n *\n * @param options The Options to parse the arguments by.\n * @param arguments The arguments that have to be flattened.\n * @param stopAtNonOption specifies whether to stop \n * flattening when a non option has been encountered\n * @return a String array of the flattened arguments\n */\nprotected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List<String> tokens = new ArrayList<>();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            // Check for an equals sign, which indicates an attached option argument.\n            int eqPos = arg.indexOf('=');\n            if (eqPos > 0) {\n                if (arg.startsWith(\"--\")) {\n                    // For arguments like \"--foo=bar\": extract \"foo\" and \"bar\".\n                    String optPart = arg.substring(2, eqPos);\n                    if (options.hasOption(optPart)) {\n                        tokens.add(\"--\" + optPart);\n                        tokens.add(arg.substring(eqPos + 1));\n                    } else {\n                        // Unrecognized option: possibly stop if desired.\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                } else {\n                    // For single-dash arguments.\n                    // candidate is the part after the dash up to the '='.\n                    String candidate = arg.substring(1, eqPos);\n                    if (options.hasOption(candidate)) {\n                        // e.g. \"-f=bar\" where option \"f\" (or equivalently \"foo\") is registered.\n                        tokens.add(arg.substring(0, eqPos));\n                        tokens.add(arg.substring(eqPos + 1));\n                    } else if (candidate.length() > 1 && options.hasOption(candidate.substring(0, 1))) {\n                        // Handle property style options such as \"-Dfoo=bar\":\n                        // If the full candidate (\"Dfoo\") is not recognized but the first letter (\"D\") is,\n                        // then split after the option letter.\n                        tokens.add(arg.substring(0, 2));\n                        tokens.add(arg.substring(2));\n                    } else {\n                        // Not a recognized option.\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            } else {\n                // No '=' present, just add the argument.\n                tokens.add(arg);\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            // Add every remaining argument as is.\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n    }\n\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}