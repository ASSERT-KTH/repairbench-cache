{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n\n                // Check if the argument contains an equals sign\n                int pos = arg.indexOf('=');\n                boolean hasEquals = pos > 0;\n\n                if (hasEquals)\n                {\n                    // The format is -foo=value or --foo=value\n                    String optionPart = pos == 1 ? arg.substring(0, 2) : arg.substring(0, pos);\n                    String valuePart = arg.substring(pos + 1);\n\n                    String optionStr = Util.stripLeadingHyphens(optionPart);\n                    if (options.hasOption(optionStr))\n                    {\n                        tokens.add(optionPart);\n                        tokens.add(valuePart);\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n                else if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else\n                {\n                    // Check if the first few characters (like -D) are an option\n                    if (arg.length() >= 2 && options.hasOption(arg.substring(0, 2)))\n                    {\n                        tokens.add(arg.substring(0, 2));\n                        tokens.add(arg.substring(2));\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arg);\n                if (stopAtNonOption)\n                {\n                    eatTheRest = true;\n                }\n            }\n\n            if (eatTheRest)\n            {\n                for (i = i + 1; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}