{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List<String> tokens = new ArrayList<>();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            tokens.add(\"--\");\n            eatTheRest = true;\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            // First: if the argument looks like a \u201cproperty option\u201d \n            // (e.g. \"-Dproperty=value\"), check if the first two characters\n            // form a known option.\n            if (arg.length() > 2 && options.hasOption(arg.substring(0, 2))) {\n                tokens.add(arg.substring(0, 2));       // e.g. \"-D\"\n                tokens.add(arg.substring(2));          // e.g. \"property=value\"\n            } else {\n                // Next: if the token contains an '=' then split it on the '='.\n                int eqIndex = arg.indexOf('=');\n                if (eqIndex != -1) {\n                    String optPart = arg.substring(0, eqIndex);\n                    String valuePart = arg.substring(eqIndex + 1);\n                    // Check if the part before '=' (after stripping any leading hyphens)\n                    // is a recognized option.\n                    if (options.hasOption(Util.stripLeadingHyphens(optPart))) {\n                        tokens.add(optPart);\n                        tokens.add(valuePart);\n                    } else {\n                        tokens.add(arg);\n                        if (stopAtNonOption) {\n                            eatTheRest = true;\n                        }\n                    }\n                } else {\n                    // Otherwise, check if the whole token (after stripping hyphens) is a valid option.\n                    String opt = Util.stripLeadingHyphens(arg);\n                    if (options.hasOption(opt)) {\n                        tokens.add(arg);\n                    } else {\n                        tokens.add(arg);\n                        if (stopAtNonOption) {\n                            eatTheRest = true;\n                        }\n                    }\n                }\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (++i; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n    }\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}