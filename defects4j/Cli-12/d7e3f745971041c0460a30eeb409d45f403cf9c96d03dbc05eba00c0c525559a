{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            // Handle --foo=bar or -foo=bar\n            int equalsIndex = arg.indexOf(\"=\");\n            if ((arg.startsWith(\"--\") && equalsIndex != -1) || (arg.startsWith(\"-\") && !arg.startsWith(\"--\") && equalsIndex != -1)) {\n                String optName = arg.substring(arg.startsWith(\"--\") ? 2 : 1, equalsIndex);\n                String optWithPrefix = arg.startsWith(\"--\") ? \"--\" + optName : \"-\" + optName;\n                String value = arg.substring(equalsIndex + 1);\n\n                if (options.hasOption(optName)) {\n                    tokens.add(optWithPrefix);\n                    tokens.add(value);\n                } else {\n                    // Unrecognized option, treat as is (previous fallback logic)\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            // Handle special case like -Dproperty=value\n            else if (arg.length() > 2 && !arg.startsWith(\"--\") && options.hasOption(arg.substring(1, 2)))\n            {\n                tokens.add(arg.substring(0, 2));\n                tokens.add(arg.substring(2));\n            }\n            else\n            {\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}