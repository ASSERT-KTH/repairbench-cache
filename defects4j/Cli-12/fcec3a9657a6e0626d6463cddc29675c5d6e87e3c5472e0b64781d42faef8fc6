{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n            int equalIndex = opt.indexOf('=');\n\n            if (equalIndex > 0) {\n                // handle option with equals sign (-f=bar or --foo=bar)\n                String optName = opt.substring(0, equalIndex);\n                String optValue = opt.substring(equalIndex + 1);\n                \n                if (options.hasOption(optName)) {\n                    // add the option name\n                    tokens.add(\"-\" + (arg.startsWith(\"--\") ? \"-\" : \"\") + optName);\n                    // add the value separately\n                    tokens.add(optValue);\n                }\n                else if (options.hasOption(opt.charAt(0) + \"\")) {\n                    // handle short option with value (-f=bar)\n                    tokens.add(\"-\" + opt.charAt(0));\n                    tokens.add(optValue);\n                }\n                else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else if (opt.length() > 0 && options.hasOption(opt.charAt(0) + \"\"))\n            {\n                // the format is a single character option followed by additional characters\n                // like -Dproperty=value\n                tokens.add(\"-\" + opt.charAt(0)); // -D\n                tokens.add(opt.substring(1)); // property=value\n            }\n            else\n            {\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}