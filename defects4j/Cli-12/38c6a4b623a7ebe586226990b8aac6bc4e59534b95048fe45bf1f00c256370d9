{
    "generation": "    /**\n     * <p>This flatten method does so using the following rules:\n     * <ol>\n     *  <li>If an {@link Option} exists for the first character of \n     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} \n     *  does not exist for the whole <code>argument</code> then\n     *  add the first character as an option to the processed tokens\n     *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n     *  <li>Otherwise just add the token to the processed tokens list.\n     *  </li>\n     * </ol>\n     * </p>\n     *\n     * @param options The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop \n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                int equalsPos = arg.indexOf('=');\n\n                // Case 1: Option with value using an equals sign, like --foo=bar or -f=bar\n                // This also handles cases like -Dproperty=value if 'D' is a registered option\n                // and the intent is to treat 'property=value' as its argument.\n                if (equalsPos != -1 && equalsPos < arg.length() - 1) // Ensure '=' exists and is not the last character (i.e., value is not empty)\n                {\n                    String optName = arg.substring(0, equalsPos); // e.g., \"-f\" or \"--foo\"\n                    String optValue = arg.substring(equalsPos + 1); // e.g., \"bar\"\n\n                    // Check if the part before '=' (stripped of leading hyphens) is a valid option.\n                    if (options.hasOption(Util.stripLeadingHyphens(optName)))\n                    {\n                        tokens.add(optName);   // Add \"-f\" or \"--foo\"\n                        tokens.add(optValue);  // Add \"bar\"\n                        continue; // Argument processed, move to the next one\n                    }\n                }\n\n                // If we reach here, it means either:\n                // 1. No '=' was found in the argument (e.g., \"-f\", \"--foo\", \"-Dkeyvalue\").\n                // 2. An '=' was found, but the part before '=' was NOT a recognized option (e.g., \"--unknown=value\").\n                // In these cases, we fall back to checking the entire argument (stripped of hyphens).\n\n                String strippedArg = Util.stripLeadingHyphens(arg);\n\n                // Check if the entire stripped argument is a known option (e.g., \"-f\", \"--foo\")\n                if (options.hasOption(strippedArg))\n                {\n                    tokens.add(arg);\n                }\n                else // Unrecognized option\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else // Argument does not start with '-' (it's a non-option argument)\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                // Add the remaining arguments directly to the tokens list\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}