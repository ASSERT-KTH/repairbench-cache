{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List<String> tokens = new ArrayList<String>();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n                int equalSignIndex = arg.indexOf('=');\n\n                // Check if the argument contains an equal sign\n                if (equalSignIndex != -1)\n                {\n                    String potentialOption = arg.substring(0, equalSignIndex);\n                    String potentialOptionName = Util.stripLeadingHyphens(potentialOption);\n\n                    // Check if the part before '=' is a valid option\n                    if (options.hasOption(potentialOptionName))\n                    {\n                        tokens.add(potentialOption);\n                        tokens.add(arg.substring(equalSignIndex + 1));\n                    }\n                    else\n                    {\n                        boolean hasOption = false;\n                        // Try to match the entire option (with leading hyphens removed)\n                        if (options.hasOption(opt))\n                        {\n                            tokens.add(arg);\n                            hasOption = true;\n                        }\n                        else\n                        {\n                            // Check for options like -Dproperty=value\n                            int endOfOptionIndex = 2; // Check first 2 characters (-D)\n                            if (arg.length() > endOfOptionIndex &&\n                                options.hasOption(arg.substring(1, endOfOptionIndex)))\n                            {\n                                tokens.add(arg.substring(0, endOfOptionIndex));\n                                tokens.add(arg.substring(endOfOptionIndex));\n                                hasOption = true;\n                            }\n                        }\n\n                        if (!hasOption && options.hasOption(arg.substring(0, 2)))\n                        {\n                            tokens.add(arg.substring(0, 2));\n                            tokens.add(arg.substring(2));\n                        }\n                        else if (!hasOption)\n                        {\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    }\n                }\n                else\n                {\n                    if (options.hasOption(opt))\n                    {\n                        tokens.add(arg);\n                    }\n                    else if (options.hasOption(arg.substring(0, 2)))\n                    {\n                        // Handle cases like -Dproperty=value (without equals)\n                        if (arg.length() > 2 && !arg.startsWith(\"--\"))\n                        {\n                            tokens.add(arg.substring(0, 2));\n                            tokens.add(arg.substring(2));\n                        }\n                        else\n                        {\n                            tokens.add(arg);\n                        }\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}