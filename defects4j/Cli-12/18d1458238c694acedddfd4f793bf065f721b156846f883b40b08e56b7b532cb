{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List tokens = new ArrayList();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\")) {\n            // 1) long options with '=': --foo=bar\n            if (arg.startsWith(\"--\")) {\n                int idx = arg.indexOf(\"=\");\n                if (idx > 2) {\n                    String optName = arg.substring(2, idx);\n                    if (options.hasOption(optName)) {\n                        tokens.add(arg.substring(0, idx));       // \"--foo\"\n                        tokens.add(arg.substring(idx + 1));      // \"bar\"\n                        continue;\n                    }\n                }\n            }\n            // 2) single-dash options (short or single-dash long) with '=': -f=bar or -foo=bar\n            else {\n                int idx = arg.indexOf(\"=\");\n                if (idx > 1) {\n                    String optName = arg.substring(1, idx);\n                    if (options.hasOption(optName)) {\n                        if (optName.length() > 1) {\n                            // treat as single-dash long => convert to \"--foo\"\n                            tokens.add(\"--\" + optName);\n                        } else {\n                            // short option \"-f\"\n                            tokens.add(arg.substring(0, idx));\n                        }\n                        tokens.add(arg.substring(idx + 1));\n                        continue;\n                    }\n                }\n            }\n\n            // fallback to original behavior\n            String opt = Util.stripLeadingHyphens(arg);\n            if (options.hasOption(opt)) {\n                tokens.add(arg);\n            }\n            else {\n                if (options.hasOption(arg.substring(0, 2))) {\n                    // special properties option, e.g. \"-Dproperty=value\"\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                }\n                else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}