{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else\n            {\n                int equalsIndex = arg.indexOf('=');\n                if (equalsIndex != -1)\n                {\n                    String optionPart = arg.substring(0, equalsIndex);\n                    String valuePart = arg.substring(equalsIndex + 1);\n                    String strippedOptionPart = Util.stripLeadingHyphens(optionPart);\n                    if (options.hasOption(strippedOptionPart))\n                    {\n                        Option option = options.getOption(strippedOptionPart);\n                        String correctedOption;\n                        if (option.getLongOpt() != null && option.getLongOpt().equals(strippedOptionPart)) {\n                            correctedOption = \"--\" + strippedOptionPart;\n                        } else {\n                            correctedOption = \"-\" + strippedOptionPart;\n                        }\n                        tokens.add(correctedOption);\n                        tokens.add(valuePart);\n                        continue;\n                    }\n                }\n\n                if (arg.length() >= 2 && options.hasOption(arg.substring(0, 2)))\n                {\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}