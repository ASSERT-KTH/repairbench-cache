{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            // when the parser sees the specific marker \"--\" then stop further processing\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            // First, see if this token contains an '='.\n            int eqPos = arg.indexOf('=');\n            if (eqPos > 0) {\n                // If the whole option (with its value) were defined, then leave it alone\u2026\n                String wholeOption = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(wholeOption)) {\n                    tokens.add(arg);\n                } else {\n                    // Otherwise, split the option/value.\n                    if (arg.startsWith(\"--\")) {\n                        // For a long option of the form \"--foo=bar\": candidate is \"foo\"\n                        String candidate = arg.substring(2, eqPos);\n                        if (options.hasOption(candidate)) {\n                            tokens.add(arg.substring(0, eqPos)); // e.g. \"--foo\"\n                            tokens.add(arg.substring(eqPos + 1));  // e.g. \"bar\"\n                        } else {\n                            tokens.add(arg);\n                        }\n                    } else {\n                        // For a single-dash option, the splitting can go two ways.\n                        // For a normal option like \"-f=bar\": candidate is \"f\"\n                        String candidate = arg.substring(1, eqPos);\n                        if (options.hasOption(candidate)) {\n                            tokens.add(arg.substring(0, eqPos)); // e.g. \"-f\"\n                            tokens.add(arg.substring(eqPos + 1));  // e.g. \"bar\"\n                        } \n                        // Otherwise, maybe it is a property option like \"-Dproperty=value\"\n                        else if (arg.length() > 1 && options.hasOption(arg.substring(1, 2))) {\n                            tokens.add(arg.substring(0, 2)); // e.g. \"-D\"\n                            tokens.add(arg.substring(2));    // e.g. \"property=value\"\n                        } else {\n                            tokens.add(arg);\n                        }\n                    }\n                }\n                // We are done processing this token (whether split or not).\n                continue;\n            } else {\n                // No '=' present. First try to see if the\n                // argument as a whole (with all dashes stripped) is a valid option.\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt)) {\n                    tokens.add(arg);\n                } \n                // Otherwise, if the first character makes a valid option (property style)\n                // then split the token into its first two characters and the rest.\n                else if (arg.length() > 2 && options.hasOption(arg.substring(1, 2))) {\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                } else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        // Once we hit a non-option (if stopAtNonOption is true), add the remainder unchanged.\n        if (eatTheRest) {\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}