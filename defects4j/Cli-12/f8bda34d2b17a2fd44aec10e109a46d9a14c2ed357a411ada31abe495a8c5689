{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List tokens = new ArrayList();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\")) {\n            // handle \"-opt=val\", \"--opt=val\" and \"-o=val\"\n            int eqPos = arg.indexOf('=');\n            if (eqPos > 1) {\n                String optPart = arg.substring(0, eqPos);\n                String optName = Util.stripLeadingHyphens(optPart);\n                if (options.hasOption(optName)) {\n                    tokens.add(optPart);\n                    tokens.add(arg.substring(eqPos + 1));\n                    continue;\n                }\n            }\n\n            String opt = Util.stripLeadingHyphens(arg);\n            if (options.hasOption(opt)) {\n                tokens.add(arg);\n            }\n            else {\n                // special case: \"-Dprop=val\" => \"-D\", \"prop=val\"\n                if (arg.length() > 2 && options.hasOption(arg.substring(0, 2))) {\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                }\n                else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}