{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            // Handle --foo=bar or -foo=bar or -f=bar\n            int equalPos = arg.indexOf('=');\n            if (equalPos != -1)\n            {\n                String optName = arg.substring(0, equalPos);\n                String value = arg.substring(equalPos + 1);\n\n                String stripped = Util.stripLeadingHyphens(optName);\n\n                Option option = options.getOption(stripped);\n                Option shortOption = null;\n                if (stripped.length() == 1) {\n                    shortOption = options.getOption(stripped);\n                }\n                // For --foo=bar\n                if (options.hasOption(stripped))\n                {\n                    tokens.add(optName);\n                    tokens.add(value);\n                }\n                // For -foo=bar, try matching long option\n                else if (optName.startsWith(\"--\") && options.getOption(stripped) != null)\n                {\n                    tokens.add(optName);\n                    tokens.add(value);\n                }\n                // For -foo=bar (single dash with longopt), or -f=bar (short opt)\n                else if (optName.startsWith(\"-\") && options.getOption(stripped) != null)\n                {\n                    tokens.add(optName);\n                    tokens.add(value);\n                }\n                else if (optName.length() == 2 && options.hasOption(optName.substring(1, 2)))\n                {\n                    // Single-char short option: -f=bar\n                    tokens.add(optName.substring(0, 2));\n                    tokens.add(value);\n                }\n                else if (optName.length() > 2 && options.hasOption(optName.substring(1)))\n                {\n                    // -foo=bar\n                    tokens.add(optName.substring(0, optName.length()));\n                    tokens.add(value);\n                }\n                else\n                {\n                    tokens.add(arg);\n                }\n            }\n            else if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else\n            {\n                if (arg.length() > 2 && options.hasOption(arg.substring(0, 2)))\n                {\n                    // the format is a special properties option (-Dproperty=value)\n                    tokens.add(arg.substring(0, 2)); // -D\n                    tokens.add(arg.substring(2));\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}