{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            // handle option=value for both short and long options\n            int eqIndex = arg.indexOf('=');\n            if (eqIndex > 0)\n            {\n                String opt = arg.substring(0, eqIndex);\n                String optName = Util.stripLeadingHyphens(opt);\n                if (options.hasOption(optName))\n                {\n                    tokens.add(opt);\n                    tokens.add(arg.substring(eqIndex + 1));\n                    continue;\n                }\n            }\n            // no '=' or unknown option before '=', fall back to normal logic\n            String optName = Util.stripLeadingHyphens(arg);\n            if (options.hasOption(optName))\n            {\n                tokens.add(arg);\n            }\n            else if (arg.length() > 2)\n            {\n                // attached argument to a single-character option, e.g. -fbar\n                String potential = arg.substring(0, 2);\n                String potentialName = Util.stripLeadingHyphens(potential);\n                if (options.hasOption(potentialName))\n                {\n                    tokens.add(potential);\n                    tokens.add(arg.substring(2));\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else\n            {\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i = i + 1; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n            break;\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}