{
    "generation": "    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List<String> tokens = new ArrayList<String>();\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"--\"))\n            {\n                // handle --option=value\n                int pos = arg.indexOf('=');\n                if (pos > 0)\n                {\n                    String opt = arg.substring(0, pos);\n                    String value = arg.substring(pos + 1);\n                    if (options.hasOption(opt.substring(2))) // Remove the two leading dashes\n                    {\n                        tokens.add(opt);\n                        tokens.add(value);\n                        continue;\n                    }\n                }\n                // normal handling if no equals or option not found\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else if (arg.contains(\"=\"))\n                {\n                    // Split the option and its value if separated by '='\n                    int pos = arg.indexOf('=');\n                    String optionPart = arg.substring(0, pos);\n                    String valuePart = arg.substring(pos + 1);\n\n                    if (options.hasOption(Util.stripLeadingHyphens(optionPart)))\n                    {\n                        tokens.add(optionPart);\n                        tokens.add(valuePart);\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                String opt = Util.stripLeadingHyphens(arg);\n\n                if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                }\n                else\n                {\n                    // Check if the argument contains an equals sign\n                    int pos = arg.indexOf('=');\n                    if (pos > 1) // At least -x=y\n                    {\n                        String optionPart = arg.substring(0, pos);\n                        String valuePart = arg.substring(pos + 1);\n\n                        // Check if the option part (without the leading hyphens) is a valid option\n                        String potentialOpt = Util.stripLeadingHyphens(optionPart);\n                        if (options.hasOption(potentialOpt) ||\n                            options.hasOption(optionPart.substring(1))) // Check both with and without leading hyphen\n                        {\n                            tokens.add(optionPart);\n                            tokens.add(valuePart);\n                        }\n                        else\n                        {\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    }\n                    else if (options.hasOption(arg.substring(0, 2)))\n                    {\n                        tokens.add(arg.substring(0, 2));\n                        tokens.add(arg.substring(2));\n                    }\n                    else\n                    {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            }\n            else\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}