{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List<String> tokens = new ArrayList<String>();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            /*\n             * First, if the argument contains an '=' sign, check whether the part\n             * before the '=' represents a valid option. If so, split the token so that\n             * the option and its value become separate tokens.\n             */\n            int eqIndex = arg.indexOf('=');\n            if (eqIndex > 0)\n            {\n                String candidateOption = arg.substring(0, eqIndex);\n                if (options.hasOption(Util.stripLeadingHyphens(candidateOption)))\n                {\n                    String candidateValue = arg.substring(eqIndex + 1);\n                    tokens.add(candidateOption);\n                    tokens.add(candidateValue);\n                    continue;\n                }\n            }\n\n            // Otherwise, check if the entire token (with hyphens stripped) is a recognized option.\n            String opt = Util.stripLeadingHyphens(arg);\n            if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else\n            {\n                /*\n                 * For cases like \"-Dproperty=value\", the long token isn't recognized.\n                 * Instead, try to see if the first two characters form a valid short option.\n                 * Note that for tokens like \"-f=bar\", the check in the '=' branch above will\n                 * have already succeeded.\n                 */\n                if (arg.length() > 2 && options.hasOption(Util.stripLeadingHyphens(arg.substring(0, 2))))\n                {\n                    tokens.add(arg.substring(0, 2));\n                    tokens.add(arg.substring(2));\n                }\n                else\n                {\n                    tokens.add(arg);\n                    if (stopAtNonOption)\n                    {\n                        eatTheRest = true;\n                    }\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n    return tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}