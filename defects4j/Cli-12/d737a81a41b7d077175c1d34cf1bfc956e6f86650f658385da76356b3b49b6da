{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List tokens = new ArrayList();\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        // once we're eating the rest, just add the args directly\n        if (eatTheRest) {\n            tokens.add(arg);\n            continue;\n        }\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(arg);\n        }\n        else if (\"-\".equals(arg)) {\n            tokens.add(arg);\n        }\n        else if (arg.startsWith(\"-\")) {\n            // split off \"--foo=bar\", \"-foo=bar\" or \"-f=bar\"\n            int idx = arg.indexOf('=');\n            if (idx != -1) {\n                String optPart = arg.substring(0, idx);\n                String optName = Util.stripLeadingHyphens(optPart);\n                if (options.hasOption(optName)) {\n                    tokens.add(optPart);\n                    tokens.add(arg.substring(idx + 1));\n                    continue;\n                }\n            }\n\n            String opt = Util.stripLeadingHyphens(arg);\n            if (options.hasOption(opt)) {\n                tokens.add(arg);\n            }\n            else if (arg.length() > 2\n                     && options.hasOption(Util.stripLeadingHyphens(arg.substring(0, 2)))) {\n                // special single\u2010char option with attached value, e.g. \"-Dprop=val\" or \"-fbar\"\n                tokens.add(arg.substring(0, 2));\n                tokens.add(arg.substring(2));\n            }\n            else {\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        }\n        else {\n            tokens.add(arg);\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}