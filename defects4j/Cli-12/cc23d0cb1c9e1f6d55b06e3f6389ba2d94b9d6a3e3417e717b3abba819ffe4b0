{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            // handle --long=value and -long=value forms\n            int equalsIndex = arg.indexOf('=');\n            if (equalsIndex != -1)\n            {\n                String prefix = arg.startsWith(\"--\") ? \"--\" : \"-\";\n                String name = arg.substring(prefix.length(), equalsIndex);\n                String value = arg.substring(equalsIndex + 1);\n\n                Option option = options.getOption(name);\n                if (option == null)\n                {\n                    // For short options with -x=value syntax\n                    if (prefix.length() == 1 && name.length() == 1)\n                    {\n                        option = options.getOption(name);\n                    }\n                }\n\n                if (option != null)\n                {\n                    tokens.add(prefix + name);\n                    tokens.add(value);\n                }\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            // handle specials (e.g., -Dproperty=value) with two char opt + stuff, e.g. -Dfoo=bar\n            else if (options.hasOption(arg.substring(0, 2)) && arg.length() > 2)\n            {\n                tokens.add(arg.substring(0, 2)); // -D\n                tokens.add(arg.substring(2)); // property=value\n            }\n            else if (options.hasOption(opt))\n            {\n                tokens.add(arg);\n            }\n            else\n            {\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}