{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"--\"))\n        {\n            int equalIndex = arg.indexOf('=');\n            if (equalIndex != -1) {\n                String opt = Util.stripLeadingHyphens(arg.substring(0, equalIndex));\n                if (options.hasOption(opt)) {\n                    tokens.add(arg.substring(0, equalIndex));\n                    tokens.add(arg.substring(equalIndex + 1));\n                } else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            } else {\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt)) {\n                    tokens.add(arg);\n                } else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else if (arg.startsWith(\"-\") && arg.length() > 1)\n        {\n            int equalIndex = arg.indexOf('=');\n            if (equalIndex != -1) {\n                String withoutEq = arg.substring(0, equalIndex);\n                String opt;\n                int dashCount = 0;\n                while (dashCount < withoutEq.length() && withoutEq.charAt(dashCount) == '-') {\n                    dashCount++;\n                }\n                opt = withoutEq.substring(dashCount);\n                if (options.hasOption(opt)) {\n                    tokens.add(withoutEq);\n                    tokens.add(arg.substring(equalIndex + 1));\n                } else {\n                    // Try single char: -f=bar (short option)\n                    if (withoutEq.length() == 2 && options.hasOption(opt.substring(opt.length() - 1))) {\n                        tokens.add(withoutEq);\n                        tokens.add(arg.substring(equalIndex + 1));\n                    } else if (dashCount == 1 && options.hasOption(arg.substring(1, 2))) {\n                        // For -Dproperty=value style\n                        tokens.add(arg.substring(0, 2));\n                        tokens.add(arg.substring(2));\n                    } else {\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n            } else if (arg.length() > 2 && options.hasOption(arg.substring(1, 2))) {\n                // For single dash, but more than one letter: -Dfoo\n                tokens.add(arg.substring(0, 2));\n                tokens.add(arg.substring(2));\n            } else {\n                String opt = Util.stripLeadingHyphens(arg);\n                if (options.hasOption(opt)) {\n                    tokens.add(arg);\n                } else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}