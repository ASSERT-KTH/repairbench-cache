{
    "generation": "    /**\n     * <p>This flatten method does so using the following rules:\n     * <ol>\n     *  <li>If an {@link Option} exists for the first character of \n     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} \n     *  does not exist for the whole <code>argument</code> then\n     *  add the first character as an option to the processed tokens\n     *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n     *  <li>Otherwise just add the token to the processed tokens list.\n     *  </li>\n     * </ol>\n     * </p>\n     *\n     * @param options The Options to parse the arguments by.\n     * @param arguments The arguments that have to be flattened.\n     * @param stopAtNonOption specifies whether to stop \n     * flattening when a non option has been encountered\n     * @return a String array of the flattened arguments\n     */\n    protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n    {\n        List tokens = new ArrayList();\n\n        boolean eatTheRest = false;\n\n        for (int i = 0; i < arguments.length; i++)\n        {\n            String arg = arguments[i];\n\n            if (\"--\".equals(arg))\n            {\n                eatTheRest = true;\n                tokens.add(\"--\");\n            }\n            else if (\"-\".equals(arg))\n            {\n                tokens.add(\"-\");\n            }\n            else if (arg.startsWith(\"-\"))\n            {\n                // Strip leading hyphens for option name lookup, but keep original 'arg' for splitting\n                String strippedArg = Util.stripLeadingHyphens(arg); \n\n                int equalSignPos = arg.indexOf('=');\n\n                // Case 1: Argument contains an equals sign (e.g., --foo=bar, -f=value, -Dkey=value)\n                if (equalSignPos != -1)\n                {\n                    String optionNamePart = arg.substring(0, equalSignPos); // e.g., \"--foo\", \"-f\", \"-D\"\n                    String optionValuePart = arg.substring(equalSignPos + 1); // e.g., \"bar\", \"value\", \"key=value\"\n\n                    // Check if the part before '=' (stripped of hyphens) is a known option.\n                    // This covers --longopt=value, -shortopt=value, and -Dkey=value if 'D' is a registered option.\n                    if (options.hasOption(Util.stripLeadingHyphens(optionNamePart)))\n                    {\n                        tokens.add(optionNamePart); // Add the option name part (e.g., \"--foo\", \"-f\", \"-D\")\n                        tokens.add(optionValuePart); // Add the value part (e.g., \"bar\", \"value\", \"key=value\")\n                    }\n                    else\n                    {\n                        // It has an '=', but the option part before '=' is not recognized.\n                        // Treat the whole argument as unrecognized.\n                        eatTheRest = stopAtNonOption;\n                        tokens.add(arg);\n                    }\n                }\n                // Case 2: Argument does not contain an equals sign, but is a direct option (e.g., -f, --foo)\n                else if (options.hasOption(strippedArg))\n                {\n                    tokens.add(arg);\n                }\n                // Case 3: Special GNU-like handling for options like \"-Dkey\" (rule 1 from Javadoc)\n                // \"If an Option exists for the first character of the arguments entry AND an Option does not exist for the whole argument\"\n                // Example: for \"-Dkey\", check if option 'D' exists AND \"Dkey\" is not a recognized option.\n                // If so, split into \"-D\" and \"key\".\n                else if (arg.length() > 1 && // Ensure there's a character after the initial hyphen (e.g., \"-D\")\n                         options.hasOption(String.valueOf(arg.charAt(1))) && // Check if the single character (e.g., 'D') is a registered option\n                         !options.hasOption(strippedArg)) // Ensure the whole stripped argument (e.g., \"Dkey\") is not a registered option itself\n                {\n                    tokens.add(arg.substring(0, 2)); // Add the first two characters (e.g., \"-D\")\n                    tokens.add(arg.substring(2));    // Add the rest (e.g., \"key\")\n                }\n                // Case 4: None of the above - Unrecognized option or a non-option (that might stop parsing)\n                else\n                {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n            else // Not starting with '-', so it's a non-option argument\n            {\n                tokens.add(arg);\n            }\n\n            if (eatTheRest)\n            {\n                // Add all remaining arguments as non-options.\n                for (i++; i < arguments.length; i++)\n                {\n                    tokens.add(arguments[i]);\n                }\n            }\n        }\n\n        return (String[]) tokens.toArray(new String[tokens.size()]);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}