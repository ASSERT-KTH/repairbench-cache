{
    "generation": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)\n{\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++)\n    {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg))\n        {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n        else if (\"-\".equals(arg))\n        {\n            tokens.add(\"-\");\n        }\n        else if (arg.startsWith(\"-\"))\n        {\n            boolean foundOption = false;\n            for (int j = 1; j <= arg.length(); j++)\n            {\n                String opt = arg.substring(0, j);\n                if (j < arg.length() && arg.charAt(j) == '=')\n                {\n                    opt = arg.substring(0, j);\n                    String value = arg.substring(j + 1);\n                    if (options.hasOption(opt))\n                    {\n                        tokens.add(opt);\n                        tokens.add(value);\n                        foundOption = true;\n                        break;\n                    }\n                }\n                else if (options.hasOption(opt))\n                {\n                    tokens.add(arg);\n                    foundOption = true;\n                    break;\n                }\n            }\n            if (!foundOption)\n            {\n                eatTheRest = stopAtNonOption;\n                tokens.add(arg);\n            }\n        }\n        else\n        {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest)\n        {\n            for (i++; i < arguments.length; i++)\n            {\n                tokens.add(arguments[i]);\n            }\n        }\n        tokens.removeAll(Collections.singleton(null));\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}