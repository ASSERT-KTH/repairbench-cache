{
    "generation": "    public Object handle(Invocation invocation) throws Throwable {\n        if (invocationContainerImpl.hasAnswersForStubbing()) {\n            // stubbing voids with stubVoid() or doAnswer() style\n            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress\n                            .getArgumentMatcherStorage(), invocation);\n            invocationContainerImpl.setMethodForStubbing(invocationMatcher);\n            return null;\n        }\n        VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n\n        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\n                        invocation);\n\n        mockingProgress.validateState();\n\n        //if verificationMode is not null then someone is doing verify()\n        if (verificationMode != null) {\n            // Check if the verification mode is for THIS mock\n            Object mockBeingVerified = null;\n            if (verificationMode instanceof MockAwareVerificationMode) {\n                 mockBeingVerified = ((MockAwareVerificationMode) verificationMode).getMock();\n            }\n\n            if (mockBeingVerified == invocation.getMock()) {\n                 // Verification is for this mock. Verify it.\n                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);\n                 verificationMode.verify(data);\n                 return null; // Verification handled, return\n            } else {\n                 // Verification is for a different mock.\n                 // This invocation is happening *during* verification of another mock (e.g., mock.foo() inside verify(mockTwo).bar(mock.foo()))\n                 // We need to put the verification mode back so the correct mock handler can process it later.\n                 mockingProgress.verificationStarted(verificationMode); // Put the mode back\n                 // Let this invocation proceed as a normal call (stubbing/default answer) by falling through.\n            }\n        }\n\n        invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\n        mockingProgress.reportOngoingStubbing(ongoingStubbing);\n\n        StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n\n        if (stubbedInvocation != null) {\n            stubbedInvocation.captureArgumentsFrom(invocation);\n            Object result = stubbedInvocation.answer(invocation);\n            // Reset potential stubbing info after answering (needed for spies/partial mocks)\n            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n            return result;\n        } else {\n            Object ret = mockSettings.getDefaultAnswer().answer(invocation);\n\n            // redo setting invocation for potential stubbing in case of partial\n            // mocks / spies.\n            // Without it, the real method inside 'when' might have delegated\n            // to other self method and overwrite the intended stubbed method\n            // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.\n            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n            return ret;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}