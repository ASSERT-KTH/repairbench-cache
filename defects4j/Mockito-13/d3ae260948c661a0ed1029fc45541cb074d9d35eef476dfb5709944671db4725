{
    "generation": "public Object handle(Invocation invocation) throws Throwable {\n    if (invocationContainerImpl.hasAnswersForStubbing()) {\n        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n        invocationContainerImpl.setMethodForStubbing(invocationMatcher);\n        return null;\n    }\n    VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n    VerificationMode currentVerificationMode = verificationMode;\n\n    InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation);\n\n    mockingProgress.validateState();\n\n    if (currentVerificationMode != null) {\n        if (currentVerificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) currentVerificationMode).getMock() == invocation.getMock()) {\n            VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            \n            currentVerificationMode.verify(data);\n            mockingProgress.pushVerificationMode(currentVerificationMode); // Re-push the verification mode\n            return null;\n        } else {\n            // Re-push the verification mode if it's not applicable for the current mock\n            mockingProgress.pushVerificationMode(currentVerificationMode); \n        }\n    }\n    \n    invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n    OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\n    mockingProgress.reportOngoingStubbing(ongoingStubbing);\n\n    StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n\n    if (stubbedInvocation != null) {\n        stubbedInvocation.captureArgumentsFrom(invocation);\n        return stubbedInvocation.answer(invocation);\n    } else {\n        Object ret = mockSettings.getDefaultAnswer().answer(invocation);\n        invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n        return ret;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}