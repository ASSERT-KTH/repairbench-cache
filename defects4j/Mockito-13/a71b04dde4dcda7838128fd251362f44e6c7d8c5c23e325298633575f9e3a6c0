{
    "generation": "public Object handle(Invocation invocation) throws Throwable {\n    if (invocationContainerImpl.hasAnswersForStubbing()) {\n        // stubbing voids with stubVoid() or doAnswer() style\n        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\n                mockingProgress.getArgumentMatcherStorage(), invocation);\n        invocationContainerImpl.setMethodForStubbing(invocationMatcher);\n        return null;\n    }\n\n    VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n    InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(\n            mockingProgress.getArgumentMatcherStorage(), invocation);\n\n    mockingProgress.validateState();\n\n    // if verificationMode is not null then someone is doing verify()\n    if (verificationMode != null) {\n        // We need to check if verification was started on the correct mock\n        // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n        if (verificationMode instanceof MockAwareVerificationMode\n                && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\n            VerificationDataImpl data =\n                    new VerificationDataImpl(invocationContainerImpl, invocationMatcher);\n            verificationMode.verify(data);\n            return null;\n        } else {\n            // this means there is an invocation on a different mock.\n            // Re-adding verification mode so it will be used by the next invocation\n            // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n            mockingProgress.verificationStarted(verificationMode);\n        }\n    }\n\n    invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n    OngoingStubbingImpl<T> ongoingStubbing =\n            new OngoingStubbingImpl<T>(invocationContainerImpl);\n    mockingProgress.reportOngoingStubbing(ongoingStubbing);\n\n    StubbedInvocationMatcher stubbedInvocation =\n            invocationContainerImpl.findAnswerFor(invocation);\n\n    if (stubbedInvocation != null) {\n        stubbedInvocation.captureArgumentsFrom(invocation);\n        return stubbedInvocation.answer(invocation);\n    } else {\n        Object ret = mockSettings.getDefaultAnswer().answer(invocation);\n\n        // redo setting invocation for potential stubbing in case of partial\n        // mocks / spies. Without it, the real method inside 'when' might have\n        // delegated to other self method and overwrite the intended stubbed\n        // method with a different one. The reset is required to avoid runtime\n        // exception that validates return type with stubbed method signature.\n        invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n        return ret;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}