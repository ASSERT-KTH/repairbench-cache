{
    "generation": "    public Object handle(Invocation invocation) throws Throwable {\n        if (invocationContainerImpl.hasAnswersForStubbing()) {\n            // stubbing voids with stubVoid() or doAnswer() style\n            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress\n                            .getArgumentMatcherStorage(), invocation);\n            invocationContainerImpl.setMethodForStubbing(invocationMatcher);\n            return null;\n        }\n        VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n\n        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\n                        invocation);\n\n        mockingProgress.validateState();\n\n        //if verificationMode is not null then someone is doing verify()\n        if (verificationMode != null) {\n            //We need to check if verification was started on the correct mock\n            // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n            boolean mockIsVerified = verificationMode instanceof MockAwareVerificationMode &&\n                                     ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock();\n\n            if (mockIsVerified) {\n                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);\n                verificationMode.verify(data);\n                return null;\n            } else {\n                // Invocation on a different mock detected during verification.\n                // Important: This invocation must be handled normally, answering precepts,\n                //            but without interfering with the ongoing verification process state.\n                //            Particularly, we must not report this invocation as potential stubbing.\n                // See VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n\n                // Handle invocation by finding the answer, without reporting ongoing stubbing\n                StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n                if (stubbedInvocation != null) {\n                    stubbedInvocation.captureArgumentsFrom(invocation);\n                    return stubbedInvocation.answer(invocation);\n                } else {\n                    // Use default answer, no state changes related to stubbing/verification\n                    return mockSettings.getDefaultAnswer().answer(invocation);\n                }\n                // End of handling invocation on different mock during verification.\n                // Do not fall through to the normal stubbing logic below.\n            }\n        }\n\n        // --- Normal invocation flow (not verification mode) ---\n\n        invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\n        mockingProgress.reportOngoingStubbing(ongoingStubbing);\n\n        StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n\n        if (stubbedInvocation != null) {\n            stubbedInvocation.captureArgumentsFrom(invocation);\n            return stubbedInvocation.answer(invocation);\n        } else {\n            Object ret = mockSettings.getDefaultAnswer().answer(invocation);\n\n            // redo setting invocation for potential stubbing in case of partial\n            // mocks / spies.\n            // Without it, the real method inside 'when' might have delegated\n            // to other self method and overwrite the intended stubbed method\n            // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.\n            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n            return ret;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}