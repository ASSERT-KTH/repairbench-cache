{
    "generation": "    public Object handle(Invocation invocation) throws Throwable {\n        if (invocationContainerImpl.hasAnswersForStubbing()) {\n            // stubbing voids with stubVoid() or doAnswer() style\n            InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress\n                            .getArgumentMatcherStorage(), invocation);\n            invocationContainerImpl.setMethodForStubbing(invocationMatcher);\n            return null;\n        }\n        VerificationMode verificationMode = mockingProgress.pullVerificationMode();\n\n        InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),\n                        invocation);\n\n        mockingProgress.validateState();\n\n        //if verificationMode is not null then someone is doing verify()\n        if (verificationMode != null) {\n            // Check if the verification mode is intended for the current mock.\n            boolean intendedForThisMock = false;\n            if (verificationMode instanceof MockAwareVerificationMode) {\n                MockAwareVerificationMode mockAwareMode = (MockAwareVerificationMode) verificationMode;\n                if (mockAwareMode.getMock() == invocation.getMock()) {\n                    intendedForThisMock = true;\n                }\n            }\n            // If not MockAwareVerificationMode, we ignore it (perhaps it's relevant in another context)\n            // or it applies regardless of the mock? The original code implies verification only happens\n            // if it's MockAware and the mock matches. Let's stick to that.\n\n            if (intendedForThisMock) {\n                // Correct mock and mode for verification\n                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);\n                verificationMode.verify(data);\n                return null; // Verification handled, return.\n            } else {\n                // It's an invocation on a different mock during verification.\n                // Re-register the verification mode, as it could be consumed by the invocation on the other mock.\n                // See VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n                mockingProgress.verificationStarted(verificationMode);\n                // Continue processing the invocation on this mock as a regular call.\n            }\n        }\n\n        invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);\n        mockingProgress.reportOngoingStubbing(ongoingStubbing);\n\n        StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);\n\n        if (stubbedInvocation != null) {\n            stubbedInvocation.captureArgumentsFrom(invocation);\n            return stubbedInvocation.answer(invocation);\n        } else {\n            Object ret = mockSettings.getDefaultAnswer().answer(invocation);\n\n            // redo setting invocation for potential stubbing in case of partial\n            // mocks / spies.\n            // Without it, the real method inside 'when' might have delegated\n            // to other self method and overwrite the intended stubbed method\n            // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.\n            invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);\n            return ret;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}