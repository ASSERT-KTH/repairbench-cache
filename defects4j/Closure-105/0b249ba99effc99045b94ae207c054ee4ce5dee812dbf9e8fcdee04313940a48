{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    boolean needsJoinString = false; // Flag to indicate if the next element should be preceded by joinString\n\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (needsJoinString) { // If there was a previous element (string or non-string), append joinString\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n        needsJoinString = true; // A string was processed, so the next element needs a join string\n      } else { // Not an immutable value (e.g., NAME, CALL, etc.)\n        if (sb.length() > 0) {\n          // Flush accumulated string literals\n          foldedSize += sb.length() + 2; // + 2 for the quotes.\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder(); // Reset sb\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n        needsJoinString = true; // A non-string was added, so the next element needs a join string.\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // No folding could actually be performed.\n        // This condition previously caused issues because the number of elements\n        // in arrayFoldedChildren might be less than arrayNode.getChildCount()\n        // due to folding, but still not just one element.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          // This check implies no actual folding occurred in terms of reducing\n          // the number of elements or merging strings.\n          // However, string values might still have been converted to their\n          // canonical string forms (e.g., 5 -> \"5\").\n          // If no element count reduction occurred, and no string value\n          // was changed, then it's not an optimization.\n          // The current logic handles the string transformation within sb,\n          // so this check is primarily for the cost comparison.\n          // If the cost is higher, it returns.\n        }\n\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}