{
    "generation": "  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    int foldedSize = 0;\n\n    // Process each element in the array\n    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        String elemValue = NodeUtil.getStringValue(elem);\n        if (arrayFoldedChildren.isEmpty() || arrayFoldedChildren.get(-1) instanceof Node) {\n          // Start a new string\n          foldedSize += elemValue.length();\n          arrayFoldedChildren.add(Node.newString(elemValue));\n        } else {\n          // Merge with the previous string\n          Node prevString = arrayFoldedChildren.get(-1);\n          String prevValue = prevString.getString();\n          String newValue = prevValue + joinString + elemValue;\n          arrayFoldedChildren.set(-1, Node.newString(newValue));\n          foldedSize += elemValue.length() + joinString.length();\n        }\n      } else {\n        // Cannot fold this element; retain it as-is\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n    }\n\n    // Calculate the total size considering commas\n    foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize >= originalSize) {\n      return;\n    }\n\n    // Replace the array literal with the folded children\n    arrayNode.detachChildren();\n    NodeUtil.pushNodes(arrayNode, arrayFoldedChildren);\n\n    t.getCompiler().reportCodeChange();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}