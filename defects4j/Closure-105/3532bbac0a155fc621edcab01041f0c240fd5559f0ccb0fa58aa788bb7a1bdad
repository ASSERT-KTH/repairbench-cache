{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n\n    boolean foundNonString = false;\n    // Merges runs of adjacent immutable values (including empty strings).\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n        foundNonString = true;\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        t.getCompiler().reportCodeChange();\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        t.getCompiler().reportCodeChange();\n        break;\n\n      default:\n        // No folding could actually be performed if the folded children\n        // match the original number of children and all were immutable values.\n        // In that case, we can fold (e.g. [1,2,3].join('') -> \"123\")\n        boolean allImmutable = true;\n        Node c = arrayNode.getFirstChild();\n        for (Node foldedNode : arrayFoldedChildren) {\n          if (c == null) {\n            allImmutable = false;\n            break;\n          }\n          if (!NodeUtil.isImmutableValue(c)) {\n            allImmutable = false;\n            break;\n          }\n          c = c.getNext();\n        }\n        if (allImmutable && arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          // All array elements were immutable values, so we can replace with single string.\n          StringBuilder sbs = new StringBuilder();\n          Node ec = arrayNode.getFirstChild();\n          boolean first = true;\n          while (ec != null) {\n            if (!first) sbs.append(joinString);\n            sbs.append(NodeUtil.getStringValue(ec));\n            first = false;\n            ec = ec.getNext();\n          }\n          Node folded = Node.newString(sbs.toString());\n          parent.replaceChild(n, folded);\n          t.getCompiler().reportCodeChange();\n          return;\n        }\n        // No folding could actually be performed otherwise.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        t.getCompiler().reportCodeChange();\n        break;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}