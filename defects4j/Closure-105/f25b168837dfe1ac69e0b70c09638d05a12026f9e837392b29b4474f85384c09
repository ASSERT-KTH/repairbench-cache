{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    // Ensure the structure is <array>.join(<separator>)\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    // Check if it's an array literal and the function is \"join\"\n    if (arrayNode.getToken() != Token.ARRAYLIT ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    // getStringValue returns \"null\" for null, \"undefined\" for undefined.\n    // Per JS spec, null separator is treated as \"null\", undefined is \",\".\n    // This optimization currently uses the string value, so join(null) becomes\n    // join(\"null\") and join(undefined) becomes join(\"undefined\").\n    // This differs from spec for undefined separator. Handling this precisely\n    // would require checking right for VOID token specifically.\n    // For now, proceed with the getStringValue result for the separator.\n    if (joinString == null) {\n       // Should not happen due to isImmutableValue check.\n       return;\n    }\n\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    Node elem = arrayNode.getFirstChild();\n    Node lastConstant = null; // Track node for position info for the combined string node\n\n    // Merges adjacent constant elements.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          // Append separator if this is not the first piece of the constant block\n          sb.append(joinString);\n        }\n        // Array.prototype.join treats null and undefined elements as empty strings.\n        if (!elem.isNull() && !elem.isVoid()) {\n          sb.append(NodeUtil.getStringValue(elem));\n        }\n        lastConstant = elem;\n      } else {\n        // Hit a non-constant element\n        if (sb.length() > 0) {\n          // Add the accumulated string literal node\n          Node newNode = Node.newString(sb.toString());\n          // Try to preserve position info. Use last constant node's info.\n          if (lastConstant != null) {\n            newNode.copyInformationFrom(lastConstant);\n          }\n          arrayFoldedChildren.add(newNode);\n          sb = new StringBuilder(); // Reset\n        }\n        arrayFoldedChildren.add(elem.cloneTree()); // Add clone of non-constant\n        lastConstant = null; // Reset\n      }\n      elem = elem.getNext();\n    }\n\n    // Add any remaining accumulated string node\n    if (sb.length() > 0) {\n      Node newNode = Node.newString(sb.toString());\n      // Try to preserve position info\n      if (lastConstant != null) {\n        newNode.copyInformationFrom(lastConstant);\n      }\n      arrayFoldedChildren.add(newNode);\n    }\n\n    // Check if the folding resulted in any change. If the result is identical\n    // to the original array literal's children, don't do anything.\n    // Exception: If the number of children is 1 and it's a string, we always fold.\n    if (arrayFoldedChildren.size() != 1 || !arrayFoldedChildren.get(0).isString()) {\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        boolean identical = true;\n        Node cur = arrayNode.getFirstChild();\n        for (Node folded : arrayFoldedChildren) {\n          // Simple check: if node instances differ, assume change.\n          // This works because non-constants are cloned and constants are replaced by new string nodes.\n          if (folded != cur) {\n            identical = false;\n            break;\n          }\n          cur = cur.getNext();\n        }\n        if (identical) {\n          return; // No change occurred.\n        }\n      }\n    }\n\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    int foldedSize = -1; // Calculated when needed\n\n    switch (arrayFoldedChildren.size()) {\n      case 0: // All elements folded to empty strings or original array was empty\n        Node emptyStringNode = Node.newString(\"\");\n        foldedSize = InlineCostEstimator.getCost(emptyStringNode);\n        // Prevent increase in code size, e.g. [].join() -> \"\" is fine.\n        if (foldedSize <= originalSize) {\n          emptyStringNode.copyInformationFromForTree(n);\n          parent.replaceChild(n, emptyStringNode);\n          t.getCompiler().reportCodeChange();\n        }\n        break; // Added break\n\n      case 1:\n        Node foldedNode = arrayFoldedChildren.get(0);\n        if (foldedNode.isString()) {\n          // Folded to a single string literal. Always replace.\n          // No size check, assuming the folded constant is simpler/better.\n          foldedNode.copyInformationFromForTree(n);\n          parent.replaceChild(n, foldedNode);\n          t.getCompiler().reportCodeChange();\n        } else {\n          // Single non-string element left e.g. [foo].join(',') -> \"\" + foo\n          // Coercion to string is implicit in join, explicit with \"\" + foo.\n          // Check if \"\" + foo is smaller than original join call.\n          Node replacement = new Node(Token.ADD, Node.newString(\"\"), foldedNode);\n          foldedSize = InlineCostEstimator.getCost(replacement);\n          if (foldedSize <= originalSize) {\n            replacement.copyInformationFromForTree(n);\n            parent.replaceChild(n, replacement);\n            t.getCompiler().reportCodeChange();\n          }\n        }\n        break; // Added break\n\n      default:\n        // Array partially folded. Modify the array node in place if smaller.\n\n        // Estimate cost of the new expression: [folded1, folded2, ...].join(right)\n        int kJoinOverhead = \"[].join()\".length(); // Rough estimate\n        int newArraySizeCost = 0;\n        for(Node node : arrayFoldedChildren) {\n            newArraySizeCost += InlineCostEstimator.getCost(node);\n        }\n        if (arrayFoldedChildren.size() > 1) {\n            newArraySizeCost += arrayFoldedChildren.size() -1; // Commas\n        }\n        foldedSize = newArraySizeCost + kJoinOverhead + InlineCostEstimator.getCost(right);\n\n        if (foldedSize <= originalSize) {\n            arrayNode.detachChildren();\n            for (Node node : arrayFoldedChildren) {\n              // Nodes in list are either new strings or clones. Safe to add directly.\n              arrayNode.addChildToBack(node);\n            }\n            // Propagate source info? Modifying in place might be okay.\n            n.copyInformationFromForTree(n); // Update source info on call node?\n            t.getCompiler().reportCodeChange();\n        }\n        break; // Added break\n    }\n    // Note: No general reportCodeChange() at the end anymore. It's reported in each case.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}