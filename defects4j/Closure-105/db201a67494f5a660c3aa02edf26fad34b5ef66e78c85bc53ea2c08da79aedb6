{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if (arrayNode.getType() != Token.ARRAYLIT ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  int foldedSize = 0;\n\n  // Instead of using sb.length() to decide whether we already added an element,\n  // we use an explicit flag so that even an empty string literal is counted.\n  StringBuilder groupBuilder = new StringBuilder();\n  boolean groupStarted = false; // indicates that we've started a contiguous group of constants\n\n  // Walk all elements in the array literal.\n  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (groupStarted) {\n        // For every constant after the first, add the join string.\n        groupBuilder.append(joinString);\n      } else {\n        groupStarted = true;\n      }\n      groupBuilder.append(NodeUtil.getStringValue(elem));\n    } else {\n      // Before processing a non-constant, flush any accumulated constant group.\n      if (groupStarted) {\n        foldedSize += groupBuilder.length() + 2; // add cost for quotes\n        arrayFoldedChildren.add(Node.newString(groupBuilder.toString()));\n        groupBuilder = new StringBuilder();\n        groupStarted = false;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n  }\n  // Flush any trailing group.\n  if (groupStarted) {\n    foldedSize += groupBuilder.length() + 2;\n    arrayFoldedChildren.add(Node.newString(groupBuilder.toString()));\n  }\n  // Charge one unit for each comma (between array children).\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      Node emptyStringNode = Node.newString(\"\");\n      parent.replaceChild(n, emptyStringNode);\n      break;\n    case 1:\n      // If the entire result folds to a single constant.\n      if (foldedSize > originalSize) {\n        return;\n      }\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // Coerce non-string constant to string literal.\n        Node replacement = new Node(Token.ADD, Node.newString(\"\"), foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      parent.replaceChild(n, foldedStringNode);\n      break;\n    default:\n      // When some, but not all, constant nodes got merged.\n      // Only perform the fold if there is an actual reduction of nodes.\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        return;\n      }\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += InlineCostEstimator.getCost(right);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      break;\n  }\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}