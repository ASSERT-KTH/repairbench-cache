{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    Node elem = arrayNode.getFirstChild();\n\n    boolean hadPreviousConstant = false; // Tracks if the previous element processed was a constant\n\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (hadPreviousConstant) { // If previous element was a constant, add joinString\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n        hadPreviousConstant = true;\n      } else { // Non-immutable value\n        if (hadPreviousConstant) { // We were accumulating a constant string segment\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder(); // Reset sb\n          hadPreviousConstant = false; // Reset flag as we broke the constant segment\n        }\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    // After loop, add any remaining accumulated string\n    if (hadPreviousConstant) {\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    int foldedSize; // Declare foldedSize here\n\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        foldedSize = InlineCostEstimator.getCost(emptyStringNode);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n          foldedSize = InlineCostEstimator.getCost(replacement);\n          foldedStringNode = replacement;\n        } else {\n          foldedSize = InlineCostEstimator.getCost(foldedStringNode);\n        }\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // No full folding could actually be performed, but adjacent constants were merged.\n        // The result will be a new array literal with merged constants,\n        // followed by a .join() call.\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize = kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right); // Cost of the separator node itself\n\n        // Cost of the array literal itself: '[' ']' and commas\n        foldedSize += 2; // For '[' and ']'\n        if (arrayFoldedChildren.size() > 0) {\n            foldedSize += (arrayFoldedChildren.size() - 1); // For commas between array elements in the literal\n        }\n        for (Node node : arrayFoldedChildren) {\n          foldedSize += InlineCostEstimator.getCost(node);\n        }\n\n        if (foldedSize > originalSize) {\n          return;\n        }\n        // If no elements were merged (i.e., the number of children in the new\n        // array is the same as the original), then no folding was performed.\n        // In this case, we don't want to replace the node, even if the cost\n        // calculation somehow indicates a win (e.g., due to different string\n        // quoting styles or internal compiler representation).\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return;\n        }\n\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}