{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n\n    // Consume nodes, merging adjacent string/immutable nodes,\n    // splitting at non-immutable elements, as per JavaScript .join()\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += Math.max(arrayFoldedChildren.size() - 1, 0);\n\n    int originalSize = InlineCostEstimator.getCost(n);\n\n    // (***** FIXED BEGIN *****)\n    // For optimal folding, merge adjacent immutable values and preserve runs of non-immutable values,\n    // so folding cases like ['', '', foo, ''].join(',') to [',', foo, ''].join(',')\n    // will work. The difference to original is that in the run of immutable elements, \n    // even empty '' elements, we build a concatenated string joined with the delimiter,\n    // and then only insert a non-immutable node or merged string node when switching groups.\n\n    // But the above already works as coded. The bug is that after merging, we compare size,\n    // but if foldedSize > originalSize, we fallback and return without changing node.\n    // The problem seen in the test is also that we count the overhead for \"[].join()\",\n    // but actually in the final output, if the result is a literal string, we can emit it directly \n    // and there is no .join overhead.\n    // The algorithm is mostly correct, but currently: for ['a', 'b', 'c'].join(',') -> [\"a,b,c\"].join(\",\")\n    // we should fold to 'a,b,c', not to an array + join if all elements are mergeable!\n\n    // So change: If all are merged into a single string, fold to string not array + .join().\n    // Similarly, always replace [arr].join(X) with the string if arrayFoldedChildren.size==1 and it is STRING node.\n\n    // (***** FIXED END *****)\n\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        t.getCompiler().reportCodeChange();\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        // Only fold if it's a STRING literal, or folding cost is no worse.\n        // But in modern Closure let's just allow folding to string always if it's a string node.\n        if (foldedStringNode.getType() == Token.STRING) {\n          parent.replaceChild(n, foldedStringNode);\n          t.getCompiler().reportCodeChange();\n        } else {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string (with \"\"+value)\n          if (foldedSize > originalSize) {\n            return;\n          }\n          arrayNode.detachChildren();\n          Node replacement = new Node(Token.ADD, Node.newString(\"\"), foldedStringNode);\n          parent.replaceChild(n, replacement);\n          t.getCompiler().reportCodeChange();\n        }\n        break;\n\n      default:\n        // If only string elements remain, merge them into a literal and replace.\n        boolean allStrings = true;\n        for (Node c : arrayFoldedChildren) {\n          if (c.getType() != Token.STRING) {\n            allStrings = false;\n            break;\n          }\n        }\n        // Join all string children and fold to a string if possible.\n        if (allStrings) {\n          // Reconstruct .join result.\n          StringBuilder mergedSb = new StringBuilder();\n          for (int i = 0; i < arrayFoldedChildren.size(); i++) {\n            if (i > 0) mergedSb.append(joinString);\n            mergedSb.append(arrayFoldedChildren.get(i).getString());\n          }\n          Node newStringNode = Node.newString(mergedSb.toString());\n          parent.replaceChild(n, newStringNode);\n          t.getCompiler().reportCodeChange();\n          break;\n        }\n\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        t.getCompiler().reportCodeChange();\n        break;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}