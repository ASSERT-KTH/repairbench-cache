{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  boolean first = true;\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (!first) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n    } else {\n      if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n      }\n      if (!first) {\n        foldedSize += joinString.length(); // account for delimiter\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    first = false;\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    // + 2 for the quotes.\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n  // + (N-1)*delimiter.length for string delimiters between nodes,\n  // except those broken by non-literals, covered above.\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      Node emptyStringNode = Node.newString(\"\");\n      parent.replaceChild(n, emptyStringNode);\n      break;\n\n    case 1:\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that\n        // it is coerced to a string.\n        Node replacement = new Node(Token.ADD,\n            Node.newString(\"\"), foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      parent.replaceChild(n, foldedStringNode);\n      break;\n\n    default:\n      // No folding could actually be performed, if no string merging occurred.\n      // The old (buggy) code checked if the number of children matches, but\n      // that's not enough: check if ANY merge-able string folding was done.\n      // Simple way: if every element is non-literal and we didn't merge, give up.\n      // If arrayFoldedChildren exactly matches original children order/content\n      // (all literals separate, no merges), do not fold.\n      int originalLiterals = 0;\n      int foldedLiterals = 0;\n      Node origElem = arrayNode.getFirstChild();\n      for (Node folded : arrayFoldedChildren) {\n        if (folded.getType() == Token.STRING) {\n          foldedLiterals++;\n        }\n      }\n      while (origElem != null) {\n        if (NodeUtil.isImmutableValue(origElem)) {\n          originalLiterals++;\n        }\n        origElem = origElem.getNext();\n      }\n      // If no actual merging done, just bail out (originalLiterals == foldedLiterals)\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount() &&\n          originalLiterals == foldedLiterals) {\n        return;\n      }\n      // Add the overhead for [].join() and the cost for the delimiter parameter value.\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += InlineCostEstimator.getCost(right);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      break;\n  }\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}