{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if (arrayNode.getType() != Token.ARRAYLIT ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n\n  // Build a new list of children by merging adjacent immutable values.\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int groupCount = 0;\n  int foldedSize = 0;\n\n  // 1) Group together immutable values.\n  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      // If this is not the first in the group, insert the joinString.\n      if (groupCount > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n      groupCount++;\n    } else {\n      // Flush any pending group.\n      if (groupCount > 0) {\n        String s = sb.toString();\n        arrayFoldedChildren.add(Node.newString(s));\n        // +2 for the quotes.\n        foldedSize += s.length() + 2;\n        sb = new StringBuilder();\n        groupCount = 0;\n      }\n      // Add the non-immutable element.\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n  }\n  // Flush the final group if any.\n  if (groupCount > 0) {\n    String s = sb.toString();\n    arrayFoldedChildren.add(Node.newString(s));\n    foldedSize += s.length() + 2;\n  }\n  // One cost unit per comma between elements.\n  foldedSize += Math.max(0, arrayFoldedChildren.size() - 1);\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      // No elements => always the empty string.\n      parent.replaceChild(n, Node.newString(\"\"));\n      break;\n\n    case 1:\n      // Exactly one element => we can remove the .join call entirely.\n      Node foldedNode = arrayFoldedChildren.get(0);\n      // Only apply if it's a win.\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      // If it's not already a string literal, force a string coercion.\n      if (foldedNode.getType() != Token.STRING) {\n        foldedNode = new Node(Token.ADD, Node.newString(\"\"), foldedNode);\n      }\n      parent.replaceChild(n, foldedNode);\n      break;\n\n    default:\n      // More than one element. If nothing was actually merged, bail.\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        return;\n      }\n      // Include the cost of \".join()\" and the argument.\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += InlineCostEstimator.getCost(right);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      // Rewrite the array literal to use the folded children.\n      arrayNode.detachChildren();\n      for (Node child : arrayFoldedChildren) {\n        arrayNode.addChildToBack(child);\n      }\n      break;\n  }\n\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}