{
    "generation": "void tryFoldStringJoin(\n    NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if (arrayNode.getType() != Token.ARRAYLIT\n      || !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int sbCount = 0;\n  int foldedSize = 0;\n\n  // Merge consecutive immutable values (including empty strings) into sb,\n  // tracking count separately so empty\u2010string elements still get flushed.\n  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sbCount > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n      sbCount++;\n    } else {\n      if (sbCount > 0) {\n        // +2 for the quotes around the new string literal\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n        sbCount = 0;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n  }\n  if (sbCount > 0) {\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n  // one for each comma\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      // [].join(...)  => \"\"\n      parent.replaceChild(n, Node.newString(\"\"));\n      break;\n\n    case 1:\n      // [ ... ].join(...) => single string/expr\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      // Ensure non\u2010STRING literals get coerced to string.\n      if (foldedStringNode.getType() != Token.STRING) {\n        foldedStringNode =\n            new Node(Token.ADD, Node.newString(\"\"), foldedStringNode);\n      }\n      parent.replaceChild(n, foldedStringNode);\n      break;\n\n    default:\n      // Partial fold: rebuild the array if something actually changed.\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        return;\n      }\n      // account for the cost of \".join()\" and the separator argument\n      foldedSize += \"[].join()\".length();\n      foldedSize += InlineCostEstimator.getCost(right);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      for (Node child : arrayFoldedChildren) {\n        arrayNode.addChildToBack(child);\n      }\n      break;\n  }\n\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}