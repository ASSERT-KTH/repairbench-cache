{
    "generation": "  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n\n    Node elem = arrayNode.getFirstChild();\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        String elemValue = NodeUtil.getStringValue(elem);\n        sb.append(elemValue);\n      } else {\n        if (sb.length() > 0) {\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    foldedSize = computeSize(arrayFoldedChildren, joinString);\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize > originalSize) {\n      return;\n    }\n\n    if (arrayFoldedChildren.isEmpty()) {\n      parent.replaceChild(n, Node.newString(\"\"));\n    } else if (arrayFoldedChildren.size() == 1) {\n      Node foldedStringNode = arrayFoldedChildren.get(0);\n      if (foldedStringNode.getType() != Token.STRING) {\n        foldedStringNode = new Node(Token.ADD, Node.newString(\"\"), foldedStringNode);\n      }\n      parent.replaceChild(n, foldedStringNode);\n    } else {\n      arrayNode.detachChildren();\n      for (Node foldedChild : arrayFoldedChildren) {\n        arrayNode.addChildToBack(foldedChild);\n      }\n    }\n\n    t.getCompiler().reportCodeChange();\n  }\n\n  private int computeSize(List<Node> foldedChildren, String joinString) {\n    int size = 0;\n    for (Node child : foldedChildren) {\n      if (child.getType() == Token.STRING) {\n        size += child.getString().length();\n      } else {\n        size += InlineCostEstimator.getCost(child);\n      }\n      if (!foldedChildren.get(foldedChildren.size() - 1).equals(child)) {\n        size += joinString.length();\n      }\n    }\n    return size;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}