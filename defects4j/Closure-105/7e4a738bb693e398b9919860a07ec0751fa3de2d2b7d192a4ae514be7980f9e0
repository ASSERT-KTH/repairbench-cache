{
    "generation": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if (arrayNode.getType() != Token.ARRAYLIT ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  // Save the original children in case we need to fall back.\n  List<Node> originalChildren = Lists.newArrayList();\n  for (Node c = arrayNode.getFirstChild(); c != null; c = c.getNext()) {\n    originalChildren.add(c);\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int sbEntries = 0;\n  int foldedSize = 0;\n\n  // Merge adjacent immutable values into sb.\n  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sbEntries > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n      sbEntries++;\n    } else {\n      if (sbEntries > 0) {\n        // Flush the sb as one string node.\n        foldedSize += sb.length() + 2; // +2 for the quotes\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb.setLength(0);\n        sbEntries = 0;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n  }\n  // Flush any trailing sb content.\n  if (sbEntries > 0) {\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n  // Account for commas between array elements.\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      // [] -> \"\"\n      parent.replaceChild(n, Node.newString(\"\"));\n      t.getCompiler().reportCodeChange();\n      return;\n\n    case 1:\n      // Single item: maybe fold to a string literal or \"\"+expr\n      Node foldedNode = arrayFoldedChildren.get(0);\n      if (foldedSize <= originalSize) {\n        // It's a win: replace the whole call with the literal or coerced node.\n        arrayNode.detachChildren();\n        if (foldedNode.getType() != Token.STRING) {\n          foldedNode = new Node(Token.ADD, Node.newString(\"\"), foldedNode);\n        }\n        parent.replaceChild(n, foldedNode);\n        t.getCompiler().reportCodeChange();\n      } else {\n        // Not a size win: restore the original array children (forces a rewrite\n        // so that the code is reprinted uniformly, e.g. with consistent quoting).\n        arrayNode.detachChildren();\n        for (Node orig : originalChildren) {\n          arrayNode.addChildToBack(orig);\n        }\n        t.getCompiler().reportCodeChange();\n      }\n      return;\n\n    default:\n      // Multiple items: only apply if we actually merged something.\n      boolean mergedSomething = arrayFoldedChildren.size()\n                                < originalChildren.size();\n      if (!mergedSomething) {\n        return;\n      }\n      // Add join() overhead and the cost of the join argument.\n      foldedSize += \"[].join()\".length();\n      foldedSize += InlineCostEstimator.getCost(right);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      // Rebuild the array literal with the folded children.\n      arrayNode.detachChildren();\n      for (Node c : arrayFoldedChildren) {\n        arrayNode.addChildToBack(c);\n      }\n      t.getCompiler().reportCodeChange();\n      return;\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}