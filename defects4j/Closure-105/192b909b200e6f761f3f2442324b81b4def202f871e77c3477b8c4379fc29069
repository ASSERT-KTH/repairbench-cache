{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if (arrayNode.getType() != Token.ARRAYLIT ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int sbCount = 0;\n  int foldedSize = 0;\n\n  Node elem = arrayNode.getFirstChild();\n  // Merge adjacent immutable values, even empty strings, honoring the join separator.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sbCount > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n      sbCount++;\n    } else {\n      if (sbCount > 0) {\n        // +2 for the quotes around the folded string literal.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb.setLength(0);\n        sbCount = 0;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    elem = elem.getNext();\n  }\n  if (sbCount > 0) {\n    // +2 for the quotes.\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n  // +1 cost for each comma between array elements.\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      // [].join(...) => \"\"\n      parent.replaceChild(n, Node.newString(\"\"));\n      break;\n    case 1:\n      // Only one element after folding => just that element (coerced to string if needed).\n      Node foldedNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      if (foldedNode.getType() != Token.STRING) {\n        // Coerce to string.\n        foldedNode = new Node(Token.ADD, Node.newString(\"\"), foldedNode);\n      }\n      parent.replaceChild(n, foldedNode);\n      break;\n    default:\n      // More than one element: rebuild the array literal if any constants merged.\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        // No actual folding happened.\n        return;\n      }\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += InlineCostEstimator.getCost(right);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      for (Node newChild : arrayFoldedChildren) {\n        arrayNode.addChildToBack(newChild);\n      }\n      break;\n  }\n\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}