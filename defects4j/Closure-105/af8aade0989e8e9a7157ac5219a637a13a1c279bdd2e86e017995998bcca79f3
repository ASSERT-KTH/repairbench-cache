{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n  // Only call this optimization when the property\u2010access style is used and\n  // the join argument is immutable.\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if (arrayNode.getType() != Token.ARRAYLIT ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  int originalSize = InlineCostEstimator.getCost(n);\n\n  // First check: is the entire array literal constant?\n  boolean allImmutable = true;\n  int numChildren = arrayNode.getChildCount();\n  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n    if (!NodeUtil.isImmutableValue(elem)) {\n      allImmutable = false;\n      break;\n    }\n  }\n\n  // Handle the special case where the entire array is constant.\n  if (allImmutable && numChildren > 0) {\n    // Build two candidate representations.\n    // Candidate A: Merge all constants into a single string.\n    StringBuilder mergedSb = new StringBuilder();\n    int individualCost = 0;  // Sum of normalized costs for each constant.\n    boolean first = true;\n    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n      String value = NodeUtil.getStringValue(elem);\n      // Assume constant cost is (length + 2) to account for the quotes.\n      individualCost += value.length() + 2;\n      if (first) {\n        mergedSb.append(value);\n        first = false;\n      } else {\n        mergedSb.append(joinString);\n        mergedSb.append(value);\n      }\n    }\n    int mergedCost = mergedSb.length() + 2;\n    // Candidate B: Use a list of normalized constants (each one rebuilt separately).\n    // In that case, the cost is the sum of the individual node costs plus a\n    // cost for each comma between nodes.\n    int separateCost = individualCost + (numChildren - 1);\n    // When we leave the join call intact (Candidate B) we must add the overhead\n    // for the call itself.\n    int kJoinOverhead = \"[].join()\".length();\n    int candidateBOverall = separateCost + kJoinOverhead + InlineCostEstimator.getCost(right);\n\n    // For 2-element arrays, we want to force merging.\n    boolean forceMerge = (numChildren <= 2);\n    // Now choose the candidate that yields less overall cost.\n    boolean useMergedCandidate;\n    int chosenCost;\n    if (forceMerge || mergedCost <= candidateBOverall) {\n      useMergedCandidate = true;\n      chosenCost = mergedCost;\n    } else {\n      useMergedCandidate = false;\n      chosenCost = candidateBOverall;\n    }\n\n    if (chosenCost > originalSize) {\n      return;\n    }\n\n    if (useMergedCandidate) {\n      // Replace the entire join call with the merged constant.\n      Node foldedStringNode = Node.newString(mergedSb.toString());\n      // If for some reason the node isn\u2019t a string literal, force string coercion.\n      if (foldedStringNode.getType() != Token.STRING) {\n        foldedStringNode = new Node(Token.ADD, Node.newString(\"\"), foldedStringNode);\n      }\n      parent.replaceChild(n, foldedStringNode);\n    } else {\n      // Candidate B: update the array literal with normalized constant nodes.\n      List<Node> newChildren = new ArrayList<>();\n      for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n        newChildren.add(Node.newString(NodeUtil.getStringValue(elem)));\n      }\n      arrayNode.detachChildren();\n      for (Node child : newChildren) {\n        arrayNode.addChildToBack(child);\n      }\n    }\n    t.getCompiler().reportCodeChange();\n    return;\n  }\n\n  // For mixed arrays (or an empty constant array) we try to fold consecutive constant parts.\n  List<Node> foldedChildren = new LinkedList<>();\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  // We'll gather consecutive immutable nodes in a block.\n  StringBuilder blockSb = null;\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (blockSb == null) {\n        blockSb = new StringBuilder();\n      }\n      // Append joinString between adjacent constants.\n      if (blockSb.length() != 0) {\n        blockSb.append(joinString);\n      }\n      blockSb.append(NodeUtil.getStringValue(elem));\n    } else {\n      // Flush any pending block of constants.\n      if (blockSb != null) {\n        foldedChildren.add(Node.newString(blockSb.toString()));\n        foldedSize += blockSb.length() + 2;\n        blockSb = null;\n      }\n      foldedChildren.add(elem);\n      foldedSize += InlineCostEstimator.getCost(elem);\n    }\n    elem = elem.getNext();\n  }\n  if (blockSb != null) {\n    foldedChildren.add(Node.newString(blockSb.toString()));\n    foldedSize += blockSb.length() + 2;\n  }\n  // Account for commas between children.\n  foldedSize += foldedChildren.size() - 1;\n\n  // If no folding occurred, nothing changes.\n  if (foldedChildren.size() == arrayNode.getChildCount()) {\n    return;\n  }\n\n  // For non-entirely-constant cases, the join call still remains.\n  int kJoinOverhead = \"[].join()\".length();\n  foldedSize += kJoinOverhead;\n  foldedSize += InlineCostEstimator.getCost(right);\n  if (foldedSize > originalSize) {\n    return;\n  }\n  arrayNode.detachChildren();\n  for (Node child : foldedChildren) {\n    arrayNode.addChildToBack(child);\n  }\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}