{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    boolean previousWasImmutable = false; // Flag to track if the immediately preceding element was immutable\n\n    Node elem = arrayNode.getFirstChild();\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (previousWasImmutable) { // If the previous element was also immutable, we need a join string\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n        previousWasImmutable = true; // This element was immutable\n      } else {\n        // Current element is not immutable. Flush sb if it has accumulated any string content.\n        if (previousWasImmutable) { // If there was a string segment ending here\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder(); // Reset StringBuilder\n        }\n        arrayFoldedChildren.add(elem); // Add the non-immutable node itself\n        previousWasImmutable = false; // This element was not immutable, breaking the string sequence\n      }\n      elem = elem.getNext();\n    }\n\n    // After loop, add any remaining accumulated string content from sb.\n    if (previousWasImmutable) { // If the last element processed was immutable, add its accumulated string\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    \n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        // Only replace if it's a cost win.\n        // Cost of \"\" is usually 2 (for quotes).\n        if (InlineCostEstimator.getCost(emptyStringNode) >= originalSize) {\n          return;\n        }\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        int costOfReplacement;\n\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, it must be coerced to a string\n          // via an ADD operation (e.g., \"\" + foo).\n          Node replacementCandidate = new Node(Token.ADD, Node.newString(\"\"), foldedStringNode);\n          costOfReplacement = InlineCostEstimator.getCost(replacementCandidate);\n          \n          // Only perform the replacement if it's a cost win.\n          if (costOfReplacement >= originalSize) {\n            return;\n          }\n          foldedStringNode = replacementCandidate; // Set the actual replacement node\n        } else {\n          // If it's already a string literal, calculate its cost.\n          // InlineCostEstimator.getCost for string literals already includes quotes.\n          costOfReplacement = InlineCostEstimator.getCost(foldedStringNode);\n          \n          // Only perform the replacement if it's a cost win.\n          if (costOfReplacement >= originalSize) {\n            return;\n          }\n        }\n        \n        arrayNode.detachChildren();\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // Partial folding. Reconstruct the array literal and the join call.\n        int foldedSize = 0;\n        // Sum the costs of the elements in the new array.\n        for (Node node : arrayFoldedChildren) {\n          foldedSize += InlineCostEstimator.getCost(node);\n        }\n\n        // Add overhead for the new array literal structure itself.\n        // (number of elements - 1) for commas.\n        foldedSize += arrayFoldedChildren.size() - 1;\n        // 2 for the array brackets [].\n        foldedSize += 2; \n\n        // Add overhead for the .join() call structure.\n        // \"[].join\".length() for the function name property access.\n        foldedSize += \"[].join\".length();\n        // 2 for the parentheses \"()\".\n        foldedSize += 2; \n\n        // Add cost of the join string argument.\n        foldedSize += InlineCostEstimator.getCost(right);\n\n        // Only perform the replacement if it's a cost win.\n        if (foldedSize >= originalSize) {\n          return;\n        }\n\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        // The original GETPROP and CALL nodes remain, their structure isn't changed here.\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}