{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  int foldedSize = 0;\n  String currentString = null;\n\n  Node elem = arrayNode.getFirstChild();\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      String elemStr = NodeUtil.getStringValue(elem);\n      if (currentString == null) {\n        currentString = elemStr;\n      } else {\n        currentString += joinString + elemStr;\n      }\n    } else {\n      if (currentString != null) {\n        arrayFoldedChildren.add(Node.newString(currentString));\n        foldedSize += currentString.length() + 2; // +2 for quotes\n        currentString = null;\n      }\n      arrayFoldedChildren.add(elem);\n      foldedSize += InlineCostEstimator.getCost(elem);\n    }\n    elem = elem.getNext();\n  }\n\n  if (currentString != null) {\n    arrayFoldedChildren.add(Node.newString(currentString));\n    foldedSize += currentString.length() + 2; // +2 for quotes\n  }\n\n  foldedSize += (arrayFoldedChildren.size() - 1); // one for each comma\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  if (foldedSize > originalSize) {\n    return;\n  }\n\n  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n    return;\n  }\n\n  arrayNode.detachChildren();\n  for (Node node : arrayFoldedChildren) {\n    arrayNode.addChildToBack(node);\n  }\n\n  parent.replaceChild(n, arrayNode);\n\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}