{
    "generation": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if (arrayNode.getType() != Token.ARRAYLIT ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  // Remember the original children in case we need to fall back.\n  List<Node> originalChildren = Lists.newLinkedList();\n  for (Node c = arrayNode.getFirstChild(); c != null; c = c.getNext()) {\n    originalChildren.add(c);\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n  int groupCount = 0;\n\n  // Merge consecutive immutable values into sb, inserting joinString between them.\n  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (groupCount > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n      groupCount++;\n    } else {\n      if (groupCount > 0) {\n        foldedSize += sb.length() + 2;  // +2 for the quotes\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n        groupCount = 0;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n  }\n  if (groupCount > 0) {\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n  // One cost unit per comma.\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      // [] -> \"\"\n      parent.replaceChild(n, Node.newString(\"\"));\n      break;\n\n    case 1:\n      // Single element: try to collapse entirely.\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        // Too big to collapse into a literal.  If the original array was all\n        // immutable and had more than one element, fall back to rebuilding\n        // the array with fresh string literals (so we at least normalize quotes).\n        if (originalChildren.size() > 1) {\n          arrayNode.detachChildren();\n          for (Node orig : originalChildren) {\n            if (NodeUtil.isImmutableValue(orig)) {\n              arrayNode.addChildToBack(\n                  Node.newString(NodeUtil.getStringValue(orig)));\n            } else {\n              arrayNode.addChildToBack(orig);\n            }\n          }\n          break;\n        }\n        // Otherwise bail out with no change.\n        return;\n      }\n      // It is cheaper to collapse to a single literal.\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        foldedStringNode = new Node(\n            Token.ADD, Node.newString(\"\"), foldedStringNode);\n      }\n      parent.replaceChild(n, foldedStringNode);\n      break;\n\n    default:\n      // Partial folding: rebuild the array if anything changed.\n      if (arrayFoldedChildren.size() == originalChildren.size()) {\n        return;\n      }\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead + InlineCostEstimator.getCost(right);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      for (Node ch : arrayFoldedChildren) {\n        arrayNode.addChildToBack(ch);\n      }\n      break;\n  }\n\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}