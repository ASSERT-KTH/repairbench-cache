{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n\n    boolean atLeastOneNonString = false;\n\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        String v = NodeUtil.getStringValue(elem);\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(v);\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n        atLeastOneNonString = true;\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        // Only fold deeply if it's a string literal, or\n        // if it's a size reduction.\n        if (foldedStringNode.getType() == Token.STRING ||\n            foldedSize <= originalSize) {\n          arrayNode.detachChildren();\n          if (foldedStringNode.getType() != Token.STRING) {\n            // If the Node is not a string literal, ensure that\n            // it is coerced to a string.\n            Node replacement = new Node(Token.ADD,\n                Node.newString(\"\"), foldedStringNode);\n            foldedStringNode = replacement;\n          }\n          parent.replaceChild(n, foldedStringNode);\n        }\n        break;\n\n      default:\n        // Don't fold at all if nothing could be folded.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount())\n          return;\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n\n        // Only fold if it's a size win. However, if there are no non-string elements,\n        // then it's always safe to replace it by the string literal.\n        boolean canFold = (!atLeastOneNonString) || (foldedSize <= originalSize);\n\n        if (!canFold) {\n          return;\n        }\n\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n\n        // If after folding, only a single element remains (all strings), we can return\n        // the string literal directly.\n        if (arrayFoldedChildren.size() == 1 && !atLeastOneNonString) {\n          Node single = arrayFoldedChildren.get(0);\n          parent.replaceChild(n, single);\n        }\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}