{
    "generation": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if (arrayNode.getType() != Token.ARRAYLIT ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  boolean sawImmutable = false;\n  int foldedSize = 0;\n\n  // Merge adjacent immutable values into one string builder\n  for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sawImmutable) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n      sawImmutable = true;\n    } else {\n      if (sawImmutable) {\n        // +2 for the quotes around the folded literal\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n        sawImmutable = false;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n  }\n  if (sawImmutable) {\n    // Flush any remaining immutable sequence\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n\n  // Account for the commas between array elements\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      // [].join(...) -> \"\"\n      parent.replaceChild(n, Node.newString(\"\"));\n      break;\n\n    case 1:\n      // Single element -> string or +\"\" coercion\n      Node folded = arrayFoldedChildren.get(0);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      if (folded.getType() != Token.STRING) {\n        folded = new Node(Token.ADD, Node.newString(\"\"), folded);\n      }\n      parent.replaceChild(n, folded);\n      break;\n\n    default:\n      // Mixed nodes or multiple literals\n      // If we didn't actually fold anything, bail.\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        return;\n      }\n      // Include the cost of the join call overhead\n      foldedSize += \"[].join()\".length();\n      foldedSize += InlineCostEstimator.getCost(right);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      for (Node newChild : arrayFoldedChildren) {\n        arrayNode.addChildToBack(newChild);\n      }\n      break;\n  }\n\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}