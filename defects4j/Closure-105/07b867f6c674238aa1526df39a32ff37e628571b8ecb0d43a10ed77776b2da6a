{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    int joinLength = joinString.length();\n    \n    if (joinLength == 0) {\n      return;\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isString(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(elem.getString());\n        foldedSize += elem.getString().length();\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes.\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        Node coercion;\n        // Ensure that non-strings are properly coerced to strings.\n        if (elem.getType() == Token.NUMBER ||\n            elem.getType() == Token.BOOLEAN) {\n          coercion = elem;\n        } else {\n          coercion = new Node(Token.ADD, Node.newString(\"\"), elem);\n        }\n        arrayFoldedChildren.add(coercion);\n        foldedSize += InlineCostEstimator.getCost(coercion);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n      foldedSize += sb.length();\n    }\n    // Account for the join strings between elements.\n    foldedSize += (arrayFoldedChildren.size() - 1) * joinLength;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize > originalSize) {\n      return;\n    }\n\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.get(0);\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}