{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  // Instead of relying on sb.length(), we track whether we are in a\n  // group of adjacent literal nodes and use a flag to know if this is the first literal.\n  boolean inLiteralGroup = false;\n  StringBuilder sb = new StringBuilder();\n  boolean firstInGroup = true;\n\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      // Start a new literal group if needed.\n      if (!inLiteralGroup) {\n        inLiteralGroup = true;\n        sb = new StringBuilder();\n        firstInGroup = true;\n      } else {\n        // For later literals in the same group, always insert the join string.\n        if (!firstInGroup) {\n          sb.append(joinString);\n        }\n      }\n      // Append the literal even if it is the empty string.\n      sb.append(NodeUtil.getStringValue(elem));\n      firstInGroup = false;\n    } else {\n      // Flush any accumulated literal even if it is empty.\n      if (inLiteralGroup) {\n        String literal = sb.toString();\n        foldedSize += literal.length() + 2; // account for quotes\n        arrayFoldedChildren.add(Node.newString(literal));\n        inLiteralGroup = false;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    elem = elem.getNext();\n  }\n  // Flush any remaining literal group.\n  if (inLiteralGroup) {\n    String literal = sb.toString();\n    foldedSize += literal.length() + 2;\n    arrayFoldedChildren.add(Node.newString(literal));\n  }\n  // Account for commas between array literal children.\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      Node emptyStringNode = Node.newString(\"\");\n      parent.replaceChild(n, emptyStringNode);\n      break;\n\n    case 1:\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      // Do not fold if the new cost is higher.\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // Coerce to a string literal.\n        Node replacement = new Node(Token.ADD,\n            Node.newString(\"\"), foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      parent.replaceChild(n, foldedStringNode);\n      break;\n\n    default:\n      // If no folding occurred (i.e. nothing was merged), keep the original tree.\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        return;\n      }\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += InlineCostEstimator.getCost(right);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      break;\n  }\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}