{
    "generation": "  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if (arrayNode.getType() != Token.ARRAYLIT ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Track the number of joined elements.\n    int numElements = 0;\n    \n    while (elem != null) {\n      numElements++;\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    \n    // The cost of the separator joins, which is (numElements - 1) * (joinString.length()), \n    // since each join adds the separator once\n    foldedSize += (numElements - 1) * joinString.length();\n    \n    int originalSize = InlineCostEstimator.getCost(n);\n    boolean isSizeWin = foldedSize <= originalSize;\n\n    if (arrayFoldedChildren.isEmpty()) {\n      parent.replaceChild(n, Node.newString(\"\"));\n    } else if (arrayFoldedChildren.size() == 1) {\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedStringNode.getType() != Token.STRING) {\n        Node replacement = new Node(Token.ADD,\n            Node.newString(\"\"), foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      parent.replaceChild(n, foldedStringNode);\n    } else if (isSizeWin) {\n      arrayNode.detachChildren();\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      parent.replaceChild(n, arrayNode);\n    }\n    if (isSizeWin) {\n      t.getCompiler().reportCodeChange();\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}