{
    "generation": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      if (sb.length() > 0) {\n        sb.append(joinString);\n      }\n      sb.append(NodeUtil.getStringValue(elem));\n    } else {\n      if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    // + 2 for the quotes.\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n  // one for each comma.\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      Node emptyStringNode = Node.newString(\"\");\n      parent.replaceChild(n, emptyStringNode);\n      break;\n\n    case 1:\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that\n        // it is coerced to a string.\n        Node replacement = new Node(Token.ADD,\n            Node.newString(\"\"), foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      parent.replaceChild(n, foldedStringNode);\n      break;\n\n    default:\n      // If any folding was performed (i.e., the folded list has fewer nodes), fold\n      boolean didFold = (arrayFoldedChildren.size() < arrayNode.getChildCount());\n\n      boolean gainByFullyFolding = didFold && (foldedSize <= originalSize);\n      boolean trivialCommaReduction = !didFold && !joinString.isEmpty();\n\n      // Special case: merge leading/trailing/multiple empty string elements\n      // turned into separators (empty string stringified to \"\").\n      // We want to enable folding like ['', '', foo].join(',')\n      // to [',', foo].join(','), even if it isn't a size win,\n      // but only for join strings with reasonable length (1?).\n      //\n      // So, if the only folds happening are zero-length literal merges that\n      // become joinString concatenations, accept that by default if joinString.length==1\n      if (!gainByFullyFolding && didFold &&\n          joinString.length() == 1) {\n        gainByFullyFolding = true;\n      }\n\n      if (!gainByFullyFolding) {\n        return;\n      }\n\n      arrayNode.detachChildren();\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      foldedSize += \" [].join()\".length();\n      foldedSize += InlineCostEstimator.getCost(right);\n\n      break;\n  }\n  t.getCompiler().reportCodeChange();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}