{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // A flag to track if we have processed at least one immutable node in the\n    // current sequence being accumulated in the StringBuilder. This is crucial\n    // for correctly appending the joinString, especially with empty string\n    // elements.\n    boolean hasPreviousImmutableInSequence = false;\n\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        // If a previous immutable node was processed for this sequence,\n        // we need to append the join string before the current element's value.\n        if (hasPreviousImmutableInSequence) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n        hasPreviousImmutableInSequence = true;\n      } else {\n        // Current element is not immutable, so we break the current\n        // sequence of immutable strings.\n        if (hasPreviousImmutableInSequence) {\n          // Flush the accumulated string.\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder(); // Reset sb for the next sequence\n        }\n        // Add the non-immutable element itself.\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n        hasPreviousImmutableInSequence = false; // Reset flag as the sequence is broken\n      }\n      elem = elem.getNext();\n    }\n\n    // Flush any remaining string builder content after the loop.\n    if (hasPreviousImmutableInSequence) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        // Case: [].join(X) -> \"\"\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        // Case: ['a'].join(X) -> 'a', or [foo].join(X) -> foo (coerced to string)\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        // foldedSize already contains the cost of the single resulting string node\n        // (including quotes if it's a string literal).\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n          // TODO(user): If this coercion increases cost, this should be re-evaluated\n          // or the cost estimate should include this.\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // Case: Some folding occurred, but not into a single string.\n        // E.g., ['a', foo, 'b'].join(',') -> [\"a\", foo, \"b\"].join(',')\n        // Or no folding at all, but the cost calculation might reveal a win.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          // If no folding could actually be performed (i.e., the number of\n          // children is the same and none were merged), return.\n          // This check prevents unnecessary work and potential no-op changes.\n          return;\n        }\n\n        // Calculate the cost of the transformed expression: [new_array_elements].join(joinString)\n        int kJoinOverhead = \"[].join()\".length(); // Cost of array literal structure and .join() call\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right); // Cost of the join string literal itself\n        // Add cost for commas in the re-built array literal.\n        // Only add if there's more than one element in the new array.\n        foldedSize += Math.max(0, arrayFoldedChildren.size() - 1);\n\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}