{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n\n    // Merges adjacent String nodes, ONLY merges when all adjacent elements are\n    // immutable values (i.e. literals), and leaves non-immutable elements as-is.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n    if (sb.length() > 0) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n\n    // When all children are strings AND the join-separator is a string/number/bool,\n    // then the join can fold into a single string.\n    boolean allStrings = true;\n    for (Node child : arrayFoldedChildren) {\n      if (child.getType() != Token.STRING) {\n        allStrings = false;\n        break;\n      }\n    }\n\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        // empty array joined => always empty string\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        int maybeStringNodeLen = foldedStringNode.getType() == Token.STRING\n                                 ? foldedStringNode.getString().length() + 2 : foldedSize;\n        if (maybeStringNodeLen > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If not a string, coerce to string.\n          Node replacement = new Node(Token.ADD, Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // All folded children are now either strings OR are original non-immutable nodes.\n        // If the arrayFoldedChildren are all STRINGs, fully join.\n        if (allStrings) {\n          // Join them with joinString.\n          StringBuilder result = new StringBuilder();\n          for (int i = 0; i < arrayFoldedChildren.size(); i++) {\n            if (i > 0) {\n              result.append(joinString);\n            }\n            result.append(arrayFoldedChildren.get(i).getString());\n          }\n          Node joined = Node.newString(result.toString());\n          if ((result.length() + 2) > originalSize) {\n            // not a win\n            return;\n          }\n          parent.replaceChild(n, joined);\n        } else {\n          // No folding could actually be performed if array didn't reduce at all.\n          if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n            return;\n          }\n          int kJoinOverhead = \"[].join()\".length();\n          foldedSize += kJoinOverhead;\n          foldedSize += InlineCostEstimator.getCost(right);\n          if (foldedSize > originalSize) {\n            return;\n          }\n          arrayNode.detachChildren();\n          for (Node node : arrayFoldedChildren) {\n            arrayNode.addChildToBack(node);\n          }\n        }\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}