{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n      } else {\n        if (sb.length() > 0) {\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          foldedSize += InlineCostEstimator.getCost(Node.newString(sb.toString())); // Correctly estimate size\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n      foldedSize += InlineCostEstimator.getCost(Node.newString(sb.toString())); // Correctly estimate size\n    }\n\n    if (arrayFoldedChildren.isEmpty()) {\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        t.getCompiler().reportCodeChange();\n        return;\n    }\n\n    // one for each comma.\n    foldedSize += (arrayFoldedChildren.size() - 1) * InlineCostEstimator.getCost(right);\n\n    int originalSize = InlineCostEstimator.getCost(n);\n\n    if (arrayFoldedChildren.size() == 1) {\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        t.getCompiler().reportCodeChange();\n        return;\n    }\n\n    // No folding could actually be performed.\n    if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        return;\n    }\n\n    int kJoinOverhead = \"[].join()\".length();\n    foldedSize += kJoinOverhead;\n    foldedSize += InlineCostEstimator.getCost(right);\n    if (foldedSize > originalSize) {\n      return;\n    }\n\n    arrayNode.detachChildren();\n    for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n    }\n    t.getCompiler().reportCodeChange();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}