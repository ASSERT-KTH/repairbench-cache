{
    "generation": "  /**\n   * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n   */\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n\n    // Flag to track if the current element is the first in a sequence of\n    // contiguous string-like values. This controls whether the joinString\n    // should be prepended.\n    boolean firstElementInSequence = true;\n\n    // Flag to track if 'sb' currently holds accumulated string content\n    // from immutable values. This is true if *any* immutable value\n    // has been appended to sb since the last non-immutable value or\n    // the beginning of the array. It ensures that even empty string literals\n    // created by folding are added to arrayFoldedChildren.\n    boolean hadContiguousString = false;\n\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (!firstElementInSequence) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n        firstElementInSequence = false;\n        hadContiguousString = true; // We are accumulating a string\n      } else {\n        // If we were accumulating a string, flush it to a Node.\n        if (hadContiguousString) {\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder(); // Reset for next string sequence\n          hadContiguousString = false; // Reset, no longer accumulating\n        }\n        // Add the non-string element itself.\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n        // Reset firstElementInSequence as a non-string breaks the sequence.\n        firstElementInSequence = true;\n      }\n      elem = elem.getNext();\n    }\n\n    // After the loop, if there's any accumulated string content, flush it.\n    // This covers cases where the array ends with string-like values.\n    if (hadContiguousString) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // No folding could actually be performed (i.e., no adjacent strings\n        // were merged) if the number of elements in the folded list is the\n        // same as the original array. In such cases, we should only proceed\n        // if the overall cost is reduced.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}