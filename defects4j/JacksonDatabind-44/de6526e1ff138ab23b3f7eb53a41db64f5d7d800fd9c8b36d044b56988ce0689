{
    "generation": "    @Override\n    @Deprecated\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n\n        // Check if subclass is a subclass of _class\n        if (_class.isAssignableFrom(subclass)) {\n            return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                    _valueHandler, _typeHandler, _asStatic);\n        }\n\n        // Handle placeholder values (`Void`, `NoClass`)\n        if (subclass == Void.TYPE || subclass == NoClass.class) {\n            return this;\n        }\n\n        // Otherwise, stitch together the hierarchy. First, super-class\n        // if not found, try a super-interface\n        // should not get here but...\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not a sub-type of \"\n                + _class.getName());\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}