{
    "generation": "@Override\n@Deprecated\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName()\n                + \" not sub-type of \" + _class.getName());\n    }\n    // Instead of passing \"this\" (which still holds the bean info for _class),\n    // we recompute the immediate super-type. That way, when the new type is\n    // introspected its own bean properties (including any additional ones)\n    // will be used.\n    JavaType newSuper = (_superClass == null) ? null : _superClass._narrow(subclass.getSuperclass());\n    return new SimpleType(subclass, _bindings, newSuper, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}