{
    "generation": "@Override\n@Deprecated\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // For the specific problem with placeholders (like Void, NoClass), only enforce sub-type if subclass is not Object\n    // or one of special placeholder types; otherwise allow\n    if (!_class.isAssignableFrom(subclass)) {\n        // 16-Jun-2024: PATCH: Allow subtypes of Object (including interface; and for default implementation)\n        if (_class != Object.class) {\n            // See comment in original for not throwing always due to special placeholder types\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n    }\n    return new SimpleType(subclass, _bindings, this, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}