{
    "generation": "    @Override\n    @Deprecated\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        // Can not narrow down further than Collections.emptyList() etc\n        if (_class == subclass) {\n            return this;\n        }\n\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.\n        // TODO: fix in 2.8\n        /*\n        if (!_class.isAssignableFrom(subclass)) {\n             throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n        }\n        */\n\n        // NOTE: Internally, this method is only called when refinancing Collection/Map\n        // types when they are being specialized. And it's only needed because\n        // CollectionType/MapType do not have variant that takes super-class/super-interfaces.\n        // Ideally this method would not be needed, but for now it is.\n\n        // 19-Feb-2017, tatu: By default, must NOT specify super-class/interfaces, as\n        //    resolution latter on MUST be able to determine true super-type. This seems\n        //    to be the root cause of [#1125], [#1406]\n        //  (except, should we consider specifying 'this' as supertype?)\n        //\n        // 26-May-2019, tatu: As per [databind#2345], need to be careful to NOT pass binding\n        //   information, if relationship is not direct sub-classing. Although unfortunately\n        //   can not really check that reliably. But let's try this: if `this` type has\n        //   no bindings, OR subclass is annotation/interface, assume bindings not needed.\n        if (this.hasBindings() && !subclass.isInterface() && !subclass.isAnnotation()) {\n            // 18-Mar-2021, tatu: As per [databind#3084], need to be careful to retain super-type linkage\n            //    as well; otherwise subtype has no knowledge of super type implementation constraints\n            return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                    _valueHandler, _typeHandler, _asStatic);\n        }\n\n        // Otherwise, assume no bindings are needed / super-class/interfaces will be re-resolved\n        return new SimpleType(subclass, TypeBindings.emptyBindings(), null, null,\n                _valueHandler, _typeHandler, _asStatic);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}