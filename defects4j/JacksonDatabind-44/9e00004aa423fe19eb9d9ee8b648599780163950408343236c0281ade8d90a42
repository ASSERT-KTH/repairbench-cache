{
    "generation": "    @Override\n    @Deprecated\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Should we check that there is a sub-class relationship?\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.\n        // TODO: fix in 2.8\n            /*\n            throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n                    +_class.getName());\n                    */\n\n        // 18-Nov-2016, tatu: As per [databind#1125], needs specialized handling for interfaces.\n        // If we narrow down from an interface, need to pass 'this' as new interface, NOT as super class\n        if (_class.isInterface()) {\n             return new SimpleType(subclass, _bindings,\n                     _superClass, // needs to be the actual super-class of subclass... null works?\n                     new JavaType[] { this }, // ... and this is the super-interface\n                     _valueHandler, _typeHandler, _asStatic);\n        }\n        // Otherwise, default simple logic is fine\n        return new SimpleType(subclass, _bindings,\n                this, // 'this' is the superclass\n                _superInterfaces, // interfaces are (presumably) same\n                _valueHandler, _typeHandler, _asStatic);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}