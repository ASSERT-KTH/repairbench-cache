{
    "generation": "@Override\n@Deprecated\nprotected JavaType _narrow(Class<?> subclass) {\n    // identical type -> nothing to do\n    if (_class == subclass) {\n        return this;\n    }\n    // sanity check: must actually be a subtype\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \"+subclass.getName()\n                +\" not sub-type of \"+_class.getName());\n    }\n    // When narrowing from an interface to an implementing class,\n    // the subclass's superClass should be the interface's superClass,\n    // and its superInterfaces should include the interface itself:\n    if (_class.isInterface()) {\n        JavaType superClass = _superClass;\n        JavaType[] superInts;\n        if (_superInterfaces == null || _superInterfaces.length == 0) {\n            superInts = new JavaType[] { this };\n        } else {\n            superInts = new JavaType[_superInterfaces.length + 1];\n            System.arraycopy(_superInterfaces, 0, superInts, 0, _superInterfaces.length);\n            superInts[_superInterfaces.length] = this;\n        }\n        return new SimpleType(subclass, _bindings, superClass, superInts,\n                _valueHandler, _typeHandler, _asStatic);\n    }\n    // Normal narrowing for a subclass of a concrete class:\n    // its immediate superClass is 'this', interfaces stay the same.\n    return new SimpleType(subclass, _bindings, this, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}