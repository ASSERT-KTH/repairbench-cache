{
    "generation": "@Override\n@Deprecated\nprotected JavaType _narrow(Class<?> subclass) {\n    if (_class == subclass) {\n        return this;\n    }\n    if (subclass != null && (_class.isAssignableFrom(subclass) || _hasInterface(subclass, _superInterfaces))) {\n        return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic);\n    }\n    throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not subtype of \" + _class.getName());\n}\n\nprivate boolean _hasInterface(Class<?> cls, List<JavaType> interfaces) {\n    if (cls == null) return false;\n    for (JavaType type : interfaces) {\n        if (type.getRawClass().isAssignableFrom(cls)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}