{
    "generation": "    @Override\n    @Deprecated\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        // Original comment from source:\n        // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.\n        // TODO: fix in 2.8\n\n        // Fix for 2.8 (databind#1387):\n        // If the subclass is `Void.class`, maintain the existing behavior of propagating\n        // type information as it might be used as a placeholder.\n        // For other subclasses, create a \"fresh\" SimpleType.\n        // This means the `_bindings`, `superClass`, and `_superInterfaces` should be\n        // derived from the `subclass` itself by the `TypeFactory` later, not propagated\n        // from `this` (the original type), which could lead to an incorrect type hierarchy.\n        // `_valueHandler`, `_typeHandler`, `_asStatic` are properties of the type instance\n        // that should be carried over.\n        if (subclass == Void.class) {\n            return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                    _valueHandler, _typeHandler, _asStatic);\n        }\n        // For all other subclasses, create a new SimpleType that correctly represents\n        // the subclass as a \"raw\" type, letting TypeFactory resolve its hierarchy.\n        return new SimpleType(subclass, TypeBindings.emptyBindings(), null, null,\n                _valueHandler, _typeHandler, _asStatic);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}