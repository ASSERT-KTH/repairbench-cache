{
    "generation": "@Override\n@Deprecated\nprotected JavaType _narrow(Class<?> subclass)\n{\n    // no change if it's exactly the same class\n    if (_class == subclass) {\n        return this;\n    }\n    // sanity check: must actually be a subtype\n    if (!_class.isAssignableFrom(subclass)) {\n        throw new IllegalArgumentException(\"Class \" + subclass.getName()\n            + \" not sub-type of \" + _class.getName());\n    }\n    // first: find the correct super\u2010type in our JavaType chain for subclass\n    Class<?> rawSuper = subclass.getSuperclass();\n    JavaType superType = (rawSuper == _class)\n        ? this\n        : narrowBy(rawSuper);\n    // next: gather any interfaces of the subclass that are subtypes of our base\n    Class<?>[] interfaces = subclass.getInterfaces();\n    JavaType[] newInts = new JavaType[0];\n    if (interfaces != null && interfaces.length > 0) {\n        ArrayList<JavaType> tmp = new ArrayList<>(interfaces.length);\n        for (Class<?> iface : interfaces) {\n            if (_class.isAssignableFrom(iface)) {\n                tmp.add(narrowBy(iface));\n            }\n        }\n        if (!tmp.isEmpty()) {\n            newInts = tmp.toArray(new JavaType[tmp.size()]);\n        }\n    }\n    // and finally, build the specialized SimpleType for the subclass\n    return new SimpleType(subclass, _bindings, superType, newInts,\n                          _valueHandler, _typeHandler, _asStatic);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}