{
    "generation": "@Override\n@Deprecated\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n    // Special case: handle primitive/wrapper equivalence (copied from TypeFactory)\n    if (_class.isPrimitive()) {\n        Class<?> prim = com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(subclass);\n        if (prim != null && prim == _class) {\n            return this;\n        }\n    }\n    // Special case for marker value types (especially for missing default subtype)\n    // In SimpleType, _superClass can be null for \"java.lang.Object\", so allow narrowing from it\n    if (_class == Object.class) {\n        return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                _valueHandler, _typeHandler, _asStatic);\n    }\n    // Should we check that there is a sub-class relationship?\n    // 15-Jan-2016, tatu: Almost yes, but there are some complications with\n    //    placeholder values (`Void`, `NoClass`), so can not quite do yet.\n    // TODO: fix in 2.8\n    /*\n    throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \"\n            +_class.getName());\n            */\n    return new SimpleType(subclass, _bindings, this, _superInterfaces,\n            _valueHandler, _typeHandler, _asStatic);\n    // Otherwise, stitch together the hierarchy. First, super-class\n    // if not found, try a super-interface\n    // should not get here but...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}