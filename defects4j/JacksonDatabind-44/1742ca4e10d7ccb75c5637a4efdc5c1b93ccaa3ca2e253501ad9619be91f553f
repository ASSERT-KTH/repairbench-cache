{
    "generation": "    @Override\n    @Deprecated\n    protected JavaType _narrow(Class<?> subclass)\n    {\n        if (_class == subclass) {\n            return this;\n        }\n        if (_class.isAssignableFrom(subclass)) {\n            return new SimpleType(subclass, _bindings, this, _superInterfaces,\n                    _valueHandler, _typeHandler, _asStatic);\n        }\n        // Otherwise, check if it's a super class or interface\n        JavaType superClass = _findSuperInterface(subclass);\n        if (superClass != null) {\n            return superClass.narrow(subclass);\n        }\n        // If no relationship found, it's likely an error\n        throw new IllegalArgumentException(\"Class \" + subclass.getName() + \" not a sub-type of \" + _class.getName());\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}