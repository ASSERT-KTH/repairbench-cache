{
    "generation": "    /** {@inheritDoc} */\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Ensure x0 < x1 by swapping if necessary. This simplifies the interval\n        // update logic and eliminates the need for an 'inverted' flag.\n        if (x0 > x1) {\n            double tmp = x0;\n            x0 = x1;\n            x1 = tmp;\n            tmp = f0;\n            f0 = f1;\n            f1 = tmp;\n        }\n\n        // Verify bracketing of initial solution.\n        // After potential swap, x0 < x1 is guaranteed.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation.\n            // This is the secant formula, also used in Regula Falsi.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            // If f(x0) and f(x) have opposite signs, the root is in (x0, x).\n            // So, x becomes the new upper bound (x1).\n            if (f0 * fx < 0) {\n                x1 = x;\n                f1 = fx;\n            } else {\n                // If f(x0) and f(x) have the same sign, then f(x) and f(x1)\n                // must have opposite signs (since f0*f1 < 0).\n                // So, the root is in (x, x1). x becomes the new lower bound (x0).\n                x0 = x;\n                f0 = fx;\n                // Apply method-specific modifications to the function value\n                // of the *other* (fixed) endpoint to accelerate convergence.\n                switch (method) {\n                case ILLINOIS:\n                    f1 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f1 *= f0 / (f0 + fx);\n                    break;\n                case REGULA_FALSI: // Explicitly handle standard Regula Falsi\n                    // Standard Regula Falsi does not modify function values.\n                    break;\n                default:\n                    // Should never happen for known methods.\n                    throw new MathInternalError();\n                }\n            }\n\n            // If the function value of the last approximation is too small,\n            // given the function value accuracy, then we can't get closer to\n            // the root than we already are.\n            if (FastMath.abs(f1) <= ftol) { // f1 is now f(x1), where x1 is the best estimate\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return x0; // x0 is always the left bound\n                case RIGHT_SIDE:\n                    return x1; // x1 is always the right bound\n                case BELOW_SIDE:\n                    if (f1 <= 0) { // Check if f(x1) meets the condition\n                        return x1;\n                    }\n                    break; // If not, continue iteration\n                case ABOVE_SIDE:\n                    if (f1 >= 0) { // Check if f(x1) meets the condition\n                        return x1;\n                    }\n                    break; // If not, continue iteration\n                default:\n                    throw new MathInternalError();\n                }\n            }\n\n            // If the current interval is within the given accuracies, we\n            // are satisfied with the current approximation.\n            // Since x0 < x1 is maintained, FastMath.abs(x1 - x0) is simply x1 - x0.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return x0; // x0 is the left bound\n                case RIGHT_SIDE:\n                    return x1; // x1 is the right bound\n                case BELOW_SIDE:\n                    // Return x1 if f(x1) <= 0, otherwise x0 (since f0*f1<0, f0 must be >0)\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    // Return x1 if f(x1) >= 0, otherwise x0 (since f0*f1<0, f0 must be <0)\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}