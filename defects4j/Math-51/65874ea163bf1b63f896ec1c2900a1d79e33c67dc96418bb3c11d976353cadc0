{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Initial bracket\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // Check for exact endpoints\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify that we have a valid bracket\n    verifyBracketing(x0, x1);\n\n    // Tolerances\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Tracks whether the interval has been inverted\n    boolean inverted = false;\n    // Track previous approximation to detect stagnation\n    double prevX = x1;\n\n    // Main iteration loop\n    while (true) {\n        // False position step\n        final double x  = x1 - (f1 * (x1 - x0)) / (f1 - f0);\n        final double fx = computeObjectiveValue(x);\n\n        // Exact root found\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Update bracket and possibly scale f0 (Illinois/Pegasus)\n        if (f1 * fx < 0) {\n            x0       = x1;\n            f0       = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n                case ILLINOIS :\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS :\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                default:\n                    // Should never happen.\n            }\n        }\n        x1 = x;\n        f1 = fx;\n\n        // Check function-value convergence\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE   : return x1;\n                case LEFT_SIDE  : if (inverted) return x1; break;\n                case RIGHT_SIDE : if (!inverted) return x1; break;\n                case BELOW_SIDE : if (f1 <= 0)      return x1; break;\n                case ABOVE_SIDE : if (f1 >= 0)      return x1; break;\n                default         : throw new MathInternalError();\n            }\n        }\n\n        // Check x-convergence: either the bracket has shrunk\n        // or successive approximations have stalled\n        final double tol = FastMath.max(rtol * FastMath.abs(x1), atol);\n        if (FastMath.abs(x1 - x0) < tol ||\n            FastMath.abs(x1 - prevX) < tol) {\n            switch (allowed) {\n                case ANY_SIDE   : return x1;\n                case LEFT_SIDE  : return inverted ? x1 : x0;\n                case RIGHT_SIDE : return inverted ? x0 : x1;\n                case BELOW_SIDE : return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE : return (f1 >= 0) ? x1 : x0;\n                default         : throw new MathInternalError();\n            }\n        }\n\n        // Prepare for next iteration\n        prevX = x1;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}