{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it. Since these are\n    // not under-approximations or over-approximations, we can return them\n    // regardless of the allowed solutions.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Keep track of inverted intervals, meaning that the left bound is\n    // larger than the right bound.\n    boolean inverted = false;\n\n    // Keep finding better approximations.\n    while (true) {\n        // Calculate the next approximation.\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n\n        // If the new approximation is the exact root, return it. Since\n        // this is not an under-approximation or an over-approximation,\n        // we can return it regardless of the allowed solutions.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Stop if the convergence criteria are met before making interval updates.\n        if (FastMath.abs(fx) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (fx <= 0) {\n                        return x;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (fx >= 0) {\n                        return x;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n        if (FastMath.abs(x - x1) < FastMath.max(rtol * FastMath.abs(x), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x;\n                case LEFT_SIDE:\n                    return inverted ? x : x1;\n                case RIGHT_SIDE:\n                    return inverted ? x1 : x;\n                case BELOW_SIDE:\n                    return (fx <= 0) ? x : x1;\n                case ABOVE_SIDE:\n                    return (fx >= 0) ? x : x1;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Update the bounds with the new approximation.\n        if (f1 * fx < 0) {\n            // The value of x1 has switched to the other bound, thus inverting\n            // the interval.\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                    // Update formula cannot make any progress: Update the\n                    // search interval.\n                default:\n                    // Should never happen.\n            }\n        }\n        // Update from [x0, x1] to [x0, x].\n        x1 = x;\n        f1 = fx;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}