{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is an exact root, return it immediately\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify initial bracketing\n    verifyBracketing(x0, x1);\n\n    // Accuracy parameters\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    boolean inverted = false;\n    int identicalIllinoisCounter = 0;\n\n    double prevX1 = Double.NaN;  // For detecting stalling at endpoints\n\n    while (true) {\n        // Prevent division by zero in next approximation computation\n        if (f1 == f0) {\n            // Cannot make further progress\n            return x1;\n        }\n\n        final double x = x1 - (f1 * (x1 - x0)) / (f1 - f0);\n        final double fx = computeObjectiveValue(x);\n\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Detect endpoint stalling: consecutive approximations too close to one endpoint\n        if (prevX1 == x1) {\n            identicalIllinoisCounter++;\n        } else {\n            identicalIllinoisCounter = 0;\n        }\n        prevX1 = x1;\n\n        if (identicalIllinoisCounter > 2) {\n            // Forcibly bisect interval if stuck more than 2 times\n            final double midpoint = 0.5 * (x0 + x1);\n            final double fmid = computeObjectiveValue(midpoint);\n            if (fmid == 0.0) {\n                return midpoint;\n            }\n            // update according to bracketing\n            if (f0 * fmid < 0) {\n                x1 = midpoint;\n                f1 = fmid;\n            } else {\n                x0 = midpoint;\n                f0 = fmid;\n            }\n            inverted = false;\n            identicalIllinoisCounter = 0;\n            continue;\n        }\n\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            default:\n                // fall-through, no update\n            }\n        }\n\n        x1 = x;\n        f1 = fx;\n\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                if (inverted) {\n                    return x1;\n                }\n                break;\n            case RIGHT_SIDE:\n                if (!inverted) {\n                    return x1;\n                }\n                break;\n            case BELOW_SIDE:\n                if (f1 <= 0) {\n                    return x1;\n                }\n                break;\n            case ABOVE_SIDE:\n                if (f1 >= 0) {\n                    return x1;\n                }\n                break;\n            default:\n                throw new MathInternalError();\n            }\n        }\n\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                return inverted ? x1 : x0;\n            case RIGHT_SIDE:\n                return inverted ? x0 : x1;\n            case BELOW_SIDE:\n                return (f1 <= 0) ? x1 : x0;\n            case ABOVE_SIDE:\n                return (f1 >= 0) ? x1 : x0;\n            default:\n                throw new MathInternalError();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}