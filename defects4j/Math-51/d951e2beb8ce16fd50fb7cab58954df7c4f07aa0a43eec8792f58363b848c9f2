{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify that the initial interval brackets a root.\n    verifyBracketing(x0, x1);\n\n    // Get tolerances.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // This flag records if the *lower bound* was updated in the previous iteration.\n    // That is used to damp the effect of updating the same endpoint consecutively.\n    boolean lowerBoundUpdated = false;\n\n    while (true) {\n        // Compute the candidate using the false position (secant) formula.\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n\n        // If we found an exact zero then we are done.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Standard false position update:\n        //   Given a bracketing interval [x0, x1] where f(x0) and f(x1) have opposite signs,\n        //   if f(x0) and f(x) have opposite signs then the root lies in [x0, x];\n        //   otherwise the sign change is in [x, x1].\n        if (f0 * fx < 0) {\n            // The root is in [x0, x]. Replace the upper bound.\n            x1 = x;\n            f1 = fx;\n            lowerBoundUpdated = false; // we just updated the upper endpoint\n        } else {\n            // The root is in [x, x1]. Replace the lower bound.\n            x0 = x;\n            f0 = fx;\n            // If we update the lower bound two iterations consecutively,\n            // apply a damping factor (Illinois/ Pegasus modification) to the opposite endpoint.\n            if (lowerBoundUpdated) {\n                switch (method) {\n                    case ILLINOIS:\n                        f1 *= 0.5;\n                        break;\n                    case PEGASUS:\n                        // In Pegasus, the damping factor is computed so that f1 becomes f1 * f0/(f0 + fx).\n                        // Note here that after update f0 == fx so the factor is \u00bd.\n                        f1 *= f0 / (f0 + fx);\n                        break;\n                    default:\n                        // Should never happen.\n                }\n            }\n            lowerBoundUpdated = true;\n        }\n\n        // Termination based on function value.\n        if (FastMath.abs(fx) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x;\n                case LEFT_SIDE:\n                    return x0;\n                case RIGHT_SIDE:\n                    return x1;\n                case BELOW_SIDE:\n                    return (fx <= 0) ? x : x0;\n                case ABOVE_SIDE:\n                    return (fx >= 0) ? x : x1;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Termination based on interval width.\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x;\n                case LEFT_SIDE:\n                    return x0;\n                case RIGHT_SIDE:\n                    return x1;\n                case BELOW_SIDE:\n                    return (fx <= 0) ? x : x0;\n                case ABOVE_SIDE:\n                    return (fx >= 0) ? x : x1;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}