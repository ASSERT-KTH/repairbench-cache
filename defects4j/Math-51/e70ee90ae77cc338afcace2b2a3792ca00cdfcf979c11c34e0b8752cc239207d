{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // initial endpoints\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // check for exact root at endpoints\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // must bracket\n    verifyBracketing(x0, x1);\n\n    // tolerances\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    double x = Double.NaN;\n    double fx;\n\n    // iteration\n    while (true) {\n        // false position step\n        x = x1 - (f1 * (x1 - x0)) / (f1 - f0);\n        fx = computeObjectiveValue(x);\n\n        // exact root?\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // update bracket and scale stale endpoint\n        if (f0 * fx < 0.0) {\n            // root is in [x0, x]\n            x1 = x;\n            f1 = fx;\n            // scale f0 (stationary) for Illinois/Pegasus\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= fx / (f0 + fx);\n                break;\n            default:\n                // no other methods\n            }\n        } else {\n            // root is in [x, x1]\n            x0 = x;\n            f0 = fx;\n            // scale f1 (stationary) for Illinois/Pegasus\n            switch (method) {\n            case ILLINOIS:\n                f1 *= 0.5;\n                break;\n            case PEGASUS:\n                f1 *= fx / (f1 + fx);\n                break;\n            default:\n                // no other methods\n            }\n        }\n\n        // convergence on function value\n        if (FastMath.abs(fx) <= ftol) {\n            return x;\n        }\n        // convergence on x\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x), atol)) {\n            return x;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}