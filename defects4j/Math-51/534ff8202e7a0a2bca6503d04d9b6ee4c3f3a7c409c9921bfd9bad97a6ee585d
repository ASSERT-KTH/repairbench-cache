{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // Function\u2010value tolerance\n    final double ftol = getFunctionValueAccuracy();\n\n    // If one of the bounds is (approximately) the root, return it.\n    if (FastMath.abs(f0) <= ftol) {\n        return x0;\n    }\n    if (FastMath.abs(f1) <= ftol) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Keep track of inverted intervals (x0 > x1).\n    boolean inverted = false;\n\n    // Main iteration loop.\n    while (true) {\n        // Secant step (Regula Falsi)\n        final double x = x1 - (f1 * (x1 - x0)) / (f1 - f0);\n        final double fx = computeObjectiveValue(x);\n\n        // If the new approximation is (approximately) a root, return it.\n        if (FastMath.abs(fx) <= ftol) {\n            return x;\n        }\n\n        // Update the bracket [x0, x1] \u2192 either [x, x1] or [x0, x].\n        if (f1 * fx < 0) {\n            // Sign change between f1 and fx: move x0 \u2192 x1, then x1 \u2192 x\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            // No sign change: shrink the stale side\n            switch (method) {\n            case ILLINOIS:\n                // Illinois: halve the stale side value\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                // Pegasus: scale the stale side\n                f0 *= f1 / (f1 + fx);\n                break;\n            default:\n                // classic Regula Falsi: do nothing\n            }\n        }\n        // Always move the right endpoint to the new approximation\n        x1 = x;\n        f1 = fx;\n\n        // Check function\u2010value convergence on the new right endpoint\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                if (inverted) {\n                    return x1;\n                }\n                break;\n            case RIGHT_SIDE:\n                if (!inverted) {\n                    return x1;\n                }\n                break;\n            case BELOW_SIDE:\n                if (f1 <= 0) {\n                    return x1;\n                }\n                break;\n            case ABOVE_SIDE:\n                if (f1 >= 0) {\n                    return x1;\n                }\n                break;\n            default:\n                throw new MathInternalError();\n            }\n        }\n\n        // Check bracket\u2010width convergence\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                return inverted ? x1 : x0;\n            case RIGHT_SIDE:\n                return inverted ? x0 : x1;\n            case BELOW_SIDE:\n                return (f1 <= 0) ? x1 : x0;\n            case ABOVE_SIDE:\n                return (f1 >= 0) ? x1 : x0;\n            default:\n                throw new MathInternalError();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}