{
    "generation": "    /** {@inheritDoc} */\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Store previous f0 and f1 for scaling logic\n            final double f0_prev = f0;\n            final double f1_prev = f1;\n\n            // Update the bounds with the new approximation.\n            if (f1_prev * fx < 0) { // Root is between x and x1. x0 needs to be updated to x. x1 retained.\n                                   // In the current code's variable assignment logic, this means\n                                   // the old x1 becomes the new x0, and x becomes the new x1.\n                                   // So, x0 and f0 become old x1 and f1. x1 and f1 become x and fx.\n                x0 = x1;\n                f0 = f1; // f0 is now the value of the retained endpoint (old f1)\n                inverted = !inverted;\n\n                // The retained f-value is the new f0 (which was old f1).\n                // This is the one that needs scaling for Illinois/Pegasus.\n                switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5; // Scale the new f0 (which is the old f1)\n                    break;\n                case PEGASUS:\n                    // Pegasus rule: f_retained = f_retained * f_other_old / (f_other_old + f_new_other)\n                    // Here, f0 (new) is retained. f0_prev is the old value of other point. fx is the new value of other point.\n                    f0 *= f0_prev / (f0_prev + fx);\n                    break;\n                default:\n                    // Should never happen.\n                }\n            } else { // f0_prev * fx < 0 (Root is between x0 and x). x1 needs to be updated to x. x0 retained.\n                     // The old x0 and f0 are retained. The old x1 and f1 are replaced by x and fx.\n                // The retained f-value is f0_prev.\n                // This is the one that needs scaling.\n                switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5; // Scale the old f0 (which is retained as new f0)\n                    break;\n                case PEGASUS:\n                    // Pegasus rule: f_retained = f_retained * f_other_old / (f_other_old + f_new_other)\n                    // Here, f0 is retained. f1_prev is the old value of other point. fx is the new value of other point.\n                    f0 *= f1_prev / (f1_prev + fx);\n                    break;\n                default:\n                    // Should never happen.\n                }\n            }\n            // Update from [x0, x1] to [x0, x].\n            x1 = x;\n            f1 = fx;\n\n            // If the function value of the last approximation is too small,\n            // given the function value accuracy, then we can't get closer to\n            // the root than we already are.\n            if (FastMath.abs(f1) <= ftol) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n\n            // If the current interval is within the given accuracies, we\n            // are satisfied with the current approximation.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}