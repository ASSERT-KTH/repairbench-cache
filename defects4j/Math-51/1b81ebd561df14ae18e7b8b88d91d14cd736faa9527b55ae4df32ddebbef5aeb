{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it. Since these are\n    // not under-approximations or over-approximations, we can return them\n    // regardless of the allowed solutions.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Keep track of inverted intervals, meaning that the left bound is\n    // larger than the right bound.\n    boolean inverted = false;\n\n    // Copy the starting values for Illinois/Pegasus tricks\n    double prevF0 = f0;\n    double prevF1 = f1;\n\n    // Keep finding better approximations.\n    while (true) {\n        // Calculate the next approximation.\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n\n        // If the new approximation is the exact root, return it. Since\n        // this is not an under-approximation or an over-approximation,\n        // we can return it regardless of the allowed solutions.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Update the bounds with the new approximation.\n        if ((f0 * fx) < 0) {\n            // The sign change happens between x0 and x: [x0, x]\n            x1 = x;\n            f1 = fx;\n            // No need to update f0\n            inverted = false;\n        } else if ((f1 * fx) < 0) {\n            // The sign change happens between x and x1: [x, x1]\n            x0 = x;\n            f0 = fx;\n            inverted = true;\n        } else {\n            // Root not bracketed: extremely rare edge case for pathological functions.\n            throw new org.apache.commons.math.exception.NoBracketingException(x0, x1, f0, f1);\n        }\n\n        // Illinois and Pegasus \"trick\"\n        switch (method) {\n            case ILLINOIS:\n                if (prevF0 == f0) {\n                    f0 *= 0.5;\n                } else if (prevF1 == f1) {\n                    f1 *= 0.5;\n                }\n                break;\n            case PEGASUS:\n                if (prevF0 == f0) {\n                    f0 *= f1 / (f1 + f0);\n                } else if (prevF1 == f1) {\n                    f1 *= f0 / (f0 + f1);\n                }\n                break;\n            default:\n                // REGULA_FALSI: do nothing\n        }\n        prevF0 = f0;\n        prevF1 = f1;\n\n        // If the function value of the last approximation is too small,\n        // given the function value accuracy, then we can't get closer to\n        // the root than we already are.\n        if (FastMath.abs(f1) <= ftol || FastMath.abs(f0) <= ftol) {\n            double root;\n            if (FastMath.abs(f1) <= FastMath.abs(f0)) {\n                root = x1;\n            } else {\n                root = x0;\n            }\n            switch (allowed) {\n                case ANY_SIDE:\n                    return root;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return root;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return root;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    double fr = (root == x1) ? f1 : f0;\n                    if (fr <= 0) {\n                        return root;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    double fr2 = (root == x1) ? f1 : f0;\n                    if (fr2 >= 0) {\n                        return root;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // If the current interval is within the given accuracies, we\n        // are satisfied with the current approximation.\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0)), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return FastMath.abs(f1) < FastMath.abs(f0) ? x1 : x0;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    if (f0 <= 0) {\n                        return x0;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    if (f0 >= 0) {\n                        return x0;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}