{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Initial endpoints\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // Shortcut if an endpoint is exactly a root.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Check that the initial interval brackets a root.\n    verifyBracketing(x0, x1);\n\n    // Tolerances.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // We now maintain the invariant that the root is bracketed\n    // by x0 (left) and x1 (right). For a well\u2010behaved function,\n    // one of f0 and f1 is negative and the other positive.\n    // In the usual false position method the candidate is computed as:\n    //    x = x1 - f1 * (x1 - x0) / (f1 - f0)\n    // However, when the function is very steep at one end the method can stall.\n    // Modified methods (Illinois / Pegasus) counteract this by scaling the\n    // function value at the endpoint that does not change.\n    while (true) {\n        // Compute the next approximation via the false position formula.\n        final double x = x1 - (f1 * (x1 - x0)) / (f1 - f0);\n        final double fx = computeObjectiveValue(x);\n\n        // If we hit an exact root, return immediately.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Termination by function value.\n        if (FastMath.abs(fx) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x;\n                case LEFT_SIDE:\n                    return x0;\n                case RIGHT_SIDE:\n                    return x1;\n                case BELOW_SIDE:\n                    return (fx <= 0) ? x : x0;\n                case ABOVE_SIDE:\n                    return (fx >= 0) ? x : x1;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Termination by interval size.\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x;\n                case LEFT_SIDE:\n                    return x0;\n                case RIGHT_SIDE:\n                    return x1;\n                case BELOW_SIDE:\n                    return (fx <= 0) ? x : x0;\n                case ABOVE_SIDE:\n                    return (fx >= 0) ? x : x1;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Update the bracketing interval:\n        // (Recall that initially one endpoint is negative and the other positive.)\n        // Here we use the standard bracketing rule:\n        //   If f(x0) and f(x) have opposite signs, then the root lies in [x0, x];\n        //   otherwise it lies in [x, x1].\n        if (f0 * fx < 0) {\n            // New interval is [x0, x] where f0 and fx straddle the root.\n            x1 = x;\n            f1 = fx;\n            // In this branch the left endpoint remains fixed.\n            // If the same endpoint stays fixed over successive iterations,\n            // the Illinois and Pegasus schemes leave their mark by scaling that endpoint\u2019s f-value.\n            // (No scaling is applied in the step where the endpoint actually changes.)\n        } else {\n            // New interval is [x, x1]. In this case the left endpoint is updated.\n            x0 = x;\n            f0 = fx;\n            // To prevent slow convergence the modification scales the function at\n            // the endpoint that did not change. That is, since x1 is unchanged here,\n            // we modify f1.\n            switch (method) {\n                case ILLINOIS:\n                    f1 *= 0.5;\n                    break;\n                case PEGASUS:\n                    // f0 and fx have the same sign here.\n                    // Adjust f1 by a factor that diminishes its influence.\n                    f1 *= f0 / (f0 + fx);\n                    break;\n                default:\n                    // Should never happen.\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}