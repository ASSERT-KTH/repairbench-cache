{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Keep track of inverted intervals, meaning that the left bound is\n    // larger than the right bound.\n    boolean inverted = false;\n\n    // Keep finding better approximations.\n    double prevX = x0;\n    while (true) {\n        // Calculate the next approximation.\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n\n        // If the new approximation is the exact root, return it.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Update the bounds with the new approximation.\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            if (method == Method.ILLINOIS) {\n                f0 *= 0.5;\n            } else if (method == Method.PEGASUS) {\n                f0 *= f1 / (f1 + fx);\n            }\n            // Note: For Regula Falsi, no f0 adjustment is made.\n        }\n        // Update from [x0, x1] to [x0, x].\n        x1 = x;\n        f1 = fx;\n\n        // If the function value of the last approximation is too small,\n        // given the function value accuracy, then we can't get closer.\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                if (inverted) {\n                    return x1;\n                }\n                break;\n            case RIGHT_SIDE:\n                if (!inverted) {\n                    return x1;\n                }\n                break;\n            case BELOW_SIDE:\n                if (f1 <= 0) {\n                    return x1;\n                }\n                break;\n            case ABOVE_SIDE:\n                if (f1 >= 0) {\n                    return x1;\n                }\n                break;\n            default:\n                throw new MathInternalError();\n            }\n        }\n\n        // If the current interval is within the given accuracies, we\n        // are satisfied with the current approximation.\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                 atol)) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                return inverted ? x1 : x0;\n            case RIGHT_SIDE:\n                return inverted ? x0 : x1;\n            case BELOW_SIDE:\n                return (f1 <= 0) ? x1 : x0;\n            case ABOVE_SIDE:\n                return (f1 >= 0) ? x1 : x0;\n            default:\n                throw new MathInternalError();\n            }\n        }\n\n        // Additional safeguard for Regula Falsi stagnation (fix for issue 631):\n        // If the new approximation x is equal to the last approximation (within accuracies),\n        // we may be stuck (root is not being bracketed any further due to non-inverted endpoints).\n        // In this case, return the current best estimate.\n        if (method == Method.REGULA_FALSI) {\n            if (FastMath.abs(x1 - prevX) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n                // Check function value accuracy as well before breaking\n                if (FastMath.abs(f1) <= ftol) {\n                    return x1;\n                }\n                // Optionally, after so many repeats, break out and return the best so far\n                // For now, return the current estimate if 'stuck'\n                return x1;\n            }\n            prevX = x1;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}