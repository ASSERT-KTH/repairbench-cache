{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    \n    // Check if initial bounds have zero function value\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    \n    // Verify bracketing of initial solution\n    verifyBracketing(x0, x1);\n    \n    // Get accuracies\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    \n    // Track iterations to prevent infinite loops\n    int maxIterations = 1000;\n    int iteration = 0;\n    \n    // Calculate initial function values\n    f0 = computeObjectiveValue(x0);\n    f1 = computeObjectiveValue(x1);\n    \n    while (true) {\n        iteration++;\n        if (iteration > maxIterations) {\n            throw new ArithmeticException(\"Maximum iterations exceeded.\");\n        }\n        \n        // Compute new approximation\n        double x2 = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        double f2 = computeObjectiveValue(x2);\n        \n        // Check if new approximation is zero\n        if (f2 == 0) {\n            return x2;\n        }\n        \n        // Update bounds based on function signs\n        if (f1 * f2 < 0) {\n            x0 = x1;\n            f0 = f1;\n            x1 = x2;\n            f1 = f2;\n        } else if (f0 * f2 < 0) {\n            x1 = x2;\n            f1 = f2;\n        } else {\n            // Use method-specific update if no progress is made\n            switch(method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + f0);\n                    break;\n                default:\n                    // This should never happen, but handle gracefully to prevent infinite loops\n                    return x1;\n            }\n        }\n        \n        // Check convergence based on allowed accuracies\n        double tolerance = FastMath.max(rtol * FastMath.abs(x1), atol);\n        if (FastMath.abs(x1 - x0) < tolerance) {\n            return x1;\n        }\n        \n        // Handle function value convergence\n        if (FastMath.abs(f1) <= ftol) {\n            return x1;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}