{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Main iteration loop.\n    // The algorithm maintains a bracketing interval [x0, x1] such that f(x0) and f(x1)\n    // have opposite signs. It uses a false-position (regula falsi) formula,\n    // and if one endpoint persists it is \u201cpenalized\u201d (scaled) according to the chosen method.\n    while (true) {\n        final double x = x1 - (f1 * (x1 - x0)) / (f1 - f0);\n        final double fx = computeObjectiveValue(x);\n\n        // If the new approximation is the exact root, return it.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Update the bracketing interval. Using the standard false-position update:\n        //   If f(x0) and f(x) have opposite signs, the new interval is [x0, x],\n        //   otherwise (f(x0) and f(x) have the same sign) the new interval is [x, x1].\n        if (f0 * fx < 0) {\n            // f(x0) and f(x) differ in sign:\n            // The root lies in [x0, x]. Hence update the upper bound.\n            x1 = x;\n            f1 = fx;\n        } else {\n            // f(x0) and f(x) have the same sign, so the sign change must be\n            // between x and x1. To avoid the classical \u201cstagnation\u201d of regula falsi,\n            // we scale the function value at the stationary endpoint.\n            switch (method) {\n                case ILLINOIS:\n                    f1 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f1 *= f0 / (f0 + fx);\n                    break;\n                default:\n                    // If no modification is defined, do nothing.\n            }\n            x0 = x;\n            f0 = fx;\n        }\n\n        // Check if the objective function is close enough to zero.\n        if (FastMath.abs(fx) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return x0;\n                case RIGHT_SIDE:\n                    return x1;\n                case BELOW_SIDE:\n                    return (f0 <= 0) ? x0 : x1;\n                case ABOVE_SIDE:\n                    return (f0 >= 0) ? x0 : x1;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Check if the current interval is within the given accuracies.\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return x0;\n                case RIGHT_SIDE:\n                    return x1;\n                case BELOW_SIDE:\n                    return (f0 <= 0) ? x0 : x1;\n                case ABOVE_SIDE:\n                    return (f0 >= 0) ? x0 : x1;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}