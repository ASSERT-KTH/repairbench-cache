{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation.\n            // N.B. This can be problematic if f1 - f0 is close to zero. Check should be done.\n            // Avoid potential division by zero or convergence issues near zero gradient\n             if (f1 == f0) {\n                 // This should not happen based on verifyBracketing unless both are zero\n                 // or the function is extremely flat. Handle appropriately.\n                 // If convergence criteria are met, they should handle this.\n                 // If not, it indicates a problem. The original code didn't check explicitly.\n                 // We rely on convergence checks below.\n             }\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            // Determine which endpoint is stagnant and apply modification.\n            if (f1 * fx < 0) {\n                // Root is in [x, x1]. Endpoint x0 is replaced. Endpoint x1 is stagnant.\n                // Retained value is f1. Point x1 becomes the new x0.\n                // Modify the value f1 before assigning it to the new f0.\n                final double f0_old = f0; // Keep old f0 for Pegasus calculation.\n                switch (method) {\n                case ILLINOIS:\n                    f0 = f1 * 0.5; // Modify the stagnant value (f1) and assign to new f0\n                    break;\n                case PEGASUS:\n                    // Pegasus modification: f_stag *= f_other / (f_other + f_new)\n                    // f_stag is f1, f_other is f0_old, f_new is fx\n                    f0 = f1 * (f0_old / (f0_old + fx)); // Apply Pegasus modification to f1, assign to new f0\n                    break;\n                case REGULA_FALSI:\n                    // Default case: Regular Regula Falsi (no modification)\n                    f0 = f1; // Assign original stagnant value\n                    break;\n                default:\n                    // Should never happen. Consider throwing an exception.\n                     throw new MathInternalError(); // Or handle more gracefully\n                }\n                // Update endpoint x0 using the value from stagnant x1\n                x0 = x1;\n                // Invert the interval direction\n                inverted = !inverted;\n            } else {\n                // Root is in [x0, x]. Endpoint x1 is replaced. Endpoint x0 is stagnant.\n                // Retained value is f0. Point x0 remains x0.\n                // Modify the value f0.\n                // Pegasus modification: f_stag *= f_other / (f_other + f_new)\n                // f_stag is f0, f_other is f1, f_new is fx. Formula: f0_new = f0 * (f1 / (f1 + fx))\n                switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5; // Modify the stagnant value (f0) in place\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx); // Modify stagnant f0 using original f1 and new fx\n                    break;\n                case REGULA_FALSI:\n                    // Default case: Regular Regula Falsi (no modification)\n                    // f0 remains unchanged.\n                    break;\n                 default:\n                    // Should never happen.\n                     throw new MathInternalError(); // Or handle more gracefully\n                }\n                // x0 remains the same point, inverted state remains the same.\n            }\n\n            // Update the endpoint that is always replaced (x1) with the new approximation x.\n            x1 = x;\n            f1 = fx;\n\n            // Check for convergence based on function value.\n            // If the function value of the last approximation is too small,\n            // given the function value accuracy, then we can't get closer to\n            // the root than we already are.\n            if (FastMath.abs(f1) <= ftol) {\n                // The logic here determines if x1 satisfies the AllowedSolution criteria.\n                // If it does, x1 is returned. If not, the loop might continue, potentially\n                // terminating later via the interval width check, which might return x0 or x1.\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) { // x1 is on the left side of the root\n                        return x1;\n                    }\n                    break; // If !inverted, x1 is on the right, loop continues or hits interval check\n                case RIGHT_SIDE:\n                    if (!inverted) { // x1 is on the right side of the root\n                        return x1;\n                    }\n                    break; // If inverted, x1 is on the left, loop continues or hits interval check\n                case BELOW_SIDE:\n                    if (f1 <= 0) { // f1 is below or at zero\n                        return x1;\n                    }\n                    break; // If f1 > 0, loop continues or hits interval check\n                case ABOVE_SIDE:\n                    if (f1 >= 0) { // f1 is above or at zero\n                        return x1;\n                    }\n                    break; // If f1 < 0, loop continues or hits interval check\n                default:\n                    throw new MathInternalError(); // Should never happen.\n                }\n            }\n\n            // Check for convergence based on interval width.\n            // If the current interval is within the given accuracies, we\n            // are satisfied with the current approximation.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                // Interval is small enough, return the best endpoint based on AllowedSolution.\n                switch (allowed) {\n                case ANY_SIDE:\n                    // Return the latest approximation x1, as it's likely the best.\n                    return x1;\n                case LEFT_SIDE:\n                    // Return the endpoint which is algebraically smaller.\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    // Return the endpoint which is algebraically larger.\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    // Return the endpoint whose function value is less than or equal to zero.\n                    // Prefer the latest approximation if it qualifies.\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                     // Return the endpoint whose function value is greater than or equal to zero.\n                     // Prefer the latest approximation if it qualifies.\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError(); // Should never happen.\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}