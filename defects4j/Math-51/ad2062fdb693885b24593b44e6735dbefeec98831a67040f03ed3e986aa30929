{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify that the initial interval brackets the root.\n    verifyBracketing(x0, x1);\n\n    // Get accuracy tolerances.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // This flag is used to record which endpoint was updated\n    // in the previous iteration:\n    //   true  => the lower bound (x0) was updated last time,\n    //   false => the upper bound (x1) was updated last time.\n    boolean leftUpdated = false;\n\n    double x;     // current interpolation\n    double fx;    // function value at x\n\n    while (true) {\n        // Compute the false position (regula falsi) approximation.\n        // (This is equivalent to: x = (x0*f1 - x1*f0) / (f1 - f0))\n        x = x1 - (f1 * (x1 - x0)) / (f1 - f0);\n        fx = computeObjectiveValue(x);\n\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Decide which subinterval to keep.\n        // In a properly bracketing interval [x0, x1] (with f(x0)*f(x1) < 0)\n        // one of f0 or f1 is negative.\n        // If f0 and fx have opposite signs, then the root is between x0 and x;\n        // so we update the upper bound.\n        // Otherwise, f0 and fx have the same sign and the sign change is between\n        // x and x1, so we update the lower bound.\n        if (f0 * fx < 0.0) {\n            // Root is between x0 and x: update the upper bound.\n            x1 = x;\n            f1 = fx;\n            if (!leftUpdated) {\n                // Last update was also on the upper side, so adjust the stationary endpoint.\n                switch (method) {\n                    case ILLINOIS:\n                        f0 *= 0.5;\n                        break;\n                    case PEGASUS:\n                        f0 *= f1 / (f1 + fx);\n                        break;\n                    default:\n                        throw new MathInternalError();\n                }\n            } else {\n                // Changing sides: record that we just updated the upper endpoint.\n                leftUpdated = false;\n            }\n        } else {\n            // Root is between x and x1: update the lower bound.\n            x0 = x;\n            f0 = fx;\n            if (leftUpdated) {\n                // Consecutive update on the lower side: adjust the stationary endpoint.\n                switch (method) {\n                    case ILLINOIS:\n                        f1 *= 0.5;\n                        break;\n                    case PEGASUS:\n                        f1 *= f0 / (f0 + fx);\n                        break;\n                    default:\n                        throw new MathInternalError();\n                }\n            } else {\n                // Record that we just updated the lower bound.\n                leftUpdated = true;\n            }\n        }\n\n        // Check whether the function value is close enough to zero.\n        if (FastMath.abs(fx) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x;\n                case LEFT_SIDE:\n                    return leftUpdated ? x0 : x1;\n                case RIGHT_SIDE:\n                    return leftUpdated ? x1 : x0;\n                case BELOW_SIDE:\n                    return (fx <= 0) ? x : (leftUpdated ? x0 : x1);\n                case ABOVE_SIDE:\n                    return (fx >= 0) ? x : (leftUpdated ? x0 : x1);\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // Check whether the interval width is within the allowed tolerance.\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x;\n                case LEFT_SIDE:\n                    return leftUpdated ? x0 : x1;\n                case RIGHT_SIDE:\n                    return leftUpdated ? x1 : x0;\n                case BELOW_SIDE:\n                    return (fx <= 0) ? x : (leftUpdated ? x0 : x1);\n                case ABOVE_SIDE:\n                    return (fx >= 0) ? x : (leftUpdated ? x0 : x1);\n                default:\n                    throw new MathInternalError();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}