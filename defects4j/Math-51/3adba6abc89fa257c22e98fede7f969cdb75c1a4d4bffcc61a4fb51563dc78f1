{
    "generation": "/** {@inheritDoc} */\nprotected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // In this implementation the two endpoints are maintained as follows:\n    //   x0 is the lower bound and x1 is the upper bound.\n    // The false position formula used is\n    //      x = x1 - f1*(x1 - x0)/(f1 - f0)\n    // After the new candidate x is computed we decide which endpoint to replace.\n    // Standard (Illinois/Pegasus) regula falsi would replace the endpoint whose function\n    // value has the same sign as f(x). In our corrected code the test is performed using f0.\n    // (That is, if f0 and f(x) have opposite signs, then the root lies between x0 and x,\n    //  so the new candidate becomes the upper bound; otherwise, it becomes the lower bound.)\n    //\n    // We'll use the 'inverted' flag to later choose which bound to return if the interval\n    // is small or the function value is nearly zero.\n    boolean inverted = false;\n\n    // Keep finding better approximations.\n    while (true) {\n        // Compute the next approximation using the false position formula.\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n\n        // If the new approximation is the exact root, return it.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Update the bounds with the new approximation.\n        // (Note: f0 and f1 have opposite signs.)\n        if (f0 * fx < 0) {\n            // The sign change is between x0 and x, so the new upper bound should be x.\n            x1 = x;\n            f1 = fx;\n            inverted = false;\n        } else {\n            // Otherwise the sign change is between x and x1, so update the lower bound.\n            x0 = x;\n            f0 = fx;\n            // Apply the Illinois/Pegasus modification on the endpoint that stayed fixed.\n            switch (method) {\n                case ILLINOIS:\n                    f1 *= 0.5;\n                    break;\n                case PEGASUS:\n                    // (This scaling is equivalent to multiplying by 1/2 when f0==fx.)\n                    f1 *= f0 / (f0 + fx);\n                    break;\n                default:\n                    // Should never happen.\n            }\n            inverted = true;\n        }\n\n        // If the function value is sufficiently small, return the current approximation.\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // If the current interval is within the desired accuracies, return one of the bounds.\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}