{
    "generation": "    /** {@inheritDoc} */\n    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep track of old f values for Illinois/Pegasus adjustments.\n        // These store the function values of x0 and x1 from the *start* of the current iteration.\n        double oldf0 = f0;\n        double oldf1 = f1;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Calculate the next approximation.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            // If f(x) and f(x1) have opposite signs (root in (x, x1)).\n            // This means x0 is conceptually updated to x, and x1 is the fixed point.\n            if (f1 * fx < 0) {\n                // The point x1 is retained. Its function value f1 should be adjusted if\n                // x1 was also retained in the previous iteration.\n                // oldf0 * fx > 0 means f(x0_prev) and f(x_current) have the same sign.\n                // This implies that x1 was the fixed point in the previous iteration as well.\n                if (oldf0 * fx > 0) {\n                    switch (method) {\n                    case ILLINOIS:\n                        f1 *= 0.5; // Adjust f1 (value at the fixed point x1)\n                        break;\n                    case PEGASUS:\n                        // Pegasus adjustment: f_retained *= f_other_side_old / (f_other_side_old + f_new_point)\n                        // Here f1 is retained, oldf0 is the other side, fx is the new point's value.\n                        f1 *= oldf0 / (oldf0 + fx); // Adjust f1\n                        break;\n                    default:\n                        // Should never happen.\n                    }\n                }\n                x0 = x1;\n                f0 = f1; // f0 takes the potentially adjusted f1 value\n                inverted = !inverted;\n            } else { // f1 * fx >= 0. This implies f(x0) and f(x) have opposite signs (root in (x0, x)).\n                     // The point x0 is retained. Its function value f0 should be adjusted if\n                     // x0 was also retained in the previous iteration.\n                // oldf1 * fx > 0 means f(x1_prev) and f(x_current) have the same sign.\n                // This implies that x0 was the fixed point in the previous iteration as well.\n                if (oldf1 * fx > 0) {\n                    switch (method) {\n                    case ILLINOIS:\n                        f0 *= 0.5; // Adjust f0 (value at the fixed point x0)\n                        break;\n                    case PEGASUS:\n                        // Pegasus adjustment to f0: f0 is retained, oldf1 is the other side, fx is new point's value.\n                        f0 *= oldf1 / (oldf1 + fx);\n                        break;\n                    default:\n                        // Should never happen.\n                    }\n                }\n            }\n\n            // Update old f values for next iteration.\n            // These must reflect the current state of f0 and f1 after potential adjustments.\n            oldf0 = f0;\n            oldf1 = f1;\n\n            // Update from [x0, x1] to [x0, x].\n            // This line ensures that x1 and f1 always hold the latest approximation found (x and fx).\n            x1 = x;\n            f1 = fx;\n\n            // If the function value of the last approximation is too small,\n            // given the function value accuracy, then we can't get closer to\n            // the root than we already are.\n            if (FastMath.abs(f1) <= ftol) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n\n            // If the current interval is within the given accuracies, we\n            // are satisfied with the current approximation.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}