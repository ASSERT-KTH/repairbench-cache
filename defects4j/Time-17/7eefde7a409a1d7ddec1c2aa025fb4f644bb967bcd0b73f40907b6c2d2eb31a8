{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     *\n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // Find the transition potentially related to this instant.\n        // previousTransition(instant + 1) ensures we find the transition <= (instant + 1).\n        // This helps find the relevant transition boundary correctly, even if 'instant'\n        // itself is exactly on the transition.\n        long transition = previousTransition(instant + 1);\n\n        // Get the offsets before and after the transition.\n        long offsetBefore = getOffset(transition - 1);\n        long offsetAfter = getOffset(transition); // This is the offset that applies from 'transition' onwards.\n\n        // If offsets are equal, it wasn't a transition causing an offset change relevant to overlaps.\n        if (offsetBefore == offsetAfter) {\n            return instant; // Not an overlap scenario for this transition.\n        }\n\n        // Check specifically for an overlap condition (clock winds back, offset decreases, e.g., -02:00 -> -03:00).\n        // In this case, offsetBefore > offsetAfter numerically.\n        if (offsetBefore > offsetAfter) {\n            // Calculate the local time corresponding to the input instant using its actual offset.\n            long currentOffset = getOffset(instant);\n            long local = instant + currentOffset;\n\n            // Determine the UTC instant associated with the later offset for this local time.\n            // convertLocalToUTC(local, false) reliably returns the later instant in an overlap.\n            // The 'false' means non-strict, resolving ambiguity by choosing the later mapping.\n            long utcLater = convertLocalToUTC(local, false);\n\n            if (instant == utcLater) {\n                // The input instant was already the one with the later offset.\n                // This happens if getOffset(instant) returned offsetAfter.\n                if (earlierOrLater) {\n                    // User wants the later offset, which is what we have, return the input instant.\n                    return instant;\n                } else {\n                    // User wants the earlier offset. Calculate the UTC instant corresponding\n                    // to the same local time but using the offset before the transition.\n                    long utcEarlier = local - offsetBefore;\n                    // Ensure the calculated earlier instant is different from the input.\n                    // This guards against cases where the local time might not truly be ambiguous\n                    // or if the input instant didn't fall into the overlap range as expected.\n                    if (utcEarlier != instant) {\n                        return utcEarlier;\n                    } else {\n                        // Fallback: If calculation didn't yield a different instant,\n                        // return the original instant (should be rare in true overlaps).\n                        return instant;\n                    }\n                }\n            } else {\n                // The input instant was the one with the earlier offset.\n                // This implies getOffset(instant) returned offsetBefore, and instant != utcLater.\n                if (earlierOrLater) {\n                    // User wants the later offset, return the calculated utcLater.\n                    return utcLater;\n                } else {\n                    // User wants the earlier offset, which is what we have, return the input instant.\n                    return instant;\n                }\n            }\n        } else {\n            // This transition is a gap (offsetBefore < offsetAfter), not an overlap.\n            // The adjustOffset method is specifically for resolving overlap ambiguity.\n            // For gaps, or instants outside overlaps, no adjustment is needed.\n            return instant;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}