{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        \n        // evaluate if anything is happening over the 2-day period,\n        // if not then nothing to do.\n        // Changed to use getOffset for a more robust check of offset stability.\n        if (getOffset(instant - DateTimeConstants.MILLIS_PER_DAY) == getOffset(instant + DateTimeConstants.MILLIS_PER_DAY)) {\n            return instant;  // not an overlap or gap in the surrounding 2 days\n        }\n        \n        // work out range of instants that have duplicate local times\n        long local = convertUTCToLocal(instant); // This gets the local time value for the input instant\n        \n        // Determine the hint for convertLocalToUTC.\n        // The original code passed local millis here, which was a bug.\n        // Calculate 'instantWithOffset' by adding the current UTC offset to the instant.\n        // This 'instantWithOffset' numerically represents the local time of 'instant',\n        // but when passed as a 'sourceInstant' to convertLocalToUTC, it's interpreted as a UTC hint.\n        long offset = getOffset(instant);\n        long instantWithOffset = instant + offset;\n        \n        // calculate result\n        if (earlierOrLater) {\n            // We want the later offset in case of an overlap.\n            // Provide a hint slightly after the current instant's local value (interpreted as UTC)\n            // to guide convertLocalToUTC towards the later offset.\n            return convertLocalToUTC(local, false, instantWithOffset + 1);\n        } else {\n            // We want the earlier offset in case of an overlap.\n            // Provide a hint slightly before the current instant's local value (interpreted as UTC)\n            // to guide convertLocalToUTC towards the earlier offset.\n            return convertLocalToUTC(local, false, instantWithOffset - 1);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}