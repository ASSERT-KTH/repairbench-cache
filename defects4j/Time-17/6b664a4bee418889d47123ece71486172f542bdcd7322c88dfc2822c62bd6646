{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // Get the offset at the current instant\n        int offset = getOffset(instant);\n\n        // Find the transition defining the start of the period including 'instant'.\n        // Adding 1ms handles cases where 'instant' is exactly at a transition.\n        long prevTrans = previousTransition(instant + 1);\n\n        // Check if the transition at prevTrans resulted in an overlap (offset decreased).\n        // We need the offset *before* prevTrans for this comparison.\n        if (prevTrans != Long.MIN_VALUE) {\n            int offsetPrev = getOffset(prevTrans - 1); // Offset before the transition\n            int offsetAtPrev = getOffset(prevTrans); // Offset immediately after the transition\n\n            // Check if offset decreased (e.g., -2h to -3h) indicating an overlap started.\n            if (offsetAtPrev < offsetPrev) { \n                long duration = (long)offsetPrev - offsetAtPrev; // Duration of the overlap in milliseconds\n                long overlapEndUTC = prevTrans + duration; // UTC time when the overlap effect ends\n\n                // Check if 'instant' falls within the second part of the overlap interval (UTC).\n                // The instant must be within [prevTrans, overlapEndUTC)\n                // AND it must be using the later offset (offsetAtPrev).\n                if (instant >= prevTrans && instant < overlapEndUTC && offset == offsetAtPrev) { \n                    // Instant is in the second half of the overlap.\n                    long local = instant + offset; // Calculate the local time\n                    // Calculate the UTC instant corresponding to the same local time but using the earlier offset.\n                    long earlierUTC = local - offsetPrev; \n                    // Calculate the UTC instant corresponding to the same local time but using the later offset.\n                    long laterUTC = local - offsetAtPrev; // This should == instant\n\n                    // Return the UTC instant corresponding to the requested offset (earlier or later).\n                    return earlierOrLater ? laterUTC : earlierUTC;\n                }\n            }\n        }\n\n        // Find the transition defining the end of the period including 'instant'.\n        long nextTrans = nextTransition(instant);\n        \n        // If nextTrans is the same as instant, or MAX_VALUE, there's no relevant upcoming transition.\n        if (nextTrans == instant || nextTrans == Long.MAX_VALUE) {\n             return instant; // Instant is not in the first part of an overlap.\n        }\n\n        // Get the offset that will apply after the next transition.\n        int offsetNext = getOffset(nextTrans);\n\n        // Check if the offset will decrease at nextTrans (e.g., -2h to -3h), indicating an overlap will start.\n        // The current instant must be before nextTrans and use the earlier offset (offset > offsetNext).\n        if (offset > offsetNext) {\n            // Overlap starts at nextTrans. Check if the *local time* of the current instant\n            // falls into the ambiguous range of local times created by this overlap.\n            long local = instant + offset; // Local time using the current (earlier) offset\n            \n            // Calculate the start and end of the ambiguous local time range.\n            long overlapLocalStart = nextTrans + offsetNext; // Start of local range (using later offset)\n            long overlapLocalEnd = nextTrans + offset;      // End of local range (using earlier offset)\n\n            // Check if the calculated local time falls within the ambiguous range.\n            if (local >= overlapLocalStart && local < overlapLocalEnd) {\n                 // The local time is ambiguous. 'instant' is in the first half of the overlap.\n                 // Calculate the UTC instant for the earlier offset (should be == instant).\n                 long earlierUTC = local - offset; \n                 // Calculate the UTC instant for the later offset.\n                 long laterUTC = local - offsetNext; \n                 \n                 // Return the UTC instant corresponding to the requested offset (earlier or later).\n                 return earlierOrLater ? laterUTC : earlierUTC;\n            }\n        }\n\n        // If the instant is not part of an overlap requiring adjustment, return it unchanged.\n        return instant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}