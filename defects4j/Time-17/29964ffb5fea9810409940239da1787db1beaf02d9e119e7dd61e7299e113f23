{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust (UTC milliseconds)\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis (UTC milliseconds)\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        \n        // evaluate 3 hours before and after to work out if anything is happening\n        // These are local time milliseconds to detect transitions.\n        long instantBeforeLocal = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfterLocal = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        \n        if (instantBeforeLocal == instantAfterLocal) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n        \n        // work out local time corresponding to the given instant\n        long local = convertUTCToLocal(instant);\n        \n        // Determine the correct reference instant (UTC milliseconds) for convertLocalToUTC.\n        // This reference instant's offset will guide the conversion in an overlap.\n        long referenceInstantForConversion;\n        if (earlierOrLater) {\n            // To get the later offset, use a reference instant that is safely in the later offset period.\n            // Adding a day typically ensures we are past any daily transition.\n            referenceInstantForConversion = instant + DateTimeConstants.MILLIS_PER_DAY;\n        } else {\n            // To get the earlier offset, use a reference instant that is safely in the earlier offset period.\n            // Subtracting a day typically ensures we are before any daily transition.\n            referenceInstantForConversion = instant - DateTimeConstants.MILLIS_PER_DAY;\n        }\n        \n        // Convert the local time back to UTC, using the determined reference instant\n        // to pick the correct offset during an overlap.\n        return convertLocalToUTC(local, false, referenceInstantForConversion);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}