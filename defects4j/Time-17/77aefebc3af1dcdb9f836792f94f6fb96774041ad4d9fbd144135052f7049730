{
    "generation": "/**\n * Adjusts the offset to be the earlier or later one during an overlap.\n *\n * @param instant the instant to adjust\n * @param earlierOrLater false for earlier, true for later\n * @return the adjusted instant millis\n */\npublic long adjustOffset(long instant, boolean earlierOrLater) {\n    // Evaluate 3 hours before and after to work out if anything is happening\n    long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n\n    // Check if there is an overlap\n    if (instantBefore == instantAfter) {\n        return instant;  // not an overlap (less than is a gap, equal is normal case)\n    }\n\n    // Work out range of instants that have duplicate local times\n    long local = convertUTCToLocal(instant);\n\n    // Determine the correct instant to return based on the earlierOrLater flag\n    if (earlierOrLater) {\n        // Return the later instant\n        return convertLocalToUTC(local, false, instantAfter);\n    } else {\n        // Return the earlier instant\n        return convertLocalToUTC(local, false, instantBefore);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}