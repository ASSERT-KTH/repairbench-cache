{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // evaluate 3 hours before and after to work out if anything is happening\n        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        int offsetBefore = getOffset(instantBefore);\n        int offsetAfter = getOffset(instantAfter);\n        int offsetInstant = getOffset(instant);\n\n        if (offsetBefore == offsetAfter && offsetInstant == offsetBefore) {\n            // No overlap, just return as is\n            return instant;\n        }\n\n        // work out range of local times that have overlap\n        long localInstant = instant + offsetInstant;\n        int earlierOffset;\n        int laterOffset;\n        if (offsetBefore > offsetAfter) {\n            // Fall back, overlapping local times, earlier is after, later is before\n            earlierOffset = offsetAfter;\n            laterOffset = offsetBefore;\n        } else {\n            // Spring forward, should never overlap, but just in case\n            earlierOffset = offsetBefore;\n            laterOffset = offsetAfter;\n        }\n\n        long earlierInstant = localInstant - earlierOffset;\n        long laterInstant = localInstant - laterOffset;\n\n        // Choose preferred instant in the overlap\n        if (instant >= earlierInstant && instant < laterInstant) {\n            // In the overlap range\n            return earlierOrLater ? laterInstant : earlierInstant;\n        } else {\n            // Not in overlap, just return as is\n            return instant;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}