{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        \n        // evaluate 3 hours before and after to work out if anything is happening\n        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        long offsetBefore = getOffset(instantBefore);\n        long offsetAfter = getOffset(instantAfter);\n        long offsetAtInstant = getOffset(instant);\n\n        if (offsetBefore <= offsetAfter) {\n            // No overlap, or gap\n            return instant;\n        }\n        \n        // There is an overlap. The offset is decreasing (e.g. DST ends, clocks go backward).\n        // So for a given local time, there are two possible instants.\n        // Earlier/later refers to the offset: earlier = bigger offset, later = smaller offset.\n\n        long local = instant + offsetAtInstant;\n\n        // The two candidate instants for this local time:\n        long instant1 = local - offsetBefore;\n        long instant2 = local - offsetAfter;\n\n        // sort\n        long earlierInstant = instant1 < instant2 ? instant1 : instant2;\n        long laterInstant = instant1 < instant2 ? instant2 : instant1;\n\n        // Pick the one matching the request:\n        return earlierOrLater ? laterInstant : earlierInstant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}