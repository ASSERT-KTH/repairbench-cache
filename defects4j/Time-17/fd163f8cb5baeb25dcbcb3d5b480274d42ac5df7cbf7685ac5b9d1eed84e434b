{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        // evaluate 3 hours before and after to work out if anything is happening\n// buggy code\n//        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n//        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n//        if (instantBefore == instantAfter) {\n//            return instant;  // not an overlap (less than is a gap, equal is normal case)\n//        }\n//        // work out range of instants that have duplicate local times\n//        long local = convertUTCToLocal(instant);\n//        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n//        // calculate result\n//          // currently in later offset\n//          // currently in earlier offset\n        long instantBefore = convertUTCToLocal(instant - 15 * DateTimeConstants.MILLIS_PER_MINUTE);\n        long instantAfter = convertUTCToLocal(instant + 15 * DateTimeConstants.MILLIS_PER_MINUTE);\n        if (instantBefore == instantAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n        // work out range of instants that have duplicate local times\n        long local = convertUTCToLocal(instant);\n        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}