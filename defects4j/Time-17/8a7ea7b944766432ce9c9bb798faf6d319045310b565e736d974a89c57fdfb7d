{
    "generation": "/**\n * Adjusts the offset to be the earlier or later one during an overlap.\n * \n * @param instant  the instant to adjust\n * @param earlierOrLater  false for earlier, true for later\n * @return the adjusted instant millis\n */\npublic long adjustOffset(long instant, boolean earlierOrLater) {\n    // evaluate 3 hours before and after to work out if anything is happening\n    long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    if (instantBefore == instantAfter) {\n        return instant;  // not an overlap (less than is a gap, equal is normal case)\n    }\n\n    // work out range of instants that have duplicate local times\n    long local = convertUTCToLocal(instant);\n    long diffBefore = instant - convertLocalToUTC(local, false, instantBefore);\n    long diffAfter = convertLocalToUTC(local, false, instantAfter) - instant;\n\n    if (diffBefore < 0) diffBefore = Long.MAX_VALUE;\n    if (diffAfter < 0) diffAfter = Long.MAX_VALUE;\n\n    // Check if instant is closer to before or after instant\n    if (diffAfter < diffBefore) {\n        // closer to instantAfter (later offset)\n        return earlierOrLater ? convertLocalToUTC(local, false, instantAfter) : convertLocalToUTC(local, false, instantBefore);\n    } else {\n        // closer to instantBefore (earlier offset)\n        return earlierOrLater ? convertLocalToUTC(local, false, instantAfter) : convertLocalToUTC(local, false, instantBefore);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}