{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        \n        // evaluate 3 hours before and after to work out if anything is happening\n        // These are local milliseconds, not UTC instants.\n        long instantBeforeLocal = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfterLocal = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        \n        // If the local times before and after a 6-hour window around 'instant' are the same,\n        // it means there's no DST change (overlap or gap) that affects this 'instant' in a significant way.\n        // In such a case, the instant is not ambiguous, so return it as is.\n        // (Less than indicates a gap, equal is normal case, greater than indicates an overlap\n        //  when comparing local times derived from surrounding UTC instants).\n        if (instantBeforeLocal == instantAfterLocal) {\n            return instant;  \n        }\n        \n        // Work out the local time corresponding to the original UTC instant.\n        // This local time might be ambiguous during an overlap (e.g., occurs twice).\n        long local = convertUTCToLocal(instant);\n        \n        // Adjust the offset to be the earlier or later one during an overlap.\n        // The convertLocalToUTC method takes a 'reference instant' to resolve ambiguities.\n        // As per DateTimeZone.convertLocalToUTC Javadoc, passing 0L will default to the earlier UTC instant,\n        // and passing Long.MAX_VALUE will default to the later UTC instant when local time is ambiguous.\n        long referenceInstantForConvertLocalToUTC = earlierOrLater ? Long.MAX_VALUE : 0L;\n        \n        return convertLocalToUTC(local, false, referenceInstantForConvertLocalToUTC);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}