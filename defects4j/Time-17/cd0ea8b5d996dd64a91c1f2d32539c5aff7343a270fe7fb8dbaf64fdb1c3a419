{
    "generation": "/**\n * Adjusts the offset to be the earlier or later one during an overlap.\n * \n * @param instant  the instant to adjust\n * @param earlierOrLater  false for earlier, true for later\n * @return the adjusted instant millis\n */\npublic long adjustOffset(long instant, boolean earlierOrLater) {\n    // Evaluate 3 hours before and after to detect an overlap situation\n    long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    if (instantBefore == instantAfter) {\n        return instant; // Not an overlap (not ambiguous)\n    }\n\n    // In an overlap\n    long local = convertUTCToLocal(instant);\n    long earlierInstant = convertLocalToUTC(local, false, instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    long laterInstant = convertLocalToUTC(local, false, instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n\n    long diffEarlier = Math.abs(instant - earlierInstant);\n    long diffLater = Math.abs(instant - laterInstant);\n\n    // Only switch if the instant isn't already at the requested offset\n    // If already at earlier/later, return as is, else return alternative\n    if (diffEarlier < diffLater) {\n        return earlierOrLater ? laterInstant : instant;\n    } else if (diffLater < diffEarlier) {\n        return earlierOrLater ? instant : earlierInstant;\n    } else {\n        // Already at both? return as is\n        return instant;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}