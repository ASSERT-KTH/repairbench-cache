{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        \n        // evaluate 3 hours before and after to work out if anything is happening\n        // These variables hold local time values, not UTC instants.\n        long instantBeforeLocalProbe = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfterLocalProbe = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n\n        // This check attempts to identify if 'instant' is in a normal period, a gap, or an overlap.\n        // If instantBeforeLocalProbe == instantAfterLocalProbe, it implies a normal period.\n        // While the condition's robustness for detecting non-overlap/gap is debatable,\n        // the subsequent fixed call to convertLocalToUTC will correctly handle non-ambiguous cases.\n        if (instantBeforeLocalProbe == instantAfterLocalProbe) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n        \n        // work out range of instants that have duplicate local times\n        long local = convertUTCToLocal(instant);\n        \n        // The third parameter of convertLocalToUTC(long instantLocal, boolean strict, long nonNullInstant)\n        // expects a UTC instant (nonNullInstant) to help resolve ambiguity.\n        // The original code passed local time values (instantAfterLocalProbe / instantBeforeLocalProbe),\n        // which is incorrect according to the method signature.\n        //\n        // To fix this, we need to pass a UTC instant that falls within the desired offset period.\n        // Adding/subtracting 3 hours from the original instant creates a UTC reference\n        // that is likely in the \"later\" or \"earlier\" offset context, respectively,\n        // assisting convertLocalToUTC in picking the correct ambiguous instant.\n        long nonNullReferenceInstant = earlierOrLater ? \n                                       (instant + 3 * DateTimeConstants.MILLIS_PER_HOUR) : // Reference for the later offset\n                                       (instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);  // Reference for the earlier offset\n        \n        return convertLocalToUTC(local, false, nonNullReferenceInstant);\n        \n        // calculate result\n          // currently in later offset\n          // currently in earlier offset\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}