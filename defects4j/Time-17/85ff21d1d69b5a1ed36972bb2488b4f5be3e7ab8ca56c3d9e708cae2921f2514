{
    "generation": "/**\n * Adjusts the offset to be the earlier or later one during an overlap.\n * \n * @param instant  the instant to adjust\n * @param earlierOrLater  false for earlier, true for later\n * @return the adjusted instant millis\n */\npublic long adjustOffset(long instant, boolean earlierOrLater) {\n    // evaluate 3 hours before and after to work out if anything is happening\n    long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n    if (instantBefore == instantAfter) {\n        return instant;  // not an overlap (less than is a gap, equal is normal case)\n    }\n\n    // work out range of instants that have duplicate local times\n    // Find the two candidate UTC times for the same local time\n    long local = convertUTCToLocal(instant);\n\n    // Since there is an overlap, find both possible instants for this local time\n    long earlierInstant = convertLocalToUTC(local, false, instantBefore);\n    long laterInstant = convertLocalToUTC(local, false, instantAfter);\n\n    // earlierInstant < laterInstant always in an overlap\n    // Decide which to pick based on the parameter, or pick the current instant if it's already at the right one\n\n    // Return the instant matching the desired offset\n    if (earlierOrLater) {\n        // prefer later offset\n        if (instant != laterInstant) {\n            return laterInstant;\n        } else {\n            return instant;\n        }\n    } else {\n        // prefer earlier offset\n        if (instant != earlierInstant) {\n            return earlierInstant;\n        } else {\n            return instant;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}