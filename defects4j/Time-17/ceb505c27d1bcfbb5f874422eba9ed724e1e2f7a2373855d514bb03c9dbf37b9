{
    "generation": "    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        \n        // evaluate 3 hours before and after to work out if anything is happening\n        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n\n        // work out range of instants that have duplicate local times\n        long local = convertUTCToLocal(instant);\n\n        // Find the two offsets at this local time (earlier and later)\n        long earlierInstant = convertLocalToUTC(local, false, instantBefore);\n        long laterInstant = convertLocalToUTC(local, false, instantAfter);\n\n        // Choose which instant to return based on earlierOrLater\n        // In overlap, earlierInstant > laterInstant\n        // But we want 'earlier' to pick the earlier offset, which is the larger UTC instant (since earlier offset = more minutes ahead of UTC)\n        // So pick the one closer to the current instant in the right direction\n        if (instant - earlierInstant < 0 && instant - laterInstant > 0) {\n            // We are in the gap, just return as per earlierOrLater\n            return earlierOrLater ? laterInstant : earlierInstant;\n        }\n        if (earlierOrLater) {\n            // Return later offset\n            return laterInstant;\n        } else {\n            // Return earlier offset\n            return earlierInstant;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}