{
    "generation": "    /**\n     * Adjusts the offset to be the earlier or later one during an overlap.\n     * \n     * @param instant  the instant to adjust\n     * @param earlierOrLater  false for earlier, true for later\n     * @return the adjusted instant millis\n     */\n    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n\n        // evaluate 3 hours before and after to work out if anything is happening\n        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n\n        // work out range of instants that have duplicate local times\n        long local = convertUTCToLocal(instant);\n        // Find the two possible UTC instants for this local time.\n        long epochEarlier = convertLocalToUTC(local, false, instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long epochLater = convertLocalToUTC(local, false, instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n\n        // If they are the same, we can't do anything (shouldn't happen).\n        if (epochEarlier == epochLater) {\n            return instant;\n        }\n\n        // Decide which is earlier/later\n        long result;\n        if (earlierOrLater) {\n            // Want the later offset\n            result = (epochEarlier > epochLater) ? epochEarlier : epochLater;\n        } else {\n            // Want the earlier offset\n            result = (epochEarlier < epochLater) ? epochEarlier : epochLater;\n        }\n        // If instant is already at the requested offset, just return it\n        if (result == instant) {\n            return instant;\n        }\n        // But only return the alternative if it really maps to the same local millis\n        if (convertUTCToLocal(result) == local) {\n            return result;\n        }\n        return instant;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}