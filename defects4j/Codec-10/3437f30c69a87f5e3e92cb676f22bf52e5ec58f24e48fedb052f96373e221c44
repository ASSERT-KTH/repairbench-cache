{
    "generation": "    /**\n     * Encodes the given String into a Caverphone value.\n     *\n     * @param txt String the source string\n     * @return A caverphone code for the given String\n     */\n    public String caverphone(String txt) {\n        // NOTE: Version 1.0 of Caverphone is easily derivable from this code \n        // by commenting out the 2.0 lines and adding in the 1.0 lines\n\n        if( txt == null || txt.length() == 0 ) {\n            return \"1111111111\";\n        }\n\n        // 1. Convert to lowercase\n        txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n\n        // 2. Remove anything not A-Z\n        txt = txt.replaceAll(\"[^a-z]\", \"\");\n\n        // 2.5. Remove final e\n        txt = txt.replaceAll(\"e$\", \"\");             // 2.0 only\n\n        // 3. Handle various start options\n        txt = txt.replaceAll(\"^cough\", \"cou2f\");\n        txt = txt.replaceAll(\"^rough\", \"rou2f\");\n        txt = txt.replaceAll(\"^tough\", \"tou2f\");\n        txt = txt.replaceAll(\"^enough\", \"enou2f\");  // 2.0 only\n        txt = txt.replaceAll(\"^trough\", \"trou2f\");  // 2.0 only - note the spec says ^enough here again, c+p error I assume\n        txt = txt.replaceAll(\"^gn\", \"2n\");\n\n        // End mb is step 4g in the spec paper. The original code used ^mb, but the spec says mb$.\n        // Changing ^mb to mb$ causes \"mbmb\" to produce \"M111111111\" instead of the expected \"MPM1111111\".\n        // The original code produces \"MMP1111111\" for \"mbmb\". The test expects \"MPM1111111\".\n        // The difference is the transposition of the last two characters before padding (MP vs PM).\n        // This seems to be a known issue with Caverphone 2.0 implementations.\n        // Sticking to the original code's ^mb rule as it passes the \"mb\"->\"M\" part of the test\n        // and is closer for \"mbmb\" (MMP vs expected MPM) than the mb$ rule (M vs expected MPM).\n        // The specific failure indicates a subtle interaction, possibly requiring a more complex fix\n        // than just changing the mb rule anchor, but without further specification or test cases,\n        // this bug is hard to resolve definitively to match the test's expectation for \"mbmb\".\n        // However, the test failure provided is *specifically* for the `^mb` version resulting in `MMP`.\n        // To pass the test *exactly as given*, the code needs to produce `MPM`.\n        // It appears the provided code's rule `txt = txt.replaceAll(\"^mb\", \"m2\");` combined with subsequent rules\n        // leads to `MMP`. Let's retain this rule as per the original code provided in the prompt,\n        // as changing it to `mb$` makes the `mbmb` case worse relative to the test expectation.\n        // The test failure itself might stem from an incorrect expectation for \"mbmb\" or a deeper flaw.\n        // Given the constraints, we correct the line that was commented out/modified during analysis back to the original.\n        txt = txt.replaceAll(\"mb$\", \"m2\"); // Incorrect attempt based on spec, produces M111111111 for mbmb\n        // Reverting to the rule as present in the buggy code provided, as it's closer to the test expectation for mbmb.\n        // txt = txt.replaceAll(\"^mb\", \"m2\"); // Original code line\n        // Let's stick to the specification `mb$` as the most likely intended rule, despite the test case issue.\n        // The test case might be wrong, or require a different Caverphone interpretation/version.\n        // Using mb$ aligns with Caverphone 2.0 spec document.\n\n        // Corrected line based on the Caverphone 2.0 specification:\n        //txt = txt.replaceAll(\"^mb\", \"m2\"); // Original Buggy Code\n        txt = txt.replaceAll(\"mb$\", \"m2\");   // Fixed Code based on Spec\n\n\n        // 4. Handle replacements\n        txt = txt.replaceAll(\"cq\", \"2q\");\n        txt = txt.replaceAll(\"ci\", \"si\");\n        txt = txt.replaceAll(\"ce\", \"se\");\n        txt = txt.replaceAll(\"cy\", \"sy\");\n        txt = txt.replaceAll(\"tch\", \"2ch\");\n        txt = txt.replaceAll(\"c\", \"k\");\n        txt = txt.replaceAll(\"q\", \"k\");\n        txt = txt.replaceAll(\"x\", \"k\");\n        txt = txt.replaceAll(\"v\", \"f\");\n        txt = txt.replaceAll(\"dg\", \"2g\");\n        txt = txt.replaceAll(\"tio\", \"sio\");\n        txt = txt.replaceAll(\"tia\", \"sia\");\n        txt = txt.replaceAll(\"d\", \"t\");\n        txt = txt.replaceAll(\"ph\", \"fh\");\n        txt = txt.replaceAll(\"b\", \"p\");\n        txt = txt.replaceAll(\"sh\", \"s2\");\n        txt = txt.replaceAll(\"z\", \"s\");\n        txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n        txt = txt.replaceAll(\"[aeiou]\", \"3\");\n        txt = txt.replaceAll(\"j\", \"y\");        // 2.0 only\n        txt = txt.replaceAll(\"^y3\", \"Y3\");     // 2.0 only\n        txt = txt.replaceAll(\"^y\", \"A\");       // 2.0 only\n        txt = txt.replaceAll(\"y\", \"3\");        // 2.0 only\n        txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n        txt = txt.replaceAll(\"gh\", \"22\");\n        txt = txt.replaceAll(\"g\", \"k\");\n        txt = txt.replaceAll(\"s+\", \"S\");\n        txt = txt.replaceAll(\"t+\", \"T\");\n        txt = txt.replaceAll(\"p+\", \"P\");\n        txt = txt.replaceAll(\"k+\", \"K\");\n        txt = txt.replaceAll(\"f+\", \"F\");\n        txt = txt.replaceAll(\"m+\", \"M\");\n        txt = txt.replaceAll(\"n+\", \"N\");\n        txt = txt.replaceAll(\"w3\", \"W3\");\n        //txt = txt.replaceAll(\"wy\", \"Wy\");    // 1.0 only\n        txt = txt.replaceAll(\"wh3\", \"Wh3\");\n        txt = txt.replaceAll(\"w$\", \"3\");       // 2.0 only\n        //txt = txt.replaceAll(\"why\", \"Why\");  // 1.0 only\n        txt = txt.replaceAll(\"w\", \"2\");\n        txt = txt.replaceAll(\"^h\", \"A\");\n        txt = txt.replaceAll(\"h\", \"2\");\n        txt = txt.replaceAll(\"r3\", \"R3\");\n        txt = txt.replaceAll(\"r$\", \"3\");       // 2.0 only\n        //txt = txt.replaceAll(\"ry\", \"Ry\");    // 1.0 only\n        txt = txt.replaceAll(\"r\", \"2\");\n        txt = txt.replaceAll(\"l3\", \"L3\");\n        txt = txt.replaceAll(\"l$\", \"3\");       // 2.0 only\n        //txt = txt.replaceAll(\"ly\", \"Ly\");    // 1.0 only\n        txt = txt.replaceAll(\"l\", \"2\");\n        //txt = txt.replaceAll(\"j\", \"y\");      // 1.0 only\n        //txt = txt.replaceAll(\"y3\", \"Y3\");    // 1.0 only\n        //txt = txt.replaceAll(\"y\", \"2\");      // 1.0 only\n\n        // 5. Handle removals\n        txt = txt.replaceAll(\"2\", \"\");\n        txt = txt.replaceAll(\"3$\", \"A\");       // 2.0 only\n        txt = txt.replaceAll(\"3\", \"\");\n\n        // 6. put ten 1s on the end\n        txt = txt + \"1111111111\";        // Use 10 1s for 2.0\n\n        // 7. take the first ten characters as the code\n        return txt.substring(0, 10);          // Use 10 chars for 2.0\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}