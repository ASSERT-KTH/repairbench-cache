{
    "generation": "  /**\n   * @return Whether the Node is a DO or FUNCTION (with or without\n   * labels).\n   */\n  private boolean isOneExactlyFunctionOrDo(Node n) {\n    // If the node itself is a FUNCTION or DO, return true.\n    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {\n      return true;\n    }\n\n    // For labels with block children, we need to ensure that a\n    // labeled FUNCTION or DO isn't generated when extraneous BLOCKs\n    // are skipped. This means if a LABEL node's child is a FUNCTION or DO,\n    // it should also be treated as a \"FUNCTION or DO\" for compatibility purposes,\n    // forcing it to be wrapped in a block if necessary.\n    if (n.getType() == Token.LABEL) {\n      // A LABEL node has two children: the label name (a STRING node)\n      // and the actual labeled statement. We need to check the type of the\n      // labeled statement (the second child, at index 1).\n      if (n.hasChildren() && n.getChildCount() >= 2) {\n        Node labeledStatement = n.getChildAtIndex(1);\n        return (labeledStatement.getType() == Token.FUNCTION || labeledStatement.getType() == Token.DO);\n      }\n    }\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}