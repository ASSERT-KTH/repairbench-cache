{
    "generation": "  /**\n   * @return Whether the Node is a DO or FUNCTION (with or without\n   * labels).\n   */\n  private boolean isOneExactlyFunctionOrDo(Node n) {\n        // For labels with block children, we need to ensure that a\n        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n        // are skipped. \n          // Either a empty statement or an block with more than one child,\n          // way it isn't a FUNCTION or DO.\n      int type = n.getType();\n      if (type != Token.FUNCTION && type != Token.DO) {\n          return false;\n      }\n      Node parent = n.getParent();\n      if (parent != null) {\n          // Check if the parent is a label, which means this node is labeled.\n          if (parent.getType() == Token.LABEL) {\n              return false;\n          }\n          // Check if the parent is a block with more than one child.\n          if (parent.getType() == Token.BLOCK && parent.getChildCount() != 1) {\n              return false;\n          }\n      }\n      return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}