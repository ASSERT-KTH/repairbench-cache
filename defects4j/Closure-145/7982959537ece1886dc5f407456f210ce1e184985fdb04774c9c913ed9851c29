{
    "generation": "  /**\n   * @return Whether the Node is a DO or FUNCTION (with or without\n   * labels).\n   */\n  private boolean isOneExactlyFunctionOrDo(Node n) {\n        // For labels with block children, we need to ensure that a\n        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n        // are skipped. \n          // Either a empty statement or an block with more than one child,\n          // way it isn't a FUNCTION or DO.\n\n      // First, check if the node itself is a FUNCTION or DO.\n      if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {\n          return true;\n      }\n\n      // If the node is a LABEL, check if its immediate child is a FUNCTION or DO.\n      // This handles cases like `A: function() {...}` or `A: do {...} while (...)`\n      // where the label itself is the statement that needs special handling for compatibility.\n      // We explicitly check that the child is *not* a BLOCK, as a block would already\n      // serve as the wrapper, and no further block is needed. The intent of this\n      // function is to identify a single, \"bare\" function or do statement (potentially labeled)\n      // that might need to be wrapped in a BLOCK for compatibility.\n      if (n.getType() == Token.LABEL && n.hasChildren()) {\n          Node child = n.getFirstChild();\n          // Ensure the child is directly a FUNCTION or DO, not a BLOCK containing one.\n          return (child.getType() == Token.FUNCTION || child.getType() == Token.DO);\n      }\n\n      return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}