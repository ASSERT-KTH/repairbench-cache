{
    "generation": "/**\n * @return Whether the Node is a DO or FUNCTION (with or without\n * labels).\n */\nprivate boolean isOneExactlyFunctionOrDo(Node n) {\n    // For labels with block children, we need to ensure that a\n    // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n    // are skipped.\n    // Either an empty statement or a block with more than one child,\n    // it isn't a single FUNCTION or DO.\n\n    if (n.getType() == Token.LABEL) {\n        Node firstChild = n.getFirstChild();\n        if (firstChild != null && firstChild.getType() == Token.BLOCK) {\n            if (firstChild.hasOneChild()) {\n                Node onlyChild = firstChild.getFirstChild();\n                int type = onlyChild.getType();\n                return type == Token.FUNCTION || type == Token.DO;\n            }\n            return false;\n        } else {\n            int type = firstChild != null ? firstChild.getType() : -1;\n            return type == Token.FUNCTION || type == Token.DO;\n        }\n    } else if (n.getType() == Token.BLOCK) {\n        if (n.hasOneChild()) {\n            Node onlyChild = n.getFirstChild();\n            int type = onlyChild.getType();\n            return type == Token.FUNCTION || type == Token.DO;\n        }\n        return false;\n    } else {\n        return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}