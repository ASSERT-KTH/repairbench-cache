{
    "generation": "/**\n * Get the current solution.\n *\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    // 1) recover values for the original decision variables\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n        int col = columnLabels.indexOf(\"x\" + i);\n        if (col >= 0) {\n            Integer row = getBasicRow(col);\n            coefficients[i] = (row == null ? 0.0 : getEntry(row, getRhsOffset()));\n        } else {\n            coefficients[i] = 0.0;\n        }\n    }\n\n    // 2) if negative variables were allowed, subtract the common shift\n    if (!restrictToNonNegative) {\n        int negCol = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n        if (negCol >= 0) {\n            Integer negRow = getBasicRow(negCol);\n            double shift = (negRow == null ? 0.0 : getEntry(negRow, getRhsOffset()));\n            for (int i = 0; i < coefficients.length; i++) {\n                coefficients[i] -= shift;\n            }\n        }\n    }\n\n    // 3) build the RealPointValuePair with the original objective function\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}