{
    "generation": "/**\n * Get the current solution.\n *\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    // Locate the \"shift\" variable column (introduced for free/unrestricted vars)\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    Integer negativeVarBasicRow = (negativeVarColumn >= 0) \n        ? getBasicRow(negativeVarColumn) \n        : null;\n    double mostNegative = (negativeVarBasicRow == null) \n        ? 0.0 \n        : getEntry(negativeVarBasicRow, getRhsOffset());\n\n    Set<Integer> basicRows = new HashSet<Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        double value;\n        if (colIndex < 0) {\n            // no column for this variable \u2192 it's purely in the shift var\n            value = 0.0;\n        } else {\n            Integer basicRow = getBasicRow(colIndex);\n            if (basicRows.contains(basicRow)) {\n                // same row used by another var \u2192 this one is zero\n                value = 0.0;\n            } else {\n                basicRows.add(basicRow);\n                value = (basicRow == null) \n                    ? 0.0 \n                    : getEntry(basicRow, getRhsOffset());\n            }\n        }\n        // subtract the shift (mostNegative) to recover the original variable value\n        coefficients[i] = value - mostNegative;\n    }\n\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}