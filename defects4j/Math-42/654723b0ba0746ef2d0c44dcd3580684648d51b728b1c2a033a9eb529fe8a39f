{
    "generation": "/**\n * Get the current solution.\n *\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n  int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n  Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n  double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n  Set<Integer> basicRows = new HashSet<Integer>();\n  double[] coefficients = new double[getOriginalNumDecisionVariables()];\n  for (int i = 0; i < coefficients.length; i++) {\n      int colIndex = columnLabels.indexOf(\"x\" + i);\n      if (colIndex < 0) {\n        coefficients[i] = 0;\n        continue;\n      }\n      Integer basicRow = getBasicRow(colIndex);\n          // if the basic row is found to be the objective function row\n          // or if it has already been processed (i.e., in basicRows),\n          // set the coefficient to 0 to avoid double counting\n      if (basicRow == null || basicRows.contains(basicRow)) {\n          coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n      } else {\n          basicRows.add(basicRow);\n          coefficients[i] =\n              (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n              (restrictToNonNegative ? 0 : mostNegative);\n      }\n  }\n  // Ensure all coefficients are non-negative if restrictToNonNegative is true\n  if (restrictToNonNegative) {\n      for (int i = 0; i < coefficients.length; i++) {\n          coefficients[i] = Math.max(coefficients[i], 0);\n      }\n  }\n  return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}