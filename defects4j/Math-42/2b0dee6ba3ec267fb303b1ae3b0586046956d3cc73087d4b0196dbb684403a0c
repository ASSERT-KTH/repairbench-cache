{
    "generation": "    /**\n     * Get the current solution.\n     *\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n        // Locate the \"negative\u2010variable\" column (if any) and its basic row\n        int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n        Integer negativeVarBasicRow =\n            (negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null);\n        double mostNegative = (negativeVarBasicRow == null ?\n                               0 : getEntry(negativeVarBasicRow, getRhsOffset()));\n\n        // Reconstruct the original decision variables\n        int nVars = getOriginalNumDecisionVariables();\n        double[] coefficients = new double[nVars];\n        for (int i = 0; i < nVars; i++) {\n            // find the tableau column for x_i\n            int col = columnLabels.indexOf(\"x\" + i);\n            if (col < 0) {\n                // variable not in tableau \u2192 zero in solution\n                coefficients[i] = 0;\n                continue;\n            }\n            // get its value in the basis (or 0 if non\u2010basic)\n            Integer row = getBasicRow(col);\n            double entry = (row == null ? 0 : getEntry(row, getRhsOffset()));\n            // if we introduced a negative\u2010variable shift, subtract it\n            double value = (restrictToNonNegative ? entry : entry - mostNegative);\n            // discard tiny or negative values due to numeric noise\n            coefficients[i] = (value > 0 ? value : 0);\n        }\n\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}