{
    "generation": "/**\n * Get the current solution.\n *\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n    Set<Integer> basicRows = new HashSet<Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n        }\n        Integer basicRow = getBasicRow(colIndex);\n        // if the basic row is found to be the objective function row\n        // set the coefficient to 0 -> this case handles unconstrained \n        // variables that are still part of the objective function\n        if (basicRows.contains(basicRow)) {\n            // if multiple variables can take a given value\n            // then we choose the first and set the rest equal to 0\n            coefficients[i] = 0 /*- (restrictToNonNegative ? 0 : mostNegative)*/;\n        } else {\n            basicRows.add(basicRow);\n            double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));\n            if (!restrictToNonNegative && negativeVarColumn >= 0) {\n                // Fix for MATH-713: if unrestricted, variables are x = x+ - x-\n                // We must adjust for the negative variable's value\n                int negativeColIndex = columnLabels.indexOf(\"x-\" + i);\n                Integer negativeColBasicRow = negativeColIndex >= 0 ? getBasicRow(negativeColIndex) : null;\n                double negativeVal = (negativeColBasicRow == null ? 0 : getEntry(negativeColBasicRow, getRhsOffset()));\n                value = value - negativeVal;\n            }\n            coefficients[i] = value;\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}