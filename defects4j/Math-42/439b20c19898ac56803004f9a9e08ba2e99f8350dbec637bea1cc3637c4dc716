{
    "generation": "/**\n * Get the current solution.\n *\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    // Note: we use > 0 as in the original code, because by construction the negative variable column\n    // is expected to have an index > 0.\n    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n    Set<Integer> basicRows = new HashSet<Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n        }\n        Integer basicRow = getBasicRow(colIndex);\n        // If the same basic row appears more than once then only the first occurrence gets its value;\n        // the others are set to 0 (after shifting).\n        if (basicRows.contains(basicRow)) {\n            coefficients[i] = 0 - (restrictToNonNegative ? mostNegative : 0);\n        } else {\n            basicRows.add(basicRow);\n            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))\n                             - (restrictToNonNegative ? mostNegative : 0);\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}