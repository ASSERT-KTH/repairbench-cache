{
    "generation": "protected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    // Use >= here so that if the negative variable column is at index 0 it is taken into account.\n    Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n    Set<Integer> basicRows = new HashSet<Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n        }\n        Integer basicRow = getBasicRow(colIndex);\n        double value;\n        if (basicRows.contains(basicRow)) {\n            // If more than one decision variable corresponds to the same basic row,\n            // choose the first and set the rest to 0.\n            value = 0 - (restrictToNonNegative ? 0 : mostNegative);\n        } else {\n            basicRows.add(basicRow);\n            value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()))\n                    - (restrictToNonNegative ? 0 : mostNegative);\n        }\n        // When restricting to non-negative variables, any tiny negative value is clamped to 0.\n        if (restrictToNonNegative && value < 0) {\n            value = 0;\n        }\n        coefficients[i] = value;\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}