{
    "generation": "/**\n * Get the current solution.\n *\n * @return current solution\n */\nprotected RealPointValuePair getSolution() {\n    // find the \u201cnegative\u2010variable\u201d column if one exists\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    Integer negativeVarBasicRow = (negativeVarColumn >= 0)\n                                  ? getBasicRow(negativeVarColumn)\n                                  : null;\n    double mostNegative = (negativeVarBasicRow == null)\n                          ? 0.0\n                          : getEntry(negativeVarBasicRow, getRhsOffset());\n\n    // prepare result for the original variables\n    int n = getOriginalNumDecisionVariables();\n    double[] coefficients = new double[n];\n\n    // the last row in the tableau is the objective\u2010function row\n    int objectiveRow = getHeight() - 1;\n\n    for (int i = 0; i < n; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        double value = 0.0;\n        if (colIndex >= 0) {\n            Integer basicRow = getBasicRow(colIndex);\n            // only take values from actual constraint rows, not the objective row\n            if (basicRow != null && basicRow != objectiveRow) {\n                value = getEntry(basicRow, getRhsOffset());\n            }\n            // if variables were allowed to go negative, shift back by the\n            // negative\u2010variable value\n            if (!restrictToNonNegative && negativeVarBasicRow != null) {\n                value -= mostNegative;\n            }\n        }\n        coefficients[i] = value;\n    }\n\n    return new RealPointValuePair(coefficients,\n                                  f.getValue(coefficients));\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}