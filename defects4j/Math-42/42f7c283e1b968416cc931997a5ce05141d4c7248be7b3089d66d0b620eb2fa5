{
    "generation": "    /**\n     * Get the current solution.\n     *\n     * @return current solution\n     */\n    protected RealPointValuePair getSolution() {\n      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n      Set<Integer> basicRows = new HashSet<Integer>();\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      for (int i = 0; i < coefficients.length; i++) {\n          int colIndex = columnLabels.indexOf(\"x\" + i);\n          if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n          }\n\n          Integer basicRow = getBasicRow(colIndex);\n          double value;\n\n          // If the variable is non-basic (basicRow is null) or\n          // basic in the objective function row (basicRow is 0), its value is 0.\n          if (basicRow == null || basicRow == 0) {\n              value = 0;\n          } else if (basicRows.contains(basicRow)) {\n              // This case handles situations where multiple variables could be basic in the same row\n              // (e.g., due to degeneracy or multiple optimal solutions).\n              // We choose the first variable found for this row and set subsequent ones to 0.\n              value = 0;\n          } else {\n              // This is a basic variable in a unique constraint row.\n              basicRows.add(basicRow);\n              value = getEntry(basicRow, getRhsOffset());\n          }\n\n          // Apply adjustment for variables that can be negative (if restrictToNonNegative is false)\n          coefficients[i] = value - (restrictToNonNegative ? 0 : mostNegative);\n      }\n      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}