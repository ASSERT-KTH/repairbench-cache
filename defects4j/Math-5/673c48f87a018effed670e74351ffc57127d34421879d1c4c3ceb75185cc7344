{
    "generation": "    /** {@inheritDoc} */\n    public Complex reciprocal() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        if (real == 0.0 && imaginary == 0.0) {\n            // The reciprocal of 0 + 0i should be Complex Infinity according to the test.\n            // The original code returned NaN, causing the test failure.\n            return INF;\n        }\n\n        if (isInfinite) {\n            return ZERO;\n        }\n\n        // Calculation for non-special cases using scaling to avoid overflow/underflow.\n        // 1 / (a + bi) = (a - bi) / (a^2 + b^2)\n        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n            double q = real / imaginary; // q = a / b\n            // scale = 1 / (a * (a/b) + b) = 1 / (a^2/b + b) = 1 / ((a^2 + b^2)/b) = b / (a^2 + b^2)\n            double scale = 1. / (real * q + imaginary);\n            // real part = scale * q = (b / (a^2 + b^2)) * (a / b) = a / (a^2 + b^2)\n            // imag part = -scale = -b / (a^2 + b^2)\n            return createComplex(scale * q, -scale);\n        } else {\n            double q = imaginary / real; // q = b / a\n            // scale = 1 / (b * (b/a) + a) = 1 / (b^2/a + a) = 1 / ((b^2 + a^2)/a) = a / (a^2 + b^2)\n            double scale = 1. / (imaginary * q + real);\n            // real part = scale = a / (a^2 + b^2)\n            // imag part = -scale * q = -(a / (a^2 + b^2)) * (b / a) = -b / (a^2 + b^2)\n            return createComplex(scale, -scale * q);\n        }\n    }\n",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}