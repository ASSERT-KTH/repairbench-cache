{
    "generation": "    /** {@inheritDoc} */\n    public Complex reciprocal() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        // The test 'testReciprocalZero' expects Complex.ZERO.reciprocal() to return Complex.INF.\n        // Current implementation returns NaN when real and imaginary parts are zero.\n        if (real == 0.0 && imaginary == 0.0) {\n            // Reciprocal of (0, 0) should be (Infinity, Infinity).\n            return INF; // Assuming INF is a static constant in the Complex class, like ZERO and NaN.\n        }\n\n        if (isInfinite) {\n            return ZERO;\n        }\n\n        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n            double q = real / imaginary;\n            double scale = 1. / (real * q + imaginary);\n            return createComplex(scale * q, -scale);\n        } else {\n            double q = imaginary / real;\n            double scale = 1. / (imaginary * q + real);\n            return createComplex(scale, -scale * q);\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}