{
    "generation": "    /** {@inheritDoc} */\n    public Complex reciprocal() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        if (real == 0.0 && imaginary == 0.0) {\n            // The reciprocal of 0 + 0i is Complex Infinity.\n            // The original code returned NaN, causing the test failure.\n            return INF;\n        }\n\n        if (isInfinite) {\n            return ZERO;\n        }\n\n        // Scaling implementation to avoid intermediate overflow/underflow\n        // This part correctly calculates 1 / (a + bi) = (a - bi) / (a^2 + b^2)\n        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n            double q = real / imaginary;\n            // Denominator: real * q + imaginary = real * (real / imaginary) + imaginary\n            //             = (real^2 / imaginary) + imaginary = (real^2 + imaginary^2) / imaginary\n            // Scale: 1. / denominator = imaginary / (real^2 + imaginary^2)\n            double scale = 1. / (real * q + imaginary);\n            // Real part: scale * q = (imaginary / (real^2 + imaginary^2)) * (real / imaginary) = real / (real^2 + imaginary^2)\n            // Imaginary part: -scale = -imaginary / (real^2 + imaginary^2)\n            return createComplex(scale * q, -scale);\n        } else {\n            double q = imaginary / real;\n            // Denominator: imaginary * q + real = imaginary * (imaginary / real) + real\n            //             = (imaginary^2 / real) + real = (imaginary^2 + real^2) / real\n            // Scale: 1. / denominator = real / (imaginary^2 + real^2)\n            double scale = 1. / (imaginary * q + real);\n            // Real part: scale = real / (real^2 + imaginary^2)\n            // Imaginary part: -scale * q = -(real / (real^2 + imaginary^2)) * (imaginary / real) = -imaginary / (real^2 + imaginary^2)\n            return createComplex(scale, -scale * q);\n        }\n    }\n",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}