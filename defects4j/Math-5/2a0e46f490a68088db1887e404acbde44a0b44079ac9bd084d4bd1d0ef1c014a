{
    "generation": "    /** {@inheritDoc} */\n    public Complex reciprocal() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        if (real == 0.0 && imaginary == 0.0) {\n            // The reciprocal of 0 + 0i is INF, not NaN.\n            return INF;\n        }\n\n        if (isInfinite) {\n            return ZERO;\n        }\n\n        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n            double q = real / imaginary;\n            // Avoid intermediate overflow/underflow by using formula:\n            // 1 / (a + bi) = (a - bi) / (a^2 + b^2)\n            // When |a| < |b|, compute scale = b / (a^2 + b^2) = 1 / (a*(a/b) + b)\n            // real part = scale * (a/b) = a / (a^2 + b^2)\n            // imaginary part = -scale = -b / (a^2 + b^2)\n            double scale = 1. / (real * q + imaginary);\n            return createComplex(scale * q, -scale);\n        } else {\n            double q = imaginary / real;\n            // When |a| >= |b|, compute scale = a / (a^2 + b^2) = 1 / (b*(b/a) + a)\n            // real part = scale = a / (a^2 + b^2)\n            // imaginary part = -scale * (b/a) = -b / (a^2 + b^2)\n            double scale = 1. / (imaginary * q + real);\n            return createComplex(scale, -scale * q);\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}