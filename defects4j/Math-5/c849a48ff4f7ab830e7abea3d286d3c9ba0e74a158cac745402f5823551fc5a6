{
    "generation": "    /** {@inheritDoc} */\n    public Complex reciprocal() {\n        if (isNaN) {\n            return NaN;\n        }\n\n        // Handle division by zero\n        if (real == 0.0 && imaginary == 0.0) {\n            // The test org.apache.commons.math3.complex.ComplexTest.testReciprocalZero\n            // expects Complex.ZERO.reciprocal() to return Complex.INF.\n            // The original code returned Complex.NaN.\n            return INF; // Fixed: return INF for 1/0\n        }\n\n        // Handle reciprocal of infinity\n        if (isInfinite) {\n            return ZERO;\n        }\n\n        // Standard case: 1 / (a + ib) = (a - ib) / (a^2 + b^2)\n        // Use scaling to prevent intermediate overflow or underflow\n        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n            double q = real / imaginary;\n            // Denominator is (real * q + imaginary) = (real^2 / imaginary + imaginary) = (real^2 + imaginary^2) / imaginary\n            double scale = 1. / (real * q + imaginary); // scale = imaginary / (real^2 + imaginary^2)\n            // Real part = scale * q = (imaginary / (real^2 + imaginary^2)) * (real / imaginary) = real / (real^2 + imaginary^2)\n            // Imaginary part = -scale = -imaginary / (real^2 + imaginary^2)\n            return createComplex(scale * q, -scale);\n        } else {\n            double q = imaginary / real;\n            // Denominator is (imaginary * q + real) = (imaginary^2 / real + real) = (imaginary^2 + real^2) / real\n            double scale = 1. / (imaginary * q + real); // scale = real / (real^2 + imaginary^2)\n            // Real part = scale = real / (real^2 + imaginary^2)\n            // Imaginary part = -scale * q = -(real / (real^2 + imaginary^2)) * (imaginary / real) = -imaginary / (real^2 + imaginary^2)\n            return createComplex(scale, -scale * q);\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}