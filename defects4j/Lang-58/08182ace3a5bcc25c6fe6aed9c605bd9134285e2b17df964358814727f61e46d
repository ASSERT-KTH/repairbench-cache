{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Note: This calculation is potentially flawed but matches original code for minimal change\n\n        // Re-calculate expPos more reliably\n        int realExpPos = -1;\n        int ePos = str.indexOf('e');\n        int EPos = str.indexOf('E');\n        if (ePos > -1 && EPos > -1) {\n            realExpPos = Math.min(ePos, EPos);\n        } else if (ePos > -1) {\n            realExpPos = ePos;\n        } else if (EPos > -1) {\n            realExpPos = EPos;\n        }\n        // Use realExpPos for logic, but keep original expPos calculation for extracting 'exp' substring later to maintain original behavior where possible\n        expPos = realExpPos;\n\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos || expPos == str.length() -1) { // Check expPos validity\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                 if (expPos == str.length() -1) { // Check expPos validity\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') { // Added check for '.'\n            if (expPos > -1 && expPos < str.length() - 1) {\n                 // Use original expPos calculation for substring index, as this was part of the original logic before type suffix check\n                 int originalExpPosCalc = str.indexOf('e') + str.indexOf('E') + 1;\n                 if (originalExpPosCalc > -1 && originalExpPosCalc < str.length() - 1) {\n                    exp = str.substring(originalExpPosCalc + 1, str.length() - 1);\n                 } else {\n                     exp = null; // Exponent part invalid or doesn't exist before type suffix\n                 }\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1);\n            // Mantissa needs recalculation if exponent existed but numeric string has suffix removed\n            if (expPos > -1 && expPos < numeric.length()) {\n                 mant = numeric.substring(0, expPos);\n            } else if (decPos == -1) { // No decimal, no exponent relevant to numeric part\n                 mant = numeric;\n            } // else mant is already correct (substring before decimal point)\n\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Check: No decimal, no exponent (using realExpPos), first char is digit or '-', rest are digits.\n                    if (dec == null\n                        && realExpPos == -1 // Ensure no 'e' or 'E' in the string designated as Long\n                        && !numeric.isEmpty() // Prevent issues with \"L\" or \"-L\"\n                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))\n                        // Fix: Check if the rest of the string (after potential sign) contains only digits OR if the string has length 1 (single digit)\n                        && (numeric.length() == 1 || StringUtils.isDigits(numeric.substring(1)))\n                       )\n                    {\n                        try {\n                            // Use the numeric part identified (string without 'L')\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long, try BigInteger\n                            return createBigInteger(numeric);\n                        }\n                    }\n                    // If the checks fail, it's not a valid Long specified by 'L'\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        // Use Float.valueOf as it handles NaN/Infinity correctly.\n                        Float f = Float.valueOf(numeric);\n                        // We need NumberUtils.createFloat for consistency if needed, but valueOf is standard\n                        // Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                         // Use Double.valueOf as it handles NaN/Infinity correctly.\n                         Double d = Double.valueOf(numeric);\n                         // Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Use doubleValue() for check\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                    //$FALL-THROUGH$\n                    try {\n                        // If Double/Float failed or was imprecise, try BigDecimal\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            // Last character is a digit or decimal point.\n\n            // Recalculate exponent using realExpPos for the full string\n            if (realExpPos > -1 && realExpPos < str.length() - 1) {\n                exp = str.substring(realExpPos + 1);\n            } else {\n                exp = null;\n            }\n            // Correct mantissa calculation when no decimal point but exponent exists for full string\n             if (decPos == -1 && realExpPos > -1) {\n                 mant = str.substring(0, realExpPos);\n             } else if (decPos == -1 && realExpPos == -1) { // No decimal, no exponent\n                 mant = str;\n             } // else mant already calculated correctly before decimal\n\n            if (dec == null && realExpPos == -1) { // Use realExpPos\n                //Must be an int,long,bigint\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                return createBigInteger(str);\n\n            } else {\n                //Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    // Use helper methods which presumably handle things correctly\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Use doubleValue()\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(str);\n\n            }\n        }\n    }\n\n    // Dummy implementations of helper methods assumed by the original code\n    // In a real scenario, these would exist elsewhere (e.g., in NumberUtils or StringUtils).\n    private static class StringUtils {\n        public static boolean isBlank(String str) {\n            int strLen;\n            if (str == null || (strLen = str.length()) == 0) {\n                return true;\n            }\n            for (int i = 0; i < strLen; i++) {\n                if ((Character.isWhitespace(str.charAt(i)) == false)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        public static boolean isDigits(String str) {\n             if (str == null || str.isEmpty()) { //isEmpty check added for robustness\n                 return false;\n             }\n             for (int i = 0; i < str.length(); i++) {\n                 if (!Character.isDigit(str.charAt(i))) {\n                     return false;\n                 }\n             }\n             return true;\n         }\n    }\n    private static boolean isAllZeros(String str) {\n        if (str == null) {\n            return true;\n        }\n        for (int i = str.length() - 1; i >= 0; i--) {\n            if (str.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return str.length() > 0;\n    }\n    // Assume these methods exist and work correctly\n    private static Integer createInteger(String str) { return Integer.valueOf(str); }\n    private static Long createLong(String str) { return Long.valueOf(str); }\n    private static java.math.BigInteger createBigInteger(String str) { return new java.math.BigInteger(str); }\n    private static Float createFloat(String str) { return Float.valueOf(str); }\n    private static Double createDouble(String str) { return Double.valueOf(str); }\n    private static java.math.BigDecimal createBigDecimal(String str) { return new java.math.BigDecimal(str); }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}