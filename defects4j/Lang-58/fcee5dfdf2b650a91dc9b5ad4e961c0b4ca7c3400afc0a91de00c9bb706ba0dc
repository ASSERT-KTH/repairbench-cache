{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (or <code>0X</code> or <code>-0X</code>),\n     * it will be interpreted as a hexadecimal integer. Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value. Original code returned null. Returning null might be unexpected.\n            // Throwing NFE seems more appropriate based on common practice.\n            // However, to minimize changes from original buggy code's behavior (apart from the fix),\n            // we can retain the return null, but throwing NFE is recommended practice.\n            // Let's follow the likely intent based on context and throw NFE.\n             throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        // Handle hex format first (including uppercase X)\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n            // createInteger appropriately handles hex conversions to Integer, Long, or BigInteger\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        // Correctly find exponent position ('e' or 'E'), ensuring only one exists\n        int expPos = -1;\n        int ePos = str.indexOf('e');\n        int EPos = str.indexOf('E');\n        if (ePos > -1 && EPos > -1) { // Cannot have both 'e' and 'E'\n             throw new NumberFormatException(str + \" is not a valid number.\");\n        } else if (ePos > -1) {\n            expPos = ePos;\n        } else if (EPos > -1) {\n            expPos = EPos;\n        }\n\n        // Split string respecting potential type suffix L,l,F,f,D,d\n        if (decPos > -1) { // Decimal point found\n            if (expPos > -1) { // Exponent found\n                if (expPos < decPos || expPos > str.length()) { // Invalid exponent position\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n                mant = str.substring(0, decPos);\n                 // Exponent follows 'e' or 'E' until the end or a type suffix\n                 if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E' && expPos < str.length() - 1) {\n                     exp = str.substring(expPos + 1, str.length() - 1);\n                 } else {\n                     exp = str.substring(expPos + 1);\n                 }\n            } else { // No exponent\n                 // Decimal part is after '.' until the end or a type suffix\n                if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {\n                     dec = str.substring(decPos + 1, str.length() - 1);\n                 } else {\n                     dec = str.substring(decPos + 1);\n                 }\n                mant = str.substring(0, decPos);\n                exp = null;\n            }\n        } else { // No decimal point\n            if (expPos > -1) { // Exponent found\n                if (expPos == 0 || (expPos == 1 && (str.charAt(0) == '+' || str.charAt(0) == '-')) || expPos > str.length()) { // Invalid exponent position (e.g. \"e1\", \"-e1\")\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n                 // Exponent follows 'e' or 'E' until the end or a type suffix\n                 if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E' && expPos < str.length() - 1) {\n                     exp = str.substring(expPos + 1, str.length() - 1);\n                 } else {\n                     exp = str.substring(expPos + 1);\n                 }\n                dec = null;\n            } else { // No decimal, no exponent\n                // Mantissa is the whole string, possibly excluding a type suffix\n                 if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {\n                      mant = str.substring(0, str.length() - 1);\n                 } else {\n                      mant = str;\n                 }\n                dec = null;\n                exp = null;\n            }\n        }\n\n        // --- Logic based on presence of type suffix ---\n        if (Character.isLetter(lastChar) && lastChar != 'e' && lastChar != 'E') {\n            String numeric = str.substring(0, str.length() - 1); // The part without the suffix\n            // isAllZeros needs to handle null gracefully (e.g., return true)\n            boolean allZeros = isAllZeros(mant) && isAllZeros(dec); // Assuming isAllZeros handles nulls\n\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // ***** FIX START *****\n                    // String must represent an integer (no decimal, no exponent)\n                    if (dec == null && exp == null) {\n                        // Validate the numeric part (before 'l'/'L')\n                        boolean isValidInteger = false;\n                        if (numeric != null && !numeric.isEmpty()) { // Ensure not empty, e.g., \"L\"\n                            char firstChar = numeric.charAt(0);\n                            if (firstChar == '-') {\n                                // Check for digits after '-', e.g., \"-1L\" valid, \"-L\" invalid\n                                isValidInteger = numeric.length() > 1 && StringUtils.isDigits(numeric.substring(1));\n                            } else if (firstChar == '+') {\n                                 // Check for digits after '+', e.g., \"+1L\" valid, \"+L\" invalid\n                                isValidInteger = numeric.length() > 1 && StringUtils.isDigits(numeric.substring(1));\n                            } else {\n                                // Check if all characters are digits, e.g., \"1L\", \"01L\" valid\n                                isValidInteger = StringUtils.isDigits(numeric);\n                            }\n                        }\n\n                        if (isValidInteger) {\n                            try {\n                                // Attempt to create Long using the helper method (handles signs etc.)\n                                return createLong(numeric);\n                            } catch (NumberFormatException nfe) {\n                                // If createLong fails (likely too large), fall back to BigInteger\n                            }\n                            try {\n                                // Attempt to create BigInteger using the helper method\n                                return createBigInteger(numeric);\n                            } catch (NumberFormatException nfe2) {\n                                // If BigInteger also fails, the numeric string is fundamentally invalid despite checks\n                                throw new NumberFormatException(str + \" is not a valid number.\"); // Propagate error\n                            }\n                        }\n                    }\n                    // If structure (dec/exp presence) was wrong, or numeric part validation failed\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                    // ***** FIX END *****\n\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = createFloat(numeric); // Use helper\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                        // If checks fail, fall through (original behavior)\n                    } catch (NumberFormatException nfe) {\n                        // Ignore and fall through (original behavior)\n                    }\n                    // Fall through\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = createDouble(numeric); // Use helper\n                        // Correction: Use d.doubleValue() for comparison with 0.0D\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                         // If checks fail, fall through (original behavior)\n                    } catch (NumberFormatException nfe) {\n                         // Ignore and fall through (original behavior)\n                    }\n                    // Fall through\n                default : // Handles fall-through from F/D, and potentially invalid suffixes\n                    try {\n                        // BigDecimal is the last resort for F/D fall-through\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // If numeric part fails even for BigDecimal, the input string is invalid\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n            }\n        } else {\n            // --- Logic for no type suffix ---\n            // Determine if it's an integer type or floating-point type based on structure\n            if (dec == null && exp == null) {\n                // Candidate for Integer, Long, BigInteger\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                // Final fallback is BigInteger\n                return createBigInteger(str);\n\n            } else {\n                // Candidate for Float, Double, BigDecimal\n                boolean allZeros = isAllZeros(mant) && isAllZeros(dec); // Assuming helper handles nulls\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                try {\n                    Double d = createDouble(str);\n                    // Correction: Use d.doubleValue() for comparison with 0.0D\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                // Final fallback is BigDecimal\n                return createBigDecimal(str);\n            }\n        }\n    }\n\n    // NOTE: This solution assumes the existence and correct functioning of helper methods:\n    // StringUtils.isBlank(String), StringUtils.isDigits(String), isAllZeros(String),\n    // createInteger(String), createLong(String), createBigInteger(String),\n    // createFloat(String), createDouble(String), createBigDecimal(String).\n    // The isAllZeros helper should ideally return true for null or empty strings.\n    // The create* helpers should handle parsing details like signs, etc.",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}