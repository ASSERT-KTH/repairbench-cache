{
    "generation": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));\n\n        if (expPos > -1) {\n            if (decPos > -1) {\n                //Both exp and dec in string\n                if (expPos < decPos) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                //No dec in string\n                mant = str.substring(0, expPos);\n                dec = null;\n            }\n            //Process exp\n            if (expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1);\n            } else {\n                exp = null;  // invalid exponents get caught in numeric conversion\n            }\n            mant = str.substring(0, decPos > -1 ? decPos : expPos);\n        } else {\n            //No exp in string\n            if (decPos > -1) {\n                mant = str.substring(0, decPos);\n                dec = str.substring(decPos + 1);\n            } else {\n                mant = str;\n                dec = null;\n            }\n            exp = null;\n        }\n\n        if (!Character.isDigit(lastChar)) {\n            if (lastChar == 'l' || lastChar == 'L') {\n                // Handle long suffix case separately since it's the bug we're fixing\n                String numericPart = str.substring(0, str.length() - 1);\n                if (dec == null && exp == null &&\n                    (numericPart.startsWith(\"0x\") || numericPart.startsWith(\"-0x\") ||\n                     isDigits(numericPart.replaceFirst(\"^-\", \"\")))) {\n                    try {\n                        return createLong(numericPart);\n                    } catch (NumberFormatException nfe) {\n                        // Too big for a long\n                    }\n                    try {\n                        return createBigInteger(numericPart);\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                }\n            }\n\n            String numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Now that we've moved the special case above,\n                    // this should never be reached for valid long literals\n                    break;\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    //Fall through\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            if (dec == null && exp == null) {\n                //Must be an int,long,bigint\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                return createBigInteger(str);\n            } else {\n                //Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(str);\n            }\n        }\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}