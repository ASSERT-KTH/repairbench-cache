{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        //int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Original calculation was incorrect\n        // Correct way to find 'e' or 'E'\n        int expPos = str.indexOf('e');\n        if (expPos == -1) {\n            expPos = str.indexOf('E');\n        }\n\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos || expPos > str.length()) { // Check if 'e'/'E' is validly placed\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                 if (expPos > str.length()) { // Check if 'e'/'E' is validly placed\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') { // Added '.' check as it could be the last char\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1);\n            // isAllZeros check needs to be safe for null/empty strings\n            boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp); // Checked dec as well\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Check if it's potentially a valid Long string (no decimal, no exponent)\n                    if (dec == null && exp == null) {\n                        // Validate the 'numeric' part (the string without 'L')\n                        boolean isValid = false;\n                        if (numeric != null && !numeric.isEmpty()) {\n                            char firstChar = numeric.charAt(0);\n                            if (firstChar == '-') {\n                                // Must have at least one digit after '-'\n                                isValid = numeric.length() > 1 && StringUtils.isDigits(numeric.substring(1));\n                            } else {\n                                // All characters must be digits\n                                isValid = StringUtils.isDigits(numeric);\n                            }\n                        }\n                        \n                        if (isValid) {\n                           try {\n                               return createLong(numeric);\n                           } catch (NumberFormatException nfe) {\n                               // Too big for a long\n                           }\n                           return createBigInteger(numeric); // Fallback to BigInteger if Long overflows\n                        }\n                    }\n                    // If the format is not valid for Long (e.g., has decimal/exponent, or invalid chars)\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        // Use Float.valueOf directly? createFloat might have its own logic\n                        Float f = createFloat(numeric);\n                        //sun's Double/Float.valueOf doesn't create Infinities\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    // Fall through\n                case 'd' :\n                case 'D' :\n                    try {\n                        // Use Double.valueOf directly? createDouble might have its own logic\n                        Double d = createDouble(numeric);\n                        //sun's Double/Float.valueOf doesn't create Infinities\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Changed floatValue() to doubleValue()\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                         // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    // Fall through\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            if (expPos > -1 && expPos < str.length() - 1) {\n                 // Check if character after 'e'/'E' is valid (sign or digit)\n                 char expChar = str.charAt(expPos + 1);\n                 if (expChar == '+' || expChar == '-' || Character.isDigit(expChar)) {\n                     exp = str.substring(expPos + 1);\n                 } else {\n                     // Invalid char after exponent symbol, treat as integer/long/bigint if no decimal\n                     if (dec == null) exp = null; // Effectively ignore exponent part if invalid\n                     else throw new NumberFormatException(str + \" is not a valid number.\"); // Invalid exponent on decimal number\n                 }\n            } else if (expPos == str.length() -1 ) { // Exponent symbol is last char\n                 if (dec == null) exp = null; // Ignore exponent symbol if no digits follow and no decimal\n                 else throw new NumberFormatException(str + \" is not a valid number.\"); // Invalid exponent on decimal number\n            }\n            else {\n                exp = null;\n            }\n\n            // Check if exp is valid if it exists\n             if (exp != null && !isExponent(exp)) { // Added helper isExponent check\n                  if (dec == null) { // If no decimal, maybe it was meant as a Long/Integer? Try parsing full string.\n                      exp = null; // Reset exp if invalid, rely on integer parsing below\n                      // Reset mant to full string if we incorrectly split at 'e'/'E'\n                      mant = str;\n                  } else {\n                     throw new NumberFormatException(str + \" is not a valid number.\"); // Invalid exponent on decimal number\n                  }\n             }\n\n\n            if (dec == null && exp == null) {\n                //Must be an int,long,bigint\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                return createBigInteger(str);\n\n            } else {\n                //Must be a float,double,BigDec\n                // isAllZeros check needs to be safe for null/empty strings\n                boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp); // Checked dec as well\n                try {\n                    Float f = createFloat(str);\n                    //sun's Double/Float.valueOf doesn't create Infinities\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                     //sun's Double/Float.valueOf doesn't create Infinities\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Changed floatValue() to doubleValue()\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(str);\n            }\n        }\n    }\n\n    // Helper method to check if a string represents a valid exponent part\n    // Assumes the exponent string itself (e.g., \"-3\", \"+4\", \"5\")\n    private static boolean isExponent(String exp) {\n        if (exp == null || exp.isEmpty()) {\n            return false; // Or true depending on definition? Assume false if empty.\n        }\n        char first = exp.charAt(0);\n        if (first == '+' || first == '-') {\n            if (exp.length() == 1) return false; // Sign only is invalid\n            return StringUtils.isDigits(exp.substring(1));\n        } else {\n            return StringUtils.isDigits(exp);\n        }\n    }\n\n\n    // Helper method, assumed to exist elsewhere, stubbed here\n    private static boolean isAllZeros(String str) {\n        if (str == null) {\n            return true; // Treat null as all zeros? Or false? Context matters. Assuming true based on original code.\n        }\n        for (int i = str.length() - 1; i >= 0; i--) {\n            if (str.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return str.length() > 0; // Treat \"\" as not all zeros? Or true? Based on usage, likely true if empty.\n    }\n    \n    // These are assumed to exist in NumberUtils or be static imports\n    // private static Integer createInteger(String str) { return Integer.valueOf(str); }\n    // private static Long createLong(String str) { return Long.valueOf(str); }\n    // private static BigInteger createBigInteger(String str) { return new BigInteger(str); }\n    // private static Float createFloat(String str) { return Float.valueOf(str); }\n    // private static Double createDouble(String str) { return Double.valueOf(str); }\n    // private static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }\n\n    // Assume StringUtils exists and provides isBlank and isDigits\n    private static class StringUtils {\n        public static boolean isBlank(String str) {\n            return str == null || str.trim().isEmpty();\n        }\n        public static boolean isDigits(String str) {\n            if (str == null || str.isEmpty()) {\n                return false;\n            }\n            for (int i = 0; i < str.length(); i++) {\n                if (!Character.isDigit(str.charAt(i))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}