{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null; // Keep original behavior\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            // Delegate handling of hex numbers to a dedicated method or Integer.decode if sufficient.\n            // Assuming createInteger handles hex logic correctly (potentially returning Long or BigInteger for large values)\n            // Note: The original code relied on createInteger which might need its own fix depending on its implementation.\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        int expPos = str.indexOf('e'); // Find first 'e' or 'E'\n        if (expPos == -1) {\n            expPos = str.indexOf('E');\n        }\n\n        // Parse the string into parts: mantissa, decimal, exponent\n        // This logic needs to be careful about the exponent position relative to decimal and potential type suffix\n        if (decPos > -1) {\n            // String has decimal point\n            if (expPos > -1) {\n                // String has decimal point and exponent marker\n                if (expPos < decPos || expPos == str.length() - 1) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                // String has decimal point but no exponent marker\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            // String has no decimal point\n            if (expPos > -1) {\n                // String has exponent marker but no decimal point\n                if (expPos == str.length() - 1) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                mant = str.substring(0, expPos);\n            } else {\n                // String has no decimal point and no exponent marker\n                mant = str;\n            }\n            dec = null; // No decimal part\n        }\n\n        // Handle type qualifiers (L, F, D)\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            // Extract the exponent string if an exponent marker exists before the suffix\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null; // No exponent part found\n            }\n            // The main numeric part of the string (excluding the suffix)\n            String numeric = str.substring(0, str.length() - 1);\n            // Check for all zeros, considering the mantissa and exponent parts\n            // Note: isAllZeros needs to handle nulls and signs appropriately. Assume it does.\n            // We need the mantissa part used for the allZeros check. If mant computed above included the suffix, adjust it.\n             String mantForZeroCheck = mant;\n             if (expPos == -1 && decPos == -1 && mant != null && mant.length() > numeric.length()) {\n                mantForZeroCheck = numeric;\n             }\n            boolean allZeros = isAllZeros(mantForZeroCheck) && isAllZeros(exp);\n\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Long types must not have decimal or exponent parts\n                    if (dec == null && exp == null && // Check based on parts derived from original string structure\n                        // Additionally ensure the numeric part itself doesn't contain '.' or 'e'/'E'\n                        numeric.indexOf('.') == -1 && numeric.indexOf('e') == -1 && numeric.indexOf('E') == -1)\n                    {\n                        // Validate the format of the numeric part (digits, optional leading '-')\n                        boolean isPotentialLong = (numeric.length() > 0);\n                        if (isPotentialLong) {\n                            char firstChar = numeric.charAt(0);\n                            if (firstChar == '-') {\n                                // Must have digits after '-'\n                                if (numeric.length() > 1) {\n                                    for (int i = 1; i < numeric.length(); i++) {\n                                        if (!Character.isDigit(numeric.charAt(i))) {\n                                            isPotentialLong = false; break;\n                                        }\n                                    }\n                                } else {\n                                    isPotentialLong = false; // Just \"-\" is not valid\n                                }\n                            } else {\n                                // All characters must be digits\n                                for (int i = 0; i < numeric.length(); i++) {\n                                    if (!Character.isDigit(numeric.charAt(i))) {\n                                        isPotentialLong = false; break;\n                                    }\n                                }\n                            }\n                        }\n\n                        // If the format is valid, try creating Long, then BigInteger\n                        if (isPotentialLong) {\n                            try {\n                                return createLong(numeric);\n                            } catch (NumberFormatException nfe) {\n                                // Fallback to BigInteger if Long parsing fails (e.g., overflow)\n                            }\n                            try {\n                                return createBigInteger(numeric);\n                            } catch (NumberFormatException nfe2) {\n                                // If BigInteger also fails, format is fundamentally wrong (should have been caught by isPotentialLong?)\n                                // Or createBigInteger has its own validation issues. Rethrow original string NFE.\n                            }\n                        }\n                    }\n                    // If checks fail, throw NumberFormatException\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = createFloat(numeric);\n                        // Avoid returning Float if it overflows to infinity or loses precision to zero inappropriately\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) { /* Fall through */ }\n                    // Fall through to try Double and BigDecimal if Float is unsuitable\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = createDouble(numeric);\n                        // Corrected check: use d.doubleValue()\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) { /* Fall through */ }\n                    try {\n                        // Use BigDecimal as the final fallback for F/f and D/d types\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { /* Fall through */ }\n                    // If all floating point types fail for the numeric part, throw exception\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                default :\n                    // Invalid type suffix\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            // Last character is a digit (or potentially '.') -> No type suffix\n            // Extract exponent string if 'e'/'E' is present\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1);\n            } else if (expPos > -1) { // covers expPos == str.length() - 1, which is invalid\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n            } else {\n                exp = null;\n            }\n             // Check for all zeros using the initially computed mantissa and the exponent string\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n            if (dec == null && exp == null) {\n                // No decimal point, no exponent -> Integer types\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { /* ignore */ }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { /* ignore */ }\n                // Default to BigInteger, letting its constructor handle validation\n                return createBigInteger(str);\n            } else {\n                // Has decimal point or exponent -> Floating point types\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { /* ignore */ }\n                try {\n                    Double d = createDouble(str);\n                    // Corrected check: use d.doubleValue()\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { /* ignore */ }\n                // Default to BigDecimal, letting its constructor handle validation\n                return createBigDecimal(str);\n            }\n        }\n    }\n\n    // Assume helper methods like isAllZeros, createInteger, createLong, createBigInteger,\n    // createFloat, createDouble, createBigDecimal are defined elsewhere and function correctly.\n    // For example:\n    private static boolean isAllZeros(String str) {\n        if (str == null || str.isEmpty()) {\n            return true; // Consider null/empty as \"all zeros\" for the check logic\n        }\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n             // Allow sign, but check digits\n             if (c == '+' || c == '-') {\n                if (i != 0) return false; // Sign only allowed at start\n             } else if (c != '0') {\n                return false;\n            }\n        }\n        // Check if it wasn't just a sign character\n        if (str.equals(\"+\") || str.equals(\"-\")) {\n             return false;\n        }\n        return true; // All digits were '0' (or string was empty/null)\n    }\n    // Stubs for other helpers (replace with actual implementations)\n    private static Integer createInteger(String str) { return Integer.decode(str); } // Needs proper hex/octal/decimal handling & BigInt fallback\n    private static Long createLong(String str) { return Long.valueOf(str); }\n    private static BigInteger createBigInteger(String str) { return new BigInteger(str); }\n    private static Float createFloat(String str) { return Float.valueOf(str); }\n    private static Double createDouble(String str) { return Double.valueOf(str); }\n    private static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }\n\n    // Assume StringUtils.isBlank is available from Apache Commons Lang\n    private static class StringUtils {\n        public static boolean isBlank(String str) {\n            int strLen;\n            if (str == null || (strLen = str.length()) == 0) {\n                return true;\n            }\n            for (int i = 0; i < strLen; i++) {\n                if (!Character.isWhitespace(str.charAt(i))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}