{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // LANG-552: handle -- correctly\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value. Proper fix is to return null, as documentation suggests.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        // Corrected calculation for exponent position\n        int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));\n\n        // Parse the string into mantissa, decimal, and exponent parts\n        // Retaining original parsing logic structure with minimal correction for validity checks\n        if (decPos > -1) {\n            if (expPos > -1) {\n                // Ensure exponent appears after decimal and has digits\n                if (expPos < decPos || expPos >= str.length() - 1) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n                mant = str.substring(0, decPos);\n                exp = str.substring(expPos + 1); // May include type suffix initially\n            } else { // Only decimal present\n                dec = str.substring(decPos + 1);\n                mant = str.substring(0, decPos);\n                exp = null;\n            }\n        } else { // No decimal point\n            if (expPos > -1) {\n                // Ensure exponent has digits\n                 if (expPos >= str.length() - 1) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                mant = str.substring(0, expPos);\n                dec = null;\n                exp = str.substring(expPos + 1); // May include type suffix initially\n            } else { // Neither decimal nor exponent\n                mant = str; // Initially holds the full string if no separators\n                dec = null;\n                exp = null;\n            }\n        }\n\n        // Check if the last character is a valid type qualifier\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            // Remove suffix from exponent string if present\n            if (exp != null && exp.length() > 0 && exp.charAt(exp.length() - 1) == lastChar) {\n                 if (exp.length() == 1) { // Ensure exponent had digits before suffix (e.g., \"1eL\")\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 exp = exp.substring(0, exp.length() - 1);\n            } else if (exp == null && dec == null && mant.length() > 0 && mant.charAt(mant.length() - 1) == lastChar){\n                 // If no exp/dec, suffix might be at end of mantissa (e.g., \"1L\")\n                 // Check for cases like \"L\" or \"-L\" which are invalid\n                 if (mant.length() == 1 || (mant.startsWith(\"-\") && mant.length() == 2)) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 // This adjustment is needed for isAllZeros logic below, but use 'numeric' for parsing attempts.\n                 mant = mant.substring(0, mant.length() - 1);\n            } else {\n                 // Suffix present but not attached to exponent or simple integer/long mantissa. Invalid.\n                 // e.g. \"1.0L\" is invalid based on this logic (needs dec==null, exp==null for L).\n                 // Let the switch handle final validation.\n            }\n\n            String numeric = str.substring(0, str.length() - 1); // String without the suffix\n            // Using original isAllZeros logic based on originally parsed parts\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n            switch (lastChar) {\n                case 'l':\n                case 'L':\n                    // Must be integer-like format (no decimal, no exponent part in original string)\n                    if (dec == null && exp == null) {\n                        // Validate the numeric part (string without suffix)\n                        int startIndex = (numeric.startsWith(\"-\")) ? 1 : 0;\n                        // Fixed: Check if part after sign contains only digits and is not empty\n                        if (numeric.length() > startIndex && StringUtils.isDigits(numeric.substring(startIndex))) {\n                            try {\n                                return createLong(numeric);\n                            } catch (NumberFormatException nfe) {\n                                // Fall through to BigInteger\n                            }\n                            return createBigInteger(numeric);\n                        }\n                        // If not a valid integer format (e.g., \"-\", empty after sign)\n                    }\n                    // If format had decimal/exponent, or numeric part wasn't valid integer\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f':\n                case 'F':\n                    try {\n                        Float f = createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) { /* Ignore */ }\n                    // Fall through to try Double/BigDecimal\n                    //$FALL-THROUGH$\n                case 'd':\n                case 'D':\n                    try {\n                        Double d = createDouble(numeric);\n                        // Fixed: Use d.doubleValue() for check\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) { /* Ignore */ }\n                    // Fall through to try BigDecimal\n                    //$FALL-THROUGH$\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { /* Ignore */ }\n                    // Fall through to throw exception if all attempts fail\n                    //$FALL-THROUGH$\n                default: // Invalid suffix character\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else { // Last character is a digit or '.'\n            // No type specified, parse using the full original string 'str'\n            // Type determined by structure (presence of '.', 'e', 'E')\n            if (dec == null && exp == null) {\n                // Integer format\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { /* Ignore */ }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { /* Ignore */ }\n                return createBigInteger(str);\n            } else {\n                // Floating point format\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { /* Ignore */ }\n                try {\n                    Double d = createDouble(str);\n                    // Fixed: Use d.doubleValue() for check\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { /* Ignore */ }\n                return createBigDecimal(str);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}