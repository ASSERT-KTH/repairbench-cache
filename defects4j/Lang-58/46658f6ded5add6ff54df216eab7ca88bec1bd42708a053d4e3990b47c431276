{
    "generation": "import java.math.BigDecimal;\nimport java.math.BigInteger;\nimport org.apache.commons.lang.StringUtils; // Assuming this import exists and the class provides isBlank()\n\n/**\n * Helper class assumed to exist for NumberUtils methods like createFloat, etc.\n * This is just for context; the fix is within createNumber.\n */\nclass NumberUtils {\n    // Assume these helper methods exist and function as expected (e.g., wrapping standard parsers)\n    public static Float createFloat(String str) { return Float.valueOf(str); }\n    public static Double createDouble(String str) { return Double.valueOf(str); }\n    public static Integer createInteger(String str) {\n        // Handle hex format if needed, like Integer.decode or custom logic\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             try {\n                 return Integer.decode(str);\n             } catch (NumberFormatException nfe) {\n                 // May overflow Integer, throw or handle differently?\n                 // The original code's behaviour for hex needs clarification,\n                 // but this stub assumes basic Integer parsing or hex handling.\n                 throw nfe; // Propagate for now\n             }\n        }\n        return Integer.valueOf(str);\n    }\n    public static Long createLong(String str) { return Long.valueOf(str); }\n    public static BigInteger createBigInteger(String str) { return new BigInteger(str); }\n    public static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }\n\n    // Assume isAllZeros exists and handles null safely (returning true for null/empty)\n    // and checks if all characters in a non-null string are '0'.\n    public static boolean isAllZeros(String str) {\n        if (str == null || str.length() == 0) {\n            return true;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    // Assume isDigits exists (similar to StringUtils.isNumeric but maybe stricter)\n    // For simplicity, let's assume it checks if non-empty string contains only digits 0-9\n    public static boolean isDigits(String str) {\n         if (str == null || str.length() == 0) {\n             return false;\n         }\n         for (int i = 0; i < str.length(); i++) {\n             if (!Character.isDigit(str.charAt(i))) {\n                 return false;\n             }\n         }\n         return true;\n     }\n\n\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            // Consider using Long.decode or BigInteger(String, 16) for full hex support\n            // Original code delegates to createInteger, which might be limited.\n            // For this fix, retain original call structure.\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException e){\n                 // If createInteger fails (e.g. overflow), maybe try Long/BigInteger hex\n                 // This part is outside the scope of the reported bug fix.\n                 // Re-throwing the exception from createInteger for now.\n                 throw e;\n            }\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        // Correct calculation for first 'e' or 'E'\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n        // Adjust expPos if it indicates position beyond string length\n        // or if it points to the very last character (invalid exponent format unless qualifier follows)\n        if (expPos > str.length() || expPos == str.length()) {\n            expPos = -1;\n        }\n\n\n        // Simplified logic: Check for qualifier first. If present, process 'numeric' part.\n        // If not present, process the whole 'str'.\n\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            // Potential qualifier found.\n            String numeric = str.substring(0, str.length() - 1); // String without the potential qualifier\n\n            // Check if numeric part is empty or just a sign (e.g., \"L\", \"-F\")\n             if (numeric.isEmpty() || numeric.equals(\"-\")) {\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n\n            // Assign mant, dec, exp based on the structure of 'numeric' for isAllZeros check later\n            // Recalculate positions within 'numeric'\n            int numDecPos = numeric.indexOf('.');\n            int numExpPos = numeric.indexOf('e') + numeric.indexOf('E') + 1;\n            if (numExpPos > numeric.length()) {\n                 numExpPos = -1;\n            }\n\n            if (numDecPos > -1) {\n                if (numExpPos > -1) {\n                     if (numExpPos < numDecPos) throw new NumberFormatException(str + \" is not a valid number.\"); // Invalid format\n                     mant = numeric.substring(0, numDecPos);\n                     dec = numeric.substring(numDecPos + 1, numExpPos);\n                     exp = numeric.substring(numExpPos + 1);\n                } else {\n                     mant = numeric.substring(0, numDecPos);\n                     dec = numeric.substring(numDecPos + 1);\n                     exp = null;\n                }\n            } else { // No decimal in numeric\n                 if (numExpPos > -1) {\n                     mant = numeric.substring(0, numExpPos);\n                     dec = null;\n                     exp = numeric.substring(numExpPos + 1);\n                 } else {\n                     mant = numeric;\n                     dec = null;\n                     exp = null;\n                 }\n            }\n            // Note: isAllZeros needs to handle potentially empty exp/dec strings correctly.\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Use mant/exp derived from 'numeric'\n\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // FIX: Ensure 'numeric' part represents an integer (no decimal, no exponent)\n                    // Rely on createLong/createBigInteger for actual parsing and validation.\n                    if (dec == null && exp == null && numeric.indexOf('.') == -1 && numeric.toLowerCase().indexOf('e') == -1) {\n                        try {\n                            // Attempt Long conversion using the helper\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            // Fallback to BigInteger if Long fails (e.g., too large)\n                             // createBigInteger should throw if format is fundamentally wrong\n                             return createBigInteger(numeric);\n                        }\n                    }\n                    // If format constraints (no decimal/exponent) fail for L/l, throw NFE.\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        // Check for infinity/zero precision issues\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number, fall through\n                    }\n                    // Fall through intended\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        // Check for infinity/zero precision issues (FIXED: use d.doubleValue())\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number, fall through\n                    }\n                    // Fall through intended\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                         throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n                default :\n                    // Invalid trailing character if not a recognized qualifier\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            // No type qualifier, last char is digit or potentially '.'\n            // Process the whole string 'str'.\n\n            // Check for trailing '.' or exponent markers without digits\n            if (lastChar == '.' && str.indexOf('.', str.length() - 2) != -1) { // Double decimal point \"..\"\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            if (expPos == str.length() - 1) { // ends with e/E\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n\n\n            // Determine type based on presence of decimal point or exponent marker in 'str'.\n            if (decPos == -1 && expPos == -1) {\n                 // No decimal, no exponent -> Integer, Long, BigInteger\n                 // If ends in '.', treat as float/double/decimal below\n                 if (lastChar == '.') {\n                     // Fall through to float/double/decimal path\n                 } else {\n                    // Try integer types\n                    try {\n                        return createInteger(str);\n                    } catch (NumberFormatException nfe) { /* ignore */ }\n                    try {\n                        return createLong(str);\n                    } catch (NumberFormatException nfe) { /* ignore */ }\n                    // Final attempt with BigInteger\n                    return createBigInteger(str); // Let it throw NFE if invalid\n                 }\n            }\n            // If we reach here, it has decimal or exponent, or ends with '.'\n            // -> Float, Double, BigDecimal path\n\n            // Assign mant, dec, exp based on the structure of 'str' for isAllZeros check\n            // Recalculate positions within 'str'\n            if (decPos > -1) {\n                if (expPos > -1) {\n                     if (expPos < decPos) throw new NumberFormatException(str + \" is not a valid number.\"); // Invalid format\n                     mant = str.substring(0, decPos);\n                     dec = str.substring(decPos + 1, expPos);\n                     exp = str.substring(expPos + 1);\n                } else {\n                     mant = str.substring(0, decPos);\n                     // Handle trailing '.' case \"123.\" -> dec should be \"\"\n                     dec = str.substring(decPos + 1);\n                     exp = null;\n                }\n            } else { // No decimal\n                 // ExpPos must be > -1 here, otherwise handled above\n                 mant = str.substring(0, expPos);\n                 dec = null;\n                 exp = str.substring(expPos + 1);\n            }\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n            try {\n                Float f = createFloat(str);\n                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) { /* ignore */ }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) { /* ignore */ }\n             // Final attempt with BigDecimal\n            return createBigDecimal(str); // Let it throw NFE if invalid\n        }\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}