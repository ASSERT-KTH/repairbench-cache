{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        // Handle edge case for strings like \".1\", \"1.\"\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Handles both 'e' and 'E'\n        // Ensure exponent is after decimal point if both exist\n        if (decPos > -1 && expPos > -1 && expPos < decPos) {\n             throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n\n\n        if (decPos > -1) {\n            if (expPos > -1) {\n                // Check for empty exponent \"1.2e\"\n                if (expPos > str.length()) { // Fixed: check index bounds\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                 // Check for empty exponent \"1e\"\n                if (expPos > str.length()) { // Fixed: check index bounds\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') { // allow '.' as last char e.g \"1.\"\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // exp can be null here\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Check if the L/l applies to an integer format number\n                    // Must not have a decimal point or exponent\n                    if (dec == null && exp == null && numeric.length() > 0) {\n                        boolean isNegative = numeric.charAt(0) == '-';\n                        // Extract the potential digits part\n                        String digitsToCheck = isNegative ? numeric.substring(1) : numeric;\n                        // Check if the extracted part is non-empty and contains only digits\n                        if (digitsToCheck.length() > 0 && isDigits(digitsToCheck)) {\n                            try {\n                                return createLong(numeric);\n                            } catch (NumberFormatException nfe) {\n                                // Too big for a long, fall through to BigInteger\n                            }\n                            return createBigInteger(numeric);\n                        }\n                        // If not a valid integer format before L/l\n                    }\n                    // If format constraints are not met (e.g., \"1.2L\", \"1e2L\", \"-L\")\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        // Ensure not infinite and handles cases like \"0.0F\" vs \"0F\" preserving precision perception\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number format and try Double below\n                    }\n                    // Fall through to try Double if Float failed or was not precise enough\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                         // Ensure not infinite and handles cases like \"0.0D\" vs \"0D\" preserving precision perception\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Changed d.floatValue() to d.doubleValue()\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                       // ignore the bad number format and try BigDecimal below\n                    }\n                    // Fall through to try BigDecimal if Double failed or was not precise enough\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number format\n                    }\n                    // Fall through - indicates failure after trying Float, Double, BigDecimal\n                default :\n                    // Reached if the suffix is not L,l,F,f,D,d\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else { // last char is a digit or '.'\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            if (expPos > -1 && expPos < str.length()) { // Corrected condition for exponent presence\n                 // Check for empty exponent \"1e\" \"1.e\"\n                if (expPos == str.length() -1) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                exp = str.substring(expPos + 1); // exp includes the full exponent part\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) { // No decimal, no exponent -> integer types\n                //Must be an Integer, Long, or BigInteger\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                return createBigInteger(str); // Should always succeed if format is right\n\n            } else { // Has decimal or exponent -> floating point types\n                //Must be a Float, Double, or BigDecimal\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // exp can be null here\n                try {\n                    Float f = createFloat(str);\n                    // Check precision like in the typed section\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                     // Check precision like in the typed section\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Changed d.floatValue() to d.doubleValue()\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(str); // Should always succeed if format is right\n            }\n        }\n    }\n\n    // Helper methods assumed to exist (like in Apache Commons Lang NumberUtils)\n    // private static boolean isDigits(String str) { ... }\n    // private static boolean isAllZeros(String str) { ... }\n    // private static Integer createInteger(String str) { ... }\n    // private static Long createLong(String str) { ... }\n    // private static BigInteger createBigInteger(String str) { ... }\n    // private static Float createFloat(String str) { ... }\n    // private static Double createDouble(String str) { ... }\n    // private static BigDecimal createBigDecimal(String str) { ... }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}