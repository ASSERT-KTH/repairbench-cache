{
    "generation": "/**\n * Returns a view of this trie of all elements that are prefixed by\n * the specified string.\n *\n * @param prefix the key prefix\n * @return a view of this trie with all elements whose keys start with\n * the specified prefix.  If there are no elements returned,\n * it is an {@link UnmodifiableSortedMap unmodifiable map}.\n */\npublic SortedMap<K, V> prefixMap(K prefix) {\n    if (prefix == null) {\n        return new TrieMapView<>(this, null, null);\n    }\n\n    K lastPrefix = successor(prefix);\n    if (lastPrefix == null) {\n        return new TrieMapView<>(this, prefix, null);\n    } else {\n        // Handle the case where the prefix is not in the trie\n        K adjustedPrefix = ceilingKey(prefix);\n        if (adjustedPrefix == null || keyAnalyzer.bitIndex(adjustedPrefix, adjustedPrefix.length()) < 0) {\n            return Collections.emptySortedMap();\n        }\n        return new TrieMapView<>(this, adjustedPrefix, lastPrefix);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}