{
    "generation": "public void clear() {\n    if (parent == null) {\n        // we are the root node, just clear key, value and the Entry list\n        key = null;\n        value = null;\n        children = null;\n    } else {\n        // we are not the root node: we have to remove this node from the\n        // parent's children list and merge our children list into the\n        // parent's children list\n        final List<Entry<K, V>> parentChildren = parent.children;\n        // remove this node from the parent's children list\n        final int index = parentChildren.indexOf(this);\n        parentChildren.remove(index);\n\n        // merge our children list into the parent's children list\n        // (parent is always a non-leaf node so we can use prefixMatch)\n        final int size = children.size();\n        for (int i = 0; i < size; i++) {\n            final Entry<K, V> entry = children.get(i);\n            // add the entries to the parent's children list\n            // and make the entries point to the new parent\n            entry.parent = parent;\n            parentChildren.add(index, entry);\n        }\n\n        // fix the key for the one entry in this node's children that\n        // corresponds to the key previously stored in this node\n        final int index2 = prefixMatch(key, 0, key.length(), this);\n        final Entry<K, V> child = children.get(index2);\n        final int keyLength = key.length();\n\n        if (child.key.length() == keyLength) {\n            // child will replace this node in the trie, so\n            // it needs to have this node's value and other non-trie fields\n            child.value = value;\n            child.equals = equals;\n            child.getValue = getValue;\n            child.hashCode = hashCode;\n        } else {\n            // this node is not the end of a key, but we need to fix\n            // the key for the child that replaces it\n            final K newKey = keySubString(child.key, 0, keyLength);\n            child.key = newKey;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}