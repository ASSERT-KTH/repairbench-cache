{
    "generation": "@Override\npublic V remove(final Object key) {\n    if (key == null) {\n        throw new NullPointerException();\n    }\n    final String k = toString(key);\n    if (k.length() == 0) {\n        return null; // Cannot remove root key\n    }\n\n    final TrieEntry<K, V> current = getEntry(key);\n    if (current == null) {\n        return null;\n    }\n\n    final V retValue = current.getValue();\n    if (current == this.root) {\n        current.setKeyValue(null, null);\n        current.setNodePresent(false);\n        this.size--;\n        return retValue;\n    }\n\n    // current is a real node (not root)\n    if (current.isInternalNode()) { // current is a branch node.\n        // current still has children, so we cant remove it.\n        // we can only remove its value.\n        current.setNodePresent(false);\n        current.setKeyValue(current.getKey(), null);\n        this.size--;\n        return retValue;\n    }\n\n    // current is an external node (not a branch node), so it can be removed.\n    // It has only one \"real\" child, so we link its parent to its child.\n    // This takes care of the case where 'current' is a leaf node\n    // (its children point to 'self' or 'parent').\n\n    // find the parent of current\n    final TrieEntry<K, V> parent = current.getParent();\n\n    // find the child of current that is a \"real\" node\n    // (the other child will point to self or parent, effectively null)\n    TrieEntry<K, V> child;\n    if (current.getLeft().getParent() == current) { // current.getLeft() is the \"real\" child\n        child = current.getLeft();\n    } else { // current.getRight() is the \"real\" child\n        child = current.getRight();\n    }\n\n    // connect parent to child.\n    if (parent.getLeft() == current) {\n        parent.setLeft(child);\n    } else {\n        parent.setRight(child);\n    }\n\n    // FIX: Update the child's parent pointer.\n    // Before this fix, 'child's parent pointer would still point to 'current'\n    // which is being removed, causing a structural inconsistency.\n    child.setParent(parent);\n\n    this.size--;\n    return retValue;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}