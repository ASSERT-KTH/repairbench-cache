{
    "generation": "    public SortedMap<K, V> prefixMap(K prefix) {\n        return new PREFIXMAP(prefix);\n    }\n\n    private final class PREFIXMAP extends AbstractSortedMap<K, V> implements Serializable {\n\n        private final K prefix;\n\n        private PREFIXMAP(final K prefix) {\n            this.prefix = prefix;\n        }\n\n        @Override\n        public boolean containsKey(final Object key) {\n            return PatriciaTrie.this.containsKey(key);\n        }\n\n        @Override\n        public V get(final Object key) {\n            return PatriciaTrie.this.get(key);\n        }\n\n        @Override\n        public V remove(final Object key) {\n            return PatriciaTrie.this.remove(key);\n        }\n\n        @Override\n        public int size() {\n            return PatriciaTrie.this.size();\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return PatriciaTrie.this.isEmpty();\n        }\n\n        @Override\n        public void clear() {\n            PatriciaTrie.this.clear();\n        }\n\n        @Override\n        public SortedMap<K, V> headMap(final K toKey) {\n            return PatriciaTrie.this.prefixMap(prefix).headMap(toKey);\n        }\n\n        @Override\n        public SortedMap<K, V> subMap(final K fromKey, final K toKey) {\n            return PatriciaTrie.this.prefixMap(prefix).subMap(fromKey, toKey);\n        }\n\n        @Override\n        public SortedMap<K, V> tailMap(final K fromKey) {\n            return PatriciaTrie.this.prefixMap(prefix).tailMap(fromKey);\n        }\n\n        @Override\n        public Comparator<? super K> comparator() {\n            return PatriciaTrie.this.comparator();\n        }\n\n        @Override\n        public Set<K> keySet() {\n            return new KeySet(this);\n        }\n\n        @Override\n        public Collection<V> values() {\n            return new Values(this);\n        }\n\n        @Override\n        public Set<Map.Entry<K, V>> entrySet() {\n            return new EntrySet(this);\n        }\n\n        private final class EntrySet extends AbstractSet<Map.Entry<K, V>> {\n\n            private final SortedMap<K, V> map;\n\n            private EntrySet(SortedMap<K, V> map) {\n                this.map = map;\n            }\n\n            public Iterator<Map.Entry<K, V>> iterator() {\n                return new EntryIterator(map.entrySet().iterator());\n            }\n\n            public boolean contains(final Object o) {\n                if (!(o instanceof Map.Entry)) {\n                    return false;\n                }\n                final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;\n                return map.containsKey(entry.getKey());\n            }\n\n            public boolean remove(final Object o) {\n                if (!(o instanceof Map.Entry)) {\n                    return false;\n                }\n                final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;\n                return map.remove(entry.getKey()) != null;\n            }\n\n            public int size() {\n                return map.size();\n            }\n\n            public boolean isEmpty() {\n                return map.isEmpty();\n            }\n\n            public boolean equals(final Object o) {\n                if (o == this) {\n                    return true;\n                }\n                if (o instanceof Set) {\n                    return map.entrySet().equals(o);\n                }\n                return false;\n            }\n\n            public int hashCode() {\n                return map.hashCode();\n            }\n        }\n\n        private final class KeySet extends AbstractSet<K> implements Serializable {\n\n            private final SortedMap<K, V> map;\n\n            private KeySet(SortedMap<K, V> map) {\n                this.map = map;\n            }\n\n            public Iterator<K> iterator() {\n                return new KeyIterator(map.keySet().iterator());\n            }\n\n            public boolean contains(final Object o) {\n                return map.containsKey(o);\n            }\n\n            public boolean remove(final Object o) {\n                return map.remove(o) != null;\n            }\n\n            public int size() {\n                return map.size();\n            }\n\n            public boolean isEmpty() {\n                return map.isEmpty();\n            }\n\n            public void clear() {\n                map.clear();\n            }\n        }\n\n        private final class Values extends AbstractCollection<V> {\n\n            private final SortedMap<K, V> map;\n\n            private Values(SortedMap<K, V> map) {\n                this.map = map;\n            }\n\n            public Iterator<V> iterator() {\n                return new ValueIterator(map.keySet().iterator());\n            }\n\n            public boolean contains(final Object o) {\n                return map.containsValue(o);\n            }\n\n            public int size() {\n                return map.size();\n            }\n\n            public boolean isEmpty() {\n                return map.isEmpty();\n            }\n\n            public void clear() {\n                map.clear();\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}