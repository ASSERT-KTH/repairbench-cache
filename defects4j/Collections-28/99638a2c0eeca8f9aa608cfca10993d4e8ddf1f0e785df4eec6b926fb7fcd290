{
    "generation": "public V remove(Object key) {\n    if (key == null) {\n        throw new NullPointerException(\"Key cannot be null\");\n    }\n    K k = (K) key;\n    Node<K, V> node = getNode(k);\n    if (node == null) {\n        return null;\n    }\n    V value = node.getValue();\n    if (node.remove()) {\n        size--;\n        if (node.isExternalNode()) {\n            Node<K, V> parent = node.getParent();\n            if (parent != null) {\n                if (parent.getLeftChild() == node) {\n                    parent.setLeftChild(null);\n                } else {\n                    parent.setRightChild(null);\n                }\n                prune(parent);\n            }\n        } else {\n            prune(node);\n        }\n    }\n    return value;\n}\n\nprivate void prune(Node<K, V> node) {\n    while (node != null && node != root && !node.isEntry() && node.getLeftChild() == null && node.getRightChild() == null) {\n        Node<K, V> parent = node.getParent();\n        if (parent != null) {\n            if (parent.getLeftChild() == node) {\n                parent.setLeftChild(null);\n            } else {\n                parent.setRightChild(null);\n            }\n            node = parent;\n        } else {\n            break;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}