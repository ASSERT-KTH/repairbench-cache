{
    "generation": "public SortedMap<K, V> prefixMap(K prefix) {\n    return new TreeMap<>(Collections.unmodifiableMap(prefixMapInternal(prefix)));\n}\n\nprivate Map<K, V> prefixMapInternal(K prefix) {\n    Map<K, V> map = new LinkedHashMap<>();\n    prefixCollect(prefix, map, new StringBuilder());\n    return map;\n}\n\nprivate void prefixCollect(K prefix, Map<K, V> map, StringBuilder builder) {\n    if (prefix.length() > 0) {\n        char c = prefix.charAt(0);\n        if (getChild(c) == null) {\n            return;\n        }\n        builder.append(c);\n        prefix = prefix.subSequence(1, prefix.length()).toString();\n    }\n\n    for (Entry<K, V> entry : getEntries()) {\n        map.put(entry.getKey(), entry.getValue());\n    }\n\n    for (char c : getChildren()) {\n        builder.append(c);\n        getChild(c).prefixCollect(prefix, map, builder);\n        builder.deleteCharAt(builder.length() - 1);\n    }\n\n    if (prefix.length() > 0) {\n        builder.deleteCharAt(builder.length() - 1);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}