{
    "generation": "public SortedMap<K, V> prefixMap(K prefixKey) {\n    return new PrefixRangeMap(prefixKey);\n}\n\nprivate final class PrefixRangeMap extends RangeMap {\n    private final K prefix;\n    private int size = -1;\n\n    private PrefixRangeMap(K prefix) {\n        this.prefix = prefix;\n    }\n\n    @Override\n    protected boolean inRange(K key) {\n        return key != null && getKeyAnalyzer().isPrefix(prefix, key);\n    }\n\n    @Override\n    public void clear() {\n        Iterator<Map.Entry<K, V>> it = entrySet().iterator();\n        while (it.hasNext()) {\n            it.next();\n            it.remove();\n        }\n    }\n\n    @Override\n    public Set<Map.Entry<K, V>> entrySet() {\n        return new PrefixRangeEntrySet(this);\n    }\n\n    private final class PrefixRangeEntrySet extends RangeEntrySet {\n        PrefixRangeEntrySet(RangeMap delegate) {\n            super(delegate);\n        }\n\n        @Override\n        public Iterator<Map.Entry<K, V>> iterator() {\n            return new EntryIterator() {\n                @Override\n                protected TrieEntry<K, V> findNext(TrieEntry<K, V> node) {\n                    while (node != null) {\n                        if (inRange(node.key)) {\n                            return node;\n                        }\n                        node = nextEntry(node);\n                    }\n                    return null;\n                }\n\n                @Override\n                public boolean hasNext() {\n                    return next != null;\n                }\n\n                @Override\n                public Map.Entry<K, V> next() {\n                    if (next == null) {\n                        throw new NoSuchElementException();\n                    }\n                    return nextEntry();\n                }\n\n                private TrieEntry<K, V> nextEntry() {\n                    TrieEntry<K, V> e = next;\n                    next = findNext(nextEntry(next));\n                    return e;\n                }\n\n                private TrieEntry<K, V> nextEntry(TrieEntry<K, V> node) {\n                    if (node == null) {\n                        return null;\n                    }\n                    return PatriciaTrie.this.nextEntry(node);\n                }\n            };\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}