{
    "generation": "@Override\npublic SortedMap<K, V> prefixMap(final K key) {\n    if (key == null) {\n        return new UnmodifiableSortedMap<>(new TreeMap<K, V>());\n    }\n\n    final SortedMap<K, V> prefixMap = new TreeMap<>(new Comparator<K>() {\n        @Override\n        public int compare(final K k1, final K k2) {\n            return keyComparator.compare(k1, k2);\n        }\n    });\n\n    final K prefix = findPrefix(key);\n    if (prefix != null) {\n        final PatriciaTrie<K, V> subTrie = new PatriciaTrie<>(keyAnalyzer);\n        subTrie.root = new TrieNode<K, V>(null, null);\n        subTrie.root.addChild(new TrieNode<K, V>(prefix, getValueForExactKey(prefix)));\n\n        // Add all children of the prefix node\n        final TrieNode<K, V> prefixNode = getNode(prefix);\n        if (prefixNode != null) {\n            for (final TrieNode<K, V> child : prefixNode.children.values()) {\n                subTrie.root.addChild(child);\n            }\n        }\n\n        // Return a decorated map that will clear the correct nodes\n        return new UnmodifiableSortedMap<>(prefixMap) {\n            @Override\n            public void clear() {\n                // Remove all keys that start with the prefix\n                final Iterator<K> iterator = keySet().iterator();\n                while (iterator.hasNext()) {\n                    PatriciaTrie.this.remove(iterator.next());\n                }\n            }\n        };\n    }\n    return new UnmodifiableSortedMap<>(prefixMap);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}