{
    "generation": "    private void fixupParents(TrieEntry<K, V> entry) {\n        TrieEntry<K, V> current = entry.parent;\n        while (current != null) {\n            // Check if 'current' node can be removed (no value and no children)\n            if (!current.hasValue() && current.getLeft() == null && current.getRight() == null) {\n                if (current == root) {\n                    root = null;\n                } else {\n                    // Remove current node from its parent\n                    if (current.parent.getLeft() == current) {\n                        current.parent.setLeft(null);\n                    } else {\n                        current.parent.setRight(null);\n                    }\n                }\n            }\n            // Check if 'current' node can be promoted (no value and exactly one child)\n            else if (!current.hasValue() && (current.getLeft() != null ^ current.getRight() != null)) {\n                TrieEntry<K, V> child = (current.getLeft() != null) ? current.getLeft() : current.getRight();\n                if (current == root) {\n                    root = child;\n                    child.setParent(null);\n                } else {\n                    // Promote child to current's parent\n                    if (current.parent.getLeft() == current) {\n                        current.parent.setLeft(child);\n                    } else {\n                        current.parent.setRight(child);\n                    }\n                    child.setParent(current.parent);\n                }\n            }\n            // If the node still has a value, or has two children, or is already fixed, move to its parent\n            current = current.parent;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}