{
    "generation": "private void removeEntry(TrieEntry<K, V> entry) {\n    if (entry.left != null && entry.right != null) {\n        // Node has two children, find the in-order successor\n        TrieEntry<K, V> successor = entry.right;\n        while (successor.left != null) {\n            successor = successor.left;\n        }\n        // Replace the entry with the successor's data\n        entry.key = successor.key;\n        entry.value = successor.value;\n        // Now remove the successor (which has at most one child)\n        entry = successor;\n    }\n\n    // Proceed with removal of the entry (now has at most one child)\n    TrieEntry<K, V> parent = entry.parent;\n    TrieEntry<K, V> child = (entry.left != null) ? entry.left : entry.right;\n\n    if (child != null) {\n        child.parent = parent;\n    }\n\n    if (parent == null) {\n        root = child;\n    } else {\n        if (parent.left == entry) {\n            parent.left = child;\n        } else {\n            parent.right = child;\n        }\n    }\n\n    // Perform any necessary trie maintenance here\n    fixupAfterRemoval(entry);\n\n    // Decrement size\n    size--;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}