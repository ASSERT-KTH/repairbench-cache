{
    "generation": "public SortedMap<K, V> prefixMap(K prefix) {\n    return new PrefixRangeMap(prefix);\n}\n\nprivate final class PrefixRangeMap extends RangeMap {\n    private final K prefix;\n    \n    PrefixRangeMap(K prefix) {\n        this.prefix = prefix;\n    }\n    \n    @Override\n    public void clear() {\n        Iterator<Map.Entry<K, V>> it = entrySet().iterator();\n        while (it.hasNext()) {\n            it.next();\n            it.remove();\n        }\n    }\n    \n    @Override\n    protected Set<Map.Entry<K, V>> entrySet() {\n        return new EntrySet();\n    }\n    \n    private final class EntrySet extends AbstractSet<Map.Entry<K, V>> {\n        @Override\n        public Iterator<Map.Entry<K, V>> iterator() {\n            return new EntryIterator(prefix);\n        }\n        \n        @Override\n        public int size() {\n            int size = 0;\n            Iterator<Map.Entry<K, V>> it = iterator();\n            while (it.hasNext()) {\n                it.next();\n                size++;\n            }\n            return size;\n        }\n        \n        @Override\n        public boolean remove(Object o) {\n            if (!(o instanceof Map.Entry)) {\n                return false;\n            }\n            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;\n            K key = (K) entry.getKey();\n            if (key != null && getKeyAnalyzer().isPrefix(prefix, key)) {\n                return PatriciaTrie.this.remove(key) != null;\n            }\n            return false;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}