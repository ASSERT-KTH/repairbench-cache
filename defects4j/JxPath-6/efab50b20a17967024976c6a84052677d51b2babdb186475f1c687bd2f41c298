{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    // BUG FIX: do not evaluate both to iterators and compare only in that way\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        // Instead of contains((Iterator) l, r), use contains((Iterator) l, r) or compare each element to r\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        // Instead of findMatch which expects both iterators, implement logic to check if any combination equals\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n\n    // FIX: When one side is an iterable and the other is not, we should compare if *any* element equals the other.\n    // The following line previously recursed endlessly.\n    // Instead, provide actual equality check:\n    if (l == r) {\n        return true;\n    }\n    if (l == null || r == null) {\n        return false;\n    }\n    // Special: if one is string and another is a convertible type, compare their values as strings\n    if (l instanceof Number && r instanceof Number) {\n        return ((Number) l).doubleValue() == ((Number) r).doubleValue();\n    }\n    return l.equals(r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}