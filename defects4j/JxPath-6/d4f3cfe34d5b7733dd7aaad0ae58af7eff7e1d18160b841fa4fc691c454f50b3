{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n//        System.err.println(\"COMPARING: \" +\n//            (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n//            (r == null ? \"null\" : r.getClass().getName()));\n\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n            return contains((Iterator) l, r);\n        }\n        if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n            return contains((Iterator) r, l);\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            // Iterate through both iterators and check if any pair of elements are equal\n            Iterator leftIter = (Iterator) l;\n            Iterator rightIter = (Iterator) r;\n            while (leftIter.hasNext() && rightIter.hasNext()) {\n                if (equal(leftIter.next(), rightIter.next())) {\n                    return true;\n                }\n            }\n            // If one iterator has more elements than the other, check if the remaining elements are equal to the last element of the shorter iterator\n            Iterator longerIter = leftIter.hasNext() ? leftIter : rightIter;\n            Object lastElement = leftIter.hasNext() ? rightIter.next() : leftIter.next();\n            while (longerIter.hasNext()) {\n                if (equal(longerIter.next(), lastElement)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return equal(l, r);\n    }\n\n    private boolean contains(Iterator iterator, Object value) {\n        while (iterator.hasNext()) {\n            if (equal(iterator.next(), value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private boolean equal(Object l, Object r) {\n        if (l == null && r == null) {\n            return true;\n        }\n        if (l == null || r == null) {\n            return false;\n        }\n        return l.equals(r);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}