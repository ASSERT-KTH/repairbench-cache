{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n//        System.err.println(\"COMPARING: \" +\n//            (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n//            (r == null ? \"null\" : r.getClass().getName()));\n\n        // Unwrap EvalContexts (like InitialContext or SelfContext) to their single node pointer\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        // A variable or path evaluation might return a Pointer to the actual value.\n        // It's crucial to unwrap these Pointers to get to the underlying value (e.g., a Collection or a scalar)\n        // before performing type checks like instanceof Collection or instanceof Iterator.\n        if (l instanceof Pointer) {\n            l = ((Pointer) l).getValue();\n        }\n        if (r instanceof Pointer) {\n            r = ((Pointer) r).getValue();\n        }\n\n        // If the value is a Collection, convert it to an Iterator for XPath-style node-set comparisons.\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        // Handle comparisons involving Iterators (representing XPath node-sets).\n        // This corresponds to XPath's rule for comparing a node-set with a scalar or another node-set.\n        if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n            return contains((Iterator) l, r);\n        }\n        if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n            return contains((Iterator) r, l);\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            return findMatch((Iterator) l, (Iterator) r);\n        }\n        \n        // Fallback for direct comparison of non-iterator/non-collection values (scalar vs scalar).\n        // This typically delegates to an overloaded 'equal' method that handles primitive types, strings, etc.\n        return equal(l, r);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}