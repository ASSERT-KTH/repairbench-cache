{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    // Fix: add special handling when either side is an Iterator\n    if ((l instanceof Iterator) || (r instanceof Iterator)) {\n        Iterator lit = (l instanceof Iterator) ? (Iterator) l : null;\n        Iterator rit = (r instanceof Iterator) ? (Iterator) r : null;\n\n        if (lit != null && rit != null) {\n            return findMatch(lit, rit);\n        }\n        if (lit != null) {\n            return contains(lit, r);\n        }\n        if (rit != null) {\n            return contains(rit, l);\n        }\n    }\n\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}