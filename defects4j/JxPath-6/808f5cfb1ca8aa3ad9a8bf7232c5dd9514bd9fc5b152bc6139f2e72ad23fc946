{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n//        System.err.println(\"COMPARING: \" +\n//            (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n//            (r == null ? \"null\" : r.getClass().getName()));\n\n        // Convert InitialContext/SelfContext to their single NodePointer\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        // Unwrap NodePointers that contain Collections or Iterators.\n        // This ensures that XPath node-set comparison rules (via contains/findMatch)\n        // are applied even if the collection/iterator is wrapped within a NodePointer.\n        if (l instanceof org.apache.commons.jxpath.ri.model.NodePointer) {\n            Object unwrappedL = ((org.apache.commons.jxpath.ri.model.NodePointer) l).getValue();\n            if (unwrappedL instanceof java.util.Collection || unwrappedL instanceof java.util.Iterator) {\n                l = unwrappedL;\n            }\n        }\n        if (r instanceof org.apache.commons.jxpath.ri.model.NodePointer) {\n            Object unwrappedR = ((org.apache.commons.jxpath.ri.model.NodePointer) r).getValue();\n            if (unwrappedR instanceof java.util.Collection || unwrappedR instanceof java.util.Iterator) {\n                r = unwrappedR;\n            }\n        }\n\n        // If a value is a Collection, convert it to an Iterator for uniform processing\n        // as an XPath node-set.\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        // Apply XPath node-set comparison rules based on whether operands are Iterators\n        if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n            return contains((Iterator) l, r);\n        }\n        if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n            return contains((Iterator) r, l);\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            return findMatch((Iterator) l, (Iterator) r);\n        }\n        \n        // For all other cases (neither operand is an Iterator),\n        // delegate to the generic object comparison logic.\n        return equal(l, r);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}