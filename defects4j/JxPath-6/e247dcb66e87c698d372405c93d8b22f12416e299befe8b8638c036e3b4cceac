{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        // Only convert to iterator if this is a node set or similar,\n        // do NOT convert simple variable collections to iterators because\n        // they represent atomic values, not sets\n        // However, in the current behavior, \"$d\" is a variable set to [\"a\", \"b\"].\n        // For variable comparisons, we want to check if the right value is contained in left collection.\n\n        // If one is a Collection, and the other is not, test membership\n        if (l instanceof Collection && !(r instanceof Collection) && !(r instanceof Iterator)) {\n            return contains(((Collection) l).iterator(), r);\n        }\n        if (r instanceof Collection && !(l instanceof Collection) && !(l instanceof Iterator)) {\n            return contains(((Collection) r).iterator(), l);\n        }\n\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n            return contains((Iterator) l, r);\n        }\n        if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n            return contains((Iterator) r, l);\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            return findMatch((Iterator) l, (Iterator) r);\n        }\n        return equal(l, r);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}