{
    "generation": "protected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // Instead of unconditionally converting Collections into Iterators,\n    // we only treat a value as a node-set if it\u2019s a Collection OR an Iterator.\n    // Then we convert a Collection into an Iterator at the very moment we need to iterate.\n    boolean lIsNodeSet = (l instanceof Collection || l instanceof Iterator);\n    boolean rIsNodeSet = (r instanceof Collection || r instanceof Iterator);\n\n    if (lIsNodeSet && !rIsNodeSet) {\n        Iterator li = (l instanceof Collection) ? ((Collection) l).iterator() : (Iterator) l;\n        return contains(li, r);\n    }\n    if (!lIsNodeSet && rIsNodeSet) {\n        Iterator ri = (r instanceof Collection) ? ((Collection) r).iterator() : (Iterator) r;\n        return contains(ri, l);\n    }\n    if (lIsNodeSet && rIsNodeSet) {\n        // For two node sets, create fresh iterators if needed.\n        Iterator li = (l instanceof Collection) ? ((Collection) l).iterator() : (Iterator) l;\n        Iterator ri = (r instanceof Collection) ? ((Collection) r).iterator() : (Iterator) r;\n        return findMatch(li, ri);\n    }\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}