{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    boolean lIsIterator = (l instanceof Iterator);\n    boolean rIsIterator = (r instanceof Iterator);\n\n    // If either is an iterator, treat as a general comparison: some node equals the scalar or other nodes\n    if (lIsIterator || rIsIterator) {\n        if (!lIsIterator) {\n            l = singletonIterator(l);\n            lIsIterator = true;\n        }\n        if (!rIsIterator) {\n            r = singletonIterator(r);\n            rIsIterator = true;\n        }\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n\n    return equal(l, r);\n}\n\nprivate Iterator singletonIterator(final Object value) {\n    return new Iterator() {\n        private boolean hasNext = true;\n\n        public boolean hasNext() {\n            return hasNext;\n        }\n\n        public Object next() {\n            if (!hasNext) {\n                throw new java.util.NoSuchElementException();\n            }\n            hasNext = false;\n            return value;\n        }\n\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n    };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}