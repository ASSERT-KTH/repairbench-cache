{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        if (l instanceof Iterator && !(r instanceof Iterator)) {\n            Iterator<?> it = (Iterator<?>) l;\n            while (it.hasNext()) {\n                Object elem = it.next();\n                if (equal(elem, r)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (!(l instanceof Iterator) && r instanceof Iterator) {\n            Iterator<?> it = (Iterator<?>) r;\n            while (it.hasNext()) {\n                Object elem = it.next();\n                if (equal(elem, l)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            Iterator<?> leftIt = (Iterator<?>) l;\n            while (leftIt.hasNext()) {\n                Object leftElem = leftIt.next();\n                Iterator<?> rightIt = (Iterator<?>) r;\n                while (rightIt.hasNext()) {\n                    Object rightElem = rightIt.next();\n                    if (equal(leftElem, rightElem)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        return equal(l, r);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}