{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n//    System.err.println(\"COMPARING: \" +\n//        (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n//        (r == null ? \"null\" : r.getClass().getName()));\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // If either side is a Collection, treat as Iterator\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    // Fix: If one side is an Iterator, compare to item equality (contains)\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        Iterator li = (Iterator) l;\n        // FIX: if r is NOT an iterator, we must restart the iterator each call\n        List lList = new ArrayList<>();\n        li.forEachRemaining(lList::add);\n        return contains(lList.iterator(), r); // Always recreate iterator (so it's not exhausted)\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        Iterator ri = (Iterator) r;\n        List rList = new ArrayList<>();\n        ri.forEachRemaining(rList::add);\n        return contains(rList.iterator(), l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        Iterator li = (Iterator) l;\n        Iterator ri = (Iterator) r;\n        List lList = new ArrayList<>();\n        List rList = new ArrayList<>();\n        li.forEachRemaining(lList::add);\n        ri.forEachRemaining(rList::add);\n        return findMatch(lList.iterator(), rList.iterator());\n    }\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}