{
    "generation": "protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n            return contains((Iterator) l, r);\n        }\n        if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n            return contains((Iterator) r, l);\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            Iterator leftIterator = (Iterator) l;\n            Iterator rightIterator = (Iterator) r;\n            while (leftIterator.hasNext() && rightIterator.hasNext()) {\n                if (!equal(leftIterator.next(), rightIterator.next())) {\n                    return false;\n                }\n            }\n            return !leftIterator.hasNext() && !rightIterator.hasNext();\n        }\n        return equal(l, r);\n    }\n\nprivate boolean contains(Iterator iterator, Object value) {\n    while (iterator.hasNext()) {\n        if (equal(iterator.next(), value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate boolean equal(Object o1, Object o2) {\n    if (o1 == null && o2 == null) {\n        return true;\n    }\n    if (o1 == null || o2 == null) {\n        return false;\n    }\n    return o1.equals(o2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}