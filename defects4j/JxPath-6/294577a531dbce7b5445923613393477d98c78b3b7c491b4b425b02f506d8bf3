{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right)\n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n        // If either operand is a JXPath context, turn it into\n        // either a single NodePointer or an iterator of pointers.\n        if (l instanceof EvalContext) {\n            EvalContext ec = (EvalContext) l;\n            if (ec instanceof InitialContext || ec instanceof SelfContext) {\n                l = ec.getSingleNodePointer();\n            }\n            else {\n                l = ec.iteratePointers();\n            }\n        }\n        if (r instanceof EvalContext) {\n            EvalContext ec = (EvalContext) r;\n            if (ec instanceof InitialContext || ec instanceof SelfContext) {\n                r = ec.getSingleNodePointer();\n            }\n            else {\n                r = ec.iteratePointers();\n            }\n        }\n\n        // Turn any Java collections into iterators\n        if (l instanceof Collection) {\n            l = ((Collection<?>) l).iterator();\n        }\n        if (r instanceof Collection) {\n            r = ((Collection<?>) r).iterator();\n        }\n\n        // XPath \"=\" semantics:\n        //   node-set = non-node-set  \u2192 true if any node equals the value\n        //   non-node-set = node-set  \u2192 same\n        //   node-set = node-set      \u2192 true if any node on the left equals any node on the right\n        if (l instanceof Iterator && !(r instanceof Iterator)) {\n            return contains((Iterator<?>) l, r);\n        }\n        if (!(l instanceof Iterator) && r instanceof Iterator) {\n            return contains((Iterator<?>) r, l);\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            return findMatch((Iterator<?>) l, (Iterator<?>) r);\n        }\n\n        // Both are singletons: do a simple comparison\n        return equal(l, r);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}