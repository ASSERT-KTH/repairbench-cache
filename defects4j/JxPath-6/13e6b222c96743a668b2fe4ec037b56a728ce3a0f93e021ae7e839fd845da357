{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    //        System.err.println(\"COMPARING: \" +\n    //            (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n    //            (r == null ? \"null\" : r.getClass().getName()));\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    boolean lIsColl = false;\n    boolean rIsColl = false;\n\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n        lIsColl = true;\n    }\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n        rIsColl = true;\n    }\n\n    // Fix: when both are Iterators that originated from Collections, compare them element-wise\n    // even if the other is not an iterator\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}