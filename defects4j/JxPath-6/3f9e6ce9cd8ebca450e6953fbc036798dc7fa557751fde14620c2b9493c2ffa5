{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // Convert Iterable or Iterator to Iterator (special case for Collections, but also Arrays)\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    } else if (l != null && l.getClass().isArray()) {\n        l = Arrays.asList((Object[]) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    } else if (r != null && r.getClass().isArray()) {\n        r = Arrays.asList((Object[]) r).iterator();\n    }\n\n    // If only one is an iterator, check if it contains the other\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) ((Iterator) l), (Iterator) ((Iterator) r));\n    }\n\n    // SPECIAL CASE: At least one of the values is a Pointer, compare its value for equality\n    // Unwrap pointers for comparison\n    if (l instanceof org.apache.commons.jxpath.Pointer) {\n        l = ((org.apache.commons.jxpath.Pointer) l).getValue();\n    }\n    if (r instanceof org.apache.commons.jxpath.Pointer) {\n        r = ((org.apache.commons.jxpath.Pointer) r).getValue();\n    }\n\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}