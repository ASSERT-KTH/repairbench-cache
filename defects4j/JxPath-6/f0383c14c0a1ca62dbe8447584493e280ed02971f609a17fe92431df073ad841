{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right)\n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    // If either side is a context, get its single NodePointer\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // If either side is a NodePointer whose value is a Collection, turn it into an Iterator\n    if (l instanceof NodePointer) {\n        Object v = ((NodePointer) l).getValue();\n        if (v instanceof Collection) {\n            l = ((Collection) v).iterator();\n        }\n    }\n    if (r instanceof NodePointer) {\n        Object v = ((NodePointer) r).getValue();\n        if (v instanceof Collection) {\n            r = ((Collection) v).iterator();\n        }\n    }\n\n    // If either side is a bare Collection, turn it into an Iterator\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    // XPath semantics: if one side is a node\u2010set (Iterator) and the other is atomic, test containment\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    // If both are node\u2010sets, see if any pair of nodes is equal\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    // Otherwise do a simple atomic comparison\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}