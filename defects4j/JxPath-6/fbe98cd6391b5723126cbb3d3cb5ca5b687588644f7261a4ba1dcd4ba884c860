{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    if (l instanceof Collection && !(l instanceof List)) { // Only wrap if not List, so List is not turned to Iterator\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection && !(r instanceof List)) {\n        r = ((Collection) r).iterator();\n    }\n\n    if (l instanceof Iterator && !(r instanceof Iterator)) {\n        return contains((Iterator) cloneIterator((Iterator) l), r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) cloneIterator((Iterator) r), l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) cloneIterator((Iterator) l), (Iterator) cloneIterator((Iterator) r));\n    }\n    // Special fix: if any side is a Collection (especially List), treat as iterator for equal-comparison\n    if (l instanceof Collection && !(r instanceof Collection)) {\n        return contains(((Collection) l).iterator(), r);\n    }\n    if (!(l instanceof Collection) && r instanceof Collection) {\n        return contains(((Collection) r).iterator(), l);\n    }\n    if (l instanceof Collection && r instanceof Collection) {\n        return findMatch(((Collection) l).iterator(), ((Collection) r).iterator());\n    }\n    return equal(l, r);\n}\n\n// Helper method to clone an iterator so that multiple usages don't interfere\nprivate Iterator<?> cloneIterator(Iterator<?> it) {\n    // Attempt to clone known iterators via constructing new ones from a List, else return original (possibly dangerous)\n    List<Object> items = new java.util.ArrayList<Object>();\n    while (it.hasNext()) {\n        items.add(it.next());\n    }\n    return items.iterator();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}