{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right)\n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    // If either side is a node\u2010set (an EvalContext), flatten it to an Iterator of NodePointers\n    if (l instanceof EvalContext) {\n        EvalContext lc = (EvalContext) l;\n        java.util.List nodes = new java.util.ArrayList();\n        while (lc.next()) {\n            nodes.add(lc.getSingleNodePointer());\n        }\n        l = nodes.iterator();\n    }\n    if (r instanceof EvalContext) {\n        EvalContext rc = (EvalContext) r;\n        java.util.List nodes = new java.util.ArrayList();\n        while (rc.next()) {\n            nodes.add(rc.getSingleNodePointer());\n        }\n        r = nodes.iterator();\n    }\n\n    // If either side is a Java Collection, turn it into an Iterator\n    if (l instanceof java.util.Collection) {\n        l = ((java.util.Collection) l).iterator();\n    }\n    if (r instanceof java.util.Collection) {\n        r = ((java.util.Collection) r).iterator();\n    }\n\n    // Iterator vs atomic\n    if ((l instanceof java.util.Iterator) && !(r instanceof java.util.Iterator)) {\n        return contains((java.util.Iterator) l, r);\n    }\n    if (!(l instanceof java.util.Iterator) && (r instanceof java.util.Iterator)) {\n        return contains((java.util.Iterator) r, l);\n    }\n    // Iterator vs Iterator\n    if (l instanceof java.util.Iterator && r instanceof java.util.Iterator) {\n        return findMatch((java.util.Iterator) l, (java.util.Iterator) r);\n    }\n\n    // Both atomic\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}