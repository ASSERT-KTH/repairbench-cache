{
    "generation": "    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        if (l instanceof Iterator && r instanceof Iterator) {\n            Iterator<?> itL = (Iterator<?>) l;\n            Iterator<?> itR = (Iterator<?>) r;\n            boolean matchFound = false;\n            while (itL.hasNext()) {\n                Object elemL = itL.next();\n                while (itR.hasNext()) {\n                    Object elemR = itR.next();\n                    if (equal(context, wrapAsExpression(elemL), wrapAsExpression(elemR))) {\n                        matchFound = true;\n                        break;\n                    }\n                }\n                if (matchFound) {\n                    break;\n                }\n                // Reset r iterator for next element in l\n                r = ((Collection) right.compute(context)).iterator();\n                itR = (Iterator<?>) r;\n            }\n            return matchFound && !itR.hasNext();\n        } else if (l instanceof Iterator) {\n            return contains((Iterator<?>) l, r);\n        } else if (r instanceof Iterator) {\n            return contains((Iterator<?>) r, l);\n        } else {\n            return Objects.equals(l, r);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}