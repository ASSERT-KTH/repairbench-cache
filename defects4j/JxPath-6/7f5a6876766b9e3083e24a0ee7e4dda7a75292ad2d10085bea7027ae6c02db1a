{
    "generation": "protected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // Determine if either value is a node-set.\n    boolean lIsNodeSet = (l instanceof Iterator) || (l instanceof Collection);\n    boolean rIsNodeSet = (r instanceof Iterator) || (r instanceof Collection);\n\n    // If one operand is a node-set but the other is not,\n    // then the comparison should succeed if ANY node in the node-set\n    // equals the other operand.\n    if (lIsNodeSet && !rIsNodeSet) {\n        Iterator lit = (l instanceof Iterator) ? (Iterator) l : ((Collection) l).iterator();\n        return contains(lit, r);\n    }\n    if (!lIsNodeSet && rIsNodeSet) {\n        Iterator rit = (r instanceof Iterator) ? (Iterator) r : ((Collection) r).iterator();\n        return contains(rit, l);\n    }\n    // If both are node-sets, then they compare equal if there is at least one \n    // pair of nodes (one from each) that compare equal.\n    if (lIsNodeSet && rIsNodeSet) {\n        Iterator lit = (l instanceof Iterator) ? (Iterator) l : ((Collection) l).iterator();\n        Iterator rit = (r instanceof Iterator) ? (Iterator) r : ((Collection) r).iterator();\n        return findMatch(lit, rit);\n    }\n    \n    // Otherwise, use the standard equality comparison.\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}