{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    boolean lIsIterator = false;\n    boolean rIsIterator = false;\n\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n        lIsIterator = true;\n    }\n    else if (l instanceof Iterator) {\n        lIsIterator = true;\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n        rIsIterator = true;\n    }\n    else if (r instanceof Iterator) {\n        rIsIterator = true;\n    }\n\n    // Fix: If one is iterator/collection and the other is not, then iterate and compare\n    if (lIsIterator && !rIsIterator) {\n        return contains((Iterator) l, r);\n    }\n    if (!lIsIterator && rIsIterator) {\n        return contains((Iterator) r, l);\n    }\n    // If both are iterators, compare accordingly\n    if (lIsIterator && rIsIterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    // If both are not iterators, perform normal equality\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}