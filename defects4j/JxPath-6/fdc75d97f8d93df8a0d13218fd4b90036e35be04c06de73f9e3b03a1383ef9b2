{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right)\n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n        // First pass: Handle EvalContexts (InitialContext, SelfContext) by converting them to NodePointers.\n        // This retains their identity as JXPath contexts.\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        // Second pass: Determine the effective type (Iterator vs. Scalar) for comparison logic.\n        // Use JXPathContext.getValue() to unwrap NodePointers and other internal wrappers\n        // to get to the underlying Java object, which is then checked for Collection/Iterator.\n        Object unwrappedL = JXPathContext.getValue(l);\n        Object unwrappedR = JXPathContext.getValue(r);\n\n        // An object effectively represents an Iterator if its unwrapped value is an Iterator or a Collection.\n        boolean lRepresentsIterator = (unwrappedL instanceof Iterator) || (unwrappedL instanceof Collection);\n        boolean rRepresentsIterator = (unwrappedR instanceof Iterator) || (unwrappedR instanceof Collection);\n\n        // Create actual Iterator instances if they represent one.\n        // These iterators will be used by the `contains` and `findMatch` methods.\n        Iterator iterL = null;\n        if (lRepresentsIterator) {\n            if (unwrappedL instanceof Collection) {\n                iterL = ((Collection) unwrappedL).iterator();\n            } else { // Must be an Iterator already\n                iterL = (Iterator) unwrappedL;\n            }\n        }\n\n        Iterator iterR = null;\n        if (rRepresentsIterator) {\n            if (unwrappedR instanceof Collection) {\n                iterR = ((Collection) unwrappedR).iterator();\n            } else { // Must be an Iterator already\n                iterR = (Iterator) unwrappedR;\n            }\n        }\n\n        // Apply XPath comparison rules:\n        // If one is an Iterator and the other is not, use contains().\n        if (lRepresentsIterator && !rRepresentsIterator) {\n            // Pass the original 'r' as the 'value' argument to contains,\n            // because 'contains' method itself uses JXPathContext.getValue() on its arguments.\n            return contains(iterL, r);\n        }\n        if (!lRepresentsIterator && rRepresentsIterator) {\n            // Pass the original 'l' as the 'value' argument to contains.\n            return contains(iterR, l);\n        }\n        // If both are Iterators, use findMatch().\n        if (lRepresentsIterator && rRepresentsIterator) {\n            return findMatch(iterL, iterR);\n        }\n\n        // If neither represents an Iterator, fall back to simple object comparison.\n        // Pass the original 'l' and 'r' as the 'equal(Object, Object)' method also\n        // handles unwrapping using JXPathContext.getValue() internally.\n        return equal(l, r);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}