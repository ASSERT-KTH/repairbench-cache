{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    /*\n     * If one of the sides is still a context (e.g. a path or\n     * a variable that was wrapped as a SelfContext/InitialContext),\n     * unwrap it to its single node\u2010pointer, then pull out the real\n     * value from that pointer.  In particular, if the pointer\n     * refers to a List, getValue() will return the List itself\n     * and fall through to the Collection\u2192Iterator logic below.\n     */\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        NodePointer ptr = ((EvalContext) l).getSingleNodePointer();\n        l = (ptr == null ? null : ptr.getValue());\n    }\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        NodePointer ptr = ((EvalContext) r).getSingleNodePointer();\n        r = (ptr == null ? null : ptr.getValue());\n    }\n\n    /* Collections become Iterators */\n    if (l instanceof Collection) {\n        l = ((Collection<?>) l).iterator();\n    }\n    if (r instanceof Collection) {\n        r = ((Collection<?>) r).iterator();\n    }\n\n    /* Iterator vs. atomic: contains semantics */\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        return contains((Iterator<?>) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator<?>) r, l);\n    }\n\n    /* Two Iterators: cross\u2010match any pair */\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator<?>) l, (Iterator<?>) r);\n    }\n\n    /* Both atomic: direct compare */\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}