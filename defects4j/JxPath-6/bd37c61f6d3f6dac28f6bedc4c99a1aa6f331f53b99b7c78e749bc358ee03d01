{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n//        System.err.println(\"COMPARING: \" +\n//            (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n//            (r == null ? \"null\" : r.getClass().getName()));\n\n        // Handle InitialContext/SelfContext by getting single node pointer.\n        // This might result in a NodePointer or null.\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        // Unwrap NodePointers to their actual values.\n        // This is crucial to correctly identify underlying types (like Collections)\n        // that might be wrapped in a NodePointer, before attempting Collection/Iterator checks.\n        if (l instanceof NodePointer) {\n            l = ((NodePointer) l).getValue();\n        }\n        if (r instanceof NodePointer) {\n            r = ((NodePointer) r).getValue();\n        }\n\n        // Convert Collections to Iterators for XPath's collection-aware comparisons.\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        // Perform comparisons based on Iterator presence (XPath's collection-to-scalar/collection-to-collection rules).\n        if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n            return contains((Iterator) l, r);\n        }\n        if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n            return contains((Iterator) r, l);\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            return findMatch((Iterator) l, (Iterator) r);\n        }\n        \n        // Fallback to the general object comparison method (in superclass CoreOperationRelationalExpr).\n        return equal(l, r);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}