{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // If either l or r is a Collection, convert it to an Iterator for comparison\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    } else if (l != null && l.getClass().isArray()) {\n        l = Arrays.asList((Object[]) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    } else if (r != null && r.getClass().isArray()) {\n        r = Arrays.asList((Object[]) r).iterator();\n    }\n\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    // FIX: handle case where l or r is a singleton List (from VariableContext) and the other is not\n    if (l instanceof List && ((List) l).size() == 1) {\n        l = ((List) l).get(0);\n    }\n    if (r instanceof List && ((List) r).size() == 1) {\n        r = ((List) r).get(0);\n    }\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}