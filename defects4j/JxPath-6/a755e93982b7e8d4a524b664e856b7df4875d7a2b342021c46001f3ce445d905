{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    if (l instanceof Collection) {\n        Collection coll = (Collection) l;\n        // If it's a collection wrapping a single string element, unwrap it\n        if (coll.size() == 1) {\n            Object single = coll.iterator().next();\n            // Unwrapping nested Collection again if needed\n            if (single instanceof Collection) {\n                l = ((Collection) single).iterator();\n            } else {\n                l = single;\n            }\n        } else {\n            l = coll.iterator();\n        }\n    }\n\n    if (r instanceof Collection) {\n        Collection coll = (Collection) r;\n        // If it's a collection wrapping a single string element, unwrap it\n        if (coll.size() == 1) {\n            Object single = coll.iterator().next();\n            // Unwrapping nested Collection again if needed\n            if (single instanceof Collection) {\n                r = ((Collection) single).iterator();\n            } else {\n                r = single;\n            }\n        } else {\n            r = coll.iterator();\n        }\n    }\n\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}