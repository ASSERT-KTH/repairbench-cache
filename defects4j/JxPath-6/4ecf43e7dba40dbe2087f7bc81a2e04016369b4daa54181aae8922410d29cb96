{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n//        System.err.println(\"COMPARING: \" +\n//            (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n//            (r == null ? \"null\" : r.getClass().getName()));\n\n        // XPath comparisons operate on values, not pointers.\n        // Unwrap any Pointers to get to their underlying values before type-based comparison logic.\n        if (l instanceof org.apache.commons.jxpath.Pointer) {\n            l = ((org.apache.commons.jxpath.Pointer) l).getValue();\n        }\n        if (r instanceof org.apache.commons.jxpath.Pointer) {\n            r = ((org.apache.commons.jxpath.Pointer) r).getValue();\n        }\n        \n        // EvalContext (including InitialContext and SelfContext) implements Iterator.\n        // According to XPath node-set comparison rules, a node-set (represented by EvalContext)\n        // should be handled by the Iterator logic. The original conversion to a SingleNodePointer\n        // is generally incorrect for node-set equality, as it only compares the first node.\n        // By removing this block, EvalContexts will correctly be treated as Iterators.\n        // (No change needed here, as the block is removed).\n        // if (l instanceof InitialContext || l instanceof SelfContext) {\n        //     l = ((EvalContext) l).getSingleNodePointer();\n        // }\n        // if (r instanceof InitialContext || r instanceof SelfContext) {\n        //     r = ((EvalContext) r).getSingleNodePointer();\n        // }\n\n        // If a value is a Collection, convert it to an Iterator for node-set comparison.\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        // Now, perform comparison based on whether values are Iterators (node-sets).\n        if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n            return contains((Iterator) l, r);\n        }\n        if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n            return contains((Iterator) r, l);\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            return findMatch((Iterator) l, (Iterator) r);\n        }\n        \n        // For all other types (primitives, Strings, Booleans, etc.),\n        // delegate to the static equal helper method. This helper is\n        // responsible for XPath type coercions and standard equality.\n        return equal(l, r);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}