{
    "generation": "protected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    // If an operand is a context, substitute its single node pointer.\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    /*\n     * In XPath \u201c=\u201d comparisons, if either operand is a node\u2010set,\n     * the result is true if at least one node in the set, when converted\n     * to its atomic value, is equal to the other operand.\n     *\n     * However, node-sets may be returned as Collections or Iterators.\n     * To avoid problems with one-shot Iterators, we materialize any node\u2010set\n     * into a List.\n     */\n    boolean lIsNodeSet = (l instanceof Collection) || (l instanceof Iterator);\n    boolean rIsNodeSet = (r instanceof Collection) || (r instanceof Iterator);\n\n    if (lIsNodeSet) {\n        if (l instanceof Collection) {\n            l = new ArrayList((Collection) l);\n        } else { // l is an Iterator \u2013 materialize it into a List.\n            List temp = new ArrayList();\n            Iterator it = (Iterator) l;\n            while (it.hasNext()) {\n                temp.add(it.next());\n            }\n            l = temp;\n        }\n    }\n    if (rIsNodeSet) {\n        if (r instanceof Collection) {\n            r = new ArrayList((Collection) r);\n        } else { // r is an Iterator \u2013 materialize it into a List.\n            List temp = new ArrayList();\n            Iterator it = (Iterator) r;\n            while (it.hasNext()) {\n                temp.add(it.next());\n            }\n            r = temp;\n        }\n    }\n\n    // If one operand is a node-set (a List now) and the other is a scalar,\n    // return true if any item in the node-set (after unwrapping node pointers)\n    // equals the scalar.\n    if (lIsNodeSet && !rIsNodeSet) {\n        List lList = (List) l;\n        for (int i = 0, size = lList.size(); i < size; i++) {\n            Object item = lList.get(i);\n            if (item instanceof NodePointer) {\n                item = ((NodePointer) item).getValue();\n            }\n            Object rVal = r instanceof NodePointer ? ((NodePointer) r).getValue() : r;\n            if (equal(item, rVal)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (rIsNodeSet && !lIsNodeSet) {\n        List rList = (List) r;\n        for (int i = 0, size = rList.size(); i < size; i++) {\n            Object item = rList.get(i);\n            if (item instanceof NodePointer) {\n                item = ((NodePointer) item).getValue();\n            }\n            Object lVal = l instanceof NodePointer ? ((NodePointer) l).getValue() : l;\n            if (equal(item, lVal)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // If both operands are node-sets, return true if any item from one set equals any item from the other.\n    if (lIsNodeSet && rIsNodeSet) {\n        List lList = (List) l;\n        List rList = (List) r;\n        for (int i = 0, lSize = lList.size(); i < lSize; i++) {\n            Object li = lList.get(i);\n            if (li instanceof NodePointer) {\n                li = ((NodePointer) li).getValue();\n            }\n            for (int j = 0, rSize = rList.size(); j < rSize; j++) {\n                Object rj = rList.get(j);\n                if (rj instanceof NodePointer) {\n                    rj = ((NodePointer) rj).getValue();\n                }\n                if (equal(li, rj)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    // Neither operand is a node-set: unwrap node pointers if needed and compare.\n    if (l instanceof NodePointer) {\n        l = ((NodePointer) l).getValue();\n    }\n    if (r instanceof NodePointer) {\n        r = ((NodePointer) r).getValue();\n    }\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}