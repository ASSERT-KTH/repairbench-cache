{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // Only convert to iterator if the collection is NOT a String (which is Iterable in Java)\n    if (l instanceof Collection && !(l instanceof String)) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection && !(r instanceof String)) {\n        r = ((Collection) r).iterator();\n    }\n\n    // Fix: When only one side is an Iterator, iterate through its elements and compare to the other side.\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        Iterator lit = (Iterator) l;\n        // Find if r equals ANY element\n        while (lit.hasNext()) {\n            Object elem = lit.next();\n            if (equal(elem, r)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        Iterator rit = (Iterator) r;\n        // Find if l equals ANY element\n        while (rit.hasNext()) {\n            Object elem = rit.next();\n            if (equal(l, elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}