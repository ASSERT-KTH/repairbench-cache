{
    "generation": "protected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // Instead of immediately converting Collections to Iterators (which may exhaust them\n    // and lead to incorrect results in subsequent comparisons), we check here whether\n    // either operand is \u201citerable\u201d (a Collection or an Iterator) and then obtain a fresh\n    // Iterator if necessary.\n    boolean lIterable = (l instanceof Collection) || (l instanceof Iterator);\n    boolean rIterable = (r instanceof Collection) || (r instanceof Iterator);\n\n    if (lIterable && !rIterable) {\n        Iterator li = (l instanceof Collection) ? ((Collection) l).iterator() : (Iterator) l;\n        return contains(li, r);\n    }\n    if (!lIterable && rIterable) {\n        Iterator ri = (r instanceof Collection) ? ((Collection) r).iterator() : (Iterator) r;\n        return contains(ri, l);\n    }\n    if (lIterable && rIterable) {\n        Iterator li = (l instanceof Collection) ? ((Collection) l).iterator() : (Iterator) l;\n        Iterator ri = (r instanceof Collection) ? ((Collection) r).iterator() : (Iterator) r;\n        return findMatch(li, ri);\n    }\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}