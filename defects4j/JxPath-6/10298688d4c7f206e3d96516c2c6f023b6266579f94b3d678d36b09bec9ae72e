{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n//    System.err.println(\"COMPARING: \" +\n//        (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n//        (r == null ? \"null\" : r.getClass().getName()));\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if ((l instanceof Iterator) && (r instanceof Iterator)) {\n        // Save the original iterators\n        Iterator li = (Iterator) l;\n        Iterator ri = (Iterator) r;\n        \n        // First check if there's a direct match\n        boolean match = findMatch(li, ri);\n        if (match) {\n            return true;\n        }\n        \n        // If no direct match was found, try comparing individual elements\n        // by exhaustively checking each element in left iterator against each in right\n        while (li.hasNext()) {\n            Object lv = li.next();\n            Iterator riCopy = (Iterator) r;\n            while (riCopy.hasNext()) {\n                Object rv = riCopy.next();\n                if (equal(lv, rv)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}