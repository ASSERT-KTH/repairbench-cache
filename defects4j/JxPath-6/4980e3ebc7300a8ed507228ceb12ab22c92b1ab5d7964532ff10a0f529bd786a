{
    "generation": "protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if (l instanceof Iterator && r instanceof Iterator) {\n        // Fix: Use containsAny to check if any element in one iterator matches any in the other\n        return containsAny((Iterator) l, (Iterator) r);\n    }\n    // Fix: Handle primitive types and null values correctly\n    return areEqual(l, r);\n}\n\nprivate boolean containsAny(Iterator iter1, Iterator iter2) {\n    while (iter1.hasNext()) {\n        Object obj1 = iter1.next();\n        while (iter2.hasNext()) {\n            Object obj2 = iter2.next();\n            if (areEqual(obj1, obj2)) {\n                return true;\n            }\n        }\n        // Reset iter2 for the next iteration of iter1\n        iter2 = getIterator(iter2);\n    }\n    return false;\n}\n\nprivate Iterator getIterator(Iterator iter) {\n    if (iter instanceof ListIterator) {\n        ListIterator listIter = (ListIterator) iter;\n        listIter.previous(); // Move back to the start\n        return listIter;\n    }\n    // For other types of iterators, we cannot reset them, so we assume they are single-use\n    return Collections.emptyIterator();\n}\n\nprivate boolean areEqual(Object obj1, Object obj2) {\n    if (obj1 == null && obj2 == null) {\n        return true;\n    }\n    if (obj1 == null || obj2 == null) {\n        return false;\n    }\n    if (obj1 instanceof Number && obj2 instanceof Number) {\n        return ((Number) obj1).doubleValue() == ((Number) obj2).doubleValue();\n    }\n    return obj1.equals(obj2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}