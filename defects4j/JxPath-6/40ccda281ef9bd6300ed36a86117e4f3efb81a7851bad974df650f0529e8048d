{
    "generation": "/**\n * Compares two values\n */\nprotected boolean equal(\n    EvalContext context,\n    Expression left,\n    Expression right) \n{\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    // Unwrap context wrappers\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // Unwrap collections\n    if (l instanceof Collection) {\n        l = ((Collection) l).iterator();\n    }\n\n    if (r instanceof Collection) {\n        r = ((Collection) r).iterator();\n    }\n\n    boolean lIsIterator = l instanceof Iterator;\n    boolean rIsIterator = r instanceof Iterator;\n\n    // If one operand is iterator, treat as multi-valued comparison: return true if any element equals the singleton\n    if (lIsIterator && !rIsIterator) {\n        return contains((Iterator) l, r);\n    }\n    if (!lIsIterator && rIsIterator) {\n        return contains((Iterator) r, l);\n    }\n    if (lIsIterator && rIsIterator) {\n        Iterator li = (Iterator) l;\n        Iterator ri = (Iterator) r;\n        // Check if any pair (li element, ri element) are equal\n        // We need nested iteration\n        List<Object> rList = new ArrayList<>();\n        ri.forEachRemaining(rList::add);\n        while (li.hasNext()) {\n            Object le = li.next();\n            for (Object re : rList) {\n                if (equal(le, re)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    // Both are singletons: compare directly\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}