{
    "generation": "protected boolean equal(EvalContext context, Expression left, Expression right) {\n    Object l = left.compute(context);\n    Object r = right.compute(context);\n\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l = ((EvalContext) l).getSingleNodePointer();\n    }\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r = ((EvalContext) r).getSingleNodePointer();\n    }\n\n    // If an Iterator is passed in (but not a Collection) then materialize it,\n    // so that later comparisons do not \u201cconsume\u201d the node-set.\n    if (l instanceof Iterator && !(l instanceof Collection)) {\n        List temp = new ArrayList();\n        Iterator it = (Iterator) l;\n        while (it.hasNext()) {\n            temp.add(it.next());\n        }\n        l = temp;\n    }\n    if (r instanceof Iterator && !(r instanceof Collection)) {\n        List temp = new ArrayList();\n        Iterator it = (Iterator) r;\n        while (it.hasNext()) {\n            temp.add(it.next());\n        }\n        r = temp;\n    }\n\n    // In XPath, when one operand is a node-set (here represented as a Collection)\n    // and the other is a scalar, the equality test is true if any node in the set \n    // equals the scalar.\n    boolean lIsNodeSet = l instanceof Collection;\n    boolean rIsNodeSet = r instanceof Collection;\n    \n    if (lIsNodeSet && !rIsNodeSet) {\n        for (Object item : (Collection<?>) l) {\n            if (equal(item, r)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (!lIsNodeSet && rIsNodeSet) {\n        for (Object item : (Collection<?>) r) {\n            if (equal(l, item)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (lIsNodeSet && rIsNodeSet) {\n        // Two node-sets are equal if any pair of items are equal.\n        for (Object itemL : (Collection<?>) l) {\n            for (Object itemR : (Collection<?>) r) {\n                if (equal(itemL, itemR)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    // Otherwise delegate to the scalar equality.\n    return equal(l, r);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}