{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n        // Peel off any context\u2010wrapper\n        if (l instanceof EvalContext) {\n            // If it's a multi\u2010node context, get its node\u2010set\n            Iterator<?> it = ((EvalContext) l).getPointers();\n            l = it.hasNext() ? it : null;\n        }\n        if (r instanceof EvalContext) {\n            Iterator<?> it = ((EvalContext) r).getPointers();\n            r = it.hasNext() ? it : null;\n        }\n\n        // Convert collections to iterators\n        if (l instanceof Collection<?>) {\n            l = ((Collection<?>) l).iterator();\n        }\n        if (r instanceof Collection<?>) {\n            r = ((Collection<?>) r).iterator();\n        }\n\n        // XPath '=' semantics:\n        //   NodeSet = NodeSet: true if any pair of nodes has equal string\u2010values\n        //   NodeSet = scalar:  true if any node\u2019s string\u2010value equals the scalar\n        if (l instanceof Iterator<?> && !(r instanceof Iterator<?>)) {\n            return contains((Iterator<?>) l, r);\n        }\n        if (!(l instanceof Iterator<?>) && (r instanceof Iterator<?>)) {\n            return contains((Iterator<?>) r, l);\n        }\n        if (l instanceof Iterator<?> && r instanceof Iterator<?>) {\n            return findMatch((Iterator<?>) l, (Iterator<?>) r);\n        }\n\n        // both are atomic: do a normal equality\n        return equal(l, r);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}