{
    "generation": "    /**\n     * Compares two values\n     */\n    protected boolean equal(\n        EvalContext context,\n        Expression left,\n        Expression right) \n    {\n        Object l = left.compute(context);\n        Object r = right.compute(context);\n\n//        System.err.println(\"COMPARING: \" +\n//            (l == null ? \"null\" : l.getClass().getName()) + \" \" +\n//            (r == null ? \"null\" : r.getClass().getName()));\n\n        if (l instanceof InitialContext || l instanceof SelfContext) {\n            l = ((EvalContext) l).getSingleNodePointer();\n        }\n\n        if (r instanceof InitialContext || r instanceof SelfContext) {\n            r = ((EvalContext) r).getSingleNodePointer();\n        }\n\n        if (l instanceof Collection) {\n            l = ((Collection) l).iterator();\n        }\n\n        if (r instanceof Collection) {\n            r = ((Collection) r).iterator();\n        }\n\n        if ((l instanceof Iterator) && !(r instanceof Iterator)) {\n            return contains((Iterator) l, r);\n        }\n        if (!(l instanceof Iterator) && (r instanceof Iterator)) {\n            return contains((Iterator) r, l);\n        }\n        if (l instanceof Iterator && r instanceof Iterator) {\n            // The issue was here: we should check if both iterators contain the same elements\n            // in any order, not just if they match exactly.\n            return iteratorsEqual((Iterator) l, (Iterator) r);\n        }\n        return equal(l, r);\n    }\n\n    private boolean iteratorsEqual(Iterator iter1, Iterator iter2) {\n        List list1 = new ArrayList();\n        List list2 = new ArrayList();\n        while (iter1.hasNext()) {\n            list1.add(iter1.next());\n        }\n        while (iter2.hasNext()) {\n            list2.add(iter2.next());\n        }\n        return list1.containsAll(list2) && list2.containsAll(list1);\n    }\n\n    private boolean contains(Iterator iterator, Object value) {\n        while (iterator.hasNext()) {\n            if (equal(iterator.next(), value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private boolean equal(Object o1, Object o2) {\n        if (o1 == null && o2 == null) {\n            return true;\n        }\n        if (o1 == null || o2 == null) {\n            return false;\n        }\n        return o1.equals(o2);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}