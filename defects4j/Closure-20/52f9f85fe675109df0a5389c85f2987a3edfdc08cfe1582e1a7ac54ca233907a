{
    "generation": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n      Node firstArg = callTarget.getNext();\n      if (firstArg == null) {\n        return n;\n      }\n      // Check for multiple arguments\n      if (firstArg.getNext() != null) {\n        return n;\n      }\n      Node value = firstArg;\n      // Check if the argument is an immutable literal\n      if (!isImmutableLiteral(value)) {\n        return n;\n      }\n      Node addition = IR.add(\n          IR.string(\"\").srcref(callTarget),\n          value.detachFromParent());\n      n.getParent().replaceChild(n, addition);\n      reportCodeChange();\n      return addition;\n    }\n    return n;\n  }\n\n  private boolean isImmutableLiteral(Node node) {\n    switch (node.getToken()) {\n      case Token.NUMBER:\n      case Token.STRING:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.UNDEFINED:\n        return true;\n      default:\n        return false;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}