{
    "generation": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  // Only fold if it's String(single argument)\n  if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n    // Only fold if there is exactly one argument to String()\n    if (value != null && value.getNext() == null) {\n      // Only fold if argument is an immutable literal\n      if (NodeUtil.isImmutableValue(value)) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detachFromParent());\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n  }\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}