{
    "generation": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    // Fold String(a) to '' + (a) only if there is exactly one argument\n    // and it is an immutable literal (number, string, boolean, null, or undefined)\n    Node arg1 = callTarget.getNext();\n    if (arg1 != null && arg1.getNext() == null) {\n      if (NodeUtil.isImmutableValue(arg1)) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            arg1.detachFromParent());\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n  }\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}