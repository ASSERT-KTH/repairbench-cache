{
    "generation": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    // Fold String(a) to '' + (a) on simple immutable literals,\n    // which allows further optimizations\n    //\n    // We can't do this in the general case, because String(a) has\n    // slightly different semantics than '' + (a). See\n    // http://code.google.com/p/closure-compiler/issues/detail?id=759\n    Node arg = callTarget.getNext();\n    if (arg != null && arg.getNext() == null) { // only one argument\n      // only fold simple primitives (numbers and strings)\n      if (arg.isNumber() || arg.isString()) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            arg.detachFromParent());\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n  }\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}