{
    "generation": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n      // Fold String(a) to '' + (a) on immutable literals,\n      // which allows further optimizations\n      //\n      // We can't do this in the general case, because String(a) has\n      // slightly different semantics than '' + (a). See\n      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n      Node value = callTarget.getNext();\n      if (value != null && n.hasOneChild()) {  // Check that there's exactly one argument\n        // Verify that the argument is a simple value we can safely convert\n        if (isSimpleValue(value)) {\n          Node addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              value.detachFromParent());\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        }\n      }\n    }\n    return n;\n  }\n\n  private boolean isSimpleValue(Node value) {\n    // Check if the value is a simple literal or variable that can be safely converted\n    if (value.isString() || value.isNumber() || value.isTrue() || value.isFalse() ||\n        value.isNull() || value.isVoid() || value.isName()) {\n      return true;\n    }\n    // For other cases (like objects with valueOf) we shouldn't do the conversion\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}