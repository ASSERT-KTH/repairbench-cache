{
    "generation": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    // Fold String(a) to '' + (a) on immutable literals,\n    // which allows further optimizations\n    //\n    // We can't do this in the general case, because String(a) has\n    // slightly different semantics than '' + (a). See\n    // http://code.google.com/p/closure-compiler/issues/detail?id=759\n    Node firstArg = callTarget.getNext();\n    Node secondArg = (firstArg != null) ? firstArg.getNext() : null;\n    if (firstArg != null && secondArg == null &&\n        (firstArg.isStringLit() || firstArg.isNumber() || firstArg.isTrue() || firstArg.isFalse() || firstArg.isNull())) {\n      Node addition = IR.add(\n          IR.string(\"\").srcref(callTarget),\n          firstArg.detachFromParent());\n      n.getParent().replaceChild(n, addition);\n      reportCodeChange();\n      return addition;\n    }\n  }\n  return n;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}