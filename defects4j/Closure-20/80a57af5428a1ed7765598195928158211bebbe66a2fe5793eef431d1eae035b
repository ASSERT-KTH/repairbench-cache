{
    "generation": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n      // Fold String(a) to '' + (a) on immutable literals,\n      // which allows further optimizations\n      //\n      // We can't do this in the general case, because String(a) has\n      // slightly different semantics than '' + (a). See\n      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n      Node value = callTarget.getNext();\n\n      // We can only fold String(a) if:\n      // 1. There is exactly one argument 'a'.\n      //    String() returns \"\" (not \"undefined\"), so it's not String('') + undefined.\n      //    String(a, b) is not typically valid usage to fold to '' + a.\n      // 2. 'a' is an immutable value. Their semantics differ for mutable objects.\n      if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detachFromParent());\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition;\n      }\n    }\n    return n;\n  }",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}