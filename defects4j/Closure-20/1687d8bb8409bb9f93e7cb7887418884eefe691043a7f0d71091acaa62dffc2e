{
    "generation": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    // Check if the function is the global String constructor\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\") &&\n          !callTarget.isFromExterns()) { // Make sure it's not the extern definition\n\n      // Get the first argument\n      Node value = callTarget.getNext();\n\n      // Check that there is exactly one argument and it's an immutable primitive.\n      // String(a) has different semantics from '' + a for objects.\n      // See http://code.google.com/p/closure-compiler/issues/detail?id=759\n      if (value != null && value.getNext() == null && NodeUtil.isImmutableValue(value)) {\n        // Fold String(a) to '' + (a)\n        // Create an empty string node '' with source info from the \"String\" identifier\n        Node emptyString = IR.string(\"\").srcref(callTarget);\n        // Detach the argument 'a' from the original call\n        Node arg = value.detachFromParent();\n        // Create the addition node: '' + a\n        Node addition = IR.add(emptyString, arg);\n        // Copy the source info from the original call node 'n' to the new '+' node\n        addition.srcref(n);\n\n        // Replace the original call node 'n' with the new addition node\n        n.getParent().replaceChild(n, addition);\n        reportCodeChange();\n        return addition; // Return the new node\n      }\n    }\n    // No change was made, return the original node\n    return n;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}