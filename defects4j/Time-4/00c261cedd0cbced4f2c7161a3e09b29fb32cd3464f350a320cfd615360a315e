{
    "generation": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    // Get the field implementation from the chronology.\n    DateTimeField newField = fieldType.getField(iChronology);\n    \n    // First, check whether a field with the same underlying duration is already present.\n    // (Note: clockhourOfDay and hourOfDay have the same duration and range,\n    // so adding a clockhourOfDay to a partial that already has an hourOfDay is disallowed.)\n    for (int i = 0; i < iTypes.length; i++) {\n        DateTimeField existingField = iTypes[i].getField(iChronology);\n        if (existingField.equals(newField)) {\n            // The field already exists exactly, so simply update its value.\n            if (value == getValue(i)) {\n                return this;\n            }\n            int[] newValues = getValues();\n            newValues = existingField.set(this, i, newValues, value);\n            return new Partial(this, newValues);\n        }\n        if (existingField.getDurationField().equals(newField.getDurationField()) &&\n            existingField.getRangeDurationField().equals(newField.getRangeDurationField())) {\n            throw new IllegalArgumentException(\"Field \" + fieldType.getName() + \" is already supported\");\n        }\n    }\n    \n    // If the field is not already present and no conflict was found,\n    // then we need to add the new field.\n    // (The call to indexOf here is just a safety check; it should return -1.)\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        \n        // Find the correct insertion point to maintain the (largest-to-smallest) order.\n        int i = 0;\n        DurationField unitField = newField.getDurationField();\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeField loopField = iTypes[i].getField(iChronology);\n                DurationField loopUnitField = loopField.getDurationField();\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        // Compare range duration fields if the unit durations are equal.\n                        DurationField rangeField = newField.getRangeDurationField();\n                        DurationField loopRangeField = loopField.getRangeDurationField();\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n        \n        // Create the new Partial and validate it.\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n    \n    // If by some chance the field was found (should not happen due to the loop above),\n    // simply update it.\n    if (value == getValue(index)) {\n        return this;\n    }\n    int[] newValues = getValues();\n    newValues = getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}