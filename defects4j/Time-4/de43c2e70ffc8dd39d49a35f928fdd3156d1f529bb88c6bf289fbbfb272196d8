{
    "generation": "    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            // Check for potential overlaps before adding the field\n            // This logic mirrors the validation in the Partial constructor\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            if (!unitField.isSupported()) {\n                 throw new IllegalArgumentException(\"Field '\" + fieldType + \"' is not supported\");\n            }\n            DurationField rangeField = null;\n            if (fieldType.getRangeDurationType() != null) {\n                rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                // Range field is optional, but if present, must be supported\n                 if (!rangeField.isSupported()) {\n                      throw new IllegalArgumentException(\"Range duration field for '\" + fieldType + \"' is not supported\");\n                 }\n            }\n\n            for (DateTimeFieldType existingType : iTypes) {\n                DateTimeField existingField = existingType.getField(iChronology);\n                DurationField existingUnitField = existingField.getDurationField();\n                if (existingUnitField.isSupported()) {\n                    int compare = unitField.compareTo(existingUnitField);\n                    if (compare == 0) { // Same unit duration - potential overlap\n                         DurationField existingRangeField = null;\n                         if (existingType.getRangeDurationType() != null) {\n                             existingRangeField = existingType.getRangeDurationType().getField(iChronology);\n                         }\n        \n                         if (rangeField == null) {\n                             if (existingRangeField == null) {\n                                  // Both unit and range fields are null/same -> Overlap\n                                  throw new IllegalArgumentException(\"Field '\" + fieldType + \"' overlaps with '\" + existingType + \"'\");\n                             }\n                         } else {\n                             if (existingRangeField != null) {\n                                  int compareRange = rangeField.compareTo(existingRangeField);\n                                  if (compareRange == 0) {\n                                      // Same unit and range duration -> Definite overlap\n                                      throw new IllegalArgumentException(\"Field '\" + fieldType + \"' overlaps with '\" + existingType + \"'\");\n                                  }\n                             }\n                         }\n                    }\n                }\n            }\n\n            // If no overlap detected, proceed with adding the field...\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n            \n            // find correct insertion point to keep largest-smallest order\n            int i = 0;\n            // unitField and rangeField calculated above\n            // No need to check unitField.isSupported() again, done above\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DateTimeField loopField = loopType.getField(iChronology);\n                DurationField loopUnitField = loopField.getDurationField();\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break; // Found insertion point (new field's unit is smaller)\n                    } else if (compare == 0) { // Same unit duration, compare range duration for tie-breaking\n                        DurationField loopRangeField = null;\n                        if (loopType.getRangeDurationType() != null) {\n                             loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        }\n                        \n                        // Non-null range duration fields come before null ones.\n                        // If both non-null, compare them (larger comes first).\n                        if (rangeField != null) {\n                             if (loopRangeField == null || rangeField.compareTo(loopRangeField) > 0) {\n                                 break; // New field's range is non-null and loop's is null, or new field's range is larger\n                             }\n                        }\n                        // Otherwise (rangeField is null, or rangeField <= loopRangeField), continue searching.\n                        // Note: the overlap check above should prevent rangeField == loopRangeField here.\n                    }\n                    // if compare < 0, new field's unit is larger, continue searching\n                }\n            }\n            \n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n            \n            // use public constructor to ensure full validation including ordering and value ranges\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            // constructor calls chronology validate, no need to call again? Original code did call it.\n            // Let's keep it for safety, though it might be redundant.\n            iChronology.validate(newPartial, newValues); \n            return newPartial;\n        }\n        \n        // Field already exists\n        if (value == getValue(index)) {\n            return this; // No change\n        }\n        \n        // Get a mutable copy and update the value\n        int[] newValues = getValues(); // Creates a copy\n        newValues = getField(index).set(this, index, newValues, value); // Uses field logic to set value potentially cascading changes\n        \n        // Create new partial using the internal constructor which skips validation (already done by field.set)\n        return new Partial(this, newValues);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}