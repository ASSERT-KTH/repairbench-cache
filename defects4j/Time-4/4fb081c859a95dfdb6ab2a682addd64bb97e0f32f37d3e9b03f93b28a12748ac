{
    "generation": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n\n        // find correct insertion point to keep largest-smallest order\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        // Validate via chronology, may throw IllegalArgumentException\n        iChronology.validate(newPartial, newValues);\n        // additional validation: setting unsupported value for overlapping fields must fail early\n        // For example, setting clockhourOfDay when hourOfDay already exists should be illegal\n        for (int j = 0; j < iTypes.length; j++) {\n            if (iTypes[j].equals(fieldType)) {\n                // should never be true since indexOf == -1, but safety\n                throw new IllegalArgumentException(\"Field \" + fieldType + \" already exists\");\n            }\n            // Disallow conflicting overlapping fields (e.g., hourOfDay vs clockhourOfDay)\n            if (iTypes[j].equals(DateTimeFieldType.clockhourOfDay()) && fieldType.equals(DateTimeFieldType.hourOfDay())\n                || iTypes[j].equals(DateTimeFieldType.hourOfDay()) && fieldType.equals(DateTimeFieldType.clockhourOfDay())\n                || iTypes[j].equals(DateTimeFieldType.clockhourOfHalfday()) && fieldType.equals(DateTimeFieldType.hourOfHalfday())\n                || iTypes[j].equals(DateTimeFieldType.hourOfHalfday()) && fieldType.equals(DateTimeFieldType.clockhourOfHalfday())\n            ) {\n                throw new IllegalArgumentException(\"Conflicting field \" + fieldType + \" already supported\");\n            }\n        }\n        return newPartial;\n    }\n    if (value == getValue(index)) {\n        return this;\n    }\n    int[] newValues = getValues();\n    newValues = getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}