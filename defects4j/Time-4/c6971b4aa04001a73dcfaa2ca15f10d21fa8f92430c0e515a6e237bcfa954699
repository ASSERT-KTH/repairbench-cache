{
    "generation": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n\n        // find correct insertion point to keep largest-smallest order\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n        // use public constructor to ensure full validation\n        // this isn't overly efficient, but is safe\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        // Disable-- let constructor validate\n        // iChronology.validate(newPartial, newValues);\n\n        // Additional check: make sure new field is supported for partial, otherwise throw\n        // For example, ensure possible consistency\n        // To replicate behaviour of withField: if fieldType is not supported, throw\n        // But according to docs, with() should allow adding more fields, but if invalid, error\n\n        // Here is the actual fix; fail if fieldType clashes with existing fields (e.g., clockhourOfDay vs hourOfDay)\n        for (int j = 0; j < newTypes.length; j++) {\n            for (int k = j + 1; k < newTypes.length; k++) {\n                if (newTypes[j].equals(newTypes[k])) {\n                    throw new IllegalArgumentException(\n                        \"Duplicate field types are not allowed in Partial: \" + newTypes[j]);\n                }\n                // Additional check: incompatible fields (e.g., hourOfDay vs clockhourOfDay)\n                if (newTypes[j].getField(iChronology).equals(newTypes[k].getField(iChronology))) {\n                    throw new IllegalArgumentException(\n                        \"Incompatible duplicate fields in Partial: \" + newTypes[j] + \" and \" + newTypes[k]);\n                }\n            }\n        }\n        return newPartial;\n    }\n    if (value == getValue(index)) {\n        return this;\n    }\n    int[] newValues = getValues();\n    newValues = getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}