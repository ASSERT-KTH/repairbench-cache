{
    "generation": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        // Prevent adding a field that conflicts with an existing field\n        DurationFieldType unitType = fieldType.getDurationType();\n        DurationFieldType rangeType = fieldType.getRangeDurationType();\n        for (DateTimeFieldType existing : iTypes) {\n            if (existing.getDurationType() == unitType\n                && existing.getRangeDurationType() == rangeType) {\n                throw new IllegalArgumentException(\n                    \"Field '\" + fieldType + \"' is already supported\");\n            }\n        }\n        // Insert the new field in descending duration order\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = unitType.getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int cmp = unitField.compareTo(loopUnitField);\n                    if (cmp > 0) {\n                        break;\n                    } else if (cmp == 0) {\n                        DurationField rangeField = rangeType.getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType()\n                                                               .getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);\n        System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);\n        // Validate via public constructor\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n    if (value == getValue(index)) {\n        return this;\n    }\n    int[] newValues = getValues();\n    newValues = getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}