{
    "generation": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        // If the field isn\u2019t already present, check for an overlapping field.\n        // Two different field types that operate on the same unit and range (eg. hourOfDay and clockhourOfDay)\n        // must not coexist.\n        DurationField newUnit = fieldType.getDurationType().getField(iChronology);\n        DurationField newRange = fieldType.getRangeDurationType().getField(iChronology);\n        for (int j = 0; j < iTypes.length; j++) {\n            DurationField existingUnit = iTypes[j].getDurationType().getField(iChronology);\n            if (newUnit.compareTo(existingUnit) == 0) {\n                DurationField existingRange = iTypes[j].getRangeDurationType().getField(iChronology);\n                if (newRange.compareTo(existingRange) == 0) {\n                    throw new IllegalArgumentException(\"Field \" + fieldType.getName()\n                            + \" overlaps with existing field \" + iTypes[j].getName());\n                }\n            }\n        }\n\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n\n        // Find the correct insertion point, so that the fields remain in order from largest to smallest.\n        int i = 0;\n        if (newUnit.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DurationField loopUnit = iTypes[i].getDurationType().getField(iChronology);\n                if (loopUnit.isSupported()) {\n                    int compare = newUnit.compareTo(loopUnit);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRange = iTypes[i].getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRange) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n        // use public constructor to ensure full validation\u2014this isn\u2019t the most efficient,\n        // but it\u2019s safe.\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n    if (value == getValue(index)) {\n        return this;\n    }\n    int[] newValues = getValues();\n    newValues = getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}