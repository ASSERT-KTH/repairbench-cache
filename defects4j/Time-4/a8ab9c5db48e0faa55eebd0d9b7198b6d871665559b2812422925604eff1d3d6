{
    "generation": "    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     * <p>\n     * If the field type specified is already present, the value stored for that field is updated.\n     * If the field type specified is not present, the field type is added to the partial.\n     * When a field type is added, the new fields are checked against the existing fields.\n     * If the addition is valid, the fields are inserted in the correct position according\n     * to their duration. If the field is equivalent to one already stored (based on\n     * duration and range duration), an {@code IllegalArgumentException} is thrown.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid, or if the field type\n     *          is equivalent to one already stored.\n     */\n    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType); // Check for exact field type object\n\n        if (index == -1) { // Field type not found by object reference\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n\n            // Find correct insertion point and check for equivalent fields.\n            int i = 0;\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n\n            if (unitField.isSupported()) {\n                for (; i < iTypes.length; i++) {\n                    DateTimeFieldType loopType = iTypes[i];\n                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) { // Found insertion point: new field's unit is larger than loop field's unit\n                            break;\n                        } else if (compare == 0) { // Units are the same, compare range duration fields\n                            // Note: This comparison logic should match the one in the Partial constructor\n                            // for consistency in defining field equivalence/ordering.\n                            DurationField rangeField = fieldType.getRangeDurationType() == null ? null : fieldType.getRangeDurationType().getField(iChronology);\n                            DurationField loopRangeField = loopType.getRangeDurationType() == null ? null : loopType.getRangeDurationType().getField(iChronology);\n\n                            if (rangeField == null) {\n                                if (loopRangeField == null) {\n                                    // Both null range, same duration -> equivalent field exists\n                                    throw new IllegalArgumentException(\"Field '\" + fieldType.getName() + \"' is already supported\");\n                                } else {\n                                    // New field's range (null) comes after loop field's range (non-null). Continue search.\n                                }\n                            } else { // rangeField is not null\n                                if (loopRangeField == null) {\n                                    // New field's range (non-null) comes before loop field's range (null). Found insertion point.\n                                    break; \n                                } else { // Both range fields are not null\n                                    int rangeCompare = rangeField.compareTo(loopRangeField);\n                                    if (rangeCompare > 0) {\n                                        // New field's range > loop field's range. Found insertion point.\n                                        break;\n                                    } else if (rangeCompare == 0) {\n                                        // New field's range == loop field's range. Equivalent field found.\n                                        throw new IllegalArgumentException(\"Field '\" + fieldType.getName() + \"' is already supported\");\n                                    }\n                                    // else rangeCompare < 0. New field's range < loop field's range. Continue search.\n                                }\n                            }\n                        }\n                        // else compare < 0: new field's unit is smaller than loop field's unit. Continue search.\n                    }\n                }\n            }\n            // else: unitField is not supported. Let constructor validation handle it later.\n\n            // Insert the field at index i\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);\n            System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);\n\n            // Constructor validates types, order, unsupported fields, and individual values.\n            // It should also implicitly handle overlaps/equivalences due to its sorting/duplicate check,\n            // but the explicit check added above ensures the desired behavior for this method.\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            \n            // This final validation might handle more complex cross-field value interactions specific to the chronology.\n            // It might seem redundant, but it's safer to keep for complex chronologies.\n            iChronology.validate(newPartial, newValues); \n            return newPartial;\n\n        } else { // Field type already exists (found by object reference)\n            if (value == getValue(index)) {\n                return this; // No change needed\n            }\n            // Use the field's set method to update the value(s)\n            // This ensures chronology-specific logic and validation is applied.\n            int[] newValues = getValues();\n            newValues = getField(index).set(this, index, newValues, value);\n            // Create new partial using internal constructor (efficient)\n            return new Partial(this, newValues);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}