{
    "generation": "    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            // Add the field type.\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n\n            // find correct insertion point to keep largest-smallest order\n            int i = 0;\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            if (unitField.isSupported()) {\n                for (; i < iTypes.length; i++) {\n                    DateTimeFieldType loopType = iTypes[i];\n                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) {\n                            // fieldType is a larger unit duration than loopType, insert here\n                            break;\n                        } else if (compare == 0) {\n                            // fieldType has the same unit duration as loopType\n                            // check range duration fields for ordering and conflict\n                            DurationField rangeField = null;\n                            if (fieldType.getRangeDurationType() != null) {\n                                rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                            }\n                            DurationField loopRangeField = null;\n                            if (loopType.getRangeDurationType() != null) {\n                                loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                            }\n\n                            if (rangeField != null && loopRangeField != null) {\n                                int rangeCompare = rangeField.compareTo(loopRangeField);\n                                if (rangeCompare > 0) {\n                                    // fieldType has a larger range duration, insert here\n                                    break;\n                                } else if (rangeCompare == 0) {\n                                    // Same duration and same range duration - conflict\n                                    throw new IllegalArgumentException(\"Field '\" + fieldType + \"' conflicts with existing field '\" + loopType + \"'\");\n                                } else {\n                                    // fieldType has a smaller range duration, continue search\n                                }\n                            } else if (rangeField == null && loopRangeField == null) {\n                                // Same duration and both range durations are null - conflict\n                                 throw new IllegalArgumentException(\"Field '\" + fieldType + \"' conflicts with existing field '\" + loopType + \"'\");\n                            } else if (rangeField != null && loopRangeField == null) {\n                                // fieldType has a range duration, loopType doesn't. fieldType is considered \"larger\". Insert here.\n                                break;\n                            } else { // rangeField == null && loopRangeField != null\n                                // fieldType has no range duration, loopType does. fieldType is considered \"smaller\". Continue search.\n                            }\n                        } else { // compare < 0\n                            // fieldType is a smaller unit duration than loopType, continue search\n                        }\n                    }\n                }\n            }\n            // Insert the new field and value at the determined index i\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);\n            System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);\n\n            // use public constructor to ensure full validation\n            // this isn't overly efficient, but is safe\n            // The constructor performs necessary validation, including chronology validation.\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            // Ensure chronology validates the final partial state (might be redundant if constructor does it fully)\n            // iChronology.validate(newPartial, newPartial.getValues()); // Javadoc suggests constructor handles validation\n            return newPartial;\n\n        } else {\n            // Field already exists - update value.\n            if (value == getValue(index)) {\n                return this; // No change\n            }\n            int[] newValues = getValues(); // Get a copy\n            // Use the field's set method to update the values array, potentially adjusting other fields.\n            newValues = getField(index).set(this, index, newValues, value);\n            return new Partial(this, newValues); // Constructor validates the new values\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}