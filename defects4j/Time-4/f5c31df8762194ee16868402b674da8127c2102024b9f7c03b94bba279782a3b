{
    "generation": "    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            // Field type is not present, need to insert it.\n            // First, find the correct insertion point to maintain order and check for semantic duplicates.\n            \n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n            \n            int i = 0;\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            if (unitField.isSupported()) {\n                for (; i < iTypes.length; i++) {\n                    DateTimeFieldType loopType = iTypes[i];\n                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                    \n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) {\n                            // fieldType's unit duration is larger than loopType's, insert before loopType\n                            break;\n                        } else if (compare == 0) {\n                            // Same unit duration, now compare range duration\n                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                            \n                            if (rangeField.compareTo(loopRangeField) > 0) {\n                                // fieldType's range duration is larger, insert before loopType\n                                break;\n                            } else if (rangeField.compareTo(loopRangeField) == 0) {\n                                // Both unit and range duration fields are at the same level.\n                                // This implies that fieldType and loopType are semantically equivalent\n                                // (e.g., hourOfDay vs clockhourOfDay). A Partial must not contain\n                                // such conflicting fields.\n                                throw new IllegalArgumentException(\n                                    \"Fields '\" + fieldType.getName() + \"' and '\" + loopType.getName() + \n                                    \"' cannot be present in the same Partial\"\n                                );\n                            }\n                            // else (rangeField.compareTo(loopRangeField) < 0), fieldType's range is smaller, continue\n                        }\n                        // else (compare < 0), fieldType's unit is smaller, continue\n                    }\n                }\n            }\n            \n            // If we reach here, 'i' is the insertion point, and no semantic duplicate was found.\n            // Now, copy elements to the new arrays and insert the new field.\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n            \n            // Use public constructor to ensure full validation (order, uniqueness, values).\n            // This isn't overly efficient, but is safe.\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            // The Partial constructor already calls iChronology.validate(this, values),\n            // so the explicit call here is redundant but harmless.\n            // iChronology.validate(newPartial, newValues); \n            return newPartial;\n        }\n        \n        // Field type is already present, update its value.\n        if (value == getValue(index)) {\n            return this;\n        }\n        int[] newValues = getValues(); // getValues() returns a copy of iValues\n        newValues = getField(index).set(this, index, newValues, value);\n        return new Partial(this, newValues);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}