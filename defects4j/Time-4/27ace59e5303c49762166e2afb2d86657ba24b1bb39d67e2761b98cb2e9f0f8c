{
    "generation": "    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            // Field type is not present, need to insert it\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n            \n            // find correct insertion point to keep largest-smallest order\n            int i = 0;\n            // Get the DurationField for the new fieldType\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            \n            // Check if the unit field is supported. If not, it means this field cannot be supported alone\n            // in this chronology, but it might be supported in combination. The primary concern here\n            // is the ordering and validation of field combinations.\n            \n            // The sorting logic ensures fields are ordered by their unit duration, then range duration.\n            // This is primarily for consistency and lookup efficiency.\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                \n                int compare = unitField.compareTo(loopUnitField);\n                if (compare > 0) { // New field's unit duration is larger than current loop field's unit\n                    break;\n                } else if (compare == 0) { // Same unit duration\n                    DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                    if (rangeField.compareTo(loopRangeField) > 0) { // New field's range duration is larger\n                        break;\n                    }\n                }\n            }\n            \n            // Copy existing types and values to the new arrays, inserting the new field at position 'i'\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n\n            // The test case `testWith3` fails because adding `clockhourOfDay` to a Partial\n            // that already contains `hourOfDay` should throw an IllegalArgumentException.\n            // This usually happens during the validation of field types within the Partial\n            // constructor, specifically by `DateTimeFieldType.checkFields(types)`.\n            // If the constructor's validation is insufficient or bypassed, we explicitly\n            // call `DateTimeFieldType.checkFields` here to ensure all field types\n            // in the new combination are compatible.\n            DateTimeFieldType.checkFields(newTypes);\n            \n            // use public constructor to ensure full validation\n            // this isn't overly efficient, but is safe\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            \n            // This call to iChronology.validate often validates the values within the newPartial\n            // against the chronology's supported ranges, not the compatibility of field types themselves.\n            // The primary type combination validation is handled by DateTimeFieldType.checkFields.\n            iChronology.validate(newPartial, newValues); \n            return newPartial;\n        }\n        // Field type is already present, update its value if different\n        if (value == getValue(index)) {\n            return this; // No change needed\n        }\n        int[] newValues = getValues(); // Get a copy of current values\n        // Update the value using the field's set method, which handles range checks etc.\n        newValues = getField(index).set(this, index, newValues, value);\n        // Create a new Partial instance with the updated values\n        return new Partial(this, newValues);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}