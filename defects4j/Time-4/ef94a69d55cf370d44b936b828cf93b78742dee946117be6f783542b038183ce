{
    "generation": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeField field = fieldType.getField(iChronology);\n        try {\n            // Try setting value to check if it is valid with current field values\n            int[] newValues = field.set(this, getValues(), value);\n            // If succeeded, insert the field as normal\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] finalValues = new int[newTypes.length];\n\n            // find correct insertion point to keep largest-smallest order\n            int i = 0;\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            if (unitField.isSupported()) {\n                for (; i < iTypes.length; i++) {\n                    DateTimeFieldType loopType = iTypes[i];\n                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) {\n                            break;\n                        } else if (compare == 0) {\n                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                            if (rangeField.compareTo(loopRangeField) > 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(getValues(), 0, finalValues, 0, i);\n            newTypes[i] = fieldType;\n            finalValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n            System.arraycopy(getValues(), i, finalValues, i + 1, newTypes.length - i - 1);\n\n            // use public constructor to ensure full validation\n            Partial newPartial = new Partial(iChronology, newTypes, finalValues);\n            iChronology.validate(newPartial, finalValues);\n            return newPartial;\n        } catch (IllegalArgumentException ex) {\n            // Invalid value for this field on this Partial, throw immediately\n            throw ex;\n        }\n    }\n    if (value == getValue(index)) {\n        return this;\n    }\n    int[] newValues = getValues();\n    newValues = getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}