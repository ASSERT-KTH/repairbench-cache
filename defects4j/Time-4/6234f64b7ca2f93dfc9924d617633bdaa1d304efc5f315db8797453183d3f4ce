{
    "generation": "    /**\n     * Gets a copy of this date with the specified field set to a new value.\n     * <p>\n     * If this partial did not previously support the field, the new one will.\n     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n     * <p>\n     * For example, if the field type is <code>dayOfMonth</code> then the day\n     * would be changed/added in the returned instance.\n     *\n     * @param fieldType  the field type to set, not null\n     * @param value  the value to set\n     * @return a copy of this instance with the field set\n     * @throws IllegalArgumentException if the value is null or invalid\n     */\n    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            // New field type being added.\n            // First, check for conflicts with existing fields.\n            // A conflict exists if the new field has the same duration type as an existing field.\n            DurationFieldType newDurationType = fieldType.getDurationType();\n            if (newDurationType != null) { // Only check if the new field type has a duration type\n                for (int i = 0; i < iTypes.length; i++) {\n                    // Check if an existing field type has the same duration type as the new one.\n                    // For example, if 'hourOfDay' (unit: hours) exists, 'clockhourOfDay' (unit: hours) cannot be added.\n                    if (iTypes[i].getDurationType() == newDurationType) {\n                        throw new IllegalArgumentException(\n                            \"Cannot have two fields that affect the same duration type: \" +\n                            fieldType + \" and \" + iTypes[i]);\n                    }\n                }\n            }\n\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n            \n            // find correct insertion point to keep largest-smallest order\n            int i = 0;\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            if (unitField.isSupported()) {\n                for (; i < iTypes.length; i++) {\n                    DateTimeFieldType loopType = iTypes[i];\n                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) {\n                            break;\n                        } else if (compare == 0) {\n                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                            if (rangeField.compareTo(loopRangeField) > 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n            // use public constructor to ensure full validation\n            // this isn't overly efficient, but is safe\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            // The iChronology.validate call here (present in the original code) is a redundant check\n            // if the Partial constructor already performs the validation (which it typically does).\n            // However, removing it might change behavior in subtle ways for other cases not covered\n            // by this specific bug fix. Keeping it as it was in the original code, though the\n            // new check above will prevent this line from being reached for the testWith3 scenario.\n            iChronology.validate(newPartial, newValues);\n            return newPartial;\n        }\n        if (value == getValue(index)) {\n            return this;\n        }\n        int[] newValues = getValues();\n        newValues = getField(index).set(this, index, newValues, value);\n        return new Partial(this, newValues);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}