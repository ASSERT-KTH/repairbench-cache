{
    "generation": "    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        // handle NaN\n        if (isNaN()) {\n            return newInstance(this).nan();\n        }\n        // handle zero multiplicand\n        if (x == 0) {\n            if (isZero()) {\n                final Dfp result = newInstance(this);\n                result.sign = (byte) (sign * ((x < 0) ? -1 : 1));\n                result.nan = true; // 0 * 0 or 0 * 0 = 0, but infinities multiply to NaN handled elsewhere\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                return result;\n            } else if (isInfinite()) {\n                // inf * 0 = NaN\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                return newInstance(this).nan();\n            } else {\n                final Dfp result = newInstance(this);\n                result.sign = (byte) ((sign * ((x < 0) ? -1 : 1)) >= 0 ? 1 : -1);\n                result.zero();\n                return result;\n            }\n        }\n        // handle infinity times non-zero\n        if (isInfinite()) {\n            final Dfp result = newInstance(this);\n            result.sign = (byte) ((sign * Integer.signum(x)) >= 0 ? 1 : -1);\n            return result;\n        }\n\n        final Dfp result = multiplyFast(Math.abs(x));\n\n        // handle overflow (result becomes infinite)\n        if (result.nans == FINITE && (result.exp > getField().getMaxExponent())) {\n            final Dfp inf = newInstance(this);\n            inf.sign = (byte) ((sign * Integer.signum(x)) >= 0 ? 1 : -1);\n            inf.infinite();\n            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n            return inf;\n        }\n\n        result.sign = (byte) ((sign * Integer.signum(x)) >= 0 ? 1 : -1);\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}