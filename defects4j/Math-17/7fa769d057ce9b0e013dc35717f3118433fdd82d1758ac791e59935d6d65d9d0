{
    "generation": "    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        // Handle NaN\n        if (isNaN()) {\n            return newInstance(this).dotrap(DfpField.FLAG_INVALID, \"multiply\", this, getZero());\n        }\n\n        // Handle zero * infinity\n        if (this.isInfinite() && x == 0) {\n            return newInstance(getField().getZero()).dotrap(DfpField.FLAG_INVALID, \"multiply\", this, getZero());\n        }\n        if (this.isZero() && (x == Integer.MAX_VALUE || x == Integer.MIN_VALUE)) { // just in case\n            return newInstance(getField().getZero()).dotrap(DfpField.FLAG_INVALID, \"multiply\", this, getZero());\n        }\n        if (this.isZero() && x == 0) {\n            // preserve sign of zero\n            return this.copySign(this);\n        }\n        if (this.isZero()) {\n            // multiply zero by integer\n            if ((this.sign == -1 && x >= 0) || (this.sign == 1 && x < 0)) {\n                Dfp r = newInstance(getZero());\n                r.sign = -1;\n                return r;\n            } else {\n                return getZero();\n            }\n        }\n        if (this.isInfinite()) {\n            // Multiply infinite by integer\n            if (x == 1) {\n                return this;\n            } else if (x == -1) {\n                Dfp res = newInstance(this);\n                res.sign = -this.sign;\n                return res;\n            } else if (x == 0) {\n                return newInstance(getField().getZero()).dotrap(DfpField.FLAG_INVALID, \"multiply\", this, getZero());\n            } else {\n                Dfp res = newInstance(this);\n                if (x < 0) {\n                    res.sign = -this.sign;\n                }\n                return res;\n            }\n        }\n        if (x == 0) {\n            Dfp r = newInstance(getZero());\n            r.sign = this.sign == -1 ? -1 : 1;\n            return r;\n        }\n        if (x == 1) {\n            return this;\n        }\n        if (x == -1) {\n            Dfp res = newInstance(this);\n            res.sign = -this.sign;\n            return res;\n        }\n\n        boolean negative = x < 0;\n        int absx = Math.abs(x);\n\n        Dfp result = multiplyFast(absx);\n        if (negative) {\n            result.sign = -result.sign;\n        }\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}