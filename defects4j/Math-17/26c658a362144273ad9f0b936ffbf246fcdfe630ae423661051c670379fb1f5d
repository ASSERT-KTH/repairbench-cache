{
    "generation": "    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        // Handle special cases for x == 0, x == 1, x == -1\n        if (x == 0) {\n            Dfp result = newInstance(this);\n            result.sign = (this.sign == -1) ? -1 : 1;\n            result.nans = FINITE;\n            result.mantissa = new int[mantissa.length];\n            result.exp = 0; // convention\n            result.field = this.field;\n            result.iszero = true;\n            if (this.sign == -1 && this.nans == FINITE) {\n                // -0\n                result.sign = -1;\n            }\n            return result;\n        } else if (x == 1) {\n            return this.copy();\n        } else if (x == -1) {\n            Dfp result = this.copy();\n            result.sign = -result.sign;\n            return result;\n        }\n        // handle other cases including infinities and NaN (if this Dfp is special)\n        if (this.isNaN()) {\n            return this;\n        }\n        if (this.isInfinite()) {\n            if (x == 0) {\n                // Infinity * 0 = NaN\n                Dfp result = this.newInstance(this);\n                result.nans = QNAN;\n                this.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                return result;\n            }\n            Dfp result = this.copy();\n            result.sign = this.sign * (x < 0 ? -1 : 1);\n            return result;\n        }\n        // General case: normal multiplyFast\n        return multiplyFast(x);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}