{
    "generation": "/** Multiply this by a single digit x.\n * @param x multiplicand\n * @return product of this and x\n */\npublic Dfp multiply(final int x) {\n    Dfp result;\n\n    if (x == 0) {\n        // result is zero (keep sign according to IEEE rules)\n        result = newInstance(this);\n        result.sign = (byte) ((this.sign == 0) ? 0 : this.sign);\n        result.exp = 0;\n        for (int i = 0; i < result.mant.length; i++) {\n            result.mant[i] = 0;\n        }\n        // propagate NaN / zeros with correct sign\n        if (this.isNaN()) {\n            result = this.newInstance(this);\n        }\n        if (this.isInfinite()) {\n            // Inf * 0 => NaN\n            result = this.newInstance(Dfp.QNaN);\n            this.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n        }\n        return result;\n    }\n\n    if (this.isNaN()) {\n        return this.newInstance(this);\n    }\n\n    if (this.isInfinite()) {\n        result = newInstance(this);\n        result.sign = (byte) ((x < 0) ? (result.sign == 0 ? 1 : 0) : result.sign);\n        if (x < 0) {\n            result.sign = (byte) (1 - result.sign);\n        }\n        return result;\n    }\n\n    result = multiplyFast(Math.abs(x));\n    if (x < 0) {\n        result.sign = (byte) (1 - result.sign);\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}