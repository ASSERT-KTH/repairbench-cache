{
    "generation": "    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        // Handle special cases as in multiply(Dfp)\n        if (this.isNaN()) {\n            return this.newInstance(Dfp.QNAN);\n        }\n        if (this.isInfinite()) {\n            if (x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                return this.newInstance(Dfp.QNAN);\n            }\n            return (x > 0) ? this : this.negate();\n        }\n        if (this.isZero()) {\n            if (x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                return this.newInstance(Dfp.QNAN);\n            }\n            if (Dfp.copysign(1, x) < 0) {\n                return this.negate();\n            }\n            return this.newInstance(this);\n        }\n        if (x == 0) {\n            Dfp result = newInstance(this);\n            result.sign = (this.sign == -1) ? -1 : 1;\n            result.exp = 0;\n            result.nWords = this.nWords;\n            for (int i = 0; i < result.nWords; i++) {\n                result.mant[i] = 0;\n            }\n            return result;\n        }\n\n        // Otherwise do the efficient multiplication\n        return multiplyFast(x);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}