{
    "generation": "    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        // we must check for special cases (NaN, Infinity, Zero) and sign handling just like the two-Dfp multiply method\n        if (isNaN()) {\n            return newInstance(DfpField.FLAG_NAN);\n        }\n\n        if (x == 0) {\n            // Multiply by zero: result is zero, sign is XOR\n            Dfp result = newInstance();\n            result.sign = (byte) ((sign == 0) ? 0 : (sign == 1 ? 1 : 0)); // Should preserve -0\n            if (sign == 1) {\n                result.sign = 1;\n            }\n            result.nans = nans;\n            if (isInfinite()) {\n                // INF * 0 = NaN, and signal invalid\n                result = newInstance(DfpField.FLAG_NAN);\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            }\n            return result;\n        }\n\n        if (isInfinite()) {\n            // Multiply inf by nonzero integer\n            Dfp result = newInstance();\n            result.nans = nans;\n            result.sign = (byte) ((x < 0) ? (sign == 0 ? 1 : 0) : sign); // flip sign if x<0\n            return result;\n        }\n\n        // If x==1 or x==-1, shortcut\n        if (x == 1) {\n            return this.copy();\n        } else if (x == -1) {\n            Dfp result = this.copy();\n            result.sign = (byte) (1 - sign);\n            return result;\n        }\n\n        // shortcut for x == Integer.MIN_VALUE, since Math.abs(Integer.MIN_VALUE) < 0\n        if (x == Integer.MIN_VALUE) {\n            return this.multiply(-1).multiply(-(x + 1)).add(this); // x = -2^31, so -(x + 1) = 2^31 - 1, multiply by -1, add one more instance\n        }\n\n        int absx = Math.abs(x);\n        Dfp result = multiplyFast(absx);  // underlying (fast) integer multiply\n\n        // fix the sign\n        if ((x < 0 && sign == 0) || (x > 0 && sign == 1)) {\n            result.sign = 1;\n        } else {\n            result.sign = 0;\n        }\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}