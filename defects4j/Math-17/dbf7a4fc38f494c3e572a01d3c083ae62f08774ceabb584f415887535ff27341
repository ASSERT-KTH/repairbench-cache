{
    "generation": "    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        // special cases handling\n        if (isNaN()) {\n            return field.newNaN(this, this, x);\n        }\n        if (x == 0) {\n            if (sign == -1) {\n                Dfp result = field.newInstance(this);\n                result.sign = (byte) ((x == 0 && sign == -1) ? -1 : 1);\n                result.exp = 0;\n                Arrays.fill(result.mant, 0);\n                result.nans = FINITE;\n                field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n                return result;\n            } else {\n                return field.getZero();\n            }\n        }\n        if (isInfinite()) {\n            if (x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                return field.newNaN(this, this, x);\n            }\n            Dfp result = field.newInstance(this);\n            result.sign = (byte)((x < 0) ? -result.sign : result.sign);\n            return result;\n        }\n\n        // Normal case: use multiplyFast for speed and to preserve sign of zero\n        Dfp result = multiplyFast(Math.abs(x));\n        result.sign = (byte)((x < 0) ? -result.sign : result.sign);\n\n        // If multiplying by -0, preserve sign\n        if (x == 0 && sign == -1) {\n            result.sign = -1;\n        }\n\n        return result;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}