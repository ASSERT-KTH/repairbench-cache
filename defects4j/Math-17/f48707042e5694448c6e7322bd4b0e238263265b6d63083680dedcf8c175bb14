{
    "generation": "/** Multiply this by a single digit x.\n * @param x multiplicand\n * @return product of this and x\n */\npublic Dfp multiply(final int x) {\n    // Handle special values: NaN, Infinity, Zero.\n    if (isNaN() || (x == 0 && isInfinite()) || (isZero() && !isNaN() && x == 0)) {\n        Dfp result = newInstance(this); // base return\n        if (isNaN() || (x == 0 && isInfinite()) || (isZero() && x == 0)) {\n            result = this.field.getZero();\n            result.nan = true;\n            this.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n        }\n        return result;\n    }\n    if (isInfinite()) {\n        if (x == 0) {\n            Dfp result = this.field.getZero();\n            result.nan = true;\n            this.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            return result;\n        }\n        // result is (infinity times nonzero int)\n        return (x > 0) ? copySign(this.field.getInfinity(), this) \n                       : copySign(this.field.getInfinity(), this).negate();\n    }\n    if (isZero()) {\n        if (x == 0) {\n            Dfp result = this.field.getZero();\n            result.nan = true;\n            this.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            return result;\n        }\n        // return signed zero\n        return (x >= 0) ? this.field.getZero(getSign()) \n                        : this.field.getZero(-getSign());\n    }\n    if (x == 0) {\n        // x is zero, return signed zero\n        return (getSign() >= 0) ? this.field.getZero((x < 0) ? -1 : 1) \n                               : this.field.getZero((x < 0) ? 1 : -1);\n    }\n    // Regular case\n    // Use multiplyFast for performance if x has at most 4 digits (as in multiplyFast's contract)\n    // Else, perform via multiply(Dfp) with a constructed Dfp\n    if (Math.abs(x) < 10000) {\n        return multiplyFast(x);\n    } else {\n        return multiply(field.newDfp(x));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}