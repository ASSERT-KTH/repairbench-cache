{
    "generation": "    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     *\n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     *\n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    @Override\n    public int read(byte b[], int offset, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException(\"destination byte array is null\");\n        } else if (offset < 0) {\n            throw new IndexOutOfBoundsException(\"offset cannot be negative: \" + offset);\n        } else if (len < 0) {\n             throw new IndexOutOfBoundsException(\"len cannot be negative: \" + len);\n        } else if (offset > b.length || offset + len > b.length) {\n            // Consistent with InputStream spec, checks offset and len against b.length\n            throw new IndexOutOfBoundsException(\"offset(\" + offset + \") + len(\" + len + \") > b.length(\" + b.length + \")\");\n        } else if (len == 0) {\n            return 0;\n        } else {\n            int readLen = 0;\n            /*\n             Rationale for while-loop on (readLen == 0):\n             -----\n             Base64.readResults() usually returns > 0 or EOF (-1). In the\n             rare case where it returns 0, we just keep trying.\n\n             This is essentially an undocumented contract for InputStream\n             implementors that want their code to work properly with\n             java.io.InputStreamReader, since the latter hates it when\n             InputStream.read(byte[]) returns a zero. Unfortunately our\n             readResults() call must return 0 if a large amount of the data\n             being decoded was non-base64, so this while-loop enables proper\n             interop with InputStreamReader for that scenario.\n             -----\n             This is a fix for CODEC-101\n            */\n            while (readLen == 0) {\n                // Check if the Base64 object has buffered data ready.\n                if (!base64.hasData()) {\n                    // If not, read data from the underlying InputStream.\n                    byte[] buf = new byte[doEncode ? 4096 : 8192];\n                    int c = in.read(buf);\n\n                    // Process the data read (or EOF signal).\n                    // The Base64#encode/decode methods should handle c = -1 to signify EOF\n                    // and potentially finalize the encoding/decoding process.\n                    if (doEncode) {\n                        base64.encode(buf, 0, c);\n                    } else {\n                        base64.decode(buf, 0, c);\n                    }\n                }\n\n                // Now, try to read results from the Base64 object into the provided buffer b.\n                readLen = base64.readResults(b, offset, len);\n\n                // If readResults returns 0, it might mean more data is needed or\n                // non-base64 data was skipped.\n                // If the underlying stream has reached EOF (indicated by base64.isEof())\n                // AND there's no more data buffered in the Base64 object (!base64.hasData()),\n                // AND readResults still returned 0, then we are truly at the end of the stream.\n                // In this case, we must return -1.\n                // This check prevents an infinite loop if readResults returns 0 after EOF.\n                if (readLen == 0 && base64.isEof() && !base64.hasData()) {\n                    return -1;\n                }\n                // Otherwise, if readLen is 0, the loop continues to either fetch more data\n                // from the underlying stream or try readResults again if hasData became true.\n                // If readLen is > 0 or -1, the loop terminates.\n            }\n            return readLen; // Return the number of bytes read (> 0) or -1 for EOF.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}