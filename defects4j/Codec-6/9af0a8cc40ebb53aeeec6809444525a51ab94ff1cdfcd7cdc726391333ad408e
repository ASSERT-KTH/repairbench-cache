{
    "generation": "public int read(byte b[], int offset, int len) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    } else if (offset < 0 || len < 0) {\n        throw new IndexOutOfBoundsException();\n    } else if (offset > b.length || offset + len > b.length) {\n        throw new IndexOutOfBoundsException();\n    } else if (len == 0) {\n        return 0;\n    } else {\n        int readLen = 0;\n        while (readLen == 0) {\n            if (!base64.hasData()) {\n                byte[] buf = new byte[doEncode ? 4096 : 8192];\n                int c = in.read(buf);\n                if (c == -1) {\n                    base64.setEOF();\n                    // If nothing left in context, break out of loop\n                    if (!base64.hasData()) {\n                        return -1;\n                    }\n                } else {\n                    // A little optimization to avoid System.arraycopy()\n                    if (c > 0 && b.length == len) {\n                        base64.setInitialBuffer(b, offset, len);\n                    }\n                    if (doEncode) {\n                        base64.encode(buf, 0, c);\n                    } else {\n                        base64.decode(buf, 0, c);\n                    }\n                }\n            }\n            readLen = base64.readResults(b, offset, len);\n            // After EOF and no data left, break loop and return -1\n            if (readLen == 0 && base64.isEOF()) {\n                return -1;\n            }\n            // else, if readLen >0, loop exits and return it;\n            // else, if readLen==0 && !isEOF, loop continues (rare undecoded garbage case)\n        }\n        return readLen;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}