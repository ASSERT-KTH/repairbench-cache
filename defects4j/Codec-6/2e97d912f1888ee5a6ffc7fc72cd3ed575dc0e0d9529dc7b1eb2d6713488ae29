{
    "generation": "public int read(byte b[], int offset, int len) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    } else if (offset < 0 || len < 0) {\n        throw new IndexOutOfBoundsException();\n    } else if (offset > b.length || offset + len > b.length) {\n        throw new IndexOutOfBoundsException();\n    } else if (len == 0) {\n        return 0;\n    }\n\n    int readLen;\n    boolean eof = false;\n    // Loop until we get a non-zero result (which can be positive bytes read or -1 for EOF)\n    while ((readLen = base64.readResults(b, offset, len)) == 0) {\n        if (!base64.hasData()) {\n            byte[] buf = new byte[doEncode ? 4096 : 8192];\n            int c = in.read(buf);\n            if (c == -1) {\n                eof = true;\n            } else if (c > 0) {\n                // When b is used as the initial target buffer, do the optimization.\n                if (b.length == len) {\n                    base64.setInitialBuffer(b, offset, len);\n                }\n                if (doEncode) {\n                    base64.encode(buf, 0, c);\n                } else {\n                    base64.decode(buf, 0, c);\n                }\n            }\n        }\n        // If we reached EOF and there is no more buffered data, then return EOF.\n        if (eof && !base64.hasData()) {\n            return -1;\n        }\n    }\n    return readLen;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}