{
    "generation": "    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     * \n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     * \n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    public int read(byte b[], int offset, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if (offset < 0 || len < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (offset > b.length || offset + len > b.length) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        } else {\n            /*\n             Rationale for while-loop on (readLen == 0):\n             -----\n             Base64.readResults() usually returns > 0 or EOF (-1).  In the\n             rare case where it returns 0, we just keep trying.\n\n             This is essentially an undocumented contract for InputStream\n             implementors that want their code to work properly with\n             java.io.InputStreamReader, since the latter hates it when\n             InputStream.read(byte[]) returns a zero.  Unfortunately our\n             readResults() call must return 0 if a large amount of the data\n             being decoded was non-base64, so this while-loop enables proper\n             interop with InputStreamReader for that scenario.\n             -----\n             This is a fix for CODEC-101\n            */\n            int readLen = 0;\n\n            // Loop indefinitely until data is read (readLen > 0) or EOF is reached (readLen == -1).\n            // This loop addresses CODEC-101 by ensuring read() does not return 0 unless len is 0 or it's a genuine EOF.\n            while (true) {\n                // First, try to read data from the Base64 codec's internal buffer.\n                readLen = base64.readResults(b, offset, len);\n\n                if (readLen > 0) {\n                    return readLen; // Successfully read some data, return it.\n                }\n                if (readLen == -1) {\n                    return -1; // End of stream (Base64 has no more processed data and has flushed).\n                }\n\n                // If readLen is 0, it means base64.readResults() returned 0.\n                // This implies no data is currently available in Base64's internal buffer,\n                // but it's not necessarily EOF. We need to read more from the underlying stream\n                // to feed the Base64 codec.\n\n                byte[] buf = new byte[doEncode ? 4096 : 8192];\n                int c = in.read(buf); // Read from the underlying stream\n\n                if (c == -1) { // End of underlying stream\n                    // Signal EOF to Base64 codec to flush any remaining buffered data\n                    if (doEncode) {\n                        base64.encode(buf, 0, c); // Call with -1 to signal EOF and flush\n                    } else {\n                        base64.decode(buf, 0, c); // Call with -1 to signal EOF and flush\n                    }\n                    // After signaling EOF, try to read results one last time.\n                    // This is crucial for handling cases where partial blocks or padding\n                    // might yield final bytes at EOF.\n                    readLen = base64.readResults(b, offset, len);\n                    if (readLen > 0) {\n                        return readLen;\n                    } else {\n                        // If it's still 0 or already -1, we are truly at EOF for this stream.\n                        return -1;\n                    }\n                }\n\n                // If c > 0, we successfully read some data from the underlying stream.\n                // Apply the optimization from the original code if applicable:\n                // If the destination buffer 'b' is exactly the size of the requested 'len',\n                // allow Base64 to write its output directly into 'b' for efficiency.\n                if (b.length == len) {\n                    base64.setInitialBuffer(b, offset, len);\n                }\n\n                // Feed the newly read data to the Base64 codec for processing.\n                if (doEncode) {\n                    base64.encode(buf, 0, c);\n                } else {\n                    base64.decode(buf, 0, c);\n                }\n                // The loop will then continue, trying base64.readResults again\n                // with the newly processed data.\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}