{
    "generation": "    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     * \n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     * \n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    public int read(byte b[], int offset, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if (offset < 0 || len < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (offset > b.length || offset + len > b.length) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        } else {\n            /*\n             Rationale for while-loop on (readLen == 0):\n             -----\n             Base64.readResults() usually returns > 0 or EOF (-1).  In the\n             rare case where it returns 0, we just keep trying.\n\n             This is essentially an undocumented contract for InputStream\n             implementors that want their code to work properly with\n             java.io.InputStreamReader, since the latter hates it when\n             InputStream.read(byte[]) returns a zero.  Unfortunately our\n             readResults() call must return 0 if a large amount of the data\n             being decoded was non-base64, so this while-loop enables proper\n             interop with InputStreamReader for that scenario.\n             -----\n             This is a fix for CODEC-101\n            */\n            \n            // The original code was missing the while loop as described in the comments.\n            // This loop ensures that we keep trying to read until we get bytes (>0) or hit EOF (-1).\n            int readLen = 0;\n            while (readLen == 0) {\n                if (!base64.hasData()) {\n                    byte[] buf = new byte[doEncode ? 4096 : 8192];\n                    int c = in.read(buf);\n                    \n                    if (c == -1) { // End of stream from the underlying source\n                        // If the underlying stream is at EOF, and our base64 buffer also has no data,\n                        // then we are truly at EOF.\n                        if (!base64.hasData()) { \n                            return -1; // End of stream\n                        }\n                        // If c == -1 but base64.hasData() is true, it means there are still\n                        // decoded/encoded bytes to be read from the internal buffer.\n                        // We will proceed to base64.readResults() to get them.\n                    } else if (c > 0) { // Data read from underlying stream\n                        // A little optimization to avoid System.arraycopy()\n                        // when possible.\n                        // This optimization attempts to use the user's buffer 'b' as the\n                        // initial internal buffer for the base64 codec if conditions allow.\n                        // The 'c > 0' check is redundant in the `else if (c > 0)` block.\n                        if (b.length == len) {\n                            base64.setInitialBuffer(b, offset, len);\n                        }\n                        if (doEncode) {\n                            base64.encode(buf, 0, c);\n                        } else {\n                            base64.decode(buf, 0, c);\n                        }\n                    }\n                    // If c == 0 (which is generally discouraged for InputStream.read(byte[])\n                    // for non-zero length), the loop would continue.\n                    // The primary purpose of this while loop is to handle base64.readResults() returning 0.\n                }\n                \n                // Attempt to read decoded/encoded data from the base64 codec's internal buffer.\n                readLen = base64.readResults(b, offset, len);\n                \n                // If readLen is -1, it means EOF from the base64 codec, so we should return -1.\n                if (readLen == -1) {\n                    return -1;\n                }\n            }\n            return readLen; // At this point, readLen must be > 0.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}