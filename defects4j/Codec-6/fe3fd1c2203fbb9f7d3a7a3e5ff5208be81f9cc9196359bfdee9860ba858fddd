{
    "generation": "    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     * \n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     * \n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    public int read(byte b[], int offset, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\n        } else if (offset < 0 || len < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (offset > b.length || offset + len > b.length) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        } else {\n            /*\n             Rationale for while-loop on (readLen == 0):\n             -----\n             Base64.readResults() usually returns > 0 or EOF (-1).  In the\n             rare case where it returns 0, we just keep trying.\n\n             This is essentially an undocumented contract for InputStream\n             implementors that want their code to work properly with\n             java.io.InputStreamReader, since the latter hates it when\n             InputStream.read(byte[]) returns a zero.  Unfortunately our\n             readResults() call must return 0 if a large amount of the data\n             being decoded was non-base64, so this while-loop enables proper\n             interop with InputStreamReader for that scenario.\n             -----\n             This is a fix for CODEC-101\n            */\n            int readLen = 0;\n            while (readLen == 0) { // Keep trying as long as 0 bytes are read\n                // If the Base64 codec doesn't have data to output,\n                // and the underlying stream hasn't yet signaled EOF to the codec.\n                // We need to read more from the underlying stream to feed the codec.\n                if (!base64.hasData() && !base64.isEof()) {\n                    byte[] buf = new byte[doEncode ? 4096 : 8192];\n                    int c = in.read(buf); // Read from underlying stream\n\n                    // A little optimization to avoid System.arraycopy()\n                    // when possible. This block was present in the original code.\n                    if (c > 0 && b.length == len) {\n                        base64.setInitialBuffer(b, offset, len);\n                    }\n\n                    if (doEncode) {\n                        base64.encode(buf, 0, c); // Pass c as -1 if EOF from underlying stream\n                    } else {\n                        base64.decode(buf, 0, c); // Pass c as -1 if EOF from underlying stream\n                    }\n                }\n\n                // Try to read results from the Base64 codec's internal buffer\n                readLen = base64.readResults(b, offset, len);\n\n                // If readResults returns 0, we must check if we're truly at EOF.\n                // If base64.isEof() is true (meaning no more input from underlying stream)\n                // AND base64.hasData() is false (meaning no more buffered output),\n                // then we are at the very end of the stream and should return -1.\n                if (readLen == 0 && base64.isEof() && !base64.hasData()) {\n                    readLen = -1;\n                    break; // Exit the loop as we've determined true EOF.\n                }\n                // If readLen is 0 but it's not a definitive EOF, the loop continues\n                // to try reading again, potentially after more data becomes available\n                // from 'in' or if `base64` processes more internal data.\n            }\n            return readLen;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}