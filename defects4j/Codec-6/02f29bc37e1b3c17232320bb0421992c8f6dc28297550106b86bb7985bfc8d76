{
    "generation": "public int read(byte b[], int offset, int len) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    } else if (offset < 0 || len < 0) {\n        throw new IndexOutOfBoundsException();\n    } else if (offset > b.length || offset + len > b.length) {\n        throw new IndexOutOfBoundsException();\n    } else if (len == 0) {\n        return 0;\n    } else {\n        int readLen = 0;\n        while (readLen == 0) {\n            if (!base64.hasData()) {\n                byte[] buf = new byte[doEncode ? 4096 : 8192];\n                int c = in.read(buf);\n                if (c <= 0) {\n                    // No more data available from the underlying stream\n                    // Try to read the final leftovers from base64 buffer\n                    int finalResult = base64.readResults(b, offset, len);\n                    if (finalResult > 0) {\n                        return finalResult;\n                    } else {\n                        return -1;\n                    }\n                }\n                if (c > 0 && b.length == len) {\n                    base64.setInitialBuffer(b, offset, len);\n                }\n                if (doEncode) {\n                    base64.encode(buf, 0, c);\n                } else {\n                    base64.decode(buf, 0, c);\n                }\n            }\n            readLen = base64.readResults(b, offset, len);\n            if (readLen > 0) {\n                return readLen;\n            }\n            // If base64.hasData() is false and underlying stream is at EOF, return -1\n            if (!base64.hasData()) {\n                return -1;\n            }\n            // Otherwise, loop again (if readLen == 0 but there might still be some data)\n        }\n        return readLen;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}