{
    "generation": "public int read(byte b[], int offset, int len) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    } else if (offset < 0 || len < 0) {\n        throw new IndexOutOfBoundsException();\n    } else if (offset > b.length || offset + len > b.length) {\n        throw new IndexOutOfBoundsException();\n    } else if (len == 0) {\n        return 0;\n    } else {\n        int readLen = 0;\n        while (readLen == 0) {\n            if (!base64.hasData()) {\n                byte[] buf = new byte[doEncode ? 4096 : 8192];\n                int c = in.read(buf);\n                if (c == -1) {\n                    base64.setInitialBuffer(null, 0, 0);\n                    // Break the loop, EOF reached, no more data.\n                    break;\n                }\n                // Optimization: avoid System.arraycopy when buffer fits target\n                if (c > 0 && b.length == len) {\n                    base64.setInitialBuffer(b, offset, len);\n                }\n                if (doEncode) {\n                    base64.encode(buf, 0, c);\n                } else {\n                    base64.decode(buf, 0, c);\n                }\n            }\n            readLen = base64.readResults(b, offset, len);\n            if (readLen == 0 && !base64.hasData()) {\n                // No data read and no data left; avoid infinite loop\n                // Indicate EOF to caller\n                break;\n            }\n            // else, either readLen > 0, or more data will come, so loop continues/re-executes if necessary\n        }\n        if (readLen == 0) {\n            // no data read, treat as EOF\n            return -1;\n        }\n        return readLen;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}