{
    "generation": "public int read(byte b[], int offset, int len) throws IOException {\n    if (b == null) {\n        throw new NullPointerException();\n    } else if (offset < 0 || len < 0) {\n        throw new IndexOutOfBoundsException();\n    } else if (offset > b.length || offset + len > b.length) {\n        throw new IndexOutOfBoundsException();\n    } else if (len == 0) {\n        return 0;\n    } else {\n        int readLen = 0;\n        while (readLen == 0) {\n            if (!base64.hasData()) {\n                byte[] buf = new byte[doEncode ? 4096 : 8192];\n                int c = in.read(buf);\n                // A little optimization to avoid System.arraycopy() when possible.\n                if (c > 0 && b.length == len) {\n                    base64.setInitialBuffer(b, offset, len);\n                }\n                if (doEncode) {\n                    base64.encode(buf, 0, c);\n                } else {\n                    base64.decode(buf, 0, c);\n                }\n            }\n            readLen = base64.readResults(b, offset, len);\n            // If we reach EOF with no results, return -1 as per InputStream contract.\n            if (!base64.hasData() && readLen == 0) {\n                // Check if source stream is also at EOF\n                int testRead = in.read();\n                if (testRead == -1) {\n                    return -1;\n                } else {\n                    // push the byte into base64 for handling in next loop\n                    byte[] singleByte = new byte[] { (byte) testRead };\n                    if (doEncode) {\n                        base64.encode(singleByte, 0, 1);\n                    } else {\n                        base64.decode(singleByte, 0, 1);\n                    }\n                    continue;\n                }\n            }\n        }\n        return readLen;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}