{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * A column is basic if it has exactly one entry equal to 1.0 in the constraint rows\n     * (rows {@link #getNumObjectiveFunctions()} to {@link #getHeight()} - 1)\n     * and all other entries in the column in these rows are 0.0.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer basicRow = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            // check if entry is non-zero (within epsilon)\n            if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                // check if we already found a non-zero entry\n                if (basicRow != null) {\n                    // found a second non-zero entry, column is not basic\n                    return null;\n                }\n                // This is the first non-zero entry. Check if it is 1.0 (within epsilon).\n                if (!MathUtils.equals(entry, 1.0, epsilon)) {\n                    // The first non-zero entry is not 1.0, column is not basic\n                    return null;\n                }\n                // The first non-zero entry is 1.0; record the row index.\n                basicRow = i;\n            }\n            // if entry is zero, continue loop.\n        }\n        // Return the recorded row index (null if no basic row found according to criteria).\n        return basicRow;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}