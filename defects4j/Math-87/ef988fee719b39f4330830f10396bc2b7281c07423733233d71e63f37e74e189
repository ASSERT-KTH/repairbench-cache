{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * A column is basic if it has exactly one entry equal to 1.0 (within epsilon)\n     * and all other entries equal to 0.0 (within epsilon) in the rows corresponding\n     * to the constraints.\n     * @param col index of the column to check\n     * @return the row index of the basic variable entry (i.e., the 1.0) or\n     *         {@code null} if the column is not basic.\n     */\n    private Integer getBasicRow(final int col) {\n        Integer basicRow = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            // check if entry is close to 1.0\n            if (MathUtils.equals(entry, 1.0, epsilon)) {\n                // if we already found an entry close to 1.0 previously\n                if (basicRow != null) {\n                    // column has multiple entries close to 1.0, not basic\n                    return null;\n                }\n                // record the row index where the entry is 1.0\n                basicRow = i;\n            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                // if entry is non-zero but not close to 1.0, column is not basic\n                return null;\n            }\n            // if entry is close to 0.0, continue to the next row\n        }\n        // return the row index if exactly one entry was 1.0 and others were 0.0,\n        // otherwise return null\n        return basicRow;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}