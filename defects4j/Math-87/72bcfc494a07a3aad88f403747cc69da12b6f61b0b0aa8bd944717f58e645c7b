{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * A column is basic if it has exactly one entry equals to 1.0 in the\n     * Bolean rows (rows corresponding to the constraints) and all other entries\n     * in these rows are 0.0 for the given column.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in. null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer basicRow = null;\n        // Check entries in constraint rows (below objective functions)\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            // Check if the entry is close to 1.0\n            if (MathUtils.equals(entry, 1.0, epsilon)) {\n                // If we've already found a row where this column is basic (i.e., equals 1.0),\n                // then this column has multiple '1' entries and is not basic.\n                if (basicRow != null) {\n                    return null;\n                }\n                // Record the row index where the entry is 1.0.\n                basicRow = i;\n            // Check if the entry is significantly different from 0.0\n            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                // If an entry in this column (within constraint rows) is neither 1.0 nor 0.0,\n                // then the column does not represent a basic variable.\n                return null;\n            }\n            // If entry is close to 0.0, continue to the next row.\n        }\n        // If the loop completes, 'basicRow' will be non-null if exactly one '1.0' was found\n        // and all other entries in the constraint rows were '0.0'. Otherwise, it's null.\n        return basicRow;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}