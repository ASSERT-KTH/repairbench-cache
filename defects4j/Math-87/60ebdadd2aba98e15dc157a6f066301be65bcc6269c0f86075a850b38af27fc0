{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                if (row == null) {\n                    row = i;\n                } else {\n                    // Found a second non-zero entry in this column within the constraint rows.\n                    // A basic column must have exactly one non-zero entry (a 1.0)\n                    // in the constraint rows. Since we found two, it's not basic.\n                    return null;\n                }\n            }\n        }\n\n        // After iterating through all constraint rows:\n        // If 'row' is null, it means no non-zero entry was found in this column in the constraint rows.\n        // Therefore, this column cannot be basic.\n        // If 'row' is not null, it means exactly one non-zero entry was found at (row, col) in the constraint rows.\n        // For a column to be truly basic in a standard simplex tableau:\n        // 1. That single non-zero entry must be approximately 1.0.\n        // 2. Its entry in the objective function row (row 0, assuming one objective function) must be 0.0.\n        if (row != null &&\n            MathUtils.equals(getEntry(row, col), 1.0, epsilon) &&\n            MathUtils.equals(getEntry(0, col), 0.0, epsilon)) { // Check objective row coefficient\n            return row; // Column 'col' is basic, and its '1' is in 'row'\n        } else {\n            return null; // Column 'col' is not basic\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}