{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * A column is basic if it contains exactly one non-zero entry in the constraint rows,\n     * and that non-zero entry is approximately 1.0. All other entries in the constraint\n     * rows for that column must be approximately 0.0.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        // Iterate through constraint rows (skipping objective function rows)\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            if (MathUtils.equals(entry, 1.0, epsilon)) {\n                // Found an entry that is approximately 1.0\n                if (row == null) {\n                    // This is the first 1.0 found in this column (within constraint rows)\n                    row = i;\n                } else {\n                    // Found a second 1.0 in this column (within constraint rows).\n                    // A basic column must have exactly one 1.0.\n                    return null; // Not basic\n                }\n            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                // Found a non-zero entry that is not 1.0.\n                // A basic column must have 1.0 at its basic row and 0.0 elsewhere.\n                return null; // Not basic\n            }\n            // If entry is approximately 0.0, continue checking other rows.\n        }\n        // After checking all constraint rows:\n        // If 'row' is not null, it means exactly one 1.0 was found and all other\n        // constraint entries in this column were 0.0. Thus, it's a basic column.\n        // If 'row' is null, it means no 1.0 was found (and no other non-zero entries\n        // caused an early 'null' return). So, it's not a basic column.\n        return row;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}