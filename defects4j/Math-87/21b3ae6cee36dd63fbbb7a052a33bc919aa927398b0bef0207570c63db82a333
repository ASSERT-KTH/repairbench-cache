{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            // A column is basic if it has exactly one non-zero entry,\n            // and that entry must be approximately 1.0.\n            if (MathUtils.equals(entry, 1.0, epsilon)) {\n                if (row == null) {\n                    row = i; // Found the first entry approximately 1.0\n                } else {\n                    // Found a second entry approximately 1.0 (or already found one and this is another 1.0),\n                    // so the column is not basic (it must have exactly one 1.0 and rest 0.0).\n                    return null;\n                }\n            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                // Found a non-zero entry that is NOT approximately 1.0.\n                // This means the column is not basic, as basic columns must have 1.0 in their pivot row.\n                return null;\n            }\n            // If the entry is approximately 0.0, we just continue the loop, which is correct\n            // as other entries in a basic column (outside its pivot row) must be 0.0.\n        }\n        return row; // Returns the row if exactly one entry was approximately 1.0, null otherwise.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}