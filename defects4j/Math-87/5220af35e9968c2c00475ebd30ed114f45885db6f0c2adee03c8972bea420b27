{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * A column is basic if it is a unit vector (contains exactly one 1.0, and all other entries are 0.0),\n     * and the 1.0 entry is located in a constraint row.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        // Iterate through all rows (including objective function rows) to find a unique non-zero entry.\n        for (int i = 0; i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                if (row == null) {\n                    // This is the first non-zero entry found in the column.\n                    row = i;\n                } else {\n                    // Found a second non-zero entry, so this column is not a unit vector.\n                    return null; // Not basic\n                }\n            }\n        }\n\n        // At this point, 'row' is either null (all zeros in the column)\n        // or it contains the index of the single non-zero entry found.\n        // For a column to be basic:\n        // 1. It must have exactly one non-zero entry. (Checked by the loop)\n        // 2. That single non-zero entry must be 1.0.\n        // 3. That single non-zero entry (1.0) must be in a constraint row (not an objective row).\n        if (row != null && row >= getNumObjectiveFunctions() && MathUtils.equals(getEntry(row, col), 1.0, epsilon)) {\n            return row; // Column is basic in 'row'\n        }\n        return null; // Not basic (either no non-zero, multiple non-zeros, or the single non-zero is not 1.0, or it's in an objective row)\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}