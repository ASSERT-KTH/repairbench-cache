{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * A column is considered basic if it has exactly one non-zero entry (below the objective function row)\n     * and that non-zero entry is 1.0. All other entries in the column (below the objective function row)\n     * must be 0.0.\n     * \n     * @param col index of the column to check\n     * @return the row that the variable is basic in. null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            if (MathUtils.equals(entry, 1.0, epsilon)) { // If the entry is 1.0\n                if (row == null) {\n                    row = i; // This is the first 1.0 found, store its row\n                } else {\n                    return null; // Found a second 1.0, which means this column is not basic\n                }\n            } else if (!MathUtils.equals(entry, 0.0, epsilon)) { // If the entry is non-zero AND not 1.0\n                return null; // This column is not basic (it has a non-zero value that isn't 1.0)\n            }\n            // If the entry is 0.0, we continue to the next row as it does not affect basicity here.\n        }\n        // If we reach here, 'row' is either null (meaning all entries were 0, or a non-1.0 non-zero was found)\n        // or it contains the row index of the single 1.0 entry found in the column.\n        return row;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}