{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in. null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        // Check constraint rows (rows starting from getNumObjectiveFunctions())\n        // A basic variable column should have exactly one non-zero element in these rows.\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            // Use MathUtils.equals for floating point comparison with tolerance epsilon\n            if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                if (row == null) {\n                    // Found the first non-zero entry in constraint rows\n                    row = i;\n                } else {\n                    // Found a second non-zero entry in constraint rows -> column is not basic\n                    return null;\n                }\n            }\n        }\n\n        // After checking constraint rows, if a unique non-zero entry was found (row != null),\n        // also check the objective function row(s). In a canonical tableau, the basic\n        // variable should have a zero coefficient in the objective function.\n        if (row != null) {\n            for (int i = 0; i < getNumObjectiveFunctions(); i++) {\n                 // Check if the entry in the objective function row is non-zero\n                 if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                     // If non-zero in objective function -> column is not basic (for typical Simplex phase II)\n                     return null;\n                 }\n            }\n        }\n\n        // If we found exactly one non-zero entry in constraint rows (at index 'row')\n        // AND all entries in the objective function row(s) are zero, then the column is basic.\n        // Otherwise, return null (covers cases: no non-zero in constraints, multiple non-zeros in constraints,\n        // or non-zero in objective function row).\n        return row;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}