{
    "generation": "    /**\n     * Checks whether the given column is basic. A column is considered basic if it contains exactly one non-zero entry,\n     * and that non-zero entry is 1.0, with all other entries in the column (within the constraint rows) being 0.0.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            // Check if the current entry is non-zero (within epsilon tolerance)\n            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                // If the entry is non-zero, it must be 1.0 for the column to be basic.\n                if (MathUtils.equals(getEntry(i, col), 1.0, epsilon)) {\n                    if (row == null) {\n                        // This is the first time we've found a 1.0 in this column within the constraint rows.\n                        // Record this row as the basic row for this column.\n                        row = i;\n                    } else {\n                        // We have found a second 1.0 in this column, which means it has multiple 1.0s.\n                        // A basic column must have exactly one 1.0. Therefore, this column is not basic.\n                        return null;\n                    }\n                } else {\n                    // We found a non-zero entry, but it's not 1.0.\n                    // For a column to be basic, its single non-zero entry must be 1.0.\n                    // Therefore, this column is not basic.\n                    return null;\n                }\n            }\n        }\n        // If we reach here, either:\n        // 1. 'row' is null, meaning all entries in the column were 0.0. Not basic.\n        // 2. 'row' is not null, meaning we found exactly one 1.0 and all other entries were 0.0. Basic.\n        return row;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}