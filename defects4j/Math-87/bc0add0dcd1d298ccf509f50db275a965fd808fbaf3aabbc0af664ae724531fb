{
    "generation": "    /**\n     * Checks whether the given column is basic. A basic column corresponds to a basic\n     * variable and must be a unit vector (exactly one entry is 1.0, all others are 0.0)\n     * within the rows corresponding to constraints.\n     * @param col index of the column to check\n     * @return the row index (starting from 0) where the 1.0 entry is found if the column is basic,\n     *         null otherwise.\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null; // Stores the row index where 1.0 is found\n        // Iterate through the rows corresponding to constraints.\n        // Objective function rows are typically excluded (indices < getNumObjectiveFunctions()).\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            // Check if the entry is approximately 1.0 using the provided epsilon\n            if (MathUtils.equals(entry, 1.0, epsilon)) {\n                // If we have already found a 1.0 entry in a previous row for this column,\n                // this column has more than one '1' (or non-zero element close to 1), so it's not basic.\n                if (row != null) {\n                    return null;\n                }\n                // Record the row index where the 1.0 is located.\n                row = i;\n            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                // If the entry is non-zero but not 1.0, the column does not represent\n                // a basic variable (it's not a unit vector in the constraint rows).\n                return null;\n            }\n            // If the entry is approximately 0.0, continue checking the next row.\n        }\n        // After checking all constraint rows, 'row' will be non-null if and only if\n        // exactly one entry was found to be 1.0 and all other entries were 0.0.\n        return row;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}