{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer basicRow = null;\n        // Iterate through the rows corresponding to constraints.\n        // The Simplex tableau structure typically has objective function row(s)\n        // first, followed by constraint rows.\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            // Check if the entry is non-zero within the tolerance\n            if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                // If we have already found a non-zero entry in a previous row for this column,\n                // then this column cannot be basic (a basic column must have only one non-zero\n                // entry in the constraint rows).\n                if (basicRow != null) {\n                    return null;\n                }\n                // Store the row index where the non-zero entry was found.\n                basicRow = i;\n            }\n        }\n\n        // After checking all constraint rows:\n        // If we found exactly one row with a non-zero entry...\n        if (basicRow != null) {\n            // ...further check if that single non-zero entry is equal to 1.0 (within tolerance).\n            // A standard basic variable column has a 1 in its basic row.\n            if (MathUtils.equals(getEntry(basicRow, col), 1.0, epsilon)) {\n                // If it's 1.0, then this column is basic in the recorded row.\n                return basicRow;\n            }\n            // If the single non-zero entry is not 1.0, it doesn't fit the standard\n            // definition of a basic column in a canonical tableau form. Return null.\n        }\n\n        // Return null if:\n        // - No non-zero entry was found in the constraint rows for this column.\n        // - More than one non-zero entry was found (handled inside the loop).\n        // - Exactly one non-zero entry was found, but it was not equal to 1.0.\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}