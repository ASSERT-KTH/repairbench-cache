{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * A column is basic if it contains exactly one entry that is approximately 1.0,\n     * and all other entries in that column (excluding objective rows) are approximately 0.0.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer basicRow = null;\n        // Iterate through rows, starting from the first constraint row\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            if (MathUtils.equals(entry, 1.0, epsilon)) {\n                // Found an entry that is approximately 1.0\n                if (basicRow == null) {\n                    // This is the first 1.0 found in this column\n                    basicRow = i;\n                } else {\n                    // Found a second 1.0 in the column, which means this column is not basic\n                    return null;\n                }\n            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                // Found a non-zero entry that is not 1.0.\n                // This column cannot be basic according to Simplex tableau rules.\n                return null;\n            }\n            // If entry is 0.0 (within epsilon), it's consistent with a basic column, so continue.\n        }\n        // If we reach here, it means either:\n        // 1. No 1.0 was found (basicRow is null).\n        // 2. Exactly one 1.0 was found, and all other entries were 0.0 (basicRow holds the row index).\n        return basicRow;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}