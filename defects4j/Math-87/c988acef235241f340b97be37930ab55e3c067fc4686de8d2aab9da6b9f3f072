{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * A column is basic if it has exactly one entry equal to 1.0 (within epsilon)\n     * and all other entries equal to 0.0 (within epsilon) in the rows corresponding\n     * to constraints.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in. null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer basicRow = null;\n        // Iterate over the constraint rows (skipping objective function rows)\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            // Check if the entry is approximately 1.0\n            if (MathUtils.equals(entry, 1.0, epsilon)) {\n                // If we have already found a row with 1.0, this column is not basic\n                if (basicRow != null) {\n                    return null;\n                }\n                // Record the row index where 1.0 was found\n                basicRow = i;\n            } else if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                // If we find an entry that is non-zero but not 1.0, this column is not basic\n                return null;\n            }\n            // If the entry is approximately 0.0, continue to the next row\n        }\n        // Return the row index if exactly one 1.0 was found and all others were 0.0\n        return basicRow;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}