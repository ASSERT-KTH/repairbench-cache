{
    "generation": "    /**\n     * Checks whether the given column is basic.\n     * A column is basic if it contains exactly one non-zero entry\n     * (in the constraint rows), and that non-zero entry is 1.0.\n     * All other entries in that column (in the constraint rows) must be 0.0.\n     * @param col index of the column to check\n     * @return the row that the variable is basic in.  null if the column is not basic\n     */\n    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            final double entry = getEntry(i, col);\n            if (!MathUtils.equals(entry, 0.0, epsilon)) {\n                // Found a non-zero entry\n                if (row == null) {\n                    // This is the first non-zero entry found in this column.\n                    // For the column to be basic, this entry must be 1.0.\n                    if (MathUtils.equals(entry, 1.0, epsilon)) {\n                        row = i;\n                    } else {\n                        // The first non-zero entry is not 1.0, so this column is not basic.\n                        return null;\n                    }\n                } else {\n                    // Found a second non-zero entry. A basic column can only have one non-zero entry.\n                    return null;\n                }\n            }\n        }\n        // If we reach here, either:\n        // 1. No non-zero entries were found (row is still null), so not basic.\n        // 2. Exactly one non-zero entry was found, and it was 1.0 (row holds its index), so it is basic.\n        return row;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}