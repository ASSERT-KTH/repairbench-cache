{
    "generation": "    @Override\n    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n    {\n        if (_isInt) {\n            // Visitor for integer types like BigInteger, Long, Integer, Short, Byte\n            visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else {\n            // Visitor for floating point types like BigDecimal, Double, Float\n            Class<?> h = handledType();\n            if (h == BigDecimal.class) {\n                // BigDecimal should report BIG_DECIMAL type\n                visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n            } else {\n                // Other floating point types (Double, Float) -> NUMBER is generic,\n                // but maybe VAGUE_NUMBER would be better? Or just fall back?\n                // For now, let's assume it should be generic NUMBER\n                 /*JsonNumberFormatVisitor v2 =*/ visitor.expectNumberFormat(typeHint);\n                 // Let's revisit if this needs specific type like JsonParser.NumberType.DOUBLE\n            }\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}