{
    "generation": "/**\n * Walks through all recorded entries and adds the data available\n * from the local file header.\n *\n * <p>Also records the offsets for the data to read from the\n * entries.</p>\n */\nprivate void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                        entriesWithoutUTF8Flag)\n    throws IOException {\n    // changing the name of a ZipArchiveEntry is going to change\n    // the hashcode - see COMPRESS-164\n    // Map needs to be reconstructed in order to keep central\n    // directory order\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n        int lenToSkip = fileNameLen;\n        while (lenToSkip > 0) {\n            int skipped = archive.skipBytes(lenToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip file name in\"\n                                           + \" local file header\");\n            }\n            lenToSkip -= skipped;\n        }\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n        ze.setExtra(localExtraData);\n\n        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n            + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            String orig = ze.getName();\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                     nc.comment);\n            if (!orig.equals(ze.getName())) {\n                nameMap.remove(orig);\n                nameMap.put(ze.getName(), ze);\n            }\n        }\n\n        // fix: if entry uses data descriptor and size wasn't known before, get/patch sizes from data itself\n        if ((ze.getGeneralPurposeBit().usesDataDescriptor())\n            && (ze.getCompressedSize() == ZipArchiveEntry.SIZE_UNKNOWN\n                || ze.getSize() == ZipArchiveEntry.SIZE_UNKNOWN)) {\n\n            // Save file pointer to restore later\n            long dataStart = offsetEntry.dataOffset;\n\n            // skip over data: we must read size from data descriptor after compressed data\n            archive.seek(dataStart);\n            long skippedData = 0;\n            final int method = ze.getMethod();\n            if (method == ZipMethod.DEFLATED.getCode()) {\n                // We don't know the compressed size upfront, decompress dummy\n                // We shouldn't decompress here just to get descriptor\n                // Instead, locate descriptor signature directly\n\n                // For WinZip created archives, sometimes the compressed size is stored in the central directory only\n                \n                // Heuristic: search for data descriptor signature (optional) after some reasonable amount\n                // For a proper implementation, we'd parse the stream when reading entries instead\n                // Here, since this is metadata pass, we cannot robustly parse descriptor\n                // So, skip fixing up sizes here - leave as unknown.\n                continue;\n            } else {\n                if (ze.getCompressedSize() != ZipArchiveEntry.SIZE_UNKNOWN) {\n                    skippedData = ze.getCompressedSize();\n                } else {\n                    continue; // cannot skip reliably\n                }\n            }\n            archive.seek(dataStart + skippedData);\n\n            byte[] dd = new byte[16]; // max size of data descriptor with ZIP64\n            archive.readFully(dd, 0, 4);\n            int sig = ZipLong.getValue(dd);\n            int descriptorOffset = 0;\n            if (sig == ZipLong.DD_SIG) {\n                // standard signature\n                descriptorOffset += 4;\n            } else {\n                // no signature, rewind\n                archive.seek(archive.getFilePointer() - 4);\n            }\n\n            archive.readFully(dd, descriptorOffset, 12);\n            long crc = ZipLong.getValue(dd, descriptorOffset);\n            long cSize = ZipLong.getValue(dd, descriptorOffset + 4);\n            long size = ZipLong.getValue(dd, descriptorOffset + 8);\n            ze.setCrc(crc);\n            ze.setCompressedSize(cSize);\n            ze.setSize(size);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}