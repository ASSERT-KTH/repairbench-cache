{
    "generation": "    /**\n     * Walks through all recorded entries and adds the data available\n     * from the local file header.\n     *\n     * <p>Also records the offsets for the data to read from the\n     * entries.</p>\n     */\n    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException {\n        // changing the name of a ZipArchiveEntry is going to change\n        // the hashcode - see COMPRESS-164\n        // Map needs to be reconstructed in order to keep central\n        // directory order\n\n        // Create a new map to rebuild entries, as ZipArchiveEntry keys can change hash codes\n        // when their names are updated based on Unicode Extra Fields.\n        // LinkedHashMap preserves the order of entries as read from the central directory.\n        LinkedHashMap<ZipArchiveEntry, OffsetEntry> newEntries = new LinkedHashMap<>(entries.size());\n\n        for (ZipArchiveEntry ze : entries.keySet()) {\n            OffsetEntry offsetEntry = entries.get(ze); // Get the offset entry for the current key\n\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n            // Check if the entry's name or comment needs to be updated from UTF-8 fields.\n            // If the name changes, the ZipArchiveEntry's hash code will change.\n            String orig = ze.getName();\n            if (entriesWithoutUTF8Flag.containsKey(ze)) {\n                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                         nc.comment);\n                if (!orig.equals(ze.getName())) {\n                    // Name has changed, update the nameMap to reflect the new name.\n                    nameMap.remove(orig);\n                    nameMap.put(ze.getName(), ze);\n                    // The 'ze' object itself has been mutated. When put into newEntries,\n                    // its new (and correct) hash code will be used.\n                }\n            }\n            // Add the (possibly mutated) ZipArchiveEntry and its OffsetEntry to the new map.\n            // This ensures the internal 'entries' map correctly reflects the updated hash codes\n            // if names were changed.\n            newEntries.put(ze, offsetEntry);\n        }\n        // Replace the old 'entries' map with the newly constructed one.\n        this.entries = newEntries;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}