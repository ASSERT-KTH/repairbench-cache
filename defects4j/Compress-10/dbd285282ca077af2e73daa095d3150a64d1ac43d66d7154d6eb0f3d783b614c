{
    "generation": "/**\n * Walks through all recorded entries and adds the data available\n * from the local file header.\n *\n * <p>Also records the offsets for the data to read from the\n * entries.</p>\n */\nprivate void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                        entriesWithoutUTF8Flag)\n    throws IOException {\n    // changing the name of a ZipArchiveEntry is going to change\n    // the hashcode - see COMPRESS-164\n    // Map needs to be reconstructed in order to keep central\n    // directory order\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n        int lenToSkip = fileNameLen;\n        while (lenToSkip > 0) {\n            int skipped = archive.skipBytes(lenToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip file name in\"\n                                           + \" local file header\");\n            }\n            lenToSkip -= skipped;\n        }\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n        ze.setExtra(localExtraData);\n        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n            + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            String orig = ze.getName();\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n\n            // Save previous extra fields before updating name/comment\n            Map<ZipShort, ZipExtraField> origExtraFields = ze.getExtraFields() != null\n                    ? new LinkedHashMap<>()\n                    : null;\n            if (origExtraFields != null) {\n                for (ZipExtraField f : ze.getExtraFields()) {\n                    origExtraFields.put(f.getHeaderId(), f);\n                }\n            }\n\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                     nc.comment);\n\n            if (!orig.equals(ze.getName())) {\n                nameMap.remove(orig);\n                nameMap.put(ze.getName(), ze);\n            }\n\n            // Restore local extra fields if they exist\n            if (origExtraFields != null) {\n                for (ZipExtraField f : ze.getExtraFields()) {\n                    ZipExtraField origField = origExtraFields.get(f.getHeaderId());\n                    if (origField != null && origField.getLocalFileDataData() != null) {\n                        f.parseFromLocalFileData(origField.getLocalFileDataData(), 0,\n                                                 origField.getLocalFileDataLength());\n                    }\n                }\n                // Re-save updated fields\n                ze.setExtra();\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}