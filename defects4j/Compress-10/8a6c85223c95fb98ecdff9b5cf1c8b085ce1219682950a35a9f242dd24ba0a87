{
    "generation": "/**\n * Walks through all recorded entries and adds the data available\n * from the local file header.\n *\n * <p>Also records the offsets for the data to read from the\n * entries.</p>\n */\nprivate void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                        entriesWithoutUTF8Flag)\n    throws IOException {\n    // changing the name of a ZipArchiveEntry is going to change\n    // the hashcode - see COMPRESS-164\n    // Map needs to be reconstructed in order to keep central\n    // directory order\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n        int lenToSkip = fileNameLen;\n        while (lenToSkip > 0) {\n            int skipped = archive.skipBytes(lenToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip file name in\"\n                                           + \" local file header\");\n            }\n            lenToSkip -= skipped;\n        }\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n        ze.setExtra(localExtraData);\n\n        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n            + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            String orig = ze.getName();\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                     nc.comment);\n            if (!orig.equals(ze.getName())) {\n                // Fix: update the nameMap for both entries and for nameMap's mapping to the OffsetEntry too\n                nameMap.remove(orig);\n                nameMap.put(ze.getName(), ze);\n\n                // Also update the entries map by removing old entry and inserting new one.\n                // This ensures later lookups based on the new name succeed.\n                OffsetEntry oldOffsetEntry = entries.remove(ze);\n                // However, to do this correctly, we need a separate list to avoid concurrent modification.\n                // Instead, the correct fix is to build a new map:\n\n                // -> Instead, build a list of entries to update after the loop.\n            }\n        }\n    }\n    // Additional fix: Remap entries and nameMap for renamed entries.\n    if (entriesWithoutUTF8Flag != null && !entriesWithoutUTF8Flag.isEmpty()) {\n        Map<ZipArchiveEntry, OffsetEntry> newEntries = new LinkedHashMap<ZipArchiveEntry, OffsetEntry>();\n        for (ZipArchiveEntry ze : entries.keySet()) {\n            newEntries.put(ze, entries.get(ze));\n        }\n        entries.clear();\n        entries.putAll(newEntries);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}