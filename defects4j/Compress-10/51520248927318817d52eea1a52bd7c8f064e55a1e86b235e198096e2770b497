{
    "generation": "private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                        entriesWithoutUTF8Flag)\n    throws IOException {\n    // changing the name of a ZipArchiveEntry is going to change\n    // the hashcode - see COMPRESS-164\n    // Map needs to be reconstructed in order to keep central\n    // directory order\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n\n        // skip the file name bytes\n        int lenToSkip = fileNameLen;\n        while (lenToSkip > 0) {\n            int skipped = archive.skipBytes(lenToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip file name in\"\n                                           + \" local file header\");\n            }\n            lenToSkip -= skipped;\n        }\n\n        // read the local extra fields\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n\n        // merge central-directory extra fields (if any) with the local ones\n        byte[] centralExtra = ze.getExtra();\n        if (centralExtra != null && centralExtra.length > 0) {\n            byte[] merged = new byte[localExtraData.length + centralExtra.length];\n            System.arraycopy(localExtraData, 0, merged, 0, localExtraData.length);\n            System.arraycopy(centralExtra, 0, merged, localExtraData.length,\n                             centralExtra.length);\n            ze.setExtra(merged);\n        } else {\n            ze.setExtra(localExtraData);\n        }\n\n        // compute where the file data actually starts\n        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n            + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n        // for entries without the UTF-8 flag, re-apply any Unicode extra fields\n        // (now including central-directory ones) to name/comment\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            String orig = ze.getName();\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);\n            if (!orig.equals(ze.getName())) {\n                nameMap.remove(orig);\n                nameMap.put(ze.getName(), ze);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}