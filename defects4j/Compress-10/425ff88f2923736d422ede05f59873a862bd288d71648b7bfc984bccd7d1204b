{
    "generation": "    /**\n     * Walks through all recorded entries and adds the data available\n     * from the local file header.\n     *\n     * <p>Also records the offsets for the data to read from the\n     * entries.</p>\n     */\n    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException {\n        // changing the name of a ZipArchiveEntry is going to change\n        // the hashcode - see COMPRESS-164\n        // Map needs to be reconstructed in order to keep central\n        // directory order\n\n        // Create a new map to hold the resolved entries. This is necessary because\n        // ZipArchiveEntry's hashcode can change if its name is updated (e.g., via setExtra/setName),\n        // and it's used as a key in the 'entries' LinkedHashMap. Modifying a key's\n        // hashcode while it's in a HashMap can corrupt the map, leading to entries\n        // being \"lost\" and subsequent lookups (like in getInputStream) failing.\n        Map<ZipArchiveEntry, OffsetEntry> newEntries = new LinkedHashMap<>(entries.size());\n\n        for (ZipArchiveEntry ze : entries.keySet()) {\n            // Get the OffsetEntry associated with the current ZipArchiveEntry (before potential name modification).\n            OffsetEntry offsetEntry = entries.get(ze);\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    // Changed RuntimeException to IOException as this is an I/O related error.\n                    throw new IOException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData); // This might add UnicodePathExtraField to 'ze'\n\n            // Calculate the data offset: LFH_offset + fixed_header_len + filename_len + extra_field_len\n            // LFH_OFFSET_FOR_FILENAME_LENGTH points to fileNameLen (22 bytes from LFH start).\n            // Then read 2 bytes for fileNameLen, and 2 bytes for extraFieldLen.\n            // So, LFH start + 22 + 2 + 2 = LFH start + 26 bytes, is the start of filename data.\n            // After skipping filename data and extra field data, we are at the data offset.\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n            // Handle name/comment from Unicode Extra Fields (if present in CD, and possibly in LFH)\n            if (entriesWithoutUTF8Flag.containsKey(ze)) {\n                String orig = ze.getName();\n                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n                // This call might change ze.getName() if a UnicodePathExtraField was found\n                // in the LFH extra data or if nc.name/comment dictates it.\n                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                         nc.comment);\n                if (!orig.equals(ze.getName())) {\n                    // If the name changed, update the nameMap as it uses the name string as key.\n                    // The 'ze' object itself has now changed its hashcode.\n                    nameMap.remove(orig);\n                    nameMap.put(ze.getName(), ze);\n                }\n            }\n            // Add the (potentially modified) ZipArchiveEntry and its OffsetEntry to the new map.\n            // This ensures that 'newEntries' map will contain keys with their final hashcodes.\n            newEntries.put(ze, offsetEntry);\n        }\n        // After processing all entries, replace the content of the original 'entries' map\n        // with the entries from the new map. This preserves the LinkedHashMap's insertion order\n        // and ensures the map's integrity despite key hashcode changes.\n        entries.clear();\n        entries.putAll(newEntries);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}