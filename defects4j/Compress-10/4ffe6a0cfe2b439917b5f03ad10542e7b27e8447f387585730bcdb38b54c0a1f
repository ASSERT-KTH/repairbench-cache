{
    "generation": "private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag)\n        throws IOException {\n    // changing the name of a ZipArchiveEntry is going to change\n    // the hashcode - see COMPRESS-164\n    // Map needs to be reconstructed in order to keep central\n    // directory order\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n\n        // Read the file name\n        byte[] fileNameBytes = new byte[fileNameLen];\n        archive.readFully(fileNameBytes);\n        String fileName = new String(fileNameBytes, StandardCharsets.UTF_8);\n\n        // Read the extra data\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n\n        // Set the extra data and file name\n        ze.setExtra(localExtraData);\n        ze.setName(fileName);\n\n        // Calculate the data offset\n        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);\n            if (!fileName.equals(ze.getName())) {\n                nameMap.remove(fileName);\n                nameMap.put(ze.getName(), ze);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}