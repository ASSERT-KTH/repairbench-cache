{
    "generation": "    /**\n     * Walks through all recorded entries and adds the data available\n     * from the local file header.\n     *\n     * <p>Also records the offsets for the data to read from the\n     * entries.</p>\n     */\n    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException {\n        // changing the name of a ZipArchiveEntry is going to change\n        // the hashcode - see COMPRESS-164\n        // Map needs to be reconstructed in order to keep central\n        // directory order.\n\n        // Create a new map to store entries. We iterate over the original 'entries'\n        // and populate this new map. This is crucial because ZipArchiveEntry objects\n        // (which are keys in 'entries') might have their names (and thus hash codes)\n        // changed during this process. Rebuilding the map ensures that the entries\n        // are correctly hashed and discoverable by their new names.\n        // Using LinkedHashMap preserves the central directory order.\n        Map<ZipArchiveEntry, OffsetEntry> newEntries =\n            new java.util.LinkedHashMap<ZipArchiveEntry, OffsetEntry>(entries.size());\n\n        // Iterate over the entry set of the original map to safely access both key and value\n        // and avoid ConcurrentModificationException when rebuilding the map.\n        for (Map.Entry<ZipArchiveEntry, OffsetEntry> entry : entries.entrySet()) {\n            ZipArchiveEntry ze = entry.getKey();\n            OffsetEntry offsetEntry = entry.getValue();\n\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n            // Store the original name before potential modification by setNameAndCommentFromExtraFields\n            String originalName = ze.getName();\n\n            if (entriesWithoutUTF8Flag.containsKey(ze)) {\n                // If this entry needs UTF8 processing, apply name/comment from extra fields.\n                // This call can change ze.getName(), which changes its hash code.\n                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                         nc.comment);\n            }\n\n            // If the ZipArchiveEntry's name has changed, update the nameMap accordingly.\n            // nameMap uses String keys, so it needs explicit removal/addition.\n            if (!originalName.equals(ze.getName())) {\n                nameMap.remove(originalName);\n                nameMap.put(ze.getName(), ze);\n            }\n\n            // Add the (potentially modified) ZipArchiveEntry and its OffsetEntry to the new map.\n            // Even if the name changed, 'ze' is the same object reference, but its hashcode\n            // is now based on the new name. Putting it into 'newEntries' ensures it's correctly\n            // hashed and discoverable by its updated name/hashcode in the new map.\n            newEntries.put(ze, offsetEntry);\n        }\n\n        // After processing all entries, replace the old 'entries' map with the newly built one.\n        // This 'this.entries' map is used by methods like getInputStream() to find the entry data.\n        this.entries = newEntries;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}