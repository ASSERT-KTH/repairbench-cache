{
    "generation": "    /**\n     * Walks through all recorded entries and adds the data available\n     * from the local file header.\n     *\n     * <p>Also records the offsets for the data to read from the\n     * entries.</p>\n     */\n    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException {\n        // changing the name of a ZipArchiveEntry is going to change\n        // the hashcode - see COMPRESS-164\n        // Map needs to be reconstructed in order to keep central\n        // directory order.\n\n        // Create a new map to store the entries with potentially updated ZipArchiveEntry keys.\n        // This will preserve the order as we iterate the original map's keys.\n        java.util.LinkedHashMap<ZipArchiveEntry, OffsetEntry> newEntries =\n            new java.util.LinkedHashMap<>(entries.size());\n\n        for (ZipArchiveEntry ze : entries.keySet()) {\n            OffsetEntry offsetEntry = entries.get(ze); // Get the associated OffsetEntry\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData);\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n            if (entriesWithoutUTF8Flag.containsKey(ze)) {\n                String orig = ze.getName();\n                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                         nc.comment);\n                if (!orig.equals(ze.getName())) {\n                    // Update nameMap if the name changed due to UTF-8 extra field\n                    nameMap.remove(orig);\n                    nameMap.put(ze.getName(), ze);\n                }\n            }\n            // Add the (potentially modified) ZipArchiveEntry object as the key\n            // to the new map, ensuring its hashcode is correct for future lookups.\n            newEntries.put(ze, offsetEntry);\n        }\n\n        // Reconstruct the original 'entries' map in place by clearing and re-adding.\n        // This is necessary because the keys (ZipArchiveEntry objects) might have\n        // changed their hashcodes, making them unfindable in the original map.\n        // Since 'entries' is a LinkedHashMap, clearing and re-adding from 'newEntries'\n        // (which was built in order) preserves the central directory order.\n        entries.clear();\n        entries.putAll(newEntries);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}