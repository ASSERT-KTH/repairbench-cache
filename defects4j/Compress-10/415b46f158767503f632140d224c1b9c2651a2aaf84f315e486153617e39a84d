{
    "generation": "import java.io.IOException;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n// Include necessary imports for ZipArchiveEntry, OffsetEntry, NameAndComment, ZipShort, ZipUtil, etc.\n// Assume these classes and constants (SHORT, LFH_OFFSET_FOR_FILENAME_LENGTH) are defined elsewhere correctly.\n\n    /**\n     * Walks through all recorded entries and adds the data available\n     * from the local file header.\n     *\n     * <p>Also records the offsets for the data to read from the\n     * entries.</p>\n     */\n    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException {\n        // changing the name of a ZipArchiveEntry is going to change\n        // the hashcode - see COMPRESS-164\n        // Map needs to be reconstructed in order to keep central\n        // directory order andlookup mapping using potentially modified entries.\n        // Create a copy to iterate over, then rebuild the original map.\n        Map<ZipArchiveEntry, OffsetEntry> currentEntries = new LinkedHashMap<>(entries);\n        Map<ZipArchiveEntry, OffsetEntry> newEntries = new LinkedHashMap<>();\n\n        for (Map.Entry<ZipArchiveEntry, OffsetEntry> entry : currentEntries.entrySet()) {\n            ZipArchiveEntry ze = entry.getKey();\n            OffsetEntry offsetEntry = entry.getValue(); // Get the OffsetEntry associated with the original key\n\n            long offset = offsetEntry.headerOffset;\n            // If headerOffset is unknown, we have a problem. Indicative of issue during CD reading.\n            // Depending on desired behavior, could throw an exception or skip this entry.\n            // For now, assume headerOffset is valid if we reached here.\n            if (offset == OFFSET_UNKNOWN) {\n                 // log a warning? skip? based on how ZipFile promises to behave\n                 // for now, let's continue, but getInputStream will likely fail for this entry\n                 newEntries.put(ze, offsetEntry); // Keep the entry with unknown offset\n                 continue;\n            }\n\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            // If the archive is corrupt and we cannot read the full length, readFully will throw EOFException\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n\n            // Skip the filename\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    // skipBytes should return > 0 if there are bytes to skip unless it hit EOF immediately.\n                    // Throw if skip fails unexpectedly.\n                    throw new IOException(\"Failed to skip file name in local file header: \" + ze.getName());\n                }\n                lenToSkip -= skipped;\n            }\n\n            // Read the local extra field data\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n\n            // Set the local extra data on the entry. This might potentially\n            // update entry's metadata (e.g., Zip64 sizes) based on local extra fields.\n            // It might also change the hashcode if extra fields affect equality/hashcode.\n            ze.setExtra(localExtraData);\n\n            // Calculate the data offset and store it in the OffsetEntry.\n            // The calculation uses the LFH filename/extra field lengths.\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n            // Handle entries potentially needing name/comment update based on CD flags/fields.\n            // This needs to happen *after* setExtra if ZipUtil relies on extra fields,\n            // but be aware setExtra might have removed CD-only fields (like Unicode Path).\n            // If entriesWithoutUTF8Flag contained the original 'ze' key:\n            if (entriesWithoutUTF8Flag.containsKey(ze)) {\n                String orig = ze.getName();\n                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n                // If nc is null, something is wrong, but proceed cautiously.\n                if (nc != null) {\n                     // This call might change ze.getName(), affecting its hashcode.\n                     ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);\n                     if (!orig.equals(ze.getName())) {\n                         // Update the name lookup map.\n                         nameMap.remove(orig);\n                         nameMap.put(ze.getName(), ze);\n                     }\n                }\n            }\n            // Add the entry (potentially modified key) and its OffsetEntry to the new map.\n            newEntries.put(ze, offsetEntry);\n        }\n\n        // Clear the original map and repopulate it from the rebuilt map.\n        // This ensures the map contains the final state of the ZipArchiveEntry keys.\n        if (entries.size() != newEntries.size()) {\n             // This case might occur if an entry with OFFSET_UNKNOWN was skipped,\n             // or potentially if duplicate keys were produced by modifications (unlikely).\n             // Log or handle as appropriate. For now, just replace.\n             // LOG.warn(\"Size mismatch when rebuilding entries map; was \" + entries.size() + \", now \" + newEntries.size());\n        }\n        entries.clear();\n        entries.putAll(newEntries);\n    }\n\n    // Dummy fields and constants assumed to exist for context\n    private static final int SHORT = 2;\n    private static final long OFFSET_UNKNOWN = -1;\n    private static final int LFH_OFFSET_FOR_FILENAME_LENGTH = 26;\n    private java.io.RandomAccessFile archive;\n    private Map<ZipArchiveEntry, OffsetEntry> entries;\n    private Map<String, ZipArchiveEntry> nameMap;\n\n    // Dummy inner classes assumed to exist\n    private static class OffsetEntry { long headerOffset = OFFSET_UNKNOWN; long dataOffset = OFFSET_UNKNOWN; }\n    private static class NameAndComment { byte[] name; byte[] comment; }\n\n    // Dummy classes/utils assumed to exist\n    private static class ZipArchiveEntry {\n        private String name; private byte[] extra;\n        String getName() { return name; }\n        void setExtra(byte[] extra) { this.extra = extra; /* + potentially parse & update state */ }\n        // hashCode() and equals() potentially depend on name and/or extra fields\n        @Override public int hashCode() { return java.util.Objects.hash(name); /* Simplified */ }\n        @Override public boolean equals(Object obj) { /* Simplified */ return obj instanceof ZipArchiveEntry && java.util.Objects.equals(this.name, ((ZipArchiveEntry)obj).name); }\n    }\n    private static class ZipShort { static int getValue(byte[] b) { return 0; } }\n    private static class ZipUtil { static void setNameAndCommentFromExtraFields(ZipArchiveEntry ze, byte[] nameBytes, byte[] commentBytes) { /* Simplified: might change ze.name */ } }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}