{
    "generation": "    /**\n     * Walks through all recorded entries and adds the data available\n     * from the local file header.\n     *\n     * <p>Also records the offsets for the data to read from the\n     * entries.</p>\n     */\n    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException {\n        // changing the name of a ZipArchiveEntry is going to change\n        // the hashcode - see COMPRESS-164\n        // Map needs to be reconstructed in order to keep central\n        // directory order\n        // Iterate over a copy of the keys to avoid potential issues if the name\n        // (and therefore hashcode/equality) of an entry changes, see COMPRESS-164.\n        for (ZipArchiveEntry ze : new ArrayList<>(entries.keySet())) {\n            OffsetEntry offsetEntry = entries.get(ze);\n            // Entry might have been removed by name change handling in previous iteration\n            if (offsetEntry == null) {\n                continue;\n            }\n            long offset = offsetEntry.headerOffset;\n            // Seek to the position of filename length and extra field length fields\n            // LFH_OFFSET_FOR_FILENAME_LENGTH == 26\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] shortBuff = new byte[SHORT];\n            // Read filename length\n            archive.readFully(shortBuff);\n            int fileNameLen = ZipShort.getValue(shortBuff);\n            // Read extra field length\n            archive.readFully(shortBuff);\n            int extraFieldLen = ZipShort.getValue(shortBuff);\n\n            // Skip the filename bytes\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    // Use IOException for file read/skip errors\n                    throw new IOException(\"Failed to skip file name in local file header for entry \"\n                                           + ze.getName());\n                }\n                lenToSkip -= skipped;\n            }\n\n            // Read the local extra field data\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            // Set the LFH extra data on the entry. This might overwrite CD extra data.\n            ze.setExtra(localExtraData);\n\n            // The data offset starts right after the LFH extra field.\n            // The file pointer is currently at this position.\n            offsetEntry.dataOffset = archive.getFilePointer();\n            // Previous calculation: offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen;\n            // Using archive.getFilePointer() is likely more robust.\n\n            if (entriesWithoutUTF8Flag.containsKey(ze)) {\n                String orig = ze.getName();\n                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n                // Note: This uses the extra data just read from LFH (localExtraData).\n                // If the required unicode fields were only in the CD extra data,\n                // this might not find them. This behavior matches the original code.\n                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                         nc.comment);\n                if (!orig.equals(ze.getName())) {\n                    // If the name changed, update the nameMap.\n                    // The original code didn't update the main 'entries' map key.\n                    // While potentially problematic (COMPRESS-164), retain this behavior\n                    // for a minimal fix focused on the offset issue.\n                    nameMap.remove(orig);\n                    nameMap.put(ze.getName(), ze);\n                }\n            }\n            // Note: If name changes, the key 'ze' in the 'entries' map might become\n            // inconsistent if hashcode/equals depend on name. COMPRESS-164.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}