{
    "generation": "private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag)\n    throws IOException {\n    // changing the name of a ZipArchiveEntry is going to change\n    // the hashcode - see COMPRESS-164\n    // Map needs to be reconstructed in order to keep central\n    // directory order\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n\n        // Skip over the file name (we don\u2019t need it as the CD already has it)\n        int lenToSkip = fileNameLen;\n        while (lenToSkip > 0) {\n            int skipped = archive.skipBytes(lenToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip file name in local file header\");\n            }\n            lenToSkip -= skipped;\n        }\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n\n        // Save the original name before any change is made\n        String originalName = ze.getName();\n        // Only update the extra data if the entry did not come in via the UTF8 path;\n        // otherwise leave the extra data (and the name) as set from the central directory.\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);\n            if (!originalName.equals(ze.getName())) {\n                nameMap.remove(originalName);\n                nameMap.put(ze.getName(), ze);\n            }\n        } else {\n            ze.setExtra(localExtraData);\n        }\n        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}