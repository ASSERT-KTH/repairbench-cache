{
    "generation": "/**\n * Walks through all recorded entries and adds the data available\n * from the local file header.\n *\n * <p>Also records the offsets for the data to read from the\n * entries.</p>\n */\nprivate void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                        entriesWithoutUTF8Flag)\n    throws IOException {\n    // changing the name of a ZipArchiveEntry is going to change\n    // the hashcode - see COMPRESS-164\n    // Map needs to be reconstructed in order to keep central\n    // directory order\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n\n        // Save the offset to the start of filename bytes\n        long fileNameStart = archive.getFilePointer();\n\n        // Read the file name bytes, don't skip\n        byte[] fileNameBytes = new byte[fileNameLen];\n        archive.readFully(fileNameBytes);\n\n        // update the name from local header bytes (central dir sometimes wrongly encoded)\n        // but preserve the old central directory name in entriesWithoutUTF8Flag fixups\n        try {\n            String fileName = ZipEncodingHelper.ASCII.decode(fileNameBytes);\n            ze.setName(fileName);\n        } catch (Exception ex) {\n            // fallback: ignore and keep the original\n        }\n\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n        ze.setExtra(localExtraData);\n\n        offsetEntry.dataOffset = fileNameStart + fileNameLen + extraFieldLen;\n\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            String orig = ze.getName();\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                     nc.comment);\n            if (!orig.equals(ze.getName())) {\n                nameMap.remove(orig);\n                nameMap.put(ze.getName(), ze);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}