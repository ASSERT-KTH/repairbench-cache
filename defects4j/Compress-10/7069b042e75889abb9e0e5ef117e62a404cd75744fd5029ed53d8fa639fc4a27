{
    "generation": "    /**\n     * Walks through all recorded entries and adds the data available\n     * from the local file header.\n     *\n     * <p>Also records the offsets for the data to read from the\n     * entries.</p>\n     */\n    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException {\n        // changing the name of a ZipArchiveEntry is going to change\n        // the hashcode - see COMPRESS-164.\n        // The maps (entries and nameMap) must be reconstructed to maintain\n        // consistency and central directory order if ZipArchiveEntry keys are modified.\n\n        // Use temporary lists to store the processed entries and their offsets\n        // in order before rebuilding the main maps.\n        List<ZipArchiveEntry> updatedEntriesList = new ArrayList<>(entries.size());\n        List<OffsetEntry> updatedOffsetEntriesList = new ArrayList<>(entries.size());\n\n        // Iterate over the current entries to process them.\n        // We use entrySet() to get both the key (ZipArchiveEntry) and value (OffsetEntry).\n        for (Map.Entry<ZipArchiveEntry, OffsetEntry> entryPair : entries.entrySet()) {\n            ZipArchiveEntry ze = entryPair.getKey();\n            OffsetEntry offsetEntry = entryPair.getValue();\n\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData); // Modifies the existing ZipArchiveEntry object\n\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n            // This block may modify ze.getName(), which changes its hashcode/equals.\n            if (entriesWithoutUTF8Flag.containsKey(ze)) {\n                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                         nc.comment);\n                // No need to update nameMap or remove/put from 'entries' here,\n                // as they will be rebuilt after this loop.\n            }\n\n            // Add the (potentially modified) entry and its offset to the temporary lists.\n            updatedEntriesList.add(ze);\n            updatedOffsetEntriesList.add(offsetEntry);\n        }\n\n        // Reconstruct the 'entries' (LinkedHashMap) and 'nameMap' (HashMap)\n        // using the modified ZipArchiveEntry objects. This ensures consistency\n        // with the potentially changed names and preserves the central directory order.\n        entries = new LinkedHashMap<>(updatedEntriesList.size());\n        nameMap = new HashMap<>(updatedEntriesList.size());\n\n        for (int i = 0; i < updatedEntriesList.size(); i++) {\n            ZipArchiveEntry ze = updatedEntriesList.get(i);\n            OffsetEntry offsetEntry = updatedOffsetEntriesList.get(i);\n            entries.put(ze, offsetEntry);\n            nameMap.put(ze.getName(), ze);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}