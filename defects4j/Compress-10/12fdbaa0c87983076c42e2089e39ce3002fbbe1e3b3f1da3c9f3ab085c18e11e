{
    "generation": "    /**\n     * Walks through all recorded entries and adds the data available\n     * from the local file header.\n     *\n     * <p>Also records the offsets for the data to read from the\n     * entries.</p>\n     */\n    private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException {\n        // changing the name of a ZipArchiveEntry is going to change\n        // the hashcode - see COMPRESS-164\n        // Map needs to be reconstructed in order to keep central\n        // directory order\n\n        // Create a new map to store entries in the correct (central directory) order\n        // and ensure internal hash table consistency after entry mutations.\n        // Using LinkedHashMap to preserve insertion order.\n        Map<ZipArchiveEntry, OffsetEntry> newEntries = new LinkedHashMap<>(entries.size());\n\n        // Iterate over a copy of the key set. This is crucial because ZipArchiveEntry\n        // objects (which are keys) might be modified in place, changing their hashCode.\n        // Iterating over a copy prevents ConcurrentModificationException or unexpected\n        // behavior if the map were modified during iteration, and allows for clean reconstruction.\n        for (ZipArchiveEntry ze : new java.util.ArrayList<>(entries.keySet())) {\n            // Get the OffsetEntry using the current 'ze' object. This works\n            // because 'ze' is the exact same object reference that was used as a key.\n            OffsetEntry offsetEntry = entries.get(ze);\n\n            long offset = offsetEntry.headerOffset;\n            archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n            byte[] b = new byte[SHORT];\n            archive.readFully(b);\n            int fileNameLen = ZipShort.getValue(b);\n            archive.readFully(b);\n            int extraFieldLen = ZipShort.getValue(b);\n            int lenToSkip = fileNameLen;\n            while (lenToSkip > 0) {\n                int skipped = archive.skipBytes(lenToSkip);\n                if (skipped <= 0) {\n                    throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");\n                }\n                lenToSkip -= skipped;\n            }\n            byte[] localExtraData = new byte[extraFieldLen];\n            archive.readFully(localExtraData);\n            ze.setExtra(localExtraData); // This modifies the 'ze' object in place.\n\n            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;\n\n            if (entriesWithoutUTF8Flag.containsKey(ze)) {\n                String orig = ze.getName();\n                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                         nc.comment); // 'ze' name might change here.\n                if (!orig.equals(ze.getName())) {\n                    // If the name changed, the entry in nameMap needs to be updated.\n                    // This is crucial for ZipFile.getEntry(name) to work correctly later.\n                    nameMap.remove(orig);\n                    nameMap.put(ze.getName(), ze);\n                }\n            }\n            // Add the (potentially modified) ZipArchiveEntry and its OffsetEntry\n            // to the new map. When 'ze' is added here, its current hashCode (based on its\n            // potentially new name) will be used, ensuring correct hash table placement.\n            newEntries.put(ze, offsetEntry);\n        }\n        // Replace the old map with the new one, ensuring internal consistency\n        // for subsequent lookups and iterations.\n        this.entries = newEntries;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}