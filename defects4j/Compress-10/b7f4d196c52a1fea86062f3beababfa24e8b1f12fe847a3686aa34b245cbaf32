{
    "generation": "/**\n * Walks through all recorded entries and adds the data available\n * from the local file header.\n *\n * <p>Also records the offsets for the data to read from the\n * entries.</p>\n */\nprivate void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                        entriesWithoutUTF8Flag)\n    throws IOException {\n    // changing the name of a ZipArchiveEntry is going to change\n    // the hashcode - see COMPRESS-164\n    // Map needs to be reconstructed in order to keep central\n    // directory order\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n\n        // skip the local file header file name\n        int lenToSkip = fileNameLen;\n        while (lenToSkip > 0) {\n            int skipped = archive.skipBytes(lenToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip file name in\"\n                                           + \" local file header\");\n            }\n            lenToSkip -= skipped;\n        }\n\n        // read the local extra-data\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n        // set only the local extra fields here\n        ze.setExtra(localExtraData);\n\n        // compute where the actual file data starts\n        offsetEntry.dataOffset = offset\n            + LFH_OFFSET_FOR_FILENAME_LENGTH\n            + SHORT + SHORT\n            + fileNameLen + extraFieldLen;\n\n        // if we saw a Unicode\u2010extra\u2010field in the central dir (but no UTF8 flag)\n        // apply it now, falling back to the central\u2010dir values if the local\n        // header had no Unicode\u2010field of its own\n        if (entriesWithoutUTF8Flag.containsKey(ze)) {\n            NameAndComment nc = entriesWithoutUTF8Flag.get(ze);\n            String origName = ze.getName();\n            // try to pick up a local Unicode\u2010extra\u2010field first\n            ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);\n            // if that did not change the name, fall back to the central\u2010dir value\n            if (ze.getName().equals(origName)) {\n                ze.setName(nc.name);\n            }\n            // likewise for the comment\n            if (nc.comment != null && !nc.comment.equals(ze.getComment())) {\n                ze.setComment(nc.comment);\n            }\n            // if the name really did change, update our name\u2010to\u2010entry map\n            if (!origName.equals(ze.getName())) {\n                nameMap.remove(origName);\n                nameMap.put(ze.getName(), ze);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}