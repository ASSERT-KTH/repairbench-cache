{
    "generation": "private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag)\n    throws IOException {\n    // Loop over all the local file header entries. Note that these entries\u2019 hash codes\n    // are based on their names and may become \u201cwrong\u201d when the name changes. Therefore,\n    // to update the extra Unicode information taken from the central directory we do\n    // not use Map.containsKey() directly on the entry \u2013 we match on the local file header offset.\n    for (ZipArchiveEntry ze : entries.keySet()) {\n        OffsetEntry offsetEntry = entries.get(ze);\n        long offset = offsetEntry.headerOffset;\n        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n        byte[] b = new byte[SHORT];\n        archive.readFully(b);\n        int fileNameLen = ZipShort.getValue(b);\n        archive.readFully(b);\n        int extraFieldLen = ZipShort.getValue(b);\n        int lenToSkip = fileNameLen;\n        while (lenToSkip > 0) {\n            int skipped = archive.skipBytes(lenToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip file name in local file header\");\n            }\n            lenToSkip -= skipped;\n        }\n        byte[] localExtraData = new byte[extraFieldLen];\n        archive.readFully(localExtraData);\n        ze.setExtra(localExtraData);\n        // The file data starts right after the local file header:\n        offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT\n            + fileNameLen + extraFieldLen;\n\n        // Instead of checking entriesWithoutUTF8Flag.containsKey(ze) \u2013 which is unsafe because\n        // changing the name changes the hash code \u2013 look for the matching entry by comparing the\n        // local header offset (which is immutable).\n        Iterator<Map.Entry<ZipArchiveEntry, NameAndComment>> it =\n            entriesWithoutUTF8Flag.entrySet().iterator();\n        while (it.hasNext()) {\n            Map.Entry<ZipArchiveEntry, NameAndComment> entry = it.next();\n            ZipArchiveEntry centralEntry = entry.getKey();\n            if (centralEntry.getLocalHeaderOffset() == offset) {\n                NameAndComment nc = entry.getValue();\n                String orig = ze.getName();\n                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);\n                if (!orig.equals(ze.getName())) {\n                    nameMap.remove(orig);\n                    nameMap.put(ze.getName(), ze);\n                }\n                // Remove the matching entry so we do not process it twice.\n                it.remove();\n                break;\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}