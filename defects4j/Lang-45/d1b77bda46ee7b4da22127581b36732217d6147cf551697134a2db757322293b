{
    "generation": "import org.apache.commons.lang.StringUtils; // Assuming this import for StringUtils.EMPTY and StringUtils.indexOf\n\npublic class WordUtils {\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the end of the String. The upper limit can be specified to forcibly\n     * abbreviate a String.\n     * \n     * @param str         the string to be abbreviated. If null is passed, null is returned.\n     *                    If the empty String is passed, the empty string is returned.\n     * @param lower       the lower limit.\n     * @param upper       the upper limit; specify -1 if no limit is desired.\n     *                    If the upper limit is lower than the lower limit, it will be\n     *                    adjusted to be the same as the lower limit.\n     * @param appendToEnd String to be appended to the end of the abbreviated string.\n     *                    This is appended ONLY if the string was indeed abbreviated.\n     *                    The append does not count towards the lower or upper limits.\n     * @return the abbreviated String.\n     * @since 2.4\n     */\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // Ensure lower is not negative\n        if (lower < 0) {\n            lower = 0;\n        }\n\n        // Calculate the actual 'upper' limit for substring operation.\n        // It should never be greater than str.length().\n        // If -1 is passed, it means no upper bound, so use str.length().\n        int effectiveUpper;\n        if (upper == -1 || upper > str.length()) {\n            effectiveUpper = str.length();\n        } else {\n            effectiveUpper = upper;\n        }\n\n        // Apply the rule: \"If the upper limit is lower than the lower limit, it will be\n        // adjusted to be the same as the lower limit.\"\n        // This implies effectiveUpper must be at least lower.\n        // However, effectiveUpper must also remain <= str.length().\n        // So, effectiveUpper becomes max(effectiveUpper, lower), but then it is capped at str.length().\n        effectiveUpper = Math.min(str.length(), Math.max(effectiveUpper, lower));\n\n        StringBuffer result = new StringBuffer();\n        int index = StringUtils.indexOf(str, \" \", lower);\n\n        if (index == -1) {\n            result.append(str.substring(0, effectiveUpper));\n            // only if abbreviation has occured do we append the appendToEnd value\n            if (effectiveUpper != str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else if (index > effectiveUpper) {\n            result.append(str.substring(0, effectiveUpper));\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else { // index <= effectiveUpper\n            result.append(str.substring(0, index));\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}