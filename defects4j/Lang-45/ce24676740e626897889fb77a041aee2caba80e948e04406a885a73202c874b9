{
    "generation": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // initial parameter checks\n    if (str == null) {\n        return null;\n    }\n    if (str.length() == 0) {\n        return StringUtils.EMPTY;\n    }\n    int strLen = str.length();\n    // if the lower value is greater than the length of the string, set to the length\n    if (lower > strLen) {\n        lower = strLen;\n    }\n    // if the upper value is -1 (no limit) or greater than the length, set to length\n    if (upper == -1 || upper > strLen) {\n        upper = strLen;\n    }\n    // if upper is less than lower, raise it to lower\n    if (upper < lower) {\n        upper = lower;\n    }\n\n    // find first space after the lower limit\n    int pos = StringUtils.indexOf(str, \" \", lower);\n    StringBuffer result = new StringBuffer();\n    if (pos == -1) {\n        // no space found, abbreviate at upper\n        result.append(str.substring(0, upper));\n        if (upper != strLen) {\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n    } else if (pos > upper) {\n        // next space beyond upper, abbreviate at upper\n        result.append(str.substring(0, upper));\n        result.append(StringUtils.defaultString(appendToEnd));\n    } else {\n        // space within limits, abbreviate at space\n        result.append(str.substring(0, pos));\n        result.append(StringUtils.defaultString(appendToEnd));\n    }\n    return result.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}