{
    "generation": "    /**\n     * Abbreviates a string nicely.\n     *\n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the end of the String. The upper limit can be specified to forcibly\n     * abbreviate a String.\n     *\n     * @param str         the string to be abbreviated. If null is passed, null is returned.\n     *                    If the empty String is passed, the empty string is returned.\n     * @param lower       the lower limit; negative value is treated as 0.\n     * @param upper       the upper limit; specify -1 if no limit is desired.\n     *                    If the upper limit is lower than the lower limit, it will be\n     *                    adjusted to be the same as the lower limit.\n     * @param appendToEnd String to be appended to the end of the abbreviated string.\n     *                    This is appended ONLY if the string was indeed abbreviated.\n     *                    The append does not count towards the lower or upper limits.\n     * @return the abbreviated String.\n     * @since 2.4\n     */\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // treat negative lower value as 0\n        if (lower < 0) {\n            lower = 0;\n        }\n\n        // If the lower threshold is greater than or equal to the string length,\n        // return the original string, as we are looking for a space after lower.\n        if (lower >= str.length()) {\n             return str;\n        }\n\n        // if the upper value is -1 (i.e. no limit) or is greater\n        // than the length of the string, set to the length of the string\n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n        // if upper is less than lower, raise it to lower\n        if (upper < lower) {\n            // Sanity check: ensure abbreviation is not shorter than lower limit\n            upper = lower;\n        }\n\n        StringBuffer result = new StringBuffer();\n        // Note: indexOf(String, int) returns -1 if 'lower' is out of bounds\n        int index = StringUtils.indexOf(str, \" \", lower);\n\n        // If no space was found after 'lower', or space is outside of bounds.\n        if (index == -1) {\n            // Abbreviate at upper limit\n            result.append(str.substring(0, upper));\n            // only if abbreviation has occurred do we append the appendToEnd value\n            if (upper != str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        // If the first space found is after the upper limit.\n        } else if (index > upper) {\n            // Abbreviate at upper limit.\n            result.append(str.substring(0, upper));\n            result.append(StringUtils.defaultString(appendToEnd));\n        // If the first space found is within the [lower, upper] range.\n        } else {\n            // Abbreviate at the first space found after lower limit.\n            result.append(str.substring(0, index));\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}