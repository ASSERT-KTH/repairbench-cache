{
    "generation": "    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the end of the String. The upper limit can be specified to forcibly\n     * abbreviate a String.\n     * \n     * @param str         the string to be abbreviated. If null is passed, null is returned.\n     *                    If the empty String is passed, the empty string is returned.\n     * @param lower       the lower limit.\n     * @param upper       the upper limit; specify -1 if no limit is desired.\n     *                    If the upper limit is lower than the lower limit, it will be\n     *                    adjusted to be the same as the lower limit.\n     * @param appendToEnd String to be appended to the end of the abbreviated string.\n     *                    This is appended ONLY if the string was indeed abbreviated.\n     *                    The append does not count towards the lower or upper limits.\n     * @return the abbreviated String.\n     * @since 2.4\n     */\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // if the upper value is -1 (i.e. no limit) or is greater\n        // than the length of the string, set to the length of the string\n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n        // if upper is less than lower, raise it to lower\n        if (upper < lower) {\n            upper = lower;\n        }\n        // Ensure upper does not exceed string length, especially if lower was greater than length.\n        // This addresses the StringIndexOutOfBoundsException when lower/upper are greater than str.length().\n        upper = Math.min(upper, str.length());\n\n        StringBuffer result = new StringBuffer();\n        int index = StringUtils.indexOf(str, \" \", lower);\n        if (index == -1) {\n            result.append(str.substring(0, upper));\n            // only if abbreviation has occured do we append the appendToEnd value\n            // Abbreviation occurs if 'upper' is less than the original string length.\n            // If upper is equal to str.length(), it means no forced abbreviation happened,\n            // or the string was already shorter than lower/upper, so no append.\n            if (upper != str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else if (index > upper) {\n            // Abbreviation forced by upper limit before a space was found\n            result.append(str.substring(0, upper));\n            // In this case, an abbreviation has definitely occurred.\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else {\n            // Abbreviation at the first space found after lower limit\n            result.append(str.substring(0, index));\n            // In this case, an abbreviation has definitely occurred.\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}