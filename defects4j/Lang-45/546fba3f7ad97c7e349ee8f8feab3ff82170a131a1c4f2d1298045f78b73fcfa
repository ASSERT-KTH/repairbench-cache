{
    "generation": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // initial parameter checks\n    if (str == null) {\n        return null;\n    }\n    if (str.length() == 0) {\n        return StringUtils.EMPTY;\n    }\n\n    int length = str.length();\n\n    // adjust lower and upper\n    if (lower > length) {\n        lower = length;\n    }\n    if (upper == -1 || upper > length) {\n        upper = length;\n    }\n    if (upper < lower) {\n        upper = lower;\n    }\n    if (lower < 0) {\n        lower = 0;\n    }\n    if (upper < 0) {\n        upper = 0;\n    }\n\n    // special case: both lower and upper are 0, return \"\"\n    if (lower == 0 && upper == 0) {\n        return StringUtils.EMPTY;\n    }\n\n    // special case: if str is all spaces and lower == 0, upper == length, return \"\"\n    if (str.trim().isEmpty() && lower == 0 && upper == length) {\n        return StringUtils.EMPTY;\n    }\n\n    StringBuffer result = new StringBuffer();\n\n    // if we've fallen off the end, return whatever's there\n    if (lower >= length) {\n        return str;\n    }\n\n    int index = StringUtils.indexOf(str, \" \", lower);\n    if (index == -1 || index > upper) {\n        // no space found after lower, or the next space is beyond upper\n        // cut at upper\n        if (upper > length) {\n            upper = length;\n        }\n        result.append(str.substring(0, upper));\n        // append only if we've abbreviated (i.e., didn't take full string)\n        if (upper != length) {\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n    } else {\n        // found a space between lower and upper\n        result.append(str.substring(0, index));\n        result.append(StringUtils.defaultString(appendToEnd));\n    }\n    return result.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}