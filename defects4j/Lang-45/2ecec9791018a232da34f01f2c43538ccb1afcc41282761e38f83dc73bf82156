{
    "generation": "    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the end of the String. The upper limit can be specified to forcibly\n     * abbreviate a String.\n     * \n     * @param str         the string to be abbreviated. If null is passed, null is returned.\n     *                    If the empty String is passed, the empty string is returned.\n     * @param lower       the lower limit.\n     * @param upper       the upper limit; specify -1 if no limit is desired.\n     *                    If the upper limit is lower than the lower limit, it will be\n     *                    adjusted to be the same as the lower limit.\n     * @param appendToEnd String to be appended to the end of the abbreviated string.\n     *                    This is appended ONLY if the string was indeed abbreviated.\n     *                    The append does not count towards the lower or upper limits.\n     * @return the abbreviated String.\n     * @since 2.4\n     */\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // Calculate effective lower and upper limits\n        // Ensure lower is within [0, str.length()]\n        int effectiveLower = Math.max(0, lower);\n        effectiveLower = Math.min(effectiveLower, str.length());\n\n        // Ensure upper is within [0, str.length()]\n        // If upper is -1, it means no upper limit, so it defaults to str.length()\n        int effectiveUpper = upper;\n        if (effectiveUpper == -1) {\n            effectiveUpper = str.length();\n        }\n        effectiveUpper = Math.min(effectiveUpper, str.length()); // Clamp upper to string length\n        effectiveUpper = Math.max(0, effectiveUpper); // Ensure upper is not negative\n\n        // Ensure effectiveUpper is not less than effectiveLower.\n        // Since both effectiveLower and effectiveUpper are already clamped to str.length(),\n        // this operation will not push effectiveUpper beyond str.length().\n        effectiveUpper = Math.max(effectiveUpper, effectiveLower);\n\n        StringBuffer result = new StringBuffer();\n        // Find the first space after the effective lower limit\n        int index = StringUtils.indexOf(str, \" \", effectiveLower);\n        \n        // Case 1: No space found after the effective lower limit.\n        // Truncate at the effective upper limit.\n        if (index == -1) {\n            result.append(str.substring(0, effectiveUpper));\n            // Only append if actual truncation occurred (i.e., effectiveUpper is less than original string length)\n            if (effectiveUpper != str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } \n        // Case 2: A space was found, but it is beyond the effective upper limit.\n        // Truncate at the effective upper limit, ignoring the space.\n        else if (index > effectiveUpper) {\n            result.append(str.substring(0, effectiveUpper));\n            // Append appendToEnd because truncation to effectiveUpper has occurred\n            result.append(StringUtils.defaultString(appendToEnd));\n        } \n        // Case 3: A space was found at or before the effective upper limit.\n        // Truncate at this space.\n        else { // index <= effectiveUpper\n            result.append(str.substring(0, index));\n            // Append appendToEnd because truncation at the space has occurred\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}