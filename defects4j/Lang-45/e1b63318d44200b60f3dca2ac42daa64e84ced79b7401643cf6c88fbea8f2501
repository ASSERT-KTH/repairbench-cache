{
    "generation": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // initial parameter checks\n    if (str == null) {\n        return null;\n    }\n    if (str.length() == 0) {\n        return StringUtils.EMPTY;\n    }\n\n    // if the lower value is greater than the length of the string,\n    // set to the length of the string\n    if (lower > str.length()) {\n        lower = str.length();\n    }\n\n    // if the upper value is -1 (i.e. no limit) or is greater\n    // than the length of the string, set to the length of the string\n    if (upper == -1 || upper > str.length()) {\n        upper = str.length();\n    }\n    // if upper is less than lower, raise it to lower\n    if (upper < lower) {\n        upper = lower;\n    }\n\n    // if both lower and upper are 0, special case: return \"\"\n    if (lower == 0 && upper == 0) {\n        return \"\";\n    }\n\n    StringBuffer result = new StringBuffer();\n\n    // When the string is empty after trimming off limits.\n    if (upper == 0 || lower == str.length()) {\n        return \"\";\n    }\n\n    int index = StringUtils.indexOf(str, \" \", lower);\n    if (index == -1 || index > upper) {\n        // Abbreviate at upper if upper is shorter\n        int endIdx = upper;\n        if (endIdx > str.length()) {\n            endIdx = str.length();\n        }\n        if (endIdx < 0) {\n            endIdx = 0;\n        }\n        result.append(str.substring(0, endIdx));\n        // only if abbreviation has occured do we append the appendToEnd value\n        if (endIdx != str.length()) {\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n    } else {\n        // Abbreviate at found space position\n        result.append(str.substring(0, index));\n        result.append(StringUtils.defaultString(appendToEnd));\n    }\n    return result.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}