{
    "generation": "import org.apache.commons.lang.StringUtils; // Assuming StringUtils is available\n\npublic class WordUtils {\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the end of the String. The upper limit can be specified to forcibly\n     * abbreviate a String.\n     * \n     * @param str         the string to be abbreviated. If null is passed, null is returned.\n     *                    If the empty String is passed, the empty string is returned.\n     * @param lower       the lower limit.\n     * @param upper       the upper limit; specify -1 if no limit is desired.\n     *                    If the upper limit is lower than the lower limit, it will be\n     *                    adjusted to be the same as the lower limit.\n     * @param appendToEnd String to be appended to the end of the abbreviated string.\n     *                    This is appended ONLY if the string was indeed abbreviated.\n     *                    The append does not count towards the lower or upper limits.\n     * @return the abbreviated String.\n     * @since 2.4\n     */\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // If the lower limit is already beyond the string's length,\n        // no abbreviation by finding a space after 'lower' can occur.\n        // In this case, the original string should be returned.\n        // This handles cases like abbreviate(\"0123456789\", 15, 20, null)\n        if (lower >= str.length()) {\n            return str;\n        }\n\n        // Adjust upper limit: if -1 or greater than string length, use string length.\n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n        // Adjust upper if it's less than lower (as per Javadoc)\n        // Note: This step can make 'upper' exceed 'str.length()' if 'lower' is large.\n        if (upper < lower) {\n            upper = lower;\n        }\n\n        // The effective upper limit for substring operations must not exceed str.length().\n        // This ensures StringIndexOutOfBoundsException is avoided.\n        int effectiveUpperForSubstring = Math.min(upper, str.length());\n\n        StringBuffer result = new StringBuffer();\n        // StringUtils.indexOf handles `lower` being >= str.length() gracefully by returning -1.\n        int index = StringUtils.indexOf(str, \" \", lower);\n\n        if (index == -1) {\n            // No space found after the lower limit.\n            // Abbreviate string by the effective upper limit.\n            result.append(str.substring(0, effectiveUpperForSubstring));\n            // Append if actual abbreviation (truncation) occurred.\n            if (effectiveUpperForSubstring < str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else if (index > effectiveUpperForSubstring) {\n            // A space was found, but it's beyond the effective upper limit.\n            // Abbreviate strictly by the effective upper limit.\n            result.append(str.substring(0, effectiveUpperForSubstring));\n            // In this case, abbreviation always occurs, so append.\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else {\n            // A space was found at or before the effective upper limit.\n            // Abbreviate to that space.\n            result.append(str.substring(0, index));\n            // In this case, abbreviation always occurs (unless index == str.length(), which is unlikely for a space).\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}