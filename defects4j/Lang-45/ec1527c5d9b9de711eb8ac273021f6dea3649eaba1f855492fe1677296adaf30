{
    "generation": "    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the end of the String. The upper limit can be specified to forcibly\n     * abbreviate a String.\n     * \n     * @param str         the string to be abbreviated. If null is passed, null is returned.\n     *                    If the empty String is passed, the empty string is returned.\n     * @param lower       the lower limit (minimum index to start abbreviation from, inclusive). Negative values treated as 0.\n     * @param upper       the upper limit (maximum index to abbreviate to, exclusive); specify -1 if no limit is desired.\n     *                    If the upper limit is lower than the lower limit, it will be\n     *                    adjusted to be the same as the lower limit.\n     * @param appendToEnd String to be appended to the end of the abbreviated string.\n     *                    This is appended ONLY if the string was indeed abbreviated.\n     *                    The append does not count towards the lower or upper limits.\n     * @return the abbreviated String.\n     * @since 2.4\n     */\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY; // Assuming StringUtils.EMPTY is defined elsewhere as \"\"\n        }\n\n        // ensure lower is not negative.\n        if (lower < 0) {\n            lower = 0;\n        }\n\n        // if the lower value is greater than the length of the string,\n        // set to the length of the string - prevents potential IndexOutOfBoundsException\n        // in StringUtils.indexOf(str, \" \", lower)\n        if (lower > str.length()) {\n            lower = str.length();\n        }\n        \n        // if the upper value is -1 (i.e. no limit) or is greater\n        // than the length of the string, set to the length of the string\n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n        // if upper is less than lower, raise it to lower\n        // This ensures that substring(0, upper) is valid after adjustments.\n        if (upper < lower) {\n            upper = lower;\n        }\n\n        StringBuffer result = new StringBuffer();\n        // Find the first space index at or after 'lower'.\n        int index = StringUtils.indexOf(str, \" \", lower); // Assuming StringUtils.indexOf handles start >= length by returning -1\n\n        if (index == -1) {\n            // No space found at or after lower limit.\n            // Abbreviate to upper limit.\n            result.append(str.substring(0, upper));\n            // Append the suffix if abbreviation happened (i.e. upper limit is less than original length).\n            if (upper != str.length()) {\n                result.append(StringUtils.defaultString(appendToEnd)); // Assuming StringUtils.defaultString handles null\n            }\n        } else if (index > upper) {\n            // A space was found, but it's beyond the upper limit.\n            // Abbreviate to the upper limit.\n            result.append(str.substring(0, upper));\n            // Append the suffix because we shortened based on upper limit.\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else {\n            // A space was found within the range [lower, upper].\n            // Abbreviate at the space.\n            result.append(str.substring(0, index));\n            // Append the suffix because we shortened based on the space found.\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        return result.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}