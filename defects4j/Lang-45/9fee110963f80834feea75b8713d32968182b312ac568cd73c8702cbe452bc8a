{
    "generation": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // initial parameter checks\n    if (str == null) {\n        return null;\n    }\n    if (str.length() == 0) {\n        return StringUtils.EMPTY;\n    }\n\n    // If lower is greater than str.length(), clamp to str.length()\n    if (lower > str.length()) {\n        lower = str.length();\n    }\n    // If upper is -1 (i.e. no limit) or is greater than str.length(), set to str.length()\n    if (upper == -1 || upper > str.length()) {\n        upper = str.length();\n    }\n    // If upper is less than lower, raise it to lower\n    if (upper < lower) {\n        upper = lower;\n    }\n\n    // Clamp lower and upper between 0 and str.length()\n    lower = Math.max(0, Math.min(lower, str.length()));\n    upper = Math.max(0, Math.min(upper, str.length()));\n\n    if (str.length() == 0 || upper == 0) {\n        return \"\";\n    }\n\n    StringBuffer result = new StringBuffer();\n\n    // Find the first space after 'lower'\n    int index = StringUtils.indexOf(str, \" \", lower);\n\n    if (index == -1 || index > upper) {\n        // space not found, or found after 'upper'\n        result.append(str.substring(0, upper));\n        if (upper != str.length()) {\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n    } else {\n        // space found before or equal upper\n        result.append(str.substring(0, index));\n        result.append(StringUtils.defaultString(appendToEnd));\n    }\n    return result.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}