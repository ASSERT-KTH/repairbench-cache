{
    "generation": "    /**\n     * Abbreviates a string nicely.\n     *\n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the end of the String. The upper limit can be specified to forcibly\n     * abbreviate a String.\n     *\n     * @param str         the string to be abbreviated. If null is passed, null is returned.\n     *                    If the empty String is passed, the empty string is returned.\n     * @param lower       the lower limit; negative values are treated as 0.\n     *                    If the lower limit is greater than the length of the string,\n     *                    the string is returned unchanged.\n     * @param upper       the upper limit; specify -1 if no limit is desired.\n     *                    If the upper limit is lower than the lower limit, it will be\n     *                    adjusted to be the same as the lower limit. The upper limit is\n     *                    constrained to be at most the length of the string.\n     * @param appendToEnd String to be appended to the end of the abbreviated string.\n     *                    This is appended ONLY if the string was indeed abbreviated.\n     *                    The append does not count towards the lower or upper limits.\n     * @return the abbreviated String.\n     * @since 2.4\n     */\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // Adjust lower bound\n        if (lower < 0) {\n            lower = 0;\n        }\n        // If lower bound is beyond the string length, return original string\n        // as we cannot find a space starting from there or abbreviate reasonably.\n        if (lower > str.length()) {\n             return str;\n        }\n\n        // Adjust upper bound\n        if (upper == -1 || upper > str.length()) {\n            upper = str.length(); // Clamp upper to string length\n        }\n        // If upper is less than lower, raise it to lower\n        if (upper < lower) {\n            // This adjustment happens after upper is clamped to str.length()\n            // and after lower is checked against str.length().\n            // Therefore, lower <= str.length(), and this assignment ensures\n            // upper <= str.length() as well.\n            upper = lower;\n        }\n\n        StringBuffer result = new StringBuffer();\n        // Find first space starting from the lower limit\n        int index = StringUtils.indexOf(str, \" \", lower);\n        int cutPoint;\n\n        if (index == -1) {\n            // No space found at or after lower, force cut at upper limit\n            cutPoint = upper;\n        } else {\n            // Space found at 'index' (where index >= lower)\n            // If the found space is beyond the upper limit, force cut at upper limit\n            if (index > upper) {\n                cutPoint = upper;\n            } else {\n                // Otherwise, the space is within bounds (lower <= index <= upper), cut at the space\n                cutPoint = index;\n            }\n        }\n\n        // Perform the cut using the determined cut point.\n        // The bounds checks above ensure 0 <= cutPoint <= str.length()\n        result.append(str.substring(0, cutPoint));\n\n        // Append the suffix ONLY if the string was actually abbreviated\n        // (i.e., the cutPoint is before the end of the original string)\n        if (cutPoint < str.length()) {\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n\n        return result.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}