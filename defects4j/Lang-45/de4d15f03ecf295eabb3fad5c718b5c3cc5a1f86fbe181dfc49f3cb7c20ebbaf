{
    "generation": "    /**\n     * Abbreviates a string nicely.\n     *\n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the end of the String. The upper limit can be specified to forcibly\n     * abbreviate a String.\n     *\n     * @param str         the string to be abbreviated. If null is passed, null is returned.\n     *                    If the empty String is passed, the empty string is returned.\n     * @param lower       the lower limit.\n     * @param upper       the upper limit; specify -1 if no limit is desired.\n     *                    If the upper limit is lower than the lower limit, it will be\n     *                    adjusted to be the same as the lower limit.\n     * @param appendToEnd String to be appended to the end of the abbreviated string.\n     *                    This is appended ONLY if the string was indeed abbreviated.\n     *                    The append does not count towards the lower or upper limits.\n     * @return the abbreviated String.\n     * @since 2.4\n     */\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        // Clamp lower to be within [0, str.length()]\n        if (lower < 0) {\n            lower = 0;\n        }\n        // If lower is greater than the string length, effectively no abbreviation\n        // can start there, and substring/indexOf might fail. Clamp it.\n        if (lower > str.length()) {\n            lower = str.length();\n        }\n\n        // Clamp upper to be within [0, str.length()] or -1.\n        // If upper == -1, it means no upper limit from the user's perspective,\n        // so internally, we treat it as str.length().\n        // If upper is negative (but not -1), treat as 0.\n        if (upper < 0 && upper != -1) {\n            upper = 0;\n        }\n        if (upper == -1 || upper > str.length()) {\n            upper = str.length();\n        }\n\n        // Ensure upper is not less than lower.\n        // Since both lower and upper are already clamped to str.length(),\n        // raising upper to lower will not exceed str.length().\n        if (upper < lower) {\n            upper = lower;\n        }\n\n        StringBuffer result = new StringBuffer();\n        int finalLength;\n\n        // Search for the first space after the lower limit\n        int index = StringUtils.indexOf(str, \" \", lower);\n\n        if (index == -1) {\n            // No space found after 'lower' limit\n            result.append(str.substring(0, upper));\n            finalLength = upper;\n        } else if (index > upper) {\n            // Space found, but it's beyond the 'upper' limit. Abbreviate at 'upper'.\n            result.append(str.substring(0, upper));\n            finalLength = upper;\n        } else {\n            // Space found within or at the 'upper' limit. Abbreviate at the space.\n            result.append(str.substring(0, index));\n            finalLength = index;\n        }\n\n        // Append appendToEnd only if the string was indeed abbreviated\n        // This means the final length (before appending 'appendToEnd') is less than the original string length.\n        if (finalLength < str.length()) {\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n\n        return result.toString();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}