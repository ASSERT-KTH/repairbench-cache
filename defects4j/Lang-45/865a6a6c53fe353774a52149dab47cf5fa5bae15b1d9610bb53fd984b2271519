{
    "generation": "import org.apache.commons.lang.StringUtils; // Assuming StringUtils is available\n\npublic class WordUtils {\n    /**\n     * Abbreviates a string nicely.\n     * \n     * This method searches for the first space after the lower limit and abbreviates\n     * the String there. It will also append any String passed as a parameter\n     * to the end of the String. The upper limit can be specified to forcibly\n     * abbreviate a String.\n     * \n     * @param str         the string to be abbreviated. If null is passed, null is returned.\n     *                    If the empty String is passed, the empty string is returned.\n     * @param lower       the lower limit.\n     * @param upper       the upper limit; specify -1 if no limit is desired.\n     *                    If the upper limit is lower than the lower limit, it will be\n     *                    adjusted to be the same as the lower limit.\n     * @param appendToEnd String to be appended to the end of the abbreviated string.\n     *                    This is appended ONLY if the string was indeed abbreviated.\n     *                    The append does not count towards the lower or upper limits.\n     * @return the abbreviated String.\n     * @since 2.4\n     */\n    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        int strLen = str.length();\n\n        // Clamp lower to be within [0, strLen]\n        lower = Math.max(lower, 0);\n        lower = Math.min(lower, strLen);\n\n        // Clamp upper:\n        // If -1, no limit, so use strLen.\n        // Otherwise, ensure it's not negative and not greater than strLen.\n        if (upper == -1) {\n            upper = strLen;\n        } else {\n            upper = Math.max(upper, 0);\n            upper = Math.min(upper, strLen);\n        }\n\n        // Ensure upper is at least lower (after all other clamping).\n        // This is important for cases where original lower was very high,\n        // leading to lower being clamped to strLen, and upper might still be less than that.\n        upper = Math.max(upper, lower);\n\n        StringBuffer result = new StringBuffer();\n        // Search for the first space from 'lower' onwards\n        int index = StringUtils.indexOf(str, \" \", lower);\n\n        // Determine the abbreviation point and append `appendToEnd` if abbreviated\n        if (index == -1 || index > upper) {\n            // Case 1: No space found from 'lower' onwards, OR space is beyond 'upper' limit.\n            // Abbreviate to 'upper' limit.\n            result.append(str.substring(0, upper));\n            // Append only if string was actually truncated (upper limit is less than original length)\n            if (upper < strLen) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else {\n            // Case 2: Space found within or at the 'upper' limit.\n            // Abbreviate to the space.\n            result.append(str.substring(0, index));\n            // Append only if string was actually truncated (abbreviated at space index)\n            // If a space was found, its index must be less than strLen, meaning it's an abbreviation.\n            if (index < strLen) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        }\n        return result.toString();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}