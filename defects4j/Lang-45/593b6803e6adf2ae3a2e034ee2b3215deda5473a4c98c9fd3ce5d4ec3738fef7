{
    "generation": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // initial parameter checks\n    if (str == null) {\n        return null;\n    }\n    if (str.length() == 0) {\n        return StringUtils.EMPTY;\n    }\n\n    // Adjust upper and lower limits\n    if (upper == -1 || upper > str.length()) {\n        upper = str.length();\n    }\n    if (upper < lower) {\n        upper = lower;\n    }\n    // Ensure upper doesn't exceed string length again (after previous adjustments)\n    if (upper > str.length()) {\n        upper = str.length();\n    }\n    // Ensure lower doesn't exceed string length\n    if (lower > str.length()) {\n        lower = str.length();\n    }\n\n    StringBuffer result = new StringBuffer();\n    int index = StringUtils.indexOf(str, \" \", lower);\n    if (index == -1) {\n        // If no space found after lower limit, abbreviate to upper limit\n        result.append(str.substring(0, Math.min(upper, str.length())));\n        // only if abbreviation has occurred do we append the appendToEnd value\n        if (upper < str.length()) {\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n    } else if (index > upper) {\n        // If space is beyond upper limit, abbreviate to upper limit\n        result.append(str.substring(0, upper));\n        result.append(StringUtils.defaultString(appendToEnd));\n    } else {\n        // Space found within acceptable range, abbreviate at space\n        result.append(str.substring(0, index));\n        if (index < str.length()) {  // only append if we actually abbreviated\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n    }\n    return result.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}