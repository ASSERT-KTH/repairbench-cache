{
    "generation": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    if (str == null) {\n        return null;\n    }\n    if (str.length() == 0) {\n        return StringUtils.EMPTY;\n    }\n\n    // Adjust upper and lower bounds\n    if (upper == -1 || upper > str.length()) {\n        upper = str.length();\n    }\n    if (upper < lower) {\n        upper = lower;\n    }\n    if (lower > str.length()) {\n        lower = str.length();\n    }\n\n    StringBuilder result = new StringBuilder();\n\n    // Special case: if lower >= str.length(), return full string without appendToEnd\n    if (lower >= str.length()) {\n        result.append(str);\n        return result.toString();\n    }\n\n    int index = StringUtils.indexOf(str, \" \", lower);\n\n    // Determine the cut-off index (endIndex) for substring\n    int endIndex;\n    boolean abbreviated = false;\n\n    if (index == -1) {\n        endIndex = upper;\n        if (endIndex < str.length()) {\n            abbreviated = true;\n        }\n    } else if (index > upper) {\n        endIndex = upper;\n        abbreviated = true;\n    } else {\n        endIndex = index;\n        abbreviated = true;\n    }\n\n    // Safe-guard to not exceed string length or go negative\n    endIndex = Math.max(0, Math.min(endIndex, str.length()));\n\n    result.append(str.substring(0, endIndex));\n\n    if (abbreviated) {\n        result.append(StringUtils.defaultString(appendToEnd));\n    }\n\n    return result.toString();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}