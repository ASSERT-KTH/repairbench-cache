{
    "generation": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // initial parameter checks\n    if (str == null) {\n        return null;\n    }\n    if (str.length() == 0) {\n        return StringUtils.EMPTY;\n    }\n\n    // if the lower value is greater than the length of the string,\n    // set to the length of the string\n    if (lower > str.length()) {\n        lower = str.length();\n    }\n    // if the upper value is -1 (i.e. no limit) or is greater\n    // than the length of the string, set to the length of the string\n    if (upper == -1 || upper > str.length()) {\n        upper = str.length();\n    }\n    // if upper is less than lower, raise it to lower\n    if (upper < lower) {\n        upper = lower;\n    }\n\n    // If upper is equal to lower, just return the substring (possibly empty), nothing to append\n    if (upper == lower) {\n        return str.substring(0, upper);\n    }\n\n    // If lower is already at the end, return rest (possibly empty)\n    if (lower == str.length()) {\n        return str;\n    }\n\n    int index = StringUtils.indexOf(str, \" \", lower);\n\n    int abbrevAt;\n    if (index == -1 || index > upper) {\n        abbrevAt = upper;\n    } else {\n        abbrevAt = index;\n    }\n\n    // Handle empty result cases\n    if (abbrevAt == 0) {\n        return \"\";\n    }\n\n    String result = str.substring(0, abbrevAt);\n\n    // Only append if abbreviation has occurred (i.e., didn't just return the whole string)\n    if (abbrevAt != str.length()) {\n        result += StringUtils.defaultString(appendToEnd);\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}