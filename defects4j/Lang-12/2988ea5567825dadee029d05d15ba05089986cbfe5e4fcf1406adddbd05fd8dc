{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single \n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array. (Note: Changed to IllegalArgumentException for robustness)\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, java.util.Random random) { // Fully qualify Random to avoid import issues\n        // --- Argument validation and early exit ---\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The provided chars array must not be empty.\");\n        }\n\n        // --- Determine the effective range (selectStart, selectEnd) ---\n        int selectStart = start;\n        int selectEnd = end;\n\n        if (chars == null) {\n            // Case 1: Selecting from full Unicode/ASCII character set\n            if (start == 0 && end == 0) {\n                if (!letters && !numbers) {\n                    selectEnd = Integer.MAX_VALUE; // All Unicode characters\n                } else {\n                    selectEnd = 'z' + 1; // ASCII printable characters, ' ' to 'z' (inclusive)\n                    selectStart = ' ';\n                }\n            }\n            // If start and end are not 0/0, they are used directly as character values (e.g., start='a', end='e').\n            // The range is [selectStart, selectEnd).\n        } else {\n            // Case 2: Selecting from a specific char array\n            if (start == 0 && end == 0) {\n                selectStart = 0; // Use entire array\n                selectEnd = chars.length;\n            } else {\n                // User provided specific indices. Validate them.\n                // start must be >= 0\n                // end must be <= chars.length\n                // (start < end will be caught by the gap check below)\n                if (start < 0 || end > chars.length) {\n                    throw new IllegalArgumentException(\"Array indices 'start' (\" + start + \") and 'end' (\" + end +\n                                                       \") are out of bounds for the provided chars array (length \" + chars.length + \").\");\n                }\n                // selectStart and selectEnd are already set to start and end\n            }\n        }\n\n        // --- Calculate gap and validate range validity ---\n        int gap = selectEnd - selectStart;\n        if (gap <= 0) {\n            String message = (chars == null) ?\n                \"The character range defined by 'start' (\" + start + \") and 'end' (\" + end + \") is invalid (start must be less than end).\" :\n                \"The array index range defined by 'start' (\" + start + \") and 'end' (\" + end +\n                \") is invalid for the provided chars array (length \" + (chars == null ? \"N/A\" : chars.length) + \") (start must be less than end).\";\n            throw new IllegalArgumentException(message);\n        }\n\n        // --- Generate random string ---\n        char[] buffer = new char[count];\n        int currentBufferIndex = count; // Start filling from the end of the buffer for correct surrogate pairing\n\n        while (currentBufferIndex-- != 0) { // Loop `count` times, decrementing currentBufferIndex from count-1 down to 0\n            char ch;\n            int selectedValue = random.nextInt(gap) + selectStart;\n\n            if (chars == null) {\n                ch = (char) selectedValue; // selectedValue is a character code\n            } else {\n                ch = chars[selectedValue]; // selectedValue is an array index\n            }\n\n            // --- Character filtering ---\n            boolean accepted = false;\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                accepted = true;\n            }\n\n            // --- Surrogate pair handling (fills buffer from right to left) ---\n            if (accepted) {\n                // Check for low surrogate\n                if (ch >= 0xDC00 && ch <= 0xDFFF) { // U+DC00 to U+DFFF (Low surrogate range)\n                    if (currentBufferIndex == 0) { // No space for high surrogate before it\n                        currentBufferIndex++; // Re-increment to retry this position\n                    } else {\n                        buffer[currentBufferIndex] = ch; // Place low surrogate\n                        currentBufferIndex--; // Move to previous position\n                        buffer[currentBufferIndex] = (char) (0xD800 + random.nextInt(0x80)); // Place random high surrogate (0xD800 to 0xD87F)\n                    }\n                }\n                // Check for private use high surrogate - skip this character\n                else if (ch >= 0xDB80 && ch <= 0xDBFF) { // U+DB80 to U+DBFF (Private Use High Surrogate)\n                    currentBufferIndex++; // Re-increment to retry this position\n                }\n                // Check for general high surrogate\n                else if (ch >= 0xD800 && ch <= 0xDB7F) { // U+D800 to U+DB7F (General High Surrogate, excluding private use)\n                    if (currentBufferIndex == 0) { // No space for low surrogate after it\n                        currentBufferIndex++; // Re-increment to retry this position\n                    } else {\n                        buffer[currentBufferIndex] = (char) (0xDC00 + random.nextInt(0x80)); // Place random low surrogate (0xDC00 to 0xDC7F)\n                        currentBufferIndex--; // Move to previous position\n                        buffer[currentBufferIndex] = ch; // Place high surrogate\n                    }\n                }\n                // All other characters\n                else {\n                    buffer[currentBufferIndex] = ch; // Regular character\n                }\n            } else {\n                currentBufferIndex++; // Character not accepted by filters, re-increment to retry this position\n            }\n        }\n        return new String(buffer);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}