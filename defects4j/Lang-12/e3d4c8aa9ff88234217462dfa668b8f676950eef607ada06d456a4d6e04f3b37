{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single\n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at (inclusive). If {@code chars} is not {@code null}, this is an index into the {@code chars} array.\n     * @param end  the position in set of chars to end before (exclusive). If {@code chars} is not {@code null}, this is an index into the {@code chars} array.\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array, or if {@code end > chars.length}.\n     * @throws IllegalArgumentException if {@code count} &lt; 0, the provided {@code chars} array is empty, or {@code end <= start}.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        // Check for empty chars array early, as it affects start/end logic and is an invalid argument.\n        if (chars != null && chars.length == 0) {\n             throw new IllegalArgumentException(\"The provided chars array is empty.\");\n        }\n\n        boolean isStartAndEndZero = start == 0 && end == 0;\n\n        if (chars == null) { // No specific character set provided, use character codes\n            if (isStartAndEndZero) {\n                if (!letters && !numbers) {\n                    // Original behavior: Use a very large range, effectively up to max char value due to casting later\n                    // This range does not correctly handle surrogate pairs or code points beyond 0xFFFF\n                    end = Integer.MAX_VALUE;\n                    start = 0;\n                } else {\n                    // Default printable ASCII range\n                    end = 'z' + 1;\n                    start = ' ';\n                }\n            } else if (end <= start) {\n                // Check for invalid range\n                throw new IllegalArgumentException(\n                        \"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n        } else { // Specific character set IS provided, start/end are indices\n            if (isStartAndEndZero) {\n                // Default to using the entire provided char array\n                start = 0; // Set start first\n                end = chars.length; // end is exclusive index\n            } else {\n                // Validate provided start/end against chars array bounds\n                if (end > chars.length) {\n                    throw new ArrayIndexOutOfBoundsException(\n                         \"Parameter end (\" + end + \") must not be greater than the length of chars (\" + chars.length + \")\");\n                }\n                // start is inclusive, end is exclusive. So start must be < end.\n                if (start >= end) { \n                     throw new IllegalArgumentException(\n                         \"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n                }\n                // start < 0 check is implicitly covered if start < end and end >= 0 (which holds if end <= chars.length)\n            }\n        }\n\n        char[] buffer = new char[count];\n        // Calculate gap *after* start/end are finalized. Represents number of choices.\n        int gap = end - start;\n\n        while (count-- != 0) {\n            int randomIndex; // Renamed from 'ch' in the original code where it was confusingly used for index/codepoint too\n            if (chars == null) {\n                // Generate a random integer within the range [start, end)\n                randomIndex = random.nextInt(gap) + start;\n                // Treat randomIndex as a potential character code point (though flawed due to cast and surrogate handling)\n            } else {\n                // Generate a random index within the range [start, end) for the chars array\n                randomIndex = random.nextInt(gap) + start;\n            }\n\n            char ch; // The character to potentially add to the buffer\n            if (chars == null) {\n                 // Cast the potential code point to char. This truncates supplementary characters.\n                 ch = (char) randomIndex;\n            } else {\n                 // Select character from the provided `chars` array using the generated index\n                 ch = chars[randomIndex]; // This is now safe due to earlier checks and corrected range logic\n            }\n\n\n            // Apply filters (letters/numbers) based on the generated character 'ch'\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) { // If no filters, always include\n\n                if (chars == null && ch >= 56320 && ch <= 57343) { // Low surrogate generated directly when chars is null\n                    if (count == 0) { // Not enough space left to insert a pair\n                        count++; // Retry to get a different character\n                    } else {\n                        // Insert surrogate pair (chosen low surrogate + random high surrogate)\n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = (char) (55296 + random.nextInt(128)); // Random high surrogate\n                    }\n                } else if (chars == null && ch >= 55296 && ch <= 56191) { // High surrogate generated directly when chars is null\n                    if (count == 0) { // Not enough space left to insert a pair\n                        count++; // Retry\n                    } else {\n                        // Insert surrogate pair (chosen high surrogate + random low surrogate)\n                        buffer[count] = (char) (56320 + random.nextInt(128)); // Random low surrogate\n                        count--;\n                        buffer[count] = ch;\n                    }\n                } else if (chars == null && ch >= 56192 && ch <= 56319) { // Private high surrogate generated directly when chars is null\n                    // Skip and retry - these should not be generated alone\n                    count++;\n                } else {\n                    // Character is valid (BMP, or from chars array, or surrogate pair handled above)\n                    // or it's a surrogate picked from the chars array (which is allowed)\n                    buffer[count] = ch;\n                }\n            } else {\n                // Character did not meet letters/numbers criteria, retry\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}