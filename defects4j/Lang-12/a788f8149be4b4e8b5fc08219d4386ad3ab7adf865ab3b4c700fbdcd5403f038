{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single \n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n\n        int effectiveStart = start;\n        int effectiveEnd = end;\n\n        if (chars == null) {\n            // If no character set is provided, 'start' and 'end' refer to character values.\n            if (effectiveStart == 0 && effectiveEnd == 0) {\n                if (!letters && !numbers) {\n                    effectiveEnd = Integer.MAX_VALUE; // All possible character values\n                } else {\n                    effectiveStart = ' '; // ASCII printable from space\n                    effectiveEnd = 'z' + 1; // to 'z' (exclusive)\n                }\n            }\n        } else {\n            // If a character array is provided, 'start' and 'end' refer to indices within that array.\n            // The special (0,0) handling for character values does NOT apply here.\n            if (chars.length == 0) {\n                throw new IllegalArgumentException(\"The provided chars array must not be empty.\");\n            }\n            // For a non-null chars array, (0,0) start/end often means \"use the entire array\".\n            if (effectiveStart == 0 && effectiveEnd == 0) {\n                effectiveEnd = chars.length; // Use the entire array range [0, chars.length-1]\n            } else {\n                // Validate provided indices\n                if (effectiveStart < 0 || effectiveStart >= chars.length) {\n                    throw new IllegalArgumentException(\"Parameter 'start' (\" + effectiveStart + \") is out of bounds for 'chars' array of length \" + chars.length);\n                }\n                if (effectiveEnd < 0 || effectiveEnd > chars.length) {\n                    throw new IllegalArgumentException(\"Parameter 'end' (\" + effectiveEnd + \") is out of bounds for 'chars' array of length \" + chars.length);\n                }\n                if (effectiveStart >= effectiveEnd) {\n                    throw new IllegalArgumentException(\"Parameter 'start' (\" + effectiveStart + \") must be less than 'end' (\" + effectiveEnd + \").\");\n                }\n            }\n        }\n        \n        int gap = effectiveEnd - effectiveStart;\n\n        if (gap <= 0) { // This check covers cases where (effectiveStart >= effectiveEnd)\n            throw new IllegalArgumentException(\"The range ('end' - 'start') must be positive.\");\n        }\n\n        char[] buffer = new char[count];\n\n        // The loop counter `count` is decremented inside the loop and also acts as the current buffer index.\n        // It iterates from `initialCount - 1` down to `0`, filling the buffer from right to left.\n        while (count-- != 0) { \n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt(gap) + effectiveStart);\n            } else {\n                ch = chars[random.nextInt(gap) + effectiveStart];\n            }\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                if(ch >= 56320 && ch <= 57343) { // low surrogate\n                    if(count == 0) { // last character position, cannot add high surrogate\n                        count++; // Re-increment count to retry this position\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] = ch; // Store low surrogate\n                        count--; // Decrement count for the high surrogate\n                        buffer[count] = (char) (55296 + random.nextInt(128)); // Store high surrogate\n                    }\n                } else if(ch >= 55296 && ch <= 56191) { // high surrogate\n                    if(count == 0) { // last character position, cannot add low surrogate\n                        count++; // Re-increment count to retry this position\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] = (char) (56320 + random.nextInt(128)); // Store low surrogate\n                        count--; // Decrement count for the high surrogate\n                        buffer[count] = ch; // Store high surrogate\n                    }\n                } else if(ch >= 56192 && ch <= 56319) { // private high surrogate\n                    // private high surrogate, no effing clue, so skip it\n                    count++; // Re-increment count to retry this position\n                } else {\n                    buffer[count] = ch;\n                }\n            } else {\n                count++; // Re-increment count to retry this position (character did not match criteria)\n            }\n        }\n        return new String(buffer);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}