{
    "generation": "public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                            char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    } else if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n\n    if (start == 0 && end == 0) {\n        if (!letters && !numbers) {\n            start = 0;\n            end = Integer.MAX_VALUE;\n        } else {\n            start = ' ';\n            end = 'z' + 1;\n        }\n    }\n\n    char[] buffer = new char[count];\n    int gap = end - start;\n    int index = 0;\n\n    while (index < count) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            if (gap > chars.length) {\n                gap = chars.length;\n            }\n            ch = chars[random.nextInt(gap)];\n        }\n        if (letters && !Character.isLetter(ch) ||\n                numbers && !Character.isDigit(ch)) {\n            continue; // Skip if not matching letters or numbers\n        }\n        if (Character.isLowSurrogate(ch)) {\n            if (index + 1 >= count) {\n                // Not enough space for the high surrogate\n                break;\n            }\n            buffer[index++] = ch;\n            // Add the corresponding high surrogate\n            buffer[index++] = (char) (55296 + (ch - 56320));\n        } else if (Character.isHighSurrogate(ch)) {\n            if (index + 1 >= count) {\n                // Not enough space for the low surrogate\n                break;\n            }\n            // Add the corresponding low surrogate first\n            buffer[index++] = (char) (56320 + (ch - 55296));\n            buffer[index++] = ch;\n        } else {\n            buffer[index++] = ch;\n        }\n    }\n\n    return new String(buffer);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}