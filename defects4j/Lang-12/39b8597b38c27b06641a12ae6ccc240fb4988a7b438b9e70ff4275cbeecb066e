{
    "generation": "import java.util.Random;\n\n/**\n * Contains the fixed random function.\n */\nclass FixedRandomStringUtils {\n\n    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If {@code start} and {@code end} are both {@code 0},\n     * {@code start} and {@code end} are set based on the values of {@code letters} and {@code numbers}:\n     * <ul>\n     *  <li>If {@code letters} and {@code numbers} are both {@code false},\n     *      {@code start} and {@code end} are set to {@code 0} and {@code Integer.MAX_VALUE} (exclusive) respectively.\n     *      Note: This range is problematic for generating valid Unicode characters and primarily useful for generating arbitrary {@code char} values.\n     *  </li>\n     *  <li>Otherwise, {@code start} and {@code end} are set to {@code ' '} and {@code 'z' + 1} (exclusive) respectively, covering ASCII printable characters.</li>\n     * </ul>\n     * </p>\n     *\n     * <p>If {@code chars} is not {@code null}, the characters are chosen from\n     * the provided array, using the range defined by {@code start} (inclusive)\n     * and {@code end} (exclusive). If {@code start} and {@code end} are both {@code 0}\n     * in this case, the entire {@code chars} array is used ({@code start=0}, {@code end=chars.length}).\n     * </p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single\n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position to start picking chars from (inclusive).\n     *               If {@code chars} is {@code null}, this is the starting Unicode code point (when cast to {@code char}).\n     *               If {@code chars} is not {@code null}, this is the starting index into the array.\n     * @param end  the position to end picking chars before (exclusive).\n     *             If {@code chars} is {@code null}, this is the ending Unicode code point (when cast to {@code char}).\n     *             If {@code chars} is not {@code null}, this is the ending index into the array.\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *               If {@code null}, then the range from {@code start} to {@code end} is used.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if {@code start < 0} or {@code end > chars.length} when {@code chars} is not {@code null}.\n     * @throws IllegalArgumentException if {@code count < 0}, the provided {@code chars} array is empty,\n     *                                  or {@code end <= start}.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        }\n        if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The provided chars array is empty.\");\n        }\n\n        int effectiveStart = start;\n        int effectiveEnd = end;\n\n        if (effectiveStart == 0 && effectiveEnd == 0) {\n            if (chars != null) {\n                // If chars provided and start/end are 0, use the full array\n                effectiveEnd = chars.length;\n            } else {\n                // If chars is null and start/end are 0, adjust based on letters/numbers\n                if (!letters && !numbers) {\n                    // Using Integer.MAX_VALUE as the end code point is problematic for Unicode correctness,\n                    // but preserves the original behavior. Values > 0xFFFF are truncated when cast to char.\n                    effectiveEnd = Integer.MAX_VALUE;\n                    effectiveStart = 0;\n                } else {\n                    effectiveEnd = 'z' + 1; // exclusive end ('{' after 'z')\n                    effectiveStart = ' '; // inclusive start (space)\n                }\n            }\n        } else if (effectiveEnd <= effectiveStart) {\n            // Ensure the range is valid, even if start/end were not initially 0.\n            throw new IllegalArgumentException(\n               String.format(\"Parameter end (%d) must be greater than start (%d)\", effectiveEnd, effectiveStart));\n        }\n\n        // Validate indices relative to chars array if applicable\n        if (chars != null) {\n             // Check end boundary (exclusive index)\n             if (effectiveEnd > chars.length) {\n                  throw new ArrayIndexOutOfBoundsException(\n                    String.format(\"Parameter end (%d) must not exceed the length of chars (%d)\", effectiveEnd, chars.length));\n             }\n             // Check start boundary (inclusive index)\n             if (effectiveStart < 0) {\n                  throw new ArrayIndexOutOfBoundsException(\n                    String.format(\"Parameter start (%d) must not be negative.\", effectiveStart));\n             }\n        }\n\n        char[] buffer = new char[count];\n        // Calculate the number of choices available\n        int gap = effectiveEnd - effectiveStart;\n\n        // Decrement count before use in the loop, serves as the index from buffer end\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                // Select a random code point (int) within the range [start, end)\n                int codePoint = random.nextInt(gap) + effectiveStart;\n                // Cast to char - this truncates code points outside the Basic Multilingual Plane (BMP).\n                // Surrogate handling below attempts to fix pairs for some generated surrogate chars.\n                ch = (char) codePoint;\n            } else {\n                // Select a random index within the range [start, end)\n                int randomIndex = random.nextInt(gap) + effectiveStart;\n                // Select the character from the array\n                ch = chars[randomIndex];\n            }\n\n            // Filter character and handle surrogates (using original logic)\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) // Accept if no filter or if filters pass\n            {\n                // Original surrogate handling logic:\n                // Applied regardless of whether char came from `chars` array or generated code point.\n                // Attempts to form valid surrogate pairs if a surrogate character is chosen.\n                // Uses a limited range for generating the paired surrogate (nextInt(128)).\n                if (ch >= 56320 && ch <= 57343) { // Low surrogate (DC00-DFFF)\n                    if (count == 0) { // Not enough room left in buffer for preceding high surrogate\n                        count++; // Effectively retry extracting a character for this position\n                    } else {\n                        buffer[count] = ch; // Place low surrogate\n                        count--; // Move to the previous spot for the high surrogate\n                        // Generate a high surrogate (D800\u2013DBFF). Original used nextInt(128) -> D800-D87F only.\n                        buffer[count] = (char) (55296 + random.nextInt(128));\n                    }\n                } else if (ch >= 55296 && ch <= 56191) { // High surrogate (D800-DB7F) (Excludes private use high surrogates)\n                    if (count == 0) { // Not enough room left for subsequent low surrogate\n                        count++; // Retry\n                    } else {\n                        // Generate a low surrogate (DC00-DFFF). Original used nextInt(128) -> DC00-DC7F only.\n                        buffer[count] = (char) (56320 + random.nextInt(128));\n                        count--; // Move to the previous spot for the high surrogate\n                        buffer[count] = ch; // Place high surrogate\n                    }\n                } else if (ch >= 56192 && ch <= 56319) { // Private Use High surrogate (DB80-DBFF)\n                    // Original code explicitly skips these by retrying.\n                    count++; // Retry\n                } else { // BMP character (or potentially a surrogate from the chars array not handled above)\n                    buffer[count] = ch; // Place the character\n                }\n            } else { // Character rejected by letters/numbers filter\n                count++; // Retry\n            }\n        }\n        return new String(buffer);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}