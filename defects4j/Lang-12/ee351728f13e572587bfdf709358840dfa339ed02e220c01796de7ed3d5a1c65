{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single \n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n\n        int actualStart = start;\n        int actualEnd = end;\n\n        if (chars == null) { // No specific character set, use ASCII/Unicode ranges\n            if (start == 0 && end == 0) {\n                if (!letters && !numbers) {\n                    actualEnd = Integer.MAX_VALUE; // All possible chars\n                    actualStart = 0;\n                } else {\n                    actualEnd = 'z' + 1; // Printable ASCII ' ' to 'z'\n                    actualStart = ' ';\n                }\n            }\n        } else { // Specific character set provided, start and end are indices into this array\n            if (chars.length == 0) {\n                throw new IllegalArgumentException(\"The chars array must not be empty.\");\n            }\n            if (start == 0 && end == 0) {\n                actualStart = 0;\n                actualEnd = chars.length;\n            } else {\n                // Validate provided start/end are valid indices for 'chars' array.\n                if (start < 0 || end > chars.length || start > end) {\n                    throw new IllegalArgumentException(\"Invalid 'start' or 'end' parameters for the provided 'chars' array. \"\n                        + \"Start: \" + start + \", End: \" + end + \", Chars array length: \" + chars.length);\n                }\n            }\n        }\n        \n        int gap = actualEnd - actualStart;\n\n        // Ensure gap is positive if count > 0, otherwise random.nextInt(0) will throw IAE.\n        if (gap <= 0 && count > 0) {\n             throw new IllegalArgumentException(\"There are no usable characters in the character range [\" +\n                 Integer.toString(actualStart) + \", \" + Integer.toString(actualEnd) + \")\");\n        }\n\n        char[] buffer = new char[count];\n\n        // The original loop iterates backwards, filling buffer from end to start.\n        // The `count` variable acts as the remaining characters to fill, and also implicitly\n        // as the index in the buffer (offset by 1 due to `count--`).\n        while (count != 0) {\n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt(gap) + actualStart);\n            } else {\n                ch = chars[random.nextInt(gap) + actualStart];\n            }\n            \n            // Check character validity based on letters/numbers filters\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || (!letters && !numbers)) { // If no filters, any char is fine\n                \n                // Handle Unicode surrogate pairs\n                // High surrogates: U+D800 to U+DBFF (55296 to 56319)\n                // Low surrogates:  U+DC00 to U+DFFF (56320 to 57343)\n                \n                if (ch >= 56320 && ch <= 57343) { // Low surrogate\n                    if (count == 0) { // If it's the last character, discard it to avoid half-pair\n                        count++; // Re-increment count to retry this position\n                    } else {\n                        // Place low surrogate at current position, then a random high surrogate before it\n                        buffer[--count] = ch; // Current char goes at `count-1`\n                        buffer[--count] = (char) (55296 + random.nextInt(128)); // High surrogate goes at `count-2`\n                    }\n                } else if (ch >= 55296 && ch <= 56319) { // High surrogate (fixed upper bound)\n                    if (count == 0) { // If it's the last character, discard it\n                        count++; // Re-increment count to retry this position\n                    } else {\n                        // Place a random low surrogate at current position, then high surrogate before it\n                        buffer[--count] = (char) (56320 + random.nextInt(128)); // Low surrogate at `count-1`\n                        buffer[--count] = ch; // High surrogate at `count-2`\n                    }\n                } else if (ch >= 56192 && ch <= 56319) { // Private Use Area High Surrogates (U+DB80 to U+DBFF), skip them.\n                    // This block captures the end of the high surrogate range.\n                    // It should probably be combined with the previous one, but given the original code's structure,\n                    // we'll maintain it and assume 'private high surrogate' means it's not handled as a pair.\n                    // The bug was in the previous high surrogate range, this one's range is correct (DB80 to DBFF),\n                    // but it's part of the broader high surrogate range.\n                    // For now, mirroring original behavior of skipping these specific chars.\n                    count++; // Re-increment count to retry this position\n                } else {\n                    buffer[--count] = ch; // Place char at current position\n                }\n            } else {\n                count++; // Character didn't pass filter, re-increment count to retry this position\n            }\n        }\n        return new String(buffer);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}