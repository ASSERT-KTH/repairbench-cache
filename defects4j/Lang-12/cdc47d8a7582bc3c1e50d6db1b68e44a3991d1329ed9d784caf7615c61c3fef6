{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single\n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at (inclusive). If {@code chars} is not specified, this refers to the Unicode code point range. If {@code chars} is specified, this refers to an index into the {@code chars} array. Ignored if {@code 0}.\n     * @param end  the position in set of chars to end before (exclusive). If {@code chars} is not specified, this refers to the Unicode code point range. If {@code chars} is specified, this refers to an index into the {@code chars} array. Ignored if {@code 0}.\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars within the specified range.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array. (Note: This exception condition seems incorrect based on usage, the check is usually just for negative indices or indices >= length)\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty, or {@code end <= start} when {@code chars} is null.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The provided chars array is empty.\");\n        }\n\n        // Calculate effective start and end based on parameters, only if chars is null\n        if (chars == null) {\n            if (start == 0 && end == 0) {\n                if (!letters && !numbers) {\n                    // Full Unicode range\n                    end = Integer.MAX_VALUE;\n                } else {\n                    // Default printable ASCII\n                    end = 'z' + 1;\n                    start = ' ';\n                }\n            } else if (end <= start) {\n                 // Validate range if provided\n                 throw new IllegalArgumentException(\n                     \"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n        }\n\n        char[] buffer = new char[count];\n        int gap = (chars == null) ? end - start : 0; // Calculate gap for range selection only if chars is null\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                // Select a character code point within the range [start, end)\n                 // The check end <= start above should prevent gap <= 0\n                 ch = (char) (random.nextInt(gap) + start);\n            } else {\n                // Select a character from the provided array 'chars'\n                // Ignore start/end parameters when selecting from 'chars' array directly\n                ch = chars[random.nextInt(chars.length)];\n            }\n\n            // Apply filters (letters/numbers) regardless of the source\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n\n                // Surrogate handling (copied from original logic)\n                if(ch >= 56320 && ch <= 57343) { // Low surrogate\n                    if(count == 0) { // Not enough space left for the required high surrogate\n                        count++; // Retry to find a different character\n                    } else {\n                        // Insert high surrogate before the low surrogate\n                        buffer[count] = ch; // Put low surrogate in current position\n                        count--; // Decrement count again because we're adding a pair\n                        buffer[count] = (char) (55296 + random.nextInt(128)); // Add high surrogate in preceding position\n                    }\n                } else if(ch >= 55296 && ch <= 56191) { // High surrogate\n                    if(count == 0) { // Not enough space left for the required low surrogate\n                        count++; // Retry\n                    } else {\n                        // Insert low surrogate after the high surrogate\n                        buffer[count] = (char) (56320 + random.nextInt(128)); // Add low surrogate in current position\n                        count--; // Decrement count again\n                        buffer[count] = ch; // Add high surrogate in preceding position\n                    }\n                } else if(ch >= 56192 && ch <= 56319) { // Private high surrogate\n                    // Skip / Retry\n                    count++;\n                } else { // Normal character (or outside surrogate pair handling range)\n                    buffer[count] = ch; // Add selected char to buffer\n                }\n            } else {\n                // Character did not meet letter/number criteria, retry\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}