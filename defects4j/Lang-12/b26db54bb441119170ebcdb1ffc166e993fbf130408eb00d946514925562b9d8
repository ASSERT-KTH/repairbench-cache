{
    "generation": "public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                            char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    }\n    if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n\n    // If no characters array was provided, use the default ranges.\n    if (chars == null) {\n        if (start == 0 && end == 0) {\n            if (!letters && !numbers) {\n                start = 0;\n                end = Integer.MAX_VALUE;\n            } else {\n                start = ' ';\n                end = 'z' + 1;\n            }\n        }\n    } else {\n        // If a custom char array is provided and start/end are not specified,\n        // use the entire array.\n        if (start == 0 && end == 0) {\n            start = 0;\n            end = chars.length;\n        }\n        if (start < 0 || end > chars.length) {\n            throw new IllegalArgumentException(\"The chars array does not have enough characters\");\n        }\n    }\n\n    int gap = end - start;\n    if (gap <= 0) {\n        throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n    }\n    \n    char[] buffer = new char[count];\n    int i = 0;\n    while (i < count) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        // Accept the character if it meets the letter/digit criteria.\n        if ((letters && Character.isLetter(ch)) ||\n            (numbers && Character.isDigit(ch)) ||\n            (!letters && !numbers)) {\n            \n            // Handle surrogate pairs to ensure valid output.\n            if (ch >= 56320 && ch <= 57343) { // Low surrogate range.\n                if (i == count - 1) {\n                    continue; // Not enough room for a surrogate pair.\n                }\n                // Prepend a high surrogate to form a valid pair.\n                buffer[i++] = (char) (55296 + random.nextInt(128));\n                buffer[i++] = ch;\n            } else if (ch >= 55296 && ch <= 56191) { // High surrogate (lower part).\n                if (i == count - 1) {\n                    continue; // Not enough room.\n                }\n                buffer[i++] = ch;\n                buffer[i++] = (char) (56320 + random.nextInt(128));\n            } else if (ch >= 56192 && ch <= 56319) {\n                // This part of the high surrogate range is skipped.\n                continue;\n            } else {\n                buffer[i++] = ch;\n            }\n        }\n        // If the character doesn't meet the criteria, try again (without incrementing i).\n    }\n    return new String(buffer);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}