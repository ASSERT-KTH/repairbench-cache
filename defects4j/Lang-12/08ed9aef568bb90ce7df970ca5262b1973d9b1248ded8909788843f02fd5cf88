{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single\n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at (inclusive). If {@code chars} is not {@code null}, this is an index into the array.\n     * @param end  the position in set of chars to end before (exclusive). If {@code chars} is not {@code null}, this is an index into the array.\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars within the range defined by {@code start} and {@code end}.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start)} characters in the set array, or if {@code start} or {@code end} are out of bounds.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        // This validation needs to happen *before* the start/end adjustments\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        int effectiveStart = start;\n        int effectiveEnd = end;\n        int gap;\n\n        if (chars == null) {\n            // Using character codes range\n            if (start == 0 && end == 0) {\n                if (!letters && !numbers) {\n                    // Original code used Integer.MAX_VALUE, let's retain this, assuming it intends a wide range of char values\n                    effectiveStart = 0;\n                    effectiveEnd = Integer.MAX_VALUE;\n                } else {\n                    effectiveStart = ' '; // 32\n                    effectiveEnd = 'z' + 1; // 123\n                }\n            } else {\n                // Use provided range directly\n                effectiveStart = start;\n                effectiveEnd = end;\n            }\n            // Check for invalid range that would cause random.nextInt to fail\n             if (effectiveStart >= effectiveEnd) {\n                 throw new IllegalArgumentException(\"Parameter end (\" + effectiveEnd + \") must be greater than start (\" + effectiveStart + \")\");\n             }\n             gap = effectiveEnd - effectiveStart;\n\n        } else {\n            // Using index range within the provided chars array\n            if (start == 0 && end == 0) {\n                // Default range: use the entire chars array\n                effectiveStart = 0;\n                effectiveEnd = chars.length;\n            } else {\n                // Use provided start/end as indices, validate them\n                effectiveStart = start;\n                effectiveEnd = end;\n                if (effectiveEnd > chars.length) {\n                    throw new ArrayIndexOutOfBoundsException(\"Parameter end (\" + effectiveEnd + \") must not be greater than chars.length (\" + chars.length + \")\");\n                }\n                if (effectiveStart < 0) {\n                    throw new ArrayIndexOutOfBoundsException(\"Parameter start (\" + effectiveStart + \") must not be negative.\");\n                }\n                if (effectiveStart >= effectiveEnd) {\n                    throw new IllegalArgumentException(\"Parameter end (\" + effectiveEnd + \") must be greater than start (\" + effectiveStart + \")\");\n                }\n            }\n            gap = effectiveEnd - effectiveStart;\n        }\n\n\n        char[] buffer = new char[count];\n\n        // The loop fills the buffer backwards, from count-1 down to 0\n        // count is decremented *before* each iteration check\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                int codePoint = random.nextInt(gap) + effectiveStart;\n                ch = (char) codePoint; // Cast potentially loses information for supplementary characters\n            } else {\n                int index = random.nextInt(gap) + effectiveStart;\n                ch = chars[index];\n            }\n\n            // Filter character\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n\n                // Surrogate pair handling logic (original logic preserved)\n                if(ch >= 56320 && ch <= 57343) { // low surrogate\n                    if(count == 0) { // Not enough room left for companion high surrogate\n                        count++; // Retry this iteration\n                    } else {\n                        // Low surrogate generated, insert a matching high surrogate before it\n                        buffer[count] = ch; // Place low surrogate at current index (e.g., index 1)\n                        count--; // Move to the previous index (e.g., index 0)\n                        buffer[count] = (char) (55296 + random.nextInt(128)); // Place random high surrogate there\n                    }\n                } else if(ch >= 55296 && ch <= 56191) { // high surrogate\n                    if(count == 0) { // Not enough room left for companion low surrogate\n                        count++; // Retry this iteration\n                    } else {\n                        // High surrogate generated, insert a matching low surrogate after it (logic seems reversed in placement)\n                        // buffer[count] = low surrogate, buffer[count-1] = high surrogate\n                        buffer[count] = (char) (56320 + random.nextInt(128)); // Place random low surrogate here (current index, e.g. index 1)\n                        count--; // Move to previous index (e.g. index 0)\n                        buffer[count] = ch; // Place high surrogate there (index 0)\n                        // This correctly forms the pair <high><low> at indices [count-1, count] relative to the start of the iteration\n                    }\n                } else if(ch >= 56192 && ch <= 56319) { // Private Use Area high surrogate\n                    // Skip PUA high surrogates as they cannot form valid pairs here\n                    count++; // Retry this iteration\n                } else {\n                    // Normal character (BMP, not a surrogate)\n                    buffer[count] = ch; // Place character at current index\n                }\n            } else {\n                // Character did not meet letters/numbers criteria, retry\n                count++; // Counteract the count-- in the while condition\n            }\n        }\n        return new String(buffer);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}