{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single \n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n\n        // If a character array is provided, it must not be empty.\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty.\");\n        }\n\n        // Handle default start and end values (0, 0)\n        if (start == 0 && end == 0) {\n            if (chars != null) {\n                // If a character array is provided, and start/end are 0,\n                // it implies the whole array should be used.\n                // So, start remains 0, and end becomes the length of the array.\n                end = chars.length;\n            } else {\n                // If no character array is provided, and start/end are 0,\n                // it means to use default ASCII printable characters or all characters.\n                if (!letters && !numbers) {\n                    end = Integer.MAX_VALUE; // Use all possible Unicode characters\n                } else {\n                    end = 'z' + 1; // ASCII printable range, exclusive end (' ' to 'z')\n                    start = ' ';   // ASCII printable range, inclusive start\n                }\n            }\n        }\n\n        char[] buffer = new char[count];\n        int gap = end - start;\n\n        // If gap <= 0 (e.g., start >= end), Random.nextInt(gap) will throw an IllegalArgumentException.\n        // The existing logic implicitly relies on this. The primary bug was an AIOOBE\n        // when `chars` was provided and `gap` was too large because `end` was `Integer.MAX_VALUE`.\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                // When 'chars' is null, 'start' and 'end' define actual character values.\n                ch = (char) (random.nextInt(gap) + start);\n            } else {\n                // When 'chars' is not null, 'start' and 'end' define indices into the 'chars' array.\n                // The fix ensures `gap` is valid (e.g., `chars.length` when start=0, end=0).\n                ch = chars[random.nextInt(gap) + start];\n            }\n\n            // Apply character filtering and handle surrogate pairs\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) { // If both letters and numbers are false, no filtering is applied.\n                if(ch >= 56320 && ch <= 57343) { // Low surrogate (second part of a pair, U+DC00 to U+DFFF)\n                    if(count == 0) {\n                        // Cannot place a low surrogate at buffer[0] if it needs a high surrogate before it.\n                        // Revert count, effectively skipping this char and re-trying to fill the position.\n                        count++;\n                    } else {\n                        // Place low surrogate at current position (buffer[count])\n                        buffer[count] = ch;\n                        count--; // Move to previous index for the high surrogate\n                        // Generate and place a random high surrogate before the low surrogate\n                        buffer[count] = (char) (55296 + random.nextInt(128)); // U+D800 to U+DB7F (valid high surrogate range)\n                    }\n                } else if(ch >= 55296 && ch <= 56191) { // High surrogate (first part of a pair, U+D800 to U+DBFF)\n                    if(count == 0) {\n                        // Cannot place a high surrogate at buffer[0] if it needs a low surrogate after it and we are building backwards.\n                        // Revert count, effectively skipping this char and re-trying to fill the position.\n                        count++;\n                    } else {\n                        // Place a random low surrogate at current position (buffer[count])\n                        buffer[count] = (char) (56320 + random.nextInt(128)); // U+DC00 to U+DFFF (valid low surrogate range)\n                        count--; // Move to previous index for the high surrogate\n                        // Place the high surrogate before the low surrogate\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) { // Private use high surrogate (U+DB80 to U+DBFF)\n                    // Private high surrogates are skipped.\n                    // Revert count, effectively skipping this char and re-trying to fill the position.\n                    count++;\n                } else {\n                    buffer[count] = ch; // Regular character\n                }\n            } else {\n                // Character does not match the filtering criteria (letters/numbers).\n                // Revert count, effectively skipping this char and re-trying to fill the position.\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}