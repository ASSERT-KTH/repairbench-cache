{
    "generation": "public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                            char[] chars, Random random) {\n    if (count == 0) {\n        return \"\";\n    }\n    if (count < 0) {\n        throw new IllegalArgumentException(\n            \"Requested random string length \" + count + \" is less than 0.\"\n        );\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty.\");\n    }\n    /*\n     * If no start/end defined, set up defaults:\n     *  - when a char array is provided, use its full range\n     *  - when neither letters nor numbers requested, use full char range\n     *  - otherwise use ASCII printable (' ' to 'z')\n     */\n    if (start == 0 && end == 0) {\n        if (chars != null) {\n            end = chars.length;\n        } else if (!letters && !numbers) {\n            end = Integer.MAX_VALUE;\n        } else {\n            start = ' ';\n            end = 'z' + 1;\n        }\n    }\n    char[] buffer = new char[count];\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(gap) + start];\n        }\n        if ((letters && Character.isLetter(ch))\n            || (numbers && Character.isDigit(ch))\n            || (!letters && !numbers)) {\n\n            // handle surrogate pairs correctly\n            if (ch >= 0xDC00 && ch <= 0xDFFF) {            // low surrogate range\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                    count--;\n                    buffer[count] = (char) (0xD800 + random.nextInt(0x80));\n                }\n            } else if (ch >= 0xD800 && ch <= 0xDBFF) {     // high surrogate range\n                if (count == 0) {\n                    count++;\n                } else {\n                    buffer[count] = (char) (0xDC00 + random.nextInt(0x80));\n                    count--;\n                    buffer[count] = ch;\n                }\n            } else if (ch >= 0xDB80 && ch <= 0xDBBF) {     // private use high surrogate\n                count++;\n            } else {\n                buffer[count] = ch;\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}