{
    "generation": "    /**\n     * <p>Creates a random string based on a variety of options, using\n     * supplied source of randomness.</p>\n     *\n     * <p>If start and end are both {@code 0}, start and end are set\n     * to {@code ' '} and {@code 'z'}, the ASCII printable\n     * characters, will be used, unless letters and numbers are both\n     * {@code false}, in which case, start and end are set to\n     * {@code 0} and {@code Integer.MAX_VALUE}.\n     *\n     * <p>If set is not {@code null}, characters between start and\n     * end are chosen.</p>\n     *\n     * <p>This method accepts a user-supplied {@link Random}\n     * instance to use as a source of randomness. By seeding a single\n     * {@link Random} instance with a fixed seed and using it for each call,\n     * the same random sequence of strings can be generated repeatedly\n     * and predictably.</p>\n     *\n     * @param count  the length of random string to create\n     * @param start  the position in set of chars to start at\n     * @param end  the position in set of chars to end before\n     * @param letters  only allow letters?\n     * @param numbers  only allow numbers?\n     * @param chars  the set of chars to choose randoms from, must not be empty.\n     *  If {@code null}, then it will use the set of all chars.\n     * @param random  a source of randomness.\n     * @return the random string\n     * @throws ArrayIndexOutOfBoundsException if there are not\n     *  {@code (end - start) + 1} characters in the set array.\n     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n     * @since 2.0\n     */\n    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n\n        // Determine the actual range for character selection or array indexing\n        // based on whether a character array 'chars' is provided.\n        int actualStart = start;\n        int actualEnd = end;\n\n        if (chars == null) {\n            // No char array provided, use the character value range [start, end)\n            // If start and end are both 0, default to ASCII printable or all Unicode\n            if (actualStart == 0 && actualEnd == 0) {\n                if (!letters && !numbers) {\n                    actualEnd = Integer.MAX_VALUE; // All Unicode characters\n                } else {\n                    actualEnd = 'z' + 1; // ASCII letters and numbers (inclusive 'z')\n                    actualStart = ' ';   // ASCII space\n                }\n            }\n        } else {\n            // Char array provided, use start and end as indices within 'chars' array\n            if (chars.length == 0) {\n                throw new IllegalArgumentException(\"The provided chars array must not be empty.\");\n            }\n            if (actualStart == 0 && actualEnd == 0) {\n                actualEnd = chars.length; // Use the entire array\n            }\n            // Validate start and end are within array bounds\n            if (actualStart < 0 || actualStart >= chars.length) {\n                throw new IllegalArgumentException(\"Parameter 'start' (\" + start + \") must be an index in the 'chars' array (0-\" + (chars.length - 1) + \")\");\n            }\n            if (actualEnd < 0 || actualEnd > chars.length) { // end can be chars.length (exclusive)\n                throw new IllegalArgumentException(\"Parameter 'end' (\" + end + \") must be an index in the 'chars' array (0-\" + chars.length + \")\");\n            }\n        }\n        \n        int gap = actualEnd - actualStart; // Recalculate gap based on potentially new start/end\n        if (gap <= 0) { // If the range is empty or invalid\n            throw new IllegalArgumentException(\"Parameter 'end' (\" + end + \") must be greater than parameter 'start' (\" + start + \")\");\n        }\n\n        char[] buffer = new char[count];\n        int i = 0; // Current index in the buffer\n        while (i < count) {\n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt(gap) + actualStart); // Select character by value\n            } else {\n                ch = chars[random.nextInt(gap) + actualStart]; // Select character by index from array\n            }\n\n            // Character filtering (letters/numbers)\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || (!letters && !numbers)) { // No filtering, all characters are allowed\n                \n                // Surrogate pair handling (High: D800-DBFF, Low: DC00-DFFF)\n                if (ch >= 0xD800 && ch <= 0xDB7F) { // Regular High surrogate (U+D800 to U+DB7F)\n                    if (i == count - 1) { // Not enough space for a low surrogate\n                        continue; // Skip this character, try again for this slot\n                    } else {\n                        buffer[i++] = ch; // Add high surrogate\n                        buffer[i++] = (char) (0xDC00 + random.nextInt(0x0400)); // Add random low surrogate (U+DC00 to U+DFFF)\n                    }\n                } else if (ch >= 0xDB80 && ch <= 0xDBFF) { // Private use High surrogate (U+DB80 to U+DBFF)\n                    continue; // Skip private use high surrogates\n                } else if (ch >= 0xDC00 && ch <= 0xDFFF) { // Low surrogate (U+DC00 to U+DFFF)\n                    continue; // Skip, a low surrogate cannot be generated alone or initiated randomly here.\n                } else { // Regular character\n                    buffer[i++] = ch;\n                }\n            } else {\n                // Character does not meet letters/numbers criteria, try again for this slot\n                continue;\n            }\n        }\n        return new String(buffer);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}