{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    final double y0 = y[yOffset];\n    final double x0 = x[xOffset];\n\n    // Handle special cases for both zero\n    if (Double.doubleToRawLongBits(y0) == 0L && Double.doubleToRawLongBits(x0) == 0L) {\n        // Both inputs are +0 or -0 (signed zeros matter)\n        // java.lang.Math.atan2 behavior is to preserve y sign when x = +0\n        result[resultOffset] = FastMath.copySign(0.0, y0);\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // Handle when denominator is zero\n    if (Double.isInfinite(y0) && Double.isInfinite(x0)) {\n        // Both infinite\n        if (y0 > 0) {\n            if (x0 > 0) {\n                result[resultOffset] = FastMath.PI / 4;\n            } else {\n                result[resultOffset] = 3 * FastMath.PI / 4;\n            }\n        } else {\n            if (x0 > 0) {\n                result[resultOffset] = -FastMath.PI / 4;\n            } else {\n                result[resultOffset] = -3 * FastMath.PI / 4;\n            }\n        }\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x0 >= 0) {\n\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n\n    } else {\n\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        result[resultOffset] =\n                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n        }\n\n    }\n\n    // fix exact signed zero results on x very close or equal zero\n    if (Double.isNaN(result[resultOffset])) {\n        result[resultOffset] = Math.atan2(y0, x0); // fallback to correct zero handling\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}