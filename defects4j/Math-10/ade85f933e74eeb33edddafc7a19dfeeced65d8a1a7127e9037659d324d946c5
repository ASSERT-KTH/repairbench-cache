{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] >= 0) {\n        // For x >= 0 use: atan2(y, x) = 2 * atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // tmp2 = r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // tmp1 = y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                     // tmp2 = atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; i++) {\n            result[resultOffset + i] = 2 * tmp2[i]; // result = 2 * atan(y / (r + x))\n        }\n    } else {\n        // For x < 0 use: atan2(y, x) = (y >= 0 ? \u03c0 : -\u03c0) - 2 * atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // tmp2 = r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);        // tmp1 = y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                     // tmp2 = atan(y / (r - x))\n        double sY = Math.copySign(1.0, y[yOffset]); // determine the sign of y\n        result[resultOffset] = (sY > 0 ? FastMath.PI : -FastMath.PI) - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; i++) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n\n    // Handle special cases where operations yield NaN\n    // (this covers the cases when both x and y are \u00b10 or when infinities occur)\n    if (Double.isNaN(result[resultOffset])) {\n        double value = Math.atan2(y[yOffset], x[xOffset]);\n        result[resultOffset] = value;\n        for (int i = 1; i < getSize(); i++) {\n            result[resultOffset + i] = 0.0;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}