{
    "generation": "/** Compute two arguments arc tangent of a derivative structure.\n * @param y array holding the first operand\n * @param yOffset offset of the first operand in its array\n * @param x array holding the second operand\n * @param xOffset offset of the second operand in its array\n * @param result array where result must be stored (for\n * two arguments arc tangent the result array <em>cannot</em>\n * be the input array)\n * @param resultOffset offset of the result in its array\n */\npublic void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Special-case handling for when both x and y are (signed) zero.\n    // In such a case, we force the 0th order value to match Math.atan2,\n    // and set all derivative orders to zero.\n    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n        double v = FastMath.atan2(y[yOffset], x[xOffset]);\n        result[resultOffset] = v;\n        for (int i = 1; i < getSize(); i++) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    // Use the correct branch by distinguishing the sign of x.\n    // We consider x to be positive only if either x > 0\n    // or if x is +0 (i.e. 1/x > 0), otherwise we use the negative branch.\n    if (x[xOffset] > 0 || (x[xOffset] == 0.0 && 1.0 / x[xOffset] > 0)) {\n        // For x positive, use the identity:\n        //   atan2(y, x) = 2 * atan( y / (r + x) )\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);         // y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                       // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i];   // 2 * atan(y / (r + x))\n        }\n    } else {\n        // For x negative we use the formula:\n        //   atan2(y, x) = sign(y)*PI - 2 * atan( y / (r - x) )\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);       // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);          // y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                        // atan(y / (r - x))\n        // Determine the sign of y properly, taking zero sign into account.\n        double sign = ((y[yOffset] > 0) || (y[yOffset] == 0.0 && 1.0 / y[yOffset] > 0)) ? 1.0 : -1.0;\n        result[resultOffset] = sign * FastMath.PI - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n\n    // (Any other special cases, such as infinities, are assumed to be handled\n    //  in the elementary operations or are not singular for the formulas used.)\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}