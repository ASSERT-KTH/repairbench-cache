{
    "generation": "/** Compute two arguments arc tangent of a derivative structure.\n * @param y array holding the first operand\n * @param yOffset offset of the first operand in its array\n * @param x array holding the second operand\n * @param xOffset offset of the second operand in its array\n * @param result array where result must be stored (for\n * two arguments arc tangent the result array <em>cannot</em>\n * be the input array)\n * @param resultOffset offset of the result in its array\n */\npublic void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    final int n = getSize();\n    double x0 = x[xOffset];\n    double y0 = y[yOffset];\n\n    // special case: if any argument is NaN, all derivatives are NaN\n    if (Double.isNaN(x0) || Double.isNaN(y0)) {\n        for (int i = 0; i < n; i++) {\n            result[resultOffset + i] = Double.NaN;\n        }\n        return;\n    }\n    // special case: both arguments are zero (+0/+0, +0/-0, -0/+0, -0/-0)\n    if (x0 == 0.0 && y0 == 0.0) {\n        boolean xNeg = (Double.doubleToRawLongBits(x0) < 0L);\n        double value;\n        if (!xNeg) {\n            // x is +0 => result is y (preserves sign of y)\n            value = y0;\n        } else {\n            // x is -0 => result is \u00b1\u03c0 depending on sign of y\n            value = FastMath.copySign(FastMath.PI, y0);\n        }\n        result[resultOffset] = value;\n        // derivatives are set to zero\n        for (int i = 1; i < n; i++) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // general case: compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[n];\n    double[] tmp2 = new double[n];\n    multiply(x, xOffset, x, xOffset, tmp1, 0); // tmp1 = x^2\n    multiply(y, yOffset, y, yOffset, tmp2, 0); // tmp2 = y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);            // tmp2 = x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                // tmp1 = sqrt(x^2 + y^2) = r\n\n    if (x0 >= 0.0) {\n        // atan2(y, x) = 2 * atan( y / (r + x) )\n        add(tmp1, 0, x, xOffset, tmp2, 0);      // tmp2 = r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);   // tmp1 = y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                 // tmp2 = atan(y / (r + x))\n        for (int i = 0; i < n; ++i) {\n            result[resultOffset + i] = 2.0 * tmp2[i];\n        }\n    } else {\n        // atan2(y, x) = copySign(\u03c0, y) - 2 * atan( y / (r - x) )\n        subtract(tmp1, 0, x, xOffset, tmp2, 0); // tmp2 = r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);   // tmp1 = y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                 // tmp2 = atan(y / (r - x))\n        double pi = FastMath.copySign(FastMath.PI, y0);\n        // value\n        result[resultOffset] = pi - 2.0 * tmp2[0];\n        // derivatives\n        for (int i = 1; i < n; ++i) {\n            result[resultOffset + i] = -2.0 * tmp2[i];\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}