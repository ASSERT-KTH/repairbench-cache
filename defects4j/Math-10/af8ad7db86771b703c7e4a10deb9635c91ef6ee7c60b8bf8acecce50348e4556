{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // First, handle special cases: when both arguments are 0 (with their sign)\n    // or when one argument is infinite. In such cases the result is defined\n    // according to IEEE rules and the derivative part is taken to be 0.\n    double x0 = x[xOffset];\n    double y0 = y[yOffset];\n    if ((x0 == 0.0 && y0 == 0.0) ||\n        Double.isInfinite(x0) || Double.isInfinite(y0)) {\n        double theta = FastMath.atan2(y0, x0);\n        result[resultOffset] = theta;\n        for (int i = 1; i < getSize(); i++) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // Compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);   // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);   // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);              // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                  // r = sqrt(x^2 + y^2)\n\n    // Distinguish the branch based on the sign of x.\n    // Note: We must differentiate between +0 and -0. For x, we use the test:\n    // x > 0  OR  (x == 0 and 1.0/x > 0) (since 1.0/+0 is +infinity, while 1.0/(-0) is -infinity)\n    if (x0 > 0 || (x0 == 0.0 && 1.0 / x0 > 0)) {\n        // For non negative x: use atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);      // compute r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);    // compute y/(r + x)\n        atan(tmp1, 0, tmp2, 0);                  // compute atan( y/(r + x) )\n        for (int i = 0; i < tmp2.length; i++) {\n            result[resultOffset + i] = 2 * tmp2[i];  // 2 * atan( y/(r + x) )\n        }\n    } else {\n        // For x < 0: use atan2(y, x) = +/-pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0); // compute r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);    // compute y/(r - x)\n        atan(tmp1, 0, tmp2, 0);                  // compute atan( y/(r - x) )\n        // Make sure to choose the correct sign for pi based on the sign of y.\n        boolean yPositive = (y0 > 0 || (y0 == 0.0 && 1.0 / y0 > 0));\n        result[resultOffset] = (yPositive ? FastMath.PI : -FastMath.PI) - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; i++) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}