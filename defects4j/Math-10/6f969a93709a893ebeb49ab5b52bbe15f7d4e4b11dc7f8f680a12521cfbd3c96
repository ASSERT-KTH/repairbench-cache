{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Handle special cases where both x and y are zero\n    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n        // Determine the sign based on the zero values (+0/+0, +0/-0, etc.)\n        // The result should be +0, +pi, -0, or -pi respectively\n        int signY = (y[yOffset] == 0.0) ? 1 : (y[yOffset] > 0 ? 1 : -1);\n        int signX = (x[xOffset] == 0.0) ? 1 : (x[xOffset] > 0 ? 1 : -1);\n\n        if (signY == 1 && signX == 1) {\n            // +0/+0 case\n            System.arraycopy(y, yOffset, result, resultOffset, result.length);\n            result[resultOffset] = 0.0;\n        } else if (signY == 1 && signX == -1) {\n            // +0/-0 case\n            result[resultOffset] = FastMath.PI;\n            for (int i = 1; i < result.length; ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n        } else if (signY == -1 && signX == 1) {\n            // -0/+0 case\n            System.arraycopy(y, yOffset, result, resultOffset, result.length);\n            result[resultOffset] = 0.0;\n            result[resultOffset] = -0.0; // preserve the sign of zero\n        } else { // signY == -1 && signX == -1\n            // -0/-0 case\n            result[resultOffset] = -FastMath.PI;\n            for (int i = 1; i < result.length; ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n        }\n        return;\n    }\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] >= 0) {\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n    } else {\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        if (y[yOffset] >= 0) {\n            result[resultOffset] = FastMath.PI - 2 * tmp2[0];\n        } else {\n            result[resultOffset] = -FastMath.PI - 2 * tmp2[0];\n        }\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}