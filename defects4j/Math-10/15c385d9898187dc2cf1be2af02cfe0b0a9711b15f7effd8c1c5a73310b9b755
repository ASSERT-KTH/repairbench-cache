{
    "generation": "    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // Store original values for special case handling of the 0-th derivative at the end\n        final double yValue = y[yOffset];\n        final double xValue = x[xOffset];\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        // The choice of formula depends on the sign of x.\n        // We need to correctly distinguish +0.0 from -0.0 for x, as Math.atan2 does.\n        // The condition `x[xOffset] >= 0` treats both +0.0 and -0.0 as positive,\n        // which is incorrect for atan2's quadrant behavior.\n        // The condition `xValue > 0 || (xValue == 0.0 && FastMath.copySign(1.0, xValue) > 0)`\n        // correctly places +0.0 in the \"positive x\" half and -0.0 in the \"negative x\" half.\n        if (xValue > 0 || (xValue == 0.0 && FastMath.copySign(1.0, xValue) > 0)) { // x is strictly positive or +0.0\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            // This formula can produce 0/0 (NaN) when y is 0 and r+x is 0 (e.g., x=+0.0, y=+0.0)\n            // The higher-order derivatives might legitimately be NaN at singular points.\n            // The 0-th derivative (value) will be fixed explicitly at the end.\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else { // x is strictly negative or -0.0\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            // This formula can produce 0/0 (NaN) when y is 0 and r-x is 0 (e.g., x=-0.0, y=+0.0)\n            // The higher-order derivatives might legitimately be NaN at singular points.\n            // The 0-th derivative (value) will be fixed explicitly at the end.\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n\n            // The 0-th derivative calculated here might be NaN if tmp2[0] is NaN.\n            // We set the higher-order derivatives first, then fix the 0-th.\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // Higher derivatives: -2 * derivative of atan(y / (r - x))\n            }\n            result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // Value part +/-pi - 2 * atan(y / (r - x))\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        // The above computation for result[resultOffset] might be NaN or incorrect for specific zero/infinity cases,\n        // due to the division by zero in the formulas for 0-th order.\n        // Overwrite result[resultOffset] with FastMath.atan2(yValue, xValue) for robustness,\n        // as this static method handles all special cases for the value correctly according to IEEE 754.\n        result[resultOffset] = FastMath.atan2(yValue, xValue);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}