{
    "generation": "/** Compute two arguments arc tangent of a derivative structure.\n * @param y array holding the first operand\n * @param yOffset offset of the first operand in its array\n * @param x array holding the second operand\n * @param xOffset offset of the second operand in its array\n * @param result array where result must be stored (for\n * two arguments arc tangent the result array <em>cannot</em>\n * be the input array)\n * @param resultOffset offset of the result in its array\n */\npublic void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    double x0 = x[xOffset];\n    double y0 = y[yOffset];\n    // special case: +0/+0, +0/-0, -0/+0, -0/-0\n    if (x0 == 0.0 && y0 == 0.0) {\n        // detect negative zero on x\n        boolean xNeg = (1.0 / x0) < 0.0;\n        // if x is +0 => result = \u00b10, if x is -0 => result = \u00b1\u03c0\n        double value = xNeg ? FastMath.PI : 0.0;\n        // propagate the sign of y to the result\n        result[resultOffset] = FastMath.copySign(value, y0);\n        // derivatives at the branch cut are undefined \u2192 NaN\n        int size = getSize();\n        for (int i = 1; i < size; ++i) {\n            result[resultOffset + i] = Double.NaN;\n        }\n        return;\n    }\n\n    // compute r = sqrt(x^2 + y^2)\n    int size = getSize();\n    double[] tmp1 = new double[size];\n    double[] tmp2 = new double[size];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);   // tmp1 = x^2\n    multiply(y, yOffset, y, yOffset, tmp2, 0);   // tmp2 = y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);              // tmp2 = x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                  // tmp1 = r\n\n    if (x0 >= 0.0) {\n        // atan2(y, x) = 2 * atan( y / (r + x) )\n        add(tmp1, 0, x, xOffset, tmp2, 0);       // tmp2 = r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);    // tmp1 = y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                  // tmp2 = atan( y / (r + x) )\n        for (int i = 0; i < size; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i];\n        }\n    } else {\n        // atan2(y, x) = \u00b1\u03c0 - 2 * atan( y / (r - x) )\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);  // tmp2 = r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);    // tmp1 = y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                  // tmp2 = atan( y / (r - x) )\n        // choose base \u03c0 with sign from tmp2[0] (<0 \u2192 -\u03c0, >0 \u2192 +\u03c0)\n        double base = tmp2[0] < 0.0 ? -FastMath.PI : FastMath.PI;\n        result[resultOffset] = base - 2 * tmp2[0];\n        for (int i = 1; i < size; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}