{
    "generation": "/** Compute two arguments arc tangent of a derivative structure.\n * @param y array holding the first operand\n * @param yOffset offset of the first operand in its array\n * @param x array holding the second operand\n * @param xOffset offset of the second operand in its array\n * @param result array where result must be stored (for\n * two arguments arc tangent the result array <em>cannot</em>\n * be the input array)\n * @param resultOffset offset of the result in its array\n */\npublic void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Extract the function value of y and x (the first element in the arrays)\n    final double y0 = y[yOffset];\n    final double x0 = x[xOffset];\n\n    // Special cases from java.lang.Math#atan2 for correct sign and zero handling\n    if (Double.isNaN(y0) || Double.isNaN(x0)) {\n        result[resultOffset] = Double.NaN;\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = Double.NaN;\n        }\n        return;\n    }\n    if (Double.isInfinite(y0)) {\n        if (Double.isInfinite(x0)) {\n            // Both infinite\n            if (y0 > 0) {\n                result[resultOffset] = x0 > 0 ? FastMath.PI / 4 : 3 * FastMath.PI / 4;\n            } else {\n                result[resultOffset] = x0 > 0 ? -FastMath.PI / 4 : -3 * FastMath.PI / 4;\n            }\n        } else {\n            result[resultOffset] = y0 > 0 ? FastMath.PI / 2 : -FastMath.PI / 2;\n        }\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n    if (Double.isInfinite(x0)) {\n        if (x0 > 0) {\n            result[resultOffset] = y0 == 0.0 ? (Math.copySign(0.0, y0)) : 0.0;\n        } else {\n            result[resultOffset] = y0 >= 0.0 ? FastMath.PI : -FastMath.PI;\n        }\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n    // Explicit handling for signed zeros, according to IEEE 754 and Math.atan2\n    if (y0 == 0.0) {\n        if (x0 == 0.0) {\n            // Both are zero, result is defined by the signs\n            // (+0, +0) => +0\n            // (-0, +0) => -0\n            // (+0, -0) => +pi\n            // (-0, -0) => -pi\n            // Distinguish by raw bits because of signed zero\n            if (Double.doubleToRawLongBits(x0) == Double.doubleToRawLongBits(+0.0)) {\n                // x +0.0\n                result[resultOffset] = y0;\n            } else {\n                // x -0.0\n                result[resultOffset] = Math.copySign(FastMath.PI, y0);\n            }\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            return;\n        } else if (x0 > 0.0) {\n            // y == 0, x > 0 => result == y (preserving sign of y)\n            result[resultOffset] = y0;\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            return;\n        } else { // x < 0\n            // y == 0, x < 0 => result == pi with sign of y\n            result[resultOffset] = Math.copySign(FastMath.PI, y0);\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            return;\n        }\n    }\n\n    // Now handle normal derivatives, general case for non-special values\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x0 >= 0) {\n\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n\n    } else {\n\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        result[resultOffset] =\n                (y0 <= 0 ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n        }\n\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}