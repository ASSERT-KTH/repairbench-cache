{
    "generation": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // Handle special case where both x and y are zero\n        final double xVal = x[xOffset];\n        final double yVal = y[yOffset];\n        if (xVal == 0.0 && yVal == 0.0) {\n            // Determine the signs of x and y\n            final boolean xNegative = Double.doubleToLongBits(xVal) < 0;\n            final boolean yNegative = Double.doubleToLongBits(yVal) < 0;\n\n            // Compute the result value based on IEEE 754 specifications\n            final double value;\n            if (xNegative) {\n                if (yNegative) {\n                    value = -FastMath.PI;\n                } else {\n                    value = FastMath.PI;\n                }\n            } else {\n                if (yNegative) {\n                    value = -0.0;\n                } else {\n                    value = 0.0;\n                }\n            }\n\n            result[resultOffset] = value;\n\n            // Set all derivatives to zero\n            final int size = getSize();\n            for (int i = 1; i < size; ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n\n            return;\n        }\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}