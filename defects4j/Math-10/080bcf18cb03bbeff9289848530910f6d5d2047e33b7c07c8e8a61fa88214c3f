{
    "generation": "/** Compute two arguments arc tangent of a derivative structure.\n * @param y array holding the first operand\n * @param yOffset offset of the first operand in its array\n * @param x array holding the second operand\n * @param xOffset offset of the second operand in its array\n * @param result array where result must be stored (for\n * two arguments arc tangent the result array <em>cannot</em>\n * be the input array)\n * @param resultOffset offset of the result in its array\n */\npublic void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);\n    add(tmp1, 0, tmp2, 0, tmp2, 0);\n    rootN(tmp2, 0, 2, tmp1, 0);\n\n    // choose branch based on the sign bit of x (detecting -0)\n    boolean xNonNegative = FastMath.copySign(1.0, x[xOffset]) >= 0.0;\n    if (xNonNegative) {\n        // atan2(y, x) = 2 * atan( y / (r + x) )\n        add(tmp1, 0, x, xOffset, tmp2, 0);      // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);   // y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                 // atan(...)\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i];\n        }\n    } else {\n        // atan2(y, x) = \u00b1\u03c0 - 2 * atan( y / (r - x) )\n        subtract(tmp1, 0, x, xOffset, tmp2, 0); // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);   // y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                 // atan(...)\n        // determine sign of \u03c0 from the sign bit of y\n        double signY = FastMath.copySign(1.0, y[yOffset]);\n        double base = (signY < 0.0) ? -FastMath.PI : FastMath.PI;\n        result[resultOffset] = base - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n\n    // fix special cases (+0/+0, +0/-0, -0/+0, -0/-0, \u00b1infinity)\n    double y0 = y[yOffset];\n    double x0 = x[xOffset];\n    if ((y0 == 0.0 && x0 == 0.0) ||\n        Double.isInfinite(y0) || Double.isInfinite(x0)) {\n        // fallback to standard atan2 for the value\n        double v = FastMath.atan2(y0, x0);\n        result[resultOffset] = v;\n        // and clear all higher-order derivatives\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}