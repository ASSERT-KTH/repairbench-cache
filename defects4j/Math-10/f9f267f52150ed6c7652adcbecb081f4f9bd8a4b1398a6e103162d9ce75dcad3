{
    "generation": "    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        final double x0 = x[xOffset];\n        final double y0 = y[yOffset];\n\n        // Handle special cases for (0,0), which would otherwise lead to 0/0 and NaN.\n        // The derivatives at (0,0) are conventionally 0 for DerivativeStructure.\n        // The value part follows the rules of Math.atan2 for signed zeros.\n        if (x0 == 0.0 && y0 == 0.0) {\n            if (x0 >= 0) { // x0 is +0.0\n                if (y0 >= 0) { // y0 is +0.0\n                    result[resultOffset] = 0.0;\n                } else { // y0 is -0.0\n                    result[resultOffset] = -0.0;\n                }\n            } else { // x0 is -0.0\n                if (y0 >= 0) { // y0 is +0.0\n                    result[resultOffset] = FastMath.PI;\n                } else { // y0 is -0.0\n                    result[resultOffset] = -FastMath.PI;\n                }\n            }\n            // All higher order derivatives at (0,0) are conventionally 0.\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            return;\n        }\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // tmp1: x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // tmp2: y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // tmp2: x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // tmp1: r = sqrt(x^2 + y^2)\n\n        if (x0 >= 0) { // Use the value x0 for branching\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            // tmp1 holds r, x holds x\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // tmp2: r + x\n            // y holds y, tmp2 holds r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // tmp1: y /(r + x)\n            // tmp1 holds y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // tmp2: atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // result: 2 * atan(y / (r + x))\n            }\n\n        } else { // x0 < 0\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            // tmp1 holds r, x holds x\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // tmp2: r - x\n            // y holds y, tmp2 holds r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // tmp1: y /(r - x)\n            // tmp1 holds y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // tmp2: atan(y / (r - x))\n\n            // The constant +/-PI only applies to the value part, not the derivatives.\n            // The sign of PI depends on the sign of y.\n            final double signPI = (y0 >= 0) ? FastMath.PI : -FastMath.PI;\n\n            result[resultOffset] = signPI - 2 * tmp2[0]; // Value part: +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                // Derivatives: The derivative of a constant (signPI) is 0.\n                // So, only the derivative of -2 * atan(...) remains.\n                result[resultOffset + i] = -2 * tmp2[i];\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}