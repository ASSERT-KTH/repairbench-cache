{
    "generation": "    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        for (int i = 0; i < getSize(); i++) {\n            double xi = x[xOffset + i];\n            double yi = y[yOffset + i];\n            double ri = tmp1[i];\n\n            if (xi == 0.0 && yi == 0.0) {\n                // Handle special cases where both x and y are zero\n                if (xi < 0.0) {\n                    result[resultOffset + i] = (yi > 0.0) ? FastMath.PI : -FastMath.PI;\n                } else {\n                    result[resultOffset + i] = 0.0;\n                }\n            } else if (xi >= 0.0) {\n                // compute atan2(y, x) = 2 * atan(y / (r + x))\n                double rPlusX = ri + xi;\n                double yOverRPlusX = yi / rPlusX;\n                double atanVal = FastMath.atan(yOverRPlusX);\n                result[resultOffset + i] = 2 * atanVal;\n            } else {\n                // compute atan2(y, x) = +/- pi - 2 * atan(y / (r - x))\n                double rMinusX = ri - xi;\n                double yOverRMinusX = yi / rMinusX;\n                double atanVal = FastMath.atan(yOverRMinusX);\n                result[resultOffset + i] = (yi < 0.0) ? -FastMath.PI - 2 * atanVal : FastMath.PI - 2 * atanVal;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}