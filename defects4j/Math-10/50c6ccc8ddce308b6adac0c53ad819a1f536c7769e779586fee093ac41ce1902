{
    "generation": "    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand in its array\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // Handle special cases\n        boolean yZero = isZero(y, yOffset);\n        boolean xZero = isZero(x, xOffset);\n\n        // Atan2 special cases\n        if (yZero && xZero) {\n            // Handle 0/0 case\n            // The result should be:\n            // +0.0 if y=+0.0, x=+0.0\n            // \u03c0 if y=+0.0, x=-0.0\n            // -0.0 if y=-0.0, x=+0.0\n            // -\u03c0 if y=-0.0, x=-0.0\n            double ySign = FastMath.copySign(1.0, y[yOffset]);\n            double xSign = FastMath.copySign(1.0, x[xOffset]);\n            if (ySign >= 0) {\n                if (xSign >= 0) {\n                    // (+0, +0)\n                    result[resultOffset] = 0.0;\n                } else {\n                    // (+0, -0)\n                    result[resultOffset] = FastMath.PI;\n                }\n            } else {\n                if (xSign >= 0) {\n                    // (-0, +0)\n                    result[resultOffset] = -0.0;  // -0.0 is important here\n                } else {\n                    // (-0, -0)\n                    result[resultOffset] = -FastMath.PI;\n                }\n            }\n            // Set all other derivatives to zero\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            return;\n        }\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n\n    }\n\n    // Helper method to check if a value is zero (including negative zero)\n    private boolean isZero(double[] arr, int offset) {\n        return Double.doubleToLongBits(arr[offset]) == 0L ||\n               Double.doubleToLongBits(arr[offset]) == Double.doubleToLongBits(-0.0);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}