{
    "generation": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                if (i == 0) {\n                    result[resultOffset + i] =\n                            ((tmp2[i] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[i];\n                } else {\n                    result[resultOffset + i] = -2 * tmp2[i];\n                }\n            }\n\n        }\n\n        // Handle special cases where both x and y are zero\n        for (int i = 0; i < tmp2.length; ++i) {\n            double xi = x[xOffset + i];\n            double yi = y[yOffset + i];\n            if (xi == 0.0 && yi == 0.0) {\n                if (Math.signum(xi) >= 0) {\n                    result[resultOffset + i] = 0.0;\n                } else {\n                    result[resultOffset + i] = -FastMath.PI;\n                }\n            }\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}