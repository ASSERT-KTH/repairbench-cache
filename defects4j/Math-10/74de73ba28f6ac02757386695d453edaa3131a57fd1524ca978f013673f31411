{
    "generation": "/** Compute two arguments arc tangent of a derivative structure.\n * @param y array holding the first operand\n * @param yOffset offset of the first operand in its array\n * @param x array holding the second operand\n * @param xOffset offset of the second operand in its array\n * @param result array where result must be stored (for\n * two arguments arc tangent the result array <em>cannot</em>\n * be the input array)\n * @param resultOffset offset of the result in its array\n */\npublic void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    final double y0 = y[yOffset];\n    final double x0 = x[xOffset];\n\n    // Special case handling for \u00b10 and \u00b10, which Java's Math.atan2 reproduces\n    if (Double.isNaN(y0) || Double.isNaN(x0)) {\n        result[resultOffset] = Double.NaN;\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = Double.NaN;\n        }\n        return;\n    }\n\n    if (y0 == 0.0 && x0 == 0.0) {\n        // Handle correct signed zeros as per Math.atan2 spec and reference test\n        double v = Math.atan2(y0, x0); // picks correct sign\n        result[resultOffset] = v;\n        // All derivatives of atan2(0, 0) are undefined, but we return 0, as per Math.atan2(0, 0)\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // Compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x0 >= 0) {\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n    } else {\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        // Special handling for y0 negative or positive zero/inf\n        result[resultOffset] =\n                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; \n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}