{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Special case: if both x and y are exactly 0 (including signed zeros),\n    // use the built-in atan2 to set the value and set all derivative parts to 0.\n    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n        for (int i = 1; i < getSize(); i++) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // Compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // tmp1 = x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // tmp2 = y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // tmp2 = x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // tmp1 = r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] >= 0) {\n        // For x >= 0: use the identity\n        //   atan2(y, x) = 2 * atan( y / (r + x) )\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // tmp2 = r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);        // tmp1 = y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                      // tmp2 = atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i];  // result = 2 * atan(y / (r + x))\n        }\n    } else {\n        // For x < 0: use the identity\n        //   atan2(y, x) = copySign(\u03c0, y) - 2 * atan( y / (r - x) )\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // tmp2 = r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);         // tmp1 = y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                       // tmp2 = atan(y / (r - x))\n        result[resultOffset] = FastMath.copySign(FastMath.PI, y[yOffset]) - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n\n    // No further fixing is needed here since special cases (zero arguments)\n    // have been handled at the beginning.\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}