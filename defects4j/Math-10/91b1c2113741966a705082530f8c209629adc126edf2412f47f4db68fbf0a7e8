{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Check if both x and y are zero (considering sign)\n    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n        // Determine the signs of x and y using raw bits to distinguish -0.0\n        long xBits = Double.doubleToRawLongBits(x[xOffset]);\n        long yBits = Double.doubleToRawLongBits(y[yOffset]);\n        boolean xPositive = (xBits == Double.doubleToRawLongBits(0.0));\n        boolean yPositive = (yBits == Double.doubleToRawLongBits(0.0));\n\n        if (xPositive) {\n            result[resultOffset] = yPositive ? 0.0 : -0.0;\n        } else {\n            result[resultOffset] = yPositive ? FastMath.PI : -FastMath.PI;\n        }\n\n        // All higher-order derivatives are zero\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n\n        return;\n    }\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    // Check if x is negative (including -0.0)\n    long xSignBits = Double.doubleToRawLongBits(x[xOffset]);\n    boolean xIsNegative = (xSignBits & (1L << 63)) != 0;\n\n    if (!xIsNegative) {\n\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n\n    } else {\n\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        result[resultOffset] =\n                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n        }\n\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}