{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    final double y0 = y[yOffset];\n    final double x0 = x[xOffset];\n\n    if (Double.isNaN(y0) || Double.isNaN(x0)) {\n        // propagate NaN\n        result[resultOffset] = Double.NaN;\n        Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), Double.NaN);\n        return;\n    }\n\n    if (y0 == 0.0 && x0 == 0.0) {\n        // Both zero, handle signed zeroes:\n        double rawAtan2 = FastMath.atan2(y0, x0);\n        result[resultOffset] = rawAtan2;\n        Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0.0);\n        return;\n    }\n\n    // compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x0 >= 0) {\n\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n\n    } else {\n\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        result[resultOffset] =\n                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n\n    // Handle cases with infinite inputs explicitly if needed\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}