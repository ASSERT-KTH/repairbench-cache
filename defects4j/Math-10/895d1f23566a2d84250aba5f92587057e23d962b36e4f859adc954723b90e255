{
    "generation": "    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        // Use tmp2 to hold x^2 + y^2 temporarily, then rootN computes r into tmp1\n        double[] tmp1 = new double[getSize()]; // Will hold r = sqrt(x^2 + y^2)\n        double[] tmp2 = new double[getSize()]; // Temporary workspace\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        // Handle special case r == 0 specifically atan2(0, 0)\n        if (tmp1[0] == 0.0) {\n            // As per Math.atan2 specification\n            result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n            // Derivatives are all zero\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            // Avoid calculations below which would involve division by zero\n            return;\n        }\n\n        // Compute atan2 for r != 0\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            // Multiply by 2\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            // Careful: y / (r - x) might be sensitive near y=0, x<0, r= -x (pi boundary)\n            // However, r - x = sqrt(x^2+y^2) - x is always positive for x < 0\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n\n            // Compute the constant +/- pi\n            final double C = (tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI; // +/-pi depending on sign of y/(r-x), which depends on sign of y\n            result[resultOffset] = C - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x)) for value\n\n            // Compute derivatives: d(C - 2 * f(y/(r-x)))/dx = -2 * d(f(y/(r-x)))/dx\n            // The constant C disappears in derivatives.\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i];\n            }\n\n        }\n        // No need for the final comment about fixing special cases, r=0 is handled above.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}