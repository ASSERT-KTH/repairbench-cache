{
    "generation": "    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        final double yVal = y[yOffset];\n        final double xVal = x[xOffset];\n\n        // Handle specific cases where x and y are (signed) zero.\n        // This prevents 0.0/0.0 NaN propagation and ensures correct signed zero/PI results.\n        if (xVal == 0.0 && yVal == 0.0) {\n            final double ySign = FastMath.copySign(1.0, yVal);\n            final double xSign = FastMath.copySign(1.0, xVal);\n\n            if (xSign > 0) { // x is +0.0\n                if (ySign > 0) { // y is +0.0\n                    result[resultOffset] = 0.0; // atan2(+0.0, +0.0) is +0.0\n                } else { // y is -0.0\n                    result[resultOffset] = -0.0; // atan2(-0.0, +0.0) is -0.0\n                }\n            } else { // x is -0.0\n                if (ySign > 0) { // y is +0.0\n                    result[resultOffset] = FastMath.PI; // atan2(+0.0, -0.0) is +PI\n                } else { // y is -0.0\n                    result[resultOffset] = -FastMath.PI; // atan2(-0.0, -0.0) is -PI\n                }\n            }\n\n            // For all derivatives, set them to 0.0 for these specific (0,0) cases.\n            // This is consistent with how Math.atan2 behaves and how derivatives\n            // of a constant result would be zero.\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            return; // Special case handled, exit\n        }\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (xVal >= 0) {\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else { // xVal < 0\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                // The constant +/-PI only applies to the value, not the derivatives.\n                result[resultOffset + i] = -2 * tmp2[i];\n            }\n\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}