{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);       // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                  // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                      // r = sqrt(x^2 + y^2)\n\n    // Use the true sign of x. Notice that when x is 0, 1/x distinguishes +0 from -0.\n    if (x[xOffset] > 0.0 || (x[xOffset] == 0.0 && 1.0 / x[xOffset] > 0.0)) {\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);           // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);         // y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                       // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i];   // 2 * atan(y / (r + x))\n        }\n    } else {\n        // compute atan2(y, x) = +/-pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);       // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);          // y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                        // atan(y / (r - x))\n        // Use FastMath.copySign to choose +pi when y is positive (including +0) and -pi when y is negative.\n        result[resultOffset] =\n                (FastMath.copySign(1.0, y[yOffset]) > 0.0 ? FastMath.PI : -FastMath.PI)\n                - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n\n    // Fix the constant part to handle special cases correctly:\n    // (+0,+0), (+0,-0), (-0,+0), (-0,-0) and cases involving infinities.\n    double realX = x[xOffset];\n    double realY = y[yOffset];\n    if (Double.isNaN(result[resultOffset]) ||\n       (realX == 0.0 && realY == 0.0) ||\n       Double.isInfinite(realX) || Double.isInfinite(realY)) {\n        double theta = Math.atan2(realY, realX);\n        result[resultOffset] = theta;\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}