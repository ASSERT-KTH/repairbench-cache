{
    "generation": "    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        final double y0 = y[yOffset];\n        final double x0 = x[xOffset];\n\n        // Handle special cases where y and x are both zero.\n        // The general formula 2 * atan(y / (r + x)) leads to 0/0 (NaN)\n        // when y=0 and x=0. The Java Math.atan2 specification handles these\n        // cases explicitly based on the signs of the zeros.\n        // For derivative structures, if the value is exactly 0.0,\n        // and the function approaches a specific value at that point,\n        // the derivatives are typically considered to be 0.\n        if (y0 == 0.0 && x0 == 0.0) {\n            // Determine the value part based on the signs of y and x,\n            // matching Math.atan2 behavior for 0/0 cases.\n            if (FastMath.copySign(1.0, y0) == 1.0) { // y is +0.0 or positive\n                if (FastMath.copySign(1.0, x0) == 1.0) { // x is +0.0 or positive\n                    result[resultOffset] = 0.0; // atan2(+0.0, +0.0) = 0.0\n                } else { // x is -0.0 or negative\n                    result[resultOffset] = FastMath.PI; // atan2(+0.0, -0.0) = PI\n                }\n            } else { // y is -0.0 or negative\n                if (FastMath.copySign(1.0, x0) == 1.0) { // x is +0.0 or positive\n                    result[resultOffset] = -0.0; // atan2(-0.0, +0.0) = -0.0\n                } else { // x is -0.0 or negative\n                    result[resultOffset] = -FastMath.PI; // atan2(-0.0, -0.0) = -PI\n                }\n            }\n            // For these specific cases, all derivatives are set to 0.0.\n            // This applies because the inputs are constant zero values.\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            return; // Exit early after handling the special case\n        }\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x0 >= 0) { // Use x0 (the value part) for branching\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else { // x0 < 0\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            result[resultOffset] =\n                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // Derivatives part\n            }\n        }\n        // The original comment \"fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\"\n        // indicates that the general formula might be followed by a fixup. The added block specifically\n        // addresses the (0,0) cases which caused the NaN failure. Other infinity cases might still\n        // be handled by the underlying derivative arithmetic if robust, or may require additional specific checks.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}