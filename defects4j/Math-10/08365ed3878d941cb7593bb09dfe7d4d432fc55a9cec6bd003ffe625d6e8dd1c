{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Special cases: when both y and x are exactly 0\n    // or when one of the arguments is not finite (infinite or NaN),\n    // use Math.atan2 to get the correctly signed result and set all derivatives to 0.\n    if ((y[yOffset] == 0.0 && x[xOffset] == 0.0)\n         || (!Double.isFinite(x[xOffset]) || !Double.isFinite(y[yOffset]))) {\n        result[resultOffset] = Math.atan2(y[yOffset], x[xOffset]);\n        for (int i = 1; i < getSize(); i++) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // Compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);  // tmp1 = x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);  // tmp2 = y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);             // tmp2 = x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                 // tmp1 = r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] >= 0) {\n        // When x is positive (or x is \u00b10 with non zero y), we use:\n        //   atan2(y, x) = 2 * atan( y / (r + x) )\n        add(tmp1, 0, x, xOffset, tmp2, 0);       // tmp2 = r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);     // tmp1 = y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                   // tmp2 = atan( y / (r + x) )\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i];  // value and all derivatives multiplied by 2\n        }\n    } else {\n        // When x is negative (and not the special case x == -0 when y == 0),\n        // we use the formula:\n        //   atan2(y, x) = (sign of y is positive ? \u03c0 : -\u03c0) - 2 * atan( y / (r - x) )\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);   // tmp2 = r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // tmp1 = y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                     // tmp2 = atan( y / (r - x) )\n        double signY = FastMath.copySign(1.0, y[yOffset]);\n        result[resultOffset] = (signY > 0 ? FastMath.PI : -FastMath.PI) - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}