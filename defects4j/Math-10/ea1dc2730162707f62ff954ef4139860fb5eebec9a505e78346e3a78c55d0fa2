{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    final double y0 = y[yOffset];\n    final double x0 = x[xOffset];\n\n    // handle special cases\n    if (Double.isNaN(y0) || Double.isNaN(x0)) {\n        result[resultOffset] = Double.NaN;\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = Double.NaN;\n        }\n        return;\n    }\n\n    if (Double.isInfinite(y0) && Double.isInfinite(x0)) {\n        // both infinite: map to correct quadrant\n        if (y0 > 0) {\n            if (x0 > 0) {\n                result[resultOffset] = FastMath.PI / 4;\n            } else {\n                result[resultOffset] = 3 * FastMath.PI / 4;\n            }\n        } else {\n            if (x0 > 0) {\n                result[resultOffset] = -FastMath.PI / 4;\n            } else {\n                result[resultOffset] = -3 * FastMath.PI / 4;\n            }\n        }\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0;\n        }\n        return;\n    } else if (Double.isInfinite(x0)) {\n        // x infinite, y finite -> atan2 tends to 0 or pi with sign of y\n        if (x0 > 0) {\n            result[resultOffset] = (y0 >= 0) ? 0.0 : -0.0;\n        } else {\n            result[resultOffset] = (y0 >= 0) ? FastMath.PI : -FastMath.PI;\n        }\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0;\n        }\n        return;\n    } else if (Double.isInfinite(y0)) {\n        // y infinite, x finite -> result +/-pi/2\n        result[resultOffset] = (y0 > 0) ? FastMath.PI / 2 : -FastMath.PI / 2;\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0;\n        }\n        return;\n    }\n\n    // Handle zeros explicitly\n    if (y0 == 0.0) {\n        if (x0 == 0.0) {\n            // both zero, check signs to set correct signed zero and quadrant\n            result[resultOffset] = FastMath.copySign(0.0, y0);\n            if (Double.doubleToRawLongBits(x0) < 0) {\n                // x is -0.0\n                result[resultOffset] = (y0 >= 0.0) ? FastMath.PI : -FastMath.PI;\n            }\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0;\n            }\n            return;\n        }\n    }\n\n    // compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0); // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0); // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0); // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0); // r\n\n    if (x0 >= 0.0) {\n        add(tmp1, 0, x, xOffset, tmp2, 0); // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0); // y/(r + x)\n        atan(tmp1, 0, tmp2, 0); // atan(y/(r+x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i];\n        }\n    } else {\n        subtract(tmp1, 0, x, xOffset, tmp2, 0); // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0); // y/(r - x)\n        atan(tmp1, 0, tmp2, 0); // atan(y/(r-x))\n        result[resultOffset] = ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}