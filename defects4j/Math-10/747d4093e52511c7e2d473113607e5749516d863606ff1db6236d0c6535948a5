{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n    // Get the \u201creal\u201d (0th-order) values of the operands.\n    final double x0 = x[xOffset];\n    final double y0 = y[yOffset];\n\n    // Special case: if both x and y are \u00b10, use the proper signed convention.\n    if (x0 == 0.0 && y0 == 0.0) {\n        // Positive zero has raw bits 0L, negative zero does not.\n        if (Double.doubleToRawLongBits(x0) == 0L) {\n            result[resultOffset] = y0;  // if x is +0, the result is \u00b10 (matching y).\n        } else {\n            // if x is -0, choose \u03c0 when y is +0 and -\u03c0 when y is -0.\n            result[resultOffset] = (Double.doubleToRawLongBits(y0) == 0L) ? FastMath.PI : -FastMath.PI;\n        }\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // Special case: if either argument is infinite, rely on FastMath.atan2.\n    if (Double.isInfinite(x0) || Double.isInfinite(y0)) {\n        final double ref = FastMath.atan2(y0, x0);\n        result[resultOffset] = ref;\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n        return;\n    }\n\n    // Compute r = sqrt(x^2 + y^2)\n    final double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // tmp1 = x^2\n    final double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // tmp2 = y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // tmp2 = x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // tmp1 = r = sqrt(x^2 + y^2)\n\n    // Determine the sign of x (using raw bits so that -0.0 is treated as negative).\n    final boolean xNegative = (Double.doubleToRawLongBits(x0) & 0x8000000000000000L) != 0;\n\n    if (!xNegative) {\n        // For x > +0 (or +0 with nonzero y), use the half-angle formula:\n        // atan2(y, x) = 2 atan(y/(r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // tmp2 = r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);        // tmp1 = y/(r + x)\n        atan(tmp1, 0, tmp2, 0);                      // tmp2 = atan(y/(r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i];\n        }\n    } else {\n        // For x < 0 (including -0 with nonzero y), use:\n        // atan2(y, x) = \u00b1\u03c0 - 2 atan(y/(r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // tmp2 = r - x  (note: x is negative so r - x = r + |x|)\n        divide(y, yOffset, tmp2, 0, tmp1, 0);        // tmp1 = y/(r - x)\n        atan(tmp1, 0, tmp2, 0);                      // tmp2 = atan(y/(r - x))\n        result[resultOffset] =\n                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n\n    // Final safeguard: if something went wrong (result is NaN), revert to FastMath.atan2.\n    if (Double.isNaN(result[resultOffset])) {\n        final double ref = FastMath.atan2(y0, x0);\n        result[resultOffset] = ref;\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}