{
    "generation": "    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        final int size = getSize();\n        double[] tmp1 = new double[size];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[size];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        // Handle atan2(0, 0) special cases where r is zero.\n        if (tmp1[0] == 0.0) {\n            // In this case, the value is determined by the signs of x and y values\n            // using the standard FastMath.atan2 definition. All derivatives are zero.\n            // atan2(+0, +0) -> +0\n            // atan2(+0, -0) -> +pi\n            // atan2(-0, +0) -> -0\n            // atan2(-0, -0) -> -pi\n            result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n            // Derivatives are all zero at the origin.\n            for (int i = 1; i < size; ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            // Return early as the formulas below are unstable or lead to NaN at (0,0).\n            return;\n        }\n\n        final double xValue = x[xOffset]; // Use the value of x to decide the formula branch\n\n        if (xValue >= 0) {\n\n            // compute atan2(y, x) = 2 * atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            // Note: r + x = 0 only if r = -x. Since r >= 0 and x >= 0 here,\n            // this only happens if r = 0 and x = 0, which is the case handled above.\n            // Thus, the denominator tmp2 is non-zero here.\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < size; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else { // xValue < 0\n\n            // compute atan2(y, x) = +/- pi - 2 * atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            // Note: r - x = 0 only if r = x. Since r >= 0 and x < 0 here,\n            // this cannot happen.\n            // Thus, the denominator tmp2 is non-zero here.\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n\n            // Set the value: PI - 2 * atan(...) if y >= 0, -PI - 2 * atan(...) if y < 0\n            result[resultOffset] =\n                    (y[yOffset] >= 0 ? FastMath.PI : -FastMath.PI) - 2 * tmp2[0];\n            // Set the derivatives: -2 * derivative[atan(y / (r - x))]\n            for (int i = 1; i < size; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i];\n            }\n\n        }\n        // The previous comment about fixing special cases is no longer needed\n        // as the (0,0) case is handled explicitly and the formulas work correctly otherwise.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}