{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // first, handle the special cases: when (x, y) are both zero or contain infinities.\n    double x0 = x[xOffset];\n    double y0 = y[yOffset];\n    if ((x0 == 0.0 && y0 == 0.0) || Double.isInfinite(x0) || Double.isInfinite(y0)) {\n        result[resultOffset] = FastMath.atan2(y0, x0);\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset + i] = 0;\n        }\n        return;\n    }\n\n    // compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // tmp1 = x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // tmp2 = y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // tmp2 = x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // tmp1 = r = sqrt(x^2 + y^2)\n\n    // Use the sign of x to decide which formula to use.\n    if (FastMath.copySign(1.0, x[xOffset]) > 0) {\n        // When x is positive (or +0), use: atan2(y, x) = 2 * atan(y/(r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // tmp2 = r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);        // tmp1 = y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                      // tmp2 = atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i];  // result = 2 * atan(y / (r + x))\n        }\n    } else {\n        // When x is negative (including -0), use: atan2(y, x) = (\u00b1\u03c0) - 2 * atan(y/(r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // tmp2 = r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);         // tmp1 = y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                       // tmp2 = atan(y / (r - x))\n        result[resultOffset] =\n                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}