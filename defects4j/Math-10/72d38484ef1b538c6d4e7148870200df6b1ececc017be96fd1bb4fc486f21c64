{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] >= 0) {\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);        // y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                      // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i];  // 2 * atan(y / (r + x))\n        }\n    } else {\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);        // y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                      // atan(y / (r - x))\n        result[resultOffset] =\n                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0];\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i];\n        }\n    }\n\n    // Fix special cases for base values of \u00b10:\n    // When both x and y are zero the above computation yields NaN due to 0/0.\n    // In that case we need to return:\n    //   y = +0 and x = +0  -> +0\n    //   y = +0 and x = -0  ->  \u03c0\n    //   y = -0 and x = +0  -> -0\n    //   y = -0 and x = -0  -> -\u03c0\n    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n        // The sign of zero is determined by 1.0/0 being Infinity or -Infinity.\n        if (1.0 / x[xOffset] > 0) {\n            // x is +0, so the result is just y (preserving its sign).\n            result[resultOffset] = y[yOffset];\n        } else {\n            // x is -0.\n            result[resultOffset] = (1.0 / y[yOffset] > 0 ? FastMath.PI : -FastMath.PI);\n        }\n        // Set all derivative (higher order) components to 0.\n        for (int i = 1; i < getSize(); i++) {\n            result[resultOffset + i] = 0.0;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}