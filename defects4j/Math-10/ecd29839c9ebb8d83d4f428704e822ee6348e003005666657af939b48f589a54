{
    "generation": "    /** Compute two arguments arc tangent of a derivative structure.\n     * @param y array holding the first operand\n     * @param yOffset offset of the first operand in its array\n     * @param x array holding the second operand\n     * @param xOffset offset of the second operand in its array\n     * @param result array where result must be stored (for\n     * two arguments arc tangent the result array <em>cannot</em>\n     * be the input array)\n     * @param resultOffset offset of the result in its array\n     */\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // Handle special cases to get the correct sign for zeros and infinities\n        double y0 = y[yOffset];\n        double x0 = x[xOffset];\n\n        // Handle NaNs\n        if (Double.isNaN(y0) || Double.isNaN(x0)) {\n            result[resultOffset] = Double.NaN;\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = Double.NaN;\n            }\n            return;\n        }\n\n        if (y0 == 0.0) {\n            // y == 0.0\n            if (x0 == 0.0) {\n                // Both y and x are +/-0.0\n                double res = FastMath.copySign(0.0, y0);\n                // Determine the correct value based on sign of y0 and x0\n                if (FastMath.copySign(1.0, y0) == 1.0 && FastMath.copySign(1.0, x0) == 1.0) {\n                    // +0.0, +0.0\n                    res = 0.0;\n                } else if (FastMath.copySign(1.0, y0) == 1.0 && FastMath.copySign(1.0, x0) == -1.0) {\n                    // +0.0, -0.0\n                    res = FastMath.PI;\n                } else if (FastMath.copySign(1.0, y0) == -1.0 && FastMath.copySign(1.0, x0) == 1.0) {\n                    // -0.0, +0.0\n                    res = -0.0;\n                } else /*if (FastMath.copySign(1.0, y0) == -1.0 && FastMath.copySign(1.0, x0) == -1.0)*/ {\n                    // -0.0, -0.0\n                    res = -FastMath.PI;\n                }\n                result[resultOffset] = res;\n                // Derivative is NaN if both input are zero (derivative is not defined)\n                for (int i = 1; i < getSize(); ++i) {\n                    result[resultOffset + i] = Double.NaN;\n                }\n                return;\n            } else if (Double.isInfinite(x0)) {\n                // y == 0.0, x infinite\n                if (x0 > 0.0) {\n                    // x is +infinity\n                    result[resultOffset] = FastMath.copySign(0.0, y0);\n                    for (int i = 1; i < getSize(); ++i) {\n                        result[resultOffset + i] = 0.0;\n                    }\n                    return;\n                } else {\n                    // x is -infinity\n                    result[resultOffset] = FastMath.copySign(FastMath.PI, y0);\n                    for (int i = 1; i < getSize(); ++i) {\n                        result[resultOffset + i] = 0.0;\n                    }\n                    return;\n                }\n            }\n        }\n        if (Double.isInfinite(y0)) {\n            if (Double.isInfinite(x0)) {\n                // Both are infinite\n                if (y0 > 0.0) {\n                    if (x0 > 0.0) {\n                        result[resultOffset] = FastMath.PI / 4;\n                    } else {\n                        result[resultOffset] = 3 * FastMath.PI / 4;\n                    }\n                } else {\n                    if (x0 > 0.0) {\n                        result[resultOffset] = -FastMath.PI / 4;\n                    } else {\n                        result[resultOffset] = -3 * FastMath.PI / 4;\n                    }\n                }\n                for (int i = 1; i < getSize(); ++i) {\n                    result[resultOffset + i] = 0.0;\n                }\n                return;\n            }\n            // y infinite, x finite\n            result[resultOffset] = FastMath.copySign(FastMath.PI / 2, y0);\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            return;\n        }\n        if (Double.isInfinite(x0)) {\n            // x infinite, y finite (y != 0 because handled above)\n            if (x0 > 0.0) {\n                result[resultOffset] = FastMath.copySign(0.0, y0);\n            } else {\n                result[resultOffset] = FastMath.copySign(FastMath.PI, y0);\n            }\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            return;\n        }\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x0 >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            result[resultOffset] =\n                    ((y0 < 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // Special handling for signed zero results (when y == 0)\n        if (y0 == 0.0 && x0 > 0.0) {\n            // tan2(+0, +) = +0, tan2(-0, +) = -0\n            result[resultOffset] = FastMath.copySign(0.0, y0);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}