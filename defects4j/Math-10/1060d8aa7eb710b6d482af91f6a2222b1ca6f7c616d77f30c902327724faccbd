{
    "generation": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    double yh = y[yOffset];\n    double xh = x[xOffset];\n\n    if (Double.isNaN(yh) || Double.isNaN(xh)) {\n        // propagate NaN\n        Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);\n        return;\n    }\n\n    if (yh == 0.0 && xh == 0.0) {\n        // handle signed zeros explicitly to match strict IEEE results\n        double atan2ZeroZero = FastMath.copySign(1.0, yh) >= 0\n                ? (FastMath.copySign(1.0, xh) >= 0 ? 0.0 : FastMath.PI)\n                : (FastMath.copySign(1.0, xh) >= 0 ? -0.0 : -FastMath.PI);\n        Arrays.fill(result, resultOffset, resultOffset + getSize(), 0.0);\n        result[resultOffset] = atan2ZeroZero;\n        return;\n    }\n\n    // regular computation\n    // compute r = sqrt(x^2 + y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (xh >= 0) {\n\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n\n    } else {\n\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        result[resultOffset] =\n                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n        }\n\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}