{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        // The original implementation iterates over 'char's, which are 16-bit UTF-16 code units.\n        // Supplementary characters (code points > U+FFFF) are represented by a pair of 'char's (a surrogate pair).\n        // The original code would treat each 'char' of a surrogate pair independently,\n        // leading to incorrect numeric escapes like \"&#55348;&#57186;\" instead of \"&#119650;\".\n        // The fix involves iterating over Unicode code points instead of 'char's.\n\n        int len = str.length();\n        for (int i = 0; i < len; ) { // 'i' is advanced by 'charCount' within the loop\n            final int codePoint = Character.codePointAt(str, i); // Get the full Unicode code point at the current index\n            final int charCount = Character.charCount(codePoint); // Determine how many 'char's this code point occupies (1 or 2)\n\n            String entityName = null;\n            // The 'entityName' method (which is not provided but assumed to exist) likely takes a 'char' argument.\n            // This means it can only handle characters within the Basic Multilingual Plane (BMP, U+0000 to U+FFFF).\n            // Supplementary characters (code points >= U+10000) do not have pre-defined HTML named entities\n            // (like &lt;). So, only attempt to find a named entity for BMP characters.\n            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { // i.e., codePoint <= U+FFFF\n                entityName = this.entityName((char) codePoint);\n            }\n\n            if (entityName == null) {\n                // No named entity found for this code point.\n                // Now decide whether to write the character directly or escape it numerically.\n                // The original logic was:\n                // if (c > 0x7F) { ... write \"&#\" + c + \";\" ... }\n                // else { ... write(c) ... }\n                // This means characters outside the basic ASCII range (0x80 onwards) were numerically escaped,\n                // and basic ASCII characters (0x00 to 0x7F) were written directly if no named entity.\n\n                // Applying this logic to the 'codePoint':\n                if (codePoint > 0x7F) {\n                    // This covers all characters from 0x80 onwards, including all supplementary characters.\n                    // These should be escaped numerically using their full code point value.\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(codePoint, 10)); // Use the full Unicode code point for numeric escape\n                    writer.write(';');\n                } else {\n                    // This covers basic ASCII characters (0x00 to 0x7F).\n                    // If no named entity was found for them, they are written directly.\n                    // This maintains the historical behavior of StringEscapeUtils.escapeHtml where\n                    // certain control characters (like newlines, tabs) in the ASCII range\n                    // were not numerically escaped unless they had a specific named entity mapping.\n                    writer.write(codePoint); \n                }\n            } else {\n                // A named entity was found (e.g., &lt;, &gt;, &amp;, &quot;, &apos;).\n                // This branch is only taken for specific BMP characters which have a named entity.\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n            // Advance the index by the number of 'char's consumed by the current code point.\n            // This is 1 for BMP characters and 2 for supplementary characters.\n            i += charCount; \n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}