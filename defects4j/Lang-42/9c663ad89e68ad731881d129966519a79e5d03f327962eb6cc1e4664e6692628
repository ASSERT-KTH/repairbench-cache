{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; ) { // Iterate through the string by code points\n            final int codePoint = str.codePointAt(i); // Get the Unicode code point at the current index\n\n            String entityName = null;\n            // Only attempt to find a named entity if the code point is within the Basic Multilingual Plane (BMP).\n            // Supplementary characters (codePoint >= 0x10000) cannot be represented by a single char\n            // and thus won't have named entities typically looked up by char.\n            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                entityName = this.entityName((char) codePoint);\n            }\n\n            if (entityName == null) {\n                // No named entity found for this code point, or it's a supplementary character.\n                // Escape numerically if it's outside the standard ASCII range (0-127).\n                // This covers non-ASCII BMP characters and all supplementary characters.\n                if (codePoint > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(codePoint, 10)); // Use the full code point value\n                    writer.write(';');\n                } else {\n                    // For ASCII characters (0-127) that don't have named entities (e.g., 'A', '1', '!', etc.)\n                    // or if entityName() explicitly returns null for an ASCII character with a named entity\n                    // (e.g. if '&' isn't mapped, though it typically would be).\n                    writer.write(codePoint); // Write the character as is\n                }\n            } else {\n                // A named entity was found (e.g., &lt;, &gt;, &amp;, &quot;)\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n\n            // Advance the index by the number of Java chars consumed by the current code point.\n            // This will be 1 for BMP characters and 2 for supplementary characters.\n            i += Character.charCount(codePoint);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}