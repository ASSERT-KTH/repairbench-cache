{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; ) { // 'i' is incremented inside the loop based on the character's code point length\n            // Get the Unicode code point at the current index.\n            // This correctly handles both BMP characters (1 char) and supplementary characters (2 chars/surrogate pairs).\n            int codePoint = str.codePointAt(i); \n\n            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { // This is a Basic Multilingual Plane (BMP) character (U+0000 to U+FFFF)\n                char c = (char) codePoint; // Cast to char, as entityName takes a char\n                String entityName = this.entityName(c); // Check for named HTML entities (e.g., &lt;, &amp;, &copy;)\n                if (entityName == null) {\n                    if (c > 0x7F) { // Non-ASCII BMP character (e.g., '\u00e9' which is U+00E9). Escape as numeric entity &#DDD;\n                        writer.write(\"&#\");\n                        writer.write(Integer.toString(codePoint, 10)); // Use the full codePoint value\n                        writer.write(';');\n                    } else { // ASCII character (U+0000 to U+007F). Write as is.\n                        writer.write(c);\n                    }\n                } else { // Character has a named entity.\n                    writer.write('&');\n                    writer.write(entityName);\n                    writer.write(';');\n                }\n            } else { // This is a Supplementary character (U+10000 and above), represented by a surrogate pair.\n                     // Supplementary characters do not have named HTML entities and must be escaped as numeric entities.\n                writer.write(\"&#\");\n                writer.write(Integer.toString(codePoint, 10)); // Escape as a decimal numeric entity &#NNNNN;\n                writer.write(';');\n            }\n            // Advance the index by the number of 'char' units consumed by the current code point.\n            // This will be 1 for BMP characters and 2 for supplementary characters.\n            i += Character.charCount(codePoint); \n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}