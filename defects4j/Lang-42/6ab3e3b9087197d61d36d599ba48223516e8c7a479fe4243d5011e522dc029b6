{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        // Iterate through the string by Unicode code points, not by char units.\n        // This is crucial for correctly handling supplementary characters (those above U+FFFF),\n        // which are represented by surrogate pairs in Java's UTF-16 String.\n        for (int i = 0; i < len; ) {\n            // Get the current Unicode code point. This method correctly handles surrogate pairs,\n            // returning the single logical code point value.\n            int codePoint = str.codePointAt(i);\n\n            String entityName = null;\n            // Attempt to find a named HTML entity only if the code point is within the Basic Multilingual Plane (BMP).\n            // The `entityName` method (which is internal to the class and likely takes a `char`)\n            // is typically designed to work with single `char` values, which represent BMP characters.\n            // Supplementary characters (code points >= 0x10000) do not typically have named HTML entities\n            // and must be numerically escaped.\n            if (codePoint <= Character.MAX_VALUE) { // Equivalent to codePoint < 0x10000\n                entityName = this.entityName((char) codePoint);\n            }\n\n            if (entityName == null) {\n                // If no named entity is found for the code point.\n                // We need to escape it numerically if it's a non-ASCII character (including all supplementary characters).\n                // The original logic `if (c > 0x7F)` would incorrectly apply to individual surrogate `char`s.\n                // By checking `codePoint > 0x7F`, we correctly apply this to the full Unicode code point.\n                if (codePoint > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(codePoint, 10)); // Use the full code point value\n                    writer.write(';');\n                } else {\n                    // This branch handles ASCII characters (0x00-0x7F) for which no named entity was found.\n                    // These characters are written directly.\n                    writer.write(codePoint); // This writes the char corresponding to the ASCII codePoint\n                }\n            } else {\n                // A named entity was found for this code point.\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n\n            // Advance the loop index by the number of `char` units consumed by the current code point.\n            // This is 1 for BMP characters and 2 for supplementary characters.\n            i += Character.charCount(codePoint);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}