{
    "generation": "/**\n * <p>\n * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n * passed.\n * </p>\n * \n * @param writer\n *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n * @param str\n *            The <code>String</code> to escape. Assumed to be a non-null value.\n * @throws IOException\n *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n *             methods.\n * \n * @see #escape(String)\n * @see Writer\n */\npublic void escape(Writer writer, String str) throws IOException {\n    int len = str.length();\n    for (int i = 0; i < len; ) {\n        int codepoint = str.codePointAt(i);\n        i += Character.charCount(codepoint);\n\n        String entityName = null;\n        // only look up named entities for BMP chars\n        if (codepoint <= 0xFFFF) {\n            entityName = this.entityName((char) codepoint);\n        }\n\n        if (entityName != null) {\n            writer.write('&');\n            writer.write(entityName);\n            writer.write(';');\n        } else if (codepoint > 0x7F) {\n            writer.write(\"&#\");\n            writer.write(Integer.toString(codepoint, 10));\n            writer.write(';');\n        } else {\n            // for ASCII and control chars not needing escape\n            writer.write(codepoint);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}