{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; ) { // i is incremented inside the loop based on code point size\n            int codePoint = str.codePointAt(i); // Get the Unicode code point\n\n            // If the code point is a supplementary character (outside BMP), it must be escaped numerically.\n            // These characters are represented by a surrogate pair (two chars) in UTF-16.\n            // The original loop treated them as two separate chars, leading to incorrect output.\n            if (codePoint > 0xFFFF) { // Supplementary character (U+10000 to U+10FFFF)\n                writer.write(\"&#\");\n                writer.write(Integer.toString(codePoint, 10));\n                writer.write(';');\n            } else { // BMP character (U+0000 to U+FFFF)\n                char c = (char) codePoint; // For BMP characters, a single char is sufficient\n                String entityName = this.entityName(c); // Check if it's a known HTML entity\n\n                if (entityName == null) {\n                    // If not a known entity, check if it needs numeric escaping (e.g., non-ASCII characters)\n                    if (c > 0x7F) { // Characters above ASCII range (0x7F is DEL)\n                        writer.write(\"&#\");\n                        writer.write(Integer.toString(c, 10));\n                        writer.write(';');\n                    } else { // ASCII characters that are not predefined entities (e.g., 'a', '1', space)\n                        writer.write(c);\n                    }\n                } else { // It's a known HTML entity (e.g., '<', '&', '>')\n                    writer.write('&');\n                    writer.write(entityName);\n                    writer.write(';');\n                }\n            }\n            // Advance the index by the number of char units consumed by the code point.\n            // For supplementary characters, this is 2; for BMP characters, it's 1.\n            i += Character.charCount(codePoint);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}