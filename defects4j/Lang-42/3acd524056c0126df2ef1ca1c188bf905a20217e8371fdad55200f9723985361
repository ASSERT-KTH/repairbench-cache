{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; ) { // i is incremented inside the loop\n            // Read the full code point, handling supplementary characters correctly.\n            int codePoint = str.codePointAt(i);\n            String entityName = null;\n\n            if (codePoint > 0x7F) { // Non-ASCII characters (including supplementary code points)\n                // For Basic Multilingual Plane (BMP) characters (0x80 to 0xFFFF),\n                // check if there's a named entity.\n                if (codePoint <= 0xFFFF) {\n                    entityName = this.entityName((char) codePoint); // entityName method expects a char\n                }\n\n                if (entityName == null) {\n                    // If no named entity, or if it's a supplementary character (codePoint > 0xFFFF),\n                    // escape it numerically. Supplementary characters must always be escaped this way.\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(codePoint, 10));\n                    writer.write(';');\n                } else {\n                    // Found a named entity for a BMP character\n                    writer.write('&');\n                    writer.write(entityName);\n                    writer.write(';');\n                }\n            } else { // ASCII characters (0x00 to 0x7F)\n                // Check for named entities for standard HTML characters like <, >, &, \", etc.\n                entityName = this.entityName((char) codePoint); \n\n                if (entityName == null) {\n                    // No named entity for this ASCII character, write it directly\n                    writer.write((char) codePoint);\n                } else {\n                    // Found a named entity for an ASCII character\n                    writer.write('&');\n                    writer.write(entityName);\n                    writer.write(';');\n                }\n            }\n            // Advance the index by the number of Java chars (UTF-16 code units) consumed by this code point.\n            // This will be 1 for BMP characters and 2 for supplementary characters.\n            i += Character.charCount(codePoint); \n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}