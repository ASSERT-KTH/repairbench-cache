{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; ) { // Loop control moved to inside the loop\n            // Get the full Unicode code point, handling surrogate pairs\n            int codePoint = str.codePointAt(i); \n\n            // HTML 4.01 specification generally recommends escaping supplementary characters (code points > 0xFFFF)\n            // as numeric entities, as there are no named entities for them.\n            if (codePoint > 0xFFFF) { // Handle supplementary characters (e.g., U+1D362)\n                writer.write(\"&#\");\n                writer.write(Integer.toString(codePoint, 10));\n                writer.write(';');\n            } else { // Handle Basic Multilingual Plane (BMP) characters (0x0000 to 0xFFFF)\n                char c = (char) codePoint; // For BMP characters, the codePoint fits into a char\n                String entityName = this.entityName(c); // Check for named HTML entities (e.g., &amp;, &lt;)\n\n                if (entityName == null) {\n                    // No named entity found. Check if it's a character that should be numerically escaped.\n                    // This typically includes characters outside the ASCII range (0-127) that don't have named entities.\n                    if (c > 0x7F) { \n                        writer.write(\"&#\");\n                        writer.write(Integer.toString(c, 10));\n                        writer.write(';');\n                    } else {\n                        // ASCII characters (0-127) without named entities are written directly (e.g., 'A', '1', space)\n                        writer.write(c);\n                    }\n                } else {\n                    // Found a named entity for the character\n                    writer.write('&');\n                    writer.write(entityName);\n                    writer.write(';');\n                }\n            }\n            // Advance the index by the number of Java characters (UTF-16 code units) consumed by the code point.\n            // This will be 1 for BMP characters and 2 for supplementary characters.\n            i += Character.charCount(codePoint);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}