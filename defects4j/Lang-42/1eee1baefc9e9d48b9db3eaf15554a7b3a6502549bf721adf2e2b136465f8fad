{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            char c = str.charAt(i);\n            String entityName = this.entityName(c);\n            if (entityName == null) {\n                // Check for surrogate pairs first\n                if (Character.isHighSurrogate(c)) {\n                    // Ensure we have a next character and it's a low surrogate\n                    if (i + 1 < len) {\n                        char nextChar = str.charAt(i + 1);\n                        if (Character.isLowSurrogate(nextChar)) {\n                            // Combine the pair to get the supplementary code point\n                            int codePoint = Character.toCodePoint(c, nextChar);\n                            writer.write(\"&#\");\n                            writer.write(Integer.toString(codePoint, 10));\n                            writer.write(';');\n                            // Skip the next character as it's part of the surrogate pair\n                            i++;\n                        } else {\n                            // High surrogate not followed by low surrogate.\n                            // Output the high surrogate numerically (which is > 0x7f)\n                            writer.write(\"&#\");\n                            writer.write(Integer.toString(c, 10));\n                            writer.write(';');\n                        }\n                    } else {\n                        // High surrogate at the end of the string.\n                        // Output the high surrogate numerically (which is > 0x7f)\n                        writer.write(\"&#\");\n                        writer.write(Integer.toString(c, 10));\n                        writer.write(';');\n                    }\n                } else if (Character.isLowSurrogate(c)) {\n                    // Low surrogate without a preceding high surrogate.\n                    // Output the low surrogate numerically (which is > 0x7f)\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                } else {\n                    // Character is not part of a surrogate pair\n                    if (c > 0x7F) {\n                        writer.write(\"&#\");\n                        writer.write(Integer.toString(c, 10));\n                        writer.write(';');\n                    } else {\n                        writer.write(c);\n                    }\n                }\n            } else {\n                // Character is a known entity\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}