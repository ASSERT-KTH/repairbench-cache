{
    "generation": "import java.io.IOException;\nimport java.io.Writer;\n\n// Stub for compilation if Entities is not available in this context\nclass Entities {\n    public String entityName(int c) { return null; } // Assume this method exists or adapt as needed\n}\n\npublic class StringEscapeUtils { // Assuming the method is within a class like this\n\n    // Assume 'this' refers to an instance containing the entity mappings, e.g., an Entities instance\n    // For standalone context, we might need to pass Entities or make it static.\n    // Let's assume 'this' has the entityName method for now, mirroring the original code structure.\n    // In a real scenario, this would likely delegate to an Entities instance.\n    // Example stub:\n    private Entities entities = new Entities(); // Placeholder\n    protected String entityName(int c) { return entities.entityName(c); } // Delegate\n\n    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     *\n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     *\n     * @see #escape(String) // Assuming this method exists elsewhere\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            int codepoint = str.codePointAt(i); // Use codePointAt to handle supplementary characters\n\n            // Check if it's a supplementary character (requires two Java chars)\n            if (codepoint > 0xFFFF) {\n                // Supplementary characters are encoded numerically\n                writer.write(\"&#\");\n                writer.write(Integer.toString(codepoint, 10));\n                writer.write(';');\n                i++; // Increment i again because codePointAt consumed two chars\n            } else {\n                // It's a BMP character (single Java char)\n                char c = (char) codepoint;\n                // Check for named entity for this BMP character\n                String entityName = this.entityName(c); // entityName likely takes char or int BMP value\n                if (entityName == null) {\n                    // No named entity found\n                    if (c > 0x7F) {\n                        // Escape non-ASCII BMP characters numerically\n                        writer.write(\"&#\");\n                        writer.write(Integer.toString(c, 10));\n                        writer.write(';');\n                    } else {\n                        // Write ASCII characters directly (0-127)\n                        writer.write(c);\n                    }\n                } else {\n                    // Write the named entity\n                    writer.write('&');\n                    writer.write(entityName);\n                    writer.write(';');\n                }\n            }\n        }\n    }\n\n    // Dummy escape(String) method for @see link\n    public String escape(String str) {\n        // Implementation not relevant for the fix\n        return str;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}