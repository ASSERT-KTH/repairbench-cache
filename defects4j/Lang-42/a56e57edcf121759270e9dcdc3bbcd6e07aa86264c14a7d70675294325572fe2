{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; ) {\n            int codePoint = str.codePointAt(i);\n            int charCount = Character.charCount(codePoint);\n\n            String entityName = null;\n            // Only attempt to find a named entity for BMP characters.\n            // Supplementary characters (code points >= U+10000) do not have named HTML entities.\n            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                // Cast to char for the entityName method, as it expects a char.\n                // This covers BMP characters (U+0000 to U+FFFF).\n                entityName = this.entityName((char) codePoint);\n            }\n\n            if (entityName == null) {\n                // If no named entity, apply numeric escape or direct write.\n                // The original logic numerically escaped characters > 0x7F.\n                // This logic is now applied to the full codePoint.\n                if (codePoint > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(codePoint, 10));\n                    writer.write(';');\n                } else {\n                    // For ASCII characters (0x00 to 0x7F) that are not named entities,\n                    // write them directly.\n                    writer.write(codePoint);\n                }\n            } else {\n                // Write the named entity.\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n            i += charCount; // Advance the index by the number of chars in the current code point.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}