{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     * \n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     * \n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; ) {\n            // Get the codepoint at the current index. This handles surrogate pairs for high Unicode characters.\n            int codepoint = str.codePointAt(i);\n            // Determine how many Java 'char's this codepoint consumes (1 for BMP, 2 for supplementary).\n            int charCount = Character.charCount(codepoint);\n\n            String entityName = null;\n            // The entityName(char) method likely only maps named entities for characters in the Basic Multilingual Plane (BMP).\n            // Supplementary characters (codepoint > U+FFFF) do not have standard HTML named entities,\n            // and should always be escaped as numeric character references.\n            if (codepoint <= 0xFFFF) { // Check if it's a BMP character\n                entityName = this.entityName((char) codepoint);\n            }\n\n            if (entityName == null) {\n                // This branch handles characters that do not have a standard HTML named entity.\n                // This includes:\n                // 1. ASCII characters (0x00 to 0x7F) that don't have named entities (e.g., 'a', '1', space).\n                // 2. Non-ASCII BMP characters (0x80 to 0xFFFF) that don't have named entities (e.g., '\u00c0', '\u20ac').\n                // 3. Supplementary characters (codepoint > 0xFFFF), which never have named entities.\n\n                // If the codepoint is outside the ASCII range (0x00-0x7F), or if it's a supplementary character,\n                // it should be escaped as a numeric character reference (&#nnnnn;).\n                if (codepoint > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(codepoint, 10)); // Use the full codepoint value\n                    writer.write(';');\n                } else {\n                    // For ASCII characters (0x00-0x7F) that don't have a named entity,\n                    // write the character directly.\n                    writer.write((char) codepoint);\n                }\n            } else {\n                // This branch handles characters that have a standard HTML named entity (e.g., '<', '>', '&', '\"', '\u20ac').\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n            // Advance the index by the number of 'char's consumed by the current codepoint.\n            i += charCount;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}