{
    "generation": "/**\n * <p>\n * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n * passed.\n * </p>\n *\n * @param writer\n *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n * @param str\n *            The <code>String</code> to escape. Assumed to be a non-null value.\n * @throws IOException\n *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n *             methods.\n *\n * @see #escape(String)\n * @see Writer\n */\npublic void escape(Writer writer, String str) throws IOException {\n    int len = str.length();\n    for (int i = 0; i < len; i++) {\n        char c = str.charAt(i);\n        // Check if this is a high surrogate (start of a surrogate pair)\n        if (c >= 0xD800 && c <= 0xDBFF && i + 1 < len) {\n            char next = str.charAt(i + 1);\n            if (next >= 0xDC00 && next <= 0xDFFF) {\n                // This is a surrogate pair, combine them to get the code point\n                int codePoint = (c - 0xD800) * 0x400 + (next - 0xDC00) + 0x10000;\n                writer.write(\"&#\");\n                writer.write(Integer.toString(codePoint, 10));\n                writer.write(';');\n                i++; // Skip the next character since we've already processed it\n                continue;\n            }\n        }\n\n        String entityName = this.entityName(c);\n        if (entityName == null) {\n            if (c > 0x7F) {\n                writer.write(\"&#\");\n                writer.write(Integer.toString(c, 10));\n                writer.write(';');\n            } else {\n                writer.write(c);\n            }\n        } else {\n            writer.write('&');\n            writer.write(entityName);\n            writer.write(';');\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}