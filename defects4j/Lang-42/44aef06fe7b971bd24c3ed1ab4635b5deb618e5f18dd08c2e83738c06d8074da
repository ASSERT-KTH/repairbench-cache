{
    "generation": "    /**\n     * <p>\n     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>\n     * passed.\n     * </p>\n     *\n     * @param writer\n     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.\n     * @param str\n     *            The <code>String</code> to escape. Assumed to be a non-null value.\n     * @throws IOException\n     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}\n     *             methods.\n     *\n     * @see #escape(String)\n     * @see Writer\n     */\n    public void escape(Writer writer, String str) throws IOException {\n        int len = str.length();\n        for (int i = 0; i < len; i++) {\n            char c = str.charAt(i);\n            // Check if this is a high surrogate (start of a surrogate pair)\n            if (c >= '\\uD800' && c <= '\\uDBFF' && i + 1 < len) {\n                char nextChar = str.charAt(i + 1);\n                if (nextChar >= '\\uDC00' && nextChar <= '\\uDFFF') {\n                    // It's a surrogate pair - combine to get the real code point\n                    int codePoint = (c - '\\uD800') * 0x400 + (nextChar - '\\uDC00') + 0x10000;\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(codePoint));\n                    writer.write(';');\n                    i++; // skip the next character as we've processed it\n                    continue;\n                }\n            }\n\n            String entityName = this.entityName(c);\n            if (entityName == null) {\n                if (c > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                } else {\n                    writer.write(c);\n                }\n            } else {\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}