{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        // Note! Should not skip if `property` null since that'd skip check\n        // for config overrides, in case of root value\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            // Regardless of property, if no format overrides found, defaults are fine\n            return this;\n        }\n\n        // First: does the format specify a pattern? If yes, that overrides shape\n        // regardless of Shape, Locale, TimeZone explicit definitions\n        if (format.hasPattern()) {\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            // Standard DateFormat is Locale-dependant: creates SimpleDateFormat\n            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                    : serializers.getTimeZone();\n            // Same logic as below, either explicit via Format override, or default ok\n            // 21-Jun-2018, tatu: As per comments in [databind#2064], need explicit check\n            if (format.hasTimeZone() || !serializers.getConfig().hasExplicitTimeZone()) {\n                df.setTimeZone(tz);\n            }\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // If not pattern, does it specify Shape?\n        JsonFormat.Shape shape = format.getShape();\n        // If shape is specified as numeric, that overrides everything\n        // (and pattern wasn't specified)\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n        \n        // Otherwise, shape is String or not specified (handling differs slightly).\n        // But format may specify Locale or TimeZone.\n        // If not, we are done:\n        final boolean hasLocale = format.hasLocale();\n        final boolean hasTZ = format.hasTimeZone();\n        final boolean asString = (shape == JsonFormat.Shape.STRING);\n\n        // String means that we should use default format string, but may need\n        // to change TimeZone, Locale?\n        if (!hasLocale && !hasTZ && !asString) {\n            return this;\n        }\n\n        // Need to get baseline format to modify. Let's start with the default one\n        DateFormat df0 = serializers.getConfig().getDateFormat();\n        \n        // Jackson's own `StdDateFormat` is easy...\n        if (df0 instanceof StdDateFormat) {\n            StdDateFormat std = (StdDateFormat) df0;\n            if (format.hasLocale()) {\n                std = std.withLocale(format.getLocale());\n            }\n            // With timezone, need to verify it's not the default one:\n            // (NOTE: could perhaps avoid checks like this by explicit checks again...)\n            if (format.hasTimeZone()) {\n                 std = std.withTimeZone(format.getTimeZone());\n             }\n            return withFormat(Boolean.FALSE, std);\n        }\n\n        // otherwise, need to clone, if possible\n        if (!(df0 instanceof SimpleDateFormat)) {\n             serializers.reportBadDefinition(handledType(), String.format(\n \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\n df0.getClass().getName()));\n             // Fall back to default? Would be `this` but we know it's specific one, so:\n             return this;\n        }\n\n        // Ok, requires slightly contorted logic, but this is the only way...\n        SimpleDateFormat df = (SimpleDateFormat) df0;\n        if (hasLocale) {\n            // Ugh. No way to change `Locale`, create copy; must re-create completely:\n            df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n        } else {\n            // Can we just clone? Needs to be SimpleDateFormat, then\n            df = (SimpleDateFormat) df.clone();\n        }\n        // Timezone we can change tho:\n        TimeZone newTz = format.getTimeZone();\n        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n        if (changeTZ) {\n            df.setTimeZone(newTz);\n        }\n        // And finally, create new instance with changes\n        return withFormat(Boolean.FALSE, df);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}