{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        // Note! Should not skip if `property` null since that'd skip check\n        // for config overrides, in case of root value\n        // 24-Mar-2018, tatu: Wait. Why wouldn't we? Yes, need to check config overrides\n        //    and type settings, regardless of per-property settings.\n\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            // 17-Jan-2018, tatu: Make sure NOT to simply return `this` but use contextual\n            //    version if available (may miss overrides etc)\n            // 29-Aug-2019, tatu: Although... looks like `property` is null only for root value case?\n            //    And does not apply for contextualization? Needs more testing but maybe is ok.\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            // If format explicitly defined as numeric, MUST use timestamp output\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // First: custom pattern will override things\n        if (format.hasPattern()) {\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                    // [databind#1267]: Use configured TimeZone if available\n                    : serializers.getTimeZone();\n            df.setTimeZone(tz);\n            // Must force use of date format, disable timestamp production:\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, need one of these changes:\n        final boolean hasLocale = format.hasLocale();\n        final boolean hasTZ = format.hasTimeZone();\n        final boolean asString = (shape == JsonFormat.Shape.STRING || format.hasPattern()); // Also consider pattern as indication for String output\n\n        // Nothing to apply? Just return `this`\n        if (!hasLocale && !hasTZ && !asString) {\n            return this;\n        }\n\n        // We either have Locale/TZ override, or forced String output\n        \n        DateFormat df0 = serializers.getConfig().getDateFormat();\n        // Jackson's own `StdDateFormat` is quite easy to deal with...\n        if (df0 instanceof StdDateFormat) {\n            StdDateFormat std = (StdDateFormat) df0;\n            // Try to retain parametric settings\n            if (format.hasLocale()) {\n                std = std.withLocale(format.getLocale());\n            }\n            if (format.hasTimeZone()) {\n                std = std.withTimeZone(format.getTimeZone());\n            }\n            // And then use that modified format, forcing string output\n            return withFormat(Boolean.FALSE, std);\n        }\n\n        // 08-Jun-2017, tatu: Unfortunately there's no generally usable\n        //    mechanism for changing `DateFormat` instances (or even clone()ing)\n        //    So: require it be `SimpleDateFormat`; can't config other types\n        if (!(df0 instanceof SimpleDateFormat)) {\n            // 16-Jan-2018, tatu: Let's add null check for diagnostics\n            if (df0 == null) {\n                 // [databind#2183]: Should perhaps not fail but use default? Or throw exception?\n                 //   For now, retain original behavior\n                 return this;\n            }\n            serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\ndf0.getClass().getName()));\n        }\n        // If we get this far, MUST be SimpleDateFormat\n        SimpleDateFormat df = (SimpleDateFormat) df0;\n        final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();\n        // Ugh. No way to change `Locale`, create copy; must re-create completely:\n        if (format.hasLocale() && !loc.equals(serializers.getLocale())) {\n            // SimpleDateFormat has pattern-based constructor... might not be pattern\n            // from value, but...\n            df = new SimpleDateFormat(df.toPattern(), loc);\n        } else {\n            df = (SimpleDateFormat) df.clone();\n        }\n        TimeZone newTz = format.getTimeZone();\n        final boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n        if (changeTZ) {\n            df.setTimeZone(newTz);\n        }\n        // Either way, string format needed:\n        return withFormat(Boolean.FALSE, df);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}