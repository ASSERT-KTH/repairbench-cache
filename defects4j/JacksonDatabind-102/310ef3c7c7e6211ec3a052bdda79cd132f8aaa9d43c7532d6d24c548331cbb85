{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    // No early return since we need to check for config overrides even if property is null\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    \n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    if (format.hasPattern()) {\n        DateFormat df = createDateFormat(format.getPattern(), format.getLocale(), serializers.getLocale());\n        TimeZone tz = format.getTimeZone();\n        if (tz != null) {\n            df.setTimeZone(tz);\n        }\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    if (!shape.isString()) {\n        return this;\n    }\n\n    DateFormat df = serializers.getConfig().getDateFormat();\n    if (df == null) {\n        df = new SimpleDateFormat(\"yyyy-MM-dd\", serializers.getLocale());\n    } else if (!(df instanceof SimpleDateFormat)) {\n        df = new SimpleDateFormat(df.format(new Date()), serializers.getLocale());\n    }\n\n    SimpleDateFormat sdf = (SimpleDateFormat) df;\n    TimeZone tz = format.getTimeZone();\n    if (tz != null) {\n        sdf.setTimeZone(tz);\n    }\n    return withFormat(Boolean.FALSE, sdf);\n}\n\nprivate DateFormat createDateFormat(String pattern, Locale locale, Locale defaultLocale) {\n    if (locale != null) {\n        return new SimpleDateFormat(pattern, locale);\n    }\n    return new SimpleDateFormat(pattern, defaultLocale);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}