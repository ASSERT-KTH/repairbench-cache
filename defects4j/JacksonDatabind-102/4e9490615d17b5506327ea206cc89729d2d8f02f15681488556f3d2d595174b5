{
    "generation": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    // allow null BeanProperty so we still pick up config\u2010override for root values\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    // Simple case first: serialize as numeric timestamp?\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n\n    // If a custom pattern is specified, that always wins\n    if (format.hasPattern()) {\n        final Locale loc = format.hasLocale()\n                ? format.getLocale()\n                : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n        TimeZone tz = format.hasTimeZone()\n                ? format.getTimeZone()\n                : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n\n    // Otherwise handle locale/timezone/shape adjustments\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ     = format.hasTimeZone();\n    final boolean asString  = (shape == JsonFormat.Shape.STRING);\n\n    // if no special handling needed, just return default\n    if (!hasLocale && !hasTZ && !asString) {\n        return this;\n    }\n\n    DateFormat df0 = serializers.getConfig().getDateFormat();\n    // if using Jackson's own StdDateFormat, we can fluently change settings\n    if (df0 instanceof StdDateFormat) {\n        StdDateFormat std = (StdDateFormat) df0;\n        if (hasLocale) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (hasTZ) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(Boolean.FALSE, std);\n    }\n\n    // otherwise we must have a SimpleDateFormat to tweak/cloning\n    if (!(df0 instanceof SimpleDateFormat)) {\n        serializers.reportBadDefinition(handledType(), String.format(\n            \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\n            df0.getClass().getName()));\n    }\n    SimpleDateFormat df = (SimpleDateFormat) df0;\n    if (hasLocale) {\n        // recreate to change locale\n        df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        // simple clone to preserve pattern\n        df = (SimpleDateFormat) df.clone();\n    }\n    TimeZone newTz = format.getTimeZone();\n    if (newTz != null && !newTz.equals(df.getTimeZone())) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(Boolean.FALSE, df);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}