{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        // NOTE: config override needs to be checked FIRST, before property annotation;\n        // otherwise property annotation may override class-level config override.\n        // 03-Aug-2018, tatu: Ok, this is bit tricky, because we MUST also call\n        // `findFormatOverrides` which does check for property annotations. And we\n        // MUST use non-contextual instance (`this`) to call it. Ergo, need to\n        // fully check format settings first, then possibly create new instance.\n        // 17-Dec-2020, tatu: [databind#2962] This is still tricky, problematic really,\n        //   and seemingly we should NOT return `this` if format is null...\n        //   but for now leaving as is.\n\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            // 14-Apr-2020, tatu: As per [databind#2648] we should indeed NOT create a new instance\n            //    if there are no overrides. Specifically need to avoid trying to create custom\n            //    `SimpleDateFormat` because global default settings may be something else...\n            //    like `StdDateFormat` or custom one.\n             return this;\n        }\n\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // If not number, textual it is...\n        // But first: custom pattern will override things\n        if (format.hasPattern()) {\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                    : serializers.getTimeZone();\n            // 16-Jan-2019, tatu: We must indicate difference between implicit default choice\n            //   and explicit setting, so pass `Boolean.FALSE`\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, need one of these changes:\n        final boolean hasLocale = format.hasLocale();\n        final boolean hasTZ = format.hasTimeZone();\n        // let's also consider case of explicit Shape selection:\n        final boolean asString = (shape == JsonFormat.Shape.STRING);\n\n        // If nothing indicates change from defaults, just return `this`\n        if (!hasLocale && !hasTZ && !asString) {\n            return this;\n        }\n\n        // We will need a DateFormat, possibly based on existing one...\n        DateFormat df0 = serializers.getConfig().getDateFormat();\n        // Jackson's own `StdDateFormat` is quite easy to deal with...\n        if (df0 instanceof StdDateFormat) {\n            StdDateFormat std = (StdDateFormat) df0;\n            // Bit awkward, as we do not know for sure if shape was STRING or not but\n            // let's assume format using locale or timezone means textual format.\n            // 08-Nov-2017, tatu: Except for `SqlDateSerializer`! Need to avoid changing...\n            // TODO: Actually, figure out how to USE shape information\n            if (hasLocale) { // ok to pass null if no locale defined\n                std = std.withLocale(format.getLocale());\n            }\n            if (hasTZ) { // ok to pass null if no timezone defined\n                std = std.withTimeZone(format.getTimeZone());\n            }\n            return withFormat(Boolean.FALSE, std);\n        }\n\n        // 08-Jun-2017, tatu: Unfortunately there's no generally usable\n        //    mechanism for changing `DateFormat` instances (or even clone()ing)\n        //    So: require it be `SimpleDateFormat`; can't config other types\n        if (!(df0 instanceof SimpleDateFormat)) {\n            // 13-Jun-2017, tatu: Let's add note on StdDateFormat, may be confusing\n            serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone` (unless overridden by explicit @JsonFormat)\",\ndf0.getClass().getName()));\n        }\n        // Either way, we need concrete `SimpleDateFormat` instance to configure\n        SimpleDateFormat df = (SimpleDateFormat) df0;\n        if (hasLocale) {\n            // Ugh. No way to change `Locale`, create copy; must re-crete completely:\n            // 20-Apr-2017, tatu: And DON'T use `clone()` any more -- may not be thread-safe!\n            df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n        } else {\n            // 20-Apr-2017, tatu: And DON'T use `clone()` any more -- may not be thread-safe!\n            //   Need to create anew.\n            // 13-Jun-2017, tatu: Ideally we wouldn't need to create new instance, but seems we must\n            //   for now. Unfortunate. Looking for better solutions for future versions.\n            df = (SimpleDateFormat) df.clone();\n        }\n        TimeZone newTz = format.getTimeZone();\n        // Existing `df.getTimeZone()` should never be null\n        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n        if (changeTZ) {\n            df.setTimeZone(newTz);\n        }\n        // And finally, create variant instance with these settings:\n        return withFormat(Boolean.FALSE, df);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}