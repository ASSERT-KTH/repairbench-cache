{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        // Note! Should not skip if `property` null since that'd skip check\n        // for config overrides, in case of root value\n        //\n        // Original buggy code had:\n        // if (property == null) { return this; }\n        // This was incorrect, it bypassed override checks for root values.\n        // Removed the block. Now findFormatOverrides will handle null property\n        // by checking config overrides.\n\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // First: custom pattern will override things\n        if (format.hasPattern()) {\n            // 10-Mar-2017, tatu: Make sure specified timezone is used, overrides default one\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                    : serializers.getTimeZone();\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            // NOTE: we MUST create a clone here, because `SimpleDateFormat` is stateful, NOT\n            // thread-safe. Bonus: forces use of default locale, unless specified.\n            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, need one of these changes:\n        final boolean hasLocale = format.hasLocale();\n        final boolean hasTZ = format.hasTimeZone();\n        // [databind#1744]: even if not pattern, shape may be specified\n        final boolean asString = (shape == JsonFormat.Shape.STRING);\n\n        // Either specific format definition, or change in locale/timezone\n        if (!hasLocale && !hasTZ && !asString) {\n            return this;\n        }\n\n        // We are going to need a new format instance, configured\n        DateFormat df0 = serializers.getConfig().getDateFormat();\n        // Jackson's own `StdDateFormat` is quite easy to deal with...\n        if (df0 instanceof StdDateFormat) {\n            StdDateFormat std = (StdDateFormat) df0;\n            if (format.hasLocale()) {\n                std = std.withLocale(format.getLocale());\n            }\n            if (format.hasTimeZone()) {\n                std = std.withTimeZone(format.getTimeZone());\n            }\n            return withFormat(Boolean.FALSE, std);\n        }\n\n        // 08-Jun-2017, tatu: Unfortunately there's no generally usable\n        //    mechanism for changing `DateFormat` instances (or even clone()ing)\n        //    So: require it be `SimpleDateFormat`; can't config other types\n        // 19-Feb-2015, tatu: Actually, that's not true. Let's see if it is cloneable\n        // 21-Aug-2019, tatu: ... maybe not. Let's stick to SimpleDateFormat only for now.\n        /*\n        if (df0.getClass() == SimpleDateFormat.class) { // yes, check for exact match\n           // 10-Mar-2017, tatu: Make sure specified timezone is used, overrides default one\n           TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                   : serializers.getTimeZone();\n           // 08-Jun-2017, tatu: How about Locale? Can't change, need to create copy\n           SimpleDateFormat df = (SimpleDateFormat) df0.clone();\n           df.setTimeZone(tz);\n           return withFormat(Boolean.FALSE, df);\n        }\n        */\n        if (!(df0 instanceof SimpleDateFormat)) {\n            serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\ndf0.getClass().getName()));\n        }\n\n        // Try to clone, change locale if needed; otherwise create new one\n        SimpleDateFormat df = (SimpleDateFormat) df0;\n        final Locale loc = hasLocale ? format.getLocale() : serializers.getLocale();\n        if (!loc.equals(df.getLocale())) {\n            // Ugh. No way to change `Locale`, create copy; must re-crete completely:\n            df = new SimpleDateFormat(df.toPattern(), loc);\n        } else {\n            // Either way, need to clone if multiple settings possible\n            df = (SimpleDateFormat) df.clone();\n        }\n        // And then change timezone if needed\n        TimeZone newTz = format.getTimeZone();\n        // [databind#2172]: Check null for `newTz` is needed\n        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n        if (changeTZ) {\n            df.setTimeZone(newTz);\n        }\n        return withFormat(Boolean.FALSE, df);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}