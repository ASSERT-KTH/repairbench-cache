{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        // Note! Should not skip if `property` null since that'd skip check\n        // for config overrides, in case of root value\n        if (property == null) {\n            return this;\n        }\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // First: custom pattern will override things\n        if (format.hasPattern()) {\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                    : serializers.getTimeZone();\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, need one of these changes:\n        final boolean hasLocale = format.hasLocale();\n        final boolean hasTZ = format.hasTimeZone();\n        final boolean asString = (shape == JsonFormat.Shape.STRING);\n\n        if (!hasLocale && !hasTZ && !asString) {\n            return this;\n        }\n\n        DateFormat df0 = serializers.getConfig().getDateFormat();\n        // Handle the case where we have a custom DateFormat instance\n        if (df0 instanceof StdDateFormat) {\n            StdDateFormat std = (StdDateFormat) df0;\n            if (format.hasLocale()) {\n                std = std.withLocale(format.getLocale());\n            }\n            if (format.hasTimeZone()) {\n                std = std.withTimeZone(format.getTimeZone());\n            }\n            return withFormat(Boolean.FALSE, std);\n        } else if (df0 instanceof SimpleDateFormat) {\n            SimpleDateFormat df = (SimpleDateFormat) df0;\n            if (hasLocale) {\n                // Ugh. No way to change `Locale`, create copy; must re-crete completely:\n                df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n            } else {\n                df = (SimpleDateFormat) df.clone();\n            }\n            TimeZone newTz = format.getTimeZone();\n            boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n            if (changeTZ) {\n                df.setTimeZone(newTz);\n            }\n            return withFormat(Boolean.FALSE, df);\n        } else {\n            // If the DateFormat is not a SimpleDateFormat or StdDateFormat,\n            // we need to create a new SimpleDateFormat instance with the desired pattern\n            String pattern = format.hasPattern() ? format.getPattern() : \"yyyy-MM-dd\";\n            Locale loc = format.hasLocale() ? format.getLocale() : Locale.getDefault();\n            SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : TimeZone.getDefault();\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}