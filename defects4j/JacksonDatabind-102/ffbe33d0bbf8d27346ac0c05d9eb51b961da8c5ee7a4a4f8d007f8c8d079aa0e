{
    "generation": "    @Override\n    public JsonSerializer<?> createContextual(SerializerProvider serializers,\n            BeanProperty property) throws JsonMappingException\n    {\n        // [databind#2064]: Should NOT skip if property is null, as we may have\n        //   global config overrides to consider\n        /*\n        // Note! Should not skip if `property` null since that'd skip check\n        // for config overrides, in case of root value\n        if (property == null) {\n            return this;\n        }\n        */\n        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n        if (format == null) {\n            // 12-Jun-2020, tatu: Is this necessary? Looks like it shouldn't be.\n            // If it IS, need to verify `_useTimestamp` part...\n            /*\n            Boolean B = serializers.getConfig().getDefaultPropertyFormat(handledType())\n                    .getFeature(JsonFormat.Feature.WRITE_DATES_AS_TIMESTAMPS);\n            if (B != null) {\n                return withFormat(B, null);\n            }\n            */\n            return this;\n        }\n        // Simple case first: serialize as numeric timestamp?\n        JsonFormat.Shape shape = format.getShape();\n        if (shape.isNumeric()) {\n            return withFormat(Boolean.TRUE, null);\n        }\n\n        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n        // First: custom pattern will override things\n        if (format.hasPattern()) {\n            final Locale loc = format.hasLocale()\n                            ? format.getLocale()\n                            : serializers.getLocale();\n            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                    : serializers.getTimeZone();\n            // 14-Mar-2019, tatu: As per [databind#2257], need to ensure timezone is applied,\n            //    when specified (or, if not, use the default)\n            if (tz == null) {\n                tz = serializers.getTimeZone();\n            }\n            df.setTimeZone(tz);\n            return withFormat(Boolean.FALSE, df);\n        }\n\n        // Otherwise, need one of these changes:\n        final boolean hasLocale = format.hasLocale();\n        final boolean hasTZ = format.hasTimeZone();\n        // 12-Jun-2017, tatu: Although we don't yet support writing path-through\n        //   Object values, need to avoid error in case Shape is OBJECT or ARRAY\n        // Also: If Shape is STRING, need to ensure we use String, not timestamp.\n//        final boolean asString = (shape == JsonFormat.Shape.STRING);\n\n        // 12-Jun-2020, tatu: Above check seems wrong; should rather check if\n        //    shape is STRING?\n        final boolean asString = format.getShape() == JsonFormat.Shape.STRING;\n\n        if (!hasLocale && !hasTZ && !asString) {\n            return this;\n        }\n\n        DateFormat df0 = serializers.getConfig().getDateFormat();\n        // Jackson's own `StdDateFormat` is quite easy to deal with...\n        if (df0 instanceof StdDateFormat) {\n            StdDateFormat std = (StdDateFormat) df0;\n            if (format.hasLocale()) {\n                std = std.withLocale(format.getLocale());\n            }\n            // [databind#2174]: need to retain default TimeZone if none specified\n            // (defaults determined by StdDateFormat)\n            if (format.hasTimeZone()) {\n                std = std.withTimeZone(format.getTimeZone());\n            }\n            return withFormat(Boolean.FALSE, std);\n        }\n\n        // 08-Jun-2017, tatu: Unfortunately there's no generally usable\n        //    mechanism for changing `DateFormat` instances (or even clone()ing)\n        //    So: require it be `SimpleDateFormat`; can't config other types\n        // 17-Mar-2019, tatu: As per [databind#2275], not true, can use `clone()`\n        if (!(df0 instanceof SimpleDateFormat)) {\n            // 14-Mar-2019, tatu: Let's try to use it as-is? Better than failing, maybe?\n            //  Looks like this leads to problems ultimately: need to be able to clone instance\n            serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\ndf0.getClass().getName()));\n        }\n        SimpleDateFormat df = (SimpleDateFormat) df0;\n        if (hasLocale) {\n            // Ugh. No way to change `Locale`, create copy; must re-crete completely:\n             df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n        } else {\n            // 17-Mar-2019, tatu: But can clone...\n             df = (SimpleDateFormat) df.clone();\n        }\n        TimeZone newTz = format.getTimeZone();\n        // 14-Mar-2019, tatu: As per [databind#2257], need to ensure timezone is applied,\n        //    either use specified, or default if none specified.\n        // 07-Jun-2019, tatu: But only IF explicitly set...\n        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n        if (changeTZ) {\n            df.setTimeZone(newTz);\n        }\n        return withFormat(Boolean.FALSE, df);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}