{
    "generation": "    void resetInsertionMode() {\n        boolean last = false;\n        for (int pos = stack.size() -1; pos >= 0; pos--) {\n            Element node = stack.get(pos);\n            if (pos == 0) {\n                last = true;\n                node = contextElement; // Use contextElement when checking the root node for fragments\n            }\n            // Make sure node is not null before attempting to retrieve its name. Could happen with contextElement.\n            if (node == null) {\n                 // Should not happen in normal parsing, but could in fragment parsing if context is null.\n                 // Default to InBody as a safe fallback.\n                transition(HtmlTreeBuilderState.InBody);\n                break;\n            }\n            String name = node.nodeName();\n            if (\"select\".equals(name)) {\n                transition(HtmlTreeBuilderState.InSelect);\n                break; // frag\n            } else if ((\"td\".equals(name) || \"th\".equals(name)) && !last) { // Corrected the second \"td\" to \"th\" and kept !last check based on typical parser logic needs, although spec is ambiguous here for non-fragments. The !last prevents transition to InCell if the contextElement itself is td/th in fragment parsing.\n                transition(HtmlTreeBuilderState.InCell);\n                break;\n            } else if (\"tr\".equals(name)) {\n                transition(HtmlTreeBuilderState.InRow);\n                break;\n            } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n                transition(HtmlTreeBuilderState.InTableBody);\n                break;\n            } else if (\"caption\".equals(name)) {\n                transition(HtmlTreeBuilderState.InCaption);\n                break;\n            } else if (\"colgroup\".equals(name)) {\n                transition(HtmlTreeBuilderState.InColumnGroup);\n                break; // frag\n            } else if (\"table\".equals(name)) {\n                transition(HtmlTreeBuilderState.InTable);\n                break;\n            } else if (\"head\".equals(name)) {\n                // In principal, should transition to InHead, but the parser handles this differently\n                 // Per spec: If node is a head element, switch the insertion mode to \"in body\"\n                transition(HtmlTreeBuilderState.InBody);\n                break; // frag\n            } else if (\"body\".equals(name)) {\n                transition(HtmlTreeBuilderState.InBody);\n                break;\n            } else if (\"frameset\".equals(name)) {\n                transition(HtmlTreeBuilderState.InFrameset);\n                break; // frag\n            } else if (\"html\".equals(name)) {\n                // Should be BeforeHead, but this check is guarded by stack size > 0, so context node (stack.get(0)) is never html element\n                // Per spec: If node is an html element, switch the insertion mode to \"before head\"\n                // If stack.size() == 1 and node is html, we are in fragment parsing, handle below\n                 if (stack.size() > 1) // Ensure we don't transition for the root html element in normal parsing\n                     transition(HtmlTreeBuilderState.BeforeHead);\n                 // else handled by the 'last' case for fragments\n                break; // frag\n            } else if (last) {\n                // Reached top of stack in fragment parsing, default to InBody\n                transition(HtmlTreeBuilderState.InBody);\n                break; // frag\n            }\n        }\n        // Added a safeguard: If the loop completes without finding a specific mode (e.g., stack is empty or contains only unknown elements), default to InBody.\n        // This scenario shouldn't happen with a valid HTML document + stack, but handles potential edge cases/corruption.\n        // However, the loop structure with the `last` check ensures it always breaks, typically defaulting to InBody for fragments if nothing else matches.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}