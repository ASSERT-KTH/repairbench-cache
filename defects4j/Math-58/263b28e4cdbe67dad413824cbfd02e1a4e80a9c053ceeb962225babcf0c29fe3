{
    "generation": "    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        double[] params = fit(new Gaussian.Parametric() {\n            @Override\n            public double value(double x, double... param) {\n                // Force sigma to be positive\n                double[] p = param.clone();\n                if (p[2] < 0) {\n                    p[2] = Math.abs(p[2]);\n                }\n                return super.value(x, p);\n            }\n\n            @Override\n            public double[] gradient(double x, double... param) {\n                // Force sigma to be positive\n                double[] p = param.clone();\n                if (p[2] < 0) {\n                    p[2] = Math.abs(p[2]);\n                }\n                double[] grad = super.gradient(x, p);\n                // If sigma was negative, correct the sign of the gradient wrt sigma\n                if (param[2] < 0) {\n                    grad[2] = -grad[2];\n                }\n                return grad;\n            }\n        }, guess);\n        // Ensure the sigma parameter is always positive before returning\n        if (params[2] < 0) {\n            params[2] = Math.abs(params[2]);\n        }\n        return params;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}