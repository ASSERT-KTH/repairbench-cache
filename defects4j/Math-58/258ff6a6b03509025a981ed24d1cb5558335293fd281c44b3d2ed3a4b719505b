{
    "generation": "    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above): {@code norm}, {@code mean},\n     * and {@code sigma}. If the optimizer attempts to set the {@code sigma}\n     * parameter to a non-positive value during the fitting process, the fit\n     * is considered to have failed, and {@code { NaN, NaN, NaN }} is returned.\n     * @throws org.apache.commons.math.exception.ConvergenceException if the algorithm failed\n     * to converge for reasons other than a non-positive sigma.\n     */\n    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        try {\n            // Perform the fitting. This calls the underlying fit method\n            // (likely from a superclass like CurveFitter) which uses an\n            // optimizer. The optimizer interacts with Gaussian.Parametric.\n            return fit(new Gaussian.Parametric(), guess);\n        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {\n            // The Gaussian.Parametric function throws this exception if the\n            // standard deviation (sigma, parameter at index 2) is not positive.\n            // If the optimizer explores such values, the fit fails.\n            // As indicated by the testMath519 comment, catch this exception\n            // and return NaN values.\n            return new double[] { Double.NaN, Double.NaN, Double.NaN };\n        }\n        // Other exceptions, such as ConvergenceException if the optimizer fails\n        // to converge for other reasons, will propagate up.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}