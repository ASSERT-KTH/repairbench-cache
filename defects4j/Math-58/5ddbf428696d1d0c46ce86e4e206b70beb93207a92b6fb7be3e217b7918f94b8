{
    "generation": "/**\n * Fits a Gaussian function to the observed points.\n *\n * @return the parameters of the Gaussian function that best fits the\n * observed points (in the same order as above).\n */\npublic double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n    \n    // Create a parametric Gaussian with constrained sigma (must be positive)\n    Gaussian.Parametric gaussian = new Gaussian.Parametric() {\n        @Override\n        public double value(double x, double[] params) {\n            // Ensure sigma is positive by using absolute value\n            double[] checkedParams = params.clone();\n            checkedParams[2] = Math.abs(checkedParams[2]);\n            return super.value(x, checkedParams);\n        }\n        \n        @Override\n        public double[] gradient(double x, double[] params) {\n            double[] checkedParams = params.clone();\n            checkedParams[2] = Math.abs(checkedParams[2]);\n            return super.gradient(x, checkedParams);\n        }\n    };\n    \n    return fit(gaussian, guess);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}