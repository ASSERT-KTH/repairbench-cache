{
    "generation": "    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above), or {@code NaN} values\n     * if the algorithm failed to converge or the computation resulted in\n     * illegal parameters.\n     */\n    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        try {\n            return fit(new Gaussian.Parametric(), guess);\n        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {\n            // As observed in MATH-519, the optimizer might probe\n            // parameter values that are illegal for the model function\n            // (e.g. negative standard deviation). Issue is more general\n            // than MATH-519 indicates.\n            final int numParams = guess.length;\n            final double[] result = new double[numParams];\n            java.util.Arrays.fill(result, Double.NaN);\n            return result;\n        } catch (org.apache.commons.math.optimization.OptimizationException e) {\n            // Initial guess may be too far from optimum. Or, computation\n            // resulted in parameters that are illegal for the function.\n            // Those exceptions are not separated, so assume the latter\n            // and return NaN.\n            // This is consistent with the requirement in MATH-519.\n            final int numParams = guess.length;\n            final double[] result = new double[numParams];\n            java.util.Arrays.fill(result, Double.NaN);\n            return result;\n       }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}