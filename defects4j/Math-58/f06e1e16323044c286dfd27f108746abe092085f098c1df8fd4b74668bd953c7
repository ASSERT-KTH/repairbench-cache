{
    "generation": "/**\n * Fits a Gaussian function to the observed points.\n *\n * @return the parameters of the Gaussian function that best fits the\n * observed points (in the same order as above).\n */\npublic double[] fit() {\n    final double[] guess = new ParameterGuesser(getObservations()).guess();\n    // wrap the Gaussian.Parametric so that any illegal (e.g. \u03c3<=0) evaluations\n    // return NaN instead of throwing and aborting the optimization\n    return fit(new Gaussian.Parametric() {\n        @Override\n        public double value(double x, double... parameters) {\n            try {\n                return super.value(x, parameters);\n            } catch (RuntimeException e) {\n                return Double.NaN;\n            }\n        }\n        @Override\n        public double[] gradient(double x, double... parameters) {\n            try {\n                return super.gradient(x, parameters);\n            } catch (RuntimeException e) {\n                double[] nan = new double[parameters.length];\n                for (int i = 0; i < nan.length; i++) {\n                    nan[i] = Double.NaN;\n                }\n                return nan;\n            }\n        }\n    }, guess);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}