{
    "generation": "public double[] fit() {\n    final double[] guess = new ParameterGuesser(getObservations()).guess();\n    return fit(new Gaussian.Parametric() {\n        @Override\n        public double value(double x, double[] p) {\n            try {\n                return super.value(x, p);\n            } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {\n                // Instead of letting negative sigma cause an exception,\n                // return NaN so the optimizer can handle it gracefully.\n                return Double.NaN;\n            }\n        }\n\n        @Override\n        public double[] gradient(double x, double[] p) {\n            try {\n                return super.gradient(x, p);\n            } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {\n                final double[] grad = new double[p.length];\n                for (int i = 0; i < grad.length; i++) {\n                    grad[i] = Double.NaN;\n                }\n                return grad;\n            }\n        }\n    }, guess);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}