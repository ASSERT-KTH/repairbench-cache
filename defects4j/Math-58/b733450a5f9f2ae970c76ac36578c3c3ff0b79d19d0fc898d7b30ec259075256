{
    "generation": "    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        Gaussian.Parametric f = new Gaussian.Parametric() {\n            @Override\n            public double value(double x, double[] p) {\n                try {\n                    return super.value(x, p);\n                } catch (NotStrictlyPositiveException e) {\n                    // Catch the exception and return a very large value to \n                    // indicate that the current parameters are not good.\n                    return Double.POSITIVE_INFINITY;\n                }\n            }\n\n            @Override\n            public double[] gradient(double x, double[] p) {\n                try {\n                    return super.gradient(x, p);\n                } catch (NotStrictlyPositiveException e) {\n                    // Catch the exception and return a very large value to \n                    // indicate that the current parameters are not good.\n                    double[] g = new double[3];\n                    g[0] = Double.POSITIVE_INFINITY;\n                    g[1] = Double.POSITIVE_INFINITY;\n                    g[2] = Double.POSITIVE_INFINITY;\n                    return g;\n                }\n            }\n        };\n        return fit(f, guess);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}