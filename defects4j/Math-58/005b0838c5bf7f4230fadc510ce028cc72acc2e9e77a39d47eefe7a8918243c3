{
    "generation": "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n    // Wrap the Gaussian function so that if the sigma parameter is negative (or zero)\n    // we use its absolute value rather than throwing an exception.\n    Gaussian.Parametric func = new Gaussian.Parametric() {\n        @Override\n        public double value(double x, double[] parameters) {\n            double a = parameters[0];\n            double mu = parameters[1];\n            // Instead of requiring sigma > 0 we use its absolute value.\n            double sigma = parameters[2] <= 0 ? -parameters[2] : parameters[2];\n            return a * Math.exp(-0.5 * (x - mu) * (x - mu) / (sigma * sigma));\n        }\n\n        @Override\n        public double[] gradient(double x, double[] parameters) {\n            double a = parameters[0];\n            double mu = parameters[1];\n            double sigmaOrig = parameters[2];\n            // Use the absolute value for sigma in the evaluation.\n            double sigma = sigmaOrig <= 0 ? -sigmaOrig : sigmaOrig;\n            double diff = x - mu;\n            double expTerm = Math.exp(-0.5 * diff * diff / (sigma * sigma));\n            double dA = expTerm;\n            double dMu = a * expTerm * diff / (sigma * sigma);\n            double dSigma = a * expTerm * diff * diff / (sigma * sigma * sigma);\n            // If the original sigma was negative, flip the sign of the derivative.\n            if (sigmaOrig < 0) {\n                dSigma = -dSigma;\n            }\n            return new double[] { dA, dMu, dSigma };\n        }\n    };\n\n    return fit(func, guess);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}