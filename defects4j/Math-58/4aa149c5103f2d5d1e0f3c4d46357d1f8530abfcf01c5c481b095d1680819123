{
    "generation": "    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        try {\n            return fit(new Gaussian.Parametric(), guess);\n        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {\n            // Try with abs(sigma) from guess in case the guessed standard deviation is negative\n            double[] safeGuess = guess.clone();\n            if (safeGuess.length > 2 && safeGuess[2] <= 0) {\n                safeGuess[2] = Math.abs(safeGuess[2]);\n                if (safeGuess[2] == 0) {\n                    safeGuess[2] = 1.0; // fallback to a default positive value\n                }\n            }\n            return fit(new Gaussian.Parametric(), safeGuess);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}