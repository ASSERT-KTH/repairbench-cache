{
    "generation": "/**\n * Fits a Gaussian function to the observed points.\n *\n * @return the parameters of the Gaussian function that best fits the\n * observed points (in the same order as above).\n */\npublic double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n    try {\n        return fit(new Gaussian.Parametric(), guess);\n    } catch (Exception e) {\n        // If the optimizer tries negative sigma value, return NaNs as expected by testMath519\n        double[] nanParams = new double[guess.length];\n        for (int i = 0; i < nanParams.length; i++) {\n            nanParams[i] = Double.NaN;\n        }\n        return nanParams;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}