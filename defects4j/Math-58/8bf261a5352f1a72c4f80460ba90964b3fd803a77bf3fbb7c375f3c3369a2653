{
    "generation": "    /**\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     */\n    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        ParametricRealFunction wrappedFunc = new ParametricRealFunction() {\n            public double value(double x, double[] parameters) {\n                double[] wrappedParams = parameters.clone();\n                wrappedParams[2] = Math.abs(wrappedParams[2]);\n                return new Gaussian.Parametric().value(x, wrappedParams);\n            }\n\n            public double[] gradient(double x, double[] parameters) {\n                double[] wrappedParams = parameters.clone();\n                wrappedParams[2] = Math.abs(wrappedParams[2]);\n                double[] gradient = new Gaussian.Parametric().gradient(x, wrappedParams);\n                if (parameters[2] != 0) {\n                    gradient[2] *= Math.signum(parameters[2]);\n                } else {\n                    gradient[2] = 0;\n                }\n                return gradient;\n            }\n        };\n        double[] params = fit(wrappedFunc, guess);\n        params[2] = Math.abs(params[2]);\n        return params;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}