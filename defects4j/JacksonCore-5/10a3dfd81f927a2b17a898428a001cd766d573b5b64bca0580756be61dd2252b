{
    "generation": "    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) { // Max int is 10 digits\n            return -1;\n        }\n\n        // Per RFC 6901, array indices must be positive decimal integers\n        // without leading zeros, except for \"0\" itself.\n        if (len > 1 && str.charAt(0) == '0') {\n            return -1;\n        }\n\n        for (int i = 0; i < len; ++i) {\n            // BUG FIX: The original code had 'str.charAt(i++)', which would\n            // increment 'i' twice per iteration (once inside charAt, once in loop condition),\n            // causing it to skip characters.\n            char c = str.charAt(i);\n            if (c > '9' || c < '0') {\n                return -1; // Not a digit\n            }\n        }\n\n        // At this point, we know it's a string of 1-10 digits, with no leading zeros (unless \"0\").\n        // Now, check for integer overflow if it's a 10-digit number.\n        if (len == 10) {\n            // If it's 10 digits, it might exceed Integer.MAX_VALUE.\n            // Use parseLong to avoid overflow during parsing before comparison.\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1; // Too large to fit in an int.\n            }\n        }\n        // If it's less than 10 digits, or 10 digits but fits in int,\n        // it's a valid integer representation.\n        // NumberInput.parseInt handles the final string to int conversion.\n        return NumberInput.parseInt(str);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}