{
    "generation": "    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) { // Max length for Integer.MAX_VALUE is 10 digits\n            return -1;\n        }\n        // Strict JSON Pointer indices disallow leading zeros, unless it's \"0\" itself.\n        // E.g., \"0\" -> 0 (valid)\n        // \"01\" -> -1 (invalid as index, treated as name \"01\")\n        if (len > 1 && str.charAt(0) == '0') {\n            return -1;\n        }\n\n        // Validate all characters are digits\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i); // FIX: Removed i++ here; 'i' is already incremented by loop header\n            if (c > '9' || c < '0') {\n                return -1; // Found non-digit character (e.g., 'e' in \"1e0\", '-' in \"-1\")\n            }\n        }\n        \n        // For 10-digit numbers, explicitly check for overflow against Integer.MAX_VALUE\n        if (len == 10) {\n            // Note: At this point, we are guaranteed all chars are digits.\n            // NumberInput.parseLong will not throw NumberFormatException.\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1; // Number too large to fit in int\n            }\n        }\n        // For numbers <= 9 digits, or 10-digit numbers that fit, parse them.\n        // Note: At this point, we are guaranteed all chars are digits and number fits in int.\n        // NumberInput.parseInt will not throw NumberFormatException.\n        return NumberInput.parseInt(str);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}