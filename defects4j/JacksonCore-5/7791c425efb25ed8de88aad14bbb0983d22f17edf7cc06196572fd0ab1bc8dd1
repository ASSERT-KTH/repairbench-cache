{
    "generation": "    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) { // Max 10 digits for Integer.MAX_VALUE (2147483647)\n            return -1;\n        }\n\n        // RFC 6901, Section 3: \"Leading zeros are not allowed on integers.\"\n        // Except for the number \"0\" itself.\n        if (len > 1 && str.charAt(0) == '0') {\n            return -1;\n        }\n\n        for (int i = 0; i < len; ++i) {\n            // BUG FIX: The original code had `str.charAt(i++)`, which incremented `i` twice per loop,\n            // causing it to skip characters and miss validation.\n            char c = str.charAt(i); \n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        // At this point, we know 'str' contains only digits, is 1-10 characters long,\n        // and does not have a leading '0' unless it's \"0\" itself.\n\n        // For 10-digit numbers, we need to check if it exceeds Integer.MAX_VALUE.\n        // NumberInput.parseInt would throw NumberFormatException for such strings.\n        // JsonPointer spec implies indices must fit into standard integer types.\n        if (len == 10) {\n            long l = NumberInput.parseLong(str); // NumberInput.parseLong handles parsing\n            if (l > Integer.MAX_VALUE) { // Check if it exceeds max int value\n                return -1;\n            }\n        }\n        // For numbers less than 10 digits, or 10 digits within Integer.MAX_VALUE,\n        // NumberInput.parseInt is safe because we've already verified the string\n        // only contains digits and fits the criteria.\n        return NumberInput.parseInt(str);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}