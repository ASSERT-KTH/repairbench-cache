{
    "generation": "    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        // JSON Pointer ABNF for array indices (from RFC 6901, Section 3):\n        // \"0\" / (DIGIT1-9 *DIGIT)\n        // This implies:\n        // 1. Must be a sequence of digits.\n        // 2. Cannot have leading zeros if the number is greater than 0 (i.e., \"01\" is invalid, but \"0\" is valid).\n        // 3. Negative numbers are not allowed.\n\n        if (len == 0 || len > 10) { // len=0: invalid empty string. len > 10: too long for int.\n            return -1;\n        }\n\n        // JSON Pointer specific check: Disallow leading zeros for multi-digit numbers.\n        // Example: \"01\" should be invalid, but \"0\" is valid.\n        if (len > 1 && str.charAt(0) == '0') {\n            return -1;\n        }\n\n        // Validate that all characters are digits.\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i); // BUG FIX: Original code had `i++` inside `str.charAt(i++)`,\n                                    // causing `i` to increment twice per loop, skipping characters.\n                                    // This caused \"1e0\" to pass digit validation.\n            if (c > '9' || c < '0') {\n                return -1; // Found a non-digit character (e.g., 'e', '-', etc.)\n            }\n        }\n\n        // At this point, `str` consists only of digits, its length is valid (1 to 10),\n        // and it adheres to the leading zero rule.\n\n        // For 10-digit numbers, explicitly check for overflow against Integer.MAX_VALUE.\n        // Integer.MAX_VALUE is 2,147,483,647 (10 digits).\n        if (len == 10) {\n            long l = NumberInput.parseLong(str); // This will parse correctly as it's pure digits.\n            if (l > Integer.MAX_VALUE) {\n                return -1; // Number is too large to fit in an int\n            }\n        }\n        // For lengths < 10, if all characters are digits, NumberInput.parseInt will not overflow.\n\n        return NumberInput.parseInt(str); // Safe to parse now.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}