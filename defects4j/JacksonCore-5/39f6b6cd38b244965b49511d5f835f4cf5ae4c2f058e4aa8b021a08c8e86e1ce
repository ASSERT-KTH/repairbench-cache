{
    "generation": "    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n        for (int i = 0; i < len; ++i) {\n            // BUG: Original code had 'str.charAt(i++)', which incremented 'i' twice\n            // per loop iteration (once in charAt and once in loop header),\n            // causing it to skip checking alternate characters.\n            // Fixed to check every character.\n            char c = str.charAt(i); \n            if (c > '9' || c < '0') {\n                return -1;\n            }\n        }\n        if (len == 10) {\n            // For 10-digit numbers, we must ensure it doesn't exceed Integer.MAX_VALUE.\n            // A long parse is used for this boundary check.\n            long l = NumberInput.parseLong(str);\n            if (l > Integer.MAX_VALUE) {\n                return -1;\n            }\n            // If it's a 10-digit number that fits, fall through to parseInt.\n            // The call below will succeed or throw NumberFormatException\n            // if NumberInput.parseInt is strict about overflow (which it should be).\n            // However, since we've already validated it fits, parseInt should be fine.\n        }\n        // At this point, we know the string consists only of digits and is\n        // at most 10 digits long, and if 10 digits, it fits into an int.\n        // NumberInput.parseInt will handle the actual conversion.\n        return NumberInput.parseInt(str);\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}