{
    "generation": "    private final static int _parseIndex(String str) {\n        final int len = str.length();\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n        // An index must be non-empty and not excessively long (over 10 digits for int MAX_VALUE)\n        if (len == 0 || len > 10) {\n            return -1;\n        }\n\n        // Validate all characters are digits.\n        // Fix: The original code had `char c = str.charAt(i++);` which was incorrect,\n        // incrementing `i` twice per loop iteration and skipping characters.\n        for (int i = 0; i < len; ++i) {\n            char c = str.charAt(i); // Correctly access the character at current index i\n            if (c > '9' || c < '0') {\n                return -1; // Not a digit\n            }\n        }\n\n        // At this point, `str` consists solely of digits, and its length is between 1 and 10.\n        // We need to parse it and ensure it fits within a non-negative int range (0 to Integer.MAX_VALUE).\n        // Parsing as a long first is the safest way to detect potential overflow\n        // without throwing NumberFormatException.\n        long l = NumberInput.parseLong(str);\n\n        // An index must be non-negative and fit within Integer.MAX_VALUE.\n        if (l < 0 || l > Integer.MAX_VALUE) {\n            return -1; // Value is negative or too large for an int index\n        }\n        return (int) l; // If valid, cast to int and return\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}