{
    "generation": "    private final static int _parseIndex(String str) {\n        final int len = str.length();\n\n        // [Issue#133]: beware of super long indexes; assume we never\n        // have arrays over 2 billion entries so ints are fine.\n\n        // 1. Basic length checks and leading zero rule (RFC 6901)\n        if (len == 0) {\n            return -1; // Empty string is not a valid index\n        }\n        // An array index string MUST NOT contain leading zeroes, unless it is \"0\".\n        // This implies that if length > 1, the first character cannot be '0'.\n        if (len > 1 && str.charAt(0) == '0') {\n            return -1;\n        }\n        // A 10-digit number can be Integer.MAX_VALUE (2147483647).\n        // A string with more than 10 digits will always exceed Integer.MAX_VALUE.\n        if (len > 10) {\n            return -1;\n        }\n\n        // 2. Character validation: ensure all characters are digits\n        for (int i = 0; i < len; ++i) {\n            // BUG FIX: The original code had `str.charAt(i++)` which incremented `i` twice per loop iteration,\n            // causing it to skip characters. It should only be incremented by the `for` loop's `++i`.\n            char c = str.charAt(i);\n            if (c < '0' || c > '9') {\n                return -1; // Non-digit character found (e.g., 'e' in \"1e0\")\n            }\n        }\n\n        // 3. Parse and check value range\n        // At this point, we know 'str' contains only digits,\n        // has no leading zeros (unless it's \"0\"), and its length is at most 10.\n        // Use NumberInput.parseLong to safely parse the number, then check if it fits into an int.\n        long l = NumberInput.parseLong(str);\n        if (l > Integer.MAX_VALUE) { // Check if the parsed value exceeds int max\n            return -1;\n        }\n        // Since we've already validated characters are digits and handled leading zeros,\n        // 'l' will always be non-negative.\n\n        return (int) l;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}