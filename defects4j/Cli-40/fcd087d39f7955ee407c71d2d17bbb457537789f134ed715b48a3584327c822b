{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    // Attempt to handle direct type values like Integer, Double, etc.\n    else if (clazz == Integer.class)\n    {\n        try {\n            return (T) Integer.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Unable to parse value '\" + str + \"' as Integer\");\n        }\n    }\n    else if (clazz == Long.class)\n    {\n        try {\n            return (T) Long.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Unable to parse value '\" + str + \"' as Long\");\n        }\n    }\n    else if (clazz == Double.class)\n    {\n        try {\n            return (T) Double.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Unable to parse value '\" + str + \"' as Double\");\n        }\n    }\n    else if (clazz == Float.class)\n    {\n        try {\n            return (T) Float.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Unable to parse value '\" + str + \"' as Float\");\n        }\n    }\n    else if (clazz == Short.class)\n    {\n        try {\n            return (T) Short.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Unable to parse value '\" + str + \"' as Short\");\n        }\n    }\n    else if (clazz == Byte.class)\n    {\n        try {\n            return (T) Byte.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Unable to parse value '\" + str + \"' as Byte\");\n        }\n    }\n    else if (clazz == Boolean.class)\n    {\n        try {\n            return (T) Boolean.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Unable to parse value '\" + str + \"' as Boolean\");\n        }\n    }\n    else\n    {\n        throw new ParseException(\"Unsupported value class: \" + clazz);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}