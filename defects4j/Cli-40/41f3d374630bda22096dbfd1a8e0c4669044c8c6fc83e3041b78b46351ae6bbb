{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    try {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return (T) str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return (T) createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return (T) createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return (T) createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return (T) createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return (T) createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return (T) openFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return (T) createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return (T) createURL(str);\n        }\n        else if (clazz == Number.class || clazz == Integer.class || clazz == Long.class ||\n                 clazz == Double.class || clazz == Float.class || clazz == Short.class || clazz == Byte.class)\n        {\n            Number num = createNumber(str);\n            if (clazz == Integer.class) {\n                if (!(num instanceof Integer)) {\n                    throw new ParseException(\"Value \\\"\" + str + \"\\\" is not an Integer\");\n                }\n                return (T) num;\n            }\n            if (clazz == Long.class) {\n                if (!(num instanceof Long)) {\n                    throw new ParseException(\"Value \\\"\" + str + \"\\\" is not a Long\");\n                }\n                return (T) num;\n            }\n            if (clazz == Double.class) {\n                if (!(num instanceof Double)) {\n                    throw new ParseException(\"Value \\\"\" + str + \"\\\" is not a Double\");\n                }\n                return (T) num;\n            }\n            if (clazz == Float.class) {\n                if (!(num instanceof Float)) {\n                    throw new ParseException(\"Value \\\"\" + str + \"\\\" is not a Float\");\n                }\n                return (T) num;\n            }\n            if (clazz == Short.class) {\n                if (!(num instanceof Short)) {\n                    throw new ParseException(\"Value \\\"\" + str + \"\\\" is not a Short\");\n                }\n                return (T) num;\n            }\n            if (clazz == Byte.class) {\n                if (!(num instanceof Byte)) {\n                    throw new ParseException(\"Value \\\"\" + str + \"\\\" is not a Byte\");\n                }\n                return (T) num;\n            }\n            // fallback for generic Number:\n            return (T) num;\n        }\n        else\n        {\n            throw new ParseException(\"Unable to handle class: \" + clazz);\n        }\n    } catch (Exception e) {\n        if (e instanceof ParseException) {\n            throw (ParseException) e;\n        }\n        throw new ParseException(e.getMessage());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}