{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    try\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return (T) str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return (T) createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return (T) createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return (T) createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return (T) createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return (T) createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return (T) openFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return (T) createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return (T) createURL(str);\n        }\n        else if (clazz == Number.class || clazz == Integer.class || clazz == Long.class ||\n                 clazz == Float.class || clazz == Double.class || clazz == Short.class ||\n                 clazz == Byte.class)\n        {\n            // Attempt to parse the number type\n            Number value = createNumber(str);\n            if (clazz == Integer.class)\n            {\n                if (value instanceof Integer) {\n                    return (T) value;\n                } else {\n                    return (T) Integer.valueOf(value.intValue());\n                }\n            }\n            else if (clazz == Long.class)\n            {\n                if (value instanceof Long) {\n                    return (T) value;\n                } else {\n                    return (T) Long.valueOf(value.longValue());\n                }\n            }\n            else if (clazz == Float.class)\n            {\n                if (value instanceof Float) {\n                    return (T) value;\n                } else {\n                    return (T) Float.valueOf(value.floatValue());\n                }\n            }\n            else if (clazz == Double.class)\n            {\n                if (value instanceof Double) {\n                    return (T) value;\n                } else {\n                    return (T) Double.valueOf(value.doubleValue());\n                }\n            }\n            else if (clazz == Short.class)\n            {\n                if (value instanceof Short) {\n                    return (T) value;\n                } else {\n                    return (T) Short.valueOf(value.shortValue());\n                }\n            }\n            else if (clazz == Byte.class)\n            {\n                if (value instanceof Byte) {\n                    return (T) value;\n                } else {\n                    return (T) Byte.valueOf(value.byteValue());\n                }\n            }\n            else // clazz == Number.class\n            {\n                return (T) value;\n            }\n        }\n        else\n        {\n            throw new ParseException(\"Unsupported type: \" + clazz);\n        }\n    }\n    catch (Exception e)\n    {\n        if (e instanceof ParseException) {\n            throw (ParseException)e;\n        }\n        throw new ParseException(\"Failed to create value: \" + e.getMessage());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}