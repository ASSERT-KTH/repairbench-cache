{
    "generation": "    @SuppressWarnings(\"unchecked\")\n    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return (T) str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return (T) createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return (T) createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return (T) createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return (T) createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return (T) createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return (T) openFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return (T) createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return (T) createURL(str);\n        }\n        else\n        {\n            try\n            {\n                // Attempt to use valueOf(String) method\n                Method valueOf = clazz.getMethod(\"valueOf\", String.class);\n                return (T) valueOf.invoke(null, str);\n            }\n            catch (NoSuchMethodException e)\n            {\n                try\n                {\n                    // Attempt to use a String constructor\n                    Constructor<T> constructor = clazz.getConstructor(String.class);\n                    return constructor.newInstance(str);\n                }\n                catch (NoSuchMethodException ex)\n                {\n                    throw new ParseException(\"Unable to parse value '\" + str + \"' for class \" + clazz.getName());\n                }\n                catch (IllegalAccessException | InstantiationException | InvocationTargetException ex)\n                {\n                    throw new ParseException(\"Error instantiating class \" + clazz.getName(), ex);\n                }\n            }\n            catch (IllegalAccessException | InvocationTargetException e)\n            {\n                Throwable cause = e.getCause();\n                if (cause instanceof ParseException)\n                {\n                    throw (ParseException) cause;\n                }\n                throw new ParseException(\"Failed to create value for class \" + clazz.getName(), e);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}