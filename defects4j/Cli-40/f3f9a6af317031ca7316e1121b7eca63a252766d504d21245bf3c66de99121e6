{
    "generation": "public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {\n    if (PatternOptionBuilder.STRING_VALUE == clazz) {\n        return (T) str;\n    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {\n        return (T) createObject(str);\n    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz || Number.class.isAssignableFrom(clazz)) {\n        // Attempt to parse the string as a number.\n        Number num = createNumber(str);\n        // Convert the parsed number into the appropriate type if needed.\n        if (clazz.equals(Integer.class)) {\n            return (T) Integer.valueOf(num.intValue());\n        } else if (clazz.equals(Long.class)) {\n            return (T) Long.valueOf(num.longValue());\n        } else if (clazz.equals(Float.class)) {\n            return (T) Float.valueOf(num.floatValue());\n        } else if (clazz.equals(Double.class)) {\n            return (T) Double.valueOf(num.doubleValue());\n        } else if (clazz.equals(Byte.class)) {\n            return (T) Byte.valueOf(num.byteValue());\n        } else if (clazz.equals(Short.class)) {\n            return (T) Short.valueOf(num.shortValue());\n        } else {\n            // If clazz is Number or another numeric type we don't specifically handle, just return the Number.\n            return (T) num;\n        }\n    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {\n        return (T) createDate(str);\n    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {\n        return (T) createClass(str);\n    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {\n        return (T) createFile(str);\n    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {\n        return (T) openFile(str);\n    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {\n        return (T) createFiles(str);\n    } else if (PatternOptionBuilder.URL_VALUE == clazz) {\n        return (T) createURL(str);\n    } else {\n        throw new ParseException(\"Cannot convert '\" + str + \"' to \" + clazz.getName());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}