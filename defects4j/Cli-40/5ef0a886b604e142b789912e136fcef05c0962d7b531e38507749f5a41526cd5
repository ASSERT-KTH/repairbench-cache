{
    "generation": "    /**\n     * Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     * @throws ParseException if the value creation for the given class failed\n     */\n    @SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return (T) str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return (T) createObject(str);\n        }\n        else if (Number.class.isAssignableFrom(clazz)) // Handle Number subclasses like Integer, Long, etc.\n        {\n            // createNumber will throw ParseException if str is not a valid number\n            final Number num = createNumber(str);\n\n            // Now convert the parsed 'num' to the specific target 'clazz'\n            // Handle primitive wrapper classes specifically\n            if (clazz.equals(Byte.class)) {\n                return (T) Byte.valueOf(num.byteValue());\n            } else if (clazz.equals(Short.class)) {\n                return (T) Short.valueOf(num.shortValue());\n            } else if (clazz.equals(Integer.class)) {\n                return (T) Integer.valueOf(num.intValue());\n            } else if (clazz.equals(Long.class)) {\n                return (T) Long.valueOf(num.longValue());\n            } else if (clazz.equals(Float.class)) {\n                return (T) Float.valueOf(num.floatValue());\n            } else if (clazz.equals(Double.class)) {\n                return (T) Double.valueOf(num.doubleValue());\n            } else if (clazz.equals(Number.class)) {\n                // If the requested type is just Number.class itself\n                return (T) num;\n            } else {\n                // This case should ideally not be reached for standard Number types\n                // If it is, it means a custom Number subclass was passed which isn't handled\n                throw new ParseException(\"Cannot convert number value \" + str + \" to \" + clazz.getName());\n            }\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return (T) createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return (T) createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return (T) createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            // Note: PatternOptionBuilder.FILE_VALUE and PatternOptionBuilder.EXISTING_FILE_VALUE both resolve to File.class.\n            // If clazz is File.class, the first branch (PatternOptionBuilder.FILE_VALUE == clazz) will be true.\n            // This means this 'EXISTING_FILE_VALUE' branch is effectively unreachable code for File.class.\n            // This is a design characteristic of PatternOptionBuilder constants, not a bug in this function's logic.\n            return (T) openFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return (T) createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return (T) createURL(str);\n        }\n        else\n        {\n            // Throw ParseException if the class type is not supported, as per Javadoc.\n            throw new ParseException(\"Unable to handle the class \" + clazz.getName());\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}