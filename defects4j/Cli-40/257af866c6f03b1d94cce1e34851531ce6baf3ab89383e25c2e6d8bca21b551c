{
    "generation": "/**\n * Returns the <code>Object</code> of type <code>clazz</code>\n * with the value of <code>str</code>.\n *\n * @param str the command line value\n * @param clazz the type of argument\n * @return The instance of <code>clazz</code> initialised with\n * the value of <code>str</code>.\n * @throws ParseException if the value creation for the given class failed\n */\n@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {\n    if (PatternOptionBuilder.STRING_VALUE == clazz) {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {\n        return (T) createNumber(str);\n    }\n    // support any subclass of Number (e.g. Integer, Double, etc.)\n    else if (PatternOptionBuilder.NUMBER_VALUE.isAssignableFrom(clazz)) {\n        return (T) createNumber(str, clazz);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz) {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz) {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz) {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz) {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz) {\n        return (T) createURL(str);\n    }\n    else {\n        throw new ParseException(\n            \"Cannot convert value '\" + str + \"' to class \" + clazz.getName()\n        );\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}