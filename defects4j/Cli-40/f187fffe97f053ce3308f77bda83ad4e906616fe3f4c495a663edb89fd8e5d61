{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    // Bug fix: handle primitive/boxed types\n    else if (clazz == Integer.class || clazz == Integer.TYPE)\n    {\n        try {\n            return (T) Integer.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Could not create Integer: \" + str);\n        }\n    }\n    else if (clazz == Long.class || clazz == Long.TYPE)\n    {\n        try {\n            return (T) Long.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Could not create Long: \" + str);\n        }\n    }\n    else if (clazz == Double.class || clazz == Double.TYPE)\n    {\n        try {\n            return (T) Double.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Could not create Double: \" + str);\n        }\n    }\n    else if (clazz == Float.class || clazz == Float.TYPE)\n    {\n        try {\n            return (T) Float.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Could not create Float: \" + str);\n        }\n    }\n    else if (clazz == Boolean.class || clazz == Boolean.TYPE)\n    {\n        if (\"true\".equalsIgnoreCase(str) || \"false\".equalsIgnoreCase(str)) {\n            return (T) Boolean.valueOf(str);\n        }\n        throw new ParseException(\"Could not create Boolean: \" + str);\n    }\n    else\n    {\n        throw new ParseException(\"Unsupported type: \" + clazz);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}