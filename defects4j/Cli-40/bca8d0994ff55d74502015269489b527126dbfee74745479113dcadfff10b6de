{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {\n    // support the standard wrapper number types\n    if (clazz == Byte.class) {\n        try {\n            return (T) Byte.decode(str);\n        } catch (NumberFormatException e) {\n            throw new ParseException(e.getMessage());\n        }\n    } else if (clazz == Short.class) {\n        try {\n            return (T) Short.decode(str);\n        } catch (NumberFormatException e) {\n            throw new ParseException(e.getMessage());\n        }\n    } else if (clazz == Integer.class) {\n        try {\n            return (T) Integer.decode(str);\n        } catch (NumberFormatException e) {\n            throw new ParseException(e.getMessage());\n        }\n    } else if (clazz == Long.class) {\n        try {\n            return (T) Long.decode(str);\n        } catch (NumberFormatException e) {\n            throw new ParseException(e.getMessage());\n        }\n    } else if (clazz == Float.class) {\n        try {\n            return (T) Float.valueOf(str);\n        } catch (NumberFormatException e) {\n            throw new ParseException(e.getMessage());\n        }\n    } else if (clazz == Double.class) {\n        try {\n            return (T) Double.valueOf(str);\n        } catch (NumberFormatException e) {\n            throw new ParseException(e.getMessage());\n        }\n    }\n    // existing handlers\n    else if (PatternOptionBuilder.STRING_VALUE == clazz) {\n        return (T) str;\n    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {\n        return (T) createObject(str);\n    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {\n        return (T) createNumber(str);\n    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {\n        return (T) createDate(str);\n    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {\n        return (T) createClass(str);\n    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {\n        return (T) createFile(str);\n    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {\n        return (T) openFile(str);\n    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {\n        return (T) createFiles(str);\n    } else if (PatternOptionBuilder.URL_VALUE == clazz) {\n        return (T) createURL(str);\n    }\n    // no handler found\n    else {\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}