{
    "generation": "    /**\n     * Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     * @throws ParseException if the value creation for the given class failed\n     */\n    @SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return (T) str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return (T) createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return (T) createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return (T) createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return (T) createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return (T) createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return (T) openFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return (T) createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return (T) createURL(str);\n        }\n        else if (Number.class.isAssignableFrom(clazz))\n        {\n            try {\n                if (clazz == Integer.class) {\n                    return (T) Integer.valueOf(str);\n                } else if (clazz == Long.class) {\n                    return (T) Long.valueOf(str);\n                } else if (clazz == Double.class) {\n                    return (T) Double.valueOf(str);\n                } else if (clazz == Float.class) {\n                    return (T) Float.valueOf(str);\n                } else if (clazz == Byte.class) {\n                    return (T) Byte.valueOf(str);\n                } else if (clazz == Short.class) {\n                    return (T) Short.valueOf(str);\n                }\n            } catch (NumberFormatException e) {\n                throw new ParseException(\"Unable to convert '\" + str + \"' to \" + clazz.getName());\n            }\n            throw new ParseException(\"Unable to handle number type \" + clazz.getName());\n        }\n        else\n        {\n            throw new ParseException(\"Unable to convert '\" + str + \"' to \" + clazz.getName());\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}