{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    // If clazz is a subclass of Number (e.g. Integer, Double, etc.), try to convert directly\n    else if (Number.class.isAssignableFrom(clazz))\n    {\n        try\n        {\n            Number number = createNumber(str);\n            if (clazz.isInstance(number)) {\n                return (T) number;\n            } else {\n                // try to convert to the specific Number subclass\n                if (clazz == Integer.class)\n                    return (T) Integer.valueOf(number.intValue());\n                else if (clazz == Long.class)\n                    return (T) Long.valueOf(number.longValue());\n                else if (clazz == Double.class)\n                    return (T) Double.valueOf(number.doubleValue());\n                else if (clazz == Float.class)\n                    return (T) Float.valueOf(number.floatValue());\n                else if (clazz == Short.class)\n                    return (T) Short.valueOf(number.shortValue());\n                else if (clazz == Byte.class)\n                    return (T) Byte.valueOf(number.byteValue());\n            }\n        }\n        catch (Exception e)\n        {\n            throw new ParseException(e.getMessage());\n        }\n        throw new ParseException(\"Value \" + str + \" cannot be converted to type: \" + clazz);\n    }\n    // If we reach here, we cannot create the value for the provided class\n    throw new ParseException(\"No value handler for class: \" + clazz);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}