{
    "generation": "    /**\n     * Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     * @throws ParseException if the value creation for the given class failed\n     */\n    @SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return (T) str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return (T) createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return (T) createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return (T) createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return (T) createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return (T) createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return (T) openFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return (T) createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return (T) createURL(str);\n        }\n        else if (clazz.equals(Integer.class))\n        {\n            try\n            {\n                return (T) Integer.valueOf(str);\n            }\n            catch (NumberFormatException e)\n            {\n                throw new ParseException(\"Invalid integer value: '\" + str + \"'\", 0);\n            }\n        }\n        else if (clazz.equals(Long.class))\n        {\n            try\n            {\n                return (T) Long.valueOf(str);\n            }\n            catch (NumberFormatException e)\n            {\n                throw new ParseException(\"Invalid long value: '\" + str + \"'\", 0);\n            }\n        }\n        else if (clazz.equals(Short.class))\n        {\n            try\n            {\n                return (T) Short.valueOf(str);\n            }\n            catch (NumberFormatException e)\n            {\n                throw new ParseException(\"Invalid short value: '\" + str + \"'\", 0);\n            }\n        }\n        else if (clazz.equals(Byte.class))\n        {\n            try\n            {\n                return (T) Byte.valueOf(str);\n            }\n            catch (NumberFormatException e)\n            {\n                throw new ParseException(\"Invalid byte value: '\" + str + \"'\", 0);\n            }\n        }\n        else if (clazz.equals(Boolean.class))\n        {\n            if (\"true\".equalsIgnoreCase(str))\n            {\n                return (T) Boolean.TRUE;\n            }\n            else if (\"false\".equalsIgnoreCase(str))\n            {\n                return (T) Boolean.FALSE;\n            }\n            else\n            {\n                throw new ParseException(\"Invalid boolean value: '\" + str + \"'\", 0);\n            }\n        }\n        else if (clazz.equals(Character.class))\n        {\n            if (str.length() >= 1)\n            {\n                return (T) Character.valueOf(str.charAt(0));\n            }\n            else\n            {\n                throw new ParseException(\"Empty character string: '\" + str + \"'\", 0);\n            }\n        }\n        else if (clazz.equals(Double.class))\n        {\n            try\n            {\n                return (T) Double.valueOf(str);\n            }\n            catch (NumberFormatException e)\n            {\n                throw new ParseException(\"Invalid double value: '\" + str + \"'\", 0);\n            }\n        }\n        else if (clazz.equals(Float.class))\n        {\n            try\n            {\n                return (T) Float.valueOf(str);\n            }\n            catch (NumberFormatException e)\n            {\n                throw new ParseException(\"Invalid float value: '\" + str + \"'\", 0);\n            }\n        }\n        else\n        {\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}