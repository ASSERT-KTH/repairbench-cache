{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else {\n        // If clazz is an unknown type but is a subclass of Number (e.g., Integer/Double/etc), handle accordingly\n        if (Number.class.isAssignableFrom(clazz)) {\n            try {\n                Number number = createNumber(str);\n\n                if (clazz == Integer.class) {\n                    return (T) Integer.valueOf(number.intValue());\n                } else if (clazz == Long.class) {\n                    return (T) Long.valueOf(number.longValue());\n                } else if (clazz == Float.class) {\n                    return (T) Float.valueOf(number.floatValue());\n                } else if (clazz == Double.class) {\n                    return (T) Double.valueOf(number.doubleValue());\n                } else if (clazz == Short.class) {\n                    return (T) Short.valueOf(number.shortValue());\n                } else if (clazz == Byte.class) {\n                    return (T) Byte.valueOf(number.byteValue());\n                } else {\n                    // Unknown subclass of Number\n                    throw new ParseException(\"Unsupported number type: \" + clazz);\n                }\n            } catch (NumberFormatException e) {\n                throw new ParseException(\"Unable to parse the value '\" + str + \"' as \" + clazz.getSimpleName());\n            }\n        }\n        throw new ParseException(\"Unsupported type: \" + clazz);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}