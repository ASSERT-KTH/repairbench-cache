{
    "generation": "    /**\n     * Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     * @throws ParseException if the value creation for the given class failed\n     */\n    @SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n    {\n        // Note: PatternOptionBuilder.XYZ_VALUE holds a Class object, e.g., String.class.\n        // The comparison `PatternOptionBuilder.XYZ_VALUE == clazz` means `XYZ.class == clazz`.\n        // For types like Number and Date, subclasses should also be handled (e.g., Integer is a Number).\n        // Therefore, `isAssignableFrom` is used for these polymorphic types.\n        // For other types (String, Object, Class, File, URL, File[]), exact class match (`==`) is appropriate.\n        // The PatternOptionBuilder.EXISTING_FILE_VALUE constant is handled externally by DefaultParser\n        // and its presence here for File.class is effectively unreachable due to PatternOptionBuilder.FILE_VALUE.\n        // However, the existing structure is preserved.\n\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return (T) str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return (T) createObject(str);\n        }\n        else if (Number.class.isAssignableFrom(clazz)) // Fix: Use isAssignableFrom for Number and its subclasses (Integer, Long, etc.)\n        {\n            return (T) createNumber(str);\n        }\n        else if (Date.class.isAssignableFrom(clazz)) // Fix: Use isAssignableFrom for Date and its subclasses (Timestamp, etc.)\n        {\n            return (T) createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return (T) createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return (T) createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return (T) openFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return (T) createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return (T) createURL(str);\n        }\n        else\n        {\n            return null;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}