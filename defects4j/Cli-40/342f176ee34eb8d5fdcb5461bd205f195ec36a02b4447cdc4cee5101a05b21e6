{
    "generation": "    /**\n     * Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     * @throws ParseException if the value creation for the given class failed\n     */\n    @SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {\n        if (clazz.equals(String.class)) {\n            return (T) str;\n        } else if (clazz.equals(Object.class)) {\n            return (T) createObject(str);\n        } else if (clazz.equals(Number.class)) {\n            return (T) createNumber(str);\n        } else if (clazz.equals(Date.class)) {\n            return (T) createDate(str);\n        } else if (clazz.equals(Class.class)) {\n            return (T) createClass(str);\n        } else if (clazz.equals(File.class)) {\n            return (T) createFile(str);\n        } else if (clazz.equals(File.class) && PatternOptionBuilder.EXISTING_FILE_VALUE.isAssignableFrom(clazz)) {\n            return (T) openFile(str);\n        } else if (clazz.equals(File[].class)) {\n            return (T) createFiles(str);\n        } else if (clazz.equals(URL.class)) {\n            return (T) createURL(str);\n        } else {\n            try {\n                if (clazz.equals(Integer.class)) {\n                    return clazz.cast(Integer.parseInt(str));\n                } else if (clazz.equals(Long.class)) {\n                    return clazz.cast(Long.parseLong(str));\n                } else if (clazz.equals(Double.class)) {\n                    return clazz.cast(Double.parseDouble(str));\n                } else if (clazz.equals(Float.class)) {\n                    return clazz.cast(Float.parseFloat(str));\n                } else if (clazz.equals(Short.class)) {\n                    return clazz.cast(Short.parseShort(str));\n                } else if (clazz.equals(Byte.class)) {\n                    return clazz.cast(Byte.parseByte(str));\n                }\n            } catch (NumberFormatException e) {\n                throw new ParseException(\"Cannot parse [\" + str + \"] to type \" + clazz.getName());\n            }\n            throw new ParseException(\"Unsupported class type: \" + clazz.getName());\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}