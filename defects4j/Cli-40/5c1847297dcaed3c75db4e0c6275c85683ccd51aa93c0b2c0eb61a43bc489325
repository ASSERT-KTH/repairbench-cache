{
    "generation": "/**\n * Returns the <code>Object</code> of type <code>clazz</code>\n * with the value of <code>str</code>.\n *\n * @param str the command line value\n * @param clazz the type of argument\n * @return The instance of <code>clazz</code> initialised with\n * the value of <code>str</code>.\n * @throws ParseException if the value creation for the given class failed\n */\n@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {\n    if (clazz.equals(PatternOptionBuilder.STRING_VALUE)) {\n        return (T) str;\n    } else if (clazz.equals(PatternOptionBuilder.OBJECT_VALUE)) {\n        return (T) createObject(str);\n    } else if (Number.class.isAssignableFrom(clazz)) {\n        // For any numeric type (e.g. Integer, Double, etc), try to create a Number first.\n        Number number = createNumber(str);\n        if (clazz.equals(Byte.class)) {\n            return (T) Byte.valueOf(number.byteValue());\n        } else if (clazz.equals(Short.class)) {\n            return (T) Short.valueOf(number.shortValue());\n        } else if (clazz.equals(Integer.class)) {\n            return (T) Integer.valueOf(number.intValue());\n        } else if (clazz.equals(Long.class)) {\n            return (T) Long.valueOf(number.longValue());\n        } else if (clazz.equals(Float.class)) {\n            return (T) Float.valueOf(number.floatValue());\n        } else if (clazz.equals(Double.class)) {\n            return (T) Double.valueOf(number.doubleValue());\n        } else if (clazz.equals(Number.class)) {\n            return (T) number;\n        } else {\n            throw new ParseException(\"Cannot convert \" + str + \" to \" + clazz.getName());\n        }\n    } else if (clazz.equals(PatternOptionBuilder.DATE_VALUE)) {\n        return (T) createDate(str);\n    } else if (clazz.equals(PatternOptionBuilder.CLASS_VALUE)) {\n        return (T) createClass(str);\n    } else if (clazz.equals(PatternOptionBuilder.FILE_VALUE)) {\n        return (T) createFile(str);\n    } else if (clazz.equals(PatternOptionBuilder.EXISTING_FILE_VALUE)) {\n        return (T) openFile(str);\n    } else if (clazz.equals(PatternOptionBuilder.FILES_VALUE)) {\n        return (T) createFiles(str);\n    } else if (clazz.equals(PatternOptionBuilder.URL_VALUE)) {\n        return (T) createURL(str);\n    } else {\n        throw new ParseException(\"Cannot convert \" + str + \" to \" + clazz.getName());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}