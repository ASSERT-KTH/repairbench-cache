{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    try {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return (T) str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return (T) createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return (T) createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return (T) createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return (T) createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return (T) createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return (T) openFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return (T) createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return (T) createURL(str);\n        }\n        else if (clazz != null && Number.class.isAssignableFrom(clazz))\n        {\n            // attempt to create a Number instance compatible with clazz\n            Number number = createNumber(str);\n            if (clazz.isInstance(number)) {\n                return (T) number;\n            } else {\n                // try converting to specific subclass\n                if (clazz == Integer.class) {\n                    return (T) Integer.valueOf(number.intValue());\n                } else if (clazz == Long.class) {\n                    return (T) Long.valueOf(number.longValue());\n                } else if (clazz == Short.class) {\n                    return (T) Short.valueOf(number.shortValue());\n                } else if (clazz == Byte.class) {\n                    return (T) Byte.valueOf(number.byteValue());\n                } else if (clazz == Float.class) {\n                    return (T) Float.valueOf(number.floatValue());\n                } else if (clazz == Double.class) {\n                    return (T) Double.valueOf(number.doubleValue());\n                } else {\n                    throw new ParseException(\"Unsupported number type: \" + clazz);\n                }\n            }\n        }\n        else\n        {\n            return null;\n        }\n    } catch (Exception e) {\n        if (e instanceof ParseException) {\n            throw (ParseException) e;\n        }\n        throw new ParseException(\"Unable to create value: \" + str);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}