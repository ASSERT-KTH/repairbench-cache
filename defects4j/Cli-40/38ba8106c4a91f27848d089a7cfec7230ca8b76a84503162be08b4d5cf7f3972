{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    // Bug fix: attempt to handle explicit Java wrapper types for numbers.\n    else if (clazz == Number.class\n             || clazz == Integer.class\n             || clazz == Long.class\n             || clazz == Short.class\n             || clazz == Float.class\n             || clazz == Double.class\n             || clazz == Byte.class\n             || clazz == BigInteger.class\n             || clazz == BigDecimal.class) {\n        try {\n            Number num = createNumber(str);\n            // Return the specific wrapper if requested\n            if (clazz == Integer.class)\n                return (T) Integer.valueOf(num.intValue());\n            else if (clazz == Long.class)\n                return (T) Long.valueOf(num.longValue());\n            else if (clazz == Short.class)\n                return (T) Short.valueOf(num.shortValue());\n            else if (clazz == Float.class)\n                return (T) Float.valueOf(num.floatValue());\n            else if (clazz == Double.class)\n                return (T) Double.valueOf(num.doubleValue());\n            else if (clazz == Byte.class)\n                return (T) Byte.valueOf(num.byteValue());\n            else if (clazz == BigInteger.class)\n                return (T) (num instanceof BigInteger ? num : new BigInteger(str));\n            else if (clazz == BigDecimal.class)\n                return (T) (num instanceof BigDecimal ? num : new BigDecimal(str));\n            else\n                return (T) num;\n        } catch (Exception e) {\n            throw new ParseException(\"Unable to create value for type: \" + clazz.getName() + \" from '\" + str + \"'\");\n        }\n    }\n    // For unsupported classes, throw rather than return null\n    throw new ParseException(\"Unable to create value for type: \" + clazz.getName());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}