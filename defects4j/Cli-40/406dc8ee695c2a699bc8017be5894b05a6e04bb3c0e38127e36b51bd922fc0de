{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {\n    if (PatternOptionBuilder.STRING_VALUE == clazz) {\n        return (T) str;\n    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {\n        return (T) createObject(str);\n    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {\n        return (T) createNumber(str);\n    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {\n        return (T) createDate(str);\n    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {\n        return (T) createClass(str);\n    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {\n        return (T) createFile(str);\n    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {\n        return (T) openFile(str);\n    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {\n        return (T) createFiles(str);\n    } else if (PatternOptionBuilder.URL_VALUE == clazz) {\n        return (T) createURL(str);\n    } else {\n        // handle enums\n        if (clazz.isEnum()) {\n            try {\n                return (T) Enum.valueOf((Class) clazz, str);\n            } catch (IllegalArgumentException ex) {\n                throw new ParseException(\"Invalid enum value '\" + str + \"' for \" + clazz.getName());\n            }\n        }\n        // try static valueOf(String) method\n        try {\n            Method m = clazz.getMethod(\"valueOf\", String.class);\n            if (Modifier.isStatic(m.getModifiers())) {\n                return (T) m.invoke(null, str);\n            }\n        } catch (NoSuchMethodException ignored) {\n            // no static valueOf, fall through\n        } catch (InvocationTargetException ex) {\n            throw new ParseException(ex.getCause().getMessage());\n        } catch (Exception ex) {\n            throw new ParseException(ex.getMessage());\n        }\n        // try String constructor\n        try {\n            Constructor<?> ctor = clazz.getConstructor(String.class);\n            return (T) ctor.newInstance(str);\n        } catch (NoSuchMethodException ex) {\n            throw new ParseException(\"No String constructor for \" + clazz.getName());\n        } catch (InvocationTargetException ex) {\n            Throwable cause = ex.getCause();\n            throw new ParseException(cause != null ? cause.getMessage() : ex.getMessage());\n        } catch (Exception ex) {\n            throw new ParseException(ex.getMessage());\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}