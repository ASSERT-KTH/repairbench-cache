{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n        // Check for some common types that should throw instead of silent null\n        if (clazz != null && (\n                Number.class.isAssignableFrom(clazz) ||\n                clazz == Integer.class ||\n                clazz == Long.class ||\n                clazz == Short.class ||\n                clazz == Byte.class ||\n                clazz == Double.class ||\n                clazz == Float.class\n        )) {\n            throw new ParseException(\"Value type not supported: \" + clazz);\n        }\n        throw new ParseException(\"Unknown value class: \" + clazz);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}