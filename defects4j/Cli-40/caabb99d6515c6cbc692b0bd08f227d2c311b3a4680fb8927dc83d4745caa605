{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else {\n        // attempt to support primitive wrapper types like Integer, Double, Long etc.\n        // Add specific conversions or throw ParseException if unsupported.\n        try {\n            if (clazz == Integer.class) {\n                return (T) Integer.valueOf(str);\n            } else if (clazz == Long.class) {\n                return (T) Long.valueOf(str);\n            } else if (clazz == Short.class) {\n                return (T) Short.valueOf(str);\n            } else if (clazz == Byte.class) {\n                return (T) Byte.valueOf(str);\n            } else if (clazz == Double.class) {\n                return (T) Double.valueOf(str);\n            } else if (clazz == Float.class) {\n                return (T) Float.valueOf(str);\n            } else if (clazz == Boolean.class) {\n                return (T) Boolean.valueOf(str);\n            } else if (clazz == Character.class) {\n                if (str.length() != 1) {\n                    throw new ParseException(\"Cannot convert \\\"\" + str + \"\\\" to Character\");\n                }\n                return (T) Character.valueOf(str.charAt(0));\n            } else {\n                throw new ParseException(\"Unsupported type: \" + clazz);\n            }\n        } catch (Exception e) {\n            throw new ParseException(\"Unable to convert \\\"\" + str + \"\\\" to type: \" + clazz.getSimpleName());\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}