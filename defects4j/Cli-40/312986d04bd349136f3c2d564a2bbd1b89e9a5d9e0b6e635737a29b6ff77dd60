{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {\n    // simple types\n    if (PatternOptionBuilder.STRING_VALUE == clazz) {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {\n        return (T) createObject(str);\n    }\n    // numbers (Number.class and any subclass, e.g. Integer.class, Double.class, BigDecimal.class, \u2026)\n    else if (PatternOptionBuilder.NUMBER_VALUE.isAssignableFrom(clazz)) {\n        // exactly Number\n        if (PatternOptionBuilder.NUMBER_VALUE == clazz) {\n            return (T) createNumber(str);\n        }\n        // wrapper or BigInteger/BigDecimal etc. \u2013 try a String\u2010ctor\n        try {\n            java.lang.reflect.Constructor<T> ctor = clazz.getConstructor(String.class);\n            return ctor.newInstance(str);\n        }\n        catch (Exception e) {\n            // unwrap NumberFormatException from InvocationTargetException if present\n            Throwable t = (e instanceof java.lang.reflect.InvocationTargetException && e.getCause() != null)\n                        ? e.getCause() : e;\n            if (t instanceof NumberFormatException) {\n                throw new ParseException(t.getMessage());\n            }\n            throw new ParseException(t.getMessage());\n        }\n    }\n    // other built\u2010ins\n    else if (PatternOptionBuilder.DATE_VALUE == clazz) {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz) {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz) {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz) {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz) {\n        return (T) createURL(str);\n    }\n    // nothing matched \u2192 error\n    else {\n        throw new ParseException(\"Cannot handle class: \" + clazz.getName());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}