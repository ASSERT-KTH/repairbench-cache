{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    // Fix: throw if clazz is a known value type but not matched above, or is a number type\n    else if (Number.class.isAssignableFrom(clazz)) // handles Integer.class, etc.\n    {\n        // Try to parse to the required number type, if fails throw ParseException\n        try {\n            Number num = createNumber(str);\n            // Cast to the correct type\n            if (clazz == Integer.class) {\n                if (!(num instanceof Integer)) {\n                    num = Integer.valueOf(num.intValue());\n                }\n            } else if (clazz == Long.class) {\n                if (!(num instanceof Long)) {\n                    num = Long.valueOf(num.longValue());\n                }\n            } else if (clazz == Short.class) {\n                if (!(num instanceof Short)) {\n                    num = Short.valueOf(num.shortValue());\n                }\n            } else if (clazz == Byte.class) {\n                if (!(num instanceof Byte)) {\n                    num = Byte.valueOf(num.byteValue());\n                }\n            } else if (clazz == Float.class) {\n                if (!(num instanceof Float)) {\n                    num = Float.valueOf(num.floatValue());\n                }\n            } else if (clazz == Double.class) {\n                if (!(num instanceof Double)) {\n                    num = Double.valueOf(num.doubleValue());\n                }\n            } // BigInteger and BigDecimal not handled as typically not expected\n            return (T) num;\n        } catch (Exception ex) {\n            throw new ParseException(\"Unable to parse value '\" + str + \"' to type \" + clazz.getSimpleName());\n        }\n    }\n    else\n    {\n        throw new ParseException(\"Unable to create value for type: \" + clazz);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}