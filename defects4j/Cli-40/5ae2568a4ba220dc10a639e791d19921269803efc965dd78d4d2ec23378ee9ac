{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else if (clazz == Number.class || clazz == Byte.class || clazz == Short.class ||\n             clazz == Integer.class || clazz == Long.class || clazz == Float.class ||\n             clazz == Double.class || clazz == java.math.BigInteger.class || \n             clazz == java.math.BigDecimal.class)\n    {\n        Object value = createNumber(str);\n        if (!clazz.isInstance(value)) {\n            throw new ParseException(\"Value \\\"\" + str + \"\\\" cannot be converted to \" + clazz.getName());\n        }\n        return (T) value;\n    }\n    else\n    {\n        throw new ParseException(\"Value type (\" + clazz.getName() + \") not supported: \" + str);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}