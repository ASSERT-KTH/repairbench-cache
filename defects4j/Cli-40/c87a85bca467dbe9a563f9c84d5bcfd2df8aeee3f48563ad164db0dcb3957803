{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (clazz == null) {\n        throw new ParseException(\"Class type is null\");\n    }\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    // <--- FIX: handle explicit types like Integer, Double, Boolean, etc. --->\n    else if (clazz == Integer.class)\n    {\n        try {\n            return (T) Integer.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Value '\" + str + \"' is not a valid Integer.\", e);\n        }\n    }\n    else if (clazz == Long.class)\n    {\n        try {\n            return (T) Long.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Value '\" + str + \"' is not a valid Long.\", e);\n        }\n    }\n    else if (clazz == Double.class)\n    {\n        try {\n            return (T) Double.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Value '\" + str + \"' is not a valid Double.\", e);\n        }\n    }\n    else if (clazz == Float.class)\n    {\n        try {\n            return (T) Float.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Value '\" + str + \"' is not a valid Float.\", e);\n        }\n    }\n    else if (clazz == Boolean.class)\n    {\n        if (\"true\".equalsIgnoreCase(str) || \"yes\".equalsIgnoreCase(str) || \"1\".equals(str)) {\n            return (T) Boolean.TRUE;\n        }\n        if (\"false\".equalsIgnoreCase(str) || \"no\".equalsIgnoreCase(str) || \"0\".equals(str)) {\n            return (T) Boolean.FALSE;\n        }\n        throw new ParseException(\"Value '\" + str + \"' is not a valid Boolean.\");\n    }\n    else if (clazz == Short.class)\n    {\n        try {\n            return (T) Short.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Value '\" + str + \"' is not a valid Short.\", e);\n        }\n    }\n    else if (clazz == Byte.class)\n    {\n        try {\n            return (T) Byte.valueOf(str);\n        } catch (Exception e) {\n            throw new ParseException(\"Value '\" + str + \"' is not a valid Byte.\", e);\n        }\n    }\n    else if (clazz == String.class)\n    {\n        return (T) str;\n    }\n    // If clazz is not handled, throw ParseException\n    throw new ParseException(\"Unhandled class type: \" + clazz);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}