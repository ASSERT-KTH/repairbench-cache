{
    "generation": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    // --- FIX: if clazz is a subclass of Number, attempt to create number ---\n    else if (Number.class.isAssignableFrom(clazz))\n    {\n        try\n        {\n            Number num = createNumber(str);\n            if (clazz == Byte.class) return (T) Byte.valueOf(num.byteValue());\n            else if (clazz == Short.class) return (T) Short.valueOf(num.shortValue());\n            else if (clazz == Integer.class) return (T) Integer.valueOf(num.intValue());\n            else if (clazz == Long.class) return (T) Long.valueOf(num.longValue());\n            else if (clazz == Float.class) return (T) Float.valueOf(num.floatValue());\n            else if (clazz == Double.class) return (T) Double.valueOf(num.doubleValue());\n            else return (T) num;\n        }\n        catch (Exception e)\n        {\n            throw new ParseException(\"Unable to parse '\" + str + \"' as number for class: \" + clazz.getName());\n        }\n    }\n    else\n    {\n        throw new ParseException(\"Unable to handle the class: \" + clazz.getName());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}