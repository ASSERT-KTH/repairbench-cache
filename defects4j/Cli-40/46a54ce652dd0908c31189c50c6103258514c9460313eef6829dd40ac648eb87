{
    "generation": "@SuppressWarnings(\"unchecked\")\npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {\n    if (PatternOptionBuilder.STRING_VALUE == clazz) {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {\n        return (T) createNumber(str);\n    }\n    // support specific Number subclasses (Integer, Long, BigDecimal, etc.)\n    else if (Number.class.isAssignableFrom(clazz)) {\n        try {\n            java.lang.reflect.Constructor<?> ctor = clazz.getConstructor(String.class);\n            return (T) ctor.newInstance(str);\n        } catch (Exception e) {\n            throw new ParseException(\n                \"Cannot create number value for \" + clazz.getName() + \": \" + e.getMessage());\n        }\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz) {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz) {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz) {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz) {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz) {\n        return (T) createURL(str);\n    }\n    else {\n        return null;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}