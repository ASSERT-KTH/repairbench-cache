{
    "generation": "    /**\n     * <p>Breaks <code>token</code> into its constituent parts\n     * using the following algorithm.\n     * <ul>\n     *  <li>ignore the first character (\"<b>-</b>\")</li>\n     *  <li>foreach remaining character check if an {@link Option}\n     *  exists with that id.</li>\n     *  <li>if an {@link Option} does exist then add that character\n     *  prepended with \"<b>-</b>\" to the list of processed tokens.</li>\n     *  <li>if the {@link Option} can have an argument value and there\n     *  are remaining characters in the token then add the remaining\n     *  characters as a token to the list of processed tokens.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token\n     *  \"<b>--</b>\" followed by the remaining characters and also\n     *  the remaining tokens directly to the processed tokens list.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that\n     *  character prepended with \"<b>-</b>\".</li>\n     * </ul>\n     * </p>\n     *\n     * @param token The current token to be <b>burst</b>\n     * @param stopAtNonOption Specifies whether to stop processing\n     * at the first non-Option encountered.\n     */\n    protected void burstToken(String token, boolean stopAtNonOption)\n    {\n        for (int i = 1; i < token.length(); i++)\n        {\n            String ch = String.valueOf(token.charAt(i));\n            Option currentOption = options.getOption(ch); // Get option locally\n\n            if (options.hasOption(ch)) // Use hasOption check first for clarity/safety\n            {\n                tokens.add(\"-\" + ch);\n                // currentOption = options.getOption(ch); // Already fetched above\n\n                if (currentOption.hasArg() && (token.length() != (i + 1)))\n                {\n                    tokens.add(token.substring(i + 1));\n\n                    break; // Argument takes the rest of the token\n                }\n                // Continue loop if option doesn't have arg or is last char\n            }\n            else if (stopAtNonOption)\n            {\n                // Non-option encountered and stopAtNonOption is true\n                // Add the remainder of the token as a single argument\n                tokens.add(token.substring(i));\n                // Stop processing this token\n                break; // <--- FIX: Added break statement\n            }\n            else\n            {\n                // Non-option encountered and stopAtNonOption is false\n                // Add the entire original token and stop processing.\n                // Note: This branch's logic might differ from the Javadoc,\n                // but we stick to the original code's behavior here + fix for the specific test case.\n                tokens.add(token);\n                break;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}