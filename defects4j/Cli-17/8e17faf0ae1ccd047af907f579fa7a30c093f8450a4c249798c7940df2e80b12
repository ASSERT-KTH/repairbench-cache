{
    "generation": "protected void burstToken(String token, boolean stopAtNonOption) {\n    // break a grouped short option (e.g. \"-xyz\") into individual tokens\n    for (int i = 1; i < token.length(); i++) {\n        String ch = String.valueOf(token.charAt(i));\n        if (options.hasOption(ch)) {\n            // it's a known option: emit \"-x\"\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n            // if this option takes an argument, the rest of the string is its value\n            if (currentOption.hasArg() && token.length() > i + 1) {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        }\n        else if (stopAtNonOption) {\n            // on first unknown and stopAtNonOption, emit \"--\" and the rest as a single arg\n            tokens.add(\"--\");\n            tokens.add(token.substring(i));\n            break;\n        }\n        else {\n            // unknown option but continuing bursting: emit \"-z\"\n            tokens.add(\"-\" + ch);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}