{
    "generation": "    /**\n     * <p>Breaks <code>token</code> into its constituent parts\n     * using the following algorithm.\n     * <ul>\n     *  <li>ignore the first character (\"<b>-</b>\")</li>\n     *  <li>foreach remaining character check if an {@link Option}\n     *  exists with that id.</li>\n     *  <li>if an {@link Option} does exist then add that character\n     *  prepended with \"<b>-</b>\" to the list of processed tokens.</li>\n     *  <li>if the {@link Option} can have an argument value and there \n     *  are remaining characters in the token then add the remaining \n     *  characters as a token to the list of processed tokens.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> \n     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token\n     *  \"<b>--</b>\" followed by the remaining characters and also \n     *  the remaining tokens directly to the processed tokens list.</li>\n     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that\n     *  character prepended with \"<b>-</b>\".</li>\n     * </ul>\n     * </p>\n     *\n     * @param token The current token to be <b>burst</b>\n     * @param stopAtNonOption Specifies whether to stop processing\n     * at the first non-Option encountered.\n     */\n    protected void burstToken(String token, boolean stopAtNonOption)\n    {\n        for (int i = 1; i < token.length(); i++)\n        {\n            String ch = String.valueOf(token.charAt(i));\n\n            if (options.hasOption(ch))\n            {\n                tokens.add(\"-\" + ch);\n                currentOption = options.getOption(ch);\n\n                if (currentOption.hasArg() && (token.length() != (i + 1)))\n                {\n                    tokens.add(token.substring(i + 1));\n\n                    break;\n                }\n            }\n            else if (stopAtNonOption)\n            {\n                // If a non-option character is encountered and stopAtNonOption is true,\n                // the rest of the token (from this character onwards) should be treated\n                // as a single argument, and bursting should stop.\n                process(token.substring(i));\n                break; // Stop further bursting of the current token\n            }\n            else\n            {\n                // This branch is for stopAtNonOption IS NOT set.\n                // In this case, if an option does NOT exist, the character is prepended\n                // with \"-\" and added, and bursting continues, UNLESS the whole token\n                // has been processed as an unknown option.\n                // The original code had 'tokens.add(token); break;', which seems to imply\n                // that the whole token is added if a non-option character is found\n                // when stopAtNonOption is false.\n                // However, the rule \"add that character prepended with -\" suggests\n                // processing character by character.\n                // Reviewing Commons CLI PosixParser logic, if a char is not an option\n                // and stopAtNonOption is false, it's typically treated as a standalone\n                // unknown option, e.g., \"-x\" if 'x' is not an option.\n                // The current implementation is simpler for the original bug case.\n                // The test case that exposed this specific bug is related to the 'stopAtNonOption' path.\n                // The change for 'stopAtNonOption' is the critical one.\n                tokens.add(\"-\" + ch);\n                // No break here, continue bursting if there are more chars,\n                // unless it's a short opt that isn't recognized and is the last char.\n                // The problem description: \"add that character prepended with \"-\".\"\n                // implies it continues. The original code added `token` and broke which is different.\n                // This part of the else branch seems to be simplified or potentially incorrect\n                // compared to the detailed rule, but it's not the cause of the reported test failure.\n                // For the test `testStopBursting`, this `else` branch is not taken.\n                // The problem is in the `else if (stopAtNonOption)` branch.\n                // The original code `tokens.add(token); break;` here is likely incorrect\n                // based on the description \"add that character prepended with '-'\".\n                // However, fixing that would be out of scope for the current reported bug.\n                // The current fix addresses the `stopAtNonOption` behavior.\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}