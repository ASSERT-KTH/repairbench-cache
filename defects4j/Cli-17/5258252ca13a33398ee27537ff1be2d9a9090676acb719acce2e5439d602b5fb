{
    "generation": "protected void burstToken(String token, boolean stopAtNonOption) {\n    StringBuilder currentToken = new StringBuilder();\n    boolean inQuote = false;\n\n    for (int i = 1; i < token.length(); i++) {\n        char ch = token.charAt(i);\n\n        if (ch == '\"') {\n            inQuote = !inQuote;\n            continue;\n        }\n\n        if (inQuote) {\n            currentToken.append(ch);\n            continue;\n        }\n\n        if (options.hasOption(String.valueOf(ch))) {\n            if (currentToken.length() > 0) {\n                tokens.add(currentToken.toString());\n                currentToken.setLength(0);\n            }\n\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(String.valueOf(ch));\n\n            if (currentOption.hasArg() && (token.length() != (i + 1))) {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        } else if (stopAtNonOption) {\n            if (currentToken.length() > 0) {\n                tokens.add(currentToken.toString());\n                currentToken.setLength(0);\n            }\n\n            process(token.substring(i));\n            break;\n        } else {\n            currentToken.append(ch);\n        }\n    }\n\n    if (currentToken.length() > 0) {\n        tokens.add(currentToken.toString());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}