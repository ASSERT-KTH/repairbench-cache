{
    "generation": "    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\"); // The 'type' attribute for input elements\n\n            // Get the element's normal name (e.g., \"input\", \"select\", \"textarea\", \"button\")\n            String normalName = el.normalName();\n\n            // Skip specific input types and the <button> tag itself that are not included in general form data.\n            // These are typically only submitted if they are the activating control (e.g., clicked submit button).\n            if (\"input\".equals(normalName)) {\n                if (\"button\".equalsIgnoreCase(type) ||\n                    \"submit\".equalsIgnoreCase(type) ||\n                    \"reset\".equalsIgnoreCase(type) ||\n                    \"image\".equalsIgnoreCase(type)) {\n                    continue; // Skip these specific input types\n                }\n            } else if (\"button\".equals(normalName)) {\n                // The <button> tag (default type=\"submit\") also acts as a submit button\n                // and should generally be skipped from the data set unless it's the activated button.\n                continue;\n            }\n\n\n            if (\"select\".equals(normalName)) { // Use normalName consistently for tag type checks\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    // if nothing is selected, the first option is used for single-select.\n                    // For multi-select, if nothing is selected, nothing is submitted. Jsoup's current behavior\n                    // captures the first option if present and nothing is selected, which is common.\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                // This covers textarea and other input types like text, hidden, password, file, etc.\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}