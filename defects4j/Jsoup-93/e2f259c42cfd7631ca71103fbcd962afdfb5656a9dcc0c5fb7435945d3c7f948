{
    "generation": "    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            // Standard HTML form submission rules:\n            // 1. Elements must have a 'name' attribute with a non-empty value.\n            // 2. Elements must not be 'disabled'.\n            if (!el.hasAttr(\"name\") || el.attr(\"name\").length() == 0) {\n                continue;\n            }\n            if (el.hasAttr(\"disabled\")) {\n                continue;\n            }\n\n            String name = el.attr(\"name\");\n            String normalName = el.normalName(); // Tag name (e.g., \"input\", \"select\", \"textarea\")\n            String type = el.attr(\"type\"); // 'type' attribute, primarily for input elements\n\n            if (\"select\".equals(normalName)) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) { // nothing selected in select, so default to first option if available\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"input\".equals(normalName)) {\n                // Handle different input types according to HTML submission rules\n                if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                    // Only add checkbox or radio if they have the 'checked' attribute\n                    if (el.hasAttr(\"checked\")) {\n                        final String val = el.val().length() >  0 ? el.val() : \"on\";\n                        data.add(HttpConnection.KeyVal.create(name, val));\n                    }\n                } else if (\"button\".equalsIgnoreCase(type) ||\n                           \"submit\".equalsIgnoreCase(type) ||\n                           \"reset\".equalsIgnoreCase(type) ||\n                           \"image\".equalsIgnoreCase(type)) {\n                    // These input types do not submit a value as part of standard form data extraction\n                    // (they are typically triggered by user click, not collected by default).\n                    continue;\n                } else {\n                    // Default behavior for other input types (text, hidden, password, file etc.): add their value.\n                    // For 'file' input, el.val() returns the filename if a file is selected, or empty string.\n                    data.add(HttpConnection.KeyVal.create(name, el.val()));\n                }\n            } else if (\"textarea\".equals(normalName)) {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n            // Elements with other tag names (e.g., <button>) that are part of the 'elements' collection\n            // but not explicitly handled above would be skipped, which is generally correct for form data extraction.\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}