{
    "generation": "    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            // The original `el.tag().isFormSubmittable()` check, in some Jsoup versions,\n            // only checks the tag name (e.g., \"input\") but not the `type` attribute\n            // for `<input>` elements. This means `input[type=button]` or `input[type=file]`\n            // might incorrectly pass this check if the Tag is merely 'input'.\n            // HTML specification dictates certain input types (like button, reset, submit, file, image)\n            // are not submitted as standard key-value pairs.\n            // We need to explicitly filter these out.\n            if (!el.tag().isFormSubmittable()) continue; \n            \n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\"); // Type attribute is crucial for input elements\n\n            // Explicitly exclude certain input types that do not submit a simple key-value pair\n            // or are not intended for form submission (e.g., buttons).\n            if (\"input\".equalsIgnoreCase(el.normalName())) {\n                if (\"button\".equalsIgnoreCase(type) ||\n                    \"reset\".equalsIgnoreCase(type) ||\n                    \"submit\".equalsIgnoreCase(type) ||\n                    \"file\".equalsIgnoreCase(type) || // File inputs require special handling for actual file content\n                    \"image\".equalsIgnoreCase(type)) { // Image inputs submit x/y coordinates, not just value via `val()`\n                    continue; \n                }\n            }\n\n            if (\"select\".equals(el.normalName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) { // if no option is selected, HTML spec says to use the first option\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                // This 'else' block will now correctly handle other standard submittable elements\n                // like text inputs, hidden inputs, password inputs, textarea, etc.,\n                // which were not filtered out by the specific 'input' type check above.\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}