{
    "generation": "    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            // Skip disabled form inputs and those without a 'name' attribute\n            if (el.hasAttr(\"disabled\")) continue;\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n\n            String tagName = el.normalName();\n            // Determine the 'type' for input elements to handle them specifically\n            String type = tagName.equals(\"input\") ? el.attr(\"type\").toLowerCase() : \"\";\n\n\n            if (tagName.equals(\"input\")) {\n                if (\"checkbox\".equals(type) || \"radio\".equals(type)) {\n                    // Only add checkbox or radio if they have the 'checked' attribute\n                    if (el.hasAttr(\"checked\")) {\n                        final String val = el.val().length() >  0 ? el.val() : \"on\";\n                        data.add(HttpConnection.KeyVal.create(name, val));\n                    }\n                } else if (\"submit\".equals(type) || \"reset\".equals(type) || \"button\".equals(type) || \"image\".equals(type)) {\n                    // Input types such as submit, reset, button, and image are not typically\n                    // included in the general form data unless they are the specific element\n                    // that triggered the form submission. For a general formData() dump, they are skipped.\n                    continue;\n                } else {\n                    // All other input types (text, hidden, password, email, number, etc.)\n                    data.add(HttpConnection.KeyVal.create(name, el.val()));\n                }\n            } else if (tagName.equals(\"select\")) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    // If no option is explicitly selected, and it's a single-select dropdown,\n                    // the value of the first option is submitted.\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (tagName.equals(\"textarea\")) {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            } else if (tagName.equals(\"button\")) {\n                // <button> elements behave similarly to submit inputs; they only send data if clicked.\n                // For a general formData() dump, they are excluded for consistency.\n                continue;\n            }\n            // Other elements (e.g., fieldset, output) are not considered data-submitting controls in this context.\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}