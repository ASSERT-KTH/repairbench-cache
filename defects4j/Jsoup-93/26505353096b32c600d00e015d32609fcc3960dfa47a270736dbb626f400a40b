{
    "generation": "    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // e.g., 'option' tags are not form-submittable by themselves, but are handled by 'select'\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue; // skip elements with no name attribute\n            String type = el.attr(\"type\"); // Only relevant for <input> elements\n\n            // Input types that are not meant to be part of the data payload (e.g., submit, reset, button, image)\n            // unless they were the actual button that triggered the submission (which formData() doesn't track).\n            // These should generally be excluded from the collected data.\n            if (\"input\".equals(el.normalName())) {\n                if (\"submit\".equalsIgnoreCase(type) ||\n                    \"reset\".equalsIgnoreCase(type) ||\n                    \"button\".equalsIgnoreCase(type) ||\n                    \"image\".equalsIgnoreCase(type)) {\n                    continue;\n                }\n            }\n\n            if (\"select\".equals(el.normalName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                // If a select element without the 'multiple' attribute has no selected option,\n                // the first option is considered selected. If 'multiple' is present and nothing is selected,\n                // it contributes nothing. The current test case is a single select.\n                if (!set) {\n                    // This handles the case of a single-select dropdown where no option is explicitly selected.\n                    // The browser defaults to the first option's value.\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\"; // default value for checkbox if not specified\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                // For other input types (text, password, hidden, etc.) and textarea.\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}