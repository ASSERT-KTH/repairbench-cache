{
    "generation": "    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // e.g. <fieldset> is not submittable\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue; // control name required for submission\n            String tagName = el.normalName();\n            String type = \"\";\n            if (tagName.equals(\"input\")) // Check input type vs other tags\n                 type = el.attr(\"type\").toLowerCase(); // Use lower case for comparisons\n\n            // --- Start of Fix ---\n            // Skip elements that should not be submitted as part of formData\n            // Includes button tags, and input types button, submit, reset, image, file\n            if (tagName.equals(\"button\")) {\n                 continue; // Skip <button> elements\n            }\n            // input types that are not submitted: button, submit, reset, image, file\n            // Rationale: file data handled separately, image maps are not form data values, others don't submit data.\n            if (tagName.equals(\"input\") && (type.equals(\"button\") || type.equals(\"submit\") || type.equals(\"reset\") || type.equals(\"image\") || type.equals(\"file\"))) {\n                 continue; // Skip unsuitable <input> types\n            }\n            // --- End of Fix ---\n\n            if (\"select\".equals(tagName)) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    // If no option selected, browser behaviour is divergent.\n                    // Simplification: Pick the first available option. W3C says the first non-disabled one.\n                    Element option = el.select(\"option\").first();\n                    if (option != null && !option.hasAttr(\"disabled\")) // Check if the first option is disabled\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) { // type check is relevant for input elements\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    // HTML5 specifies default value is \"on\" if attribute value is missing\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                 // All other submittable types e.g. input[text], input[password], input[hidden], textarea\n                 data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}