{
    "generation": "    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            // Skip elements that are not form submittable (e.g., div, p)\n            if (!el.tag().isFormSubmittable()) continue; \n            // Skip disabled form inputs\n            if (el.hasAttr(\"disabled\")) continue; \n            \n            String name = el.attr(\"name\");\n            // Skip elements without a name attribute\n            if (name.length() == 0) continue;\n\n            String normalName = el.normalName(); // Get the normalized tag name (e.g., \"input\", \"select\", \"textarea\", \"button\")\n            String type = el.attr(\"type\"); // Only relevant for <input> elements\n\n            if (\"select\".equals(normalName)) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) { // if no option is selected, the first one is submitted (browser behavior)\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else if (\"input\".equals(normalName)) {\n                // Handle different input types\n                if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n                    // only add checkbox or radio if they have the checked attribute\n                    if (el.hasAttr(\"checked\")) {\n                        final String val = el.val().length() >  0 ? el.val() : \"on\";\n                        data.add(HttpConnection.KeyVal.create(name, val));\n                    }\n                } else if (\"button\".equalsIgnoreCase(type) ||\n                           \"submit\".equalsIgnoreCase(type) ||\n                           \"reset\".equalsIgnoreCase(type) ||\n                           \"file\".equalsIgnoreCase(type) ||\n                           \"image\".equalsIgnoreCase(type)) {\n                    // These input types are typically not included in formData() for a generic form submission.\n                    // For 'file', el.val() returns empty string if no file is selected.\n                    // For 'submit'/'image'/'button', they are only included if they were the activating element, not in a general formData scan.\n                    continue; // Skip these specific input types\n                } else {\n                    // Default input types like text, hidden, password, email, number, etc.\n                    data.add(HttpConnection.KeyVal.create(name, el.val()));\n                }\n            } else if (\"textarea\".equals(normalName)) {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            } else if (\"button\".equals(normalName)) {\n                // The <button> tag itself (not <input type=\"button\">).\n                // Similar to input[type=submit], its value is typically only included if it initiated the submission.\n                // For a general formData() collection, skip it.\n                continue;\n            }\n            // Other tags that are isFormSubmittable() (e.g., <datalist>) are not covered by standard form data collection.\n            // Jsoup's Tag.isFormSubmittable() currently covers input, select, textarea, button.\n            // All these are handled by the above if/else if blocks.\n        }\n        return data;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}