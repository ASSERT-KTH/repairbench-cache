{
    "generation": "    /**\n     * <p>Checks if two calendar objects represent the same local time.</p>\n     *\n     * <p>This method compares the values of the fields of the two objects.\n     * In addition, both calendars must be the same of the same type.</p>\n     *\n     * @param cal1  the first calendar, not altered, not null\n     * @param cal2  the second calendar, not altered, not null\n     * @return true if they represent the same millisecond instant\n     * @throws IllegalArgumentException if either date is <code>null</code>\n     * @since 2.1\n     */\n    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n        if (cal1 == null || cal2 == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        if (cal1.getClass() != cal2.getClass()) {\n            return false;\n        }\n        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n                (cal1.get(Calendar.HOUR_OF_DAY) - (cal1.get(Calendar.ZONE_OFFSET) + cal1.get(Calendar.DST_OFFSET)) / (60 * 60 * 1000))\n                    == (cal2.get(Calendar.HOUR_OF_DAY) - (cal2.get(Calendar.ZONE_OFFSET) + cal2.get(Calendar.DST_OFFSET)) / (60 * 60 * 1000)) &&\n                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}