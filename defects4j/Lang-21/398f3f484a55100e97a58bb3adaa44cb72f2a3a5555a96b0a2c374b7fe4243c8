{
    "generation": "/**\n * <p>Checks if two calendar objects represent the same local time.</p>\n *\n * <p>This method compares the values of the fields of the two objects.\n * In addition, both calendars must be of the same type.</p>\n * \n * @param cal1  the first calendar, not altered, not null\n * @param cal2  the second calendar, not altered, not null\n * @return true if they represent the same local time fields\n * @throws IllegalArgumentException if either calendar is <code>null</code>\n * @since 2.1\n */\npublic static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND)\n        && cal1.get(Calendar.SECOND)      == cal2.get(Calendar.SECOND)\n        && cal1.get(Calendar.MINUTE)      == cal2.get(Calendar.MINUTE)\n        && cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY)\n        && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR)\n        && cal1.get(Calendar.YEAR)        == cal2.get(Calendar.YEAR)\n        && cal1.get(Calendar.ERA)         == cal2.get(Calendar.ERA)\n        && cal1.getClass()                == cal2.getClass();\n}",
    "exact_match": false,
    "ast_match": true,
    "compile": true,
    "test": true
}