{
    "generation": "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n\n    if (currEntry != null) {\n        long numToSkip = entrySize - entryOffset;\n\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n\n        readBuf = null;\n    }\n\n    byte[] headerBuf = getRecord();\n\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n\n    if (currEntry.isGNULongNameEntry()) {\n        StringBuffer longName = new StringBuffer();\n        byte[] buf = new byte[SMALL_BUFFER_SIZE];\n        int length;\n        while ((length = read(buf)) >= 0) {\n            longName.append(new String(buf, 0, length));\n        }\n        TarArchiveEntry nextEntry = getNextTarEntry();\n        if (nextEntry == null) {\n            throw new IllegalArgumentException(\"Malformed tar file - long entry name not followed by entry\");\n        }\n        if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) {\n            longName.deleteCharAt(longName.length() - 1);\n        }\n        currEntry.setName(longName.toString());\n        currEntry = nextEntry;\n    }\n\n    if (currEntry.isPaxHeader()) {\n        paxHeaders();\n    }\n\n    if (currEntry.isGNUSparse()) {\n        readGNUSparse();\n    }\n\n    entrySize = currEntry.getSize();\n    return currEntry;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}