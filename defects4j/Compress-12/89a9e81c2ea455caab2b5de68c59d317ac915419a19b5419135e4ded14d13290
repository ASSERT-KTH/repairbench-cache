{
    "generation": "/**\n * Get the next entry in this tar archive. This will skip\n * over any remaining data in the current entry, if there\n * is one, and place the input stream at the header of the\n * next entry, and read the header and instantiate a new\n * TarEntry from the header bytes and return that entry.\n * If there are no more entries in the archive, null will\n * be returned to indicate that the end of the archive has\n * been reached.\n *\n * @return The next TarEntry in the archive, or null.\n * @throws IOException on error\n */\npublic TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n\n    // If we have a current entry, skip its unread bytes.\n    if (currEntry != null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n\n    // Read the next header record.\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n\n    // Process GNU long name entry.\n    if (currEntry.isGNULongNameEntry()) {\n        StringBuffer longName = new StringBuffer();\n        byte[] buf = new byte[SMALL_BUFFER_SIZE];\n        int length;\n        while ((length = read(buf)) >= 0) {\n            longName.append(new String(buf, 0, length));\n        }\n        // Replace the current entry with the one following the long name entry.\n        currEntry = getNextEntry();\n        if (currEntry == null) {\n            // Malformed tar file - long entry name not followed by entry\n            return null;\n        }\n        // Remove any trailing null characters.\n        while (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) {\n            longName.deleteCharAt(longName.length() - 1);\n        }\n        currEntry.setName(longName.toString());\n    }\n\n    // Process Pax headers if present.\n    if (currEntry.isPaxHeader()) {\n        paxHeaders();\n    }\n\n    // Process GNU sparse files if needed.\n    if (currEntry.isGNUSparse()) {\n        readGNUSparse();\n    }\n\n    // Update the entry size (in case the header changed it, e.g. via a posix header)\n    entrySize = currEntry.getSize();\n    return currEntry;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}