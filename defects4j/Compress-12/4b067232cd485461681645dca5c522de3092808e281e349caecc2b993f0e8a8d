{
    "generation": "    /**\n     * Get the next entry in this tar archive. This will skip\n     * over any remaining data in the current entry, if there\n     * is one, and place the input stream at the header of the\n     * next entry, and read the header and instantiate a new\n     * TarEntry from the header bytes and return that entry.\n     * If there are no more entries in the archive, null will\n     * be returned to indicate that the end of the archive has\n     * been reached.\n     *\n     * @return The next TarEntry in the archive, or null.\n     * @throws IOException on error\n     */\n    public TarArchiveEntry getNextTarEntry() throws IOException {\n        if (hasHitEOF) {\n            return null;\n        }\n\n        if (currEntry != null) {\n            long numToSkip = entrySize - entryOffset;\n\n            while (numToSkip > 0) {\n                long skipped = skip(numToSkip);\n                // If skipped is 0, it means we are at EOF or there's nothing more to skip.\n                // If it's -1, it also means EOF.\n                // We should only throw if we were expecting to skip bytes but couldn't,\n                // and we are not at EOF. However, the original code throws on <= 0,\n                // so we keep that behavior unless it's the root cause of another issue.\n                if (skipped <= 0 && !hasHitEOF) { // Added !hasHitEOF to prevent error if EOF\n                    throw new RuntimeException(\"failed to skip current tar entry\");\n                }\n                numToSkip -= skipped;\n            }\n\n            readBuf = null;\n        }\n\n        byte[] headerBuf = getRecord();\n\n        if (hasHitEOF) {\n            currEntry = null;\n            return null;\n        }\n\n        // Fix for COMPRESS-178: Catch IllegalArgumentException during TarArchiveEntry\n        // construction, which indicates a malformed header, and rethrow as IOException\n        // to conform to the ArchiveInputStream API contract for I/O errors.\n        try {\n            currEntry = new TarArchiveEntry(headerBuf);\n        } catch (IllegalArgumentException e) {\n            // A malformed header indicates a corrupted archive.\n            // Mark EOF so subsequent calls return null.\n            hasHitEOF = true; \n            throw new IOException(\"Malformed tar header\", e);\n        }\n        \n        entryOffset = 0;\n        entrySize = currEntry.getSize();\n\n        if (currEntry.isGNULongNameEntry()) {\n            // read in the name\n            StringBuffer longName = new StringBuffer();\n            byte[] buf = new byte[SMALL_BUFFER_SIZE];\n            int length = 0;\n            // The isGNULongNameEntry indicates the current entry is a \"long name\" entry itself.\n            // Its \"data\" is the long name. This read is from the input stream.\n            while ((length = read(buf)) >= 0) {\n                longName.append(new String(buf, 0, length));\n            }\n            // After reading the long name, the stream should be positioned at the *next* entry's header.\n            // Recursively call getNextEntry to get the actual entry described by the long name.\n            getNextEntry(); // This call will now process the actual entry header\n            if (currEntry == null) {\n                // Bugzilla: 40334\n                // Malformed tar file - long entry name not followed by entry\n                return null;\n            }\n            // remove trailing null terminator\n            if (longName.length() > 0\n                && longName.charAt(longName.length() - 1) == 0) {\n                longName.deleteCharAt(longName.length() - 1);\n            }\n            currEntry.setName(longName.toString());\n        }\n\n        if (currEntry.isPaxHeader()){ // Process Pax headers\n            paxHeaders();\n        }\n\n        if (currEntry.isGNUSparse()){ // Process sparse files\n            readGNUSparse();\n        }\n\n        // If the size of the next element in the archive has changed\n        // due to a new size being reported in the posix header\n        // information, we update entrySize here so that it contains\n        // the correct value.\n        entrySize = currEntry.getSize();\n        return currEntry;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}