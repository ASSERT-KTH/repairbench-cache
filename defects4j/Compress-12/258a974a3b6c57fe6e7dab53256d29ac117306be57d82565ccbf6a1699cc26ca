{
    "generation": "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n\n    if (currEntry != null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new IOException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n\n    byte[] headerBuf = getRecord();\n\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n\n    try {\n        currEntry = new TarArchiveEntry(headerBuf);\n    } catch (IllegalArgumentException iae) {\n        throw new IOException(iae);\n    }\n\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n\n    if (currEntry.isGNULongNameEntry()) {\n        // Read in the long name.\n        StringBuffer longName = new StringBuffer();\n        byte[] buf = new byte[SMALL_BUFFER_SIZE];\n        int length;\n        while ((length = read(buf)) >= 0) {\n            longName.append(new String(buf, 0, length));\n        }\n        // Instead of calling getNextEntry(), recursively load the next tar entry.\n        currEntry = getNextTarEntry();\n        if (currEntry == null) {\n            // Malformed tar file \u2013 long entry name not followed by an entry.\n            return null;\n        }\n        // Remove trailing null terminator.\n        if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) {\n            longName.deleteCharAt(longName.length() - 1);\n        }\n        currEntry.setName(longName.toString());\n    }\n\n    if (currEntry.isPaxHeader()) { // Process Pax headers.\n        paxHeaders();\n    }\n\n    if (currEntry.isGNUSparse()) { // Process sparse files.\n        readGNUSparse();\n    }\n\n    // Update the entry size (might have changed due to POSIX header info).\n    entrySize = currEntry.getSize();\n    return currEntry;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}