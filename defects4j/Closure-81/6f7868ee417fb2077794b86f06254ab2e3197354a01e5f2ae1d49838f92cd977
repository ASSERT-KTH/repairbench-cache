{
    "generation": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      boolean isUnnamedFunction = false; // Changed from Boolean to boolean for consistency\n      if (name == null) {\n        isUnnamedFunction = true;\n        // Check if this is an unnamed function statement, which is an error in JavaScript.\n        // FunctionNode.isFunctionExpression() returns true if it's an expression.\n        // If it's not an expression, it's a statement.\n        if (!functionNode.isFunctionExpression()) {\n          // Report the error according to the test case expectation.\n          // 'this' is assumed to be an instance of IRFactory or a class\n          // inheriting from DefaultNodeTransformer, which has a reportError method.\n          reportError(\"unnamed function statement\", functionNode);\n        }\n        // Even if it's an error, we proceed to create a placeholder Name node\n        // for the AST, as the parser might continue or need a representation.\n        name = new Name();\n        name.setIdentifier(\"\"); // Set to empty string for unnamed functions\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}