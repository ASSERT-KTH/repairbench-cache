{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  boolean isUnnamedFunction = false;\n\n  // Unnamed \"function\" *statements* are illegal in ES5;\n  // only unnamed function *expressions* are allowed.\n  if (name == null && !functionNode.isExpressionClosure()) {\n    // Report a parse error and abort conversion.\n    // We throw here so that Parser.parse() will record this\n    // as a parse error \"unnamed function statement\".\n    throw new ParserException(\n        \"unnamed function statement\",\n        functionNode.getLineno(),\n        position2charno(functionNode.getAbsolutePosition() + functionNode.getLp()));\n  }\n\n  // For unnamed expressions we still create a dummy name so that\n  // our AST\u2010to\u2010IR converter has something to hang on to.\n  if (name == null) {\n    name = new Name();\n    name.setIdentifier(\"\");\n    isUnnamedFunction = true;\n  }\n\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n\n  if (isUnnamedFunction) {\n    // Rhino tags the empty name node with the declaration line.\n    newName.setLineno(functionNode.getLineno());\n    // TODO: record the '(' line/column properly.\n    int lpOffset = functionNode.getAbsolutePosition() + functionNode.getLp();\n    newName.setCharno(position2charno(lpOffset));\n  }\n\n  node.addChildToBack(newName);\n\n  Node lp = newNode(Token.LP);\n  // The left\u2010paren must appear on the same line as the function name\n  // (or keyword, if anonymous), otherwise ASI would fire.\n  Name fnName = functionNode.getFunctionName();\n  if (fnName != null) {\n    lp.setLineno(fnName.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n  int lparenOffset = functionNode.getAbsolutePosition() + functionNode.getLp();\n  lp.setCharno(position2charno(lparenOffset));\n\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}