{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  Boolean isUnnamedFunction = false;\n  if (name == null) {\n    name = new Name();\n    name.setIdentifier(\"\");\n    isUnnamedFunction = true;\n  }\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n  if (isUnnamedFunction) {\n    // Old Rhino tagged the empty name node with the line number of the\n    // declaration.\n    newName.setLineno(functionNode.getLineno());\n    int lpColumn = functionNode.getAbsolutePosition() + \n        functionNode.getLp();\n    // Fix: Ensure the character position is correctly calculated\n    newName.setCharno(position2charno(lpColumn));\n  } else {\n    // Fix: For named functions, set the line and character numbers based on the function name\n    newName.setLineno(name.getLineno());\n    newName.setCharno(name.getCharno());\n  }\n\n  node.addChildToBack(newName);\n  Node lp = newNode(Token.LP);\n  // Fix: The left paren's line number should be based on the function's line number\n  // if the function is unnamed, or the function name's line number if named.\n  if (isUnnamedFunction) {\n    lp.setLineno(functionNode.getLineno());\n  } else {\n    lp.setLineno(name.getLineno());\n  }\n  int lparenCharno = functionNode.getLp() + \n      functionNode.getAbsolutePosition();\n  lp.setCharno(position2charno(lparenCharno));\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}