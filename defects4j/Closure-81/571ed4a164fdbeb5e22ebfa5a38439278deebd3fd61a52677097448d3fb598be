{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    Boolean isUnnamedFunction = false;\n    if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n    } else {\n        isUnnamedFunction = false;\n    }\n\n    Node node = newNode(Token.FUNCTION);\n    Node newName = transform(name);\n    if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // Set the character position based on the function keyword position.\n        int fnKeywordPosition = functionNode.getAbsolutePosition();\n        newName.setCharno(position2charno(fnKeywordPosition));\n    } else {\n        newName.setLineno(name.getLineno());\n        newName.setCharno(name.getCharno());\n    }\n\n    node.addChildToBack(newName);\n\n    Node lp = newNode(Token.LP);\n    int lpColumn = functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setLineno(functionNode.getLineno()); // Use functionNode's line number for paren\n    lp.setCharno(position2charno(lpColumn));\n\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n\n    // Check if it's an unnamed function statement and throw an error if necessary\n    if (isUnnamedFunction && parentIsScriptOrBlock(node)) {\n        throw new IllegalArgumentException(\"unnamed function statement\");\n    }\n\n    return node;\n}\n\nprivate boolean parentIsScriptOrBlock(Node node) {\n    Node parent = node.getParent();\n    return parent != null && (parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}