{
    "generation": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // Mark line number of paren correctly.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      // The left paren's line number should be the same as the function name\n      // if it exists, otherwise it should be the same as the function keyword.\n      if (isUnnamedFunction) {\n        lp.setLineno(functionNode.getLineno());\n      } else {\n        lp.setLineno(name.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n      \n      // Check if the function is an unnamed function statement and throw an error if necessary\n      if (isUnnamedFunction && parent.getType() == Token.SCRIPT) {\n        throw new IllegalArgumentException(\"unnamed function statement\");\n      }\n\n      return node;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}