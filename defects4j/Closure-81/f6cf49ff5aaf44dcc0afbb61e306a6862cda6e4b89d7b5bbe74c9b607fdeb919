{
    "generation": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      boolean isUnnamedFunctionExpression = false; // Renamed for clarity and accuracy\n      if (name == null) {\n        // This is an unnamed function.\n        // Unnamed function statements are an error in JavaScript.\n        // Unnamed function expressions (e.g., (function() {})) are valid.\n        if (functionNode.isFunctionStatement()) {\n          // If it's an unnamed function statement, report an error.\n          reportError(\"unnamed function statement\", functionNode);\n          // Even after reporting an error, we continue to build the AST\n          // for potential recovery or to allow other errors to be found.\n          // So, we proceed by creating a dummy name node as the original code did.\n          name = new Name();\n          name.setIdentifier(\"\");\n        } else {\n          // It's an unnamed function expression. This is valid.\n          name = new Name();\n          name.setIdentifier(\"\");\n          isUnnamedFunctionExpression = true;\n        }\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunctionExpression) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        // If the function was originally unnamed (whether statement or expression),\n        // use the line number of the function node itself for the left parenthesis.\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}