{
    "generation": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n\n      // Rule: Unnamed function statements are illegal.\n      // A function is considered a statement if it's not a function expression.\n      if (name == null && !functionNode.isFunctionExpression()) {\n        // Report an error for unnamed function statements.\n        // The compilation process will ultimately fail due to this error,\n        // but we continue to build a node structure to avoid potential\n        // NullPointerExceptions in subsequent processing stages if the\n        // error reporting mechanism allows continuation.\n        reportError(\"unnamed function statement\", functionNode);\n      }\n\n      // If the function has no name (either a legal unnamed expression or an illegal unnamed statement),\n      // create a dummy name node with an empty identifier.\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\"); // Represents the empty name of an unnamed function\n        isUnnamedFunction = true; // Mark as an unnamed function\n      }\n\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name); // Transforms the actual name or the dummy empty name.\n\n      // If it's an unnamed function (expression or statement), apply line/char details to its name node.\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName(); // This gets the original Rhino AST name.\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        // This path is taken for all unnamed functions (expressions and statements).\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}