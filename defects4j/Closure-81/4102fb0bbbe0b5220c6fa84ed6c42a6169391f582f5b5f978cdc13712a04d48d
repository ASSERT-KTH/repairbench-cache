{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    boolean isUnnamedFunction = false;\n\n    if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n    }\n\n    Node node = newNode(Token.FUNCTION);\n    Node newName = transform(name);\n\n    if (isUnnamedFunction) {\n        // Preserve line number from function declaration's identifier position\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n        // Check if it's an unnamed function declaration (statement)\n        if (functionNode.isFunctionDeclaration()) {\n            // Report error for unnamed function statement\n            reportParseError(functionNode.getAbsolutePosition(), \"unnamed function statement\");\n        }\n    }\n\n    node.addChildToBack(newName);\n    Node lp = newNode(Token.LP);\n    \n    // Determine the left paren's line number based on function name or function declaration\n    if (name != null) {\n        lp.setLineno(name.getLineno());\n    } else {\n        lp.setLineno(functionNode.getLineno());\n    }\n    \n    int lparenCharno = functionNode.getAbsolutePosition() + functionNode.getLp();\n    lp.setCharno(position2charno(lparenCharno));\n    \n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    \n    return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}