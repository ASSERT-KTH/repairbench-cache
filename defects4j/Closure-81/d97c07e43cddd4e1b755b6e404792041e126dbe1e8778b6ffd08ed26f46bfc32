{
    "generation": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        // Function statement must have a name. This is a syntax error.\n        // We need to report the error and create a dummy name node for\n        // processing to continue.\n        if (functionNode.isFunctionDeclaration()) {\n          // Report error at the '(' token position, where the name is expected.\n          int lpPosition = functionNode.getAbsolutePosition() + functionNode.getLp();\n          // Use the standard Rhino message key for this error.\n          handleError(functionNode, \"msg.no.name.after.function\", lpPosition, functionNode.getLp() + 1); // Provide position span if possible\n        }\n        // Create a dummy name node.\n        name = new Name();\n        name.setIdentifier(\"\"); // Use empty string for the dummy name.\n        // Mark the dummy name node with the function's position.\n        name.setLineno(functionNode.getLineno());\n        name.setCharno(functionNode.getCharno() + \"function\".length()); // Position after \"function\" keyword\n        isUnnamedFunction = true;\n      }\n\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      // If a dummy name was created, ensure it has position info.\n      // The transform call might clear it, or might not have been set if name wasn't null initially.\n      // Let's ensure the position is set correctly on the IR name node.\n      if (isUnnamedFunction) {\n         // Old Rhino tagged the empty name node with the line number of the\n         // declaration (or the '(' if no name). Let's use the function's line number.\n        newName.setLineno(functionNode.getLineno());\n         // Position the empty name where the '(' is, as that's where the error occurs.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.addChildToBack(newName);\n\n      // Create PARAM_LIST node for parameters, not LP.\n      Node paramList = newNode(Token.PARAM_LIST);\n\n      // Set line and character number for the parameter list.\n      // Use the function name's line if available, otherwise the function's line.\n      Name fnName = functionNode.getFunctionName(); // Get original name node for position info\n      if (fnName != null) {\n        paramList.setLineno(fnName.getLineno());\n      } else {\n        paramList.setLineno(functionNode.getLineno());\n      }\n      // Character number should correspond to the '(' token.\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n      paramList.setCharno(position2charno(lparenCharno));\n\n      // Process parameters and add them to the PARAM_LIST node.\n      for (AstNode param : functionNode.getParams()) {\n        paramList.addChildToBack(transform(param));\n      }\n      node.addChildToBack(paramList);\n\n      // Process the function body.\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n\n      // Set source information for the FUNCTION node itself\n      setSourceInfo(node, functionNode);\n\n      return node;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}