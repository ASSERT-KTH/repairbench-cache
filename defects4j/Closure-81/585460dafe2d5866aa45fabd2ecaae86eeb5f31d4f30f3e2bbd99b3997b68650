{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    Boolean isUnnamedFunction = false;\n    Node newName = null;\n\n    if (name != null) {\n        newName = transform(name);\n    } else {\n        isUnnamedFunction = true;\n    }\n\n    Node node = newNode(Token.FUNCTION);\n    if (newName != null) {\n        node.addChildToBack(newName);\n    }\n\n    if (isUnnamedFunction) {\n        // Set line number for the placeholder name node based on function declaration's line number\n        Node placeholderName = newNode(Token.NAME);\n        placeholderName.setLineno(functionNode.getLineno());\n        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n        placeholderName.setCharno(position2charno(lpColumn));\n        node.addChildToBack(placeholderName);\n    }\n\n    Node lp = newNode(Token.LP);\n    if (functionNode.getFunctionName() != null) {\n        lp.setLineno(functionNode.getFunctionName().getLineno());\n    } else {\n        lp.setLineno(functionNode.getLineno());\n    }\n\n    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n\n    node.addChildToBack(lp);\n\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n\n    return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}