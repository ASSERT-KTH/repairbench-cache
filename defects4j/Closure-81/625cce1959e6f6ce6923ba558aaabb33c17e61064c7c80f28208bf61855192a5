{
    "generation": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Node newName; // This will hold the name node (either Token.NAME or Token.EMPTY)\n\n      if (name == null) {\n        // For unnamed function expressions, the name slot in the AST should be\n        // an EMPTY node, not a NAME node with an empty string.\n        newName = newNode(Token.EMPTY);\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration. The original code used the function node's line number\n        // and derived charno from the left paren's position. We preserve this.\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      } else {\n        // For named functions, transform the actual Name object from Rhino.\n        newName = transform(name);\n      }\n\n      Node node = newNode(Token.FUNCTION);\n      node.addChildToBack(newName);\n\n      Node lp = newNode(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}