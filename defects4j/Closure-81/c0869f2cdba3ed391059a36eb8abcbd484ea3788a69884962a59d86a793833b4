{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  Boolean isUnnamedFunction = false;\n\n  // Disallow anonymous functions in statement position.\n  if (name == null) {\n    if (!functionNode.isExpression()) {\n      // Report a parse\u2010error: \"unnamed function statement\"\n      report(functionNode, \"unnamed function statement\");\n    }\n    // Synthesize an empty name for anonymous functions\n    name = new Name();\n    name.setIdentifier(\"\");\n    isUnnamedFunction = true;\n  }\n\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n\n  if (isUnnamedFunction) {\n    // Old Rhino tagged the empty name node with the line number of the\n    // declaration.\n    newName.setLineno(functionNode.getLineno());\n    // TODO mark line number of paren correctly.\n    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn));\n  }\n  node.addChildToBack(newName);\n\n  // Build the parameter list\n  Node lp = newNode(Token.LP);\n  Name fnName = functionNode.getFunctionName();\n  if (fnName != null) {\n    lp.setLineno(fnName.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n  int lparenCharno = functionNode.getAbsolutePosition() + functionNode.getLp();\n  lp.setCharno(position2charno(lparenCharno));\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  // Build the function body\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}