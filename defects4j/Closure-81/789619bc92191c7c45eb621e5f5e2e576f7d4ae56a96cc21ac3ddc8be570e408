{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  // If this is a function\u2010declaration (\"statement\") without a name, it's an error.\n  Name name = functionNode.getFunctionName();\n  if (name == null && functionNode.getFunctionType() == FunctionNode.FUNCTION_STATEMENT) {\n    // reports the \"unnamed function statement\" error so parseError(...) will catch it\n    reportError(functionNode, UNNAMED_FUNCTION_STATEMENT);\n  }\n\n  // Now do the normal Rhino\u2192Closure AST conversion.\n  Boolean isUnnamedFunction = false;\n  if (name == null) {\n    name = new Name();\n    name.setIdentifier(\"\");\n    isUnnamedFunction = true;\n  }\n\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n  if (isUnnamedFunction) {\n    // Old Rhino tagged the empty name node with the line number of the\n    // declaration.\n    newName.setLineno(functionNode.getLineno());\n    // TODO(bowdidge) Mark line number of paren correctly.\n    // Same problem as below - the left paren might not be on the\n    // same line as the function keyword.\n    int lpColumn = functionNode.getAbsolutePosition() +\n        functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn));\n  }\n\n  node.addChildToBack(newName);\n  Node lp = newNode(Token.LP);\n  // The left paren's complicated because it's not represented by an\n  // AstNode, so there's nothing that has the actual line number that it\n  // appeared on.  We know the paren has to appear on the same line as the\n  // function name (or else a semicolon will be inserted.)  If there's no\n  // function name, assume the paren was on the same line as the function.\n  // TODO(bowdidge): Mark line number of paren correctly.\n  Name fnName = functionNode.getFunctionName();\n  if (fnName != null) {\n    lp.setLineno(fnName.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n  int lparenCharno = functionNode.getLp() +\n      functionNode.getAbsolutePosition();\n  lp.setCharno(position2charno(lparenCharno));\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}