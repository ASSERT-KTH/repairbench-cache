{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  // Get the original function name (may be null for unnamed functions)\n  Name name = functionNode.getFunctionName();\n  boolean isUnnamedFunction = (name == null);\n\n  // ES5 disallows unnamed function *statements*, but allows unnamed function *expressions*.\n  if (isUnnamedFunction\n      && functionNode.getFunctionType() == FunctionNode.FUNCTION_STATEMENT) {\n    // Report a parse error on \"function() {};\" in statement position.\n    // (reportError is a helper in this class that pushes the error\n    //   into the shared ErrorReporter / JSError list.)\n    reportError(functionNode, \"unnamed function statement\");\n  }\n\n  // If there was no name, synthesize an empty one (so the IR stays well\u2010formed).\n  if (name == null) {\n    name = new Name();\n    name.setIdentifier(\"\");\n  }\n\n  // Build the FUNCTION node\n  Node fn = newNode(Token.FUNCTION);\n\n  // Transform the name into an IR NAME node\n  Node newName = transform(name);\n  if (isUnnamedFunction) {\n    // Rhino used to tag the empty name with the decl line/col.\n    newName.setLineno(functionNode.getLineno());\n    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn));\n  }\n  fn.addChildToBack(newName);\n\n  // Build the parameter list \"(\" ... \")\"\n  Node lp = newNode(Token.LP);\n  Name fnName = functionNode.getFunctionName();\n  if (fnName != null) {\n    lp.setLineno(fnName.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n  int lparenCharno = functionNode.getAbsolutePosition() + functionNode.getLp();\n  lp.setCharno(position2charno(lparenCharno));\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  fn.addChildToBack(lp);\n\n  // Transform the function body\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  fn.addChildToBack(bodyNode);\n\n  return fn;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}