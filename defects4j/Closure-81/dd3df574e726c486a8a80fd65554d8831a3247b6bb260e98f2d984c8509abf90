{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  boolean isUnnamedFunction = false;\n  if (name == null) {\n    name = new Name();\n    name.setIdentifier(\"\");\n    isUnnamedFunction = true;\n  }\n  // If this anonymous function is used as a statement (rather than an expression),\n  // then it is a syntax error.\n  if (isUnnamedFunction && !functionNode.isFunctionExpression()) {\n    throw new IllegalArgumentException(\"unnamed function statement\");\n  }\n\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n  if (isUnnamedFunction) {\n    // Old Rhino tagged the empty name node with the line number of the declaration.\n    newName.setLineno(functionNode.getLineno());\n    // TODO(bowdidge) Mark line number of paren correctly.\n    // Same problem as below - the left paren might not be on the\n    // same line as the function keyword.\n    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn));\n  }\n  node.addChildToBack(newName);\n\n  Node lp = newNode(Token.LP);\n  // The left paren is complicated because it's not represented by an AstNode,\n  // so there is nothing that has the actual line number that it appeared on.\n  // We know the paren has to appear on the same line as the function name (or\n  // else a semicolon will be inserted.) If there's no function name, assume the\n  // paren was on the same line as the function.\n  // TODO(bowdidge): Mark line number of paren correctly.\n  Name fnName = functionNode.getFunctionName();\n  if (fnName != null) {\n    lp.setLineno(fnName.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n  lp.setCharno(position2charno(lparenCharno));\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}