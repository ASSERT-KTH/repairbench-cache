{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  // Get the function name, if any.\n  Name name = functionNode.getFunctionName();\n  boolean isUnnamedFunction = false;\n  if (name == null) {\n    // When the function has no name, create an empty name.\n    name = new Name();\n    name.setIdentifier(\"\");\n    isUnnamedFunction = true;\n  }\n\n  // Rule: an unnamed function is only allowed as an expression.\n  // If it appears as a statement, report a parse error.\n  if (isUnnamedFunction && !functionNode.isFunctionExpression()) {\n    error(\"unnamed function statement\");\n  }\n\n  Node node = newNode(Token.FUNCTION);\n  // Use the (possibly empty) name node for the function.\n  Node newName = transform(name);\n  if (isUnnamedFunction) {\n    // For an anonymous function declaration, tag the empty name node\n    // with the line number of the function declaration.\n    newName.setLineno(functionNode.getLineno());\n    // Compute the character position based on function's absolute position\n    // plus the left-paren offset.\n    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn));\n  }\n  node.addChildToBack(newName);\n\n  Node lp = newNode(Token.LP);\n  // For the left parenthesis, if we have a nonempty name then assume its\n  // line number is the one where the paren appears;\n  // otherwise, use the function's line number.\n  if (!name.getIdentifier().isEmpty()) {\n    lp.setLineno(name.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n  lp.setCharno(position2charno(lparenCharno));\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}