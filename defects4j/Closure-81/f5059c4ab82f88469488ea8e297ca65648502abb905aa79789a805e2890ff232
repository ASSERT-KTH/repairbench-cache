{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  Node node = newNode(Token.FUNCTION);\n\n  // Unnamed function statement is a parse error in JavaScript.\n  // Only allow unnamed for function expressions, not declarations/statements.\n  boolean isUnnamedFunction = false;\n  if (name == null) {\n    isUnnamedFunction = true;\n    // Check for function *statements* with no name and throw error\n    if (functionNode.isStatement()) {\n      // Simulate the parse error as Parser does.\n      errorReporter.error(\"unnamed function statement\",\n                          sourceName,\n                          functionNode.getLineno(),\n                          \"\",\n                          0);\n      // Could return a dummy node, or throw if desired\n      Name dummy = new Name();\n      dummy.setIdentifier(\"\");\n      name = dummy;\n    } else {\n      // Function expression, use empty name node.\n      Name dummy = new Name();\n      dummy.setIdentifier(\"\");\n      name = dummy;\n    }\n  }\n\n  Node newName = transform(name);\n  if (isUnnamedFunction) {\n    newName.setLineno(functionNode.getLineno());\n    int lpColumn = functionNode.getAbsolutePosition() +\n        functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn));\n  }\n\n  node.addChildToBack(newName);\n  Node lp = newNode(Token.LP);\n  Name fnName = functionNode.getFunctionName();\n  if (fnName != null) {\n    lp.setLineno(fnName.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n  int lparenCharno = functionNode.getLp() +\n      functionNode.getAbsolutePosition();\n\n  lp.setCharno(position2charno(lparenCharno));\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n  return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}