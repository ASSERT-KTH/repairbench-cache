{
    "generation": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      boolean isUnnamedFunction = false;\n      boolean isDeclaration = functionNode.isDeclaration();\n\n      if (name == null) {\n          if (isDeclaration) {\n              // Do not create a name node for unnamed function declarations\n              isUnnamedFunction = true;\n          } else {\n              // Create an empty name for function expressions\n              name = new Name();\n              name.setIdentifier(\"\");\n              isUnnamedFunction = true;\n          }\n      }\n\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction && newName != null) {\n          newName.setLineno(functionNode.getLineno());\n          int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n          newName.setCharno(position2charno(lpColumn));\n      }\n\n      if (newName != null) {\n          node.addChildToBack(newName);\n      }\n\n      Node lp = newNode(Token.LP);\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n          lp.setLineno(fnName.getLineno());\n      } else {\n          lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n          lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n      return node;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}