{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    Boolean isUnnamedFunction = (name == null);\n\n    if (isUnnamedFunction) {\n        name = new Name();\n        name.setIdentifier(\"\");\n    }\n\n    Node node = newNode(Token.FUNCTION);\n    Node newName = transform(name);\n\n    if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the declaration.\n        newName.setLineno(functionNode.getLineno());\n        // Mark line number of paren correctly.\n        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n    }\n\n    node.addChildToBack(newName);\n\n    Node lp = newNode(Token.LP);\n    // The left paren's complicated because it's not represented by an AstNode,\n    // so there's nothing that has the actual line number that it appeared on.\n    // We know the paren has to appear on the same line as the function name\n    // (or else a semicolon will be inserted.) If there's no function name,\n    // assume the paren was on the same line as the function.\n    if (isUnnamedFunction) {\n        lp.setLineno(functionNode.getLineno());\n    } else {\n        lp.setLineno(name.getLineno());\n    }\n\n    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n\n    return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}