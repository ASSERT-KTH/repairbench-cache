{
    "generation": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    Boolean isUnnamedFunction = false;\n    if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n    }\n    Node node = newNode(Token.FUNCTION);\n    Node newName = transform(name);\n    if (isUnnamedFunction) {\n        // For unnamed functions, set the line and column numbers correctly.\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n    } else {\n        // For named functions, ensure the line number matches the function name.\n        newName.setLineno(name.getLineno());\n    }\n\n    node.addChildToBack(newName);\n    Node lp = newNode(Token.LP);\n    // Handle the left parenthesis correctly based on the function name's presence.\n    if (name != null) {\n        lp.setLineno(name.getLineno());\n    } else {\n        lp.setLineno(functionNode.getLineno());\n    }\n    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n    for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    \n    // Check if the function is an unnamed function statement and throw an error if necessary.\n    if (isUnnamedFunction && functionNode.getParent() instanceof ScriptNode) {\n        throw new RuntimeException(\"unnamed function statement\");\n    }\n    \n    return node;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}