{
    "generation": "import java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MultiValuedMap;\n\npublic class MultiValueMap<K, V> extends AbstractMultiValueMap<K, V> {\n\n    /** Serializable version identifier */\n    private static final long serialVersionUID = 20161114L;\n\n    /**\n     * Creates a new MultiValueMap backed by a HashMap\n     */\n    public MultiValueMap() {\n        super(new HashMap<K, Collection<V>>(), null);\n    }\n\n    /**\n     * Creates a new MultiValueMap which copies the contents of another\n     * MultiValueMap.\n     *\n     * @param map the MultiValueMap whose contents are copied\n     * @throws NullPointerException if map is null\n     */\n    public MultiValueMap(final MultiValuedMap<? extends K, ? extends V> map) {\n        super(new HashMap<K, Collection<V>>(), null);\n        putAll(map);\n    }\n\n    /**\n     * Creates a new MultiValueMap backed by the specified Map which\n     * returns collections of type <code>collectionClass</code> when\n     * values are added.\n     *\n     * @param map the Map to wrap\n     * @param collectionClass the class to create collections of\n     * @since 4.1\n     */\n    protected MultiValueMap(final Map<K, Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {\n        super(map, collectionClass);\n    }\n\n    /**\n     * Creates a new MultiValueMap backed by the specified Map which\n     * returns collections of type <code>collectionClass</code> when\n     * values are added.\n     * <p>\n     * If the map is a {@link SortedMap}, the returned map is also a {@link SortedMap}.\n     *\n     * @param <K> the key type\n     * @param <V> the value type\n     * @param map the Map to wrap\n     * @param collectionClass the class to create collections of\n     * @return a new {@link MultiValueMap}\n     * @throws IllegalArgumentException if collectionClass is null\n     * @since 4.1\n     */\n    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {\n        if (map instanceof SortedMap) {\n            return new SortedMultiValueMap<>(map, collectionClass);\n        }\n        return new MultiValueMap<>(map, collectionClass);\n    }\n\n    /**\n     * Creates a new MultiValueMap backed by the specified Map which\n     * returns collections of type <code>collectionClass</code> when\n     * values are added.\n     * <p>\n     * If the map is a {@link SortedMap}, the returned map is also a {@link SortedMap}.\n     *\n     * @param <K> the key type\n     * @param <V> the value type\n     * @param map the Map to wrap\n     * @param collectionClass the class to create collections of\n     * @param clone true to clone the map\n     * @return a new {@link MultiValueMap}\n     * @throws IllegalArgumentException if collectionClass is null\n     * @since 4.1\n     */\n    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, Collection<V>> map, final Class<? extends Collection<V>> collectionClass, final boolean clone) {\n        if (clone) {\n            if (map instanceof SortedMap) {\n                return new SortedMultiValueMap<>(new TreeMap<>(map), collectionClass);\n            }\n            return new MultiValueMap<>(new HashMap<>(map), collectionClass);\n        }\n        return multiValueMap(map, collectionClass);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}