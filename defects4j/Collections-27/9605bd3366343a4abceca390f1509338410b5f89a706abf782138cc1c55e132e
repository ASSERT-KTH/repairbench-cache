{
    "generation": "    private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {\n        in.defaultReadObject();\n\n        // Validate the deserialized 'valueCollectionType' field to prevent unsafe deserialization.\n        // This field specifies the type of Collection to use for values, and an arbitrary class\n        // could be used to instantiate malicious objects.\n        if (valueCollectionType != null) {\n            // Define a whitelist of safe and commonly used Collection types that can be instantiated.\n            // This list should include mutable collection types from java.util that have a no-argument constructor.\n            final Class<?>[] safeCollectionTypes = new Class<?>[] {\n                java.util.ArrayList.class,\n                java.util.HashSet.class,\n                java.util.LinkedList.class,\n                java.util.Vector.class,    // Legacy but sometimes used\n                java.util.Stack.class,     // Legacy but sometimes used\n                java.util.ArrayDeque.class, // Double-ended queue\n                java.util.concurrent.CopyOnWriteArrayList.class, // Thread-safe list\n                java.util.concurrent.CopyOnWriteArraySet.class   // Thread-safe set\n            };\n\n            boolean isSafe = false;\n            for (final Class<?> safeType : safeCollectionTypes) {\n                // Check if the deserialized valueCollectionType is assignable from a safe type.\n                // This means valueCollectionType itself IS a safeType or a subclass of a safeType.\n                if (safeType.isAssignableFrom(valueCollectionType)) {\n                    isSafe = true;\n                    break;\n                }\n            }\n\n            // If the deserialized class is not a Collection or is not in our whitelist (or a subclass thereof),\n            // then it is considered unsafe.\n            if (!java.util.Collection.class.isAssignableFrom(valueCollectionType) || !isSafe) {\n                throw new java.lang.UnsupportedOperationException(\n                    \"MultiValueMap does not support the deserialization of the class \" +\n                    valueCollectionType.getName() + \" as a value collection type. \" +\n                    \"This is to prevent unsafe deserialization vulnerabilities.\"\n                );\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}