{
    "generation": "import java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.MultiValuedMap;\n\npublic class MultiValueMap<K, V> extends AbstractMultiValuedMap<K, V> {\n\n    private static final long serialVersionUID = 20160307L;\n\n    /**\n     * Creates a new MultiValueMap backed by a HashMap.\n     */\n    public MultiValueMap() {\n        super(new java.util.HashMap<K, Collection<V>>());\n    }\n\n    /**\n     * Creates a new MultiValueMap backed by the specified Map.\n     *\n     * @param map  the Map to use as a container\n     */\n    public MultiValueMap(final Map<K, ? extends Collection<V>> map) {\n        super(map);\n    }\n\n    /**\n     * Creates a new MultiValueMap which copies the contents of another map\n     * converting it to a multi-value map in the process.\n     *\n     * @param map  the Map whose contents are copied\n     * @param valueClass  the class of the collection used for values\n     * @throws UnsupportedOperationException if the map is read-only\n     * @throws IllegalArgumentException if the valueClass is null\n     * @since 4.1\n     */\n    public MultiValueMap(final Map<K, V> map, final Class<? extends Collection<V>> valueClass) {\n        super(map, valueClass);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Creates a new MultiValueMap using the supplied Map and Collection\n     * implementations.\n     *\n     * @param map  the Map to use as a container\n     * @param collectionClass  the class of the Collection used for values\n     * @return a new MultiValueMap\n     * @since 4.1\n     */\n    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? extends Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {\n        final MultiValueMap<K, V> mvp = new MultiValueMap<K, V>(map);\n        mvp.setCollectionClass(collectionClass);\n        return mvp;\n    }\n\n    /**\n     * Creates a new MultiValueMap using the supplied Map and Collection\n     * implementations.\n     *\n     * @param map  the Map whose contents are copied\n     * @param collectionClass  the class of the Collection used for values\n     * @return a new MultiValueMap\n     * @since 4.1\n     */\n    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, V> map, final Class<? extends Collection<V>> collectionClass) {\n        final MultiValueMap<K, V> mvp = new MultiValueMap<K, V>(map, collectionClass);\n        return mvp;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}