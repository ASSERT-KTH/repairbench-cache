{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  // Fix: If this (the subtype) requires more parameters than \"that\" (the supertype), invalid.\n  // That is, if thatParam == null but thisParam != null, then this is not a subtype of that.\n  // Accept extra parameters in \"that\" as optional for purposes of subtype.\n  while (thisParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean foundThat = (thatParam != null);\n    JSType thatParamType = foundThat ? thatParam.getJSType() : null;\n    boolean thatIsVarArgs = foundThat ? thatParam.isVarArgs() : false;\n\n    // If \"that\" is out of parameters, this can only be a subtype if thisParam is optional/var_args\n    if (!foundThat) {\n      if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {\n        return false; // Required param not present in the supertype\n      } else {\n        // Extra optional/var_args in subtype (this) are OK: continue to next\n        thisParam = thisParam.getNext();\n        continue;\n      }\n    }\n\n    // Both present: contravariant comparison\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    // Don't advance if var_args\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n    if (thisIsVarArgs && thatIsVarArgs) {\n      // Both are var_args; end matching.\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  // If \"that\" has extra required params (but not optional or var_args), not a supertype.\n  while (thatParam != null) {\n    if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {\n      return false;\n    }\n    thatParam = thatParam.getNext();\n  }\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}