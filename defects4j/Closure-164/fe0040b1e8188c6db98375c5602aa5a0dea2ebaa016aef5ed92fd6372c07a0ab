{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // Check return type: must be covariant.\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Now check the parameter types (contravariant).\n  // For function subtyping we require that for every parameter in the\n  // overriding function (this), there is a corresponding parameter in\n  // the overridden function (that) such that:\n  //    that.paramType[i] <: this.paramType[i]\n  //\n  // This allows a function that takes fewer arguments (like a no\u2010op)\n  // to be used as a subtype of one that expects more arguments -- however,\n  // the reverse is not allowed.\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // Advance the parameters; if either is marked var_args, do not advance that side.\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    // When both nodes are var_args, treat the parameter lists as done.\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n  \n  // If there are extra parameters in \"this\" (the overriding function)\n  // that are not var_args, then this function requires an argument that\n  // the supertype (that) does not have. That makes it an invalid subtype.\n  while (thisParam != null) {\n    if (!thisParam.isVarArgs()) {\n      return false;\n    }\n    thisParam = thisParam.getNext();\n  }\n\n  // It is acceptable for \"that\" to have extra (required) parameters;\n  // a function with fewer parameters can always be used where a function\n  // expecting extra arguments is required.\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}