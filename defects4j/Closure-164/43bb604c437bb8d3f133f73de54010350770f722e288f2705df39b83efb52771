{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don't have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g < f, but f !< g\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null || thatParam != null) {\n      JSType thisParamType = null;\n      JSType thatParamType = null;\n      boolean thisIsVarArgs = false;\n      boolean thatIsVarArgs = false;\n\n      if (thisParam != null) {\n        thisParamType = thisParam.getJSType();\n        thisIsVarArgs = thisParam.isVarArgs();\n      }\n      if (thatParam != null) {\n        thatParamType = thatParam.getJSType();\n        thatIsVarArgs = thatParam.isVarArgs();\n      }\n\n      // Handle case where one function has more parameters than the other\n      if ((thisParam != null && thatParam == null) ||\n          (thisParam == null && thatParam != null)) {\n        // If this has more required parameters than that, it's not a subtype\n        if (thisParam != null && !thisIsVarArgs) {\n          // The overriding function has more required parameters\n          if (!hasOptionalVarArgsOnly(thatParam, that.parameters)) {\n            return false;\n          }\n        } else if (thatParam != null && !thatIsVarArgs) {\n          // The supertype has more required parameters - which is allowed\n          // but we need to check if the subtype has enough parameters\n        }\n      }\n\n      if (thisParamType != null && thatParamType != null) {\n        if (!thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      // Advance parameters\n      if (thisParam != null && !thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (thatParam != null && !thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // Both at varargs means we're done\n      if ((thisParam != null && thisIsVarArgs) &&\n          (thatParam != null && thatIsVarArgs)) {\n        break;\n      }\n    }\n\n    // Check if we have remaining non-varargs parameters in one but not the other\n    if (thisParam != null && !thisParam.isVarArgs()) {\n      // This has more required parameters than that\n      return false;\n    }\n    if (thatParam != null && !thatParam.isVarArgs()) {\n      // That has more required parameters than this\n      // This is actually okay - a function with fewer parameters is acceptable\n      // in our type system (we pretend extra parameters are ignored)\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}