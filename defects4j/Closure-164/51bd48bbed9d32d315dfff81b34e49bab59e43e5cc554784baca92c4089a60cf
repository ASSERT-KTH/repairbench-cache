{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Parameter contravariance and arity checking.\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  // Count the number of non-optional, non-varargs parameters (required params)\n  int thisRequired = 0;\n  for (Node n = thisParam; n != null; n = n.getNext()) {\n    if (n.isVarArgs() || n.isOptionalArg()) {\n      break;\n    }\n    thisRequired++;\n  }\n  int thatRequired = 0;\n  for (Node n = thatParam; n != null; n = n.getNext()) {\n    if (n.isVarArgs() || n.isOptionalArg()) {\n      break;\n    }\n    thatRequired++;\n  }\n\n  // \"that\" can't be a supertype if it requires more parameters than \"this\" provides.\n  if (thisRequired < thatRequired) {\n    return false;\n  }\n\n  // Compare parameter types contravariantly\n  Node thisIter = thisParam;\n  Node thatIter = thatParam;\n  while (thatIter != null) {\n    JSType thisParamType = thisIter != null ? thisIter.getJSType() : null;\n    JSType thatParamType = thatIter.getJSType();\n\n    boolean thisIsVarArgs = thisIter != null && thisIter.isVarArgs();\n    boolean thatIsVarArgs = thatIter.isVarArgs();\n\n    // In type-checking varargs: all remaining params must match varargs type\n    if (thatIsVarArgs) {\n      if (thisIsVarArgs) {\n        // Both have varargs, check vararg types contravariantly.\n        if (thatParamType != null) {\n          if (thisParamType == null || !thatParamType.isSubtype(thisParamType)) {\n            return false;\n          }\n        }\n        break; // both varargs end parameters\n      } else {\n        // \"that\" varargs, \"this\" might have several params, each should be matched\n        while (thisIter != null) {\n          JSType tpt = thisIter.getJSType();\n          if (thatParamType != null) {\n            if (tpt == null || !thatParamType.isSubtype(tpt)) {\n              return false;\n            }\n          }\n          thisIter = thisIter.getNext();\n        }\n        break;\n      }\n    } else if (thisIsVarArgs) {\n      // \"this\" has varargs, \"that\" doesn't, only the single type to check.\n      if (thatParamType != null) {\n        if (thisParamType == null || !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n      break; // Finished checking all \"that\" params, \"this\" may accept more params\n    } else {\n      // Neither has varargs, normal parameter position\n      if (thatParamType != null) {\n        if (thisParamType == null || !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n      thisIter = thisIter != null ? thisIter.getNext() : null;\n      thatIter = thatIter.getNext();\n    }\n  }\n\n  // If \"that\" still has required parameters but ran out of \"this\" parameters,\n  // it's not a supertype.\n  while (thatIter != null) {\n    if (!thatIter.isOptionalArg() && !thatIter.isVarArgs()) {\n      return false;\n    }\n    thatIter = thatIter.getNext();\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}