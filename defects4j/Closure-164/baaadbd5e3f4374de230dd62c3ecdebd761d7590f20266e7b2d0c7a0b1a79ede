{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    // Make sure the return type is specified. The UNKNOWN type complicates\n    // things, because we don't know if the programmer omitted it\n    // intentionally or not. We allow UNKNOWN to be a subtype of anything,\n    // and anything is a subtype of UNKNOWN.\n    if (!this.returnType.isUnknownType() &&\n        !that.returnType.isUnknownType() &&\n        !this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don't have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g < f, but f !< g\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n      if (thisParamType != null) {\n        // Note: We allow 'that' parameters to be null, which signifies 'any'.\n        // This is not strictly correct, but required for how the type system\n        // currently works.\n        if (thatParamType == null) {\n          // Treat null as 'any' type, which is a supertype of everything.\n        } else if (thisParamType.isUnknownType() || thatParamType.isUnknownType()) {\n          // Allow unknown types to be subtypes of anything, or anything to\n          // be subtypes of unknown.\n        } else if (!thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n      // NOTE: We don't check the 'requiredness' rule from the comment yet.\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // don't advance if we have variable arguments\n      // This allows a vararg function to be a subtype of a non-vararg function\n      // and vice versa, which is part of the relaxation.\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // both var_args indicates the end of comparison.\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n        break; // Exit the loop\n      }\n      // If only one is varargs, the loop condition (checking for null)\n      // handles the termination implicitly based on which list runs out first.\n    }\n\n    // After the loop, check for arity mismatches considering the relaxation.\n\n    // Case 1: 'this' has more parameters than 'that'.\n    // (e.g., this = function(number, number), that = function(number))\n    // This is only allowed if the extra parameters in 'this' are optional.\n    // Since we don't track optionality precisely here, we rely on varargs.\n    // If the remaining 'this' parameter is not varargs, it implies a required\n    // parameter mismatch, so 'this' cannot be a subtype of 'that'.\n    // This fixes the f !< g case.\n    if (thisParam != null && !thisParam.isVarArgs()) {\n      return false;\n    }\n\n    // Case 2: 'that' has more parameters than 'this'.\n    // (e.g., this = function(number), that = function(number, number))\n    // The relaxation described in the comments allows this (g < f).\n    // 'this' can be a subtype of 'that', ignoring the extra parameters in 'that'.\n    // The original code implicitly returned true in this case, which is correct\n    // for the relaxation. No explicit check is needed here for this case.\n\n    // If all checks pass, 'this' is a subtype of 'that'.\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}