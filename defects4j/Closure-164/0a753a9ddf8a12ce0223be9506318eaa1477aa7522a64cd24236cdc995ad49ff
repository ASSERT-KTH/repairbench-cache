{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // Note: We don't check the 'this' type, as correcting it should be done\n    // during method override checks and not as part of the general subtype check.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required. (Implicitly checked by the loop structure)\n    //\n    // See comment in the original code about allowing fewer parameters in practice.\n    // g = function(number)\n    // f = function(number, number)\n    // g < f (isSubtype returns true)\n    // f < g (isSubtype returns false)\n\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      // If 'this' expects a parameter, 'that' must provide one that's a supertype.\n      if (thisParamType != null) {\n          // TODO(kushal): Clean up how optional/varargs parameters are represented.\n          // For now, treat optional parameters in 'that' as subtypes of anything,\n          // and varargs in 'that' as subtypes of anything.\n          // This doesn't quite capture the relationship we want.\n\n          // Check contravariance: thatParamType <: thisParamType\n          if (thatParamType == null // that is unknown, so compatible\n              || thatParam.isVarArgs() // that is varargs, compatible? (Seems too lenient)\n              || thatParam.isOptionalArg() // that is optional, compatible? (Seems too lenient)\n              || thatParamType.isSubtype(thisParamType)) {\n              // Compatible, continue\n          } else {\n             return false;\n          }\n      }\n\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // Advance parameters, respecting varargs.\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // If both are varargs, we've compared compatibility and can stop.\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      } else if (thisIsVarArgs && thatParam == null) {\n        // 'this' is varargs and 'that' ran out of args. Subtype OK.\n        thatParam = null; // Ensure loop terminates\n      } else if (thatIsVarArgs && thisParam == null) {\n        // 'that' is varargs and 'this' ran out of args. Subtype OK.\n        thisParam = null; // Ensure loop terminates\n      }\n    }\n\n    // After the loop, check for required parameters mismatches.\n\n    // If 'that' still has parameters (necessarily optional or varargs, as non-optional\n    // would have been consumed by matching 'this' params or varargs), it's okay.\n    // This handles the g < f case (g=fn(num), f=fn(num, num)). this=g, that=f. Loop ends\n    // when thisParam=null. thatParam is non-null. We return true.\n\n    // If 'this' still has parameters, they must not be required.\n    // This handles the f < g case (f=fn(num,num), g=fn(num)). this=f, that=g. Loop ends\n    // when thatParam=null. thisParam is non-null. We must check if thisParam is required.\n    // It also handles G.foo.isSubtype(F.foo). this=G.foo(x,y), that=F.foo(). Loop doesn't\n    // run. thisParam is non-null. Must check if required.\n    while (thisParam != null) {\n      // If \"this\" has more parameters, they must be optional or varargs.\n      if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {\n          return false; // \"this\" requires more arguments than \"that\" provides.\n      }\n      if (thisParam.isVarArgs()) { // Varargs covers any remaining parameters implicitly.\n         break;\n      }\n      thisParam = thisParam.getNext();\n    }\n\n    // If we get here, the parameter lists are compatible.\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}