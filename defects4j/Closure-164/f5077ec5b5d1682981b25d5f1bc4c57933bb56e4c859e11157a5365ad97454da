{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n  ArrowType that = (ArrowType) other;\n\n  // Subtyping rule (ES4 Draft 2, Sec. 3.4.7):\n  // Covariant on return types:\n  //   this.returnType <: that.returnType\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Contravariant on parameter types:\n  //   that.paramType[i] <: this.paramType[i]\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // Advance the pointer if the node is not varargs.\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    // When both parameters are varargs, we consider them to match and end the check.\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  // If 'this' has additional parameters, they must all be marked as varargs\n  // (i.e. not required), otherwise 'this' has more required parameters than 'that'.\n  while (thisParam != null) {\n    if (!thisParam.isVarArgs()) {\n      return false;\n    }\n    thisParam = thisParam.getNext();\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}