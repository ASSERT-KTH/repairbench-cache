{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (true) {\n    boolean thisIsVarArgs = (thisParam != null) && thisParam.isVarArgs();\n    boolean thatIsVarArgs = (thatParam != null) && thatParam.isVarArgs();\n\n    if (thisParam == null && thatParam == null) {\n      break;\n    }\n\n    // \"that\" can't be a supertype if it's missing a required argument that\n    // \"this\" has.\n    if (thatParam == null && thisParam != null && !thisIsVarArgs) {\n      return false;\n    }\n\n    // Otherwise, ignore any extra required parameters on \"that\"\n    // (see rationale in the original comment above).\n\n    if (thatParam != null && thisParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n      if (thisParamType != null) {\n        if (thatParamType == null ||\n            !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n    }\n\n    // Don't advance if we have variable arguments\n    if (thatParam != null && !thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    } else {\n      thatParam = null;\n    }\n\n    if (thisParam != null && !thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    } else {\n      thisParam = null;\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}