{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Count the number of formal parameters for both functions, ignoring any parameter types after a var_args param.\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  // Count how many required/optional params for this, and for that.\n  int thisArity = 0;\n  int thatArity = 0;\n\n  Node tmp = thisParam;\n  boolean thisHasVarArgs = false;\n  while (tmp != null) {\n    thisArity++;\n    if (tmp.isVarArgs()) {\n      thisHasVarArgs = true;\n      break;\n    }\n    tmp = tmp.getNext();\n  }\n\n  tmp = thatParam;\n  boolean thatHasVarArgs = false;\n  while (tmp != null) {\n    thatArity++;\n    if (tmp.isVarArgs()) {\n      thatHasVarArgs = true;\n      break;\n    }\n    tmp = tmp.getNext();\n  }\n\n  // If 'this' has fewer parameters than 'that' (and this is not variadic), it's not a subtype.\n  if (thisArity < thatArity && !thisHasVarArgs) {\n    return false;\n  }\n\n  // Parameter contravariance\n  Node t = thisParam;\n  Node u = thatParam;\n  while (u != null) {\n    if (t == null) {\n      // If 'this' is varargs, we can try matching var args...\n      if (thisHasVarArgs) {\n        t = thisParam;\n        while (t.getNext() != null) t = t.getNext();\n        if (!t.isVarArgs()) {\n          return false;\n        }\n        // 'u' is not null, so we need to check the rest all against the vararg type...\n        while (u != null) {\n          JSType thisParamType = t.getJSType();\n          JSType thatParamType = u.getJSType();\n          if (thisParamType != null) {\n            if (thatParamType == null ||\n                !thatParamType.isSubtype(thisParamType)) {\n              return false;\n            }\n          }\n          if (u.isVarArgs()) {\n            break;\n          }\n          u = u.getNext();\n        }\n        break;\n      } else {\n        return false;\n      }\n    }\n    JSType thisParamType = t.getJSType();\n    JSType thatParamType = u.getJSType();\n    if (thisParamType != null) {\n      if (thatParamType == null ||\n          !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n    boolean thisIsVarArgs = t.isVarArgs();\n    boolean thatIsVarArgs = u.isVarArgs();\n\n    if (!thisIsVarArgs) {\n      t = t.getNext();\n    }\n    if (!thatIsVarArgs) {\n      u = u.getNext();\n    }\n    // both var_args indicates the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      break;\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}