{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thisParam != null || thatParam != null) {\n    boolean thisIsVarArgs = (thisParam != null) && thisParam.isVarArgs();\n    boolean thatIsVarArgs = (thatParam != null) && thatParam.isVarArgs();\n\n    if (thatParam == null) {\n      // 'that' (supertype) must have at least as many required params as 'this' (subtype)\n      // If 'this' has extra required params, it's not a subtype.\n      if (thisParam != null && !thisIsVarArgs) {\n        return false;\n      }\n      break;\n    }\n\n    if (thisParam == null) {\n      // 'this' may have fewer arguments than 'that', which is valid.\n      if (thatIsVarArgs) {\n        // If 'that' has varargs, subtype may have less params.\n        break;\n      } else {\n        // If 'that' has extra required (non-vararg) params, subtype is invalid.\n        return false;\n      }\n    }\n\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    // Contravariant: that.paramType[i] <: this.paramType[i]\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}