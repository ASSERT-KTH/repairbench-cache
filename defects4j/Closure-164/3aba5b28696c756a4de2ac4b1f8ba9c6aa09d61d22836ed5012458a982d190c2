{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  //\n  // If this.paramType[i] is required,\n  // then that.paramType[i] is required.\n  //\n  // In theory, the \"required-ness\" should work in the other direction as\n  // well. In other words, if we have\n  //\n  // function f(number, number) {}\n  // function g(number) {}\n  //\n  // Then f *should* not be a subtype of g, and g *should* not be\n  // a subtype of f. But in practice, we do not implement it this way.\n  // We want to support the use case where you can pass g where f is\n  // expected, and pretend that g ignores the second argument.\n  // That way, you can have a single \"no-op\" function, and you don't have\n  // to create a new no-op function for every possible type signature.\n  //\n  // So, in this case, g < f, but f !< g\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  // First check if the number of required parameters matches\n  int thisRequiredCount = countRequiredParameters(this);\n  int thatRequiredCount = countRequiredParameters(that);\n  if (thisRequiredCount > thatRequiredCount &&\n      !hasVarArgs(that.parameters)) {\n    return false;\n  }\n\n  while (thisParam != null || thatParam != null) {\n    JSType thisParamType = (thisParam != null) ? thisParam.getJSType() : null;\n    JSType thatParamType = (thatParam != null) ? thatParam.getJSType() : null;\n\n    if (thisParamType != null) {\n      if (thatParamType == null ||\n          !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();\n\n    // Handle case where one function has more parameters than the other\n    if (thisParam == null && !thatIsVarArgs) {\n      // If \"this\" has no more parameters but \"that\" does (and not varargs),\n      // then we can't guarantee the subtype relationship\n      if (!thatParam.getJSType().isUnknown()) {\n        return false;\n      }\n    } else if (thatParam == null && !thisIsVarArgs) {\n      // If \"that\" has no more parameters but \"this\" does (and not varargs),\n      // then extra parameters must be optional (handled by countRequiredParameters above)\n    }\n\n    // don't advance if we have variable arguments\n    if (!thisIsVarArgs && thisParam != null) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs && thatParam != null) {\n      thatParam = thatParam.getNext();\n    }\n\n    // both var_args indicates the end\n    if ((thisParam == null || thisIsVarArgs) &&\n        (thatParam == null || thatIsVarArgs)) {\n      break;\n    }\n  }\n\n  return true;\n}\n\nprivate int countRequiredParameters(ArrowType type) {\n  int count = 0;\n  Node param = type.parameters.getFirstChild();\n  while (param != null) {\n    if (!param.isOptionalArg() && !param.isVarArgs()) {\n      count++;\n    }\n    if (param.isVarArgs()) {\n      break; // varargs means all remaining are optional\n    }\n    param = param.getNext();\n  }\n  return count;\n}\n\nprivate boolean hasVarArgs(Node parameters) {\n  Node param = parameters.getFirstChild();\n  while (param != null) {\n    if (param.isVarArgs()) {\n      return true;\n    }\n    param = param.getNext();\n  }\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}