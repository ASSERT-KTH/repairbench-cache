{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // Return type must be covariant: this_return <: that_return.\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Now check the parameters: each this_param must be a supertype of that_param for the same position.\n  // Handle cases where parameter lists are of different lengths and manage optional parameters appropriately.\n  Node thisParamNode = parameters.getFirstChild();\n  Node thatParamNode = that.parameters.getFirstChild();\n\n  while (thisParamNode != null || thatParamNode != null) {\n    if (thisParamNode == null) {\n      // `this` has fewer parameters than `that`:\n      // If `that` has more required parameters, `this` cannot be a subtype.\n      // But if `that`'s extra parameters are optional, it might still be a subtype.\n      if (thatParamNode != null && thatParamNode.getJSType() != null) {\n        return false;\n      }\n      break;\n    }\n    if (thatParamNode == null) {\n      // `this` has more parameters than `that`; all must be optional.\n      // In that case, they can be ignored.\n      if (!thisParamNode.isVarArgs() && thisParamNode.getJSType() != null) {\n        return false;\n      }\n      break;\n    }\n\n    JSType thisParamType = thisParamNode.getJSType();\n    JSType thatParamType = thatParamNode.getJSType();\n\n    // If this parameter is null, treat it as the top (most general) type.\n    if (thisParamType == null) {\n      thisParamType = registry.getTopType();\n    }\n    if (thatParamType == null) {\n      thatParamType = registry.getTopType();\n    }\n\n    // Contravariant check: that_param must be a subtype of this_param.\n    if (!thatParamType.isSubtype(thisParamType)) {\n      return false;\n    }\n\n    thisParamNode = thisParamNode.getNext();\n    thatParamNode = thatParamNode.getNext();\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}