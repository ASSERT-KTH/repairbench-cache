{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // Covariant return type: this.returnType <: that.returnType\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Contravariant parameter types: that.paramType[i] <: this.paramType[i]\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thatParam != null) {\n    JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;\n    JSType thatParamType = thatParam.getJSType();\n\n    boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // \"this\" can't require more arguments than \"that\" supplies\n    if (thisParam == null && !thatIsVarArgs) {\n      // that declares more mandatory parameters than this\n      return false;\n    }\n\n    // Contravariant: that parameter type must be a subtype of this parameter type\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    if (!thisIsVarArgs) {\n      if (thisParam != null) {\n        thisParam = thisParam.getNext();\n      }\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    // Both var_args indicate the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  // If \"this\" has *extra* required parameters not matched by \"that\", not a subtype\n  while (thisParam != null) {\n    if (!thisParam.isOptional() && !thisParam.isVarArgs()) {\n      return false;\n    }\n    thisParam = thisParam.getNext();\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}