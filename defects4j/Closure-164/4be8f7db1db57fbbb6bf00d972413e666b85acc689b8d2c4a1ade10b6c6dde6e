{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Check parameter lists\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thatParam != null) {\n    boolean thisIsVarArgs = (thisParam != null) && thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    JSType thisParamType = (thisParam != null) ? thisParam.getJSType() : null;\n    JSType thatParamType = thatParam.getJSType();\n\n    if (thisParam == null) {\n      // \"this\" has no parameter; \n      // \"that\" has more parameters not marked as varargs: \"this\" missing a required formal\n      if (!thatIsVarArgs) {\n        return false;\n      }\n      // else: \"that\" is varargs, so OK\n    } else {\n      if (thisParamType != null) {\n        if (thatParamType == null ||\n            !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n    }\n\n    // Both var_args means end of checking parameters.\n    if (thisIsVarArgs && thatIsVarArgs) {\n      break;\n    }\n\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    if (!thisIsVarArgs && thisParam != null) {\n      thisParam = thisParam.getNext();\n    }\n  }\n\n  // After loop: \"that\" formals exhausted.\n  // If \"this\" still has remaining required formals, then \"this\" is incompatible.\n  while (thisParam != null) {\n    if (!thisParam.isVarArgs()) {\n      return false;\n    }\n    thisParam = thisParam.getNext();\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}