{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  //\n  // If this.paramType[i] is required,\n  // then that.paramType[i] is required.\n  //\n  // In theory, the \"required-ness\" should work in the other direction as\n  // well. In other words, if we have\n  //\n  // function f(number, number) {}\n  // function g(number) {}\n  //\n  // Then f *should* not be a subtype of g, and g *should* not be\n  // a subtype of f. But in practice, we do not implement it this way.\n  // We want to support the use case where you can pass g where f is\n  // expected, and pretend that g ignores the second argument.\n  // That way, you can have a single \"no-op\" function, and you don't have\n  // to create a new no-op function for every possible type signature.\n  //\n  // So, in this case, g < f, but f !< g\n\n  // Check if 'this' has more required parameters than 'that'\n  // If so, 'that' cannot be a supertype because it's missing required arguments.\n  int thisRequiredCount = countRequiredParameters(this.parameters);\n  int thatRequiredCount = countRequiredParameters(that.parameters);\n  if (thisRequiredCount > thatRequiredCount) {\n    return false;\n  }\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null || thatParam != null) {\n    boolean thisHasParam = thisParam != null;\n    boolean thatHasParam = thatParam != null;\n\n    if (thisHasParam && thatHasParam) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      // If this has a required parameter but that doesn't have a corresponding parameter,\n      // it's not a subtype (but we already checked this above)\n\n      if (thisParamType != null) {\n        if (thatParamType == null ||\n            !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // don't advance if we have variable arguments\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // both var_args indicates the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      }\n    } else if (thisHasParam) {\n      // If 'this' has more parameters than 'that' and they're not all optional\n      if (!thisParam.isVarArgs() &&\n          !thisParam.getJSType().isVacuous()) {\n        return false;\n      }\n      thisParam = thisParam.getNext();\n    } else if (thatHasParam) {\n      // If 'that' has more parameters than 'this', we need to check if they're optional\n      if (!thatParam.isVarArgs() &&\n          !thatParam.getJSType().isVacuous()) {\n        // In theory, this might be okay if the extra parameters are optional,\n        // but we currently don't track that information\n      }\n      thatParam = thatParam.getNext();\n    }\n  }\n\n  return true;\n}\n\nprivate int countRequiredParameters(Node parameters) {\n  int count = 0;\n  Node param = parameters.getFirstChild();\n  while (param != null) {\n    if (!param.isVarArgs() &&\n        (param.getJSType() == null || !param.getJSType().isVacuous())) {\n      count++;\n    }\n    param = param.getNext();\n  }\n  return count;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}