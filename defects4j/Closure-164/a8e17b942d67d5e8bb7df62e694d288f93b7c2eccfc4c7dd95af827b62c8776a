{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  //\n  // If this.paramType[i] is required,\n  // then that.paramType[i] is required.\n  //\n  // In theory, the \"required-ness\" should work in the other direction as\n  // well. In other words, if we have\n  //\n  //   function f(number, number) {}\n  //   function g(number) {}\n  //\n  // then f *should* not be a subtype of g, and g *should* not be\n  // a subtype of f. But in practice, we do not implement it this way.\n  // We want to support the use case where you can pass g where f is\n  // expected, and pretend that g ignores the second argument.\n  // That way, you can have a single \"no\u2010op\" function, and you don't have\n  // to create a new no\u2010op function for every possible type signature.\n  //\n  // So, in this case, a function with fewer (or varargs in place of extra)\n  // parameters is acceptable as a subtype, but one with extra required\n  // parameters is not.\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thisParamType != null) {\n      if (thatParamType == null ||\n          !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // Don't advance if we have variable arguments.\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    // If both parameters are varargs, they \"absorb\" all remaining arguments.\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  // At this point, we have processed all parameters that both functions have.\n  // It is okay for 'that' (the expected type) to have extra parameters.\n  // However, if 'this' (the candidate subtype) has extra parameters, then\n  // it requires arguments that 'that' did not promise to supply.\n  while (thisParam != null) {\n    if (!thisParam.isVarArgs() && thisParam.getJSType() != null) {\n      return false;\n    }\n    thisParam = thisParam.getNext();\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}