{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (true) {\n    // Both parameters lists are exhausted\n    if (thisParam == null && thatParam == null) {\n      break;\n    }\n\n    // The supertype has more parameters than the subtype (which is allowed if they're optional)\n    if (thisParam == null) {\n      // Check if remaining parameters in 'that' are optional\n      while (thatParam != null) {\n        if (!thatParam.isVarArgs() && thatParam.isParameter()) {\n          // If there are required parameters left in the supertype, it's not a subtype\n          return false;\n        }\n        thatParam = thatParam.getNext();\n      }\n      break;\n    }\n\n    // The subtype has more parameters than the supertype\n    if (thatParam == null) {\n      // The subtype can't have more required parameters than the supertype\n      while (thisParam != null) {\n        if (!thisParam.isVarArgs() && thisParam.isParameter()) {\n          return false;\n        }\n        thisParam = thisParam.getNext();\n      }\n      break;\n    }\n\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thisParamType != null && thatParamType != null) {\n      if (!thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // If one is varargs and the other isn't, we can't compare further parameters\n    if (thisIsVarArgs || thatIsVarArgs) {\n      break;\n    }\n\n    thisParam = thisParam.getNext();\n    thatParam = thatParam.getNext();\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}