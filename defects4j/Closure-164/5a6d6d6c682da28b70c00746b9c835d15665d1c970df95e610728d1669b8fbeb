{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  //\n  // If this.paramType[i] is required,\n  // then that.paramType[i] is required.\n  //\n  // In theory, the \"required-ness\" should work in the other direction as\n  // well. In other words, if we have\n  //\n  // function f(number, number) {}\n  // function g(number) {}\n  //\n  // Then f *should* not be a subtype of g, and g *should* not be\n  // a subtype of f. But in practice, we do not implement it this way.\n  // We want to support the use case where you can pass g where f is\n  // expected, and pretend that g ignores the second argument.\n  // That way, you can have a single \"no-op\" function, and you don't have\n  // to create a new no-op function for every possible type signature.\n  //\n  // So, in this case, g < f, but f !< g\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null || thatParam != null) {\n    if (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n      if (thisParamType != null) {\n        if (thatParamType == null ||\n            !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // don't advance if we have variable arguments\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // both var_args indicates the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      }\n    } else {\n      // If we have remaining parameters in 'this' but not in 'that',\n      // it means 'this' has more parameters, which makes it not a subtype\n      // unless the remaining parameters are optional (which they aren't, since we're past thatParam)\n      if (thisParam != null) {\n        // Check if all remaining parameters in 'this' are optional\n        // If any are required, then 'this' is not a subtype\n        boolean allOptional = true;\n        Node temp = thisParam;\n        while (temp != null) {\n          if (!temp.isOptionalArg()) {\n            allOptional = false;\n            break;\n          }\n          temp = temp.getNext();\n        }\n        if (!allOptional) {\n          return false;\n        }\n      }\n      // If 'that' has more parameters than 'this', it's acceptable as per our special case\n      break;\n    }\n  }\n\n  // If 'that' has remaining parameters but they're all optional,\n  // it's still acceptable since we can ignore them\n  while (thatParam != null) {\n    if (!thatParam.isOptionalArg()) {\n      return false;\n    }\n    thatParam = thatParam.getNext();\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}