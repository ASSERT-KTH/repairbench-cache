{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Parameter contravariance, but the \"subset-arity\" rule is wrong in this code.\n  // The correct rule: for this to be a subtype of that, \"that\" can have\n  // more parameters, but not fewer (including required arguments).\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  boolean thisHasVarArgs = false;\n  boolean thatHasVarArgs = false;\n\n  while (thatParam != null) {\n    thatHasVarArgs = thatParam.isVarArgs();\n    JSType thatParamType = thatParam.getJSType();\n\n    if (thisParam == null) {\n      // \"this\" has fewer parameters than \"that\" required, error\n      // unless \"this\" has varargs as the previous parameter\n      if (!thisHasVarArgs) {\n        return false;\n      } else {\n        // If \"this\" ends with varargs, allow additional \"that\" params\n        // as long as they are subtypes of the vararg type\n        // Check vararg contravariant for the remaining thatParam(s)\n        if (thatParamType != null) {\n          JSType thisVarArgType = thisParam.getPrevious().getJSType();\n          if (thisVarArgType == null || !thatParamType.isSubtype(thisVarArgType)) {\n            return false;\n          }\n        }\n        thatParam = thatParam.getNext();\n        continue;\n      }\n    }\n\n    thisHasVarArgs = thisParam.isVarArgs();\n    JSType thisParamType = thisParam.getJSType();\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    if (thisParamType != null) {\n      if (thatParamType == null ||\n          !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n    // Advance this/that as appropriate.\n    if (!thisHasVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatHasVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n    // If both are varargs, that's the end.\n    if (thisHasVarArgs && thatHasVarArgs) {\n      // handles case where both sides are ... and thus compatible\n      break;\n    }\n  }\n\n  // If \"that\" is done, but \"this\" still has *required* parameters, not subtype.\n  while (thisParam != null) {\n    if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {\n      return false;\n    }\n    thisParam = thisParam.getNext();\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}