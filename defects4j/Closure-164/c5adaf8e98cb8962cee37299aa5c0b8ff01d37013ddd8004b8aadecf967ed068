{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don't have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g < f, but f !< g\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n      if (thisParamType != null) {\n        // Param type check: that.paramType[i] <: this.paramType[i] (contravariant)\n        // If thatParamType is null, it typically means it represents an implicit 'any' or 'unknown' type.\n        // In contravariant position, 'any' is a supertype of everything, so the check would pass.\n        // However, if thatParamType is truly null due to a missing node or an invalid state,\n        // it might indicate an issue. For robustness, we treat null as not a subtype.\n        if (thatParamType == null ||\n            !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // don't advance if we have variable arguments\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // both var_args indicates the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      }\n    }\n\n    // After the loop, one or both parameter lists might have remaining elements.\n\n    // Case 1: 'this' (subtype) has more parameters than 'that' (supertype).\n    // This covers the \"f !< g\" case: function f(number, number) !< function g(number).\n    // Also, the test case `G.prototype.foo(x,y) !< F.prototype.foo()`.\n    // If 'this' has remaining parameters that are required (not var_args),\n    // then 'that' cannot be a supertype because it does not cover these required arguments.\n    while (thisParam != null) {\n      if (!thisParam.isVarArgs()) {\n        // If this parameter is a required argument (not optional, not var_args),\n        // and 'that' has no corresponding parameter, then 'this' is not a subtype.\n        return false;\n      }\n      thisParam = thisParam.getNext();\n    }\n\n    // Case 2: 'that' (supertype) has more parameters than 'this' (subtype).\n    // This covers the \"g < f\" case: function g(number) < function f(number, number).\n    // According to the comments, this scenario is allowed, meaning 'this' can be a subtype\n    // even if 'that' has more required parameters. The previous loop handles the type\n    // checks for matching parameters. Any remaining parameters in 'that' are ignored\n    // as per the described relaxed arity check policy.\n    // Therefore, no further checks are needed for `thatParam` here.\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}