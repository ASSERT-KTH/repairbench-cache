{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  // Count the number of *required* arguments in \"this\"\n  int thisRequired = 0;\n  Node tmpParam = thisParam;\n  while (tmpParam != null) {\n    if (!tmpParam.isOptionalArg() && !tmpParam.isVarArgs()) {\n      thisRequired++;\n    }\n    tmpParam = tmpParam.getNext();\n  }\n\n  // Count the number of *required* arguments in \"that\"\n  int thatRequired = 0;\n  tmpParam = thatParam;\n  while (tmpParam != null) {\n    if (!tmpParam.isOptionalArg() && !tmpParam.isVarArgs()) {\n      thatRequired++;\n    }\n    tmpParam = tmpParam.getNext();\n  }\n\n  // \"this\" function should not have more required parameters than \"that\"\n  // (A function that needs more arguments is NOT a subtype of one that needs fewer)\n  if (thisRequired > thatRequired) {\n    return false;\n  }\n\n  // Check parameters contravariantly: that.paramType[i] <: this.paramType[i]\n  thisParam = parameters.getFirstChild();\n  thatParam = that.parameters.getFirstChild();\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  // \"this\" function can have fewer parameters (ignores extra \"that\" params),\n  // but NOT more required params (which we checked above).\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}