{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Parameter contravariance with arity check:\n  // \"that\" must not require more parameters than \"this\" can provide\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thatParam != null) {\n    // If \"that\" function expects more required parameters than \"this\" can provide,\n    // then this is not a subtype.\n    if (!thatParam.isOptionalArg() && !thatParam.isVarArgs() && thisParam == null) {\n      return false;\n    }\n\n    JSType thisParamType = (thisParam == null) ? null : thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thatParamType != null) {\n      if (thisParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = (thisParam != null && thisParam.isVarArgs());\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // Both var_args indicates the end.\n    if (thisIsVarArgs && thatIsVarArgs) {\n      break;\n    }\n\n    // Only advance thisParam if present and not var_args.\n    if (thisParam != null && !thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    // Advance thatParam if not var_args.\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    } else {\n      // If thatParam is var_args, we are done.\n      thatParam = null;\n    }\n  }\n\n  // If \"this\" function has extra required parameters (not optional/varargs),\n  // it's still subtype: allows passing a function with *fewer* required params\n  // where a function with more required parameters is expected.\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}