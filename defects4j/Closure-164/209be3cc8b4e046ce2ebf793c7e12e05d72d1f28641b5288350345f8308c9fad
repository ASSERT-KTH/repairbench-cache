{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // According to subtyping for function types (ES4 Draft 2, \u00a73.4.7):\n  //   - The return type must be covariant.\n  //   - The parameter types are checked contravariantly.\n  // In our system we \u201crelax\u201d the arity requirement so that a function that\n  // takes fewer arguments is considered a subtype of one that takes more \u2013\n  // that is, you can \u201cignore\u201d extra parameters. However, if the candidate\n  // function (this) requires more parameters than the supertype (that),\n  // then it is not a subtype.\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  // Walk pairwise over the parameter lists.\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    // If candidate declares a type for a parameter then\n    // the supertype\u2019s corresponding parameter must be a subtype\n    // (contravariant check).\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // When a parameter is not marked var_args, advance to the next.\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    // If both parameters are var_args, then they \u201cswallow\u201d the rest.\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  // At this point one or both lists have been exhausted.\n  // Our function subtyping rule is that the candidate (this)\n  // must not have more parameters than the supertype (that);\n  // it is OK if it has fewer\u2014which is what lets you \u201cignore\u201d extra arguments.\n  if (thisParam != null) {\n    return false;\n  }\n\n  // (If thatParam is non-null, that\u2019s fine: the supertype may expect\n  // extra arguments that the candidate simply ignores.)\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}