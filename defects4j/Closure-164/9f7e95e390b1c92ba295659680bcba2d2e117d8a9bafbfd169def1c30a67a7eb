{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null || thatParam != null) {\n    JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;\n    JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;\n\n    boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();\n\n    if (thatParamType != null) {\n      // \"that\" has a required parameter that \"this\" is missing.\n      // This means \"this\" can't be a subtype of \"that\".\n      if (thisParamType == null) {\n        if (!thatIsVarArgs) {\n          return false;\n        }\n      } else {\n        if (!thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n    } else if (thisParamType != null) {\n      // \"that\" ends, but \"this\" still has required params: invalidate subtyping\n      if (!thisIsVarArgs) {\n        return false;\n      }\n    }\n\n    // don't advance if we have variable arguments\n    if (thisParam != null && !thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (thatParam != null && !thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    // both var_args indicates the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}