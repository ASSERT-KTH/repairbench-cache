{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // Calculate min/max arguments for 'this'\n    int thisMinArgs = 0;\n    int thisMaxArgs = 0; // -1 for variable arguments\n    boolean thisHasVarArgs = false;\n    Node currentThisParam = parameters.getFirstChild();\n    while (currentThisParam != null) {\n      if (!currentThisParam.isOptionalArg() && !currentThisParam.isVarArgs()) {\n        thisMinArgs++;\n      }\n      if (currentThisParam.isVarArgs()) {\n        thisHasVarArgs = true;\n        // Var args is the last parameter in the list\n        // No need to count further for fixed max args\n        break;\n      }\n      thisMaxArgs++; // Increment for each parameter encountered.\n      currentThisParam = currentThisParam.getNext();\n    }\n    if (thisHasVarArgs) {\n      thisMaxArgs = -1; // Indicate infinite maximum arguments\n    } else {\n      // If no var args, max args is just the total count of parameters\n      thisMaxArgs = parameters.getChildCount();\n    }\n\n    // Calculate min/max arguments for 'that'\n    int thatMinArgs = 0;\n    int thatMaxArgs = 0; // -1 for variable arguments\n    boolean thatHasVarArgs = false;\n    Node currentThatParam = that.parameters.getFirstChild();\n    while (currentThatParam != null) {\n      if (!currentThatParam.isOptionalArg() && !currentThatParam.isVarArgs()) {\n        thatMinArgs++;\n      }\n      if (currentThatParam.isVarArgs()) {\n        thatHasVarArgs = true;\n        // Var args is the last parameter in the list\n        // No need to count further for fixed max args\n        break;\n      }\n      thatMaxArgs++; // Increment for each parameter encountered.\n      currentThatParam = currentThatParam.getNext();\n    }\n    if (thatHasVarArgs) {\n      thatMaxArgs = -1; // Indicate infinite maximum arguments\n    } else {\n      thatMaxArgs = that.parameters.getChildCount();\n    }\n\n    // Arity checks for subtyping:\n    // A function 'this' is a subtype of 'that' if:\n    // 1. 'this' requires at least as many parameters as 'that' requires.\n    //    (i.e., that.minArgs <= this.minArgs)\n    //    If 'that' requires 2 arguments, 'this' must also require at least 2.\n    //    Otherwise, 'this' cannot be substituted for 'that' because 'this' would\n    //    fail if 'that' was called with all its required arguments.\n    if (thatMinArgs > thisMinArgs) {\n        return false;\n    }\n\n    // 2. 'this' must be able to accept at most as many parameters as 'that' accepts.\n    //    (i.e., this.maxArgs <= that.maxArgs)\n    //    If 'that' has a fixed number of maximum arguments, 'this' cannot accept\n    //    more arguments than 'that' allows (unless 'that' has variable arguments).\n    //    This rule correctly handles cases like testMethodInference7, where\n    //    `function(x,y)` (this) is NOT a subtype of `function()` (that).\n    if (thatMaxArgs != -1 && (thisMaxArgs == -1 || thisMaxArgs > thatMaxArgs)) {\n        return false;\n    }\n\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    // Iterate as long as both functions have corresponding parameters.\n    // The arity checks above handle cases where one function has\n    // more (or fewer) total/required parameters than the other.\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      // Contravariant parameter type check: thatParamType <: thisParamType\n      // If thisParamType is null (representing an unknown type '?'), it's\n      // considered to match anything, so 'thatParamType.isSubtype(thisParamType)'\n      // would implicitly pass for any thatParamType.\n      if (thisParamType != null) {\n        if (thatParamType == null || // if 'that' has no type for this param (e.g. unknown)\n            !thatParamType.isSubtype(thisParamType)) { // or thatParamType is not a subtype of thisParamType\n          return false;\n        }\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // Advance parameters, unless they are var_args.\n      // If a parameter node is marked as var_args, it indicates that it\n      // consumes all subsequent arguments, so we keep the node reference\n      // to its type for potential further checks against remaining arguments\n      // from the other function's list, but we don't advance past it.\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // If both parameters are var_args, we've matched all positional arguments.\n      // The type check for the var_args themselves would have already occurred\n      // in the current iteration. We can terminate the loop here.\n      if (thisIsVarArgs && thatIsVarArgs) {\n        break; // All remaining arguments are covered by var_args in both\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}