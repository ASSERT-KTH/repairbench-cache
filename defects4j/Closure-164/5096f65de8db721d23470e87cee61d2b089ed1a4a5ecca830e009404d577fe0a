{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  // Count parameters\n  int thisCount = 0;\n  for (Node n = thisParam; n != null; n = n.getNext()) thisCount++;\n  int thatCount = 0;\n  for (Node n = thatParam; n != null; n = n.getNext()) thatCount++;\n\n  // Subtype: contravariant parameter comparison\n  // To be a subtype, this function must have **no more required parameters** than \"that\".\n  // If \"this\" has more parameters than \"that\", \"this\" cannot be a subtype; too many required args.\n  int minParams = Math.min(thisCount, thatCount);\n\n  Node thisP = thisParam;\n  Node thatP = thatParam;\n\n  for (int i = 0; i < minParams; i++) {\n    JSType thisParamType = thisP.getJSType();\n    JSType thatParamType = thatP.getJSType();\n    if (thisParamType != null) {\n      if (thatParamType == null ||\n          !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n    boolean thisIsVarArgs = thisP.isVarArgs();\n    boolean thatIsVarArgs = thatP.isVarArgs();\n\n    // both var_args indicates the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisP = null;\n      thatP = null;\n      break;\n    }\n\n    // don't advance if we have variable arguments\n    if (!thisIsVarArgs) {\n      thisP = thisP.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatP = thatP.getNext();\n    }\n  }\n  // After the above, thisP or thatP may be non-null.\n\n  // \"this\" is a subtype ONLY if it does not require more parameters than \"that\"\n  // So \u2013 if thisP != null (i.e. \"this\" still has required parameters left), but thatP == null,\n  // then \"this\" function requires more args than \"that\" \u2013 NOT a subtype.\n  if (thisP != null && thatP == null) {\n    return false;\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}