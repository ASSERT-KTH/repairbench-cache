{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thisParamType != null) {\n      if (thatParamType == null ||\n          !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  // Fix: after loop, ensure \"that\" is not missing required parameters of \"this\"\n  // If \"this\" still has required parameters left unmatched, \"that\" is *not* a subtype\n  while (thisParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    if (thisParamType != null && !thisParam.isOptional() && !thisParam.isVarArgs()) {\n      // \"that\" does not provide this required param\n      return false;\n    }\n    thisParam = thisParam.getNext();\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}