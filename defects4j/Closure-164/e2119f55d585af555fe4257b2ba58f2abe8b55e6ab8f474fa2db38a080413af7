{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n  ArrowType that = (ArrowType) other;\n\n  // Return types: this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Parameter types are contravariant.\n  // For each parameter in \"this\" (the candidate subtype), the corresponding parameter\n  // in \"that\" (the supertype) must satisfy:\n  //    that.paramType[i] <: this.paramType[i]\n  // Also, if \"this\" has a required parameter, then \"that\" must have one.\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // When a parameter is not var_args, advance to the next one.\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    // If both sides are varargs then we've reached the end of the list.\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  // If the candidate function (\"this\") has any extra parameters they must be varargs.\n  // Otherwise, \"this\" has more required parameters than \"that\", so it is not a subtype.\n  while (thisParam != null) {\n    if (!thisParam.isVarArgs()) {\n      return false;\n    }\n    thisParam = thisParam.getNext();\n  }\n\n  // It is allowed for the supertype (\"that\") to have extra parameters.\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}