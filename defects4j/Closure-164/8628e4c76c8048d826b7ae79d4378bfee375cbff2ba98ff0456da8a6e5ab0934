{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Contravariant parameter types: that.paramType[i] <: this.paramType[i]\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (true) {\n    boolean thisIsVarArgs = (thisParam != null) && thisParam.isVarArgs();\n    boolean thatIsVarArgs = (thatParam != null) && thatParam.isVarArgs();\n\n    if (thisParam == null && thatParam == null) {\n      // Compatible if both done\n      break;\n    }\n\n    if (thatParam == null) {\n      // 'that' function has fewer (or variadic) parameters than 'this'\n      // So 'this' has extra required parameters -> not subtype\n      return false;\n    }\n\n    JSType thisParamType = (thisParam == null) ? null : thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    // Check contra-variance only if this parameter exists\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    // Handle varargs advance logic\n    if (!thisIsVarArgs && thisParam != null) {\n      thisParam = thisParam.getNext();\n    } else if (thisIsVarArgs) {\n      thisParam = null;  // freeze at varargs\n    }\n\n    if (!thatIsVarArgs && thatParam != null) {\n      thatParam = thatParam.getNext();\n    } else if (thatIsVarArgs) {\n      thatParam = null;  // freeze at varargs\n    }\n\n    if (thisIsVarArgs && thatIsVarArgs) {\n      break;  // both variadic, accept remaining arguments\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}