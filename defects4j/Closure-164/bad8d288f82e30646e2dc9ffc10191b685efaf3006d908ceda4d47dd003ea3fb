{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n  ArrowType that = (ArrowType) other;\n\n  // Covariant: this.returnType <: that.returnType.\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Contravariant on parameters:\n  // For each parameter in \"that\", the corresponding parameter in \"this\" must be\n  // such that that.paramType is a subtype of this.paramType.\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // If both parameters are var_args, treat this as the end of the list.\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    } else {\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n    }\n  }\n\n  // If \"this\" has extra parameters that \"that\" does not have,\n  // then \"this\" expects more arguments than \"that\" provides.\n  if (thisParam != null) {\n    return false;\n  }\n  \n  // If \"that\" has extra parameters, that's acceptable\n  // (calls expecting more arguments will simply ignore the extras).\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}