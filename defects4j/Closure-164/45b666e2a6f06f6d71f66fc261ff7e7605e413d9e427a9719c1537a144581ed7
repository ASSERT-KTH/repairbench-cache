{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    // Make sure to check for unknown types.\n    if (!this.returnType.isUnknownType() &&\n        !that.returnType.isUnknownType() &&\n        !this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    // ... (commentary about practical vs theoretical arity) ...\n\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      // If the supertype has an unknown parameter type, that's fine.\n      // If the subtype has an unknown parameter type, that's fine.\n      // Otherwise, the subtype parameter must be a supertype of the supertype\n      // parameter.\n      if (!thisParamType.isUnknownType() &&\n          !thatParamType.isUnknownType() &&\n          !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // ... (comment about varargs special casing) ...\n\n      // don't advance if we have variable arguments\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // both var_args indicates the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      } else if (thisIsVarArgs && thisParam != null) {\n          // If 'this' is varargs and 'that' is not, only 'that' should advance.\n          // However, 'this' needs its parameter node to check arity later.\n          // So, don't null it out here. The loop condition handles termination.\n      } else if (thatIsVarArgs && thatParam != null) {\n          // If 'that' is varargs and 'this' is not, only 'this' should advance.\n      }\n    }\n\n    // Arity Check 1:\n    // If 'this' still has required parameters, 'that' function signature\n    // doesn't provide enough parameters. So, 'this' cannot be a subtype of 'that'.\n    // A vararg parameter is not considered required.\n    // An optional parameter is not considered required.\n    if (thisParam != null && !thisParam.isVarArgs() && !thisParam.isOptionalArg()) {\n      return false;\n    }\n\n    // Arity Check 2:\n    // If 'that' still has required parameters, 'this' function signature\n    // has fewer required parameters than 'that'. In traditional subtyping for functions,\n    // the subtype can have *more* parameters (typically optional ones), but not fewer required ones.\n    // Method overriding rules are stricter: the overriding method (this) cannot require *more*\n    // arguments than the overridden method (that). (Oops, `this` is subtype, `that` is supertype here).\n    // Let's restate: The subtype 'this' cannot have *fewer* required parameters than the supertype 'that'.\n    // If 'that' has required parameters left over after matching all of 'this's parameters,\n    // it means 'this' doesn't fulfill the requirements of 'that'.\n    // Therefore, 'this' is not a subtype of 'that'.\n    if (thatParam != null && !thatParam.isVarArgs() && !thatParam.isOptionalArg()) {\n      return false;\n    }\n\n    // If we passed all checks, it's a subtype.\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}