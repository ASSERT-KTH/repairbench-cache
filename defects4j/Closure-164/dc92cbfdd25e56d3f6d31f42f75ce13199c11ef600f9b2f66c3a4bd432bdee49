{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Fix: \"that\" can't have more required parameters than \"this\".\n  // Count the number of required parameters in both functions.\n  int thisRequired = 0;\n  Node thisParam = parameters.getFirstChild();\n  while (thisParam != null) {\n    if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {\n      thisRequired++;\n    }\n    thisParam = thisParam.getNext();\n  }\n  int thatRequired = 0;\n  Node thatParam = that.parameters.getFirstChild();\n  while (thatParam != null) {\n    if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {\n      thatRequired++;\n    }\n    thatParam = thatParam.getNext();\n  }\n  // \"this\" must have at least as many required parameters as \"that\"\n  if (thisRequired < thatRequired) {\n    return false;\n  }\n\n  // Contravariant in the parameters\n  Node thisP = parameters.getFirstChild();\n  Node thatP = that.parameters.getFirstChild();\n  while (thisP != null && thatP != null) {\n    JSType thisParamType = thisP.getJSType();\n    JSType thatParamType = thatP.getJSType();\n    if (thisParamType != null) {\n      if (thatParamType == null\n          || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisP.isVarArgs();\n    boolean thatIsVarArgs = thatP.isVarArgs();\n\n    if (!thisIsVarArgs) {\n      thisP = thisP.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatP = thatP.getNext();\n    }\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisP = null;\n      thatP = null;\n    }\n  }\n\n  // \"this\" must be able to accept all arguments required by \"that\".\n  // (Already checked above.)\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}