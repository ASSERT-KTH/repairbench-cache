{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  //\n  // If this.paramType[i] is required,\n  // then that.paramType[i] is required.\n  //\n  // In theory, the \"required-ness\" should work in the other direction as\n  // well. In other words, if we have\n  //\n  // function f(number, number) {}\n  // function g(number) {}\n  //\n  // Then f *should* not be a subtype of g, and g *should* not be\n  // a subtype of f. But in practice, we do not implement it this way.\n  // We want to support the use case where you can pass g where f is\n  // expected, and pretend that g ignores the second argument.\n  // That way, you can have a single \"no-op\" function, and you don't have\n  // to create a new no-op function for every possible type signature.\n  //\n  // So, in this case, g < f, but f !< g\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thisParamType != null) {\n      if (thatParamType == null ||\n          !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // \"that\" can't be a supertype, because it's missing a required argument.\n      // NOTE(nicksantos): In our type system, we use {function(...?)} and\n      // {function(...NoType)} to to indicate that arity should not be\n      // checked. Strictly speaking, this is not a correct formulation,\n      // because now a sub-function can required arguments that are var_args\n      // in the super-function. So we special-case this.\n\n    // don't advance if we have variable arguments\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    // both var_args indicates the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    }\n  }\n\n  // Check if there are remaining parameters in 'this' that aren't in 'that'\n  // This would make 'that' not a supertype (since 'that' would be missing required arguments)\n  if (thisParam != null) {\n    // If remaining parameters in 'this' are optional or varargs, it's okay\n    boolean hasRequiredParam = false;\n    do {\n      if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {\n        hasRequiredParam = true;\n        break;\n      }\n      if (!thisParam.isVarArgs()) {\n        thisParam = thisParam.getNext();\n      } else {\n        break; // varargs means no more required params\n      }\n    } while (thisParam != null);\n\n    if (hasRequiredParam && !thisParam.isVarArgs() && !thisParam.isOptionalArg()) {\n      return false;\n    }\n  }\n\n  // Check if there are remaining parameters in 'that' that aren't in 'this'\n  // This would make 'this' not a subtype (since 'this' would be missing arguments)\n  if (thatParam != null) {\n    // If remaining parameters in 'that' are required but not in 'this',\n    // then 'this' isn't a proper subtype\n    boolean hasRequiredParamThatThisMissing = false;\n    do {\n      if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {\n        hasRequiredParamThatThisMissing = true;\n        break;\n      }\n      if (!thatParam.isVarArgs()) {\n        thatParam = thatParam.getNext();\n      } else {\n        break; // varargs means no more required params\n      }\n    } while (thatParam != null);\n\n    if (hasRequiredParamThatThisMissing) {\n      return false;\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}