{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // Covariant return types.\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // Contravariant parameter types.\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      // Unknown types can be subtypes of anything, but not vice versa.\n      // NOTE(nicksantos): The real fix is to make sure that the type system\n      // is complete, so that we don't have so many unknown types.\n\n      // We have a special check for 'undefined' used as a parameter type\n      // annotation. It is considered a subtype of any type, which is the\n      // common use case for function signatures with optional parameters.\n      boolean isParameterSubtype = (thisParamType == null) ||\n          (thatParamType != null && thatParamType.isSubtype(thisParamType)) ||\n           registry.isUndefinedType(thisParamType);\n\n      if (!isParameterSubtype) {\n        return false;\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n      boolean thisIsOptional = thisParam.isOptionalArg();\n      boolean thatIsOptional = thatParam.isOptionalArg();\n\n      // If this requires a param and that does not provide it, then this is\n      // not a subtype of that. If that requires a param and this does not\n      // provide it, make a special check:\n      // If this has fewer parameters than that, it is OK iff this function's\n      // parameters are(...?) or (...NoType), meaning this function does not care\n      // about the parameters that it does not declare.\n      // NOTE(nicksantos): This check is partly duplicated in FunctionType.\n      // We should try to consolidate this logic.\n      if (!thisIsVarArgs && !thisIsOptional && thatIsOptional && !thatIsVarArgs) {\n        // Use case: function f(a) {}; function g(a, opt_b) {}; f<:g?=false\n        // Use case: function f(a) {} function g(opt_a) {}; f<:g?=true\n        // If that has an optional parameter, this must also have one (or be var args).\n        return false;\n      }\n\n\n      // don't advance if we have variable arguments\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // both var_args indicates the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      }\n    }\n\n    // If \"this\" has required parameters left over that \"that\" doesn't have,\n    // then \"this\" is not a subtype of \"that\".\n    // Note: If \"that\" has parameters left over, that's OK.\n    // (function(number) is a subtype of function(number, number=))\n    while (thisParam != null) {\n        // If this parameter is required, it's a mismatch\n        if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {\n            return false;\n        }\n        // If it's optional or varargs, it's okay to have extra ones.\n        if (thisParam.isVarArgs()) { // VarArgs consumes the rest\n             break;\n        }\n        thisParam = thisParam.getNext();\n    }\n\n    // If we haven't returned false yet, it's a subtype relationship.\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}