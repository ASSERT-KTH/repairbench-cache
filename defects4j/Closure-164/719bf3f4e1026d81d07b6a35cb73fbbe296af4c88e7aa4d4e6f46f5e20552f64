{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // If \"that\" has required parameters that \"this\" doesn't have, \n  // then \"this\" is not a subtype of \"that\".\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thatParam != null) {\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n    boolean thisIsVarArgs = (thisParam != null) && thisParam.isVarArgs();\n\n    JSType thisParamType = (thisParam != null) ? thisParam.getJSType() : null;\n    JSType thatParamType = thatParam.getJSType();\n\n    // thatParam required, but thisParam exhausted: not a subtype\n    if (thisParam == null && !thatIsVarArgs) {\n      return false;\n    }\n\n    // Parameter type check, contravariant\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    // Don't advance past varargs parameter\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n    if (thisParam != null && !thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n\n    // Both are var_args, end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      break;\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}