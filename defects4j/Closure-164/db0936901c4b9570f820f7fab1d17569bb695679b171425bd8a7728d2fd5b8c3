{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Parameter contravariance check.\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  boolean thisIsVarArgs = false;\n  boolean thatIsVarArgs = false;\n\n  while (true) {\n    thisIsVarArgs = (thisParam != null && thisParam.isVarArgs());\n    thatIsVarArgs = (thatParam != null && thatParam.isVarArgs());\n\n    if (thatParam == null) {\n      // If \"that\" (the supertype) has fewer params than \"this\" (the subtype) and\n      // \"that\" does not have var_args, then \"this\" is not a subtype.\n      if (thisParam != null && !thatIsVarArgs) {\n        return false;\n      }\n      // Otherwise var_args allows additional params in \"this\"; OK.\n      break;\n    }\n\n    if (thisParam == null) {\n      // If \"this\" has fewer parameters, that's OK due to JavaScript's loose arity.\n      break;\n    }\n\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n    // Both var_args indicates the end.\n    if (thisIsVarArgs && thatIsVarArgs) {\n      break;\n    }\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}