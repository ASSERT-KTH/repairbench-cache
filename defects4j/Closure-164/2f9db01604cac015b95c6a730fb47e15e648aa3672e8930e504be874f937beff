{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // both var_args indicates the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    } else if (thisIsVarArgs) {\n      // If \"this\" is var_args, \"that\" must be var_args or have no more params\n      if (thatParam != null) {\n        return false;\n      }\n    } else if (thatIsVarArgs) {\n      // If \"that\" is var_args, \"this\" must be var_args or have no more params\n      if (thisParam != null) {\n        return false;\n      }\n    } else {\n      thisParam = thisParam.getNext();\n      thatParam = thatParam.getNext();\n    }\n  }\n\n  // \"that\" can't be a supertype if it has more parameters than \"this\"\n  if (thatParam != null) {\n    return false;\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}