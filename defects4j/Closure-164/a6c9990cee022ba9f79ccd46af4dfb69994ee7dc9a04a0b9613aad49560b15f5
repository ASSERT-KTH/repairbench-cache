{
    "generation": "  @Override\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // We enforce that the supertype must have at least as many parameters\n    // as the subtype (after accounting for varargs)\n\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n      if (thisParamType != null) {\n        if (thatParamType == null ||\n            !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // Check required arguments\n      if (thisParam.isRequired() && !thatParam.isRequired()) {\n        return false;\n      }\n\n      // \"that\" can't be a supertype, because it's missing a required argument.\n      if (thisIsVarArgs && !thatIsVarArgs) {\n        // If this has varargs but that doesn't, it's okay as long as we've processed\n        // all of that's parameters (i.e., that has fewer parameters)\n        if (thatParam.getNext() != null) {\n          return false;\n        }\n      } else if (!thisIsVarArgs && thatIsVarArgs) {\n        // If that has varargs but this doesn't, then that must have at least as many parameters\n        if (thisParam.getNext() != null) {\n          return false;\n        }\n      } else {\n        // Normal case - advance both if both are regular parameters\n        if (!thisIsVarArgs) {\n          thisParam = thisParam.getNext();\n        }\n        if (!thatIsVarArgs) {\n          thatParam = thatParam.getNext();\n        }\n      }\n\n      // both var_args indicates the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      }\n    }\n\n    // If we've exhausted the parameters of \"that\" but still have parameters in \"this\",\n    // then \"that\" cannot be a supertype (unless this has varargs)\n    if (thisParam != null) {\n      // Check if the remaining parameters in \"this\" are optional\n      Node currentParam = thisParam;\n      while (currentParam != null) {\n        if (currentParam.isRequired()) {\n          return false;\n        }\n        currentParam = currentParam.getNext();\n      }\n    }\n\n    // If we've exhausted the parameters of \"this\" but still have parameters in \"that\",\n    // we need to check if they're all optional\n    if (thatParam != null) {\n      // For \"that\" to be a supertype, any remaining parameters must be optional\n      Node currentParam = thatParam;\n      while (currentParam != null) {\n        if (currentParam.isRequired()) {\n          return false;\n        }\n        currentParam = currentParam.getNext();\n      }\n    }\n\n    return true;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}