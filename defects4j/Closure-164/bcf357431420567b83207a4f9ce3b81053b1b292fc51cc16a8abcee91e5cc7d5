{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec, Section 3.4.7:\n  // Subtyping Function Types.\n\n  // Check return type: we require that\n  //   this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Check parameter types (contravariant).\n  //\n  // For functions, we allow a function with fewer required parameters to\n  // substitute for one with more parameters. In other words, if we have\n  //   function f(number, number) {}\n  //   function g(number) {}\n  // then we allow g to be used where f is expected (g ignores the extra argument),\n  // so g is a subtype of f, but not vice-versa.\n  //\n  // The rule we implement is: iterate concurrently over the parameters\n  // for 'this' (the candidate subtype) and 'that' (the supertype).\n  // For every pair that exists, we require that:\n  //   that.paramType <: this.paramType\n  // (i.e. the parameter types are compared contravariantly).\n  // If 'this' has extra parameters (i.e. its parameter list is longer than 'that')\n  // then it is not a subtype.\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n    if (thisParamType != null) {\n      if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // If we encounter a var_args parameter in both functions we treat it as the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      thisParam = null;\n      thatParam = null;\n    } else {\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n    }\n  }\n\n  // If 'this' has extra parameters (i.e. requires more arguments than 'that')\n  // then it cannot be used where a function with fewer parameters is expected.\n  if (thisParam != null) {\n    return false;\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}