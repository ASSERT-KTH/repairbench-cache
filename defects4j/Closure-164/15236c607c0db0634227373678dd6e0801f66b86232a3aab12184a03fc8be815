{
    "generation": "@Override\npublic boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // Parameter contravariance -- that.paramType[i] <: this.paramType[i]\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  // At any point, if \"this\" has more required parameters than \"that\", then \"this\" is not a subtype of \"that\".\n  int thisPosition = 0;\n  int thatPosition = 0;\n  while (thatParam != null) {\n    JSType thisParamType = (thisParam == null) ? null : thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    boolean thisIsVarArgs = (thisParam != null) && thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // If thatParamType is required but thisParamType is missing, then 'this' cannot be a subtype of 'that'.\n    if (thisParamType == null && !thatIsVarArgs) {\n      return false;\n    }\n\n    if (thisParamType != null && thatParamType != null) {\n      if (!thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n    }\n\n    // don't advance if we have variable arguments\n    if (thisParam != null && !thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n      thisPosition++;\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n      thatPosition++;\n    } else {\n      // If \"that\" is varargs, it can accept more parameters, just stop here\n      break;\n    }\n  }\n\n  // After all thatParam have been handled, if this still has required parameters,\n  // then \"this\" is NOT a subtype of \"that\".\n  while (thisParam != null) {\n    if (!thisParam.isOptional() && !thisParam.isVarArgs()) {\n      return false;\n    }\n    if (thisParam.isVarArgs()) {\n      break;\n    }\n    thisParam = thisParam.getNext();\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}