{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        if (settings.isUsingConstructor()) {\n            Object[] constructorArgs = settings.getConstructorArguments();\n            // In case the type to mock is an inner (non-static) class, an outer instance must be provided.\n            if (settings.getOuterInstance() != null) {\n                if (constructorArgs == null || constructorArgs.length == 0) {\n                    constructorArgs = new Object[]{settings.getOuterInstance()};\n                } else {\n                    Object[] newArgs = new Object[constructorArgs.length + 1];\n                    newArgs[0] = settings.getOuterInstance();\n                    System.arraycopy(constructorArgs, 0, newArgs, 1, constructorArgs.length);\n                    constructorArgs = newArgs;\n                }\n            }\n            // Instantiate by calling the actual constructor (which will run the initialization code)\n            mockInstance = classInstantiator.instantiate(mockedProxyType, constructorArgs);\n        } else {\n            // Instantiate without calling the constructor (using objenesis, etc)\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}