{
    "generation": "@Override\npublic <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\n            \"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n        settings.getTypeToMock(),\n        settings.getExtraInterfaces()\n    );\n    T mockInstance;\n    try {\n        /*\n         * Two special cases in which we must call the real constructor:\n         * 1) spy(Class) \u2014 a spy on a type (no real instance supplied) must invoke the no-arg\n         *    constructor so that fields get initialized.\n         * 2) useConstructor() was called explicitly in withSettings().\n         */\n        boolean isTypeSpy = settings.isSpy() && settings.getSpiedInstance() == null;\n        Object[] ctorArgs = settings.getConstructorArgs();\n        if (isTypeSpy || ctorArgs != null) {\n            Object outer = settings.getOuterInstance();\n            Object[] args;\n            if (ctorArgs != null) {\n                // user supplied explicit constructor args\n                if (outer != null) {\n                    args = new Object[ctorArgs.length + 1];\n                    args[0] = outer;\n                    System.arraycopy(ctorArgs, 0, args, 1, ctorArgs.length);\n                } else {\n                    args = ctorArgs;\n                }\n            } else if (outer != null) {\n                // spy(Class) with an implicit no-arg and an outer instance\n                args = new Object[] { outer };\n            } else {\n                // spy(Class) default no-arg\n                args = new Object[0];\n            }\n            // this overloaded instantiate(...) will invoke the matching constructor\n            mockInstance = classInstantiator.instantiate(mockedProxyType, args);\n        } else {\n            // normal mock or spy(Object): bypass the constructor\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n\n        MockMethodInterceptor.MockAccess access = (MockMethodInterceptor.MockAccess) mockInstance;\n        access.setMockitoInterceptor(new MockMethodInterceptor(\n            asInternalMockHandler(handler),\n            settings\n        ));\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n            \"ClassCastException occurred while creating the mockito mock :\",\n            \"  class to mock : \" + describeClass(mockedProxyType),\n            \"  created class : \" + describeClass(settings.getTypeToMock()),\n            \"  proxy instance class : \" + describeClass(mockInstance),\n            \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n            \"\",\n            \"You might experience classloading issues, please ask the mockito mailing-list.\",\n            \"\"\n        ), cce);\n\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        // report failures in constructor-based instantiation or Objensis fallback\n        String name = settings.getTypeToMock().getSimpleName();\n        throw new MockitoException(\"Unable to create mock instance of type '\" + name + \"'\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}