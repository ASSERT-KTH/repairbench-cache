{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // If constructor invocation was requested (for spies or explicit useConstructor):\n        if (settings.getConstructorArgTypes() != null) {\n            Class<?>[] parameterTypes = settings.getConstructorArgTypes();\n            Object[] constructorArgs = settings.getConstructorArgs();\n            Object outerInstance = settings.getOuterInstance();\n            if (outerInstance != null) {\n                Class<?> enclosingClass = settings.getTypeToMock().getEnclosingClass();\n                if (!enclosingClass.isInstance(outerInstance)) {\n                    // delegate to the InstantiationException catcher below\n                    throw new org.mockito.internal.creation.instance.InstantiationException(\n                        \"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\"\n                    );\n                }\n                // prepend the implicit outer instance parameter\n                Class<?>[] newTypes = new Class<?>[parameterTypes.length + 1];\n                newTypes[0] = enclosingClass;\n                System.arraycopy(parameterTypes, 0, newTypes, 1, parameterTypes.length);\n                parameterTypes = newTypes;\n                Object[] newArgs = new Object[constructorArgs.length + 1];\n                newArgs[0] = outerInstance;\n                System.arraycopy(constructorArgs, 0, newArgs, 1, constructorArgs.length);\n                constructorArgs = newArgs;\n            }\n            mockInstance = classInstantiator.newInstance(mockedProxyType, parameterTypes, constructorArgs);\n        } else {\n            // default instantiation (bypass constructor)\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(\n                new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\n            \"Unable to create mock instance of type '\" +\n                mockedProxyType.getSuperclass().getSimpleName() + \"'\",\n            e\n        );\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}