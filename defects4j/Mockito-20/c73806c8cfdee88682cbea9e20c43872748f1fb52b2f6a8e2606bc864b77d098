{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\n            \"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n        settings.getTypeToMock(),\n        settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // If user supplied an existing instance to spy on, use it:\n        if (settings.getSpiedInstance() != null) {\n            mockInstance = settings.getSpiedInstance();\n        }\n        // Otherwise, if constructor\u2010based instantiation is requested (spy or useConstructor)\n        else if (settings.getConstructorArgs() != null || settings.isSpy()) {\n            Object[] ctorArgs = settings.getConstructorArgs();\n            if (ctorArgs == null) {\n                ctorArgs = new Object[0];\n            }\n            mockInstance = classInstantiator.instantiateUsingConstructor(\n                mockedProxyType,\n                ctorArgs,\n                settings.getOuterInstance()\n            );\n        }\n        // Default mock creation: skip constructors (Objenesis)\n        else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n\n        MockMethodInterceptor.MockAccess mockAccess =\n            (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(\n            new MockMethodInterceptor(asInternalMockHandler(handler), settings)\n        );\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n            \"ClassCastException occurred while creating the mockito mock :\",\n            \"  class to mock : \" + describeClass(mockedProxyType),\n            \"  created class : \" + describeClass(settings.getTypeToMock()),\n            \"  proxy instance class : \" + describeClass(mockInstance),\n            \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n            \"\",\n            \"You might experience classloading issues, please ask the mockito mailing-list.\",\n            \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\n            \"Unable to create mock instance of type '\"\n            + mockedProxyType.getSuperclass().getSimpleName() + \"'\",\n            e\n        );\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}