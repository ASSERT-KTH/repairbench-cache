{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // Handle constructor instantiation if required\n        if (settings.isUsingConstructor()) {\n            Object[] constructorArgs = null;\n            Object outerInstance = null;\n\n            if (settings.getOuterInstance() != null) {\n                constructorArgs = new Object[]{settings.getOuterInstance()};\n                outerInstance = settings.getOuterInstance();\n            }\n\n            try {\n                Constructor<?> constructor = mockedProxyType.getDeclaredConstructors()[0];\n                if (constructor.getParameterCount() == 0) {\n                    mockInstance = (T) constructor.newInstance();\n                } else if (constructor.getParameterCount() == 1 &&\n                         innerClassNeedsOuterInstance(constructor.getParameterTypes()[0])) {\n                    if (outerInstance == null) {\n                        throw new InstantiationException(\n                            \"Outer instance is required to instantiate inner class \"\n                            + mockedProxyType.getName()\n                        );\n                    }\n                    mockInstance = (T) constructor.newInstance(outerInstance);\n                }\n            } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n                throw new org.mockito.internal.creation.instance.InstantiationException(\n                    \"Unable to instantiate \" + mockedProxyType.getName(), e);\n            }\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n\n        if (mockInstance == null) {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getName() + \"'\");\n        }\n\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ),cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\", e);\n    } catch (Exception e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\", e);\n    }\n}\n\nprivate boolean innerClassNeedsOuterInstance(Class<?> outerInstanceType) {\n    return !outerInstanceType.isPrimitive() && !outerInstanceType.equals(String.class);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}