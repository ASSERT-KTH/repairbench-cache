{
    "generation": "    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces()\n        );\n        T mockInstance = null;\n        try {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n            // Ensure constructor was called properly by checking non-static fields\n            if (settings.getTypeToMock().isMemberClass() && settings.getOuterInstance() != null) {\n                try {\n                    Field outerField = reflectedClassesCache.get(mockedProxyType).getDeclaredField(\"this$0\");\n                    outerField.setAccessible(true);\n                    outerField.set(mockInstance, settings.getOuterInstance());\n                } catch (Exception e) {\n                    throw new MockitoException(\"Unable to set outer instance for inner class mock\", e);\n                }\n            }\n\n            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n        } catch (ClassCastException cce) {\n            throw new MockitoException(join(\n                    \"ClassCastException occurred while creating the mockito mock :\",\n                    \"  class to mock : \" + describeClass(mockedProxyType),\n                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n                    \"  proxy instance class : \" + describeClass(mockInstance),\n                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                    \"\",\n                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                    \"\"\n            ), cce);\n        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n            String message = \"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\";\n            if (e.getCause() != null && e.getCause().getMessage() != null && e.getCause().getMessage().contains(\"constructor\")) {\n                message += \". Please ensure that the constructor is accessible and has no throwing arguments.\";\n            }\n            throw new MockitoException(message, e);\n        } catch (Exception e) {\n            throw new MockitoException(\"Unable to create mock instance of type '\" +\n                    mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}