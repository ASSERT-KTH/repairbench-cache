{
    "generation": "    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces()\n        );\n        T mockInstance = null;\n        try {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n        } catch (ClassCastException cce) {\n            // Improve error message for ClassCastException for better diagnostics.\n            // Describe the requested type and the generated proxy type more clearly.\n            throw new MockitoException(join(\n                    \"ClassCastException occurred while creating the mockito mock :\",\n                    \"  class to mock (requested) : \" + describeClass(settings.getTypeToMock()),\n                    \"  generated proxy type      : \" + describeClass(mockedProxyType),\n                    \"  proxy instance class      : \" + describeClass(mockInstance),\n                    \"  instance creation by      : \" + classInstantiator.getClass().getSimpleName(),\n                    \"\",\n                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                    \"\"\n            ),cce);\n        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n            // Improve error message for InstantiationException to include more details\n            // from the underlying cause (e.g., constructor message like \"hey!\" or \"0-arg constructor not found\").\n            // Also, use the original typeToMock for clarity in the message.\n            String message = \"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\";\n            if (e.getMessage() != null && !e.getMessage().isEmpty()) {\n                // Append the InstantiationException's message, which often contains specific constructor details.\n                message += \". \" + e.getMessage();\n            }\n            throw new MockitoException(message, e);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}