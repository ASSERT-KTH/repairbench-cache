{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // if the user requested a real\u2010constructor invocation (e.g. spy or useConstructor), do so\n        if (settings.isUsingConstructor() || settings.isSpy()) {\n            List<Object> ctorArgs = new ArrayList<Object>();\n            // prepend outer instance for non\u2010static inner classes, if provided\n            Object outer = settings.getOuterInstance();\n            if (outer != null) {\n                ctorArgs.add(outer);\n            }\n            // then any explicit constructor arguments\n            List<?> userArgs = settings.getConstructorArgs();\n            if (userArgs != null) {\n                ctorArgs.addAll(userArgs);\n            }\n            // invoke the matching constructor reflectively\n            mockInstance = classInstantiator.instantiate(\n                    mockedProxyType,\n                    ctorArgs.toArray(new Object[0])\n            );\n        } else {\n            // default mock: bypass the constructor entirely\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(\n                new MockMethodInterceptor(asInternalMockHandler(handler), settings)\n        );\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\n                \"Unable to create mock instance of type '\" +\n                mockedProxyType.getSuperclass().getSimpleName() + \"'\",\n                e\n        );\n\n    } catch (Exception e) {\n        // catches any runtime\u2010exception from a \"real\" constructor (e.g. explosive constructors)\n        throw new MockitoException(\n                \"Unable to create mock instance of type '\" +\n                mockedProxyType.getSuperclass().getSimpleName() + \"'\",\n                e\n        );\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}