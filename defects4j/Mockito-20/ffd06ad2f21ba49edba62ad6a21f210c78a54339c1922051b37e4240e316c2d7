{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // 1) spy on an existing instance?\n        if (settings.getSpiedInstance() != null) {\n            mockInstance = settings.getSpiedInstance();\n\n        // 2) use real constructor (useConstructor() or inner\u2010class outerInstance)\n        } else if (settings.getConstructorArgs() != null || settings.getOuterInstance() != null) {\n            try {\n                java.util.List<Object> argsList = new java.util.ArrayList<Object>();\n                if (settings.getOuterInstance() != null) {\n                    argsList.add(settings.getOuterInstance());\n                }\n                if (settings.getConstructorArgs() != null) {\n                    for (Object arg : settings.getConstructorArgs()) {\n                        argsList.add(arg);\n                    }\n                }\n                java.lang.reflect.Constructor<?> ctor = null;\n                for (java.lang.reflect.Constructor<?> c : mockedProxyType.getDeclaredConstructors()) {\n                    Class<?>[] params = c.getParameterTypes();\n                    if (params.length == argsList.size()) {\n                        boolean matches = true;\n                        for (int i = 0; i < params.length; i++) {\n                            if (!params[i].isAssignableFrom(\n                                    argsList.get(i) == null\n                                    ? params[i]  // accept null for reference types\n                                    : argsList.get(i).getClass())) {\n                                matches = false;\n                                break;\n                            }\n                        }\n                        if (matches) {\n                            ctor = c;\n                            break;\n                        }\n                    }\n                }\n                if (ctor == null) {\n                    String msg = settings.getOuterInstance() != null\n                        ? \"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\"\n                        : \"0-arg constructor not found\";\n                    throw new RuntimeException(msg);\n                }\n                ctor.setAccessible(true);\n                @SuppressWarnings(\"unchecked\")\n                T instance = (T) ctor.newInstance(argsList.toArray());\n                mockInstance = instance;\n            } catch (java.lang.reflect.InvocationTargetException ite) {\n                // constructor threw an exception\n                throw new MockitoException(\n                    \"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\",\n                    ite.getCause());\n            } catch (Exception e) {\n                // no matching ctor, illegal access, etc.\n                throw new MockitoException(\n                    \"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\",\n                    e);\n            }\n\n        // 3) default path: byte\u2010buddy + objenesis (no constructor)\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n\n        // common setup: attach interceptor\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(\n            new MockMethodInterceptor(asInternalMockHandler(handler), settings)\n        );\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        // objenesis-based instantiation failure\n        throw new MockitoException(\n            \"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\",\n            e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}