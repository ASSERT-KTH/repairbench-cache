{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        if (settings.isUseConstructor()) {\n            // Use constructor (possibly with outer instance)\n            Object outerClassInstance = settings.getOuterClassInstance();\n            Object[] constructorArgs = settings.getConstructorArgs();\n            try {\n                if (outerClassInstance != null) {\n                    mockInstance = classInstantiator.instantiate(mockedProxyType, outerClassInstance, constructorArgs);\n                } else {\n                    mockInstance = classInstantiator.instantiate(mockedProxyType, constructorArgs);\n                }\n            } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n                Throwable cause = e.getCause();\n                StringBuilder additional = new StringBuilder();\n                if (mockedProxyType.getEnclosingClass() != null && !java.lang.reflect.Modifier.isStatic(mockedProxyType.getModifiers())) {\n                    additional.append(\"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\");\n                } else {\n                    additional.append(\"Please ensure the target class has 0-arg constructor.\");\n                }\n\n                String msg = \"Unable to create mock instance of type '\"\n                        + mockedProxyType.getSuperclass().getSimpleName() + \"'\";\n                MockitoException me = new MockitoException(msg, e);\n                if (cause != null && cause.getMessage() != null) {\n                    // inject context into the original cause message\n                    me.initCause(new Exception(cause.getMessage() + \". \" + additional));\n                } else {\n                    me.initCause(new Exception(additional.toString()));\n                }\n                throw me;\n            }\n        } else {\n            // No-arg new instance\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ),cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        Throwable cause = e.getCause();\n        String msg = \"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\";\n        if (cause != null && cause.getMessage() != null) {\n            throw new MockitoException(msg, cause);\n        } else {\n            throw new MockitoException(msg, e);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}