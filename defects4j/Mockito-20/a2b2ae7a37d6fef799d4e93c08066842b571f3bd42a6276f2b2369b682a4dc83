{
    "generation": "    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces()\n        );\n\n        org.mockito.internal.creation.instance.ClassInstantiator instantiatorForThisMock;\n        if (settings.isUsingConstructor()) {\n            java.util.Optional<Object[]> constructorArgs = java.util.Optional.ofNullable(settings.getConstructorArgs())\n                                                        .map(java.util.List::toArray);\n            java.util.Optional<Class<?>[]> constructorArgTypes = java.util.Optional.ofNullable(settings.getConstructorArgTypes());\n\n            instantiatorForThisMock = new org.mockito.internal.creation.instance.ConstructorInstantiator(\n                java.util.Optional.ofNullable(settings.getOuterInstance()),\n                constructorArgs,\n                constructorArgTypes\n            );\n        } else {\n            // For regular mocks (not using constructor), use the default instantiator (typically Objenesis)\n            // 'this.classInstantiator' is assumed to be an ObjenesisClassInstantiator initialized by ByteBuddyMockMaker.\n            instantiatorForThisMock = this.classInstantiator;\n        }\n\n        T mockInstance = null;\n        try {\n            mockInstance = instantiatorForThisMock.instantiate(mockedProxyType);\n            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n        } catch (ClassCastException cce) {\n            throw new MockitoException(join(\n                    \"ClassCastException occurred while creating the mockito mock :\",\n                    \"  class to mock : \" + describeClass(settings.getTypeToMock()), // Refer to the original type requested by user\n                    \"  proxy instance class : \" + describeClass(mockInstance),\n                    \"  instance creation by : \" + instantiatorForThisMock.getClass().getSimpleName(), // Use the instantiator chosen for this mock\n                    \"\",\n                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                    \"\"\n            ),cce);\n        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n            // Fix the error message to refer to the original type to mock\n            throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\", e);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}