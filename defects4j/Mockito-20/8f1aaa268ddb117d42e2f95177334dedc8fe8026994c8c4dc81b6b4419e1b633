{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // SUPPORT CONSTRUCTOR MOCKING:\n        // - If useConstructor() is enabled, call instantiator.instantiate with constructorArgs and outerInstance (if set), otherwise default.\n        Object[] constructorArgs = null;\n        Object outerInstance = null;\n        boolean withConstructor = settings.isUsingConstructor();\n        if (withConstructor) {\n            constructorArgs = settings.getConstructorArgs();\n            outerInstance = settings.getOuterClassInstance();\n            if (constructorArgs != null && constructorArgs.length == 0) {\n                constructorArgs = null; // for convenience, treat empty arrays as null\n            }\n        }\n\n        if (withConstructor) {\n            // There are 3 cases:\n            // 1. outer instance (for inner classes) (required for non-static inner) is present\n            // 2. just constructor args (for top-level, static, or anonymous classes)\n            // 3. neither (use the zero-arg constructor)\n            if (outerInstance != null) {\n                // Inner class with outer instance\n                mockInstance = classInstantiator.instantiate(mockedProxyType, outerInstance, constructorArgs);\n            } else if (constructorArgs != null) {\n                mockInstance = classInstantiator.instantiate(mockedProxyType, constructorArgs);\n            } else {\n                mockInstance = classInstantiator.instantiate(mockedProxyType);\n            }\n        } else {\n            // no constructor mocking requested\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ),cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        // Try to give better info if possible.\n        String mockedTypeName;\n        try {\n            mockedTypeName = mockedProxyType.getSuperclass().getSimpleName();\n        } catch (Throwable t) {\n            mockedTypeName = String.valueOf(mockedProxyType);\n        }\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedTypeName + \"'\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}