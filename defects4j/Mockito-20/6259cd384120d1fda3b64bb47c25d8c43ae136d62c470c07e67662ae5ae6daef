{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // Check if the settings require constructor instantiation\n        if (settings.getInstanceSettings() != null && settings.getInstanceSettings().useConstructor()) {\n            Constructor<?> constructor = findConstructor(mockedProxyType, settings);\n            if (constructor == null) {\n                throw new MockitoException(\"Unable to find a suitable constructor for \" + mockedProxyType.getSimpleName());\n            }\n            mockInstance = instantiateMockWithConstructor(mockedProxyType, constructor, settings);\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\", e);\n    }\n}\n\nprivate <T> Constructor<?> findConstructor(Class<? extends T> mockedProxyType, MockCreationSettings<T> settings) {\n    if (settings.getInstanceSettings().getOuterInstance() != null) {\n        try {\n            return mockedProxyType.getConstructor(settings.getInstanceSettings().getOuterInstance().getClass());\n        } catch (NoSuchMethodException e) {\n            throw new MockitoException(\"Unable to find a suitable constructor for \" + mockedProxyType.getSimpleName() + \n                    \" with outer instance of type \" + settings.getInstanceSettings().getOuterInstance().getClass().getSimpleName(), e);\n        }\n    } else {\n        try {\n            return mockedProxyType.getConstructor();\n        } catch (NoSuchMethodException e) {\n            throw new MockitoException(\"Unable to find a 0-arg constructor for \" + mockedProxyType.getSimpleName(), e);\n        }\n    }\n}\n\nprivate <T> T instantiateMockWithConstructor(Class<? extends T> mockedProxyType, Constructor<?> constructor, MockCreationSettings<T> settings) {\n    try {\n        if (settings.getInstanceSettings().getOuterInstance() != null) {\n            return mockedProxyType.cast(constructor.newInstance(settings.getInstanceSettings().getOuterInstance()));\n        } else {\n            return mockedProxyType.cast(constructor.newInstance());\n        }\n    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n        throw new MockitoException(\"Unable to instantiate mock using constructor\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}