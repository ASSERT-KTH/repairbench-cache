{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    \n    // Check if the type to mock is an abstract class or interface\n    boolean isAbstractOrInterface = Modifier.isAbstract(settings.getTypeToMock().getModifiers()) || settings.getTypeToMock().isInterface();\n    \n    // If the type is abstract or interface and no constructor is specified, use default mocking\n    if (isAbstractOrInterface && !settings.getConstructorArgs().isPresent()) {\n        return createMockWithoutConstructor(settings, handler);\n    }\n    \n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    \n    T mockInstance = null;\n    try {\n        // Use the specified constructor if present, otherwise use the default constructor\n        if (settings.getConstructorArgs().isPresent()) {\n            mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs().get());\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        \n        // Handle inner classes by setting the outer instance if specified\n        if (settings.getOuterInstance().isPresent()) {\n            setOuterInstance(mockInstance, settings.getOuterInstance().get());\n        }\n        \n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\", e);\n    }\n}\n\nprivate <T> T createMockWithoutConstructor(MockCreationSettings<T> settings, MockHandler handler) {\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    \n    T mockInstance = null;\n    try {\n        mockInstance = classInstantiator.instantiate(mockedProxyType);\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\", e);\n    }\n}\n\nprivate <T> void setOuterInstance(T mockInstance, Object outerInstance) {\n    try {\n        Field outerField = mockInstance.getClass().getDeclaredField(\"this$0\");\n        outerField.setAccessible(true);\n        outerField.set(mockInstance, outerInstance);\n    } catch (NoSuchFieldException | IllegalAccessException e) {\n        throw new MockitoException(\"Unable to set outer instance for inner class mock\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}