{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\n            \"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n        settings.getTypeToMock(),\n        settings.getExtraInterfaces()\n    );\n\n    T mockInstance = null;\n    try {\n        /*\n         * Decide which instantiator to use:\n         * - If user asked for useConstructor(...)\n         * - If an outer\u2010instance is present (inner classes)\n         * - If this is a spy (calls real methods)\n         */\n        org.mockito.internal.creation.instance.Instantiator instantiator = classInstantiator;\n        if (settings.getConstructorArguments() != null\n            || settings.getOuterInstance()      != null\n            || settings.getDefaultAnswer() == org.mockito.Answers.CALLS_REAL_METHODS) {\n\n            instantiator = new org.mockito.internal.creation.instance.ConstructorInstantiator(\n                settings.getOuterInstance(),\n                settings.getConstructorArguments(),\n                classInstantiator\n            );\n        }\n\n        mockInstance = instantiator.instantiate(mockedProxyType);\n\n        MockMethodInterceptor.MockAccess mockAccess =\n            (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(\n            new MockMethodInterceptor(\n                asInternalMockHandler(handler),\n                settings\n            )\n        );\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n            \"ClassCastException occurred while creating the mockito mock :\",\n            \"  class to mock : \"   + describeClass(mockedProxyType),\n            \"  created class : \"     + describeClass(settings.getTypeToMock()),\n            \"  proxy instance class : \" + describeClass(mockInstance),\n            \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n            \"\",\n            \"You might experience classloading issues, please ask the mockito mailing-list.\",\n            \"\"\n        ), cce);\n\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\n            \"Unable to create mock instance of type '\"\n              + mockedProxyType.getSuperclass().getSimpleName() + \"'\",\n            e\n        );\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}