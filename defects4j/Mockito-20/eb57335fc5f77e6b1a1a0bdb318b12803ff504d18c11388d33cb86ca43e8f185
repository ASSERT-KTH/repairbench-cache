{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // Handle special cases for inner classes and abstract classes\n        if (settings.getTypeToMock().isMemberClass() && !Modifier.isStatic(settings.getTypeToMock().getModifiers())) {\n            // For non-static inner classes, we need to provide the outer instance\n            Object outerInstance = settings.getOuterInstance();\n            if (outerInstance == null) {\n                throw new MockitoException(\"Unable to create mock instance of type '\" +\n                    settings.getTypeToMock().getSimpleName() +\n                    \"' because it's an inner class and outer instance is not provided\");\n            }\n            mockInstance = classInstantiator.instantiate(mockedProxyType, outerInstance);\n        } else if (settings.requiresConstructor()) {\n            // Handle constructor initialization for concrete classes and abstract classes with constructors\n            Object[] constructorArgs = settings.getConstructorArgs();\n            if (settings.getTypeToMock().isMemberClass() && !Modifier.isStatic(settings.getTypeToMock().getModifiers())) {\n                // Add outer instance as first argument for member classes\n                Object outerInstance = settings.getOuterInstance();\n                if (outerInstance == null) {\n                    throw new MockitoException(\"Unable to create mock instance of type '\" +\n                        settings.getTypeToMock().getSimpleName() +\n                        \"' because outer instance is required but not provided\");\n                }\n                Object[] argsWithOuter = new Object[constructorArgs != null ? constructorArgs.length + 1 : 1];\n                argsWithOuter[0] = outerInstance;\n                if (constructorArgs != null) {\n                    System.arraycopy(constructorArgs, 0, argsWithOuter, 1, constructorArgs.length);\n                }\n                mockInstance = classInstantiator.instantiateWithArgs(mockedProxyType, argsWithOuter);\n            } else {\n                // Regular constructor case\n                mockInstance = constructorArgs != null && constructorArgs.length > 0\n                    ? classInstantiator.instantiateWithArgs(mockedProxyType, constructorArgs)\n                    : classInstantiator.instantiate(mockedProxyType);\n            }\n        } else {\n            // Default case - simple instantiation\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ),cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n    } catch (Exception e) {\n        // Handle any other instantiation exceptions\n        throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}