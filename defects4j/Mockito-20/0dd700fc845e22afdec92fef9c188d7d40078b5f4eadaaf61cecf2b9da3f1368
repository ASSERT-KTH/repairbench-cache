{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        Object outerInstance = settings.getOuterInstance();\n        Object[] constructorArgs = settings.getConstructorArgs();\n        // if constructor injection requested (either explicit args or outer instance provided)\n        if (constructorArgs != null || outerInstance != null) {\n            try {\n                Constructor<? extends T> ctor;\n                if (outerInstance != null) {\n                    // inner class: first parameter is the outer instance\n                    int len = constructorArgs != null ? constructorArgs.length : 0;\n                    Class<?>[] paramTypes = new Class<?>[len + 1];\n                    Object[] initArgs = new Object[len + 1];\n                    paramTypes[0] = outerInstance.getClass();\n                    initArgs[0] = outerInstance;\n                    for (int i = 0; i < len; i++) {\n                        Object arg = constructorArgs[i];\n                        paramTypes[i + 1] = arg != null ? arg.getClass() : null;\n                        initArgs[i + 1] = arg;\n                    }\n                    ctor = mockedProxyType.getDeclaredConstructor(paramTypes);\n                    ctor.setAccessible(true);\n                    mockInstance = ctor.newInstance(initArgs);\n                } else {\n                    // regular class constructor\n                    if (constructorArgs.length == 0) {\n                        ctor = mockedProxyType.getDeclaredConstructor();\n                        ctor.setAccessible(true);\n                        mockInstance = ctor.newInstance();\n                    } else {\n                        int len = constructorArgs.length;\n                        Class<?>[] paramTypes = new Class<?>[len];\n                        for (int i = 0; i < len; i++) {\n                            Object arg = constructorArgs[i];\n                            paramTypes[i] = arg != null ? arg.getClass() : null;\n                        }\n                        ctor = mockedProxyType.getDeclaredConstructor(paramTypes);\n                        ctor.setAccessible(true);\n                        mockInstance = ctor.newInstance(constructorArgs);\n                    }\n                }\n            } catch (NoSuchMethodException nsme) {\n                String msg = outerInstance != null\n                        ? \"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\"\n                        : \"Unable to find 0-arg constructor\";\n                throw new org.mockito.internal.creation.instance.InstantiationException(msg, nsme);\n            } catch (Throwable t) {\n                throw new org.mockito.internal.creation.instance.InstantiationException(t);\n            }\n        } else {\n            // default: bypass constructor (Objenesis)\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\n                \"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\",\n                e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}