{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\n            \"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n        settings.getTypeToMock(),\n        settings.getExtraInterfaces()\n    );\n    T mockInstance;\n    try {\n        // if the user asked for constructor\u2010based creation or supplied an outer instance\n        if (settings.getConstructorArgs() != null || settings.getOuterInstance() != null) {\n            // build the full argument array (outerInstance first, then any ctor args)\n            List<?> ctorArgs = settings.getConstructorArgs();\n            Object outer = settings.getOuterInstance();\n            int totalArgs = (outer != null ? 1 : 0) + (ctorArgs != null ? ctorArgs.size() : 0);\n            Object[] allArgs = new Object[totalArgs];\n            int idx = 0;\n            if (outer != null) {\n                allArgs[idx++] = outer;\n            }\n            if (ctorArgs != null) {\n                for (Object a : ctorArgs) {\n                    allArgs[idx++] = a;\n                }\n            }\n            mockInstance = classInstantiator.instantiate(mockedProxyType, allArgs);\n        } else {\n            // default: bypass constructor (objenesis)\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n\n        MockMethodInterceptor.MockAccess mockAccess =\n            (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(\n            new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n            \"ClassCastException occurred while creating the mockito mock :\",\n            \"  class to mock : \" + describeClass(mockedProxyType),\n            \"  created class : \" + describeClass(settings.getTypeToMock()),\n            \"  proxy instance class : \" + describeClass(mockInstance),\n            \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n            \"\",\n            \"You might experience classloading issues, please ask the mockito mailing-list.\",\n            \"\"\n        ), cce);\n\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\n            \"Unable to create mock instance of type '\" +\n            mockedProxyType.getSuperclass().getSimpleName() + \"'\",\n            e\n        );\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}