{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // Support for useConstructor()\n        if (settings.isUsingConstructor()) {\n            Object outerClassInstance = settings.getOuterClassInstance();\n            Object[] constructorArgs = settings.getConstructorArgs();\n            // If user did not provide constructorArgs, default to empty array\n            if (constructorArgs == null) {\n                constructorArgs = new Object[0];\n            }\n            mockInstance = classInstantiator.instantiate(\n                    mockedProxyType,\n                    outerClassInstance,\n                    constructorArgs\n            );\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ),cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        StringBuilder message = new StringBuilder(\"Unable to create mock instance of type '\")\n                .append(mockedProxyType.getSuperclass().getSimpleName())\n                .append(\"'\");\n        if (settings.isUsingConstructor()) {\n            message.append(\"\\nPlease ensure that the target class has 0-arg constructor or appropriate constructor arguments are passed.\");\n            if (settings.getOuterClassInstance() != null) {\n                message.append(\"\\nPlease ensure that the outer instance has correct type and that the target class has 0-arg constructor.\");\n            }\n        }\n        throw new MockitoException(message.toString(), e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}