{
    "generation": "    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces()\n        );\n        T mockInstance = null;\n        // Declare instantiatorToUse outside the try block to make it accessible in catch blocks\n        org.mockito.internal.creation.instance.Instantiator instantiatorToUse = null;\n        try {\n            if (settings.isUsingConstructor()) {\n                // When using a constructor, a ConstructorInstantiator is required.\n                // It takes care of finding and invoking the appropriate constructor,\n                // including handling inner classes and their outer instances.\n                instantiatorToUse = new org.mockito.internal.creation.instance.ConstructorInstantiator(\n                    settings.isStripAnnotations(),\n                    settings.getOuterInstance(),\n                    settings.getConstructorArgs() != null ? settings.getConstructorArgs() : new Object[0]\n                );\n            } else {\n                // Otherwise, use the default instantiator (typically ObjenesisInstantiator),\n                // which creates an instance without invoking any constructor.\n                instantiatorToUse = classInstantiator;\n            }\n\n            mockInstance = instantiatorToUse.instantiate(mockedProxyType);\n\n            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n        } catch (ClassCastException cce) {\n            // Improve error message for ClassCastException for better debugging\n            throw new MockitoException(join(\n                    \"ClassCastException occurred while creating the mockito mock :\",\n                    \"  class to mock : \" + describeClass(settings.getTypeToMock()), // The original type requested by the user\n                    \"  created class : \" + describeClass(mockedProxyType), // The ByteBuddy generated proxy type\n                    \"  proxy instance class : \" + describeClass(mockInstance), // The actual instance's class\n                    \"  instance creation by : \" + (instantiatorToUse != null ? instantiatorToUse.getClass().getSimpleName() : \"unknown instantiator\"), // Show the instantiator used\n                    \"\",\n                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                    \"\"\n            ),cce);\n        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n            // Fix the error message for InstantiationException.\n            // Original: \"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\"\n            // This was problematic as getSuperclass() can be null or less descriptive.\n            // Changed to use the simple name of the original type requested by the user.\n            throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\", e);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}