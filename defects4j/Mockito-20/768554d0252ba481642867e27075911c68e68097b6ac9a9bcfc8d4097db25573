{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        if (settings.getTypeToMock().isMemberClass() && !settings.getOuterInstance().isPresent()) {\n            throw new MockitoException(\"Outer instance is required for member class \" + settings.getTypeToMock().getName());\n        }\n        if (settings.getTypeToMock().isMemberClass() && !settings.getTypeToMock().getDeclaringClass().isInstance(settings.getOuterInstance().get())) {\n            throw new MockitoException(\"Outer instance must be of type \" + settings.getTypeToMock().getDeclaringClass().getName());\n        }\n        mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs(), settings.getOuterInstance().orElse(null));\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        if (settings.getDefaultAnswer() == CALLS_REAL_METHODS) {\n            // Ensure real methods are called when the default answer is CALLS_REAL_METHODS\n            handler.setAnswer(new CallsRealMethods());\n        }\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'. \" +\n                \"Please ensure that the class has a 0-arg constructor or provide constructor arguments.\", e);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}