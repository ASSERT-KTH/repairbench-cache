{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces());\n    T mockInstance = null;\n    try {\n        mockInstance = classInstantiator.instantiate(mockedProxyType);\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ), cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        if (e.getCause() instanceof java.lang.InstantiationException) {\n            java.lang.InstantiationException cause = (java.lang.InstantiationException) e.getCause();\n            if (cause.getCause() != null && cause.getCause() instanceof java.lang.NoSuchMethodError) {\n                throw new MockitoException(\"Unable to create mock instance of type '\" \n                        + mockedProxyType.getSuperclass().getSimpleName() \n                        + \"'\", e);\n            }\n        }\n        Constructor<?> constructor = findSingleArgConstructor(mockedProxyType);\n        if (constructor != null) {\n            if (constructor.getParameterCount() == 1 && constructor.getParameters()[0].getType().equals(settings.getEnclosingClass())) {\n                try {\n                    return constructor.newInstance(settings.getOuterInstance());\n                } catch (Exception e1) {\n                    throw new MockitoException(\"Unable to create mock instance of type '\" \n                            + mockedProxyType.getSimpleName() \n                            + \"'\", e1);\n                }\n            } else {\n                throw new MockitoException(\"Unable to create mock instance of type '\"\n                        + mockedProxyType.getSimpleName()\n                        + \"'. Please ensure that the target class has a zero-arg constructor.\",\n                        e);\n            }\n        }\n        throw new MockitoException(\"Unable to create mock instance of type '\" \n                + mockedProxyType.getSuperclass().getSimpleName() \n                + \"'\", e);\n    }\n}\n\nprivate Constructor<?> findSingleArgConstructor(Class<?> type) {\n    for (Constructor<?> constructor : type.declaredConstructors) {\n        if (constructor.getParameterCount() == 1) {\n            return constructor;\n        }\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}