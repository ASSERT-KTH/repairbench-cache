{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        // Use the instantiator, but if useConstructor is requested, pass the arguments if present.\n        if (settings.isUsingConstructor()) {\n            Object outerClassInstance = settings.getOuterClassInstance();\n            Object[] constructorArgs = settings.getConstructorArgs();\n            if (outerClassInstance != null && constructorArgs != null) {\n                // Handle inner class with explicit outer instance and constructor args\n                Object[] argsWithOuter = new Object[constructorArgs.length + 1];\n                argsWithOuter[0] = outerClassInstance;\n                System.arraycopy(constructorArgs, 0, argsWithOuter, 1, constructorArgs.length);\n                mockInstance = classInstantiator.instantiate(mockedProxyType, argsWithOuter);\n            } else if (outerClassInstance != null) {\n                // Handle inner class with outer instance and no additional args\n                mockInstance = classInstantiator.instantiate(mockedProxyType, outerClassInstance);\n            } else if (constructorArgs != null) {\n                // Handle explicit constructor args\n                mockInstance = classInstantiator.instantiate(mockedProxyType, constructorArgs);\n            } else {\n                // Try zero-arg constructor\n                mockInstance = classInstantiator.instantiate(mockedProxyType);\n            }\n        } else {\n            // Default: no constructor injection\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ),cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        String message = \"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\";\n        if (e.getCause() != null && e.getCause().getMessage() != null) {\n            message += \"\\nCaused by: \" + e.getCause().getMessage();\n        }\n        throw new MockitoException(message, e.getCause());\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}