{
    "generation": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    T mockInstance = null;\n    try {\n        boolean withConstructor = settings.isUsingConstructor();\n        Object outerClassInstance = settings.getOuterClassInstance();\n        // Try to instantiate with constructor if requested, else fallback to no-arg\n        if (withConstructor) {\n            Object[] constructorArgs = settings.getConstructorArgs();\n            if (outerClassInstance != null) {\n                // For inner classes, outerClassInstance must be the first constructor arg\n                Object[] argsWithOuter = constructorArgs != null\n                        ? new Object[constructorArgs.length + 1]\n                        : new Object[1];\n                argsWithOuter[0] = outerClassInstance;\n                if (constructorArgs != null) {\n                    System.arraycopy(constructorArgs, 0, argsWithOuter, 1, constructorArgs.length);\n                }\n                mockInstance = classInstantiator.instantiate(mockedProxyType, argsWithOuter);\n            } else {\n                if (constructorArgs == null) {\n                    // Try 0-arg constructor\n                    mockInstance = classInstantiator.instantiate(mockedProxyType);\n                } else {\n                    mockInstance = classInstantiator.instantiate(mockedProxyType, constructorArgs);\n                }\n            }\n        } else {\n            mockInstance = classInstantiator.instantiate(mockedProxyType);\n        }\n        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n        return ensureMockIsAssignableToMockedType(settings, mockInstance);\n    } catch (ClassCastException cce) {\n        throw new MockitoException(join(\n                \"ClassCastException occurred while creating the mockito mock :\",\n                \"  class to mock : \" + describeClass(mockedProxyType),\n                \"  created class : \" + describeClass(settings.getTypeToMock()),\n                \"  proxy instance class : \" + describeClass(mockInstance),\n                \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                \"\",\n                \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                \"\"\n        ),cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        Throwable cause = e.getCause();\n        if (settings.isUsingConstructor() && cause != null) {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", cause);\n        } else {\n            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}