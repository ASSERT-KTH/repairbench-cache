{
    "generation": "    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n        }\n        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n                settings.getTypeToMock(),\n                settings.getExtraInterfaces()\n        );\n        T mockInstance = null;\n        try {\n            final org.mockito.internal.creation.instance.ClassInstantiator actualInstantiator;\n            if (settings.isUsingConstructor()) {\n                // If the settings require using a constructor, use ConstructorInstantiator.\n                // This instantiator can handle specific constructor arguments and outer instances for inner classes.\n                actualInstantiator = new org.mockito.internal.creation.instance.ConstructorInstantiator(settings.getOuterInstance(), settings.getConstructorArgs());\n            } else {\n                // Otherwise, use the default class instantiator (e.g., ObjenesisClassInstantiator),\n                // which bypasses constructors.\n                actualInstantiator = classInstantiator; // This is the field initialized in ByteBuddyMockMaker\n            }\n\n            mockInstance = actualInstantiator.instantiate(mockedProxyType);\n\n            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n\n            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n        } catch (ClassCastException cce) {\n            throw new MockitoException(join(\n                    \"ClassCastException occurred while creating the mockito mock :\",\n                    \"  class to mock : \" + describeClass(mockedProxyType),\n                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n                    \"  proxy instance class : \" + describeClass(mockInstance),\n                    \"  instance creation by : \" + actualInstantiator.getClass().getSimpleName(), // Use actualInstantiator for error message\n                    \"\",\n                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                    \"\"\n            ),cce);\n        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n            // The error message should refer to the type the user intended to mock,\n            // not necessarily the superclass of the generated proxy.\n            throw new MockitoException(\"Unable to create mock instance of type '\" + settings.getTypeToMock().getSimpleName() + \"'\", e);\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}