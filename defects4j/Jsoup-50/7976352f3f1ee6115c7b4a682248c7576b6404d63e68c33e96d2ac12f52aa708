{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Check for BOM first\n    boolean hasBOM = false;\n    String bomCharset = null;\n    if (byteData.remaining() >= 2) {\n        byte[] bomBytes = new byte[4];\n        byteData.get(bomBytes, 0, 2);\n        byteData.rewind();\n        if (bomBytes[0] == (byte) 0xFE && bomBytes[1] == (byte) 0xFF) {\n            hasBOM = true;\n            bomCharset = \"UTF-16BE\";\n        } else if (bomBytes[0] == (byte) 0xFF && bomBytes[1] == (byte) 0xFE) {\n            hasBOM = true;\n            bomCharset = \"UTF-16LE\";\n        } else if (byteData.remaining() >= 4) {\n            byte[] bom4Bytes = new byte[4];\n            byteData.get(bom4Bytes, 0, 4);\n            byteData.rewind();\n            if (bom4Bytes[0] == 0x00 && bom4Bytes[1] == 0x00 && bom4Bytes[2] == (byte) 0xFE && bom4Bytes[3] == (byte) 0xFF) {\n                hasBOM = true;\n                bomCharset = \"UTF-32BE\";\n            } else if (bom4Bytes[0] == (byte) 0xFF && bom4Bytes[1] == (byte) 0xFE && bom4Bytes[2] == 0x00 && bom4Bytes[3] == 0x00) {\n                hasBOM = true;\n                bomCharset = \"UTF-32LE\";\n            }\n        }\n    }\n\n    if (hasBOM) {\n        charsetName = bomCharset;\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        // Strip BOM from start of content\n        if (docData.length() > 0 && docData.codePointAt(0) == UNICODE_BOM) {\n            docData = docData.substring(1);\n        }\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n        return doc;\n    }\n\n    // Original logic for handling without BOM\n    if (charsetName == null) {\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}