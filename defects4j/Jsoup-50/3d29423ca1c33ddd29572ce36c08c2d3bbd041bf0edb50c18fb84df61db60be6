{
    "generation": "    // todo - this is getting gnarly. needs a rewrite.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // look for BOM - overrides any other header or input\n        Charset charset = null;\n        if (charsetName != null) {\n            try {\n                charset = Charset.forName(charsetName);\n            } catch (IllegalCharsetNameException e) {\n                // if specified charset is not supported, try default\n                charset = Charset.forName(defaultCharset);\n            }\n        }\n\n\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            charset = Charset.forName(defaultCharset);\n            docData = charset.decode(byteData).toString();\n            byteData.rewind(); // Rewind the buffer after decoding\n\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    try {\n                        charset = Charset.forName(foundCharset);\n                    } catch (IllegalCharsetNameException e) {\n                        // if specified charset is not supported, try default\n                        charset = Charset.forName(defaultCharset);\n                    }\n                    byteData.rewind();\n                    docData = charset.decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else { // specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = charset.decode(byteData).toString();\n            byteData.rewind(); // Reset buffer position for BOM check.\n        }\n\n        // Look for BOM *after* handling the charset. This is important because the charset\n        // declaration may override a detected BOM.\n        byteData.rewind();\n        if (byteData.remaining() >= 2) {\n            byteData.mark();\n            int bom1 = byteData.get() & 0xFF;\n            int bom2 = byteData.get() & 0xFF;\n\n            if (bom1 == 0xFE && bom2 == 0xFF) {\n                charsetName = \"UTF-16BE\";\n                charset = Charset.forName(\"UTF-16BE\");\n                byteData.rewind();\n                byteData.get();\n                byteData.get();\n                docData = charset.decode(byteData).toString();\n                doc = null;\n            } else if (bom1 == 0xFF && bom2 == 0xFE) {\n                charsetName = \"UTF-16LE\";\n                charset = Charset.forName(\"UTF-16LE\");\n                byteData.rewind();\n                byteData.get();\n                byteData.get();\n                docData = charset.decode(byteData).toString();\n                doc = null;\n            } else if (byteData.remaining() >= 2) {\n                byteData.reset();\n                int bom3 = byteData.get() & 0xFF;\n                int bom4 = byteData.get() & 0xFF;\n                int bom5 = byteData.get() & 0xFF;\n                int bom6 = byteData.get() & 0xFF;\n\n\n                if (bom1 == 0x00 && bom2 == 0x00 && bom3 == 0xFE && bom4 == 0xFF) {\n                    charsetName = \"UTF-32BE\";\n                    charset = Charset.forName(\"UTF-32BE\");\n                    byteData.rewind();\n                    byteData.get();\n                    byteData.get();\n                    byteData.get();\n                    byteData.get();\n\n                    docData = charset.decode(byteData).toString();\n                    doc = null;\n\n\n                } else if (bom1 == 0xFF && bom2 == 0xFE && bom3 == 0x00 && bom4 == 0x00) {\n\n                    charsetName = \"UTF-32LE\";\n                    charset = Charset.forName(\"UTF-32LE\");\n                    byteData.rewind();\n                    byteData.get();\n                    byteData.get();\n                    byteData.get();\n                    byteData.get();\n\n                    docData = charset.decode(byteData).toString();\n                    doc = null;\n                } else {\n                    byteData.reset();\n\n                }\n\n\n            } else {\n                byteData.reset();\n            }\n        }\n\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            if (charsetName != null) {\n                doc.outputSettings().charset(charsetName);\n            } else {\n                doc.outputSettings().charset(defaultCharset);\n            }\n\n        }\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}