{
    "generation": "    // todo - this is getting gnarly. needs a rewrite.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        final int initialByteBufferPosition = byteData.position(); // Save original buffer position\n\n        // Determine the charset to use for parsing.\n        // It prioritizes: 1. Provided charsetName, 2. BOM, 3. Meta tag, 4. Default charset.\n\n        // If a charsetName was explicitly provided, use it directly.\n        if (charsetName != null) {\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        } else { // charsetName was null, so we need to auto-detect.\n\n            String detectedCharsetFromBom = null;\n            int bomBytesToSkip = 0;\n\n            // 1. Attempt to detect charset from Byte Order Mark (BOM).\n            // This must be done on the raw byteData before any decoding.\n            // Check for UTF-8 BOM: EF BB BF\n            if (byteData.remaining() >= 3 && byteData.get(initialByteBufferPosition) == (byte) 0xEF && byteData.get(initialByteBufferPosition + 1) == (byte) 0xBB && byteData.get(initialByteBufferPosition + 2) == (byte) 0xBF) {\n                detectedCharsetFromBom = defaultCharset; // defaultCharset is typically UTF-8\n                bomBytesToSkip = 3;\n            } \n            // Check for UTF-16BE BOM: FE FF\n            else if (byteData.remaining() >= 2 && byteData.get(initialByteBufferPosition) == (byte) 0xFE && byteData.get(initialByteBufferPosition + 1) == (byte) 0xFF) {\n                detectedCharsetFromBom = \"UTF-16BE\";\n                bomBytesToSkip = 2;\n            }\n            // Check for UTF-16LE BOM: FF FE\n            else if (byteData.remaining() >= 2 && byteData.get(initialByteBufferPosition) == (byte) 0xFF && byteData.get(initialByteBufferPosition + 1) == (byte) 0xFE) {\n                detectedCharsetFromBom = \"UTF-16LE\";\n                bomBytesToSkip = 2;\n            }\n            // Check for UTF-32BE BOM: 00 00 FE FF\n            else if (byteData.remaining() >= 4 && byteData.get(initialByteBufferPosition) == (byte) 0x00 && byteData.get(initialByteBufferPosition + 1) == (byte) 0x00 && byteData.get(initialByteBufferPosition + 2) == (byte) 0xFE && byteData.get(initialByteBufferPosition + 3) == (byte) 0xFF) {\n                detectedCharsetFromBom = \"UTF-32BE\";\n                bomBytesToSkip = 4;\n            }\n            // Check for UTF-32LE BOM: FF FE 00 00\n            else if (byteData.remaining() >= 4 && byteData.get(initialByteBufferPosition) == (byte) 0xFF && byteData.get(initialByteBufferPosition + 1) == (byte) 0xFE && byteData.get(initialByteBufferPosition + 2) == (byte) 0x00 && byteData.get(initialByteBufferPosition + 3) == (byte) 0x00) {\n                detectedCharsetFromBom = \"UTF-32LE\";\n                bomBytesToSkip = 4;\n            }\n\n            // Adjust ByteBuffer position past the detected BOM bytes.\n            byteData.position(initialByteBufferPosition + bomBytesToSkip);\n\n            if (detectedCharsetFromBom != null) {\n                // If BOM detected, use its charset and skip meta tag detection.\n                charsetName = detectedCharsetFromBom;\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n            } else {\n                // 2. No BOM found, so attempt to detect from meta tag.\n                // First, safely parse as defaultCharset (e.g., UTF-8) to find the meta tag.\n                byteData.position(initialByteBufferPosition); // Rewind for this first pass as defaultCharset\n                docData = Charset.forName(defaultCharset).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri); // Parse to find meta tag\n                \n                Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n                String foundCharsetFromMeta = null;\n                if (meta != null) {\n                    if (meta.hasAttr(\"http-equiv\")) {\n                        foundCharsetFromMeta = getCharsetFromContentType(meta.attr(\"content\"));\n                    }\n                    if (foundCharsetFromMeta == null && meta.hasAttr(\"charset\")) {\n                        try {\n                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n                                foundCharsetFromMeta = meta.attr(\"charset\");\n                            }\n                        } catch (IllegalCharsetNameException e) {\n                            foundCharsetFromMeta = null; // ignore, defaultCharset will be used\n                        }\n                    }\n                }\n\n                // If a different charset is found in meta, re-decode the byte data.\n                if (foundCharsetFromMeta != null && foundCharsetFromMeta.length() != 0 && !foundCharsetFromMeta.equalsIgnoreCase(defaultCharset)) {\n                    foundCharsetFromMeta = foundCharsetFromMeta.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharsetFromMeta; // Use this newly found charset.\n                    byteData.position(initialByteBufferPosition); // Rewind fully for correct re-decode from original position.\n                    docData = Charset.forName(charsetName).decode(byteData).toString();\n                    doc = null; // Reset doc, as it needs to be re-parsed with the correct charset.\n                } else {\n                    // No meta charset found, or it's the same as defaultCharset. Stick with defaultCharset.\n                    charsetName = defaultCharset;\n                }\n            }\n        }\n        \n        // Final parsing if document not yet parsed (or re-parsed after meta charset detection).\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n        }\n        \n        // Ensure the document's output settings reflect the final determined charset.\n        doc.outputSettings().charset(charsetName);\n        \n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}