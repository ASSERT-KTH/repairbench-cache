{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // make a working copy of the bytes\n    ByteBuffer data = byteData.duplicate();\n    data.order(byteData.order());\n    data.rewind();\n\n    // 1) Look for BOM - overrides any other header or input\n    String bomCharset = null;\n    int bomLength = 0;\n    int limit = data.limit();\n\n    // UTF-32BE / UTF-32LE\n    if (limit >= 4) {\n        int b0 = data.get(0) & 0xFF, b1 = data.get(1) & 0xFF,\n            b2 = data.get(2) & 0xFF, b3 = data.get(3) & 0xFF;\n        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {\n            bomCharset = \"UTF-32BE\"; bomLength = 4;\n        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {\n            bomCharset = \"UTF-32LE\"; bomLength = 4;\n        }\n    }\n    // UTF-8 BOM\n    if (bomCharset == null && limit >= 3) {\n        int b0 = data.get(0) & 0xFF, b1 = data.get(1) & 0xFF, b2 = data.get(2) & 0xFF;\n        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {\n            bomCharset = \"UTF-8\"; bomLength = 3;\n        }\n    }\n    // UTF-16BE / UTF-16LE\n    if (bomCharset == null && limit >= 2) {\n        int b0 = data.get(0) & 0xFF, b1 = data.get(1) & 0xFF;\n        if (b0 == 0xFE && b1 == 0xFF) {\n            bomCharset = \"UTF-16BE\"; bomLength = 2;\n        } else if (b0 == 0xFF && b1 == 0xFE) {\n            bomCharset = \"UTF-16LE\"; bomLength = 2;\n        }\n    }\n\n    if (bomCharset != null) {\n        // decode skipping the BOM bytes\n        data.position(bomLength);\n        String docData = Charset.forName(bomCharset).decode(data).toString();\n        Document doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(bomCharset);\n        return doc;\n    }\n\n    // 2) No BOM: fall back to user\u2010supplied charset or meta\u2010tag detection\n    String docData;\n    Document doc = null;\n\n    if (charsetName == null) {\n        // safe parse as UTF-8 to look for a <meta> charset\n        data.rewind();\n        docData = Charset.forName(defaultCharset).decode(data).toString();\n        doc = parser.parseInput(docData, baseUri);\n\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    String cs = meta.attr(\"charset\");\n                    if (Charset.isSupported(cs)) {\n                        foundCharset = cs;\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null\n                && foundCharset.length() != 0\n                && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                data.rewind();\n                docData = Charset.forName(foundCharset).decode(data).toString();\n                doc = null;\n            }\n        }\n\n    } else {\n        Validate.notEmpty(charsetName,\n            \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        data.rewind();\n        docData = Charset.forName(charsetName).decode(data).toString();\n    }\n\n    // 3) Strip stray BOM char if present\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        data.rewind();\n        docData = Charset.forName(defaultCharset).decode(data).toString();\n        docData = docData.substring(1);\n        charsetName = defaultCharset;\n        doc = null;\n    }\n\n    // 4) Final parse\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}