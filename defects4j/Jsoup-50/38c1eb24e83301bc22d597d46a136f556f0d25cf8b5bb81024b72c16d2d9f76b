{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // First check for BOM (Byte Order Mark) which overrides other encoding detection\n    byteData.mark();\n    try {\n        // Check for UTF-8 BOM\n        if (byteData.remaining() >= 3) {\n            byte[] bom = new byte[3];\n            byteData.get(bom);\n            if (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {\n                charsetName = \"UTF-8\";\n                // Skip the BOM\n                byteData = sliceAfterBOM(byteData, 3);\n            } else {\n                byteData.reset();\n            }\n        }\n\n        // Check for UTF-16 BE\n        if (byteData.remaining() >= 2) {\n            byte[] bom = new byte[2];\n            byteData.get(bom);\n            if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {\n                charsetName = \"UTF-16BE\";\n                byteData = sliceAfterBOM(byteData, 2);\n            } else {\n                byteData.reset();\n            }\n        }\n\n        // Check for UTF-16 LE\n        if (byteData.remaining() >= 2) {\n            byte[] bom = new byte[2];\n            byteData.get(bom);\n            if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {\n                charsetName = \"UTF-16LE\";\n                byteData = sliceAfterBOM(byteData, 2);\n            } else {\n                byteData.reset();\n            }\n        }\n\n        // Check for UTF-32 BE\n        if (byteData.remaining() >= 4) {\n            byte[] bom = new byte[4];\n            byteData.get(bom);\n            if (bom[0] == (byte)0x00 && bom[1] == (byte)0x00 && bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {\n                charsetName = \"UTF-32BE\";\n                byteData = sliceAfterBOM(byteData, 4);\n            } else {\n                byteData.reset();\n            }\n        }\n\n        // Check for UTF-32 LE\n        if (byteData.remaining() >= 4) {\n            byte[] bom = new byte[4];\n            byteData.get(bom);\n            if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE && bom[2] == (byte)0x00 && bom[3] == (byte)0x00) {\n                charsetName = \"UTF-32LE\";\n                byteData = sliceAfterBOM(byteData, 4);\n            } else {\n                byteData.reset();\n            }\n        }\n    } catch (BufferUnderflowException e) {\n        byteData.reset();\n    }\n\n    // Now handle charset detection and parsing\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // Handle UTF-8 BOM if present in the decoded text\n    if (docData != null && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        docData = docData.substring(1);\n        charsetName = defaultCharset;\n        doc = null;\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static ByteBuffer sliceAfterBOM(ByteBuffer byteData, int bomLength) {\n    byte[] remaining = new byte[byteData.remaining()];\n    byteData.get(remaining);\n    ByteBuffer newBuffer = ByteBuffer.wrap(remaining, bomLength, remaining.length - bomLength);\n    return newBuffer;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}