{
    "generation": "    // todo - this is getting gnarly. needs a rewrite.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // Check for BOM first (before any other processing)\n        byteData.mark();\n        String bomCharset = detectCharsetFromBom(byteData);\n        if (bomCharset != null) {\n            charsetName = bomCharset;\n            byteData.reset(); // rewind to start after BOM detection\n        } else {\n            byteData.reset();\n        }\n\n        // look for BOM - overrides any other header or input\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else { // specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        // Handle BOM in the actual content (UTF-8 BOM case)\n        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n            byteData.rewind();\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            docData = docData.substring(1);\n            charsetName = defaultCharset;\n            doc = null;\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }\n\n    private static String detectCharsetFromBom(ByteBuffer byteData) {\n        if (!byteData.hasRemaining()) {\n            return null;\n        }\n\n        // Check for UTF-8 BOM\n        if (byteData.remaining() >= 3) {\n            byte[] bom = new byte[3];\n            byteData.get(bom);\n            if (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {\n                return defaultCharset; // UTF-8 BOM\n            }\n            byteData.position(byteData.position() - 3); // rewind\n        }\n\n        // Check for UTF-16 BE BOM\n        if (byteData.remaining() >= 2) {\n            byte[] bom = new byte[2];\n            byteData.get(bom);\n            if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {\n                return \"UTF-16BE\";\n            }\n            byteData.position(byteData.position() - 2); // rewind\n        }\n\n        // Check for UTF-16 LE BOM\n        if (byteData.remaining() >= 2) {\n            byte[] bom = new byte[2];\n            byteData.get(bom);\n            if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {\n                return \"UTF-16LE\";\n            }\n            byteData.position(byteData.position() - 2); // rewind\n        }\n\n        // Check for UTF-32 BE BOM\n        if (byteData.remaining() >= 4) {\n            byte[] bom = new byte[4];\n            byteData.get(bom);\n            if (bom[0] == (byte)0x00 && bom[1] == (byte)0x00 && bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {\n                return \"UTF-32BE\";\n            }\n            byteData.position(byteData.position() - 4); // rewind\n        }\n\n        // Check for UTF-32 LE BOM\n        if (byteData.remaining() >= 4) {\n            byte[] bom = new byte[4];\n            byteData.get(bom);\n            if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE && bom[2] == (byte)0x00 && bom[3] == (byte)0x00) {\n                return \"UTF-32LE\";\n            }\n            byteData.position(byteData.position() - 4); // rewind\n        }\n\n        return null;\n    }\n\n    private static final char UNICODE_BOM = '\\uFEFF';\n    private static final String defaultCharset = \"UTF-8\";",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}