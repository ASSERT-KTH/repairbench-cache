{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Determine charset from BOM if available\n    Charset detectedCharset = detectCharsetFromBOM(byteData);\n    if (detectedCharset != null) {\n        docData = detectedCharset.decode(byteData).toString();\n        charsetName = detectedCharset.name();\n    } else {\n        // No BOM found, default to UTF-8\n        docData = Charset.forName(Charsets.UTF_8).decode(byteData).toString();\n        if (charsetName == null) {\n            charsetName = Charsets.UTF_8;\n        }\n    }\n\n    // Check for charset in meta tags if charsetName was null\n    if (charsetName == null) {\n        Element meta = getCharsetMeta(docData);  // Implement getCharsetMeta to extract from HTML\n        if (meta != null) {\n            String metaCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            if (metaCharset == null && meta.hasAttr(\"charset\")) {\n                metaCharset = meta.attr(\"charset\");\n            }\n            if (metaCharset != null) {\n                charsetName = metaCharset;\n            }\n        }\n    }\n\n    // If charset determined from BOM or meta, proceed\n    if (charsetName != null && !charsetName.isEmpty()) {\n        byteData.rewind();\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n    } else {\n        // Default to UTF-8 if still no charset found\n        docData = Charset.forName(Charsets.UTF_8).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(Charsets.UTF_8);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}