{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // Detect a BOM (Byte Order Mark) if present. A BOM always overrides any provided charset.\n    byteData.mark();\n    String bomCharset = null;\n    if (byteData.remaining() >= 4) {\n        int b1 = byteData.get() & 0xff;\n        int b2 = byteData.get() & 0xff;\n        int b3 = byteData.get() & 0xff;\n        int b4 = byteData.get() & 0xff;\n        if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) {\n            bomCharset = \"UTF-32BE\";\n        } else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) {\n            bomCharset = \"UTF-32LE\";\n        }\n    }\n    byteData.reset();\n    if (bomCharset == null && byteData.remaining() >= 2) {\n        byteData.mark();\n        int b1 = byteData.get() & 0xff;\n        int b2 = byteData.get() & 0xff;\n        if (b1 == 0xFE && b2 == 0xFF) {\n            bomCharset = \"UTF-16BE\";\n        } else if (b1 == 0xFF && b2 == 0xFE) {\n            bomCharset = \"UTF-16LE\";\n        }\n        byteData.reset();\n    }\n    if (bomCharset == null && byteData.remaining() >= 3) {\n        byteData.mark();\n        int b1 = byteData.get() & 0xff;\n        int b2 = byteData.get() & 0xff;\n        int b3 = byteData.get() & 0xff;\n        if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {\n            bomCharset = \"UTF-8\";\n        }\n        byteData.reset();\n    }\n    if (bomCharset != null) {\n        int skip = 0;\n        if (\"UTF-8\".equals(bomCharset)) {\n            skip = 3;\n        } else if (\"UTF-16BE\".equals(bomCharset) || \"UTF-16LE\".equals(bomCharset)) {\n            skip = 2;\n        } else if (\"UTF-32BE\".equals(bomCharset) || \"UTF-32LE\".equals(bomCharset)) {\n            skip = 4;\n        }\n        // Advance past the BOM bytes.\n        byteData.position(byteData.position() + skip);\n        charsetName = bomCharset;\n    }\n    \n    String docData;\n    Document doc = null;\n    \n    if (charsetName == null) {\n        // Fall back to the default charset (typically \"UTF-8\") and try to detect charset from the meta tags.\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\"))\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\")))\n                        foundCharset = meta.attr(\"charset\");\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;  // will reparse below\n            }\n        }\n    } else {\n        // A charset was either specified or determined by a BOM.\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    \n    // Remove any stray BOM character (U+FEFF) from the beginning of the string.\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n    }\n    \n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}