{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // First, look for a BOM in the raw bytes \u2013 if one is found, it overrides any supplied charset or meta tag.\n    // Create a duplicate so as not to disturb the caller\u2019s position.\n    ByteBuffer bb = byteData.duplicate();\n    String bomCharset = null;\n    int bomLength = 0;\n    if (bb.remaining() >= 4) {\n        byte b0 = bb.get(bb.position());\n        byte b1 = bb.get(bb.position() + 1);\n        byte b2 = bb.get(bb.position() + 2);\n        byte b3 = bb.get(bb.position() + 3);\n        if (b0 == 0x00 && b1 == 0x00 && b2 == (byte) 0xFE && b3 == (byte) 0xFF) {\n            bomCharset = \"UTF-32BE\";\n            bomLength = 4;\n        } else if (b0 == (byte) 0xFF && b1 == (byte) 0xFE && b2 == 0x00 && b3 == 0x00) {\n            bomCharset = \"UTF-32LE\";\n            bomLength = 4;\n        }\n    }\n    if (bomCharset == null && bb.remaining() >= 3) {\n        byte b0 = bb.get(bb.position());\n        byte b1 = bb.get(bb.position() + 1);\n        byte b2 = bb.get(bb.position() + 2);\n        if (b0 == (byte) 0xEF && b1 == (byte) 0xBB && b2 == (byte) 0xBF) {\n            bomCharset = \"UTF-8\";\n            bomLength = 3;\n        }\n    }\n    if (bomCharset == null && bb.remaining() >= 2) {\n        byte b0 = bb.get(bb.position());\n        byte b1 = bb.get(bb.position() + 1);\n        if (b0 == (byte) 0xFE && b1 == (byte) 0xFF) {\n            bomCharset = \"UTF-16BE\";\n            bomLength = 2;\n        } else if (b0 == (byte) 0xFF && b1 == (byte) 0xFE) {\n            bomCharset = \"UTF-16LE\";\n            bomLength = 2;\n        }\n    }\n    if (bomCharset != null) {\n        // A BOM was found: use its charset and skip BOM bytes.\n        charsetName = bomCharset;\n        byteData.position(byteData.position() + bomLength);\n        String docData = Charset.forName(charsetName).decode(byteData).toString();\n        Document doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n        return doc;\n    }\n\n    // No BOM detected. Now, if no charset was provided, decode using our default and look for\n    // a meta charset tag.\n    String docData;\n    Document doc = null;\n    if (charsetName == null) {\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\"))\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\")))\n                        foundCharset = meta.attr(\"charset\");\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null; // force re-parse with the newly determined charset\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    \n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}