{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // Check for BOMs and override charsetName\n        byteData.mark();\n        if (byteData.remaining() >= 4) {\n            byte b1 = byteData.get();\n            byte b2 = byteData.get();\n            byte b3 = byteData.get();\n            byte b4 = byteData.get();\n\n            // UTF-32 BE BOM: 00 00 FE FF\n            if ((b1 == 0x00) && (b2 == 0x00) && (b3 == (byte) 0xFE) && (b4 == (byte) 0xFF)) {\n                charsetName = \"UTF-32BE\";\n            }\n            // UTF-32 LE BOM: FF FE 00 00\n            else if ((b1 == (byte) 0xFF) && (b2 == (byte) 0xFE) && (b3 == 0x00) && (b4 == 0x00)) {\n                charsetName = \"UTF-32LE\";\n            }\n            // UTF-8 BOM: EF BB BF\n            else if ((b1 == (byte) 0xEF) && (b2 == (byte) 0xBB) && (b3 == (byte) 0xBF)) {\n                charsetName = \"UTF-8\";\n                byteData.reset();\n                byteData.position(byteData.position() + 3);\n            }\n            // UTF-16 BE BOM: FE FF\n            else if ((b1 == (byte) 0xFE) && (b2 == (byte) 0xFF)) {\n                charsetName = \"UTF-16BE\";\n                byteData.reset();\n                byteData.position(byteData.position() + 2);\n            }\n            // UTF-16 LE BOM: FF FE\n            else if ((b1 == (byte) 0xFF) && (b2 == (byte) 0xFE)) {\n                charsetName = \"UTF-16LE\";\n                byteData.reset();\n                byteData.position(byteData.position() + 2);\n            }\n            else {\n                byteData.reset();\n            }\n        } else {\n            byteData.reset();\n        }\n\n        if (charsetName == null) { // determine from meta or use default\n            docData = Charset.forName(defaultCharset).decode(byteData.slice()).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(charsetName).decode(byteData.slice()).toString();\n                    doc = null;\n                }\n            }\n        } else {\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            byteData.rewind();\n            docData = Charset.forName(charsetName).decode(byteData.slice()).toString();\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}