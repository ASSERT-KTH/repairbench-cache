{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // Use UTF-8 as the fallback default.\n    String defaultCharset = \"UTF-8\";\n    boolean userCharsetSpecified = charsetName != null;\n\n    // --- BOM detection ---\n    String bomCharset = null;\n    int bomLength = 0;\n    int pos = byteData.position();\n    int remaining = byteData.remaining();\n\n    // Check for 4-byte BOMs (UTF-32)\n    if (remaining >= 4) {\n        int b0 = byteData.get(pos) & 0xff;\n        int b1 = byteData.get(pos + 1) & 0xff;\n        int b2 = byteData.get(pos + 2) & 0xff;\n        int b3 = byteData.get(pos + 3) & 0xff;\n        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {\n            bomCharset = \"UTF-32BE\";\n            bomLength = 4;\n        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {\n            bomCharset = \"UTF-32LE\";\n            bomLength = 4;\n        }\n    }\n\n    // Check for 3-byte BOM (UTF-8)\n    if (bomCharset == null && remaining >= 3) {\n        int b0 = byteData.get(pos) & 0xff;\n        int b1 = byteData.get(pos + 1) & 0xff;\n        int b2 = byteData.get(pos + 2) & 0xff;\n        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {\n            bomCharset = \"UTF-8\";\n            bomLength = 3;\n        }\n    }\n\n    // Check for 2-byte BOMs (UTF-16)\n    if (bomCharset == null && remaining >= 2) {\n        int b0 = byteData.get(pos) & 0xff;\n        int b1 = byteData.get(pos + 1) & 0xff;\n        if (b0 == 0xFE && b1 == 0xFF) {\n            bomCharset = \"UTF-16BE\";\n            bomLength = 2;\n        } else if (b0 == 0xFF && b1 == 0xFE) {\n            bomCharset = \"UTF-16LE\";\n            bomLength = 2;\n        }\n    }\n\n    // If a BOM was detected, advance the ByteBuffer position past the BOM.\n    if (bomLength > 0) {\n        byteData.position(pos + bomLength);\n    }\n\n    // If a BOM charset was found, it takes precedence.\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n    } else if (!userCharsetSpecified) {\n        charsetName = defaultCharset;\n    }\n\n    // Decode the byte data using the determined charset.\n    String docData = Charset.forName(charsetName).decode(byteData).toString();\n    Document doc = parser.parseInput(docData, baseUri);\n\n    // Only if no user charset was provided and no BOM was detected do we look for a meta tag override.\n    if (!userCharsetSpecified && bomCharset == null) {\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 \n                    && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind(); // Rewind to start the read afresh.\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri);\n            }\n        }\n    }\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}