{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Look for BOM - overrides any other header or input\n    if (charsetName == null) {\n        charsetName = defaultCharset;\n    }\n\n    boolean hasBom = false;\n    String bomCharset = null;\n    final byte[] bytes = byteData.array();\n    if (bytes.length >= 2) {\n        if (bytes[0] == (byte) 0xFE && bytes[1] == (byte) 0xFF) {\n            // UTF-16BE BOM\n            hasBom = true;\n            bomCharset = \"UTF-16BE\";\n        } else if (bytes[0] == (byte) 0xFF && bytes[1] == (byte) 0xFE) {\n            // UTF-16LE BOM\n            hasBom = true;\n            bomCharset = \"UTF-16LE\";\n        } else if (bytes.length >= 4 && bytes[0] == (byte) 0x00 && bytes[1] == (byte) 0x00 && bytes[2] == (byte) 0xFE && bytes[3] == (byte) 0xFF) {\n            // UTF-32BE BOM\n            hasBom = true;\n            bomCharset = \"UTF-32BE\";\n        } else if (bytes.length >= 4 && bytes[0] == (byte) 0xFF && bytes[1] == (byte) 0xFE && bytes[2] == (byte) 0x00 && bytes[3] == (byte) 0x00) {\n            // UTF-32LE BOM\n            hasBom = true;\n            bomCharset = \"UTF-32LE\";\n        }\n    }\n\n    if (hasBom) {\n        byteData.rewind();\n        charsetName = bomCharset;\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n    } else if (charsetName == null) {\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = defaultCharset;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.equals(defaultCharset, IgnoreCase)) {\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}