{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Detect BOM and initial charset\n    if (charsetName == null) {\n        byteData.mark();\n        if (byteData.remaining() >= 4) {\n            int b1 = byteData.get() & 0xFF;\n            int b2 = byteData.get() & 0xFF;\n            int b3 = byteData.get() & 0xFF;\n            int b4 = byteData.get() & 0xFF;\n\n            if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) {\n                charsetName = \"UTF-32BE\";\n            } else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) {\n                charsetName = \"UTF-32LE\";\n            } else if (b1 == 0xFE && b2 == 0xFF) {\n                charsetName = \"UTF-16BE\";\n                byteData.reset();\n                byteData.position(byteData.position() + 2);\n            } else if (b1 == 0xFF && b2 == 0xFE) {\n                charsetName = \"UTF-16LE\";\n                byteData.reset();\n                byteData.position(byteData.position() + 2);\n            } else if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {\n                charsetName = \"UTF-8\";\n                byteData.reset();\n                byteData.position(byteData.position() + 3);\n            } else {\n                byteData.reset();\n                charsetName = defaultCharset;\n            }\n            if (!charsetName.startsWith(\"UTF-32\")) {\n                byteData.reset();\n            }\n        } else {\n            byteData.reset();\n            charsetName = defaultCharset;\n        }\n    }\n\n    // Apply charset from BOM or specified\n    Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n    docData = Charset.forName(charsetName).decode(byteData).toString();\n    doc = parser.parseInput(docData, baseUri);\n\n    if (charsetName.equals(defaultCharset)) {\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(charsetName)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                byteData.rewind();\n                charsetName = foundCharset;\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri);\n            }\n        }\n    }\n\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}