{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // First, check the incoming bytes for a Byte Order Mark (BOM). If one is found, it will override any\n    // provided charset or meta tag.\n    int pos = byteData.position();\n    int remaining = byteData.remaining();\n    String detectedCharset = null;\n    int bomLength = 0;\n    \n    if (remaining >= 4) {\n        // UTF-32BE: 00 00 FE FF\n        if (byteData.get(pos) == (byte) 0x00 && byteData.get(pos + 1) == (byte) 0x00 &&\n            byteData.get(pos + 2) == (byte) 0xFE && byteData.get(pos + 3) == (byte) 0xFF) {\n            detectedCharset = \"UTF-32BE\";\n            bomLength = 4;\n        }\n        // UTF-32LE: FF FE 00 00\n        else if (byteData.get(pos) == (byte) 0xFF && byteData.get(pos + 1) == (byte) 0xFE &&\n                 byteData.get(pos + 2) == (byte) 0x00 && byteData.get(pos + 3) == (byte) 0x00) {\n            detectedCharset = \"UTF-32LE\";\n            bomLength = 4;\n        }\n    }\n    if (detectedCharset == null && remaining >= 3) {\n        // UTF-8: EF BB BF\n        if (byteData.get(pos) == (byte) 0xEF && byteData.get(pos + 1) == (byte) 0xBB &&\n            byteData.get(pos + 2) == (byte) 0xBF) {\n            detectedCharset = \"UTF-8\";\n            bomLength = 3;\n        }\n    }\n    if (detectedCharset == null && remaining >= 2) {\n        // UTF-16BE: FE FF\n        if (byteData.get(pos) == (byte) 0xFE && byteData.get(pos + 1) == (byte) 0xFF) {\n            detectedCharset = \"UTF-16BE\";\n            bomLength = 2;\n        }\n        // UTF-16LE: FF FE\n        else if (byteData.get(pos) == (byte) 0xFF && byteData.get(pos + 1) == (byte) 0xFE) {\n            detectedCharset = \"UTF-16LE\";\n            bomLength = 2;\n        }\n    }\n    \n    // If a BOM was found, override the charset and skip the BOM bytes.\n    if (detectedCharset != null) {\n        charsetName = detectedCharset;\n        byteData.position(pos + bomLength);\n    }\n    \n    String docData;\n    Document doc = null;\n    \n    // If no charset is yet known, default to the defaultCharset (typically \"UTF-8\")\n    // and then allow a meta tag in the document to override later.\n    if (charsetName == null) {\n        // Use a duplicate so that the original ByteBuffer position isn\u2019t advanced.\n        ByteBuffer dup = byteData.duplicate();\n        docData = Charset.forName(defaultCharset).decode(dup).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\"))\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\")))\n                        foundCharset = meta.attr(\"charset\");\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName,\n                \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    \n    // Sometimes a BOM can slip into the decoded text (as the zero\u2010width no\u2010break space),\n    // so remove it if present.\n    if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n        docData = docData.substring(1);\n        doc = null;\n    }\n    \n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    \n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}