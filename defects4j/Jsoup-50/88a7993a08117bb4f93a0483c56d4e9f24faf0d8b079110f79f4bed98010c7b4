{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // Mark the initial position so we can rewind if needed.\n    byteData.mark();\n    String docData;\n    Document doc = null;\n    String detectedCharset = null;\n    int bomLength = 0;\n\n    // Look ahead in the byte buffer to detect a BOM.\n    int remaining = byteData.remaining();\n    if (remaining >= 4) {\n        int b1 = byteData.get(byteData.position()) & 0xff;\n        int b2 = byteData.get(byteData.position() + 1) & 0xff;\n        int b3 = byteData.get(byteData.position() + 2) & 0xff;\n        int b4 = byteData.get(byteData.position() + 3) & 0xff;\n        if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) {\n            detectedCharset = \"UTF-32BE\";\n            bomLength = 4;\n        } else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) {\n            detectedCharset = \"UTF-32LE\";\n            bomLength = 4;\n        }\n    }\n    if (detectedCharset == null && remaining >= 3) {\n        int b1 = byteData.get(byteData.position()) & 0xff;\n        int b2 = byteData.get(byteData.position() + 1) & 0xff;\n        int b3 = byteData.get(byteData.position() + 2) & 0xff;\n        if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {\n            detectedCharset = \"UTF-8\";\n            bomLength = 3;\n        }\n    }\n    if (detectedCharset == null && remaining >= 2) {\n        int b1 = byteData.get(byteData.position()) & 0xff;\n        int b2 = byteData.get(byteData.position() + 1) & 0xff;\n        if (b1 == 0xFE && b2 == 0xFF) {\n            detectedCharset = \"UTF-16BE\";\n            bomLength = 2;\n        } else if (b1 == 0xFF && b2 == 0xFE) {\n            detectedCharset = \"UTF-16LE\";\n            bomLength = 2;\n        }\n    }\n\n    // If we found a BOM, override any passed charset (or lack thereof) and skip the BOM bytes.\n    if (detectedCharset != null) {\n        charsetName = detectedCharset;\n        byteData.position(byteData.position() + bomLength);\n    } else {\n        // No BOM detected; rewind to the marked position.\n        byteData.reset();\n    }\n\n    // If no charset was specified (and no BOM forced one), decode using the default charset,\n    // then look for a meta tag to potentially change the declared charset.\n    if (charsetName == null) {\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                // Rewind and re-decode with the correct charset.\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // Remove a stray Unicode BOM character (if any) from the decoded string.\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n        doc = null;\n    }\n    \n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    \n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}