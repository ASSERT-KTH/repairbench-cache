{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    byteData.mark();\n    ByteOrderMark bom = detectCharsetFromBOM(byteData);\n    if (bom != null) {\n        charsetName = bom.charset();\n        byteData.position(bom.offset);\n    } else {\n        byteData.reset();\n    }\n\n    String docData;\n    Document doc = null;\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static ByteOrderMark detectCharsetFromBOM(ByteBuffer byteData) {\n    final int minLength = 4;\n    if (byteData.remaining() < minLength)\n        return null;\n    \n    byte[] bom = new byte[minLength];\n    byteData.get(bom, 0, minLength);\n    byteData.rewind();\n    \n    if ((bom[0] == (byte) 0xFE) && (bom[1] == (byte) 0xFF)) {\n        return new ByteOrderMark(\"UTF-16BE\", 2);\n    } else if ((bom[0] == (byte) 0xFF) && (bom[1] == (byte) 0xFE)) {\n        if ((bom[2] == (byte) 0x00) && (bom[3] == (byte) 0x00)) {\n            return new ByteOrderMark(\"UTF-32LE\", 4);\n        }\n        return new ByteOrderMark(\"UTF-16LE\", 2);\n    } else if ((bom[0] == (byte) 0x00) && (bom[1] == (byte) 0x00) &&\n               (bom[2] == (byte) 0xFE) && (bom[3] == (byte) 0xFF)) {\n        return new ByteOrderMark(\"UTF-32BE\", 4);\n    } else if ((bom[0] == (byte) 0xEF) && (bom[1] == (byte) 0xBB) && (bom[2] == (byte) 0xBF)) {\n        return new ByteOrderMark(\"UTF-8\", 3);\n    }\n    return null;\n}\n\nprivate static class ByteOrderMark {\n    private final String charset;\n    private final int offset;\n    \n    public ByteOrderMark(String charset, int offset) {\n        this.charset = charset;\n        this.offset = offset;\n    }\n    \n    public String charset() {\n        return charset;\n    }\n    \n    public int offset() {\n        return offset;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}