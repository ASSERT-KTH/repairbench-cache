{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    boolean hasBOM = false;\n    Charset detectedCharset = null;\n\n    // Determine charset from BOM if present\n    if (byteData.hasRemaining()) {\n        int firstByte = byteData.get() & 0xFF;\n        int secondByte = byteData.hasRemaining() ? byteData.get() & 0xFF : -1;\n        int thirdByte = byteData.hasRemaining() ? byteData.get() & 0xFF : -1;\n        int fourthByte = byteData.hasRemaining() ? byteData.get() & 0xFF : -1;\n\n        if (firstByte == 0xFF && secondByte == 0xFE) {\n            detectedCharset = StandardCharsets.UTF_16BE;\n            hasBOM = true;\n        } else if (firstByte == 0xFE && secondByte == 0xFF) {\n            detectedCharset = StandardCharsets.UTF_16LE;\n            hasBOM = true;\n        } else if (firstByte == 0x00 && secondByte == 0x00 && thirdByte == 0xFE && fourthByte == 0xFF) {\n            detectedCharset = Charset.forName(\"UTF-32BE\");\n            hasBOM = true;\n        } else if (firstByte == 0xFF && secondByte == 0xFE && thirdByte == 0x00 && fourthByte == 0x00) {\n            detectedCharset = Charset.forName(\"UTF-32LE\");\n            hasBOM = true;\n        } else if (firstByte == 0xEF && secondByte == 0xBB && thirdByte == 0xBF) {\n            detectedCharset = StandardCharsets.UTF_8;\n            hasBOM = true;\n        }\n\n        if (hasBOM) {\n            byteData.rewind();\n        }\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(\"UTF-8\").decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(\"UTF-8\")) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (hasBOM && detectedCharset != null) {\n        byteData.rewind();\n        docData = detectedCharset.decode(byteData).toString();\n        if (detectedCharset.equals(StandardCharsets.UTF_8)) {\n            docData = docData.substring(1); // Remove BOM for UTF-8\n        }\n        charsetName = detectedCharset.name();\n        doc = null;\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}