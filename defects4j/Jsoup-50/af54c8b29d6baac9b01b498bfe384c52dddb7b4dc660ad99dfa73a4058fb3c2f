{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // Check if BOM is present and determine charset if not provided\n        if (byteData.remaining() >= 4 && charsetName == null) {\n            byteData.mark();\n            byte b1 = byteData.get();\n            byte b2 = byteData.get();\n            byte b3 = byteData.get();\n            byte b4 = byteData.get();\n\n            // detect UTF variants with BOM\n            if ((b1 == (byte)0x00 && b2 == (byte)0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF)) { // UTF-32, big-endian\n                charsetName = \"UTF-32BE\";\n            } else if ((b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == (byte)0x00 && b4 == (byte)0x00)) { // UTF-32, little-endian\n                charsetName = \"UTF-32LE\";\n            } else if ((b1 == (byte)0xFE && b2 == (byte)0xFF)) { // UTF-16, big-endian\n                charsetName = \"UTF-16BE\";\n                byteData.reset();\n                byteData.get(); byteData.get(); // consume only BOM len 2\n            } else if ((b1 == (byte)0xFF && b2 == (byte)0xFE)) { // UTF-16, little-endian\n                charsetName = \"UTF-16LE\";\n                byteData.reset();\n                byteData.get(); byteData.get(); // consume only BOM len 2\n            } else if ((b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF)) { // UTF-8 BOM\n                charsetName = \"UTF-8\";\n                byteData.reset();\n                byteData.get(); byteData.get(); byteData.get(); // consume BOM\n            } else {\n                byteData.reset(); // no known BOM detected\n            }\n            if (charsetName != null && (charsetName.startsWith(\"UTF-32\"))) {\n                // reset + consume 4 byte BOM\n                byteData.reset();\n                byteData.get(); byteData.get(); byteData.get(); byteData.get();\n            }\n        }\n\n        if (charsetName == null) {\n            // Use defaultCharset to decode\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else {\n            // decode with provided or BOM-detected charset\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            if (charsetName != null)\n                doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}