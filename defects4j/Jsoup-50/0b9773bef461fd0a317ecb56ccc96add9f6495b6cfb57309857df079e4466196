{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // detect BOM for automatic charset detection\n    byteData.mark();\n    String bomCharset = null;\n    if (byteData.remaining() >= 4) {\n        byte b1 = byteData.get();\n        byte b2 = byteData.get();\n        byte b3 = byteData.get();\n        byte b4 = byteData.get();\n\n        // BOM detection order matters - detect 4-byte BOMs first\n        if ((b1 == (byte)0x00) && (b2 == (byte)0x00) && (b3 == (byte)0xFE) && (b4 == (byte)0xFF)) {\n            bomCharset = \"UTF-32BE\";\n        } else if ((b1 == (byte)0xFF) && (b2 == (byte)0xFE) && (b3 == (byte)0x00) && (b4 == (byte)0x00)) {\n            bomCharset = \"UTF-32LE\";\n        } else if ((b1 == (byte)0xEF) && (b2 == (byte)0xBB) && (b3 == (byte)0xBF)) {\n            byteData.position(byteData.position() - 1); // unread 4th byte\n            bomCharset = \"UTF-8\";\n        } else if ((b1 == (byte)0xFE) && (b2 == (byte)0xFF)) {\n            // UTF-16BE BOM\n            byteData.position(byteData.position() - 2); // unread 3rd and 4th bytes\n            bomCharset = \"UTF-16BE\";\n        } else if ((b1 == (byte)0xFF) && (b2 == (byte)0xFE)) {\n            // check if UTF-16LE or UTF-32LE BOM\n            if ((b3 == (byte)0x00) && (b4 == (byte)0x00)) {\n                bomCharset = \"UTF-32LE\";\n            } else {\n                byteData.position(byteData.position() - 2); // unread 3rd and 4th bytes\n                bomCharset = \"UTF-16LE\";\n            }\n        } else {\n            byteData.reset();\n        }\n        // reset will set buffer position back if no BOM found\n    } else if (byteData.remaining() >= 3) {\n        byte b1 = byteData.get();\n        byte b2 = byteData.get();\n        byte b3 = byteData.get();\n        if ((b1 == (byte)0xEF) && (b2 == (byte)0xBB) && (b3 == (byte)0xBF)) {\n            bomCharset = \"UTF-8\";\n        } else {\n            byteData.reset();\n        }\n    } else if (byteData.remaining() >= 2) {\n        byte b1 = byteData.get();\n        byte b2 = byteData.get();\n        if ((b1 == (byte)0xFE) && (b2 == (byte)0xFF)) {\n            bomCharset = \"UTF-16BE\";\n        } else if ((b1 == (byte)0xFF) && (b2 == (byte)0xFE)) {\n            bomCharset = \"UTF-16LE\";\n        } else {\n            byteData.reset();\n        }\n    } else {\n        byteData.reset();\n    }\n\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && (charsetName == null || !foundCharset.equalsIgnoreCase(charsetName))) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri);\n                doc.outputSettings().charset(charsetName);\n                return doc;\n            }\n        }\n    }\n\n    if (doc == null) {\n        byteData.rewind();\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}