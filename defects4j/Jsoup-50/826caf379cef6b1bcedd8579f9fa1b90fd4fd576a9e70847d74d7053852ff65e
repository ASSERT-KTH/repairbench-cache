{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // -- BOM detection and handling --\n    String bomCharset = null;\n    int bomMark = -1;\n\n    if (byteData.remaining() >= 4) {\n        byte b1 = byteData.get(byteData.position());\n        byte b2 = byteData.get(byteData.position() + 1);\n        byte b3 = byteData.get(byteData.position() + 2);\n        byte b4 = byteData.get(byteData.position() + 3);\n\n        // UTF-8 BOM: EF BB BF\n        if ((b1 & 0xFF) == 0xEF && (b2 & 0xFF) == 0xBB && (b3 & 0xFF) == 0xBF) {\n            bomCharset = \"UTF-8\";\n            bomMark = 3;\n        }\n        // UTF-32, big-endian BOM: 00 00 FE FF\n        else if ((b1 & 0xFF) == 0x00 && (b2 & 0xFF) == 0x00 && (b3 & 0xFF) == 0xFE && (b4 & 0xFF) == 0xFF) {\n            bomCharset = \"UTF-32BE\";\n            bomMark = 4;\n        }\n        // UTF-32, little-endian BOM: FF FE 00 00\n        else if ((b1 & 0xFF) == 0xFF && (b2 & 0xFF) == 0xFE && (b3 & 0xFF) == 0x00 && (b4 & 0xFF) == 0x00) {\n            bomCharset = \"UTF-32LE\";\n            bomMark = 4;\n        }\n        // UTF-16, big-endian BOM: FE FF\n        else if ((b1 & 0xFF) == 0xFE && (b2 & 0xFF) == 0xFF) {\n            bomCharset = \"UTF-16BE\";\n            bomMark = 2;\n        }\n        // UTF-16, little-endian BOM: FF FE\n        else if ((b1 & 0xFF) == 0xFF && (b2 & 0xFF) == 0xFE) {\n            bomCharset = \"UTF-16LE\";\n            bomMark = 2;\n        }\n    } else if (byteData.remaining() >= 3) {\n        byte b1 = byteData.get(byteData.position());\n        byte b2 = byteData.get(byteData.position() + 1);\n        byte b3 = byteData.get(byteData.position() + 2);\n        // UTF-8 BOM\n        if ((b1 & 0xFF) == 0xEF && (b2 & 0xFF) == 0xBB && (b3 & 0xFF) == 0xBF) {\n            bomCharset = \"UTF-8\";\n            bomMark = 3;\n        }\n        // UTF-16, big-endian BOM: FE FF\n        else if ((b1 & 0xFF) == 0xFE && (b2 & 0xFF) == 0xFF) {\n            bomCharset = \"UTF-16BE\";\n            bomMark = 2;\n        }\n        // UTF-16, little-endian BOM: FF FE\n        else if ((b1 & 0xFF) == 0xFF && (b2 & 0xFF) == 0xFE) {\n            bomCharset = \"UTF-16LE\";\n            bomMark = 2;\n        }\n    } else if (byteData.remaining() >= 2) {\n        byte b1 = byteData.get(byteData.position());\n        byte b2 = byteData.get(byteData.position() + 1);\n        // UTF-16, big-endian BOM: FE FF\n        if ((b1 & 0xFF) == 0xFE && (b2 & 0xFF) == 0xFF) {\n            bomCharset = \"UTF-16BE\";\n            bomMark = 2;\n        }\n        // UTF-16, little-endian BOM: FF FE\n        else if ((b1 & 0xFF) == 0xFF && (b2 & 0xFF) == 0xFE) {\n            bomCharset = \"UTF-16LE\";\n            bomMark = 2;\n        }\n    }\n\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n        // strip BOM mark\n        byteData.position(byteData.position() + bomMark);\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                // re-check and strip BOM for the new charset\n                if (bomCharset != null) {\n                    // Remove BOM again if still present\n                    byteData.position(byteData.position() + bomMark);\n                }\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // If not UTF-8, UTF-16, UTF-32 BOMs, but has Unicode BOM U+FEFF as char, remove it\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}