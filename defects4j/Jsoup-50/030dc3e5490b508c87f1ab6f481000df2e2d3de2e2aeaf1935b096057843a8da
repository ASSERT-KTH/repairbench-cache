{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    byteData.mark(); // mark at the start to allow reset after BOM detection\n\n    // Detect BOM\n    String bomCharset = null;\n    if (byteData.remaining() >= 4) {\n        byte b1 = byteData.get();\n        byte b2 = byteData.get();\n        byte b3 = byteData.get();\n        byte b4 = byteData.get();\n\n        if (b1 == (byte)0x00 && b2 == (byte)0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF) {\n            bomCharset = \"UTF-32BE\";\n        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == (byte)0x00 && b4 == (byte)0x00) {\n            bomCharset = \"UTF-32LE\";\n        } else if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF) {\n            bomCharset = \"UTF-8\";\n            byteData.reset();\n            byteData.position(byteData.position() + 3); // skip BOM bytes\n        } else if (b1 == (byte)0xFE && b2 == (byte)0xFF) {\n            bomCharset = \"UTF-16BE\";\n            byteData.reset();\n            byteData.position(byteData.position() + 2); // skip BOM bytes\n        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) {\n            bomCharset = \"UTF-16LE\";\n            byteData.reset();\n            byteData.position(byteData.position() + 2); // skip BOM bytes\n        }\n    } else if (byteData.remaining() >= 3) {\n        byte b1 = byteData.get();\n        byte b2 = byteData.get();\n        byte b3 = byteData.get();\n        if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF) {\n            bomCharset = \"UTF-8\";\n            byteData.reset();\n            byteData.position(byteData.position() + 3);\n        } else {\n            byteData.reset();\n        }\n    } else if (byteData.remaining() >= 2) {\n        byte b1 = byteData.get();\n        byte b2 = byteData.get();\n        if (b1 == (byte)0xFE && b2 == (byte)0xFF) {\n            bomCharset = \"UTF-16BE\";\n            byteData.reset();\n            byteData.position(byteData.position() + 2);\n        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) {\n            bomCharset = \"UTF-16LE\";\n            byteData.reset();\n            byteData.position(byteData.position() + 2);\n        } else {\n            byteData.reset();\n        }\n    } else {\n        byteData.reset();\n    }\n\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // decode as UTF-8 or BOM charset\n        if (bomCharset != null) {\n            docData = Charset.forName(bomCharset).decode(byteData).toString();\n        } else {\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        }\n\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 or bomCharset as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 &&\n                    (bomCharset == null || !foundCharset.equalsIgnoreCase(bomCharset))) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.reset(); // reset buffer to beginning to re-decode\n                doc = null;\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        byteData.reset();\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}