{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // Save the original position for later rewinding.\n    int initialPosition = byteData.position();\n    \n    // --- BOM Detection ---\n    String bomCharset = null;\n    int bomLength = 0;\n    ByteBuffer dup = byteData.duplicate();\n    int headerLen = Math.min(4, dup.remaining());\n    byte[] header = new byte[headerLen];\n    dup.get(header);\n    \n    // Check for UTF-32BE: 00 00 FE FF\n    if (headerLen >= 4) {\n        if (header[0] == 0x00 && header[1] == 0x00 &&\n            (header[2] & 0xFF) == 0xFE && (header[3] & 0xFF) == 0xFF) {\n            bomCharset = \"UTF-32BE\";\n            bomLength = 4;\n        }\n        // Check for UTF-32LE: FF FE 00 00\n        else if ((header[0] & 0xFF) == 0xFF && (header[1] & 0xFF) == 0xFE &&\n                 header[2] == 0x00 && header[3] == 0x00) {\n            bomCharset = \"UTF-32LE\";\n            bomLength = 4;\n        }\n    }\n    // Check for UTF-8: EF BB BF\n    if (bomCharset == null && headerLen >= 3) {\n        if ((header[0] & 0xFF) == 0xEF && (header[1] & 0xFF) == 0xBB && (header[2] & 0xFF) == 0xBF) {\n            bomCharset = \"UTF-8\";\n            bomLength = 3;\n        }\n    }\n    // Check for UTF-16 BOMs: FE FF (BE) or FF FE (LE)\n    if (bomCharset == null && headerLen >= 2) {\n        if ((header[0] & 0xFF) == 0xFE && (header[1] & 0xFF) == 0xFF) {\n            bomCharset = \"UTF-16BE\";\n            bomLength = 2;\n        } else if ((header[0] & 0xFF) == 0xFF && (header[1] & 0xFF) == 0xFE) {\n            bomCharset = \"UTF-16LE\";\n            bomLength = 2;\n        }\n    }\n    \n    // If a BOM was found, it overrides any supplied charset.\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n        // Skip the BOM in the actual byte data.\n        byteData.position(initialPosition + bomLength);\n    }\n    \n    // --- Decoding and Meta-Detection ---\n    String docData;\n    Document doc = null;\n    \n    if (charsetName == null) {\n        // No charset was specified and no BOM detected, so use the default.\n        charsetName = defaultCharset; // assume defaultCharset is defined elsewhere, e.g. \"UTF-8\"\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        \n        // Look for a meta tag that might specify the charset.\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\"))\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\")))\n                        foundCharset = meta.attr(\"charset\");\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(charsetName)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                // Rewind and skip any BOM (if present) before re-decoding.\n                byteData.rewind();\n                if (bomLength > 0)\n                    byteData.position(initialPosition + bomLength);\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // Charset was either provided or set by the BOM.\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    \n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    \n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}