{
    "generation": "    // todo - this is getting gnarly. needs a rewrite.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // look for BOM - overrides any other header or input\n        // Note: defaultCharset and UNICODE_BOM are assumed to be accessible\n        // (e.g., as static final members of the containing class, like DataUtil).\n\n        String bomCharset = null;\n        int bomLength = 0;\n        int initialBufferPosition = byteData.position(); // Store the original position of the buffer\n\n        // Check for BOMs at the current buffer position without changing the buffer's position yet\n        int remaining = byteData.remaining();\n        if (remaining >= 3 && (byteData.get(initialBufferPosition) & 0xFF) == 0xEF && (byteData.get(initialBufferPosition + 1) & 0xFF) == 0xBB && (byteData.get(initialBufferPosition + 2) & 0xFF) == 0xBF) {\n            bomCharset = \"UTF-8\";\n            bomLength = 3;\n        } else if (remaining >= 2 && (byteData.get(initialBufferPosition) & 0xFF) == 0xFE && (byteData.get(initialBufferPosition + 1) & 0xFF) == 0xFF) {\n            bomCharset = \"UTF-16BE\";\n            bomLength = 2;\n        } else if (remaining >= 2 && (byteData.get(initialBufferPosition) & 0xFF) == 0xFF && (byteData.get(initialBufferPosition + 1) & 0xFF) == 0xFE) {\n            // Differentiate UTF-16LE from UTF-32LE by checking next two bytes\n            if (remaining >= 4 && (byteData.get(initialBufferPosition + 2) & 0xFF) == 0x00 && (byteData.get(initialBufferPosition + 3) & 0xFF) == 0x00) {\n                bomCharset = \"UTF-32LE\";\n                bomLength = 4;\n            } else {\n                bomCharset = \"UTF-16LE\";\n                bomLength = 2;\n            }\n        } else if (remaining >= 4 && (byteData.get(initialBufferPosition) & 0xFF) == 0x00 && (byteData.get(initialBufferPosition + 1) & 0xFF) == 0x00 && (byteData.get(initialBufferPosition + 2) & 0xFF) == 0xFE && (byteData.get(initialBufferPosition + 3) & 0xFF) == 0xFF) {\n            bomCharset = \"UTF-32BE\";\n            bomLength = 4;\n        }\n\n        if (bomCharset != null) {\n            charsetName = bomCharset; // BOM detected, it overrides any other charset determination\n            byteData.position(initialBufferPosition + bomLength); // Advance buffer position past the BOM\n        } else {\n            // No BOM detected, ensure buffer position is at its original start for decoding\n            byteData.position(initialBufferPosition);\n        }\n\n        // Now, proceed with decoding based on determined charsetName (from arg, or BOM, or still null)\n        if (charsetName != null) { // Charset specified (either by user, content-type header, or BOM detection)\n            // Validate.notEmpty is an assumed helper function\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            // Decode the data from the current buffer position (which is now after the BOM if one was found, or at initial start)\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        } else { // charsetName is null, attempt to determine from meta tags\n            // Mark the buffer's current position (after potential BOM skip or at the very start)\n            byteData.mark(); \n            // First pass: decode using defaultCharset (assumed \"UTF-8\")\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    // getCharsetFromContentType is an assumed helper function\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                // If a new charset is found and different from default, re-decode\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { \n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset; // Set this as the final charset\n                    byteData.reset(); // Rewind buffer to the marked position (before the first decode)\n                    docData = Charset.forName(foundCharset).decode(byteData).toString(); // Re-decode with detected charset\n                    doc = null; // Mark doc for re-parse as the initial parse was with the wrong charset\n                } else {\n                    charsetName = defaultCharset; // Keep default charset if meta found it, or no meta found/valid charset.\n                }\n            } else {\n                charsetName = defaultCharset; // Default to UTF-8 if no meta charset found\n            }\n        }\n        \n        // The old BOM check (docData.charAt(0) == UNICODE_BOM) has been removed.\n        // It was unreliable as it relied on character decoding which might have been\n        // incorrect for the initial byte data and also incorrectly forced defaultCharset.\n        // The byte-based BOM detection at the start handles this properly.\n\n        if (doc == null) { // If doc wasn't parsed yet (due to charset detection/re-decode) or was set to null for re-parsing\n            doc = parser.parseInput(docData, baseUri);\n            // Ensure the document's output settings reflect the determined charset\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}