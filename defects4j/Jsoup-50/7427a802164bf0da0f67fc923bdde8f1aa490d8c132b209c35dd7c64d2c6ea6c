{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    String detectedCharset = null;\n\n    // Check for BOM - overrides any other header or input\n    // We'll check if the first bytes match a BOM signature, and set the charset accordingly.\n    ByteBuffer bomData = byteData.asReadOnlyBuffer();\n    bomData.rewind();\n\n    if (bomData.remaining() >= 4) {\n        byte b1 = bomData.get(), b2 = bomData.get(), b3 = bomData.get(), b4 = bomData.get();\n        if (b1 == (byte)0x00 && b2 == (byte)0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF) {\n            detectedCharset = \"UTF-32BE\";\n            bomData.position(4);\n        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == (byte)0x00 && b4 == (byte)0x00) {\n            detectedCharset = \"UTF-32LE\";\n            bomData.position(4);\n        } else if (b1 == (byte)0xFE && b2 == (byte)0xFF) {\n            detectedCharset = \"UTF-16BE\";\n            bomData.position(2);\n        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) {\n            detectedCharset = \"UTF-16LE\";\n            bomData.position(2);\n        } else if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF) {\n            detectedCharset = \"UTF-8\";\n            bomData.position(3);\n        } else {\n            bomData.position(0); // no BOM detected\n        }\n    } else if (bomData.remaining() >= 3) {\n        byte b1 = bomData.get(), b2 = bomData.get(), b3 = bomData.get();\n        if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF) {\n            detectedCharset = \"UTF-8\";\n            bomData.position(3);\n        } else {\n            bomData.position(0); // no BOM detected\n        }\n    } else if (bomData.remaining() >= 2) {\n        byte b1 = bomData.get(), b2 = bomData.get();\n        if (b1 == (byte)0xFE && b2 == (byte)0xFF) {\n            detectedCharset = \"UTF-16BE\";\n            bomData.position(2);\n        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) {\n            detectedCharset = \"UTF-16LE\";\n            bomData.position(2);\n        } else {\n            bomData.position(0); // no BOM detected\n        }\n    } else {\n        bomData.position(0);\n    }\n\n    if (detectedCharset != null) {\n        charsetName = detectedCharset;\n        // slice bomData to start after the BOM for decoding\n        ByteBuffer dataNoBom = bomData.slice();\n        docData = Charset.forName(charsetName).decode(dataNoBom).toString();\n    } else if (charsetName == null) {\n        docData = Charset.forName(defaultCharset).decode(byteData.duplicate()).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData.duplicate()).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        if (charsetName != null)\n            doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}