{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    // --- BOM detection ---\n    // Check for BOM\n    byteData.mark();\n    String bomCharset = null;\n    if (byteData.remaining() >= 4) {\n        int b1 = byteData.get() & 0xFF;\n        int b2 = byteData.get() & 0xFF;\n        int b3 = byteData.get() & 0xFF;\n        int b4 = byteData.get() & 0xFF;\n        if      (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) bomCharset = \"UTF-32BE\";\n        else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) bomCharset = \"UTF-32LE\";\n        else if (b1 == 0xFE && b2 == 0xFF) { bomCharset = \"UTF-16BE\"; byteData.position(byteData.position() - 2); }\n        else if (b1 == 0xFF && b2 == 0xFE) { bomCharset = \"UTF-16LE\"; byteData.position(byteData.position() - 2); }\n        else if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) { bomCharset = \"UTF-8\"; byteData.position(byteData.position() - 1); }\n        byteData.reset();\n    } else if (byteData.remaining() >= 2) {\n        int b1 = byteData.get() & 0xFF;\n        int b2 = byteData.get() & 0xFF;\n        if      (b1 == 0xFE && b2 == 0xFF) bomCharset = \"UTF-16BE\";\n        else if (b1 == 0xFF && b2 == 0xFE) bomCharset = \"UTF-16LE\";\n        byteData.reset();\n    }\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n    }\n    // --- End BOM detection ---\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by BOM or content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        byteData.rewind();\n        // Handle BOM removal for UTF-8/16/32\n        if (charsetName.equalsIgnoreCase(\"UTF-8\") || charsetName.equalsIgnoreCase(\"UTF-16LE\")\n                || charsetName.equalsIgnoreCase(\"UTF-16BE\") || charsetName.equalsIgnoreCase(\"UTF-32LE\")\n                || charsetName.equalsIgnoreCase(\"UTF-32BE\")) {\n            byte[] bytes = new byte[byteData.remaining()];\n            byteData.get(bytes);\n            byte[] cleaned = removeBOM(bytes, charsetName);\n            docData = new String(cleaned, Charset.forName(charsetName));\n        } else {\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n    }\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) { // keep this fallback\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        docData = docData.substring(1);\n        charsetName = defaultCharset;\n        doc = null;\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\n// Helper to remove BOM from bytes for known encodings\nprivate static byte[] removeBOM(byte[] bytes, String charsetName) {\n    if (bytes.length >= 3 && bytes[0] == (byte)0xEF && bytes[1] == (byte)0xBB && bytes[2] == (byte)0xBF && charsetName.equalsIgnoreCase(\"UTF-8\"))\n        return Arrays.copyOfRange(bytes, 3, bytes.length);\n    if (bytes.length >= 2 && bytes[0] == (byte)0xFE && bytes[1] == (byte)0xFF && charsetName.equalsIgnoreCase(\"UTF-16BE\"))\n        return Arrays.copyOfRange(bytes, 2, bytes.length);\n    if (bytes.length >= 2 && bytes[0] == (byte)0xFF && bytes[1] == (byte)0xFE && charsetName.equalsIgnoreCase(\"UTF-16LE\"))\n        return Arrays.copyOfRange(bytes, 2, bytes.length);\n    if (bytes.length >= 4 && bytes[0] == (byte)0x00 && bytes[1] == (byte)0x00\n            && bytes[2] == (byte)0xFE && bytes[3] == (byte)0xFF && charsetName.equalsIgnoreCase(\"UTF-32BE\"))\n        return Arrays.copyOfRange(bytes, 4, bytes.length);\n    if (bytes.length >= 4 && bytes[0] == (byte)0xFF && bytes[1] == (byte)0xFE\n            && bytes[2] == (byte)0x00 && bytes[3] == (byte)0x00 && charsetName.equalsIgnoreCase(\"UTF-32LE\"))\n        return Arrays.copyOfRange(bytes, 4, bytes.length);\n    return bytes;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}