{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Detect BOM and adjust charset and position accordingly\n    ByteBuffer bomCheckBuffer = byteData.duplicate();\n    bomCheckBuffer.order(ByteOrder.BIG_ENDIAN);\n    String detectedCharset = null;\n    int detectedBomLength = 0;\n\n    if (bomCheckBuffer.remaining() >= 4) {\n        int b1 = bomCheckBuffer.get() & 0xFF;\n        int b2 = bomCheckBuffer.get() & 0xFF;\n        int b3 = bomCheckBuffer.get() & 0xFF;\n        int b4 = bomCheckBuffer.get() & 0xFF;\n\n        if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) {\n            detectedCharset = \"UTF-32BE\";\n            detectedBomLength = 4;\n        } else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) {\n            detectedCharset = \"UTF-32LE\";\n            detectedBomLength = 4;\n        } else {\n            bomCheckBuffer.rewind();\n\n            if (bomCheckBuffer.remaining() >= 3) {\n                b1 = bomCheckBuffer.get() & 0xFF;\n                b2 = bomCheckBuffer.get() & 0xFF;\n                b3 = bomCheckBuffer.get() & 0xFF;\n                if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {\n                    detectedCharset = \"UTF-8\";\n                    detectedBomLength = 3;\n                }\n            }\n\n            if (detectedCharset == null) {\n                bomCheckBuffer.rewind();\n                if (bomCheckBuffer.remaining() >= 2) {\n                    b1 = bomCheckBuffer.get() & 0xFF;\n                    b2 = bomCheckBuffer.get() & 0xFF;\n                    if (b1 == 0xFE && b2 == 0xFF) {\n                        detectedCharset = \"UTF-16BE\";\n                        detectedBomLength = 2;\n                    } else if (b1 == 0xFF && b2 == 0xFE) {\n                        detectedCharset = \"UTF-16LE\";\n                        detectedBomLength = 2;\n                    }\n                }\n            }\n        }\n    }\n\n    if (detectedCharset != null) {\n        charsetName = detectedCharset;\n        byteData.position(byteData.position() + detectedBomLength);\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by BOM or content type header or user\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}