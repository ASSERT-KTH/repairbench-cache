{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // 1) Detect BOM by peeking first bytes\n    ByteBuffer bb = byteData.duplicate();\n    bb.position(0);\n    int p = bb.position();\n    String bomCharset = null;\n    int bomLength = 0;\n    if (bb.remaining() >= 4) {\n        int b0 = bb.get(p) & 0xFF;\n        int b1 = bb.get(p + 1) & 0xFF;\n        int b2 = bb.get(p + 2) & 0xFF;\n        int b3 = bb.get(p + 3) & 0xFF;\n        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {\n            bomCharset = \"UTF-32BE\"; bomLength = 4;\n        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {\n            bomCharset = \"UTF-32LE\"; bomLength = 4;\n        }\n    }\n    if (bomCharset == null && bb.remaining() >= 3) {\n        int b0 = bb.get(p) & 0xFF;\n        int b1 = bb.get(p + 1) & 0xFF;\n        int b2 = bb.get(p + 2) & 0xFF;\n        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {\n            bomCharset = \"UTF-8\"; bomLength = 3;\n        }\n    }\n    if (bomCharset == null && bb.remaining() >= 2) {\n        int b0 = bb.get(p) & 0xFF;\n        int b1 = bb.get(p + 1) & 0xFF;\n        if (b0 == 0xFE && b1 == 0xFF) {\n            bomCharset = \"UTF-16BE\"; bomLength = 2;\n        } else if (b0 == 0xFF && b1 == 0xFE) {\n            bomCharset = \"UTF-16LE\"; bomLength = 2;\n        }\n    }\n    // BOM overrides any provided charset\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n    }\n\n    Document doc = null;\n    String docData;\n    ByteBuffer toDecode;\n\n    // 2) If still no charset, do a safe parse in default to look for <meta> tags\n    if (charsetName == null) {\n        toDecode = byteData.duplicate();\n        toDecode.position(bomLength);\n        docData = Charset.forName(defaultCharset).decode(toDecode).toString();\n        doc = parser.parseInput(docData, baseUri);\n\n        // find a <meta http-equiv=\"content-type\" ...> or <meta charset=...>\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        String foundCharset = null;\n        if (meta != null) {\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                String cs = meta.attr(\"charset\").trim();\n                try {\n                    if (Charset.isSupported(cs)) {\n                        foundCharset = cs;\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    // ignore\n                }\n            }\n        }\n        // if a new, non-default charset is found, re-decode\n        if (foundCharset != null\n            && foundCharset.length() > 0\n            && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n            charsetName = foundCharset.replaceAll(\"[\\\"']\", \"\").trim();\n            doc = null;\n        }\n    }\n\n    // 3) Final parse with the determined charset (from BOM, header, or meta)\n    if (doc == null) {\n        Validate.notEmpty(charsetName,\n            \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        toDecode = byteData.duplicate();\n        toDecode.position(bomLength);\n        docData = Charset.forName(charsetName).decode(toDecode).toString();\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}