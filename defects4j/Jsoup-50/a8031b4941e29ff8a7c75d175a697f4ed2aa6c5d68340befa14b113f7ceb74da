{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    byte[] bomBytes = new byte[4];\n    int bytesRead = byteData.get(bomBytes);\n    String bom = null;\n    if (bytesRead >= 2) {\n        if (bomBytes[0] == (byte) 0xFE && bomBytes[1] == (byte) 0xFF) {\n            bom = \"UTF-16BE\";\n        } else if (bomBytes[0] == (byte) 0xFF && bomBytes[1] == (byte) 0xFE) {\n            bom = \"UTF-16LE\";\n        }\n    }\n    if (bytesRead >= 4 && bom == null) {\n        int bomInt = ((bomBytes[0] & 0xFF) << 24) | ((bomBytes[1] & 0xFF) << 16) |\n                ((bomBytes[2] & 0xFF) << 8) | (bomBytes[3] & 0xFF);\n        if (bomInt == 0x0000FEFF) {\n            bom = \"UTF-32BE\";\n        } else if (bomInt == 0xFFFE0000) {\n            bom = \"UTF-32LE\";\n        }\n    }\n    byteData.rewind();\n\n    if (bom != null) {\n        charsetName = bom;\n        docData = Charset.forName(charsetName).decode(byteData);\n        docData = docData.toString();\n    } else if (charsetName == null) {\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        // ... (rest of the original charset detection logic)\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        docData = docData.substring(1);\n        charsetName = defaultCharset;\n        doc = null;\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}