{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    String defaultCharset = \"UTF-8\"; // Assuming defaultCharset is \"UTF-8\"\n\n    // look for BOM - overrides any other header or input\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // Handle BOM for UTF-16 and UTF-32\n    if (docData.length() > 0) {\n        byte[] bomBytes = byteData.array();\n        if (bomBytes.length >= 2 && bomBytes[0] == (byte) 0xFE && bomBytes[1] == (byte) 0xFF) {\n            charsetName = \"UTF-16BE\";\n        } else if (bomBytes.length >= 2 && bomBytes[0] == (byte) 0xFF && bomBytes[1] == (byte) 0xFE) {\n            charsetName = \"UTF-16LE\";\n        } else if (bomBytes.length >= 4 && bomBytes[0] == (byte) 0x00 && bomBytes[1] == (byte) 0x00 && bomBytes[2] == (byte) 0xFE && bomBytes[3] == (byte) 0xFF) {\n            charsetName = \"UTF-32BE\";\n        } else if (bomBytes.length >= 4 && bomBytes[0] == (byte) 0xFF && bomBytes[1] == (byte) 0xFE && bomBytes[2] == (byte) 0x00 && bomBytes[3] == (byte) 0x00) {\n            charsetName = \"UTF-32LE\";\n        }\n\n        if (charsetName != null && !charsetName.equals(defaultCharset)) {\n            byteData.rewind();\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n            doc = null;\n        }\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}