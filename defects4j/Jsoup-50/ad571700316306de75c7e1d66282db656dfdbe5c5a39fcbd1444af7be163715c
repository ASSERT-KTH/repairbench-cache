{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    String detectedCharset = null;\n\n    // First check for BOM\n    byteData.mark();\n    Charset bomCharset = detectBomCharset(byteData);\n    if (bomCharset != null) {\n        detectedCharset = bomCharset.name();\n        byteData.reset();\n    }\n\n    // If no BOM or we need to use the provided charset\n    if (charsetName == null && detectedCharset == null) {\n        // Try to detect charset from meta tags\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // Use either the BOM-detected charset or the provided one\n        String charsetToUse = detectedCharset != null ? detectedCharset : charsetName;\n        Validate.notEmpty(charsetToUse, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetToUse).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : detectedCharset);\n    }\n    return doc;\n}\n\nprivate static Charset detectBomCharset(ByteBuffer byteData) {\n    byteData.mark();\n    if (byteData.remaining() >= 4) {\n        byte[] bom = new byte[4];\n        byteData.get(bom);\n        byteData.reset();\n\n        // Check for UTF-32 BE BOM\n        if (bom[0] == (byte)0x00 && bom[1] == (byte)0x00 && bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {\n            return Charset.forName(\"UTF-32BE\");\n        }\n        // Check for UTF-32 LE BOM\n        if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE && bom[2] == (byte)0x00 && bom[3] == (byte)0x00) {\n            return Charset.forName(\"UTF-32LE\");\n        }\n    }\n\n    if (byteData.remaining() >= 2) {\n        byte[] bom = new byte[2];\n        byteData.get(bom);\n        byteData.reset();\n\n        // Check for UTF-16 BE BOM\n        if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {\n            return Charset.forName(\"UTF-16BE\");\n        }\n        // Check for UTF-16 LE BOM\n        if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {\n            return Charset.forName(\"UTF-16LE\");\n        }\n    }\n\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}