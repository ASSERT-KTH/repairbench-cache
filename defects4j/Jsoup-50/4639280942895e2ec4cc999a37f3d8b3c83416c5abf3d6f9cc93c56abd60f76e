{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Determine charset from BOM if charsetName is null\n    if (charsetName == null) {\n        // Check for BOM and determine charset\n        if (byteData.hasRemaining() && byteData.get() == (byte) 0xEF && byteData.get() == (byte) 0xBB && byteData.get() == (byte) 0xBF) {\n            charsetName = \"UTF-8\";\n        } else if (byteData.hasRemaining() && byteData.get() == (byte) 0xFE && byteData.get() == (byte) 0xFF) {\n            charsetName = \"UTF-16BE\";\n        } else if (byteData.hasRemaining() && byteData.get() == (byte) 0xFF && byteData.get() == (byte) 0xFE) {\n            charsetName = \"UTF-16LE\";\n        } else if (byteData.hasRemaining() && byteData.get() == (byte) 0x00 && byteData.get() == (byte) 0x00 && byteData.get() == (byte) 0xFE && byteData.get() == (byte) 0xFF) {\n            charsetName = \"UTF-32BE\";\n        } else if (byteData.hasRemaining() && byteData.get() == (byte) 0xFF && byteData.get() == (byte) 0xFE && byteData.get() == (byte) 0x00 && byteData.get() == (byte) 0x00) {\n            charsetName = \"UTF-32LE\";\n        } else {\n            // Default to UTF-8 if no BOM is found\n            charsetName = \"UTF-8\";\n        }\n\n        // Rewind byteData to the beginning\n        byteData.rewind();\n    }\n\n    // Decode byteData based on the determined charset\n    docData = Charset.forName(charsetName).decode(byteData).toString();\n\n    // Parse the document\n    doc = parser.parseInput(docData, baseUri);\n\n    // Look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n    Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n    if (meta != null) {\n        String foundCharset = null;\n        if (meta.hasAttr(\"http-equiv\")) {\n            foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n        }\n        if (foundCharset == null && meta.hasAttr(\"charset\")) {\n            try {\n                if (Charset.isSupported(meta.attr(\"charset\"))) {\n                    foundCharset = meta.attr(\"charset\");\n                }\n            } catch (IllegalCharsetNameException e) {\n                foundCharset = null;\n            }\n        }\n\n        if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(charsetName)) {\n            foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n            charsetName = foundCharset;\n            byteData.rewind();\n            docData = Charset.forName(foundCharset).decode(byteData).toString();\n            doc = null;\n        }\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}