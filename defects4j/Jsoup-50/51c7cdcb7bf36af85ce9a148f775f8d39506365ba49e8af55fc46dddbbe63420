{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        final String defaultCharset = \"UTF-8\";\n        final char UNICODE_BOM = '\\uFEFF';\n\n        // Detect BOM and adjust charset and position\n        byteData.mark();\n        boolean hasBOM = false;\n        String bomCharset = null;\n        int bomLength = 0;\n\n        if (byteData.remaining() >= 3) {\n            byte[] bom3 = new byte[3];\n            byteData.get(bom3);\n            if (bom3[0] == (byte) 0xEF && bom3[1] == (byte) 0xBB && bom3[2] == (byte) 0xBF) {\n                bomCharset = \"UTF-8\";\n                bomLength = 3;\n                hasBOM = true;\n            } else {\n                byteData.reset();\n            }\n        }\n        if (!hasBOM && byteData.remaining() >= 2) {\n            byte[] bom2 = new byte[2];\n            byteData.get(bom2);\n            if (bom2[0] == (byte) 0xFE && bom2[1] == (byte) 0xFF) {\n                bomCharset = \"UTF-16BE\";\n                bomLength = 2;\n                hasBOM = true;\n            } else if (bom2[0] == (byte) 0xFF && bom2[1] == (byte) 0xFE) {\n                bomCharset = \"UTF-16LE\";\n                bomLength = 2;\n                hasBOM = true;\n            } else {\n                byteData.reset();\n            }\n        }\n        if (!hasBOM && byteData.remaining() >= 4) {\n            byte[] bom4 = new byte[4];\n            byteData.get(bom4);\n            if (bom4[0] == 0x00 && bom4[1] == 0x00 && bom4[2] == (byte) 0xFE && bom4[3] == (byte) 0xFF) {\n                bomCharset = \"UTF-32BE\";\n                bomLength = 4;\n                hasBOM = true;\n            } else if (bom4[0] == (byte) 0xFF && bom4[1] == (byte) 0xFE && bom4[2] == 0x00 && bom4[3] == 0x00) {\n                bomCharset = \"UTF-32LE\";\n                bomLength = 4;\n                hasBOM = true;\n            } else {\n                byteData.reset();\n            }\n        }\n\n        if (hasBOM) {\n            charsetName = bomCharset;\n            byteData.position(byteData.position() + bomLength);\n        } else {\n            byteData.reset();\n        }\n\n        if (charsetName == null) {\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    if (hasBOM) {\n                        byteData.position(byteData.position() + bomLength);\n                    }\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else {\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n            docData = docData.substring(1);\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n        }\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}