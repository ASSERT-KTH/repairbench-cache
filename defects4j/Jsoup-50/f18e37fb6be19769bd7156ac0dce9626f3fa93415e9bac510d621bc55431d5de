{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    String detectedCharset = null;\n\n    // Check for BOM first, which overrides any other charset declaration\n    CharsetDetected bomCharset = detectBomCharset(byteData);\n    if (bomCharset != null) {\n        charsetName = bomCharset.charsetName;\n        // Reset the buffer position to after the BOM\n        byteData.position(bomCharset.bomLength);\n    }\n\n    // If charsetName is still null, try to detect from content\n    if (charsetName == null) {\n        // First attempt with UTF-8 to try and find meta charset\n        byteData.mark();\n        docData = Charset.forName(defaultCharset).decode(duplicate(byteData)).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.reset();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri);\n            }\n        } else {\n            // If no meta charset found, keep the UTF-8 decoded doc\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n        }\n    } else {\n        // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n    }\n\n    if (doc != null) {\n        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    }\n    return doc;\n}\n\nprivate static ByteBuffer duplicate(ByteBuffer original) {\n    ByteBuffer clone = ByteBuffer.allocate(original.capacity());\n    original.rewind();\n    clone.put(original);\n    original.rewind();\n    clone.flip();\n    return clone;\n}\n\nprivate static class CharsetDetected {\n    String charsetName;\n    int bomLength;\n}\n\nprivate static CharsetDetected detectBomCharset(ByteBuffer byteData) {\n    byteData.mark();\n    int remaining = byteData.remaining();\n    if (remaining >= 2) {\n        byte first = byteData.get();\n        byte second = byteData.get();\n\n        if (first == (byte) 0xFE && second == (byte) 0xFF) {\n            return new CharsetDetected() {\n                { charsetName = \"UTF-16BE\"; bomLength = 2; }\n            };\n        }\n        if (first == (byte) 0xFF && second == (byte) 0xFE) {\n            return new CharsetDetected() {\n                { charsetName = \"UTF-16LE\"; bomLength = 2; }\n            };\n        }\n\n        if (remaining >= 4) {\n            byte third = byteData.get();\n            byte fourth = byteData.get();\n\n            if (first == (byte) 0x00 && second == (byte) 0x00 && third == (byte) 0xFE && fourth == (byte) 0xFF) {\n                return new CharsetDetected() {\n                    { charsetName = \"UTF-32BE\"; bomLength = 4; }\n                };\n            }\n            if (first == (byte) 0xFF && second == (byte) 0xFE && third == (byte) 0x00 && fourth == (byte) 0x00) {\n                return new CharsetDetected() {\n                    { charsetName = \"UTF-32LE\"; bomLength = 4; }\n                };\n            }\n        }\n\n        if (first == (byte) 0xEF && second == (byte) 0xBB) {\n            if (remaining >= 3) {\n                byte third = byteData.get();\n                if (third == (byte) 0xBF) {\n                    return new CharsetDetected() {\n                        { charsetName = \"UTF-8\"; bomLength = 3; }\n                    };\n                }\n            }\n        }\n    }\n\n    // No BOM detected\n    byteData.reset();\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}