{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Detect BOMs for charset override\n    byteData.mark();\n    Charset bomCharset = null;\n    int[] bom = new int[4];\n    int bomLength = 0;\n    if (byteData.remaining() >= 4) {\n        bom[0] = byteData.get() & 0xFF;\n        bom[1] = byteData.get() & 0xFF;\n        bom[2] = byteData.get() & 0xFF;\n        bom[3] = byteData.get() & 0xFF;\n        byteData.reset();\n\n        // UTF-8 BOM EF BB BF\n        if (bom[0] == 0xEF && bom[1] == 0xBB && bom[2] == 0xBF) {\n            bomCharset = Charset.forName(\"UTF-8\");\n            bomLength = 3;\n        }\n        // UTF-32 BE FF FE 00 00\n        else if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == 0xFE && bom[3] == 0xFF) {\n            bomCharset = Charset.forName(\"UTF-32BE\");\n            bomLength = 4;\n        }\n        // UTF-32 LE FF FE 00 00\n        else if (bom[0] == 0xFF && bom[1] == 0xFE && bom[2] == 0x00 && bom[3] == 0x00) {\n            bomCharset = Charset.forName(\"UTF-32LE\");\n            bomLength = 4;\n        }\n        // UTF-16 BE FE FF\n        else if (bom[0] == 0xFE && bom[1] == 0xFF) {\n            bomCharset = Charset.forName(\"UTF-16BE\");\n            bomLength = 2;\n        }\n        // UTF-16 LE FF FE\n        else if (bom[0] == 0xFF && bom[1] == 0xFE) {\n            bomCharset = Charset.forName(\"UTF-16LE\");\n            bomLength = 2;\n        }\n    } else if (byteData.remaining() >= 3) {\n        bom[0] = byteData.get() & 0xFF;\n        bom[1] = byteData.get() & 0xFF;\n        bom[2] = byteData.get() & 0xFF;\n        byteData.reset();\n        if (bom[0] == 0xEF && bom[1] == 0xBB && bom[2] == 0xBF) {\n            bomCharset = Charset.forName(\"UTF-8\");\n            bomLength = 3;\n        }\n    } else if (byteData.remaining() >= 2) {\n        bom[0] = byteData.get() & 0xFF;\n        bom[1] = byteData.get() & 0xFF;\n        byteData.reset();\n        if (bom[0] == 0xFE && bom[1] == 0xFF) {\n            bomCharset = Charset.forName(\"UTF-16BE\");\n            bomLength = 2;\n        } else if (bom[0] == 0xFF && bom[1] == 0xFE) {\n            bomCharset = Charset.forName(\"UTF-16LE\");\n            bomLength = 2;\n        }\n    } else {\n        byteData.reset();\n    }\n\n    if (bomCharset != null) {\n        charsetName = bomCharset.name();\n        // skip BOM bytes\n        for (int i = 0; i < bomLength; i++) {\n            byteData.get();\n        }\n    } else {\n        byteData.rewind();\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                if (bomLength > 0) {\n                    // skip BOM again if present\n                    byteData.position(bomLength);\n                }\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}