{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // First, check for BOM and set charset accordingly, if not already specified\n    // Check BOM for UTF encodings\n    Charset bomCharset = null;\n    int bomLength = 0;\n\n    // Save original position\n    int origPos = byteData.position();\n\n    if (byteData.remaining() >= 3) {\n        byte b0 = byteData.get(byteData.position());\n        byte b1 = byteData.get(byteData.position() + 1);\n        byte b2 = byteData.get(byteData.position() + 2);\n\n        // UTF-8 BOM: EF BB BF\n        if ((b0 & 0xFF) == 0xEF && (b1 & 0xFF) == 0xBB && (b2 & 0xFF) == 0xBF) {\n            bomCharset = Charset.forName(\"UTF-8\");\n            bomLength = 3;\n        }\n    }\n    if (bomCharset == null && byteData.remaining() >= 2) {\n        byte b0 = byteData.get(byteData.position());\n        byte b1 = byteData.get(byteData.position() + 1);\n\n        // UTF-16 BE BOM: FE FF\n        if ((b0 & 0xFF) == 0xFE && (b1 & 0xFF) == 0xFF) {\n            bomCharset = Charset.forName(\"UTF-16BE\");\n            bomLength = 2;\n        }\n        // UTF-16 LE BOM: FF FE\n        if ((b0 & 0xFF) == 0xFF && (b1 & 0xFF) == 0xFE) {\n            bomCharset = Charset.forName(\"UTF-16LE\");\n            bomLength = 2;\n        }\n    }\n    if (bomCharset == null && byteData.remaining() >= 4) {\n        byte b0 = byteData.get(byteData.position());\n        byte b1 = byteData.get(byteData.position() + 1);\n        byte b2 = byteData.get(byteData.position() + 2);\n        byte b3 = byteData.get(byteData.position() + 3);\n\n        // UTF-32 BE BOM: 00 00 FE FF\n        if ((b0 & 0xFF) == 0x00 && (b1 & 0xFF) == 0x00 && (b2 & 0xFF) == 0xFE && (b3 & 0xFF) == 0xFF) {\n            bomCharset = Charset.forName(\"UTF-32BE\");\n            bomLength = 4;\n        }\n        // UTF-32 LE BOM: FF FE 00 00\n        if ((b0 & 0xFF) == 0xFF && (b1 & 0xFF) == 0xFE && (b2 & 0xFF) == 0x00 && (b3 & 0xFF) == 0x00) {\n            bomCharset = Charset.forName(\"UTF-32LE\");\n            bomLength = 4;\n        }\n    }\n    if (charsetName == null && bomCharset != null) {\n        charsetName = bomCharset.name();\n        // remove BOM before decoding\n        byteData.position(byteData.position() + bomLength);\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                // skip any BOM in case detected above\n                if (bomCharset != null && charsetName.equalsIgnoreCase(bomCharset.name())) {\n                    byteData.position(byteData.position() + bomLength);\n                }\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        // If a BOM has been detected and charsetName matches, skip BOM\n        if (bomCharset != null && charsetName.equalsIgnoreCase(bomCharset.name())) {\n            byteData.position(origPos + bomLength);\n        }\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // Remove BOM from docData if present (in rare case that defaultCharset was used, or decoder did not remove)\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n        doc = null;\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}