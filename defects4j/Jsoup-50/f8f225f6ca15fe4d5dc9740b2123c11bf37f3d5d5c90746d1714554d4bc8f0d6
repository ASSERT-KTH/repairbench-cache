{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // look for BOM - overrides any other header or input\n        if (byteData.remaining() >= 2) {\n            byteData.mark();\n            byte[] bom = new byte[4];\n            byteData.get(bom, 0, Math.min(byteData.remaining(), 4));\n            byteData.reset();\n\n            if ((bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) || \n                (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) ||\n                (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) ||\n                (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00)) {\n                charsetName = null; // BOM detected, will use it to determine charset\n            }\n        }\n\n        if (charsetName == null) { // determine from meta or BOM\n            // try to detect from BOM first\n            String detectedCharset = detectCharsetFromBOM(byteData);\n            if (detectedCharset != null) {\n                charsetName = detectedCharset;\n                byteData.rewind();\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n                // skip BOM if present\n                if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n                    docData = docData.substring(1);\n                }\n                doc = parser.parseInput(docData, baseUri);\n                doc.outputSettings().charset(charsetName);\n                return doc;\n            }\n\n            // if no BOM, try meta as before\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else {\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n            docData = docData.substring(1);\n        }\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }\n\n    private static String detectCharsetFromBOM(ByteBuffer byteData) {\n        if (byteData.remaining() < 2) return null;\n        \n        byteData.mark();\n        byte[] bom = new byte[4];\n        byteData.get(bom, 0, Math.min(byteData.remaining(), 4));\n        byteData.reset();\n        \n        if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n            return \"UTF-16BE\";\n        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n            if (bom.length > 3 && bom[2] == 0 && bom[3] == 0) {\n                return \"UTF-32LE\";\n            }\n            return \"UTF-16LE\";\n        } else if (bom.length > 3 && bom[0] == 0 && bom[1] == 0 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n            return \"UTF-32BE\";\n        }\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}