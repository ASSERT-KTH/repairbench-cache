{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        if (charsetName == null) { \n            boolean detectedBom = false;\n            if (byteData.remaining() >= 2) {\n                byte[] bomBytes = new byte[2];\n                byteData.get(bomBytes);\n                if (bomBytes[0] == (byte) 0xFE && bomBytes[1] == (byte) 0xFF) {\n                    charsetName = \"UTF-16BE\";\n                    detectedBom = true;\n                } else if (bomBytes[0] == (byte) 0xFF && bomBytes[1] == (byte) 0xFE) {\n                    charsetName = \"UTF-16LE\";\n                    detectedBom = true;\n                }\n            }\n            if (!detectedBom && byteData.remaining() >= 4) {\n                byte[] bomBytes = new byte[4];\n                byteData.get(bomBytes);\n                if (bomBytes[0] == 0x00 && bomBytes[1] == 0x00 && bomBytes[2] == 0xFE && bomBytes[3] == 0xFF) {\n                    charsetName = \"UTF-32BE\";\n                    detectedBom = true;\n                } else if (bomBytes[0] == 0xFF && bomBytes[1] == 0xFE && bomBytes[2] == 0x00 && bomBytes[3] == 0x00) {\n                    charsetName = \"UTF-32LE\";\n                    detectedBom = true;\n                }\n            }\n            byteData.rewind();\n            if (detectedBom) {\n                docData = Charset.forName(charsetName).decode(byteData);\n            } else {\n                docData = Charset.forName(defaultCharset).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri);\n                Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n                if (meta != null) {\n                    String foundCharset = null;\n                    if (meta.hasAttr(\"http-equiv\")) {\n                        foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                    }\n                    if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                        try {\n                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n                                foundCharset = meta.attr(\"charset\");\n                            }\n                        } catch (IllegalCharsetNameException e) {\n                            foundCharset = null;\n                        }\n                    }\n                    if (foundCharset != null && !foundCharset.equals(charsetName)) {\n                        foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                        charsetName = foundCharset;\n                        byteData.rewind();\n                        docData = Charset.forName(foundCharset).decode(byteData).toString();\n                        doc = null;\n                    }\n                }\n            }\n        } else {\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}