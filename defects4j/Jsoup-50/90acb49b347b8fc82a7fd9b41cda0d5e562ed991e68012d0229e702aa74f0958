{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // look for BOM - overrides any other header or input\n    int start = byteData.position();\n    int remaining = byteData.remaining();\n    String bomCharset = null;\n    int bomLength = 0;\n\n    // UTF-32 BOMs\n    if (remaining >= 4) {\n        byte b0 = byteData.get(start);\n        byte b1 = byteData.get(start + 1);\n        byte b2 = byteData.get(start + 2);\n        byte b3 = byteData.get(start + 3);\n        if (b0 == 0x00 && b1 == 0x00 && b2 == (byte)0xFE && b3 == (byte)0xFF) {\n            bomCharset = \"UTF-32BE\"; bomLength = 4;\n        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE && b2 == 0x00 && b3 == 0x00) {\n            bomCharset = \"UTF-32LE\"; bomLength = 4;\n        }\n    }\n    // UTF-8 BOM\n    if (bomCharset == null && remaining >= 3) {\n        byte b0 = byteData.get(start);\n        byte b1 = byteData.get(start + 1);\n        byte b2 = byteData.get(start + 2);\n        if (b0 == (byte)0xEF && b1 == (byte)0xBB && b2 == (byte)0xBF) {\n            bomCharset = \"UTF-8\"; bomLength = 3;\n        }\n    }\n    // UTF-16 BOMs\n    if (bomCharset == null && remaining >= 2) {\n        byte b0 = byteData.get(start);\n        byte b1 = byteData.get(start + 1);\n        if (b0 == (byte)0xFE && b1 == (byte)0xFF) {\n            bomCharset = \"UTF-16BE\"; bomLength = 2;\n        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE) {\n            bomCharset = \"UTF-16LE\"; bomLength = 2;\n        }\n    }\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n        byteData.position(start + bomLength);\n    }\n\n    String docData;\n    Document doc = null;\n\n    if (charsetName == null) {\n        // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String found = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                found = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (found == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\")))\n                        found = meta.attr(\"charset\");\n                } catch (IllegalCharsetNameException e) {\n                    found = null;\n                }\n            }\n            if (found != null && found.length() != 0 && !found.equals(defaultCharset)) {\n                found = found.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = found;\n                byteData.rewind();\n                docData = Charset.forName(found).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. \"\n            + \"Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // legacy BOM-as-character check\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        docData = docData.substring(1);\n        charsetName = defaultCharset;\n        doc = null;\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}