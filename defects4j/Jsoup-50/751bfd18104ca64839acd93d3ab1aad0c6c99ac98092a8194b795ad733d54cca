{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    byteData.mark();\n    // Look for BOM first - will override any other detection\n    BomCharset bomCharset = detectCharsetFromBOM(byteData);\n    if (bomCharset != null) {\n        charsetName = bomCharset.charset;\n    }\n    byteData.reset();\n    \n    String docData;\n    Document doc = null;\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    \n    // Skip BOM if present in the string\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n    }\n    \n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static final class BomCharset {\n    private final String charset;\n    private final int offset;\n\n    public BomCharset(String charset, int offset) {\n        this.charset = charset;\n        this.offset = offset;\n    }\n}\n\nprivate static BomCharset detectCharsetFromBOM(ByteBuffer byteData) {\n    if (byteData.remaining() < 4) {\n        return null;\n    }\n    \n    byte[] bom = new byte[4];\n    byteData.get(bom, 0, 4);\n    byteData.position(0);\n    \n    // UTF-8 BOM (EF BB BF)\n    if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n        return new BomCharset(\"UTF-8\", 3);\n    }\n    // UTF-16BE BOM (FE FF)\n    else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        return new BomCharset(\"UTF-16BE\", 2);\n    }\n    // UTF-16LE BOM (FF FE)\n    else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && !(bom[2] == 0x00 && bom[3] == 0x00)) {\n        return new BomCharset(\"UTF-16LE\", 2);\n    }\n    // UTF-32BE BOM (00 00 FE FF)\n    else if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        return new BomCharset(\"UTF-32BE\", 4);\n    }\n    // UTF-32LE BOM (FF FE 00 00)\n    else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) {\n        return new BomCharset(\"UTF-32LE\", 4);\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}