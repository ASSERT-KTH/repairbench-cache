{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    String detectedCharset = null;\n\n    // Check for BOM first - overrides any other header or input\n    byteData.mark();\n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder();\n    try {\n        decoder.decode(byteData.asReadOnlyBuffer());\n        byteData.reset();\n    } catch (CharacterCodingException e) {\n        // Not UTF-8, try other encodings\n        byteData.reset();\n        if (byteData.remaining() >= 2) {\n            byte[] bom = new byte[2];\n            byteData.get(bom);\n            byteData.rewind();\n            if ((bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF)) {\n                detectedCharset = \"UTF-16BE\";\n            } else if ((bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)) {\n                detectedCharset = \"UTF-16LE\";\n            }\n        }\n        if (detectedCharset == null && byteData.remaining() >= 4) {\n            byte[] bom = new byte[4];\n            byteData.get(bom);\n            byteData.rewind();\n            if ((bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF)) {\n                detectedCharset = \"UTF-32BE\";\n            } else if ((bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00)) {\n                detectedCharset = \"UTF-32LE\";\n            }\n        }\n    }\n\n    // Use detected charset if found, otherwise use provided charsetName or default\n    if (detectedCharset != null) {\n        charsetName = detectedCharset;\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}