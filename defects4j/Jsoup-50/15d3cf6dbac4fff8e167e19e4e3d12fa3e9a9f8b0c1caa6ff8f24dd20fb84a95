{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    if (charsetName == null) {\n        charsetName = detectCharset(byteData); // Detect BOM and determine charset\n        if (charsetName == null) {\n            charsetName = defaultCharset; // Fallback to default if detection fails\n        }\n        byteData.rewind();\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static String detectCharset(ByteBuffer byteData) {\n    byte[] bom = new byte[4];\n    byteData.get(bom); // Peek the first few bytes\n    byteData.rewind();\n\n    if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n        return \"UTF-16BE\";\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n        return \"UTF-16LE\";\n    } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        return \"UTF-32BE\";\n    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n        return \"UTF-32LE\";\n    } else if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        return defaultCharset;\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}