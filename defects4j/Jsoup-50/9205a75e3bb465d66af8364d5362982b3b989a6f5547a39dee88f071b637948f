{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    String detectedCharset = null;\n\n    // Check for BOM first\n    byteData.mark();\n    CharsetDecoder decoder = null;\n    try {\n        decoder = CharsetUtil.detectCharsetFromBom(byteData);\n    } catch (IOException e) {\n        // No BOM found, continue with other detection methods\n    }\n\n    if (decoder != null) {\n        // BOM detected, use its charset\n        byteData.reset();\n        try {\n            docData = decoder.decode(byteData).toString();\n            detectedCharset = decoder.charset().name();\n        } catch (CharacterCodingException e) {\n            // Fall back to default if BOM detection fails\n            byteData.reset();\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            detectedCharset = defaultCharset;\n        }\n    } else {\n        // No BOM found, proceed with other detection methods\n        byteData.reset();\n\n        if (charsetName == null) { // determine from meta. safe parse as UTF-8\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    detectedCharset = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else { // specified by content type header\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n            detectedCharset = charsetName;\n        }\n    }\n\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        docData = docData.substring(1);\n        detectedCharset = defaultCharset;\n        doc = null;\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(detectedCharset != null ? detectedCharset : charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}