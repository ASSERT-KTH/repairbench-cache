{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // ---- 1. BOM sniffing (overrides any other) ----\n    byteData.mark();\n    String bomCharset = null;\n    int bomSkip = 0;\n    // 4-byte BOMs\n    if (byteData.remaining() >= 4) {\n        int b1 = byteData.get() & 0xFF;\n        int b2 = byteData.get() & 0xFF;\n        int b3 = byteData.get() & 0xFF;\n        int b4 = byteData.get() & 0xFF;\n        if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) {\n            bomCharset = \"UTF-32BE\"; bomSkip = 4;\n        } else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) {\n            bomCharset = \"UTF-32LE\"; bomSkip = 4;\n        }\n    }\n    // 3-byte UTF-8 BOM\n    if (bomCharset == null) {\n        byteData.reset();\n        if (byteData.remaining() >= 3) {\n            int b1 = byteData.get() & 0xFF;\n            int b2 = byteData.get() & 0xFF;\n            int b3 = byteData.get() & 0xFF;\n            if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {\n                bomCharset = \"UTF-8\"; bomSkip = 3;\n            }\n        }\n    }\n    // 2-byte UTF-16 BOMs\n    if (bomCharset == null) {\n        byteData.reset();\n        if (byteData.remaining() >= 2) {\n            int b1 = byteData.get() & 0xFF;\n            int b2 = byteData.get() & 0xFF;\n            if (b1 == 0xFE && b2 == 0xFF) {\n                bomCharset = \"UTF-16BE\"; bomSkip = 2;\n            } else if (b1 == 0xFF && b2 == 0xFE) {\n                bomCharset = \"UTF-16LE\"; bomSkip = 2;\n            }\n        }\n    }\n    // apply BOM skip & override charsetName\n    if (bomCharset != null) {\n        byteData.reset();\n        byteData.position(bomSkip);\n        charsetName = bomCharset;\n    } else {\n        byteData.reset();\n    }\n\n    // ---- 2. Decode to string, possibly sniff meta if no charset yet ----\n    Document doc = null;\n    String docData;\n    if (charsetName == null) {\n        // safe parse as default (UTF-8) to find a meta charset\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        String foundCharset = null;\n        if (meta != null) {\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    String cs = meta.attr(\"charset\");\n                    if (Charset.isSupported(cs)) foundCharset = cs;\n                } catch (IllegalCharsetNameException e) {\n                    // ignore invalid names\n                }\n            }\n        }\n        // re-decode if we found a different charset\n        if (foundCharset != null\n            && foundCharset.length() != 0\n            && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n            charsetName = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n            byteData.rewind();\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n            doc = null;\n        }\n    } else {\n        Validate.notEmpty(charsetName,\n            \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        // manual UTF-32 decode if needed\n        if (\"UTF-32BE\".equalsIgnoreCase(charsetName) || \"UTF-32LE\".equalsIgnoreCase(charsetName)) {\n            boolean isLE = charsetName.toUpperCase().endsWith(\"LE\");\n            ByteBuffer buf = byteData.duplicate();\n            buf.position(byteData.position());\n            StringBuilder sb = new StringBuilder();\n            while (buf.remaining() >= 4) {\n                int b1 = buf.get() & 0xFF;\n                int b2 = buf.get() & 0xFF;\n                int b3 = buf.get() & 0xFF;\n                int b4 = buf.get() & 0xFF;\n                int codePoint = isLE\n                    ? ((b4 << 24) | (b3 << 16) | (b2 << 8) | b1)\n                    : ((b1 << 24) | (b2 << 16) | (b3 << 8) | b4);\n                sb.append(Character.toChars(codePoint));\n            }\n            docData = sb.toString();\n        } else {\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n    }\n\n    // ---- 3. Final parse if we haven't already ----\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n    }\n    // set output charset\n    doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}