{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // look for BOM - overrides any other header or input\n    if (byteData != null && byteData.limit() > 0) {\n        byteData.mark();\n        byte[] bom = new byte[4];\n        int readBytes = Math.min(byteData.limit(), bom.length);\n        byteData.get(bom, 0, readBytes);\n        byteData.reset();\n\n        int bomCharsetOffset = detectCharsetFromBom(bom, readBytes);\n        if (bomCharsetOffset != -1) {\n            charsetName = CHARSETS[bomCharsetOffset];\n            byteData.position(bomLength[readBytes - 1]);\n        }\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static final String[] CHARSETS = new String[]{\"UTF-8\", \"UTF-16BE\", \"UTF-16LE\", \"UTF-32BE\", \"UTF-32LE\"};\nprivate static final int[] bomLength = new int[]{0, 2, 2, 4, 4};\n\nprivate static int detectCharsetFromBom(byte[] bom, int readBytes) {\n    if (readBytes >= 2 && bom[0] == 0xFE && bom[1] == (byte) 0xFF) {\n        return 1;\n    } else if (readBytes >= 2 && bom[0] == (byte) 0xFF && bom[1] == 0xFE) {\n        return bom.length > 3 && bom[2] == 0 && bom[3] == 0 ? 4 : 2;\n    } else if (readBytes >= 3 && bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n        return 0;\n    } else if (readBytes >= 4 && bom[0] == 0 && bom[1] == 0 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n        return 3;\n    }\n    return -1;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}