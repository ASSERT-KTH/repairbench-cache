{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Detect BOM and determine charset\n    if (!byteData.hasRemaining()) {\n        return null;\n    }\n\n    // Read ahead for BOM\n    byteData.mark();\n    byte[] bomBytes = new byte[4];\n    int read = byteData.get(bomBytes);\n    byteData.reset();\n\n    if (read >= 3) {\n        if (startsWith(bomBytes, 0, 3, (byte) 0xFE, (byte) 0xFF)) { // UTF-16BE\n            charsetName = \"UTF-16BE\";\n            byteData.position(2);\n        } else if (startsWith(bomBytes, 0, 3, (byte) 0xFF, (byte) 0xFE)) { // UTF-16LE\n            charsetName = \"UTF-16LE\";\n            byteData.position(2);\n        }\n    }\n    if (read >= 4) {\n        if (startsWith(bomBytes, 0, 4, (byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0xFF)) { // UTF-32BE\n            charsetName = \"UTF-32BE\";\n            byteData.position(4);\n        } else if (startsWith(bomBytes, 0, 4, (byte) 0xFF, (byte) 0xFE, (byte) 0x00, (byte) 0x00)) { // UTF-32LE\n            charsetName = \"UTF-32LE\";\n            byteData.position(4);\n        }\n    }\n    if (read >= 3) {\n        if (bomBytes[0] == (byte) 0xEF && bomBytes[1] == (byte) 0xBB && bomBytes[2] == (byte) 0xBF) { // UTF-8\n            charsetName = \"UTF-8\";\n            byteData.position(3);\n        }\n    }\n\n    // If charsetName is null, determine from meta\n    if (charsetName == null) {\n        charsetName = defaultCharset; // Start with default\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.equals(charsetName)) {\n                charsetName = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                byteData.rewind();\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n\n    return doc;\n}\n\nprivate static boolean startsWith(byte[] array, int offset, int length, byte... values) {\n    if (array.length - offset < values.length) {\n        return false;\n    }\n    for (int i = 0; i < values.length; i++) {\n        if (array[offset + i] != values[i]) {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}