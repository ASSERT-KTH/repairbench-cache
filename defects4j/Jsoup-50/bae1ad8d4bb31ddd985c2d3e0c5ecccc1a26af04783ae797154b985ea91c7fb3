{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        Charset charset = null;\n\n        // Check for BOM first\n        byteData.mark();\n        String bomCharset = detectCharsetFromBom(byteData);\n        if (bomCharset != null) {\n            charsetName = bomCharset;\n            charset = Charset.forName(charsetName);\n            byteData.reset();\n        } else {\n            byteData.reset();\n            // If no BOM, use the provided charset or try to detect from content\n            if (charsetName == null) {\n                // Try to detect charset from content\n                docData = Charset.forName(defaultCharset).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri);\n                Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n                if (meta != null) {\n                    String foundCharset = null;\n                    if (meta.hasAttr(\"http-equiv\")) {\n                        foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                    }\n                    if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                        try {\n                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n                                foundCharset = meta.attr(\"charset\");\n                            }\n                        } catch (IllegalCharsetNameException e) {\n                            foundCharset = null;\n                        }\n                    }\n\n                    if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                        foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                        charsetName = foundCharset;\n                        byteData.rewind();\n                        doc = null;\n                    }\n                }\n            }\n\n            if (doc == null) {\n                if (charsetName == null) {\n                    charsetName = defaultCharset;\n                }\n                Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n                charset = Charset.forName(charsetName);\n                byteData.rewind();\n            }\n        }\n\n        // Now parse with the determined charset\n        if (doc == null) {\n            docData = charset.decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n\n        return doc;\n    }\n\n    private static String detectCharsetFromBom(ByteBuffer byteData) {\n        if (byteData.remaining() >= 2) {\n            byte first = byteData.get();\n            byte second = byteData.get();\n\n            if (first == (byte) 0xFE && second == (byte) 0xFF) {\n                return \"UTF-16BE\";\n            } else if (first == (byte) 0xFF && second == (byte) 0xFE) {\n                return \"UTF-16LE\";\n            }\n\n            byteData.position(byteData.position() - 2);\n        }\n\n        if (byteData.remaining() >= 4) {\n            byte[] bom = new byte[4];\n            byteData.get(bom);\n\n            if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 &&\n                bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {\n                return \"UTF-32BE\";\n            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE &&\n                       bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {\n                return \"UTF-32LE\";\n            }\n\n            byteData.position(byteData.position() - 4);\n        }\n\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}