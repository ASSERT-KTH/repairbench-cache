{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // look for BOM - overrides any other header or input\n    byte[] bomBuffer = new byte[4];\n    byteData.mark();\n    int available = Math.min(4, byteData.remaining());\n    byteData.get(bomBuffer, 0, available);\n    byteData.reset();\n\n    // Check for BOM (Byte Order Mark)\n    boolean hasBom = false;\n    String bomCharset = null;\n\n    if (available >= 2) {\n        // Check for UTF-16 BE\n        if (bomBuffer[0] == (byte)0xFE && bomBuffer[1] == (byte)0xFF) {\n            hasBom = true;\n            bomCharset = \"UTF-16BE\";\n        }\n        // Check for UTF-16 LE\n        else if (bomBuffer[0] == (byte)0xFF && bomBuffer[1] == (byte)0xFE) {\n            hasBom = true;\n            bomCharset = \"UTF-16LE\";\n        }\n    }\n\n    if (available >= 4) {\n        // Check for UTF-32 BE\n        if (bomBuffer[0] == (byte)0x00 && bomBuffer[1] == (byte)0x00 &&\n            bomBuffer[2] == (byte)0xFE && bomBuffer[3] == (byte)0xFF) {\n            hasBom = true;\n            bomCharset = \"UTF-32BE\";\n        }\n        // Check for UTF-32 LE\n        else if (bomBuffer[0] == (byte)0xFF && bomBuffer[1] == (byte)0xFE &&\n                 bomBuffer[2] == (byte)0x00 && bomBuffer[3] == (byte)0x00) {\n            hasBom = true;\n            bomCharset = \"UTF-32LE\";\n        }\n        // Check for UTF-8 BOM\n        else if (bomBuffer[0] == (byte)0xEF && bomBuffer[1] == (byte)0xBB && bomBuffer[2] == (byte)0xBF) {\n            hasBom = true;\n            bomCharset = \"UTF-8\";\n        }\n    }\n\n    if (hasBom) {\n        charsetName = bomCharset;\n        // Skip BOM bytes\n        if (\"UTF-8\".equals(bomCharset)) {\n            byteData.position(byteData.position() + 3);\n        } else if (\"UTF-16BE\".equals(bomCharset) || \"UTF-16LE\".equals(bomCharset)) {\n            byteData.position(byteData.position() + 2);\n        } else if (\"UTF-32BE\".equals(bomCharset) || \"UTF-32LE\".equals(bomCharset)) {\n            byteData.position(byteData.position() + 4);\n        }\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    }\n\n    if (charsetName != null && hasBom) {\n        // Already handled BOM, now decode the rest\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    } else if (charsetName != null) {\n        // Specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    } else {\n        // Fall back to UTF-8 if no charset specified and no BOM found\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n    }\n\n    // Handle UTF-8 BOM character if present in the decoded string (rare case where BOM wasn't skipped properly)\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        docData = docData.substring(1);\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}