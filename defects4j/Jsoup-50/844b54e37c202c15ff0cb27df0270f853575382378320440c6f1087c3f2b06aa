{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // look for BOM - overrides any other header or input\n    ByteBuffer buf = byteData.duplicate();\n    buf.position(0);\n    int limit = buf.limit();\n    int b0 = limit > 0 ? buf.get(0) & 0xFF : -1;\n    int b1 = limit > 1 ? buf.get(1) & 0xFF : -1;\n    int b2 = limit > 2 ? buf.get(2) & 0xFF : -1;\n    int b3 = limit > 3 ? buf.get(3) & 0xFF : -1;\n    String bomCharset = null;\n    int bomLength = 0;\n    if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {\n        bomCharset = \"UTF-32BE\"; bomLength = 4;\n    } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {\n        bomCharset = \"UTF-32LE\"; bomLength = 4;\n    } else if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {\n        bomCharset = \"UTF-8\";    bomLength = 3;\n    } else if (b0 == 0xFE && b1 == 0xFF) {\n        bomCharset = \"UTF-16BE\"; bomLength = 2;\n    } else if (b0 == 0xFF && b1 == 0xFE) {\n        bomCharset = \"UTF-16LE\"; bomLength = 2;\n    }\n    if (bomCharset != null) {\n        // skip BOM bytes and decode\n        charsetName = bomCharset;\n        byteData.position(bomLength);\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n        return doc;\n    }\n\n    // no BOM detected, reset buffer\n    byteData.rewind();\n\n    if (charsetName == null) {\n        // safe parse as UTF-8 (defaultCharset)\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n\n        // look for <meta http-equiv=\"Content-Type\"...> or <meta charset=...>\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                // re-decode with the meta charset\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName,\n            \"Must set charset arg to character set of file to parse. \" +\n            \"Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // if there's a leading Unicode BOM character, remove it\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        docData = docData.substring(1);\n        charsetName = defaultCharset;\n        doc = null;\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n    }\n    doc.outputSettings().charset(charsetName);\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}