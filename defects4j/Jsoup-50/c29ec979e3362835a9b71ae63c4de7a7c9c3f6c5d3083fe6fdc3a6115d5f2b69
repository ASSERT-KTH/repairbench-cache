{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        Charset charset = null;\n\n        // Check for BOM first - overrides any other header or input\n        byteData.mark();\n        byte[] bom = new byte[4];\n        int bomLength = Math.min(4, byteData.remaining());\n        byteData.get(bom, 0, bomLength);\n        byteData.reset();\n\n        if (bomLength >= 2) {\n            if ((bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) ||\n                (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)) {\n                // UTF-16 BE/LE\n                if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {\n                    charset = Charset.forName(\"UTF-16BE\");\n                } else {\n                    charset = Charset.forName(\"UTF-16LE\");\n                }\n            } else if (bomLength >= 4) {\n                if ((bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 &&\n                    bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF)) {\n                    // UTF-32 BE\n                    charset = Charset.forName(\"UTF-32BE\");\n                } else if ((bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE &&\n                          bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00)) {\n                    // UTF-32 LE\n                    charset = Charset.forName(\"UTF-32LE\");\n                }\n            }\n        }\n\n        if (charset != null) {\n            charsetName = charset.name();\n            byteData.position(byteData.position() + charset.newDecoder().detectBOM(byteData).length());\n        } else if (charsetName == null) {\n            // No BOM found, determine from meta. Safe parse as UTF-8 first\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else {\n            // Specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}