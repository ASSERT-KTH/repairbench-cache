{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // First try to detect BOM to determine charset\n        Charset detectedCharset = detectCharsetFromBom(byteData);\n        if (detectedCharset != null) {\n            charsetName = detectedCharset.name();\n            byteData.rewind();\n        }\n        // If BOM wasn't found, proceed with the original logic\n        else if (charsetName == null) {\n            // Fallback to detecting charset from meta tags\n            docData = Charset.forName(defaultCharset).decode(byteData.asReadOnlyBuffer()).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    doc = null;\n                }\n            }\n        }\n\n        // Now decode with the appropriate charset (whether detected from BOM, meta tag, or provided)\n        if (charsetName == null) {\n            // If we still don't have a charset, use default\n            charsetName = defaultCharset;\n        }\n\n        // Always rewind before decoding\n        byteData.rewind();\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n\n        // Remove BOM if present (handles UTF-8 BOM specifically)\n        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n            docData = docData.substring(1);\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }\n\n    private static Charset detectCharsetFromBom(ByteBuffer byteData) {\n        byte[] bom = new byte[4];\n        byteData.mark();\n        byteData.get(bom, 0, Math.min(4, byteData.remaining()));\n        byteData.reset();\n\n        if (bom.length >= 2) {\n            // UTF-16 BE\n            if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {\n                return Charset.forName(\"UTF-16BE\");\n            }\n            // UTF-16 LE\n            if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {\n                return Charset.forName(\"UTF-16LE\");\n            }\n        }\n        if (bom.length >= 3) {\n            // UTF-8 BOM\n            if (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {\n                return Charset.forName(\"UTF-8\");\n            }\n        }\n        if (bom.length >= 4) {\n            // UTF-32 BE\n            if (bom[0] == (byte)0x00 && bom[1] == (byte)0x00 &&\n                bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {\n                return Charset.forName(\"UTF-32BE\");\n            }\n            // UTF-32 LE\n            if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE &&\n                bom[2] == (byte)0x00 && bom[3] == (byte)0x00) {\n                return Charset.forName(\"UTF-32LE\");\n            }\n        }\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}