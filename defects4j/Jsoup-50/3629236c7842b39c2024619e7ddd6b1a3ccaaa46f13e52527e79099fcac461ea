{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Determine the charset to use\u2014BOM (if present) always takes precedence\n    String effectiveCharset = charsetName; // may be null\n    boolean bomSeen = false;\n    int pos = byteData.position();\n\n    // Check for UTF-32 BOMs (4 bytes)\n    if (byteData.remaining() >= 4) {\n        int b0 = byteData.get(pos) & 0xff;\n        int b1 = byteData.get(pos + 1) & 0xff;\n        int b2 = byteData.get(pos + 2) & 0xff;\n        int b3 = byteData.get(pos + 3) & 0xff;\n        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {\n            effectiveCharset = \"UTF-32BE\";\n            byteData.position(pos + 4);\n            bomSeen = true;\n        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {\n            effectiveCharset = \"UTF-32LE\";\n            byteData.position(pos + 4);\n            bomSeen = true;\n        }\n    }\n\n    // Check for UTF-8 BOM (3 bytes)\n    pos = byteData.position();\n    if (!bomSeen && byteData.remaining() >= 3) {\n        int b0 = byteData.get(pos) & 0xff;\n        int b1 = byteData.get(pos + 1) & 0xff;\n        int b2 = byteData.get(pos + 2) & 0xff;\n        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {\n            effectiveCharset = \"UTF-8\";\n            byteData.position(pos + 3);\n            bomSeen = true;\n        }\n    }\n\n    // Check for UTF-16 BOM (2 bytes)\n    pos = byteData.position();\n    if (!bomSeen && byteData.remaining() >= 2) {\n        int b0 = byteData.get(pos) & 0xff;\n        int b1 = byteData.get(pos + 1) & 0xff;\n        if (b0 == 0xFE && b1 == 0xFF) {\n            effectiveCharset = \"UTF-16BE\";\n            byteData.position(pos + 2);\n            bomSeen = true;\n        } else if (b0 == 0xFF && b1 == 0xFE) {\n            effectiveCharset = \"UTF-16LE\";\n            byteData.position(pos + 2);\n            bomSeen = true;\n        }\n    }\n\n    // If no charset is provided and no BOM was detected, fall back to the default.\n    if (effectiveCharset == null)\n        effectiveCharset = defaultCharset;\n\n    // Decode the document text using the effective charset.\n    docData = Charset.forName(effectiveCharset).decode(byteData).toString();\n\n    // If no charset was explicitly supplied and no BOM was found, \n    // then check for a <meta> tag that might declare a different charset.\n    if (charsetName == null && !bomSeen) {\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\"))\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\")))\n                        foundCharset = meta.attr(\"charset\");\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 \n                    && !foundCharset.equalsIgnoreCase(effectiveCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                effectiveCharset = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(effectiveCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(effectiveCharset);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}