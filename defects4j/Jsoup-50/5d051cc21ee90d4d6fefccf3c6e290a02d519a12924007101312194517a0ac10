{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        Charset detectedCharset = null;\n\n        // Check for BOM - overrides any other header or input\n        if (byteData.hasRemaining()) {\n            byte b0 = byteData.get();\n            byte b1 = byteData.get();\n            byte b2 = byteData.get();\n            byte b3 = byteData.get();\n\n            if (b0 == (byte) 0xEF && b1 == (byte) 0xBB && b2 == (byte) 0xBF) {\n                // UTF-8 BOM\n                detectedCharset = StandardCharsets.UTF_8;\n                byteData.rewind();\n            } else if (b0 == (byte) 0xFF && b1 == (byte) 0xFE) {\n                // UTF-16LE BOM\n                detectedCharset = StandardCharsets.UTF_16LE;\n                byteData.rewind();\n            } else if (b0 == (byte) 0xFE && b1 == (byte) 0xFF) {\n                // UTF-16BE BOM\n                detectedCharset = StandardCharsets.UTF_16BE;\n                byteData.rewind();\n            } else if (b0 == (byte) 0x00 && b1 == (byte) 0x00 && b2 == (byte) 0xFE && b3 == (byte) 0xFF) {\n                // UTF-32BE BOM\n                detectedCharset = Charset.forName(\"UTF-32BE\");\n                byteData.rewind();\n            } else if (b0 == (byte) 0xFF && b1 == (byte) 0xFE && b2 == (byte) 0x00 && b3 == (byte) 0x00) {\n                // UTF-32LE BOM\n                detectedCharset = Charset.forName(\"UTF-32LE\");\n                byteData.rewind();\n            } else {\n                byteData.rewind();\n            }\n        }\n\n        if (charsetName == null) {\n            // Determine from meta, safe parse as UTF-8\n            if (detectedCharset == null) {\n                detectedCharset = StandardCharsets.UTF_8;\n            }\n            docData = detectedCharset.decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(detectedCharset.name())) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else {\n            // Specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName != null ? charsetName : detectedCharset.name());\n        }\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}