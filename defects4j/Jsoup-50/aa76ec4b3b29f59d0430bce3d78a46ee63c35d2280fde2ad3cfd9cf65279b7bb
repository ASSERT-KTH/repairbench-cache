{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // Record whether a charset was explicitly provided.\n    boolean charsetProvided = (charsetName != null);\n    boolean bomFound = false;\n    int bomOffset = 0;\n    \n    // Duplicate the buffer so we can inspect the initial bytes without changing the caller\u2019s position.\n    ByteBuffer bb = byteData.duplicate();\n    \n    // Check for a 4-byte BOM (UTF-32)\n    if (bb.remaining() >= 4) {\n        // UTF-32BE: 00 00 FE FF\n        if (bb.get(0) == 0x00 && bb.get(1) == 0x00 && bb.get(2) == (byte) 0xFE && bb.get(3) == (byte) 0xFF) {\n            charsetName = \"UTF-32BE\";\n            bomFound = true;\n            bomOffset = 4;\n        }\n        // UTF-32LE: FF FE 00 00\n        else if (bb.get(0) == (byte) 0xFF && bb.get(1) == (byte) 0xFE && bb.get(2) == 0x00 && bb.get(3) == 0x00) {\n            charsetName = \"UTF-32LE\";\n            bomFound = true;\n            bomOffset = 4;\n        }\n    }\n    // Check for a 3-byte BOM (UTF-8)\n    if (!bomFound && bb.remaining() >= 3) {\n        // UTF-8: EF BB BF\n        if (bb.get(0) == (byte) 0xEF && bb.get(1) == (byte) 0xBB && bb.get(2) == (byte) 0xBF) {\n            charsetName = \"UTF-8\";\n            bomFound = true;\n            bomOffset = 3;\n        }\n    }\n    // Check for a 2-byte BOM (UTF-16)\n    if (!bomFound && bb.remaining() >= 2) {\n        // UTF-16BE: FE FF\n        if (bb.get(0) == (byte) 0xFE && bb.get(1) == (byte) 0xFF) {\n            charsetName = \"UTF-16BE\";\n            bomFound = true;\n            bomOffset = 2;\n        }\n        // UTF-16LE: FF FE\n        else if (bb.get(0) == (byte) 0xFF && bb.get(1) == (byte) 0xFE) {\n            charsetName = \"UTF-16LE\";\n            bomFound = true;\n            bomOffset = 2;\n        }\n    }\n    \n    // If a BOM was found, advance the position to skip it.\n    if (bomFound) {\n        byteData.position(byteData.position() + bomOffset);\n    }\n    \n    // Determine the charset to use. If still null, fall back to the default charset.\n    String effectiveCharset = (charsetName != null ? charsetName : defaultCharset);\n    String docData = Charset.forName(effectiveCharset).decode(byteData).toString();\n    \n    // If no explicit charset was provided and no BOM was found, try to detect a charset\n    // specified in a meta tag within the HTML.\n    if (!charsetProvided && !bomFound) {\n        Document docTest = parser.parseInput(docData, baseUri);\n        Element meta = docTest.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\"))\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\")))\n                        foundCharset = meta.attr(\"charset\");\n                } catch (IllegalCharsetNameException e) {\n                    // ignore, will use default\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                effectiveCharset = foundCharset;\n                charsetName = foundCharset;\n                // Reset the buffer to re-read it from the very beginning.\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n            }\n        }\n    }\n    \n    Document doc = parser.parseInput(docData, baseUri);\n    doc.outputSettings().charset(effectiveCharset);\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}