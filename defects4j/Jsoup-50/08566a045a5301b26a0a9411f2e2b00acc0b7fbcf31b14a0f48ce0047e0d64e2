{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    // Detect and process Byte Order Mark (BOM) if present. BOM always wins over any provided charset.\n    boolean hasBOM = false;\n    String detectedCharset = null;\n    int bomSkip = 0;\n    int pos = byteData.position();\n    \n    // Check for 4\u2010byte BOMs (UTF-32)\n    if (byteData.remaining() >= 4) {\n        byte b0 = byteData.get(pos);\n        byte b1 = byteData.get(pos + 1);\n        byte b2 = byteData.get(pos + 2);\n        byte b3 = byteData.get(pos + 3);\n        if (b0 == (byte)0x00 && b1 == (byte)0x00 && b2 == (byte)0xFE && b3 == (byte)0xFF) {\n            detectedCharset = \"UTF-32BE\";\n            bomSkip = 4;\n        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE && b2 == (byte)0x00 && b3 == (byte)0x00) {\n            detectedCharset = \"UTF-32LE\";\n            bomSkip = 4;\n        }\n    }\n    // Check for 3\u2010byte BOM (UTF-8)\n    if (detectedCharset == null && byteData.remaining() >= 3) {\n        pos = byteData.position();\n        byte b0 = byteData.get(pos);\n        byte b1 = byteData.get(pos + 1);\n        byte b2 = byteData.get(pos + 2);\n        if (b0 == (byte)0xEF && b1 == (byte)0xBB && b2 == (byte)0xBF) {\n            detectedCharset = \"UTF-8\";\n            bomSkip = 3;\n        }\n    }\n    // Check for 2\u2010byte BOMs (UTF-16)\n    if (detectedCharset == null && byteData.remaining() >= 2) {\n        pos = byteData.position();\n        byte b0 = byteData.get(pos);\n        byte b1 = byteData.get(pos + 1);\n        if (b0 == (byte)0xFE && b1 == (byte)0xFF) {\n            detectedCharset = \"UTF-16BE\";\n            bomSkip = 2;\n        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE) {\n            detectedCharset = \"UTF-16LE\";\n            bomSkip = 2;\n        }\n    }\n    if (detectedCharset != null) {\n        // BOM overrides everything else\n        charsetName = detectedCharset;\n        hasBOM = true;\n        // Advance the buffer position past the BOM bytes.\n        byteData.position(byteData.position() + bomSkip);\n    }\n    \n    String docData;\n    Document doc = null;\n    \n    if (charsetName == null) {\n        // No charset provided and no BOM found: use default charset and then try to detect from meta.\n        charsetName = defaultCharset;\n        // Ensure we decode from the beginning.\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\"))\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        // If a charset was specified (or detected via BOM), use that.\n        // If we didn't already consume BOM bytes, rewind the buffer.\n        if (!hasBOM)\n            byteData.rewind();\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    \n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}