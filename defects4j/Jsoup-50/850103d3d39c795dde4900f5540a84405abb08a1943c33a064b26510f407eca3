{
    "generation": "    // Fixed version of the buggy function\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // Handle BOM (Byte Order Mark) first\n        if (byteData.remaining() >= 2 && byteData.get(0) == (byte) 0xFE && byteData.get(1) == (byte) 0xFF) {\n            // UTF-16BE BOM\n            charsetName = \"UTF-16BE\";\n            byteData.position(2);\n        } else if (byteData.remaining() >= 2 && byteData.get(0) == (byte) 0xFF && byteData.get(1) == (byte) 0xFE) {\n            // UTF-16LE BOM\n            charsetName = \"UTF-16LE\";\n            byteData.position(2);\n        } else if (byteData.remaining() >= 4 && byteData.get(0) == 0x00 && byteData.get(1) == 0x00 && byteData.get(2) == (byte) 0xFE && byteData.get(3) == (byte) 0xFF) {\n            // UTF-32BE BOM\n            charsetName = \"UTF-32BE\";\n            byteData.position(4);\n        } else if (byteData.remaining() >= 4 && byteData.get(0) == (byte) 0xFF && byteData.get(1) == (byte) 0xFE && byteData.get(2) == 0x00 && byteData.get(3) == 0x00) {\n            // UTF-32LE BOM\n            charsetName = \"UTF-32LE\";\n            byteData.position(4);\n        } else if (byteData.remaining() >= 3 && byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {\n            // UTF-8 BOM\n            charsetName = \"UTF-8\";\n            byteData.position(3);\n        }\n\n        byteData.rewind(); // Reset position for decoding\n\n        if (charsetName == null) { // Determine charset from meta tags\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) {\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    charsetName = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else { // Use specified charset\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}