{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        String resolvedCharset = charsetName;\n\n        // look for BOM - overrides any other header or input\n        byteData.mark();\n        byte[] bomPrefix = new byte[4];\n        byteData.get(bomPrefix);\n        byteData.reset();\n\n        try {\n            CharsetDecoder decoder;\n            if (hasBom(bomPrefix)) {\n                String bomCharset = detectCharsetFromBom(bomPrefix);\n                if (bomCharset != null) {\n                    resolvedCharset = bomCharset;\n                }\n            }\n\n            if (resolvedCharset == null) { // determine from meta. parse as default charset first\n                docData = Charset.forName(defaultCharset).decode(byteData).toString();\n                doc = parser.parseInput(docData, baseUri);\n                Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n                if (meta != null) { // if not found, will keep default charset\n                    String foundCharset = null;\n                    if (meta.hasAttr(\"http-equiv\")) {\n                        foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                    }\n                    if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                        try {\n                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n                                foundCharset = meta.attr(\"charset\");\n                            }\n                        } catch (IllegalCharsetNameException e) {\n                            foundCharset = null;\n                        }\n                    }\n\n                    if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                        foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                        resolvedCharset = foundCharset;\n                        byteData.rewind();\n                    }\n                }\n            }\n\n            // Now decode with the resolved charset\n            byteData.rewind();\n            if (resolvedCharset == null) {\n                resolvedCharset = defaultCharset;\n            }\n            docData = Charset.forName(resolvedCharset).decode(byteData).toString();\n\n            // Check for BOM in the decoded data (UTF-8 BOM case)\n            if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n                docData = docData.substring(1);\n            }\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(resolvedCharset);\n        } catch (Exception e) {\n            // Fallback to default charset if anything goes wrong\n            byteData.rewind();\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(defaultCharset);\n        }\n        return doc;\n    }\n\n    private static boolean hasBom(byte[] bomPrefix) {\n        // Check for UTF-8 BOM\n        if (bomPrefix.length >= 3 && (bomPrefix[0] == (byte)0xEF) && (bomPrefix[1] == (byte)0xBB) && (bomPrefix[2] == (byte)0xBF)) {\n            return true;\n        }\n        // Check for UTF-16 BE BOM\n        if (bomPrefix.length >= 2 && (bomPrefix[0] == (byte)0xFE) && (bomPrefix[1] == (byte)0xFF)) {\n            return true;\n        }\n        // Check for UTF-16 LE BOM\n        if (bomPrefix.length >= 2 && (bomPrefix[0] == (byte)0xFF) && (bomPrefix[1] == (byte)0xFE)) {\n            return true;\n        }\n        // Check for UTF-32 BE BOM\n        if (bomPrefix.length >= 4 && (bomPrefix[0] == (byte)0x00) && (bomPrefix[1] == (byte)0x00) && (bomPrefix[2] == (byte)0xFE) && (bomPrefix[3] == (byte)0xFF)) {\n            return true;\n        }\n        // Check for UTF-32 LE BOM\n        if (bomPrefix.length >= 4 && (bomPrefix[0] == (byte)0xFF) && (bomPrefix[1] == (byte)0xFE) && (bomPrefix[2] == (byte)0x00) && (bomPrefix[3] == (byte)0x00)) {\n            return true;\n        }\n        return false;\n    }\n\n    private static String detectCharsetFromBom(byte[] bomPrefix) {\n        // UTF-8 BOM\n        if (bomPrefix.length >= 3 && (bomPrefix[0] == (byte)0xEF) && (bomPrefix[1] == (byte)0xBB) && (bomPrefix[2] == (byte)0xBF)) {\n            return \"UTF-8\";\n        }\n        // UTF-16 BE BOM\n        if (bomPrefix.length >= 2 && (bomPrefix[0] == (byte)0xFE) && (bomPrefix[1] == (byte)0xFF)) {\n            return \"UTF-16BE\";\n        }\n        // UTF-16 LE BOM\n        if (bomPrefix.length >= 2 && (bomPrefix[0] == (byte)0xFF) && (bomPrefix[1] == (byte)0xFE)) {\n            return \"UTF-16LE\";\n        }\n        // UTF-32 BE BOM\n        if (bomPrefix.length >= 4 && (bomPrefix[0] == (byte)0x00) && (bomPrefix[1] == (byte)0x00) && (bomPrefix[2] == (byte)0xFE) && (bomPrefix[3] == (byte)0xFF)) {\n            return \"UTF-32BE\";\n        }\n        // UTF-32 LE BOM\n        if (bomPrefix.length >= 4 && (bomPrefix[0] == (byte)0xFF) && (bomPrefix[1] == (byte)0xFE) && (bomPrefix[2] == (byte)0x00) && (bomPrefix[3] == (byte)0x00)) {\n            return \"UTF-32LE\";\n        }\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}