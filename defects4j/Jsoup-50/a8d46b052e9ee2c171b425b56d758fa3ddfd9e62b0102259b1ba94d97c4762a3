{
    "generation": "    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n        String detectedCharset = charsetName;\n\n        // Check for BOM first - overrides any other header or input\n        byteData.mark();\n        String bomCharset = detectCharsetFromBom(byteData);\n        if (bomCharset != null) {\n            detectedCharset = bomCharset;\n            byteData.reset();\n        } else {\n            byteData.reset();\n        }\n\n        if (detectedCharset == null) { // determine from meta. safe parse as UTF-8\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            if (meta != null) { // if not found, will keep utf-8 as best attempt\n                String foundCharset = null;\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    try {\n                        if (Charset.isSupported(meta.attr(\"charset\"))) {\n                            foundCharset = meta.attr(\"charset\");\n                        }\n                    } catch (IllegalCharsetNameException e) {\n                        foundCharset = null;\n                    }\n                }\n\n                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                    detectedCharset = foundCharset;\n                    byteData.rewind();\n                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n                    doc = null;\n                }\n            }\n        } else { // specified by content type header (or by user on file load)\n            Validate.notEmpty(detectedCharset, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(detectedCharset).decode(byteData).toString();\n        }\n\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(detectedCharset);\n        }\n        return doc;\n    }\n\n    private static String detectCharsetFromBom(ByteBuffer byteData) {\n        if (byteData.remaining() >= 4) {\n            byte[] bom = new byte[4];\n            byteData.get(bom);\n            if (bom[0] == (byte)0x00 && bom[1] == (byte)0x00 && bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {\n                return \"UTF-32BE\";\n            } else if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE && bom[2] == (byte)0x00 && bom[3] == (byte)0x00) {\n                return \"UTF-32LE\";\n            }\n        }\n        if (byteData.remaining() >= 2) {\n            byte[] bom = new byte[2];\n            byteData.get(bom);\n            if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {\n                return \"UTF-16BE\";\n            } else if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {\n                return \"UTF-16LE\";\n            }\n        }\n        return null;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}