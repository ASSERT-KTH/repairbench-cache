{
    "generation": "// todo - this is getting gnarly. needs a rewrite.\nstatic Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // look for BOM - overrides any other header or input\n    ByteBuffer buffer = byteData.duplicate();\n    buffer.position(0);\n    String bomCharset = null;\n    int bomLength = 0;\n\n    // UTF-32 BOM\n    if (buffer.remaining() >= 4) {\n        int b0 = buffer.get() & 0xFF;\n        int b1 = buffer.get() & 0xFF;\n        int b2 = buffer.get() & 0xFF;\n        int b3 = buffer.get() & 0xFF;\n        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {\n            bomCharset = \"UTF-32BE\";\n            bomLength = 4;\n        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {\n            bomCharset = \"UTF-32LE\";\n            bomLength = 4;\n        }\n    }\n    // UTF-16 BOM\n    if (bomCharset == null) {\n        buffer = byteData.duplicate();\n        buffer.position(0);\n        if (buffer.remaining() >= 2) {\n            int b0 = buffer.get() & 0xFF;\n            int b1 = buffer.get() & 0xFF;\n            if (b0 == 0xFE && b1 == 0xFF) {\n                bomCharset = \"UTF-16BE\";\n                bomLength = 2;\n            } else if (b0 == 0xFF && b1 == 0xFE) {\n                bomCharset = \"UTF-16LE\";\n                bomLength = 2;\n            }\n        }\n    }\n    // UTF-8 BOM\n    if (bomCharset == null) {\n        buffer = byteData.duplicate();\n        buffer.position(0);\n        if (buffer.remaining() >= 3) {\n            int b0 = buffer.get() & 0xFF;\n            int b1 = buffer.get() & 0xFF;\n            int b2 = buffer.get() & 0xFF;\n            if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {\n                bomCharset = defaultCharset; // typically \"UTF-8\"\n                bomLength = 3;\n            }\n        }\n    }\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n    }\n\n    if (charsetName == null) {\n        // auto-detect via meta, parse as UTF-8 first\n        ByteBuffer decodeBuf = byteData.duplicate();\n        decodeBuf.position(bomLength);\n        docData = Charset.forName(defaultCharset).decode(decodeBuf).toString();\n        doc = parser.parseInput(docData, baseUri);\n\n        // meta charset detection\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    String cs = meta.attr(\"charset\");\n                    if (Charset.isSupported(cs)) foundCharset = cs;\n                } catch (IllegalCharsetNameException e) {\n                    // ignore\n                }\n            }\n            if (foundCharset != null\n                && foundCharset.length() != 0\n                && !foundCharset.equalsIgnoreCase(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                ByteBuffer decodeBuf2 = byteData.duplicate();\n                decodeBuf2.position(bomLength);\n                docData = Charset.forName(foundCharset).decode(decodeBuf2).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \n            \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        ByteBuffer decodeBuf = byteData.duplicate();\n        decodeBuf.position(bomLength);\n\n        // manual UTF-32 decoding if needed\n        if (charsetName.equalsIgnoreCase(\"UTF-32BE\") || charsetName.equalsIgnoreCase(\"UTF-32LE\")) {\n            StringBuilder sb = new StringBuilder();\n            if (charsetName.equalsIgnoreCase(\"UTF-32BE\")) {\n                while (decodeBuf.remaining() >= 4) {\n                    int b0 = decodeBuf.get() & 0xFF;\n                    int b1 = decodeBuf.get() & 0xFF;\n                    int b2 = decodeBuf.get() & 0xFF;\n                    int b3 = decodeBuf.get() & 0xFF;\n                    int cp = (b0 << 24) | (b1 << 16) | (b2 << 8) | b3;\n                    sb.append((char) cp);\n                }\n            } else {\n                while (decodeBuf.remaining() >= 4) {\n                    int b0 = decodeBuf.get() & 0xFF;\n                    int b1 = decodeBuf.get() & 0xFF;\n                    int b2 = decodeBuf.get() & 0xFF;\n                    int b3 = decodeBuf.get() & 0xFF;\n                    int cp = (b3 << 24) | (b2 << 16) | (b1 << 8) | b0;\n                    sb.append((char) cp);\n                }\n            }\n            docData = sb.toString();\n        } else {\n            docData = Charset.forName(charsetName).decode(decodeBuf).toString();\n        }\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}