{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // look for BOM - overrides any other header or input\n    String bomCharset = null;\n    int bomOffset = 0;\n\n    // Inspect for BOM at start\n    if (byteData.remaining() >= 4) {\n        byte b0 = byteData.get(0);\n        byte b1 = byteData.get(1);\n        byte b2 = byteData.get(2);\n        byte b3 = byteData.get(3);\n\n        if (b0 == (byte)0x00 && b1 == (byte)0x00 && b2 == (byte)0xFE && b3 == (byte)0xFF) {\n            bomCharset = \"UTF-32BE\";\n            bomOffset = 4;\n        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE && b2 == (byte)0x00 && b3 == (byte)0x00) {\n            bomCharset = \"UTF-32LE\";\n            bomOffset = 4;\n        } else if (b0 == (byte)0xEF && b1 == (byte)0xBB && b2 == (byte)0xBF) {\n            bomCharset = \"UTF-8\";\n            bomOffset = 3;\n        } else if (b0 == (byte)0xFE && b1 == (byte)0xFF) {\n            bomCharset = \"UTF-16BE\";\n            bomOffset = 2;\n        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE) {\n            if (b2 != (byte)0x00 || b3 != (byte)0x00) { // avoid collision with UTF-32LE\n                bomCharset = \"UTF-16LE\";\n                bomOffset = 2;\n            }\n        }\n    } else if (byteData.remaining() >= 3) {\n        byte b0 = byteData.get(0);\n        byte b1 = byteData.get(1);\n        byte b2 = byteData.get(2);\n        if (b0 == (byte)0xEF && b1 == (byte)0xBB && b2 == (byte)0xBF) {\n            bomCharset = \"UTF-8\";\n            bomOffset = 3;\n        } else if (b0 == (byte)0xFE && b1 == (byte)0xFF) {\n            bomCharset = \"UTF-16BE\";\n            bomOffset = 2;\n        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE) {\n            bomCharset = \"UTF-16LE\";\n            bomOffset = 2;\n        }\n    } else if (byteData.remaining() >= 2) {\n        byte b0 = byteData.get(0);\n        byte b1 = byteData.get(1);\n        if (b0 == (byte)0xFE && b1 == (byte)0xFF) {\n            bomCharset = \"UTF-16BE\";\n            bomOffset = 2;\n        } else if (b0 == (byte)0xFF && b1 == (byte)0xFE) {\n            bomCharset = \"UTF-16LE\";\n            bomOffset = 2;\n        }\n    }\n\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n        // skip BOM\n        byteData.position(bomOffset);\n    } else {\n        byteData.position(0);\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                if (bomOffset > 0) byteData.position(bomOffset);\n                docData = Charset.forName(charsetName).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        // remove BOM from string\n        docData = docData.substring(1);\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}