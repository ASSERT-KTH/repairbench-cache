{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // look for BOM - overrides any other header or input\n    int bomLength = 0;\n    // UTF-32 BOMs\n    if (byteData.remaining() >= 4) {\n        int b0 = byteData.get(0) & 0xFF;\n        int b1 = byteData.get(1) & 0xFF;\n        int b2 = byteData.get(2) & 0xFF;\n        int b3 = byteData.get(3) & 0xFF;\n        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {\n            charsetName = \"UTF-32BE\"; bomLength = 4;\n        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {\n            charsetName = \"UTF-32LE\"; bomLength = 4;\n        }\n    }\n    // UTF-8 BOM\n    if (bomLength == 0 && byteData.remaining() >= 3) {\n        int b0 = byteData.get(0) & 0xFF;\n        int b1 = byteData.get(1) & 0xFF;\n        int b2 = byteData.get(2) & 0xFF;\n        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {\n            charsetName = \"UTF-8\"; bomLength = 3;\n        }\n    }\n    // UTF-16 BOMs\n    if (bomLength == 0 && byteData.remaining() >= 2) {\n        int b0 = byteData.get(0) & 0xFF;\n        int b1 = byteData.get(1) & 0xFF;\n        if (b0 == 0xFE && b1 == 0xFF) {\n            charsetName = \"UTF-16BE\"; bomLength = 2;\n        } else if (b0 == 0xFF && b1 == 0xFE) {\n            charsetName = \"UTF-16LE\"; bomLength = 2;\n        }\n    }\n    if (bomLength > 0) {\n        byteData.position(bomLength);\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. \"\n            + \"Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // strip UTF-8 BOM if present after decode\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        docData = docData.substring(1);\n        charsetName = defaultCharset;\n        doc = null;\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}