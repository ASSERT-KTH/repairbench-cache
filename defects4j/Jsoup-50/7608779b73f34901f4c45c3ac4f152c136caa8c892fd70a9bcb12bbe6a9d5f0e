{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // look for BOM - overrides any other header or input\n    String bomCharset = null;\n    int bomLength = 0;\n    ByteBuffer bb = byteData.duplicate();\n    // ensure we read from the start\n    bb.position(0);\n\n    // 4-byte BOMs (UTF-32BE/LE)\n    if (bb.remaining() >= 4) {\n        int b0 = bb.get(0) & 0xFF;\n        int b1 = bb.get(1) & 0xFF;\n        int b2 = bb.get(2) & 0xFF;\n        int b3 = bb.get(3) & 0xFF;\n        if (b0 == 0x00 && b1 == 0x00 && b2 == 0xFE && b3 == 0xFF) {\n            bomCharset = \"UTF-32BE\";\n            bomLength = 4;\n        } else if (b0 == 0xFF && b1 == 0xFE && b2 == 0x00 && b3 == 0x00) {\n            bomCharset = \"UTF-32LE\";\n            bomLength = 4;\n        }\n    }\n    // 3-byte BOM (UTF-8)\n    if (bomCharset == null && bb.remaining() >= 3) {\n        int b0 = bb.get(0) & 0xFF;\n        int b1 = bb.get(1) & 0xFF;\n        int b2 = bb.get(2) & 0xFF;\n        if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {\n            bomCharset = defaultCharset;  // UTF-8\n            bomLength = 3;\n        }\n    }\n    // 2-byte BOMs (UTF-16BE/LE)\n    if (bomCharset == null && bb.remaining() >= 2) {\n        int b0 = bb.get(0) & 0xFF;\n        int b1 = bb.get(1) & 0xFF;\n        if (b0 == 0xFE && b1 == 0xFF) {\n            bomCharset = \"UTF-16BE\";\n            bomLength = 2;\n        } else if (b0 == 0xFF && b1 == 0xFE) {\n            bomCharset = \"UTF-16LE\";\n            bomLength = 2;\n        }\n    }\n\n    if (bomCharset != null) {\n        // skip the BOM bytes and override any provided charsetName\n        charsetName = bomCharset;\n        byteData.position(bomLength);\n\n        // special\u2010case UTF-32: manual decode (JDK doesn't support UTF-32 natively)\n        if (\"UTF-32BE\".equals(bomCharset) || \"UTF-32LE\".equals(bomCharset)) {\n            boolean bigEndian = bomCharset.endsWith(\"BE\");\n            ByteBuffer buf = byteData.duplicate().order(bigEndian\n                ? ByteOrder.BIG_ENDIAN : ByteOrder.LITTLE_ENDIAN);\n            StringBuilder sb = new StringBuilder();\n            while (buf.remaining() >= 4) {\n                int codePoint = buf.getInt();\n                // skip any stray BOM codepoint\n                if (codePoint == 0xFEFF) continue;\n                if (Character.isBmpCodePoint(codePoint)) {\n                    sb.append((char) codePoint);\n                } else {\n                    sb.append(Character.highSurrogate(codePoint));\n                    sb.append(Character.lowSurrogate(codePoint));\n                }\n            }\n            docData = sb.toString();\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n            return doc;\n        }\n    }\n\n    if (charsetName == null) { \n        // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    String cs = meta.attr(\"charset\");\n                    if (Charset.isSupported(cs)) foundCharset = cs;\n                } catch (IllegalCharsetNameException e) {\n                    // invalid, ignore\n                }\n            }\n            if (foundCharset != null \n                && foundCharset.length() != 0 \n                && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null; // re-parse below\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName,\n            \"Must set charset arg to character set of file to parse. \"\n          + \"Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    // strip a leading BOM char if still present\n    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {\n        byteData.rewind();\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        docData = docData.substring(1);\n        charsetName = defaultCharset;\n        doc = null;\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}