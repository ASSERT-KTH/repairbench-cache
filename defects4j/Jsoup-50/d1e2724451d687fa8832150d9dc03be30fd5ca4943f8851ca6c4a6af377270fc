{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n\n    // Detect BOM and adjust charset + position\n    String detectedCharset = null;\n    int bomLength = 0;\n    ByteBuffer bomCheck = byteData.duplicate();\n    bomCheck.rewind();\n\n    if (bomCheck.remaining() >= 4) {\n        byte[] bom4 = new byte[4];\n        bomCheck.get(bom4);\n        if (bom4[0] == 0x00 && bom4[1] == 0x00 && bom4[2] == (byte) 0xFE && bom4[3] == (byte) 0xFF) {\n            detectedCharset = \"UTF-32BE\";\n            bomLength = 4;\n        } else if (bom4[0] == (byte) 0xFF && bom4[1] == (byte) 0xFE && bom4[2] == 0x00 && bom4[3] == 0x00) {\n            detectedCharset = \"UTF-32LE\";\n            bomLength = 4;\n        }\n    }\n\n    if (detectedCharset == null && bomCheck.remaining() >= 3) {\n        bomCheck.rewind();\n        byte[] bom3 = new byte[3];\n        bomCheck.get(bom3);\n        if (bom3[0] == (byte) 0xEF && bom3[1] == (byte) 0xBB && bom3[2] == (byte) 0xBF) {\n            detectedCharset = \"UTF-8\";\n            bomLength = 3;\n        }\n    }\n\n    if (detectedCharset == null && bomCheck.remaining() >= 2) {\n        bomCheck.rewind();\n        byte[] bom2 = new byte[2];\n        bomCheck.get(bom2);\n        if (bom2[0] == (byte) 0xFE && bom2[1] == (byte) 0xFF) {\n            detectedCharset = \"UTF-16BE\";\n            bomLength = 2;\n        } else if (bom2[0] == (byte) 0xFF && bom2[1] == (byte) 0xFE) {\n            detectedCharset = \"UTF-16LE\";\n            bomLength = 2;\n        }\n    }\n\n    if (detectedCharset != null) {\n        charsetName = detectedCharset;\n        byteData.position(byteData.position() + bomLength);\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) {\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else {\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}