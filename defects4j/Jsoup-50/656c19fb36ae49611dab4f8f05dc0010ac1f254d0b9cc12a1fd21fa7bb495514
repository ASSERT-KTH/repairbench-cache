{
    "generation": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    Charset charset = null;\n\n    // Check for BOM first - this overrides any other charset specification\n    byteData.mark();\n    String bomCharset = detectCharsetFromBom(byteData);\n    if (bomCharset != null) {\n        charsetName = bomCharset;\n        byteData.reset();\n    } else {\n        byteData.reset();\n    }\n\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = null;\n            if (meta.hasAttr(\"http-equiv\")) {\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            }\n            if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                try {\n                    if (Charset.isSupported(meta.attr(\"charset\"))) {\n                        foundCharset = meta.attr(\"charset\");\n                    }\n                } catch (IllegalCharsetNameException e) {\n                    foundCharset = null;\n                }\n            }\n\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n\n    if (doc == null) {\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}\n\nprivate static String detectCharsetFromBom(ByteBuffer byteData) {\n    if (byteData.remaining() >= 2) {\n        byte first = byteData.get();\n        byte second = byteData.get();\n\n        if (first == (byte) 0xFE && second == (byte) 0xFF) {\n            return \"UTF-16BE\";\n        } else if (first == (byte) 0xFF && second == (byte) 0xFE) {\n            return \"UTF-16LE\";\n        } else if (byteData.remaining() >= 2) {\n            byte third = byteData.get();\n            byte fourth = byteData.get();\n\n            if (first == (byte) 0x00 && second == (byte) 0x00 && third == (byte) 0xFE && fourth == (byte) 0xFF) {\n                return \"UTF-32BE\";\n            } else if (first == (byte) 0xFF && second == (byte) 0xFE && third == (byte) 0x00 && fourth == (byte) 0x00) {\n                return \"UTF-32LE\";\n            }\n        }\n    }\n    return null;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}