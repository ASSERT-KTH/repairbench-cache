{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // If the translator didn't consume any characters, write the current character(s) as is.\n                // This covers both BMP characters (1 char) and surrogate pairs (2 chars).\n                char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n                pos += c.length;\n                continue;\n            }\n            // The contract with translators is that they return the number of characters\n            // (Java `char`s) they consumed from the input. So, we simply advance 'pos'\n            // by that amount. The previous loop was incorrectly trying to re-calculate\n            // char counts for already consumed characters, leading to index out of bounds.\n            pos += consumed;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}