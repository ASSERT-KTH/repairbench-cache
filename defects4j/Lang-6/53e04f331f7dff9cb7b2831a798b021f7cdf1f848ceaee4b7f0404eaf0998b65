{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // If the translator didn't consume any characters,\n                // translate the current codepoint using default behavior.\n                char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n                pos += c.length; // Advance by the number of characters in the codepoint (1 or 2 for surrogate pairs)\n                continue;\n            }\n            // If the translator consumed characters, advance the position by the number of consumed characters.\n            // The contract is that the translator has already handled the characters (including surrogate pairs)\n            // corresponding to 'consumed' characters from the input.\n            pos += consumed;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}