{
    "generation": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        if (pos + 1 < len && Character.isHighSurrogate(input.charAt(pos))) {\n            // Check if we have a high surrogate followed by a low surrogate\n            if (Character.isLowSurrogate(input.charAt(pos + 1))) {\n                // Form the code point\n                int codePoint = input.charAt(pos);\n                codePoint = codePoint << 10;\n                codePoint |= input.charAt(pos + 1);\n                // Translate as code point\n                int consumed = translateCodePoint(codePoint, out);\n                if (consumed == 0) {\n                    // Write as a single char array (could be more than one char)\n                    char[] c = Character.toChars(codePoint);\n                    out.write(c);\n                }\n                pos += 2;\n                continue;\n            }\n        }\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos += c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n            pos += Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}