{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // Translate method did not consume any characters\n                // Read the code point starting at 'pos'\n                int codePoint = Character.codePointAt(input, pos);\n                // Write the code point as characters\n                out.write(Character.toChars(codePoint));\n                // Advance position by the number of characters required for this code point\n                pos += Character.charCount(codePoint);\n                continue; // Back to the start of the loop\n            }\n            // The translate method consumed 'consumed' characters.\n            // Advance our position marker by the number of characters consumed.\n            pos += consumed;\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}