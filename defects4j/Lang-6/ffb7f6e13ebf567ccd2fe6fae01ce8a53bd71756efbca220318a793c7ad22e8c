{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // Inlined Character.codePointAt(input, pos) to avoid creating Character seq object.\n                // Note that String.codePointAt(int) is Java 5.0.\n                int codePoint;\n                if (pos == len - 1) {\n                    codePoint = input.charAt(pos);\n                } else {\n                    codePoint = Character.codePointAt(input, pos);\n                }\n\n                char[] c = Character.toChars(codePoint);\n                out.write(c);\n                pos += c.length; // Advance by the number of chars in the code point (1 or 2)\n                continue; // Continue to the next char position\n            }\n            // The translator consumed 'consumed' characters.\n            // Advance the position by the number of characters consumed.\n            pos += consumed;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}