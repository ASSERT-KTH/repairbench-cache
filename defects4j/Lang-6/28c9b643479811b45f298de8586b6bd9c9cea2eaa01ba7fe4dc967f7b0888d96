{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is\n     * tightly coupled with the abstract method of this class.\n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(final CharSequence input, final Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        final int len = input.length();\n        while (pos < len) {\n            final int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // Translate method returned zero, indicating it could not translate\n                // the character(s) starting at 'pos'.\n                // We need to copy the character(s) directly to the output.\n                // Use codePointAt/charCount to correctly handle potential surrogate pairs.\n                final int codepoint = Character.codePointAt(input, pos);\n                out.write(Character.toChars(codepoint));\n                pos += Character.charCount(codepoint);\n            } else {\n                // The translator consumed 'consumed' code points starting from 'pos'.\n                // We need to advance 'pos' by the number of characters ('char' units)\n                // corresponding to these 'consumed' code points.\n                // We calculate the final position without modifying 'pos' intermediately,\n                // which avoids the StringIndexOutOfBoundsException caused by the original code's\n                // logic when 'pos' landed on a high surrogate at the end of the input.\n                int currentPos = pos;\n                for (int i = 0; i < consumed; i++) {\n                    // Check if we've already reached the end of the input.\n                    // This protects against potentially invalid 'consumed' values returned\n                    // by the translator implementation.\n                    if (currentPos >= len) {\n                        break;\n                    }\n                    // Determine the number of chars for the code point at the current position.\n                    // Character.codePointAt is safe here because currentPos < len.\n                    // If input[currentPos] is a high surrogate at the end of the string (currentPos == len - 1),\n                    // codePointAt returns the code point for the surrogate itself, and charCount will be 1.\n                    final int codepoint = Character.codePointAt(input, currentPos);\n                    currentPos += Character.charCount(codepoint);\n                }\n                // Update the main position variable 'pos' to the final calculated position.\n                pos = currentPos;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}