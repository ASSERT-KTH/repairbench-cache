{
    "generation": "    /**\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     */\n    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                // If no translation occurred, write the characters as-is.\n                // This section needs to handle surrogate pairs correctly, especially\n                // when a high surrogate is at the very end of the input (unpaired).\n                // Character.codePointAt(input, pos) can throw StringIndexOutOfBoundsException\n                // if pos points to a high surrogate at input.length() - 1.\n\n                if (pos < len - 1 && Character.isHighSurrogate(input.charAt(pos)) && Character.isLowSurrogate(input.charAt(pos + 1))) {\n                    // It's a complete surrogate pair, write both characters\n                    out.write(input.charAt(pos));\n                    out.write(input.charAt(pos + 1));\n                    pos += 2;\n                } else {\n                    // It's a single character (BMP character, or an unmatched surrogate at the end)\n                    out.write(input.charAt(pos));\n                    pos += 1;\n                }\n                continue;\n            }\n//          // contract with translators is that they have to understand codepoints \n//          // and they just took care of a surrogate pair\n            for (int pt = 0; pt < consumed; pt++) {\n                // When consumed > 0, the abstract translate method has successfully processed\n                // 'consumed' code points starting from 'pos'. Therefore, Character.codePointAt(input, pos)\n                // is expected to be safe for each of these consumed code points.\n                pos += Character.charCount(Character.codePointAt(input, pos));\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}