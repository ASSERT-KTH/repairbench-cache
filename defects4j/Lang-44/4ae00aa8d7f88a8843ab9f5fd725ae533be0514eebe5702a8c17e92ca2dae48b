{
    "generation": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null) {\n        return null;\n    }\n    if (val.length() == 0) {\n        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n    }\n    if (val.startsWith(\"--\")) {\n        // see discussion about BigDecimal parsing \"--\"\n        return null;\n    }\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n\n    char lastChar = val.charAt(val.length() - 1);\n    String mant, dec, exp;\n    int decPos = val.indexOf('.');\n    int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            dec = val.substring(decPos + 1, expPos);\n        } else {\n            dec = val.substring(decPos + 1);\n        }\n        mant = val.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = val.substring(0, expPos);\n        } else {\n            mant = val;\n        }\n        dec = null;\n    }\n\n    if (!Character.isDigit(lastChar)) {\n        if (expPos > -1 && expPos < val.length() - 1) {\n            exp = val.substring(expPos + 1, val.length() - 1);\n        } else {\n            exp = null;\n        }\n        String numeric = val.substring(0, val.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l': case 'L':\n                // guard against empty or non-digit numeric part\n                if (dec == null && exp == null) {\n                    String s = numeric;\n                    String digits = (s.startsWith(\"-\")) ? s.substring(1) : s;\n                    if (digits.length() > 0 && isDigits(digits)) {\n                        try {\n                            return createLong(s);\n                        } catch (NumberFormatException nfe) {\n                            // too big for a long\n                        }\n                        return createBigInteger(s);\n                    }\n                }\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            case 'f': case 'F':\n                try {\n                    Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException ex) {\n                    // ignore\n                }\n                // fall through to 'd'\n            case 'd': case 'D':\n                try {\n                    Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException ex) {\n                    // ignore\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException ex) {\n                    // ignore\n                }\n                // fall through to default\n            default:\n                throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n    } else {\n        // no type qualifier, choose smallest appropriate type\n        if (expPos > -1 && expPos < val.length() - 1) {\n            exp = val.substring(expPos + 1);\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) {\n            try {\n                return createInteger(val);\n            } catch (NumberFormatException ex) {\n                // ignore\n            }\n            try {\n                return createLong(val);\n            } catch (NumberFormatException ex) {\n                // ignore\n            }\n            return createBigInteger(val);\n        } else {\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(val);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException ex) {\n                // ignore\n            }\n            try {\n                Double d = createDouble(val);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException ex) {\n                // ignore\n            }\n            return createBigDecimal(val);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}