{
    "generation": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null) {\n        return null;\n    }\n    if (val.length() == 0) {\n        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n    }\n    if (val.startsWith(\"--\")) {\n        // Protection against the poorness in java.lang.BigDecimal:\n        // BigDecimal accepts this as a legal value, although it isn't in the specification.\n        return null;\n    }\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n    char lastChar = val.charAt(val.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = val.indexOf('.');\n    int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            dec = val.substring(decPos + 1, expPos);\n        } else {\n            dec = val.substring(decPos + 1);\n        }\n        mant = val.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = val.substring(0, expPos);\n        } else {\n            mant = val;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar)) {\n        // When the last character is not a digit it is supposed to be a type qualifier.\n        // If there is no number before the qualifier (e.g. \"l\", \"f\", etc.), that is invalid.\n        if (val.length() == 1) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        if (expPos > -1 && expPos < val.length() - 1) {\n            exp = val.substring(expPos + 1, val.length() - 1);\n        } else {\n            exp = null;\n        }\n        String numeric = val.substring(0, val.length() - 1);\n        if (numeric.length() == 0) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null && exp == null\n                    && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        // Too big for a long; fall back.\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException e) {\n                    // Ignore and try double.\n                }\n                // Fall through.\n            case 'd':\n            case 'D':\n                try {\n                    Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // Empty catch.\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                    // Empty catch.\n                }\n                // Fall through.\n            default:\n                throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n    } else {\n        // No type qualifier was given -- try smallest types first.\n        if (expPos > -1 && expPos < val.length() - 1) {\n            exp = val.substring(expPos + 1, val.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) {\n            // Must be an int, long, or BigInteger.\n            try {\n                return createInteger(val);\n            } catch (NumberFormatException nfe) {\n                // Empty catch.\n            }\n            try {\n                return createLong(val);\n            } catch (NumberFormatException nfe) {\n                // Empty catch.\n            }\n            return createBigInteger(val);\n        } else {\n            // Must be a float, double, or BigDecimal.\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(val);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // Empty catch.\n            }\n            try {\n                Double d = createDouble(val);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // Empty catch.\n            }\n            return createBigDecimal(val);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}