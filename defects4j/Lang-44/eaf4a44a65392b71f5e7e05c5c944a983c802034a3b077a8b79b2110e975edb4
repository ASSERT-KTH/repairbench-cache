{
    "generation": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null) {\n        return null;\n    }\n    if (val.length() == 0) {\n        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n    }\n    if (val.startsWith(\"--\")) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        return null;\n    }\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n\n    char lastChar = val.charAt(val.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = val.indexOf('.');\n    int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            dec = val.substring(decPos + 1, expPos);\n        } else {\n            dec = val.substring(decPos + 1);\n        }\n        mant = val.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = val.substring(0, expPos);\n        } else {\n            mant = val;\n        }\n        dec = null;\n    }\n\n    if (!Character.isDigit(lastChar)) {\n        // single character non-digit (e.g. \"l\",\"f\",\"d\") is invalid\n        if (val.length() == 1) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        if (expPos > -1 && expPos < val.length() - 1) {\n            exp = val.substring(expPos + 1, val.length() - 1);\n        } else {\n            exp = null;\n        }\n        // strip off type qualifier\n        String numeric = val.substring(0, val.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n        switch (lastChar) {\n        case 'l': case 'L':\n            if (dec == null && exp == null) {\n                // must be an integer literal\n                if ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1)))\n                    || isDigits(numeric)) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        // too big for a long\n                    }\n                    return createBigInteger(numeric);\n                }\n            }\n            throw new NumberFormatException(val + \" is not a valid number.\");\n\n        case 'f': case 'F':\n            try {\n                Float f = NumberUtils.createFloat(numeric);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n            // fall through\n\n        case 'd': case 'D':\n            try {\n                Double d = NumberUtils.createDouble(numeric);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore\n            }\n            try {\n                return createBigDecimal(numeric);\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n            // fall through\n\n        default:\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n    } else {\n        // no explicit type qualifier, choose smallest appropriate\n        if (expPos > -1 && expPos < val.length() - 1) {\n            exp = val.substring(expPos + 1, val.length());\n        } else {\n            exp = null;\n        }\n\n        if (dec == null && exp == null) {\n            // integer types\n            try {\n                return createInteger(val);\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n            try {\n                return createLong(val);\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n            return createBigInteger(val);\n        } else {\n            // floating types\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(val);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n            try {\n                Double d = createDouble(val);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n            return createBigDecimal(val);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}