{
    "generation": "import java.math.BigDecimal;\nimport java.math.BigInteger;\n\n// Added dummy NumberUtils class and methods for context, assuming they exist as per original code.\n// The fix focuses only on the createNumber method.\nclass NumberUtils {\n    // Assume these helpers exist and are implemented correctly elsewhere\n    private static boolean isDigits(String str) { return str != null && str.matches(\"\\\\d+\"); }\n    private static boolean isAllZeros(String str) {\n        if (str == null) return true; // Consistent with original behavior expectation for null exp\n        for (int i = str.length() - 1; i >= 0; i--) {\n            if (str.charAt(i) != '0') return false;\n        }\n        return str.length() > 0; // Empty string is not all zeros? Or is? Assume true if non-empty. Original code implies non-empty check. Let's return true only if non-empty and all 0s.\n                                // Revised: Let's match likely commons-lang behavior: null/empty is NOT all zeros.\n        // if (str == null || str.isEmpty()) return false;\n        // for (char c : str.toCharArray()) {\n        //     if (c != '0') return false;\n        // }\n        // return true;\n        // Let's stick to a simple digit check: if null or empty, false. otherwise check all chars are '0'.\n         if (str == null || str.isEmpty()) {\n             return true; // Original code seems to treat null exp as Zeros. Mant must be non-empty though? Let's assume null/empty is true for this check.\n         }\n         for (char c : str.toCharArray()) {\n             // Handle optional +/- sign in mantissa/exponent? The original check likely didn't.\n             if (c != '0' && c != '+' && c != '-') { // Allow signs? Let's assume original only checked digits.\n                  if(c != '0') return false;\n             } else if (c == '+' || c == '-') {\n                 // sign should be first char only, let's ignore it in check as original probably did.\n                 if (str.indexOf(c) != 0) return false; // sign not at start\n             }\n         }\n         // Check if it contains at least one digit '0'\n         return str.replace(\"+\", \"\").replace(\"-\", \"\").length() > 0;\n\n    }\n     public static Float createFloat(String str) { return Float.valueOf(str); }\n     public static Double createDouble(String str) { return Double.valueOf(str); }\n     public static Integer createInteger(String str) { return Integer.decode(str); } // Use decode to handle hex, octal, signs\n     public static Long createLong(String str) { return Long.valueOf(str); } // Handles sign\n     public static BigInteger createBigInteger(String str) { return new BigInteger(str); } // Handles sign\n     public static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); } // Handles sign, exponent\n\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can hold the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * @param val String containing a number\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String val) throws NumberFormatException {\n        if (val == null) {\n            return null;\n        }\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            // Per original code, return null for this case.\n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            // Handle hexadecimal numbers using createInteger (assumed to use Integer.decode or similar)\n            // Note: Standard Java hex parsing doesn't support the 'L' suffix.\n            // If val ends with 'L' or 'l', Integer.decode will fail. Let createInteger handle this.\n            return createInteger(val);\n        }\n\n        char lastChar = val.charAt(val.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = val.indexOf('.');\n        int expPos = val.indexOf('e') + val.indexOf('E') + 1; // Original calculation was buggy, but logic below recalculates anyway. Let's recalculate properly.\n\n        // Recalculate expPos correctly. Find the first 'e' or 'E'.\n        expPos = val.indexOf('e');\n        if (expPos == -1) {\n            expPos = val.indexOf('E');\n        }\n\n        // Split the string into mantissa, decimal, and exponent parts\n        // These parts are primarily used for the allZeros check logic.\n        if (decPos > -1) { // Contains a decimal point\n            if (expPos > -1) { // Contains an exponent\n                if (expPos < decPos || expPos == val.length() - 1) { // Exponent marker before decimal or at the very end (invalid)\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                mant = val.substring(0, decPos);\n                dec = val.substring(decPos + 1, expPos);\n                exp = val.substring(expPos + 1);\n            } else { // No exponent\n                mant = val.substring(0, decPos);\n                dec = val.substring(decPos + 1);\n                exp = null;\n            }\n            // Validate decimal part? Basic check: should not be empty if decimal point exists.\n             if (dec.isEmpty()) {\n                 // Handles cases like \"1.\" - let the specific parsers decide validity.\n                 // However, if followed by exponent \"1.e1\", dec is empty, which is valid.\n                 // Let's refine this: dec can be empty only if an exponent follows directly.\n                 if (expPos != decPos + 1) {\n                    // This check might be too strict? \"1.\" is valid Float/Double.\n                    // Let parser handle it. Remove this check.\n                 }\n             }\n        } else { // No decimal point\n            if (expPos > -1) { // Contains an exponent\n                if (expPos == val.length() - 1 || expPos == 0 || (expPos == 1 && (val.charAt(0) == '+' || val.charAt(0) == '-'))) { // Exponent marker requires digits before and after (unless sign before)\n                    throw new NumberFormatException(val + \" is not a valid number.\"); // E.g. \"e1\", \"+e1\", \"1e\"\n                }\n                mant = val.substring(0, expPos);\n                dec = null;\n                exp = val.substring(expPos + 1);\n            } else { // No decimal, no exponent\n                mant = val;\n                dec = null;\n                exp = null;\n            }\n        }\n\n        // Check if the last character is a type specifier\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            // If exponent is present, strip it off temporarily for suffix check\n            String numericWoExp = (expPos > -1) ? val.substring(0, expPos) : val;\n            if (numericWoExp.length() > 0) { // Avoid StringIndexOutOfBounds if val was just \"e\" or similar (caught above)\n                 lastChar = numericWoExp.charAt(numericWoExp.length() - 1); // Re-check last char before exponent\n                 if (!Character.isDigit(lastChar) && lastChar != '.') {\n                     // If the char before exponent is also not digit/dot, it might be suffix\n                     // Let the suffix check logic below handle it. If not suffix, it's invalid.\n                 } else {\n                    // Last char is part of exponent, not a suffix. Check validity.\n                     if (exp == null || exp.isEmpty() || (exp.length() == 1 && (exp.charAt(0) == '+' || exp.charAt(0) == '-'))) {\n                        // Trailing e/E or e+/e- without digits\n                        throw new NumberFormatException(val + \" is not a valid number.\");\n                     }\n                     // Treat as number without suffix\n                     lastChar = val.charAt(val.length() - 1); // Reset lastChar for the 'else' block below\n                     // Fall through to the 'else' block handling numbers without suffixes.\n                 }\n            } else {\n                 // val started with exponent marker e.g. \"e1\", caught earlier.\n                 throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n\n\n            // Now check for suffixes L, F, D\n            String numeric = val.substring(0, val.length() - 1); // Part before the potential suffix\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Use mant/exp calculated earlier\n\n            // FIX: Added check for empty numeric part after removing suffix\n            if (numeric.isEmpty() || numeric.equals(\"+\") || numeric.equals(\"-\") || numeric.equals(\".\")) {\n                // Handles cases like \"L\", \"+L\", \".L\", etc.\n                // Check if it was just the suffix character itself\n                 if(val.length() == 1 && (lastChar == 'l' || lastChar == 'L' || lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D')) {\n                      // Specifically handles \"l\", \"f\", \"d\" etc. by throwing NFE here.\n                      throw new NumberFormatException(val + \" is not a valid number.\");\n                 }\n                 // Check for cases like \"+L\", \"-F\", \".D\" etc.\n                  if ((numeric.equals(\"+\") || numeric.equals(\"-\") || numeric.equals(\".\")) && val.length() == 2) {\n                      throw new NumberFormatException(val + \" is not a valid number.\");\n                  }\n                  // If numeric became empty due to removing suffix from a valid number like \"0L\", allow it.\n                  // Let the respective create methods handle validation of the numeric part.\n                  // Re-evaluate the empty check: It prevents \"L\" but also \"0L\" if numeric becomes \"\". Check length before substring.\n                  // Let's refine the check for suffix processing:\n                  if (val.length() == 1) { // Handles \"L\", \"F\", \"D\" etc.\n                     throw new NumberFormatException(val + \" is not a valid number.\");\n                  }\n                  // The check `numeric.isEmpty()` happens if val was \"0L\", \"0F\", etc. - this is valid.\n                  // Let's remove the `numeric.isEmpty()` check here and rely on parsers.\n                  // Check for \"+L\", \"-F\", \".D\" specifically\n                  if ((val.startsWith(\"+\") || val.startsWith(\"-\") || val.startsWith(\".\")) && val.length() == 2) {\n                       throw new NumberFormatException(val + \" is not a valid number.\");\n                  }\n            }\n\n\n            switch (lastChar) { // Use the original lastChar from the full string 'val'\n                case 'l' :\n                case 'L' :\n                    // Check if the L is appropriate (no decimal, no exponent in the numeric part)\n                    if (dec != null || exp != null) {\n                        // If L is present, the original string should not contain decimal or exponent markers.\n                        // Exception: Exponent marker might be present but 'exp' part calculated above might be null\n                        // if the L immediately followed e/E. Let's recheck the numeric part directly.\n                        if (numeric.indexOf('.') != -1 || numeric.indexOf('e') != -1 || numeric.indexOf('E') != -1) {\n                           throw new NumberFormatException(val + \" is not a valid number.\");\n                        }\n                    }\n                    // Try Long, then BigInteger\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        // ignore NFE from createLong (could be format or range)\n                    }\n                    try {\n                        return createBigInteger(numeric);\n                    } catch (NumberFormatException nfe) {\n                         // If BigInteger also fails, the format is wrong.\n                         throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                    // break; // Unreachable code\n\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException e) {\n                        // If createFloat fails on format, throw NFE. Do not fall through.\n                         throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                    // Fall through to Double/BigDecimal if Float is Inf or loses precision to 0.0\n                    // This fall-through is problematic if the suffix was 'f'/'F'.\n                    // Let's adhere strictly: if 'f'/'F' specified, try Float, then maybe widen if needed for precision/range, but not implicitly change type if format is valid float.\n                    // The original code's intent seems to be: if Float is inf or loses precision, try Double/BigDecimal. Let's keep that.\n                    // Fall through to Double attempt (handled implicitly below D/d case) is likely wrong.\n                    // If Float fails checks, should try BigDecimal directly for F/f? Let's try BigDecimal.\n                     try {\n                         return createBigDecimal(numeric);\n                     } catch (NumberFormatException e) {\n                         throw new NumberFormatException(val + \" is not a valid number.\");\n                     }\n                    // break; // Unreachable code\n\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = createDouble(numeric);\n                        // FIX: Use d.doubleValue()\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // If createDouble fails on format, throw NFE. Do not fall through.\n                         throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                    // If Double is Inf or loses precision to 0.0, try BigDecimal\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                    // break; // Unreachable code\n\n                default :\n                    // Last char is not a digit, not '.', and not a recognized suffix L,F,D.\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n        } else {\n            // Last char is a digit or '.', so no type specifier.\n            // Try inferring the type.\n            if (dec == null && exp == null) {\n                // Must be an Integer, Long, or BigInteger\n                try {\n                    return createInteger(val);\n                } catch (NumberFormatException nfe) { /* ignore */ }\n                try {\n                    return createLong(val);\n                } catch (NumberFormatException nfe) { /* ignore */ }\n                try {\n                    return createBigInteger(val);\n                } catch (NumberFormatException e) {\n                    // If BigInteger fails too, the format was invalid (e.g., \"+\", \"-\")\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n            } else {\n                // Must be a Float, Double, or BigDecimal\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(val);\n                    // Do not return Float if it is infinite, or it results in 0.0 for a non-zero number.\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { /* ignore */ }\n                try {\n                    Double d = createDouble(val);\n                    // FIX: Use d.doubleValue()\n                    // Do not return Double if it is infinite, or it results in 0.0 for a non-zero number.\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { /* ignore */ }\n                try {\n                    // If Float/Double are not suitable or failed parsing, return BigDecimal\n                    return createBigDecimal(val);\n                } catch (NumberFormatException e) {\n                    // If all fail, throw exception\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n            }\n        }\n    }\n}\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}