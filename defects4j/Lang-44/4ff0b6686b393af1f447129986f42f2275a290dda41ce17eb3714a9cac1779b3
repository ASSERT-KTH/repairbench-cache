{
    "generation": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null) {\n        return null;\n    }\n    if (val.length() == 0) {\n        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n    }\n    if (val.startsWith(\"--\")) {\n        // Protection against inputs that BigDecimal accepts but are not valid per spec.\n        return null;\n    }\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n\n    // Determine whether the value has a type qualifier at the end.\n    char lastChar = val.charAt(val.length() - 1);\n    boolean hasTypeQualifier = !Character.isDigit(lastChar) && lastChar != '.';\n\n    // If there is a type qualifier, work with the substring that excludes it.\n    String workingVal = hasTypeQualifier ? val.substring(0, val.length() - 1) : val;\n    if (hasTypeQualifier && workingVal.length() == 0) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n\n    // Compute positions of the decimal point and exponent indicator\n    int decPos = workingVal.indexOf('.');\n    int expPos = Math.max(workingVal.indexOf('e'), workingVal.indexOf('E'));\n\n    String mant;\n    String dec;\n    String exp;\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            dec = workingVal.substring(decPos + 1, expPos);\n        } else {\n            dec = workingVal.substring(decPos + 1);\n        }\n        mant = workingVal.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = workingVal.substring(0, expPos);\n        } else {\n            mant = workingVal;\n        }\n        dec = null;\n    }\n\n    if (hasTypeQualifier) {\n        // When there's a type qualifier, recalc the exponent (if any) from the working value.\n        if (expPos > -1 && expPos < workingVal.length() - 1) {\n            exp = workingVal.substring(expPos + 1);\n        } else {\n            exp = null;\n        }\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (Character.toUpperCase(lastChar)) {\n            case 'L':\n                // For an 'L' qualifier, there should be no decimal or exponent parts.\n                if (dec == null && exp == null &&\n                    ((workingVal.charAt(0) == '-' && isDigits(workingVal.substring(1))) || isDigits(workingVal))) {\n                    try {\n                        return createLong(workingVal);\n                    } catch (NumberFormatException nfe) {\n                        // Too big for a long, so try BigInteger instead.\n                    }\n                    return createBigInteger(workingVal);\n                }\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            case 'F':\n                try {\n                    Float f = createFloat(workingVal);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException e) {\n                    // fall through to attempt double parsing\n                }\n                // Fall through to the Double case.\n            case 'D':\n                try {\n                    Double d = createDouble(workingVal);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // fall through to try BigDecimal\n                }\n                try {\n                    return createBigDecimal(workingVal);\n                } catch (NumberFormatException e) {\n                    // Fall through to error.\n                }\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            default:\n                throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n    } else {\n        // No explicit type qualifier: try int, long, BigInteger first when no decimal or exponent\n        if (expPos > -1 && expPos < workingVal.length() - 1) {\n            exp = workingVal.substring(expPos + 1);\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) {\n            try {\n                return createInteger(workingVal);\n            } catch (NumberFormatException nfe) {\n                // fall through to try long\n            }\n            try {\n                return createLong(workingVal);\n            } catch (NumberFormatException nfe) {\n                // fall through to BigInteger\n            }\n            return createBigInteger(workingVal);\n        } else {\n            // When there is a decimal point or exponent, try float, double, then BigDecimal.\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(workingVal);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // fall through to double\n            }\n            try {\n                Double d = createDouble(workingVal);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // fall through to BigDecimal\n            }\n            return createBigDecimal(workingVal);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}