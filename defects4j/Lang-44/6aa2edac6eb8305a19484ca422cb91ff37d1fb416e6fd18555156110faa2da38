{
    "generation": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null) {\n        return null;\n    }\n    if (val.isEmpty()) {\n        throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n    }\n    if (val.charAt(0) == '-' && val.length() == 1) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n    if (val.equals(\"--\")) {\n        return null;\n    }\n    boolean startsWithHex = val.startsWith(\"0x\") || val.startsWith(\"-0x\");\n    if (startsWithHex) {\n        try {\n            return Long.decode(val);\n        } catch (NumberFormatException e) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n    }\n    char lastChar = val.charAt(val.length() - 1);\n    String numeric = val;\n    boolean allZeros = false;\n    if (lastChar == 'l' || lastChar == 'L' || lastChar == 'f' || lastChar == 'F' || lastChar == 'd' || lastChar == 'D') {\n        numeric = val.substring(0, val.length() - 1);\n        allZeros = numeric.matches(\"0+(\\\\.0+)?(e0+)?\");\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (isInteger(numeric)) {\n                    try {\n                        return Long.parseLong(numeric);\n                    } catch (NumberFormatException e) {\n                        return new BigInteger(numeric);\n                    }\n                }\n                return new BigInteger(numeric);\n            case 'f':\n            case 'F':\n                if (isFloat(numeric)) {\n                    return Float.parseFloat(numeric);\n                }\n                try {\n                    return Double.parseDouble(numeric);\n                } catch (NumberFormatException e) {\n                    return new BigDecimal(numeric);\n                }\n            case 'd':\n            case 'D':\n                return isInteger(numeric) ? Double.parseDouble(numeric) : new BigDecimal(numeric);\n        }\n    }\n    if (isInteger(val)) {\n        return createLong(val);\n    }\n    try {\n        return Float.parseFloat(val);\n    } catch (NumberFormatException e) {\n        try {\n            return Double.parseDouble(val);\n        } catch (NumberFormatException ex) {\n            return new BigDecimal(val);\n        }\n    }\n}\n\nprivate static boolean isInteger(String str) {\n    try {\n        Long.parseLong(str);\n        return true;\n    } catch (NumberFormatException e) {\n        return false;\n    }\n}\n\nprivate static boolean isFloat(String str) {\n    try {\n        Float.parseFloat(str);\n        return true;\n    } catch (NumberFormatException e) {\n        return false;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}