{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can hold the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * @param val String containing a number\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String val) throws NumberFormatException {\n        if (val == null) {\n            return null;\n        }\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n        char lastChar = val.charAt(val.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = val.indexOf('.');\n        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\n        // Check for negative exponent\n        if (expPos > -1) {\n            // Check that the exponent is valid\n            if (expPos > val.length() -1) {\n                 throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            // Check for '-' sign in exponent\n            if (expPos > decPos && decPos != -1 && val.charAt(expPos -1) == '-') {\n                 throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n         }\n\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos || expPos > val.length() -1) { // check exponent pos relative to string length\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                dec = val.substring(decPos + 1, expPos);\n            } else {\n                dec = val.substring(decPos + 1);\n            }\n            mant = val.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                if (expPos > val.length() - 1) { // check exponent pos relative to string length\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                mant = val.substring(0, expPos);\n            } else {\n                mant = val;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar)) {\n            if (expPos > -1 && expPos < val.length() - 1) {\n                exp = val.substring(expPos + 1, val.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = val.substring(0, val.length() - 1);\n            // Must implement isAllZeros. Assuming it exists and works.\n            // Signature: private static boolean isAllZeros(String str)\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Check if the explicit L/l is preceded by digits only (+ optional - sign)\n                    // and is not part of a potential float/double/decimal number.\n                    if (dec == null\n                        && exp == null\n                        && !numeric.isEmpty() // Ensure numeric part is not empty\n                        && ( (numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric) ) ) {\n                        try {\n                            // Use lang3 method for consistency if available, else standard parseLong\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        // Use lang3 method for consistency if available, else standard BigInteger constructor\n                        return createBigInteger(numeric);\n\n                    }\n                    // If the conditions are not met, it's not a valid Long/BigInteger format with L/l suffix\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        // Use lang3 method for consistency if available, else standard parseFloat\n                        Float f = createFloat(numeric);\n                        // Use equals() method for comparison to avoid precision issues with == for floats\n                        // Check for underflow/overflow issues indicated by isInfinite or zero result for non-zero input\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big/small for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number; proceed to check Double/BigDecimal\n                    }\n                    // Fall through intended for d/D case or final BigDecimal attempt\n\n                case 'd' :\n                case 'D' :\n                    try {\n                         // Use lang3 method for consistency if available, else standard parseDouble\n                        Double d = createDouble(numeric);\n                        // Check for underflow/overflow issues indicated by isInfinite or zero result for non-zero input\n                        // Note: Using floatValue() comparison here is likely a bug, should be doubleValue()\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Changed d.floatValue() to d.doubleValue()\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // empty catch, ignore and proceed to BigDecimal\n                    }\n                    // Fall through after attempting Double\n                    try {\n                         // Use lang3 method for consistency if available, else standard BigDecimal constructor\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // If BigDecimal also fails, throw the final exception\n                        throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                    // Fall through to default is not strictly needed here after BigDecimal try/catch\n                    // but kept for structural similarity if future logic were added.\n                default :\n                    // The character is not a recognized digit or type suffix\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type (no suffix), so let's start\n            //small and go from there...\n            if (expPos > -1 && expPos < val.length() - 1) {\n                exp = val.substring(expPos + 1, val.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                 // Must be an Integer, Long, or BigInteger\n                 // Check if the string is composed of digits only (+ optional - sign)\n                 if (isDigits(val) || (val.charAt(0) == '-' && isDigits(val.substring(1)))) {\n                    try {\n                         // Use lang3 method for consistency if available, else standard parseInt\n                        return createInteger(val);\n                    } catch (NumberFormatException nfe) {\n                        // empty catch, try Long\n                    }\n                    try {\n                         // Use lang3 method for consistency if available, else standard parseLong\n                        return createLong(val);\n                    } catch (NumberFormatException nfe) {\n                        // empty catch, try BigInteger\n                    }\n                    // Use lang3 method for consistency if available, else standard BigInteger constructor\n                    return createBigInteger(val);\n                 } else {\n                    // String contains non-digit characters and is not hex (checked earlier)\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                 }\n\n            } else {\n                // Must be a Float, Double, or BigDecimal\n                // Must implement isAllZeros. Assuming it exists and works.\n                // Signature: private static boolean isAllZeros(String str)\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                     // Use lang3 method for consistency if available, else standard parseFloat\n                    Float f = createFloat(val);\n                     // Use equals() method for comparison to avoid precision issues with == for floats\n                     // Check for underflow/overflow issues indicated by isInfinite or zero result for non-zero input\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // empty catch, try Double\n                }\n                try {\n                     // Use lang3 method for consistency if available, else standard parseDouble\n                    Double d = createDouble(val);\n                     // Check for underflow/overflow issues indicated by isInfinite or zero result for non-zero input\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Changed d.floatValue() to d.doubleValue()\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // empty catch, try BigDecimal\n                }\n                 // Use lang3 method for consistency if available, else standard BigDecimal constructor\n                return createBigDecimal(val);\n\n            }\n\n        }\n    }\n\n    // Helper methods assumed to exist (based on original code context in Apache Commons Lang)\n    // These need to be present in the NumberUtils class or imported.\n\n    private static boolean isDigits(String str) {\n        if (str == null || str.length() == 0) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean isAllZeros(String str) {\n       if (str == null) {\n           return true; // Treat null exponent/mantissa part as all zeros\n       }\n       for (int i = str.length() - 1; i >= 0; i--) {\n           if (str.charAt(i) != '0') {\n               return false;\n           }\n       }\n       // Return true if str is not null and contains only zeros or is empty\n       // Empty string could be considered all zeros in this context\n       return str.length() > 0;\n    }\n\n    // Assumed createX methods (should exist in NumberUtils)\n    private static Integer createInteger(String val) { return Integer.decode(val); }\n    private static Long createLong(String val) { return Long.decode(val); } // Use decode for hex/octal if needed, else parseLong\n    private static BigInteger createBigInteger(String val) {\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n             return new BigInteger(val.substring(val.startsWith(\"-\") ? 3 : 2), 16);\n        }\n        return new BigInteger(val);\n    }\n    private static Float createFloat(String val) { return Float.valueOf(val); }\n    private static Double createDouble(String val) { return Double.valueOf(val); }\n    private static BigDecimal createBigDecimal(String val) { return new BigDecimal(val); }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}