{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can hold the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * @param val String containing a number\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String val) throws NumberFormatException {\n        if (val == null) {\n            return null;\n        }\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n        char lastChar = val.charAt(val.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = val.indexOf('.');\n        int expPos = val.indexOf('e') + val.indexOf('E') + 1; // Potential issue: Might lead to incorrect expPos if both 'e' and 'E' are present.\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos || expPos > val.length()) { // Added check for expPos validity\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                dec = val.substring(decPos + 1, expPos);\n            } else {\n                dec = val.substring(decPos + 1);\n            }\n            mant = val.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                 if (expPos > val.length()) { // Added check for expPos validity\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                 }\n                mant = val.substring(0, expPos);\n            } else {\n                mant = val;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar)) {\n            if (expPos > -1 && expPos < val.length() - 1) {\n                exp = val.substring(expPos + 1, val.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = val.substring(0, val.length() - 1);\n            // Must check Float/Double first, then fall through to BigDecimal\n            // because Temperature conversion requires this ordering F->D->BigDec\n            // (LANG-120)\n\n            // Note: isAllZeros is used to handle scenarios like \"0.0F\" which should\n            // return 0.0f, not Float.valueOf(\"0\"). See LANG-443.\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // isAllZeros checks function arguments are non-null\n\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Check if the trimmed string is empty, e.g., input \"L\"\n                    if (numeric.length() == 0) {\n                         throw new NumberFormatException(val + \" is not a valid number.\");\n                    }\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            //Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        // N.B. Need to create Float using NumberUtils.createFloat to restict\n                        // inputs and avoid accepting invalid strings \"1.\" or \".1\" etc.\n                        Float f = NumberUtils.createFloat(numeric);\n                        // Use equals variation here to compensate for NaN == NaN returning false\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    // Fall through\n                case 'd' :\n                case 'D' :\n                    try {\n                        // N.B. Need to create Double using NumberUtils.createDouble to restict\n                        // inputs and avoid accepting invalid strings \"1.\" or \".1\" etc.\n                        Double d = NumberUtils.createDouble(numeric);\n                        // Use equals variation here to compensate for NaN == NaN returning false\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // empty catch\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // empty catch\n                    }\n                    // Fall through\n                default :\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            if (expPos > -1 && expPos < val.length() - 1) {\n                exp = val.substring(expPos + 1, val.length());\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                // Must be an Integer, Long or BigInteger\n                try {\n                    return createInteger(val);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(val);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                return createBigInteger(val); // fallback\n\n            } else {\n                // Must be a Float, Double or BigDecimal\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    // N.B. Need to create Float using NumberUtils.createFloat to restict\n                    // inputs and avoid accepting invalid strings \"1.\" or \".1\" etc.\n                    Float f = createFloat(val);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    // N.B. Need to create Double using NumberUtils.createDouble to restict\n                    // inputs and avoid accepting invalid strings \"1.\" or \".1\" etc.\n                    Double d = createDouble(val);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(val); // fallback\n            }\n        }\n    }\n\n    // Helper methods assumed to exist and be correct:\n    // private static Integer createInteger(String val) throws NumberFormatException\n    // private static Long createLong(String val) throws NumberFormatException\n    // private static BigInteger createBigInteger(String val) throws NumberFormatException\n    // private static Float createFloat(String val) throws NumberFormatException\n    // private static Double createDouble(String val) throws NumberFormatException\n    // private static BigDecimal createBigDecimal(String val) throws NumberFormatException\n    // private static boolean isDigits(String str)\n    // private static boolean isAllZeros(String str)\n    // These would typically be part of the NumberUtils class.\n    // Added static modifier for compilation, assuming they are static helpers.\n    private static Integer createInteger(String val) { return Integer.decode(val); } // Simplified for example\n    private static Long createLong(String val) { return Long.valueOf(val); } // Simplified for example\n    private static java.math.BigInteger createBigInteger(String val) { return new java.math.BigInteger(val); } // Simplified for example\n    private static Float createFloat(String val) { return Float.valueOf(val); } // Simplified for example\n    private static Double createDouble(String val) { return Double.valueOf(val); } // Simplified for example\n    private static java.math.BigDecimal createBigDecimal(String val) { return new java.math.BigDecimal(val); } // Simplified for example\n    private static boolean isDigits(String str) {\n        if (str == null || str.length() == 0) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n     }\n    private static boolean isAllZeros(String str) {\n        if (str == null) {\n            return true;\n        }\n        for (int i = str.length() - 1; i >= 0; i--) {\n            if (str.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return str.length() > 0; // Treat \"\" as false? Original likely intended true for null/empty. Check usage. Let's assume true for null.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}