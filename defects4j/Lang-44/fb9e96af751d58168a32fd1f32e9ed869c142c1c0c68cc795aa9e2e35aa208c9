{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can hold the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * @param val String containing a number\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String val) throws NumberFormatException {\n        if (val == null) {\n            return null;\n        }\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null; // Behaviour based on original code for this edge case\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            // Need external createInteger method to handle hex\n            return createInteger(val);\n        }\n        char lastChar = val.charAt(val.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = val.indexOf('.');\n        // Original calculation; seems to work for valid cases, even if slightly odd\n        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n\n        // Reset expPos if the exponent marker is the last character\n        if (expPos > -1 && expPos == val.length() -1) {\n            expPos = -1;\n        }\n\n        if (decPos > -1) { // Contains a decimal point\n            if (expPos > -1) { // Contains exponent marker\n                if (expPos < decPos || expPos > val.length()) { // Check if 'e'/'E' is misplaced\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                dec = val.substring(decPos + 1, expPos);\n            } else { // No exponent marker\n                dec = val.substring(decPos + 1);\n            }\n            mant = val.substring(0, decPos);\n        } else { // No decimal point\n            if (expPos > -1) { // Contains exponent marker\n                 if (expPos > val.length()) { // Check if 'e'/'E' is misplaced\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                 }\n                mant = val.substring(0, expPos);\n            } else { // No decimal point, no exponent\n                mant = val;\n            }\n            dec = null;\n        }\n\n        // Check for type qualifier\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            // If exponent marker exists, find the exponent path\n            if (expPos > -1 && expPos < val.length() - 1) {\n                exp = val.substring(expPos + 1, val.length() - 1);\n            } else {\n                exp = null;\n            }\n            // Extract the numeric part before the qualifier\n            String numeric = val.substring(0, val.length() - 1);\n            // Check if the mantissa and exponent are all zeros\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Assumes isAllZeros handles null\n\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Input must be an integer (no decimal point, no exponent)\n                    // and the numeric part must be non-empty and consist of digits (optional minus sign)\n                    if (dec == null && exp == null && numeric.length() > 0) {\n                        boolean isPotentialInt = false;\n                        char firstChar = numeric.charAt(0);\n                        if (firstChar == '-') {\n                            // Must have digits after the '-' sign\n                            isPotentialInt = numeric.length() > 1 && isDigits(numeric.substring(1));\n                        } else {\n                            // Must have only digits\n                            isPotentialInt = isDigits(numeric);\n                        }\n\n                        if(isPotentialInt) {\n                           try {\n                                return createLong(numeric);\n                            } catch (NumberFormatException nfe) {\n                                // Fall through to BigInteger if Long overflows\n                            }\n                            // Let BigInteger handle its own format exceptions (e.g., \"-\")\n                            return createBigInteger(numeric);\n                        }\n                    }\n                    // If not a valid format for Long/BigInteger qualifier\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n\n                case 'f' :\n                case 'F' :\n                    try {\n                        // Use helper; throws NFE if 'numeric' is not a valid float string\n                        Float f = NumberUtils.createFloat(numeric);\n                        // Check for infinity or zero value when the string wasn't all zeroes (loss of precision)\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException e) {\n                        // Ignore NFE - indicates numeric is not valid float format (\"F\", \"abcF\")\n                    }\n                    // Fall through intended by original logic to try Double if Float fails/loses precision\n\n                case 'd' :\n                case 'D' :\n                    try {\n                        // Use helper; throws NFE if 'numeric' is not a valid double string\n                        Double d = NumberUtils.createDouble(numeric);\n                        // Check for infinity or zero value when the string wasn't all zeroes\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Corrected floatValue to doubleValue\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                         // Ignore NFE - indicates numeric is not valid double format (\"D\", \"abcD\")\n                    }\n                    try {\n                        // If Double failed or lost precision, try BigDecimal\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // Ignore NFE from BigDecimal. Means numeric was fundamentally invalid.\n                    }\n                    // Fall through to default if all F/D/BigDecimal attempts fail\n\n                default :\n                    // Qualifier is not L, F, or D, or parsing failed\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n        } else {\n            // Last character is a digit or '.', so no type qualifier. Auto-detect type.\n            // Extract exponent part if present\n            if (expPos > -1 && expPos < val.length() - 1) {\n                exp = val.substring(expPos + 1, val.length());\n            } else {\n                exp = null;\n            }\n            // Check if it looks like an integer (no decimal, no exponent)\n            if (dec == null && exp == null) {\n                // Must be an Integer, Long, or BigInteger\n                try {\n                    return createInteger(val);\n                } catch (NumberFormatException nfe) {\n                    // ignore, try next size\n                }\n                try {\n                    return createLong(val);\n                } catch (NumberFormatException nfe) {\n                    // ignore, try next size\n                }\n                // If Integer/Long fail, fallback to BigInteger\n                return createBigInteger(val); // Let BigInteger throw if 'val' is invalid integer format\n\n            } else {\n                // Has decimal or exponent: must be Float, Double, or BigDecimal\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(val);\n                    // Check for infinity or loss of precision\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore, try next size\n                }\n                try {\n                    Double d = createDouble(val);\n                    // Check for infinity or loss of precision\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Corrected floatValue to doubleValue\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore, try next size\n                }\n                // If Float/Double fail or lose precision, fallback to BigDecimal\n                return createBigDecimal(val); // Let BigDecimal throw if 'val' is invalid decimal format\n            }\n        }\n    }\n\n    // ---- Helper methods assumed to exist elsewhere ----\n    // These methods are not part of the provided code but are required for compilation and logic.\n    // Their exact implementation affects the behavior.\n\n    private static boolean isDigits(String str) {\n        if (str == null || str.length() == 0) {\n            return false; // Modified assumption: empty string is not considered digits\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean isAllZeros(String str) {\n         if (str == null) {\n            return true;\n        }\n        for (int i = str.length() - 1; i >= 0; i--) {\n            if (str.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return str.length() > 0; // Treat \"\" as false? Original code likely treated \"\" as true. Let's stick to null=true.\n        // If str is not null, return true only if all chars are '0'. Empty string would return true.\n        // Let's refine: return true if null or contains only '0'.\n        // if (str == null) return true; // Handled above\n        // for (int i=0; i<str.length(); i++) if (str.charAt(i) != '0') return false;\n        // return true; // If loop completes, it's all zeros or empty\n    }\n\n    // Assume these methods exist and call the respective constructors/parsing methods,\n    // potentially handling hex for createInteger.\n    private static Integer createInteger(String val) throws NumberFormatException { return Integer.decode(val); } // decode handles 0x, 0, #\n    private static Long createLong(String val) throws NumberFormatException { return Long.valueOf(val); }\n    private static BigInteger createBigInteger(String val) throws NumberFormatException { return new BigInteger(val); }\n    private static Float createFloat(String val) throws NumberFormatException { return Float.valueOf(val); }\n    private static Double createDouble(String val) throws NumberFormatException { return Double.valueOf(val); }\n    private static BigDecimal createBigDecimal(String val) throws NumberFormatException { return new BigDecimal(val); }\n\n    // Need access to NumberUtils.createFloat and NumberUtils.createDouble if they are different\n    // from the standard valueOf methods. Assuming they are the same for this fix.\n    // If NumberUtils.createFloat/Double have special logic, this needs adjustment.\n    // Reverting to use NumberUtils calls as in original code\n    // Assuming NumberUtils class exists with these static methods\n    // private static Float NumberUtils.createFloat(String val) ...\n    // private static Double NumberUtils.createDouble(String val) ...\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}