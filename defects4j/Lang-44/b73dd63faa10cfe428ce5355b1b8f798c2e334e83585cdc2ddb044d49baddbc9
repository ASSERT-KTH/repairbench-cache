{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can hold the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * @param val String containing a number\n     * @return Number created from the string\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String val) throws NumberFormatException {\n        if (val == null) {\n            return null;\n        }\n        if (val.length() == 0) {\n            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n        }\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n        char lastChar = val.charAt(val.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = val.indexOf('.');\n        // Corrected expPos calculation to find the first 'e' or 'E'\n        int expPos = val.indexOf('e');\n        if (expPos == -1) {\n            expPos = val.indexOf('E');\n        }\n\n        // Detectmantissa and decimal adjustments\n        if (decPos > -1) {\n            // Found decimal point\n            if (expPos > -1) {\n                // Found decimal point and exponential code\n                if (expPos < decPos || expPos > val.length()) { // Check exponent is after decimal and within string bounds\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                dec = val.substring(decPos + 1, expPos);\n            } else {\n                // Found decimal point but no exponential code\n                dec = val.substring(decPos + 1);\n            }\n            mant = val.substring(0, decPos);\n        } else {\n            // No decimal point\n            if (expPos > -1) {\n                // Found exponential code but no decimal point\n                if (expPos > val.length()) { // Check exponent is within string bounds\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                mant = val.substring(0, expPos);\n            } else {\n                // Found neither decimal point nor exponential code\n                mant = val;\n            }\n            dec = null; // No decimal part\n        }\n\n        // Handle type qualifiers and parse appropriately\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            // Found a non-digit, non-decimal character at the end. Check if it's a type qualifier.\n            if (expPos > -1 && expPos < val.length() - 1) {\n                // If exponent exists, extract it considering the suffix\n                exp = val.substring(expPos + 1, val.length() - 1);\n            } else {\n                exp = null;\n            }\n            // Extract the numeric part before the suffix\n            String numeric = val.substring(0, val.length() - 1);\n\n            // *** Fix for LANG-457: Handle case where string is only a suffix (e.g., \"L\") ***\n            if (numeric.length() == 0) {\n                 throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n\n            // Check for all zeros in mantissa and exponent (used later for Float/Double precision checks)\n            // Note: isAllZeros handles null strings returning true\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Must be an integer (no decimal or exponent allowed with L/l suffix)\n                    if (dec == null\n                        && exp == null\n                        // Basic check for integer characters (digits, optional leading '-')\n                        && (numeric.startsWith(\"-\") ? isDigits(numeric.substring(1)) : isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            // Fallback to BigInteger if Long conversion fails (likely overflow)\n                        }\n                        // N.B. createBigInteger can still fail if the format is bad (e.g., \"--1L\")\n                        // but the isDigits check above attempts to prevent this.\n                        return createBigInteger(numeric);\n                    }\n                    // Invalid format for L/l suffix\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        // Check for infinite values or loss of precision to zero\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                        // If Float is not suitable (infinite, or zero due to loss), fall through\n                        // (Original behavior was to fall through)\n                    } catch (NumberFormatException e) {\n                        // Fall through on parsing failure as well\n                    }\n                    // Fall through to Double/BigDecimal handling is questionable design but matches original code\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        // Check for infinite values or loss of precision to zero\n                        // Corrected: use d.doubleValue() instead of d.floatValue()\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                        // If Double is not suitable, fall through to BigDecimal\n                    } catch (NumberFormatException nfe) {\n                        // Fall through on parsing failure\n                    }\n                    // Fall through to BigDecimal\n                    try {\n                        // Last resort for F/f/D/d suffixes\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // If BigDecimal also fails, fall through to the final default exception\n                    }\n                    // Fall through\n                    //$FALL-THROUGH$\n                default :\n                    // Character is not a digit, '.', or a valid type suffix (L, F, D)\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n        } else {\n            // Last character is a digit or '.', so no type suffix is present.\n            // Determine type based on presence of decimal point and/or exponent.\n            if (expPos > -1 && expPos < val.length()) {\n                // Extract exponent part if present and has digits after 'e'/'E'\n                if (expPos < val.length() -1) {\n                   exp = val.substring(expPos + 1);\n                } else {\n                   // Exponent marker is last char (e.g. \"123e\") - invalid. Let subsequent parsers fail.\n                   exp = null; // Or \"\"? Let's use null for consistency with other exp==null cases.\n                }\n            } else {\n                exp = null;\n            }\n\n            if (dec == null && exp == null) {\n                // No decimal, no exponent: try Integer, Long, BigInteger\n                try {\n                    return createInteger(val);\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                try {\n                    return createLong(val);\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                return createBigInteger(val); // Last resort for integer types\n\n            } else {\n                // Has decimal or exponent: try Float, Double, BigDecimal\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(val);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                try {\n                    Double d = createDouble(val);\n                     // Corrected: use d.doubleValue() instead of d.floatValue()\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                return createBigDecimal(val); // Last resort for non-integer types\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}