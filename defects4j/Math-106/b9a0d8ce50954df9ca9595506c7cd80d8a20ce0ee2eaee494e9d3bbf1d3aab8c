{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    int wholeStart = pos.getIndex();\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int w = whole.intValue();\n    // only allow minus sign in the whole part\n    // To check for a minus in the whole, scan the string in [wholeStart, pos.getIndex())\n    String wholePart = source.substring(wholeStart, pos.getIndex());\n    boolean wholeNegative = wholePart.trim().startsWith(\"-\");\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse numerator\n    int numStart = pos.getIndex();\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        // invalid integer number\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = num.intValue();\n\n    // minus signs should be leading, invalid expression\n    String numPart = source.substring(numStart, pos.getIndex()).trim();\n    if (numPart.startsWith(\"-\") || numPart.startsWith(\"+\")) {\n        // Only allow minus in whole part\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(numStart);\n        return null;\n    }\n\n    // parse '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0 :\n        // no '/'\n        // return num as a fraction\n        return new Fraction(n, 1);\n    case '/' :\n        // found '/', continue parsing denominator\n        break;\n    default :\n        // invalid '/'\n        // set index back to initial, error index should be the last\n        // character examined.\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    int denStart = pos.getIndex();\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        // invalid integer number\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int d = den.intValue();\n\n    // minus signs must be leading, invalid\n    String denPart = source.substring(denStart, pos.getIndex()).trim();\n    if (denPart.startsWith(\"-\") || denPart.startsWith(\"+\")) {\n        // Only allow minus in whole part\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(denStart);\n        return null;\n    }\n\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}