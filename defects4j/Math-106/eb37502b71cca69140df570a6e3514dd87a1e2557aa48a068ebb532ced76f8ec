{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse an improper fraction first\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n\n    int initialIndex = pos.getIndex();\n\n    // parse leading whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole part\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse whitespace between whole and numerator\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse numerator\n    int numStartIndex = pos.getIndex();\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    // reject any minus in the numerator\n    if (num.intValue() < 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(numStartIndex);\n        return null;\n    }\n\n    // parse the slash\n    int slashIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0:\n        // no slash \u2192 treat as a simple fraction num/1\n        return new Fraction(num.intValue(), 1);\n    case '/':\n        // OK, continue to denominator\n        break;\n    default:\n        // invalid character in place of '/'\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(slashIndex);\n        return null;\n    }\n\n    // parse whitespace between slash and denominator\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    int denStartIndex = pos.getIndex();\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    // reject any minus in the denominator\n    if (den.intValue() < 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(denStartIndex);\n        return null;\n    }\n\n    // build the final Fraction: (|whole|*den + num) with the sign of whole\n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n    int sign = MathUtils.sign(w);\n    int numerator = (Math.abs(w) * d + n) * sign;\n    return new Fraction(numerator, d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}