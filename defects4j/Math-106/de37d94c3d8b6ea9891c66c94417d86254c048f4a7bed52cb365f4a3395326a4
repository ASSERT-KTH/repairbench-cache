{
    "generation": "    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction (e.g., \"5/2\" or \"-5/2\")\n        // This handles cases like \"2/3\" or \"-2/3\" that are not mixed fractions.\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number or no whole number part.\n            // set index back to initial, error index should already be set\n            // by getWholeFormat().parse if it failed.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // parse numerator\n        int numStartIndex = pos.getIndex(); // Capture start position of numerator for error handling\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // Minus signs are only allowed in the whole number part.\n        // Numerator must be positive.\n        if (num.intValue() < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(numStartIndex); // Point to the invalid minus sign\n            return null;\n        }\n\n        // parse '/'\n        int slashStartIndex = pos.getIndex(); // Capture start position of '/' for error handling\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 : // No more characters, no '/' found.\n            // If whole and numerator are parsed but no '/', it's an error for mixed fraction format.\n            // E.g., \"2 3\" should not be parsed as a mixed number (2 + 3/1).\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(slashStartIndex); // Error at the point where '/' was expected.\n            return null;\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default : // Invalid character instead of '/'\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(slashStartIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        int denStartIndex = pos.getIndex(); // Capture start position of denominator for error handling\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // Minus signs are only allowed in the whole number part.\n        // Denominator must be positive.\n        if (den.intValue() < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(denStartIndex); // Point to the invalid minus sign\n            return null;\n        }\n        \n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n\n        // Denominator cannot be zero\n        if (d == 0) {\n             pos.setIndex(initialIndex);\n             pos.setErrorIndex(denStartIndex); // Point to the zero denominator\n             return null;\n        }\n\n        // Convert W N/D to an improper fraction: W + N/D = (W*D + N)/D\n        // The sign of the whole number (W) applies to the entire fraction.\n        // At this point, 'n' and 'd' are guaranteed to be positive.\n        long numeratorValue;\n        if (w == 0) {\n            // If the whole number is zero (e.g., \"0 1/2\"), the fraction is simply n/d.\n            numeratorValue = n;\n        } else {\n            // For non-zero whole numbers, the magnitude of the numerator is |W|*D + N.\n            // The sign is determined by W. Example: -3 1/2 means -(3 + 1/2) = -7/2.\n            numeratorValue = ((long)Math.abs(w) * d) + n;\n            numeratorValue *= MathUtils.sign(w);\n        }\n        \n        return new Fraction((int)numeratorValue, d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}