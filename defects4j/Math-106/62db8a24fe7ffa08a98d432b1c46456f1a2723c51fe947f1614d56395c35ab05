{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    int wholeIndex = pos.getIndex();\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int w = whole.intValue();\n    boolean wholeNegative = false;\n    // check if there was a minus parsed in the whole number\n    String wholeStr = source.substring(wholeIndex, pos.getIndex()).trim();\n    if (wholeStr.startsWith(\"-\")) {\n        wholeNegative = true;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse numerator\n    int numIndex = pos.getIndex();\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = num.intValue();\n    String numStr = source.substring(numIndex, pos.getIndex()).trim();\n\n    // minus signs should not be in numerator (unless first token as whole)\n    if (numStr.startsWith(\"-\")) {\n        // minus sign in numerator, invalid\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(numIndex);\n        return null;\n    }\n\n    // parse '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0 :\n        // no '/'\n        // return num as a fraction\n        return new Fraction(n, 1);\n    case '/' :\n        // found '/', continue parsing denominator\n        break;\n    default :\n        // invalid '/'\n        // set index back to initial, error index should be the last\n        // character examined.\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    int denIndex = pos.getIndex();\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int d = den.intValue();\n    String denStr = source.substring(denIndex, pos.getIndex()).trim();\n\n    // minus signs should not be in denominator, invalid\n    if (denStr.startsWith(\"-\")) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(denIndex);\n        return null;\n    }\n\n    // Only allow the sign in the whole part (leading)\n    int sign = MathUtils.sign(w);\n\n    return new Fraction(((Math.abs(w) * d) + n) * sign, d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}