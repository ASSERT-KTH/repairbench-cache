{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // Check if whole contains a minus sign not at the beginning.\n    String sourceSubstrWhole = source.substring(initialIndex, pos.getIndex());\n    int firstDigitIdx = -1;\n    for (int i = 0; i < sourceSubstrWhole.length(); ++i) {\n        char ch = sourceSubstrWhole.charAt(i);\n        if (Character.isDigit(ch)) {\n            firstDigitIdx = i;\n            break;\n        }\n    }\n    if (firstDigitIdx > 0) {\n        // there is something before first digit, make sure only valid minus is at the start\n        if (sourceSubstrWhole.trim().charAt(0) != '-' && sourceSubstrWhole.substring(0, firstDigitIdx).contains(\"-\")) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(initialIndex);\n            return null;\n        }\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n    \n    // parse numerator\n    int numStartIndex = pos.getIndex();\n    Number num = getNumeratorFormat().parse(source, pos);\n    int numEndIndex = pos.getIndex();\n    if (num == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    // Check for minus sign in the numerator\n    String numPart = source.substring(numStartIndex, numEndIndex).trim();\n    if (numPart.contains(\"-\")) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(numStartIndex);\n        return null;\n    }\n    \n    // parse '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0 :\n        // no '/'\n        // return num as a fraction\n        return new Fraction(num.intValue(), 1);\n    case '/' :\n        // found '/', continue parsing denominator\n        break;\n    default :\n        // invalid '/'\n        // set index back to initial, error index should be the last\n        // character examined.\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    int denStartIndex = pos.getIndex();\n    Number den = getDenominatorFormat().parse(source, pos);\n    int denEndIndex = pos.getIndex();\n    if (den == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    // Check for minus sign in the denominator\n    String denPart = source.substring(denStartIndex, denEndIndex).trim();\n    if (denPart.contains(\"-\")) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(denStartIndex);\n        return null;\n    }\n\n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}