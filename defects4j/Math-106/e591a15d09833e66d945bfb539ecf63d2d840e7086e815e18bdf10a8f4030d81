{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction first\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole number (minus sign allowed here)\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n    \n    // parse numerator; minus signs are not allowed here\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    if (num.intValue() < 0) { // invalid minus sign in numerator\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(pos.getIndex());\n        return null;\n    }\n    \n    // parse whitespace before the separator\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse the '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0:\n        // no '/' found -- interpret the numerator as a whole fraction (num/1)\n        return new Fraction(num.intValue(), 1);\n    case '/':\n        // valid separator, continue to parse denominator\n        break;\n    default:\n        // wrong character found; reset and record error index\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator; minus signs are not allowed here\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    if (den.intValue() < 0) { // invalid minus sign in denominator\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(pos.getIndex());\n        return null;\n    }\n    \n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n    // Construct the fraction: the sign comes only from the whole part\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}