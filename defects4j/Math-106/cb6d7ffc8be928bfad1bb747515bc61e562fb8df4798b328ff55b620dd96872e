{
    "generation": "    /**\n     * Parses a string to produce a {@link Fraction} object. This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     *\n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction or simple whole number (e.g., \"3/2\" or \"5\")\n        // This is done by the superclass (FractionFormat) which handles formats like \"N/D\" or \"N\".\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n\n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse numerator\n        int numStartIndex = pos.getIndex(); // Capture the start index of the numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Minus signs are only allowed in the whole number part.\n        // Numerator in the fractional part (N/D) must be non-negative.\n        // It must also be less than the denominator but that check is done later,\n        // this method just ensures it's a valid number for the numerator position.\n        if (num.intValue() < 0) {\n            pos.setErrorIndex(numStartIndex); // Error points to the start of the negative numerator\n            pos.setIndex(initialIndex); // Reset the parsing position\n            return null;\n        }\n\n        // parse '/'\n        int slashStartIndex = pos.getIndex(); // Capture the start index for the expected '/'\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        case 0 :\n            // End of string, but a '/' was expected after whole and numerator.\n            // This case handles inputs like \"2 3\" which should be an error for a mixed fraction.\n            // Fall through to default error handling.\n        default :\n            // invalid character, '/' expected.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(slashStartIndex); // Error points to where '/' was expected\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        int denStartIndex = pos.getIndex(); // Capture the start index of the denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Denominator must be strictly positive.\n        // Minus signs are only allowed in the whole number part.\n        if (den.intValue() <= 0) {\n            pos.setErrorIndex(denStartIndex); // Error points to the start of the invalid denominator\n            pos.setIndex(initialIndex); // Reset the parsing position\n            return null;\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        // Calculate the value of the mixed fraction.\n        // The sign of the whole number (w) determines the sign of the entire fraction.\n        // The numerator (n) and denominator (d) of the fractional part must be positive.\n        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}