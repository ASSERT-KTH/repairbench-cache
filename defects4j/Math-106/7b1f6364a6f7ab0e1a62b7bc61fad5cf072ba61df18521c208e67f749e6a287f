{
    "generation": "    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction (e.g., \"3/4\" or \"-3/4\")\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // by the number format parser.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // Store index before parsing numerator to set error index if it's negative\n        int numStartIndex = pos.getIndex();\n        // parse numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // As per the specification: minus signs are only allowed in the whole number part.\n        // Therefore, the numerator of the fractional part must be non-negative.\n        if (num.intValue() < 0) {\n            pos.setIndex(initialIndex); // Reset parsing position to the start of the overall attempt\n            pos.setErrorIndex(numStartIndex); // Point error to the beginning of the numerator where the invalid minus sign was found\n            return null;\n        }\n\n        // parse '/'\n        int startIndex = pos.getIndex(); // Store index before checking for '/'\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // No '/' found. If whole and num are present, it implies a \"W N\" format.\n            // According to the specification, this should be a \"W N/D\" format.\n            // If '/' is missing, it's an invalid format for a mixed fraction.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex); // Error at the point where '/' was expected\n            return null;\n        case '/' :\n            // Found '/', continue parsing denominator\n            break;\n        default :\n            // Invalid character where '/' was expected\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex); // Error at the point where '/' was expected\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // Store index before parsing denominator to set error index if it's negative or zero\n        int denStartIndex = pos.getIndex();\n        // parse denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // As per the specification: minus signs are only allowed in the whole number part.\n        // Therefore, the denominator must be positive (cannot be negative or zero).\n        if (den.intValue() < 0 || den.intValue() == 0) {\n            pos.setIndex(initialIndex); // Reset parsing position to the start of the overall attempt\n            pos.setErrorIndex(denStartIndex); // Point error to the beginning of the denominator where the invalid sign/zero was found\n            return null;\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        \n        // The original formula `((Math.abs(w) * d) + n) * MathUtils.sign(w)`\n        // correctly handles the sign for `w != 0` when `n` and `d` are positive.\n        // However, if `w == 0`, `MathUtils.sign(0)` is `0`, which makes the numerator `0`.\n        // For \"0 1/2\", the result should be `1/2`, not `0/2`.\n        if (w == 0) {\n            return new Fraction(n, d);\n        } else {\n            return new Fraction(((long)Math.abs(w) * d) + n, d).multiply(MathUtils.sign(w));\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}