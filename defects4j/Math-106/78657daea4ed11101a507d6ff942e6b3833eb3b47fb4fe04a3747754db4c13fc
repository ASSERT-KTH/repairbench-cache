{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    int wVal = whole.intValue();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n    \n    // parse numerator\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int nVal = num.intValue();\n\n    // check for minus in numerator\n    if (nVal < 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(pos.getIndex());\n        return null;\n    }\n    \n    // parse '/'\n    int slashPos = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0 :\n        // no '/', interpret as whole number plus numerator as fraction with denominator 1\n        return new Fraction(nVal, 1);\n    case '/' :\n        // continue parsing denominator\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(slashPos);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int dVal = den.intValue();\n\n    // check for minus in denominator\n    if (dVal < 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(pos.getIndex());\n        return null;\n    }\n\n    return new Fraction(((Math.abs(wVal) * dVal) + nVal) * MathUtils.sign(wVal), dVal);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}