{
    "generation": "    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    @Override\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction (\"n/d\") first\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex();\n\n        // parse optional whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole part\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace between whole and numerator\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // parse numerator\n        int numIndex = pos.getIndex();\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        // reject a minus in the numerator\n        if (num.intValue() < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(numIndex);\n            return null;\n        }\n        \n        // parse the slash or bail if none\n        int slashIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0:\n            // no slash => treat numerator alone as a fraction\n            return new Fraction(num.intValue(), 1);\n        case '/':\n            // OK, fall through to parse denominator\n            break;\n        default:\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(slashIndex);\n            return null;\n        }\n\n        // parse whitespace between slash and denominator\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        int denIndex = pos.getIndex();\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        // reject a minus in the denominator\n        if (den.intValue() < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(denIndex);\n            return null;\n        }\n\n        // build the final Fraction value\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        // mixed fraction: ((|w|*d)+n) with the sign of w\n        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}