{
    "generation": "import java.text.ParsePosition;\nimport java.text.NumberFormat;\nimport org.apache.commons.math.fraction.Fraction;\nimport org.apache.commons.math.util.MathUtils;\nimport org.apache.commons.math.fraction.FractionFormat; // Assuming superclass is FractionFormat or similar\nimport java.text.FieldPosition; // Needed for stub implementation of helper methods\n\n// Stubs for missing dependencies to make the function compile standalone for analysis.\n// Assume these exist in the actual context.\nclass ProperFractionFormatStub extends FractionFormat {\n    @Override\n    public StringBuffer format(Fraction fraction, StringBuffer toAppendTo, FieldPosition pos) { return null; } // Dummy implementation\n    @Override\n    public Fraction parse(String source, ParsePosition pos) { return super.parse(source, pos); } // Call super implementation\n\n    protected NumberFormat getWholeFormat() { return NumberFormat.getIntegerInstance(); }\n    protected void parseAndIgnoreWhitespace(String source, ParsePosition pos) {\n        int index = pos.getIndex();\n        while (index < source.length() && Character.isWhitespace(source.charAt(index))) {\n            index++;\n        }\n        pos.setIndex(index);\n    }\n    protected char parseNextCharacter(String source, ParsePosition pos) {\n        int index = pos.getIndex();\n        if (index < source.length()) {\n            char ret = source.charAt(index);\n            pos.setIndex(index + 1);\n            return ret;\n        }\n        return 0; // Represents end of string or error\n    }\n    // Need getNumeratorFormat and getDenominatorFormat as well\n    @Override\n    public NumberFormat getNumeratorFormat() { return NumberFormat.getIntegerInstance(); }\n     @Override\n    public NumberFormat getDenominatorFormat() { return NumberFormat.getIntegerInstance(); }\n}\n\n\n// The fixed function:\nclass FixedProperFractionFormat extends ProperFractionFormatStub { // Inherit stubs for compilation check\n    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     *\n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    @Override\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n\n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse numerator\n        int numStartIndex = pos.getIndex(); // Store index before parsing numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should be set by parse\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Check for negative numerator\n        // Use doubleValue() comparison to handle potential non-integer results from parse\n        if (num.doubleValue() < 0.0) {\n            // minus signs should be leading only, invalid expression\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(numStartIndex); // Mark error at the start of the negative numerator\n            return null;\n        }\n\n        // parse '/'\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        // expecting '/'\n        if (c != '/') {\n             // didn't find '/', invalid format like \"5 2\" or \"5 2a\"\n             // set index back to initial, error index should be the last\n             // character examined.\n             pos.setIndex(initialIndex);\n             pos.setErrorIndex(startIndex); // Mark error where '/' was expected\n             return null;\n        }\n\n        // found '/', continue parsing denominator\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        int denStartIndex = pos.getIndex(); // Store index before parsing denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should be set by parse\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Check for negative denominator\n        // Use doubleValue() comparison\n        if (den.doubleValue() < 0.0) {\n            // minus signs must be leading only, invalid\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(denStartIndex); // Mark error at the start of the negative denominator\n            return null;\n        }\n\n        // Check for zero denominator\n        // Use doubleValue() comparison\n         if (den.doubleValue() == 0.0) {\n             // Denominator cannot be zero\n             pos.setIndex(initialIndex);\n             pos.setErrorIndex(denStartIndex); // Mark error at the start of the zero denominator\n             return null;\n        }\n\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        // Calculate the numerator based on the whole number, numerator, and denominator.\n        // The sign of the fraction is determined by the whole number's sign.\n        // The numerator n must be positive as checked above.\n        // The denominator d must be positive as checked above.\n        // Formula: result = (abs(whole) * den + num) * sign(whole) / den\n        // Example: -3 1/2 => w=-3, n=1, d=2 => (abs(-3)*2 + 1) * sign(-3) = (3*2+1)*(-1) = 7*(-1) = -7. Fraction is -7/2.\n        // Example:  3 1/2 => w=3, n=1, d=2 => (abs(3)*2 + 1) * sign(3) = (3*2+1)*(1) = 7*1 = 7. Fraction is 7/2.\n        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}