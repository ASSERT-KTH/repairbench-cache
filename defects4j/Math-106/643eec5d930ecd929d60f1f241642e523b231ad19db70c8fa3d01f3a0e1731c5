{
    "generation": "@Override\npublic Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n\n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse numerator\n    int numStart = pos.getIndex();\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    // invalid minus in numerator\n    if (num.intValue() < 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(numStart);\n        return null;\n    }\n\n    // parse '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n        case 0:\n            // no '/', return the numerator only\n            return new Fraction(num.intValue(), 1);\n        case '/':\n            // found '/', continue parsing denominator\n            break;\n        default:\n            // invalid character instead of '/'\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    int denStart = pos.getIndex();\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    // invalid minus in denominator\n    if (den.intValue() < 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(denStart);\n        return null;\n    }\n\n    // build the mixed fraction\n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n    // combine whole and fraction parts, preserving the sign of the whole\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}