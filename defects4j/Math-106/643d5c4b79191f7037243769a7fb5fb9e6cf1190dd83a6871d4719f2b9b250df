{
    "generation": "    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction (e.g., \"7/2\" or \"5\")\n        // This is handled by the superclass FractionFormat.\n        // If it parses successfully, it's not a mixed number, so return it.\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex(); // Store initial index for resetting on error\n\n        // parse whitespace (e.g., \" 1 2/3\")\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole number (e.g., \"1\" in \"1 2/3\")\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // No whole number found. This means it's not a mixed fraction format.\n            // Since super.parse failed, it's not a simple fraction either.\n            // So, this is an invalid format.\n            // The error index should already be set by getWholeFormat().parse if it failed.\n            pos.setIndex(initialIndex); \n            return null;\n        }\n\n        // parse whitespace (e.g., \"1  2/3\")\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // parse numerator (e.g., \"2\" in \"1 2/3\")\n        // Store the current index for error reporting if numerator is invalid\n        int numStartIndex = pos.getIndex(); \n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // No numerator found. Invalid format.\n            // Error index should be set by getNumeratorFormat().parse.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // As per Javadoc: \"Minus signs are only allowed in the whole number part\".\n        // Therefore, numerator must be positive.\n        if (num.intValue() < 0) {\n            pos.setErrorIndex(numStartIndex); // Point to the start of the negative numerator\n            pos.setIndex(initialIndex);      // Reset overall parsing position\n            return null;\n        }\n\n        // parse '/' character (e.g., \"1 2/3\")\n        // Store current index for error reporting if '/' is missing or invalid\n        int slashStartIndex = pos.getIndex(); \n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 : // End of string reached, no '/' found. E.g., \"2 1\"\n            // This is an invalid mixed number format (missing denominator).\n            // A whole number and numerator were parsed, but no division symbol.\n            pos.setErrorIndex(slashStartIndex); // Point to where '/' was expected\n            pos.setIndex(initialIndex);\n            return null;\n        case '/' : // Found '/', continue parsing denominator\n            break;\n        default : // Found something other than '/', e.g., \"2 1 x\"\n            // Invalid character where '/' was expected.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(slashStartIndex); // Point to the invalid character\n            return null;\n        }\n\n        // parse whitespace (e.g., \"1 2 / 3\")\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator (e.g., \"3\" in \"1 2/3\")\n        // Store the current index for error reporting if denominator is invalid\n        int denStartIndex = pos.getIndex(); \n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // No denominator found. Invalid format.\n            // Error index should be set by getDenominatorFormat().parse.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // As per Javadoc: \"Minus signs are only allowed in the whole number part\".\n        // Therefore, denominator must be positive.\n        if (den.intValue() < 0) {\n            pos.setErrorIndex(denStartIndex); // Point to the start of the negative denominator\n            pos.setIndex(initialIndex);      // Reset overall parsing position\n            return null;\n        }\n\n        // Denominator cannot be zero.\n        if (den.intValue() == 0) {\n            pos.setErrorIndex(denStartIndex); // Point to the zero denominator\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Construct the Fraction object from parsed components.\n        // The sign of the whole number determines the sign of the resulting fraction.\n        // Numerator and denominator are positive due to checks above.\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        \n        // Formula for mixed numbers: whole + numerator/denominator\n        // = (abs(whole) * denominator + numerator) / denominator, then apply sign of whole.\n        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}