{
    "generation": "    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Check for leading minus sign in whole number\n        boolean isWholeNegative = whole.intValue() < 0;\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // parse numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Check for minus sign in numerator\n        int startIndex = pos.getIndex();\n        int numValue = num.intValue();\n        boolean isNumNegative = numValue < 0;\n        if (isNumNegative) {\n            // Check if minus sign is leading\n            if (startIndex - 1 >= 0 && source.charAt(startIndex - 1) != '-') {\n                // invalid minus sign in numerator\n                pos.setIndex(initialIndex);\n                pos.setErrorIndex(startIndex - 1);\n                return null;\n            }\n        }\n\n        // parse '/'\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/'\n            // return num as a fraction\n            return new Fraction(numValue * MathUtils.sign(isWholeNegative ? -1 : 1), 1);\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid '/'\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Check for minus sign in denominator\n        int denValue = den.intValue();\n        boolean isDenNegative = denValue < 0;\n        if (isDenNegative) {\n            // Check if minus sign is leading\n            int denStartIndex = pos.getIndex();\n            if (denStartIndex - 1 >= 0 && source.charAt(denStartIndex - 1) != '-') {\n                // invalid minus sign in denominator\n                pos.setIndex(initialIndex);\n                pos.setErrorIndex(denStartIndex - 1);\n                return null;\n            }\n        }\n\n        int w = whole.intValue();\n        int n = Math.abs(numValue);\n        int d = Math.abs(denValue);\n        int sign = MathUtils.sign(isWholeNegative ? -1 : 1) * MathUtils.sign(isNumNegative ? -1 : 1) * MathUtils.sign(isDenNegative ? -1 : 1);\n        return new Fraction(((Math.abs(w) * d) + n) * sign, d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}