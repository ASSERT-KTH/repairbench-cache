{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n\n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int w = whole.intValue();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // Remember position before parsing numerator\n    int numStartIndex = pos.getIndex();\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        // invalid integer number\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = num.intValue();\n    // Check for minus sign in numerator\n    String numText = source.substring(numStartIndex, pos.getIndex()).trim();\n    if (numText.startsWith(\"-\")) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(numStartIndex);\n        return null;\n    }\n\n    // parse '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0 :\n        // no '/'\n        // return num as a fraction\n        return new Fraction(n, 1);\n    case '/' :\n        // found '/', continue parsing denominator\n        break;\n    default :\n        // invalid '/'\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // Remember position before parsing denominator\n    int denStartIndex = pos.getIndex();\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        // invalid integer number\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int d = den.intValue();\n    // Check for minus sign in denominator\n    String denText = source.substring(denStartIndex, pos.getIndex()).trim();\n    if (denText.startsWith(\"-\")) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(denStartIndex);\n        return null;\n    }\n\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}