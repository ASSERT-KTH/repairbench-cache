{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n\n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    int wholeSign = (whole.intValue() >= 0) ? 1 : -1;\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    int numeratorStartIndex = pos.getIndex();\n    // parse numerator\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = num.intValue();\n    // check invalid minus on numerator\n    if ((wholeSign * n) < 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(numeratorStartIndex);\n        return null;\n    }\n\n    // parse '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n        case 0:\n            // no '/' found\n            return new Fraction(num.intValue(), 1);\n        case '/':\n            break;\n        default:\n            // invalid character where '/' expected\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    int denominatorStartIndex = pos.getIndex();\n    // parse denominator\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int d = den.intValue();\n    // check invalid minus on denominator\n    if ((wholeSign * d) < 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(denominatorStartIndex);\n        return null;\n    }\n\n    int w = whole.intValue();\n    // The numerator must have the same sign as the denominator, and both must be positive.\n    // The sign is controlled by 'w'\n\n    n = Math.abs(n);\n    d = Math.abs(d);\n\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}