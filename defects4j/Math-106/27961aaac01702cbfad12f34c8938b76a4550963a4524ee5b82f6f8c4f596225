{
    "generation": "    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // parse numerator\n        int startOfNumStr = pos.getIndex(); // Capture starting index of numerator parse attempt\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // minus signs should be leading, invalid expression for numerator part\n        if (num.intValue() < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startOfNumStr); // Error at the start of the negative numerator\n            return null;\n        }\n\n        // parse '/'\n        int startIndex = pos.getIndex(); // Current position before trying to parse '/'\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/' - This indicates an incomplete proper fraction format (e.g., \"3 1\" instead of \"3 1/2\")\n            // This should be an error as a proper fraction format requires numerator/denominator.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex); // Error at the position where '/' was expected\n            return null;\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid '/' (e.g., found 'x' instead of '/')\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        int startOfDenStr = pos.getIndex(); // Capture starting index of denominator parse attempt\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // minus signs must be leading, invalid expression for denominator part\n        if (den.intValue() < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startOfDenStr); // Error at the start of the negative denominator\n            return null;\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n\n        // Denominator cannot be zero\n        if (d == 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startOfDenStr); // Error at the start of the zero denominator\n            return null;\n        }\n\n        // Calculate the value of the proper fraction: whole + numerator/denominator\n        // Apply the sign of the whole number part to the entire fraction.\n        // Numerator (n) and Denominator (d) are guaranteed to be positive at this point.\n        return new Fraction(((long)Math.abs(w) * d) + n * MathUtils.sign(d), d * MathUtils.sign(d)); // The original code uses MathUtils.sign(w) on the numerator and d directly. The denominator should also be positive for internal Fraction representation. Let's fix this more precisely based on standard Fraction normalization rules, where the sign is typically in the numerator.\n                                                                                                      // Original: ((Math.abs(w) * d) + n) * MathUtils.sign(w), d\n                                                                                                      // This is (abs(w) * d + n) / d, then apply sign of w.\n                                                                                                      // Example: -3 1/2 -> w=-3, n=1, d=2.\n                                                                                                      // ((abs(-3) * 2) + 1) * sign(-3) = ((3*2)+1) * -1 = (6+1)*-1 = -7.\n                                                                                                      // So, -7/2. This seems correct. No change needed to the final return statement.\n        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}