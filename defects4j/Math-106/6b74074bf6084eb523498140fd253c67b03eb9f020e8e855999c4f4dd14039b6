{
    "generation": "/**\n * Parses a string to produce a {@link Fraction} object.  This method\n * expects the string to be formatted as a proper fraction.\n * <p>\n * Minus signs are only allowed in the whole number part - i.e.,\n * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n * will result in a <code>ParseException</code>.\n * \n * @param source the string to parse\n * @param pos input/output parsing parameter.\n * @return the parsed {@link Fraction} object.\n */\npublic Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n\n    int initialIndex = pos.getIndex();\n\n    // parse leading whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole part\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse whitespace before numerator\n    parseAndIgnoreWhitespace(source, pos);\n\n    // record start of numerator for error reporting\n    int numStart = pos.getIndex();\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    // minus in numerator is invalid in a proper fraction\n    if (num.intValue() < 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(numStart);\n        return null;\n    }\n\n    // parse '/'\n    int slashIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n        case 0:\n            // no slash, return the numerator alone as a fraction\n            return new Fraction(num.intValue(), 1);\n        case '/':\n            // ok, continue to denominator\n            break;\n        default:\n            // invalid character where '/' expected\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(slashIndex);\n            return null;\n    }\n\n    // parse whitespace before denominator\n    parseAndIgnoreWhitespace(source, pos);\n\n    // record start of denominator for error reporting\n    int denStart = pos.getIndex();\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    // minus in denominator is invalid in a proper fraction\n    if (den.intValue() < 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(denStart);\n        return null;\n    }\n\n    // build final Fraction: sign of whole applies to entire mixed number\n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}