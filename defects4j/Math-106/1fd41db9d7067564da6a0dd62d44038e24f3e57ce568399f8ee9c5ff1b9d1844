{
    "generation": "    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n\n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Check for minus sign in numerator (not allowed)\n        int numStart = pos.getIndex() - String.valueOf(num).length();\n        if (numStart >= 0 && source.charAt(numStart) == '-') {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(numStart);\n            return null;\n        }\n\n        // parse '/'\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/'\n            // return num as a fraction\n            return new Fraction(num.intValue(), 1);\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid '/'\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        int denStart = pos.getIndex();\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Check for minus sign in denominator (not allowed)\n        if (source.charAt(denStart) == '-') {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(denStart);\n            return null;\n        }\n\n        // Check for invalid case like \"2 -2 / 3\" (minus between whole and numerator)\n        // We need to check the original source string between whole and numerator\n        int wholeEnd = initialIndex;\n        while (wholeEnd < source.length() && Character.isWhitespace(source.charAt(wholeEnd))) {\n            wholeEnd++;\n        }\n        int wholeLength = getWholeFormat().parse(source.substring(initialIndex), new ParsePosition(0)).toString().length();\n        wholeEnd = initialIndex + wholeLength;\n        int numStartPos = source.indexOf(num.toString(), wholeEnd);\n\n        if (numStartPos > wholeEnd) {\n            String between = source.substring(wholeEnd, numStartPos).trim();\n            if (betweencontains(\"-\")) {\n                pos.setIndex(initialIndex);\n                pos.setErrorIndex(wholeEnd);\n                return null;\n            }\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n\n        // Check if denominator is negative\n        if (d < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(denStart);\n            return null;\n        }\n\n        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}