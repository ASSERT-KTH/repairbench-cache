{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole part (may be negative)\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse whitespace between whole and numerator\n    parseAndIgnoreWhitespace(source, pos);\n    \n    // store the position before parsing the numerator\n    int numStart = pos.getIndex();\n    // parse numerator, which must be non-negative\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    if (num.intValue() < 0) {\n        // minus sign in numerator is not allowed\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(numStart);\n        return null;\n    }\n    \n    // parse whitespace between numerator and '/'\n    parseAndIgnoreWhitespace(source, pos);\n    \n    // parse the '/' separator\n    int sepIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0:\n        // no '/' found, so treat the numerator as the whole number\n        return new Fraction(num.intValue(), 1);\n    case '/':\n        // continue to parse denominator\n        break;\n    default:\n        // invalid character where '/' was expected\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(sepIndex);\n        return null;\n    }\n\n    // parse whitespace after '/'\n    parseAndIgnoreWhitespace(source, pos);\n\n    // store the position before parsing the denominator\n    int denStart = pos.getIndex();\n    // parse denominator, which must be non-negative\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    if (den.intValue() < 0) {\n        // minus sign in denominator is not allowed\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(denStart);\n        return null;\n    }\n    \n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n    // Construct the proper fraction:\n    // The absolute value of the whole part is multiplied by the denominator and added to the numerator.\n    // The sign of the fraction is taken from the whole part.\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}