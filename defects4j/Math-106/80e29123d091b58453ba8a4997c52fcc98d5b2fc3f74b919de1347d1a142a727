{
    "generation": "    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction (e.g., \"1/2\", \"-3/4\", \"5/2\")\n        // This might be handled by a parent parser or a specific FractionFormat.\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex();\n\n        // parse whitespace before whole number\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole number part\n        int startWhole = pos.getIndex(); // Capture position before parsing whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // No whole number found or invalid format\n            pos.setIndex(initialIndex);\n            // pos.setErrorIndex() might already be set by getWholeFormat().parse if it failed\n            return null;\n        }\n\n        // parse whitespace after whole number\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // parse numerator part\n        int startNum = pos.getIndex(); // Capture position before parsing numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // No numerator found or invalid format\n            pos.setIndex(initialIndex);\n            // pos.setErrorIndex() might already be set by getNumeratorFormat().parse\n            return null;\n        }\n        \n        // Bug Fix: Minus signs are only allowed in the whole number part.\n        // Numerator cannot be negative for \"W N/D\" format.\n        if (num.intValue() < 0) {\n            pos.setIndex(initialIndex); // Reset to original start\n            pos.setErrorIndex(startNum); // Point to the negative sign in the numerator\n            return null;\n        }\n\n        // parse '/' separator\n        int slashStartIndex = pos.getIndex(); // Capture position before parsing '/'\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 : // End of string or no more characters found\n            // If we parsed a whole number and a numerator, but no '/' and denominator,\n            // this is not a valid proper fraction format \"W N/D\".\n            // The original code was returning num as a fraction (e.g., \"3 4\" -> 4/1),\n            // which ignores the whole part and is generally incorrect for \"W N/D\" format.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(slashStartIndex); // Point to where '/' was expected\n            return null;\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // Found an unexpected character instead of '/'\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(slashStartIndex); // Point to the character that was found instead of '/'\n            return null;\n        }\n\n        // parse whitespace after '/'\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator part\n        int startDen = pos.getIndex(); // Capture position before parsing denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // No denominator found or invalid format\n            pos.setIndex(initialIndex);\n            // pos.setErrorIndex() might already be set by getDenominatorFormat().parse\n            return null;\n        }\n        \n        // Bug Fix: Minus signs are only allowed in the whole number part.\n        // Denominator cannot be negative for \"W N/D\" format.\n        if (den.intValue() < 0) {\n            pos.setIndex(initialIndex); // Reset to original start\n            pos.setErrorIndex(startDen); // Point to the negative sign in the denominator\n            return null;\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        \n        // Construct the fraction (e.g., -3 1/2 = (-3 * 2 + 1) / 2 = -7/2)\n        // The current formula correctly handles negative whole numbers, assuming n is positive.\n        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}