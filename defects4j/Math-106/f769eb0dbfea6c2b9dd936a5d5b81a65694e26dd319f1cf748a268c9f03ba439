{
    "generation": "    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Check for leading minus sign\n        boolean isNegative = whole.doubleValue() < 0;\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // parse numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Check for invalid minus sign in numerator\n        int numStartIndex = pos.getIndex() - String.valueOf(num).length();\n        if (source.substring(numStartIndex).trim().startsWith(\"-\")) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(numStartIndex);\n            return null;\n        }\n\n        // parse '/'\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/'\n            // return num as a fraction\n            return new Fraction(num.intValue() * (isNegative ? -1 : 1), 1);\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid '/'\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Check for invalid minus sign in denominator\n        int denStartIndex = pos.getIndex() - String.valueOf(den).length();\n        if (source.substring(denStartIndex).trim().startsWith(\"-\")) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(denStartIndex);\n            return null;\n        }\n\n        int w = Math.abs(whole.intValue()); // Ensure whole is positive\n        int n = num.intValue();\n        int d = den.intValue();\n        int sign = isNegative ? -1 : 1;\n        return new Fraction(((w * d) + n) * sign, d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}