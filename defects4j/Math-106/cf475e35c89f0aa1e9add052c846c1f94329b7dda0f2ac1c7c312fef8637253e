{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    int w = whole.intValue();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n    \n    // parse numerator\n    int numeratorStartIndex = pos.getIndex();\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        // invalid integer number\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = num.intValue();\n    // Check for invalid minus sign in numerator\n    if ((n < 0 && w >= 0) || (n > 0 && w < 0)) {\n        // minus signs should only be leading, invalid\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(numeratorStartIndex);\n        return null;\n    }\n\n    // parse '/'\n    int slashIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0 :\n        // no '/', treat as whole number\n        return new Fraction(num.intValue(), 1);\n    case '/' :\n        // found '/', continue parsing denominator\n        break;\n    default :\n        // invalid '/'\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(slashIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    int denominatorStartIndex = pos.getIndex();\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        // invalid denominator\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int d = den.intValue();\n    // Denominator must be positive, no minus signs allowed except leading sign of whole part\n    if ((d < 0 && w >= 0) || (d > 0 && w < 0)) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(denominatorStartIndex);\n        return null;\n    }\n    d = Math.abs(d);\n\n    int resultNumerator = (Math.abs(w) * d) + Math.abs(n);\n    int sign = MathUtils.sign(w);\n    return new Fraction(resultNumerator * sign, d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}