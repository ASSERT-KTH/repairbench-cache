{
    "generation": "    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n\n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // Check for minus sign in numerator (invalid)\n        int numStartIndex = initialIndex + whole.toString().length();\n        while (numStartIndex < source.length() && Character.isWhitespace(source.charAt(numStartIndex))) {\n            numStartIndex++;\n        }\n        if (source.charAt(numStartIndex) == '-') {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(numStartIndex);\n            return null;\n        }\n\n        // parse '/'\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/'\n            // return num as a fraction\n            return new Fraction(num.intValue(), 1);\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid '/'\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // Check for minus sign in denominator before parsing (invalid)\n        int denStartIndex = pos.getIndex();\n        boolean hasNegativeDenominator = false;\n        if (source.length() > denStartIndex && source.charAt(denStartIndex) == '-') {\n            hasNegativeDenominator = true;\n        }\n\n        // parse denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // If we found a negative denominator in our earlier check, reject it\n        if (hasNegativeDenominator) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(denStartIndex);\n            return null;\n        }\n\n        // Check if there's a minus between numerator and denominator\n        // (This would have been caught in earlier parsing, but we want to be sure)\n        if (pos.getIndex() > startIndex && source.charAt(pos.getIndex() - 1) == '-') {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(pos.getIndex() - 1);\n            return null;\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n\n        // Check if denominator is zero (should be caught by parse, but just in case)\n        if (d == 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(pos.getIndex());\n            return null;\n        }\n\n        // Check for minus sign between whole number and numerator\n        int wholeEnd = initialIndex + whole.toString().length();\n        int numStart = numStartIndex;\n        if (numStart - wholeEnd > 1) { // More than just whitespace between whole and numerator\n            // Check all non-whitespace characters between whole and numerator\n            boolean foundMinus = false;\n            for (int i = wholeEnd; i < numStart; i++) {\n                if (!Character.isWhitespace(source.charAt(i)) && source.charAt(i) == '-') {\n                    foundMinus = true;\n                    break;\n                }\n            }\n            if (foundMinus) {\n                pos.setIndex(initialIndex);\n                pos.setErrorIndex(numStart - 1);\n                return null;\n            }\n        }\n\n        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}