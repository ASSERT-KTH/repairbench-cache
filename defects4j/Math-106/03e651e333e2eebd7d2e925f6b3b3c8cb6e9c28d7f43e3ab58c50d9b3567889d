{
    "generation": "    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        int initialIndex = pos.getIndex();\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n        // parse numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n// buggy code\n//            // minus signs should be leading, invalid expression\n//        // parse '/'\n//        int startIndex = pos.getIndex();\n//        char c = parseNextCharacter(source, pos);\n//        switch (c) {\n//        case 0 :\n//            // no '/'\n//            // return num as a fraction\n//            return new Fraction(num.intValue(), 1);\n//        case '/' :\n//            // found '/', continue parsing denominator\n//            break;\n//        default :\n//            // invalid '/'\n//            // set index back to initial, error index should be the last\n//            // character examined.\n//            pos.setIndex(initialIndex);\n//            pos.setErrorIndex(startIndex);\n//            return null;\n//        }\n//        // parse whitespace\n//        parseAndIgnoreWhitespace(source, pos);\n//        // parse denominator\n//        Number den = getDenominatorFormat().parse(source, pos);\n//        if (den == null) {\n//            // invalid integer number\n//            // set index back to initial, error index should already be set\n//            // character examined.\n//            pos.setIndex(initialIndex);\n//            return null;\n//        }\n//            // minus signs must be leading, invalid\n//        return new Fraction(num.intValue(), den.intValue());\n        // parse '/'\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/'\n            // return num as a fraction\n            return new Fraction(num.intValue(), 1);\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid '/'\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n        // parse whitespace\n        parseAndIgnoreWhitespace(source\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}