{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n\n    int initialIndex = pos.getIndex();\n\n    parseAndIgnoreWhitespace(source, pos);\n\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    parseAndIgnoreWhitespace(source, pos);\n\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    int numStart = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n\n    if (c != '/') {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(numStart);\n        return null;\n    }\n\n    parseAndIgnoreWhitespace(source, pos);\n\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    String remaining = source.substring(pos.getIndex());\n    if (remaining.trim().length() > 0) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n\n    if (n < 0 || d <= 0) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}