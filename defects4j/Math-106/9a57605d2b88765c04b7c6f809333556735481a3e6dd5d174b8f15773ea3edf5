{
    "generation": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole part\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number; reset position to initial index\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n    \n    // parse numerator\n    int numStart = pos.getIndex();\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        // invalid numeral; reset position to initial index\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    // minus signs are only allowed in the whole part, so numerator must be non-negative\n    if (num.intValue() < 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(numStart);\n        return null;\n    }\n    \n    // parse the separator '/'\n    int sepStart = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0:\n        // no '/' found: then interpret the numerator as the whole fraction (with denominator 1)\n        return new Fraction(num.intValue(), 1);\n    case '/':\n        // found '/', continue to parse denominator\n        break;\n    default:\n        // invalid character instead of '/', so reset and mark error position\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(sepStart);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    int denStart = pos.getIndex();\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    // minus signs are not allowed for the denominator\n    if (den.intValue() < 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(denStart);\n        return null;\n    }\n    \n    // At this point the whole part may be negative (which is allowed),\n    // but numerator and denominator are assumed to be positive.\n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}