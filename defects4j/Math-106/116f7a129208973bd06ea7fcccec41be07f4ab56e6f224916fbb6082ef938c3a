{
    "generation": "    /**\n     * Parses a string to produce a {@link Fraction} object.  This method\n     * expects the string to be formatted as a proper fraction.\n     * <p>\n     * Minus signs are only allowed in the whole number part - i.e.,\n     * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n     * will result in a <code>ParseException</code>.\n     * \n     * @param source the string to parse\n     * @param pos input/ouput parsing parameter.\n     * @return the parsed {@link Fraction} object.\n     */\n    public Fraction parse(String source, ParsePosition pos) {\n        // try to parse improper fraction\n        Fraction ret = super.parse(source, pos);\n        if (ret != null) {\n            return ret;\n        }\n        \n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse whole\n        Number whole = getWholeFormat().parse(source, pos);\n        if (whole == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n        \n        // parse numerator\n        int numStartIndex = pos.getIndex(); // Store index before parsing numerator\n        Number num = getNumeratorFormat().parse(source, pos);\n        if (num == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // Minus signs must be leading, invalid expression if numerator is negative\n        if (num.intValue() < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(numStartIndex); // Error index points to the start of the invalid numerator\n            return null;\n        }\n\n        // parse '/'\n        int slashStartIndex = pos.getIndex(); // Store index before parsing '/'\n        char c = parseNextCharacter(source, pos);\n        switch (c) {\n        case 0 :\n            // no '/'\n            // This seems incorrect for a proper fraction format like \"W N/D\".\n            // Should likely be an error if '/' is missing after W and N.\n            // However, retaining original behavior to address only the reported bug.\n            // Original behavior: return num as a fraction (e.g. \"5 2\" -> 2/1)\n            return new Fraction(num.intValue(), 1);\n        case '/' :\n            // found '/', continue parsing denominator\n            break;\n        default :\n            // invalid character instead of '/'\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(slashStartIndex); // Error index points to the unexpected character\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse denominator\n        int denStartIndex = pos.getIndex(); // Store index before parsing denominator\n        Number den = getDenominatorFormat().parse(source, pos);\n        if (den == null) {\n            // invalid integer number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n        \n        // Minus signs must be leading, invalid expression if denominator is negative\n        if (den.intValue() < 0) {\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(denStartIndex); // Error index points to the start of the invalid denominator\n            return null;\n        }\n\n        int w = whole.intValue();\n        int n = num.intValue();\n        int d = den.intValue();\n        // Calculate the numerator based on whole, numerator, and denominator parts.\n        // Use MathUtils.sign to handle the sign of the whole number correctly.\n        // e.g., -3 1/2 => w=-3, n=1, d=2 => (abs(-3)*2 + 1) * sign(-3) = (3*2 + 1) * -1 = -7\n        return new Fraction(((Math.abs(w) * d) + n) * org.apache.commons.math.util.MathUtils.sign(w), d);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}