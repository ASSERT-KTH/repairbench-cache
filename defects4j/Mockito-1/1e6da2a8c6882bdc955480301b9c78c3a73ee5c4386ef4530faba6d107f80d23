{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArgs = invocation.getRawArguments();\n    int argCount = rawArgs.length;\n    int matcherCount = matchers.size();\n\n    boolean varArgs = invocation.getMethod().isVarArgs();\n    if (!varArgs) {\n        // Simple matching\n        for (int position = 0; position < matcherCount; position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && argCount > position) {\n                ((CapturesArguments) m).captureFrom(rawArgs[position]);\n            }\n        }\n        return;\n    }\n\n    int varargIndex = invocation.getMethod().getParameterTypes().length - 1;\n\n    for (int position = 0; position < matcherCount; position++) {\n        Matcher m = matchers.get(position);\n        if (!(m instanceof CapturesArguments))\n            continue;\n\n        boolean isVarargMatcher = isVarargMatcher(m);\n        boolean isVarargParam = position == varargIndex;\n\n        if (isVarargParam && isVarargMatcher && argCount > varargIndex) {\n            Object varArgsArray = rawArgs[varargIndex];\n\n            if (varArgsArray == null) {\n                // Just one 'null' vararg argument\n                ((CapturesArguments) m).captureFrom(null);\n            } else if (varArgsArray.getClass().isArray()) {\n                int length = Array.getLength(varArgsArray);\n                for (int i = 0; i < length; i++) {\n                    ((CapturesArguments) m).captureFrom(Array.get(varArgsArray, i));\n                }\n            } else {\n                // Defensive: if it's not array, treat as single argument\n                ((CapturesArguments) m).captureFrom(varArgsArray);\n            }\n            // since we've captured all varargs already, it does not make sense to process other matchers.\n            return;\n        } else if (argCount > position) {\n            ((CapturesArguments) m).captureFrom(rawArgs[position]);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}