{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n        // This method needs to handle capturing arguments for both regular methods\n        // and vararg methods. The previous implementation threw UnsupportedOperationException\n        // when encountering vararg methods. The commented-out code suggests the intended logic.\n\n        // Iterate through the registered matchers for this invocation.\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n\n            // Check if the current matcher is an instance of CapturesArguments (meaning it can capture)\n            // and if there's a corresponding argument in the invocation for the current position.\n            // The check `invocation.getRawArguments().length > position` is crucial to prevent\n            // ArrayIndexOutOfBoundsException if the number of matchers exceeds the actual arguments.\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n\n                // Check if the method is a vararg method AND the current 'position' corresponds\n                // to the vararg array argument AND the matcher itself is a vararg-specific matcher\n                // (e.g., AnyVararg).\n                // `isVariableArgument` and `isVarargMatcher` are assumed to be helper methods\n                // available within this class (InvocationMatcher).\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object array = invocation.getRawArguments()[position]; // Get the raw vararg array argument\n\n                    // If the vararg array itself is not null (e.g., not `method((String[]) null)`),\n                    // iterate through its elements and capture each one individually.\n                    if (array != null) {\n                        for (int i = 0; i < Array.getLength(array); i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                        }\n                    } else {\n                        // If the vararg array is null, capture null once.\n                        ((CapturesArguments) m).captureFrom(null);\n                    }\n                    // When a vararg matcher (like `anyVararg()`) successfully captures from\n                    // the vararg array, it signifies that it has processed all relevant\n                    // arguments from that point onwards. Therefore, we can return early\n                    // as no other matchers would apply to the captured varargs.\n                    return;\n                } else {\n                    // For non-vararg arguments, or if the argument at 'position' is part of\n                    // a vararg but the current matcher is a regular matcher (not a vararg-specific one),\n                    // capture the argument directly.\n                    // Using `getRawArguments()[position]` provides direct access to the argument object.\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}