{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        // Handle varargs case properly instead of throwing exception\n        Object[] rawArgs = invocation.getRawArguments();\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (position < rawArgs.length) {\n                    if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                        // Handle vararg parameter\n                        Object array = rawArgs[position];\n                        if (array != null && array.getClass().isArray()) {\n                            for (int i = 0; i < Array.getLength(array); i++) {\n                                ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                            }\n                        } else {\n                            // Handle null array case\n                            ((CapturesArguments) m).captureFrom(null);\n                        }\n                    } else {\n                        // Handle regular parameters\n                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                    }\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\nprivate boolean isVariableArgument(Invocation invocation, int position) {\n    // Implementation to check if position is the vararg parameter position\n    // This is a placeholder - actual implementation would be method-specific\n    return position == invocation.getRawArguments().length - 1 &&\n           invocation.getMethod().isVarArgs();\n}\n\nprivate boolean isVarargMatcher(Matcher m) {\n    // Implementation to check if matcher is meant for varargs\n    // This is a placeholder - actual implementation depends on your matcher types\n    return true; // Assume all matchers can handle varargs\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}