{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n        // Defer F\u00e1bio's comment on issue 1 capturesArgumentsFrom has different implementation for varargs\n        // The implementation seems correct AFAICT\n        // This combines both varargs and non-varargs logic\n        int lastParameterPosition = invocation.getMethod().getParameterTypes().length - 1;\n        boolean isVarargsMethod = invocation.getMethod().isVarArgs();\n        Object[] rawArguments = invocation.getRawArguments();\n\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            // Check if matcher captures and if an argument potentially exists at this position\n            // Using rawArguments length check handles cases where fewer args are passed than matchers exist.\n            if (m instanceof CapturesArguments && rawArguments.length > position) {\n                CapturesArguments captor = (CapturesArguments) m;\n                Object argument = rawArguments[position];\n\n                // Check if this specific argument position corresponds to the varargs parameter\n                if (isVarargsMethod && position == lastParameterPosition) {\n                    // Argument should be an array (or null) if it's the vararg one.\n                    if (argument != null && argument.getClass().isArray()) {\n                        // Capture each element of the vararg array\n                        for (int i = 0; i < Array.getLength(argument); i++) {\n                            captor.captureFrom(Array.get(argument, i));\n                        }\n                    } else {\n                        // Vararg array is null or somehow not an array (e.g. null passed explicitly).\n                        // Capture the value itself.\n                        captor.captureFrom(argument);\n                    }\n                } else {\n                    // It's a regular argument (or a varargs method but not the varargs parameter position).\n                    // Capture the argument directly.\n                    captor.captureFrom(argument);\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}