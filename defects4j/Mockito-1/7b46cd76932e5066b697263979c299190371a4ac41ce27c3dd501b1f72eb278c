{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArguments = invocation.getRawArguments();\n    int rawArgumentsLength = rawArguments.length;\n    boolean vararg = invocation.getMethod().isVarArgs();\n    int matcherSize = matchers.size();\n\n    for (int position = 0; position < matcherSize; position++) {\n        Matcher m = matchers.get(position);\n        if (m instanceof CapturesArguments) {\n            if (vararg && position == matcherSize - 1 && rawArgumentsLength > position) {\n                // Last matcher for varargs method, handle varargs argument(s)\n                Object varargArray = rawArguments[position];\n                if (varargArray == null) {\n                    // handle null vararg array\n                    ((CapturesArguments) m).captureFrom(null);\n                } else if (varargArray.getClass().isArray()) {\n                    int len = Array.getLength(varargArray);\n                    for (int i = 0; i < len; i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));\n                    }\n                } else {\n                    // Defensive, should not happen. Just capture object itself.\n                    ((CapturesArguments) m).captureFrom(varargArray);\n                }\n            } else if (rawArgumentsLength > position) {\n                // Normal (non-vararg) argument, or before varargs\n                ((CapturesArguments) m).captureFrom(rawArguments[position]);\n            }\n            // else: more matchers than arguments, skip, nothing to capture\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}