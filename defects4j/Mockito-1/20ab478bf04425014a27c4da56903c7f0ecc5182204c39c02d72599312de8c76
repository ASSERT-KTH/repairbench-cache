{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        Object[] rawArguments = invocation.getRawArguments();\n        int indexOfVararg = rawArguments.length - 1;\n\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n\n            if (!(m instanceof CapturesArguments)) {\n                continue;\n            }\n\n            if (position < indexOfVararg) {\n                ((CapturesArguments) m).captureFrom(rawArguments[position]);\n            } else if (position == indexOfVararg) {\n                Object varargsArray = rawArguments[indexOfVararg];\n\n                if (isVarargMatcher(m) && varargsArray != null) {\n                    int varargLength = Array.getLength(varargsArray);\n                    for (int i = 0; i < varargLength; i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(varargsArray, i));\n                    }\n                } else {\n                    ((CapturesArguments) m).captureFrom(varargsArray);\n                }\n            } else {\n                // defensive: matchers can be more than raw arguments (e.g., multiple matchers on varargs elements), so get last parameter repeatedly\n                Object varargsArray = rawArguments[indexOfVararg];\n                if (isVarargMatcher(m) && varargsArray != null) {\n                    int offset = position - indexOfVararg;\n                    if (offset < Array.getLength(varargsArray)) {\n                        ((CapturesArguments) m).captureFrom(Array.get(varargsArray, offset));\n                    }\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}