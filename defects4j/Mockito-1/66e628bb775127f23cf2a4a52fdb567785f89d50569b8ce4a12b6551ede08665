{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n        // The original code threw an UnsupportedOperationException when dealing with varargs.\n        // The commented-out section in the original code provides the intended logic\n        // for handling both regular arguments and vararg arguments for argument capturing.\n        // This fix replaces the problematic 'if/else' structure and the exception\n        // with the more comprehensive logic from the commented-out section.\n        // It's assumed that `isVariableArgument` and `isVarargMatcher` helper methods\n        // are available and correctly implemented within the class context.\n\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n\n            // Check if the current matcher is an argument captor and if there's\n            // a corresponding argument in the invocation at this position.\n            // invocation.getRawArguments().length > position prevents ArrayIndexOutOfBoundsException\n            // if there are more matchers than actual arguments.\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                // If the method argument at 'position' is the variable argument (vararg array itself)\n                // AND the matcher is specifically designed to capture varargs (e.g., AnyVararg).\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object varargArray = invocation.getRawArguments()[position];\n\n                    // For varargs, iterate through each element of the array and capture them individually.\n                    // Array.getLength and Array.get are used to handle potential primitive arrays as well.\n                    for (int i = 0; i < java.lang.reflect.Array.getLength(varargArray); i++) {\n                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(varargArray, i));\n                    }\n                    // According to the original comment, once all varargs are captured by a vararg matcher,\n                    // it does not make sense to process other matchers, so we return early.\n                    return;\n                } else {\n                    // For regular arguments, or for a vararg argument where the matcher is NOT\n                    // a specific vararg matcher (i.e., it's a regular matcher for the vararg array itself),\n                    // capture the argument directly.\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}