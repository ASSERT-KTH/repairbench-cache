{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int rawArgCount = invocation.getRawArguments().length;\n        int matcherCount = matchers.size();\n        int indexOfVararg = rawArgCount - 1;\n        // In the vararg case, matchers.size() may be less, equal, or greater than rawArgCount\n        // The last matcher may be a vararg matcher; if so, and it implements CapturesArguments, we capture all items from the vararg array\n        for (int position = 0; position < matcherCount; position++) {\n            Matcher m = matchers.get(position);\n\n            if (m instanceof CapturesArguments) {\n                // handle the vararg matcher case\n                boolean isVarargMatcher = isVariableArgument(invocation, position) && isVarargMatcher(m);\n\n                if (isVarargMatcher) {\n                    Object varargArray = invocation.getRawArguments()[position];\n                    int len = varargArray == null ? 0 : java.lang.reflect.Array.getLength(varargArray);\n                    for (int i = 0; i < len; i++) {\n                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(varargArray, i));\n                    }\n                    // since we've captured all varargs already, it does not make sense to process other matchers.\n                    return;\n                } else if (rawArgCount > position) {\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    } else {\n        // same logic as before for non-varargs\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\n// Helper methods (typically exist in enclosing class)\nprivate boolean isVariableArgument(Invocation invocation, int position) {\n    return invocation.getMethod().isVarArgs() && position == invocation.getRawArguments().length - 1;\n}\nprivate boolean isVarargMatcher(Matcher m) {\n    return m.getClass().getSimpleName().equals(\"LocalizedMatcher\") &&\n            m.toString().contains(\"AnyVararg\") || m.toString().contains(\"anyVararg()\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}