{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArguments = invocation.getRawArguments();\n    // If the invoked method is varargs, handle the vararg parameter specially\n    if (invocation.getMethod().isVarArgs()) {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            // Only attempt to capture if there is a corresponding argument\n            if (m instanceof CapturesArguments && rawArguments.length > position) {\n                // If this parameter is the vararg one and the matcher is meant to capture varargs...\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object varargsArray = rawArguments[position];\n                    // If the vararg value is a non-null array, capture each element separately.\n                    if (varargsArray != null && varargsArray.getClass().isArray()) {\n                        int length = java.lang.reflect.Array.getLength(varargsArray);\n                        for (int i = 0; i < length; i++) {\n                            ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(varargsArray, i));\n                        }\n                    } else {\n                        // Otherwise, capture the value as-is (it might be null)\n                        ((CapturesArguments) m).captureFrom(varargsArray);\n                    }\n                    // Once we've captured varargs elements, there\u2019s no need to process further matchers.\n                    return;\n                } else {\n                    ((CapturesArguments) m).captureFrom(rawArguments[position]);\n                }\n            }\n        }\n    } else {\n        // Non-varargs: capture each argument using its usual accessor.\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}