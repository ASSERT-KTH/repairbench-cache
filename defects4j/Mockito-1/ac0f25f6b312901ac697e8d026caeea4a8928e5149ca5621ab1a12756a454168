{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int rawArgumentsLength = invocation.getRawArguments().length;\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (!(m instanceof CapturesArguments)) {\n                continue;\n            }\n\n            // check we have enough arguments\n            if (rawArgumentsLength <= position) {\n                continue; // skip capturing if no argument at this position\n            }\n\n            if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                Object varArgsArray = invocation.getRawArguments()[position];\n                if (varArgsArray != null) {\n                    int varArgLength = Array.getLength(varArgsArray);\n                    for (int i = 0; i < varArgLength; i++) {\n                        Object element = Array.get(varArgsArray, i);\n                        ((CapturesArguments) m).captureFrom(element);\n                    }\n                } else {\n                    ((CapturesArguments) m).captureFrom(null);\n                }\n                // since we captured all elements, don't continue with subsequent matchers\n                return;\n            } else {\n                Object arg = invocation.getRawArguments()[position];\n                ((CapturesArguments) m).captureFrom(arg);\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                // defensive: avoid index out of bounds\n                if (invocation.getRawArguments().length > position) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}