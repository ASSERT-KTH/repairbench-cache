{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        // Loop through all matchers. In a varargs method, the last real parameter is actually an array.\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            // Only capture if we have a corresponding raw argument.\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                // If this is the varargs parameter and the matcher is built to capture varargs...\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object array = invocation.getRawArguments()[position];\n                    // If the varargs array is non-null, capture each element.\n                    if (array != null && array.getClass().isArray()) {\n                        for (int i = 0; i < Array.getLength(array); i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                        }\n                    } else {\n                        // Otherwise, capture the null value as is.\n                        ((CapturesArguments) m).captureFrom(array);\n                    }\n                    // Once we have captured all varargs elements, no point in processing further.\n                    return;\n                } else {\n                    // For non-varargs parameters, just capture the argument.\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}