{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    // Defensive check: If no matchers, nothing to do\n    if (matchers == null || matchers.isEmpty()) {\n        return;\n    }\n\n    Object[] arguments = invocation.getRawArguments();\n\n    if (invocation.getMethod().isVarArgs()) {\n        int varArgIndex = arguments.length - 1;\n\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                // This matcher could be for fixed args *or* the vararg array (which is last parameter)\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object array = arguments[position];\n                    if (array != null && array.getClass().isArray()) {\n                        int len = Array.getLength(array);\n                        for (int i = 0; i < len; i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                        }\n                    } else if (array == null) {\n                        // In the case of a null vararg array, capture once with null (consistent with matchers)\n                        ((CapturesArguments) m).captureFrom(null);\n                    }\n                    // Since we've captured the varargs, no sense to process more for this matcher\n                    return;\n                } else if (position < arguments.length) {\n                    // Fixed argument positions, capture normally\n                    ((CapturesArguments) m).captureFrom(arguments[position]);\n                }\n            }\n        }\n    } else {\n        // Non-varargs: direct positional mapping between matchers and arguments\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && position < arguments.length) {\n                ((CapturesArguments) m).captureFrom(arguments[position]);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}