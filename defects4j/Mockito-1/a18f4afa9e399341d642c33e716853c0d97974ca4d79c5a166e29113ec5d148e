{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArguments = invocation.getRawArguments();\n    int numMatchers = matchers.size();\n\n    // Handle varargs\n    if (invocation.getMethod().isVarArgs()) {\n        int totalArgs = rawArguments == null ? 0 : rawArguments.length;\n        int indexOfVararg = totalArgs - 1;\n        for (int position = 0; position < numMatchers; position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                // If varargs and the matcher is for the varargs parameter (last matcher)\n                if (totalArgs > 0 && position == indexOfVararg && indexOfVararg >= 0) {\n                    Object varargArray = rawArguments[indexOfVararg];\n                    if (isVarargMatcher(m) && varargArray != null && varargArray.getClass().isArray()) {\n                        int varargLength = Array.getLength(varargArray);\n                        for (int i = 0; i < varargLength; i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));\n                        }\n                        // since we've captured all varargs already, it does not make sense to process other matchers.\n                        return;\n                    } else {\n                        ((CapturesArguments) m).captureFrom(varargArray);\n                    }\n                } else if (rawArguments != null && position < totalArgs) {\n                    ((CapturesArguments) m).captureFrom(rawArguments[position]);\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < numMatchers; position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\n// Helper method to determine if the matcher is intended for varargs\nprivate static boolean isVarargMatcher(Matcher matcher) {\n    // This implementation might need to be adjusted to your actual varargs matchers\n    // but in Mockito core internal it is often named as AnyVararg or similar\n    return matcher instanceof org.mockito.internal.matchers.VarargMatcher;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}