{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArguments = invocation.getRawArguments();\n    int matcherCount = matchers.size();\n    int argCount = rawArguments.length;\n    for (int position = 0; position < matcherCount; position++) {\n        Matcher m = matchers.get(position);\n        if (!(m instanceof CapturesArguments)) {\n            continue;\n        }\n        // If the method uses varargs and we're at the last matcher, handle the varargs array\n        if (invocation.getMethod().isVarArgs() && position == matcherCount - 1) {\n            if (position < argCount) {\n                Object varargsArg = rawArguments[position];\n                if (varargsArg != null && varargsArg.getClass().isArray()) {\n                    int length = java.lang.reflect.Array.getLength(varargsArg);\n                    for (int i = 0; i < length; i++) {\n                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(varargsArg, i));\n                    }\n                } else {\n                    ((CapturesArguments) m).captureFrom(varargsArg);\n                }\n            }\n        } else {\n            if (position < argCount) {\n                ((CapturesArguments) m).captureFrom(rawArguments[position]);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}