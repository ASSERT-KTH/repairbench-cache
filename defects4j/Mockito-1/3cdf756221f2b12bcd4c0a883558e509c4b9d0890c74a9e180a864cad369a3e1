{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    // This method attempts to capture arguments from an Invocation.\n    // It takes into account whether a method has varargs or not, \n    // and handles vararg matchers correctly.\n\n    Object[] rawArgs = invocation.getRawArguments();\n    int argCount = rawArgs == null ? 0 : rawArgs.length;\n\n    // for each matcher, if it captures arguments, ask it to capture\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n\n        if (m instanceof CapturesArguments && argCount > position) {\n            // check for varargs special handling - if this matcher is a vararg matcher and the method is vararg\n            if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                Object array = rawArgs[position];\n                if (array != null && array.getClass().isArray()) {\n                    int length = Array.getLength(array);\n                    for (int i = 0; i < length; i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                    }\n                } else {\n                    // vararg is null or not an array, still propagate for completeness\n                    ((CapturesArguments) m).captureFrom(array);\n                }\n                // since we've captured all varargs already, it does not make sense to process other matchers.\n                return;\n            } else {\n                ((CapturesArguments) m).captureFrom(rawArgs[position]);\n            }\n        }\n    }\n}\n\n// Helper methods likely present in this class, needed for context\nprivate boolean isVariableArgument(Invocation invocation, int position) {\n    return invocation.getMethod().isVarArgs() && position == invocation.getMethod().getParameterTypes().length - 1;\n}\n\nprivate boolean isVarargMatcher(Matcher matcher) {\n    return matcher instanceof VarargMatcher;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}