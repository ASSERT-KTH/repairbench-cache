{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (!invocation.getMethod().isVarArgs()) {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n        return;\n    }\n\n    // handle varargs\n    Object[] rawArguments = invocation.getRawArguments();\n    int varargPosition = rawArguments.length - 1;\n\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n\n        boolean isVararg = isVariableArgument(invocation, position);\n        boolean isVarargMatcher = isVarargMatcher(m);\n\n        if (m instanceof CapturesArguments && rawArguments.length > position) {\n            if (isVararg && isVarargMatcher) {\n                Object varargArray = rawArguments[position];\n                if (varargArray != null && varargArray.getClass().isArray()) {\n                    int len = Array.getLength(varargArray);\n                    for (int i = 0; i < len; i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));\n                    }\n                } else {\n                    // null varargs array, nothing to capture\n                }\n            } else {\n                ((CapturesArguments) m).captureFrom(rawArguments[position]);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}