{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (!(m instanceof CapturesArguments)) {\n                continue;\n            }\n            if (invocation.getRawArguments().length > position) {\n                // check if this argument is the varargs array\n                boolean isVarargParameter = position == (invocation.getMethod().getParameterTypes().length - 1);\n                Object arg = invocation.getRawArguments()[position];\n                if (isVarargParameter && isVarargMatcher(m) && arg != null && arg.getClass().isArray()) {\n                    int length = Array.getLength(arg);\n                    for (int i = 0; i < length; i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(arg, i));\n                    }\n                    // after capturing varargs elements, no need to proceed others\n                    return;\n                } else {\n                    ((CapturesArguments) m).captureFrom(arg);\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}