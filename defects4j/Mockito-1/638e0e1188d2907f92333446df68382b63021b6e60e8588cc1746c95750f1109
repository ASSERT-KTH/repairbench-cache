{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArgs = invocation.getRawArguments();\n    boolean isVarArgs = invocation.getMethod().isVarArgs();\n\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n        if (!(m instanceof CapturesArguments)) {\n            continue;\n        }\n        CapturesArguments captor = (CapturesArguments) m;\n\n        // handle var\u2010arg parameter: flatten the array\n        if (isVarArgs && position == rawArgs.length - 1) {\n            Object varArgArray = rawArgs[position];\n            if (varArgArray != null && varArgArray.getClass().isArray()) {\n                int length = java.lang.reflect.Array.getLength(varArgArray);\n                for (int i = 0; i < length; i++) {\n                    Object element = java.lang.reflect.Array.get(varArgArray, i);\n                    captor.captureFrom(element);\n                }\n            } else {\n                // a null varargs array is treated as a single null\n                captor.captureFrom(null);\n            }\n        } else if (position < rawArgs.length) {\n            // normal (non\u2010vararg) parameter\n            captor.captureFrom(invocation.getArgumentAt(position, Object.class));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}