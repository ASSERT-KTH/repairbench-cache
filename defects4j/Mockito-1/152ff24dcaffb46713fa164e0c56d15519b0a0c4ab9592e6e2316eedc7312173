{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                // This condition checks if the argument at 'position' is a vararg array\n                // and if the current matcher is specifically designed to capture varargs.\n                // The methods `isVariableArgument` and `isVarargMatcher` are assumed to be\n                // private helper methods existing within this class (InvocationMatcher).\n                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object array = invocation.getRawArguments()[position];\n                    // Defensive null check for the vararg array itself.\n                    // A vararg method called with `null` for the vararg argument will pass a null array.\n                    if (array != null) {\n                        for (int i = 0; i < java.lang.reflect.Array.getLength(array); i++) {\n                            ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));\n                        }\n                    }\n                    // Since all elements of the vararg array have been captured by this matcher,\n                    // there's no need to process further matchers for this invocation.\n                    // This implies that a single vararg matcher typically consumes all remaining arguments\n                    // if it's placed at the vararg position.\n                    return;\n                } else {\n                    // For regular (non-vararg) arguments, or if the matcher is not a vararg-specific matcher,\n                    // capture the argument at the current position directly.\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}