{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n        if (invocation.getMethod().isVarArgs()) {\n            int indexOfVararg = invocation.getRawArguments().length - 1;\n            // Fix: Handle varargs case properly instead of throwing UnsupportedOperationException\n            // We need to process all arguments properly for varargs case\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    if (position == indexOfVararg) {\n                        // Handle varargs special case\n                        Object[] rawArgs = invocation.getRawArguments();\n                        if (position < rawArgs.length) {\n                            Object varargArray = rawArgs[position];\n                            if (varargArray != null && varargArray.getClass().isArray()) {\n                                // For varargs, capture each element of the array\n                                int length = Array.getLength(varargArray);\n                                for (int i = 0; i < length; i++) {\n                                    ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));\n                                }\n                            } else {\n                                // Handle case where vararg is null or not actually an array\n                                ((CapturesArguments) m).captureFrom(varargArray);\n                            }\n                        }\n                    } else {\n                        // Handle regular argument case for non-varargs position\n                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                    }\n                }\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}