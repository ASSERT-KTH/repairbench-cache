{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n\n            if (!(m instanceof CapturesArguments)) {\n                continue;\n            }\n\n            if (invocation.getRawArguments().length <= position) {\n                continue;\n            }\n\n            // if current matcher corresponds to the vararg parameter and is a vararg matcher\n            if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                Object array = invocation.getRawArguments()[position];\n                if (array != null) {\n                    int length = Array.getLength(array);\n                    for (int i = 0; i < length; i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                    }\n                }\n                // since we've captured all varargs already, no need to process further\n                return;\n            } else {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (invocation.getRawArguments().length > position) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}