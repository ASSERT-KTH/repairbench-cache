{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArguments = invocation.getRawArguments();\n    if (invocation.getMethod().isVarArgs()) {\n        // The number of formal parameters (the last one is varargs)\n        int parameterCount = invocation.getMethod().getParameterTypes().length;\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher matcher = matchers.get(position);\n            // If there is no argument to capture at this position, skip it.\n            if (rawArguments.length <= position || !(matcher instanceof CapturesArguments)) {\n                continue;\n            }\n            // If this parameter is the varargs parameter...\n            if (position == parameterCount - 1) {\n                Object varargsArray = rawArguments[position];\n                if (varargsArray != null && varargsArray.getClass().isArray()) {\n                    int length = java.lang.reflect.Array.getLength(varargsArray);\n                    for (int i = 0; i < length; i++) {\n                        ((CapturesArguments) matcher).captureFrom(java.lang.reflect.Array.get(varargsArray, i));\n                    }\n                } else {\n                    // If the vararg array is null, capture null.\n                    ((CapturesArguments) matcher).captureFrom(null);\n                }\n                // We assume that the varargs matcher is the last one so we can stop here.\n                return;\n            } else {\n                // Normal (non-varargs) parameter: capture its corresponding argument.\n                ((CapturesArguments) matcher).captureFrom(rawArguments[position]);\n            }\n        }\n    } else {\n        // Non-varargs: capture each argument directly by position.\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher matcher = matchers.get(position);\n            if (matcher instanceof CapturesArguments) {\n                ((CapturesArguments) matcher).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}