{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object array = invocation.getRawArguments()[position];\n                    for (int i = 0; i < Array.getLength(array); i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                    }\n                    //since we've captured all varargs already, it does not make sense to process other matchers.\n                    return;\n                } else {\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\nprivate boolean isVariableArgument(Invocation invocation, int position) {\n    // Implementation of isVariableArgument would depend on your specific needs\n    // This is a placeholder - you should implement the actual logic\n    int lastParamIndex = invocation.getMethod().getParameterTypes().length - 1;\n    return position == lastParamIndex;\n}\n\nprivate boolean isVarargMatcher(Matcher matcher) {\n    // Implementation of isVarargMatcher would depend on your specific needs\n    // This is a placeholder - you should implement the actual logic\n    // Typically, you'd check if the matcher is specifically meant for varargs\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}