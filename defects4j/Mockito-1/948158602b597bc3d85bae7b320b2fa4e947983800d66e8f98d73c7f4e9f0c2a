{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = indexOfVarargParameter(invocation.getMethod().getParameterTypes());\n        if (indexOfVararg != -1 && indexOfVararg < matchers.size()) {\n            Object[] rawArguments = invocation.getRawArguments();\n            object VarargMatcher = matchers.get(indexOfVararg);\n            if (VarargMatcher instanceof CapturesArguments) {\n                if (rawArguments.length > indexOfVararg) {\n                    Object varargValue = rawArguments[indexOfVararg];\n                    if (varargValue != null && isVarargArray(varargValue, indexOfVararg)) {\n                        // Handle case where vararg is passed as an array\n                        Object[] array = (Object[]) varargValue;\n                        for (Object element : array) {\n                            ((CapturesArguments) VarargMatcher).captureFrom(element);\n                        }\n                    } else {\n                        // Handle case where vararg elements are spread\n                        int varargCount = rawArguments.length - indexOfVararg;\n                        for (int i = indexOfVararg; i < rawArguments.length; i++) {\n                            ((CapturesArguments) VarargMatcher).captureFrom(rawArguments[i]);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\nprivate int indexOfVarargParameter(Class<?>[] parameterTypes) {\n    int varargIndex = -1;\n    for (int i = 0; i < parameterTypes.length; i++) {\n        if (parameterTypes[i].isArray()) {\n            varargIndex = i;\n        }\n    }\n    return varargIndex;\n}\n\nprivate boolean isVarargArray(Object value, int varargIndex) {\n    return value != null && value.getClass().isArray() && value.getClass().getComponentType().equals(invocation.getMethod().getParameterTypes()[varargIndex].getComponentType());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}