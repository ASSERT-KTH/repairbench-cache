{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (position < indexOfVararg) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                } else {\n                    Object varargs = invocation.getArgumentAt(indexOfVararg, Object[].class);\n                    if (varargs == null) {\n                        ((CapturesArguments) m).captureFrom(null);\n                    } else {\n                        int lastVarargsIndex = Array.getLength(varargs) + indexOfVararg - matchers.size();\n                        if (position >= indexOfVararg && position <= lastVarargsIndex) {\n                            ((CapturesArguments) m).captureFrom(Array.get((Object[]) varargs, position - indexOfVararg));\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}