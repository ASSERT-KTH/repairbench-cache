{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArgs = invocation.getRawArguments();\n    boolean isVarArgs = invocation.getMethod().isVarArgs();\n    int varargIndex = rawArgs.length - 1;\n\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n        if (!(m instanceof CapturesArguments)) {\n            continue;\n        }\n        CapturesArguments captor = (CapturesArguments) m;\n\n        // handle real var\u2010arg slice\n        if (isVarArgs && position == varargIndex) {\n            Object array = rawArgs[position];\n            if (array != null && array.getClass().isArray()) {\n                int len = java.lang.reflect.Array.getLength(array);\n                for (int i = 0; i < len; i++) {\n                    captor.captureFrom(java.lang.reflect.Array.get(array, i));\n                }\n            } else {\n                // even if it's null or not an array, capture it as a single value\n                captor.captureFrom(array);\n            }\n            // we've consumed the varargs; nothing more to capture\n            return;\n        }\n\n        // non\u2013varargs or earlier arguments\n        if (position < rawArgs.length) {\n            captor.captureFrom(rawArgs[position]);\n        } else {\n            // fallback: in some mismatch cases use the typed argument\n            captor.captureFrom(invocation.getArgumentAt(position, Object.class));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}