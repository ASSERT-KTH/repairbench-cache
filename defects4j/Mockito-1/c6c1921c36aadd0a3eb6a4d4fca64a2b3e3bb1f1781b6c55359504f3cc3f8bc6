{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArguments = invocation.getRawArguments();\n    Class<?>[] parameterTypes = invocation.getMethod().getParameterTypes();\n    // Loop over all matcher positions\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n        if (!(m instanceof CapturesArguments)) {\n            continue;\n        }\n        // Only proceed if we have an argument at this position\n        if (rawArguments.length <= position) {\n            continue;\n        }\n        // Check if this argument is the varargs one.\n        if (invocation.getMethod().isVarArgs() && position == parameterTypes.length - 1) {\n            Object varargArray = rawArguments[position];\n            // If the matcher is the special vararg matcher (e.g. AnyVararg),\n            // then capture each element of the varargs array individually.\n            if (AnyVararg.ANY_VARARG.equals(m)) {\n                if (varargArray != null && varargArray.getClass().isArray()) {\n                    int length = java.lang.reflect.Array.getLength(varargArray);\n                    for (int i = 0; i < length; i++) {\n                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(varargArray, i));\n                    }\n                } else {\n                    // If the vararg array is null, capture null.\n                    ((CapturesArguments) m).captureFrom(varargArray);\n                }\n            } else {\n                // Otherwise capture the entire varargs array as one argument.\n                ((CapturesArguments) m).captureFrom(varargArray);\n            }\n        } else {\n            // Non-varargs (or non-special) parameter: capture the argument normally.\n            ((CapturesArguments) m).captureFrom(rawArguments[position]);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}