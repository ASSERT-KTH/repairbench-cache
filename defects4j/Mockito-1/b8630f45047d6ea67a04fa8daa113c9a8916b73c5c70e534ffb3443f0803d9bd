{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        \n        // Process normal arguments before varargs\n        for (int position = 0; position < indexOfVararg && position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n        \n        // Process the vararg argument if we have a matching matcher\n        if (indexOfVararg < matchers.size()) {\n            Matcher m = matchers.get(indexOfVararg);\n            if (m instanceof CapturesArguments) {\n                Object varargArray = invocation.getRawArguments()[indexOfVararg];\n                if (varargArray == null) {\n                    ((CapturesArguments) m).captureFrom(null);\n                } else if (varargArray.getClass().isArray()) {\n                    ((CapturesArguments) m).captureFrom(varargArray);\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}