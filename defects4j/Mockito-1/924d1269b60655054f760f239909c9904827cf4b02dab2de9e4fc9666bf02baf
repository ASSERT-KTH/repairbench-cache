{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        Object[] varargs = (Object[]) invocation.getRawArguments()[indexOfVararg];\n        Matcher varargMatcher = matchers.get(indexOfVararg);\n        if (varargMatcher instanceof CapturesArguments) {\n            for (Object vararg : varargs) {\n                ((CapturesArguments) varargMatcher).captureFrom(vararg);\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n        if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n            if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                Object array = invocation.getRawArguments()[position];\n                for (int i = 0; i < Array.getLength(array); i++) {\n                    ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                }\n                // Continue processing other matchers\n                // Removed the return statement here\n            } else {\n                ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n            }\n        }\n    }\n}\n\nprivate boolean isVariableArgument(Invocation invocation, int position) {\n    return invocation.getMethod().isVarArgs() && position == invocation.getRawArguments().length - 1;\n}\n\nprivate boolean isVarargMatcher(Matcher matcher) {\n    return matcher instanceof AnyVararg;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}