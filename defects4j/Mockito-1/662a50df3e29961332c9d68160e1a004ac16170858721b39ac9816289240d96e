{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    // Loop through all matcher positions.\n    for (int position = 0; position < matchers.size(); position++) {\n        // Only try to capture if an argument exists at this position.\n        if (invocation.getRawArguments().length > position) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                // For varargs, the matcher for the vararg parameter should capture each element in the array.\n                if (invocation.getMethod().isVarArgs()\n                        && isVariableArgument(invocation, position)\n                        && isVarargMatcher(m)) {\n                    Object varArgArray = invocation.getRawArguments()[position];\n                    if (varArgArray != null && varArgArray.getClass().isArray()) {\n                        for (int i = 0; i < Array.getLength(varArgArray); i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(varArgArray, i));\n                        }\n                    } else {\n                        // If the vararg array is null, simply capture null.\n                        ((CapturesArguments) m).captureFrom(varArgArray);\n                    }\n                    // Since varargs is always the last parameter, no need to process further matchers.\n                    return;\n                } else {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}