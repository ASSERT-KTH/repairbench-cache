{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    int rawArgsLen = invocation.getRawArguments().length;\n    if (invocation.getMethod().isVarArgs()) {\n        // We need to handle varargs correctly for argument capturing\n        int paramLen = matchers.size(); // number of matchers (the way InvocationMatcher is constructed, this matches params)\n        // Usually paramLen == invocation.getRawArguments().length\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                // If vararg matcher, capture as array, otherwise capture as is\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object array = invocation.getRawArguments()[position];\n                    if (array != null && array.getClass().isArray()) {\n                        int arrayLength = java.lang.reflect.Array.getLength(array);\n                        for (int i = 0; i < arrayLength; i++) {\n                            ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));\n                        }\n                    }\n                    // Nothing to capture if array is null or 0 length\n                } else {\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\n// Helper methods assumed to be present in class as per commented out code\nprivate boolean isVariableArgument(Invocation invocation, int index) {\n    // Returns true if this is the last parameter and is varargs\n    return invocation.getMethod().isVarArgs() && (index == invocation.getRawArguments().length - 1);\n}\n\nprivate boolean isVarargMatcher(Matcher m) {\n    // matcher is for any vararg or any vararg style matcher, etc.\n    return m instanceof org.mockito.internal.matchers.VarargMatcher;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}