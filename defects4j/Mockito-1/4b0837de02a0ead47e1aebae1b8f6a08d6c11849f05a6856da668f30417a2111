{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        Object[] rawArguments = invocation.getRawArguments();\n        if (rawArguments.length > 0) {\n            Object varargArray = rawArguments[rawArguments.length - 1];\n            if (varargArray != null && varargArray.getClass().isArray()) {\n                int length = Array.getLength(varargArray);\n                for (int i = 0; i < length; i++) {\n                    Object argument = Array.get(varargArray, i);\n                    for (Matcher m : matchers) {\n                        if (m instanceof CapturesArguments) {\n                            ((CapturesArguments) m).captureFrom(argument);\n                        }\n                    }\n                }\n            } else {\n                // Handle case where the last argument is not an array (not typical for varargs)\n                for (Matcher m : matchers) {\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(varargArray);\n                    }\n                }\n            }\n        } else {\n            // No arguments provided, handle each potential matcher as needed\n            for (Matcher m : matchers) {\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(null);\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                Object argument = position < invocation.getArgumentCount() \n                    ? invocation.getArgumentAt(position, Object.class)\n                    : null;\n                ((CapturesArguments) m).captureFrom(argument);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}