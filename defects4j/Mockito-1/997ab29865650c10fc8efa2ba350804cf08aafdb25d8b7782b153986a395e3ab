{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            // Ensure the matcher is a CapturesArguments and there's a corresponding argument in the invocation\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                // Check if the current argument is the variable argument (vararg) array\n                // AND if the current matcher is specifically a vararg matcher (e.g., AnyVararg)\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object array = invocation.getRawArguments()[position];\n                    // If the vararg array itself is null (e.g., method(null as vararg))\n                    if (array == null) {\n                        ((CapturesArguments) m).captureFrom(null);\n                    } else {\n                        // Iterate through the elements of the vararg array and capture each one\n                        for (int i = 0; i < java.lang.reflect.Array.getLength(array); i++) {\n                            ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));\n                        }\n                    }\n                    // Once a vararg matcher has captured all its arguments, no other matchers\n                    // in this invocation need to be processed for capturing.\n                    return;\n                } else {\n                    // For regular arguments or non-vararg matchers, capture the argument at the current position\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}