{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        Object[] rawArguments = invocation.getRawArguments();\n        int indexOfVararg = rawArguments.length - 1;\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (invocation.getRawArguments().length > position) {\n                    // Check if this matcher corresponds to the vararg parameter and if matcher is 'vararg matcher'\n                    boolean isVarargParam = isVariableArgument(invocation, position);\n                    boolean isVarargMatcher = isVarargMatcher(m);\n                    if (isVarargParam && isVarargMatcher) {\n                        Object array = rawArguments[position];\n                        if (array != null && array.getClass().isArray()) {\n                            int length = Array.getLength(array);\n                            for (int i = 0; i < length; i++) {\n                                Object element = Array.get(array, i);\n                                ((CapturesArguments) m).captureFrom(element);\n                            }\n                        } else {\n                            ((CapturesArguments) m).captureFrom(array);\n                        }\n                        // Because we've captured all varargs already for single matcher,\n                        // it does not make sense to process other matchers beyond varargs.\n                        return;\n                    } else {\n                        ((CapturesArguments) m).captureFrom(rawArguments[position]);\n                    }\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}