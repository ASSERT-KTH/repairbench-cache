{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    // Handles varargs case\n    if (invocation.getMethod().isVarArgs()) {\n        int rawArgCount = invocation.getRawArguments().length;\n        int matcherCount = matchers.size();\n\n        // The last parameter in the method is the vararg array.\n        int indexOfVararg = rawArgCount - 1;\n\n        for (int position = 0; position < matcherCount; position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                // If this is the matcher for the vararg parameter and matcherCount doesn't match rawArgCount,\n                // we need to capture all elements of the vararg array separately.\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object varargsArray = invocation.getRawArguments()[position];\n                    if (varargsArray != null && varargsArray.getClass().isArray()) {\n                        int length = Array.getLength(varargsArray);\n                        for (int i = 0; i < length; i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(varargsArray, i));\n                        }\n                    } else {\n                        // handle null varargs: matcher should still see null\n                        ((CapturesArguments) m).captureFrom(varargsArray);\n                    }\n                    // We've captured all varargs, so we do not need to process further matchers\n                    return;\n                } else {\n                    Object arg = null;\n                    // Don't cause ArrayIndexOutOfBounds if there are fewer method args than matchers\n                    if (position < rawArgCount) {\n                        arg = invocation.getRawArguments()[position];\n                    }\n                    ((CapturesArguments) m).captureFrom(arg);\n                }\n            }\n        }\n    } else {\n        // non-varargs: simple, one-to-one capture\n        int argCount = invocation.getRawArguments().length;\n        int matcherCount = matchers.size();\n        for (int position = 0; position < matcherCount; position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                Object arg = null;\n                if (position < argCount) {\n                    arg = invocation.getRawArguments()[position];\n                }\n                ((CapturesArguments) m).captureFrom(arg);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}