{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        Object[] rawArgs = invocation.getRawArguments();\n        int varargPosition = rawArgs.length - 1;\n\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n\n            if (!(m instanceof CapturesArguments)) {\n                continue;\n            }\n\n            // Check if this is the varargs parameter (last)\n            boolean isVarargParam = position == matchers.size() - 1;\n            \n            if (isVarargParam && varargPosition < rawArgs.length) {\n                Object varargArray = rawArgs[varargPosition];\n\n                if (varargArray != null && varargArray.getClass().isArray() && isVarargMatcher(m)) {\n                    // capture each element of the vararg array separately\n                    int length = Array.getLength(varargArray);\n                    for (int i = 0; i < length; i++) {\n                        Object varargElement = Array.get(varargArray, i);\n                        ((CapturesArguments) m).captureFrom(varargElement);\n                    }\n                    continue;\n                }\n            }\n\n            // normal parameter\n            if (position < rawArgs.length) {\n                ((CapturesArguments) m).captureFrom(rawArgs[position]);\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}