{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        // Handle varargs case properly\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object array = invocation.getRawArguments()[position];\n                    if (array != null && array.getClass().isArray()) {\n                        for (int i = 0; i < Array.getLength(array); i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                        }\n                    }\n                } else {\n                    // For non-vararg positions, capture normally\n                    if (position < invocation.getRawArguments().length) {\n                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                    }\n                }\n            }\n        }\n        return;\n    } else {\n        // Handle non-varargs case (original code)\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}\n\n// These helper methods likely exist elsewhere in the code, but we need to reference them\nprivate boolean isVariableArgument(Invocation invocation, int position) {\n    // Implementation would check if this is the varargs position for the invocation\n    return position == invocation.getRawArguments().length - 1 &&\n           invocation.getMethod().isVarArgs();\n}\n\nprivate boolean isVarargMatcher(Matcher m) {\n    // Implementation would check if the matcher can handle varargs\n    return true; // Simplified for this fix\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}