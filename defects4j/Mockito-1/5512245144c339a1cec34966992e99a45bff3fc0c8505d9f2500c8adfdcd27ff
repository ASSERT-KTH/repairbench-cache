{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    // Handle varargs methods\n    if (invocation.getMethod().isVarArgs()) {\n        Object[] rawArguments = invocation.getRawArguments();\n        int indexOfVararg = rawArguments.length - 1;\n\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n\n            if (m instanceof CapturesArguments) {\n                // Vararg parameter\n                if (position == indexOfVararg && isVarargMatcher(m)) {\n                    Object array = rawArguments[position];\n                    if (array != null && array.getClass().isArray()) {\n                        // Capture each vararg element\n                        int length = java.lang.reflect.Array.getLength(array);\n                        for (int i = 0; i < length; i++) {\n                            ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));\n                        }\n                    } else {\n                        // Capture null or non-array vararg (e.g. null passed as vararg)\n                        ((CapturesArguments) m).captureFrom(array);\n                    }\n                } else if (rawArguments.length > position) {\n                    ((CapturesArguments) m).captureFrom(rawArguments[position]);\n                } // else: Don't try to capture more than what's available.\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n            }\n        }\n    }\n}\n\n// Helper method, needed just like in the commented old code:\nprivate boolean isVarargMatcher(Matcher matcher) {\n    // 'AnyVararg' is the marker matcher for vararg in Mockito\n    return matcher.getClass().getSimpleName().equals(\"AnyVararg\");\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}