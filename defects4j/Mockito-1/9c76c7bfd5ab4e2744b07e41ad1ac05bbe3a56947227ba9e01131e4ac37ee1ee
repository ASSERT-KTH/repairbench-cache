{
    "generation": "    public void captureArgumentsFrom(Invocation invocation) {\n//        if (invocation.getMethod().isVarArgs()) {\n//            int indexOfVararg = invocation.getRawArguments().length - 1;\n//            throw new UnsupportedOperationException();\n//\n//        } else {\n//            for (int position = 0; position < matchers.size(); position++) {\n//                Matcher m = matchers.get(position);\n//                if (m instanceof CapturesArguments) {\n//                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n//                }\n//            }\n//        }\n\n        // Commented out code restored below\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            //TODO SF extract this method\n            if (m instanceof CapturesArguments) {\n                //TODO SF - this whole lot can be moved captureFrom implementation\n                if(invocation.getMethod().isVarArgs() && position == invocation.getRawArguments().length-1) {\n                    //TODO SF does it handle null vararg array?\n                    // captures all arguments from the vararg array\n                    Object array = invocation.getRawArguments()[position];\n                    int arrayLength = java.lang.reflect.Array.getLength(array);\n                    for (int i = 0; i < arrayLength; i++) {\n                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));\n                    }\n                    //since we've captured all varargs already, it does not make sense to process other matchers.\n                    //processing further matchers has no sense (because vararg captures all remaining args)\n                    //however, we need to handle the case when the vararg is ArrayEquals matcher:\n                    if(VarargMatcher.class.isAssignableFrom(m.getClass())){\n                        // if it's a vararg matcher then we're done\n                        return;\n                    } else {\n                        // seems like the vararg is matched using non-vararg matcher (e.g. eq(..))\n                        // according to current impl of ArgumentCaptor.capture() we need to capture the whole array\n                        // capturing the whole array is the default behavior below\n                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                    }\n\n                } else if (invocation.getRawArguments().length > position) {\n                    // captures regular arguments\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}