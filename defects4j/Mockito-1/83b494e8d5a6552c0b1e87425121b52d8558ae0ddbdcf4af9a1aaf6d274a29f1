{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (!invocation.getMethod().isVarArgs()) {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n        return;\n    }\n\n    Object[] rawArguments = invocation.getRawArguments();\n\n    int varargPosition = rawArguments.length - 1;\n\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n        if (!(m instanceof CapturesArguments)) {\n            continue;\n        }\n        if (rawArguments.length <= position) {\n            // Defensive: do not try to access beyond arguments\n            continue;\n        }\n        if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n            Object varargsArray = rawArguments[position];\n            if (varargsArray != null) {\n                int length = java.lang.reflect.Array.getLength(varargsArray);\n                for (int i = 0; i < length; i++) {\n                    Object element = java.lang.reflect.Array.get(varargsArray, i);\n                    ((CapturesArguments) m).captureFrom(element);\n                }\n            }\n            // since we've captured the entire vararg array, skip further matchers\n            return;\n        } else {\n            ((CapturesArguments) m).captureFrom(rawArguments[position]);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}