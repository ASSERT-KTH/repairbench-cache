{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher matcher = matchers.get(position);\n        if (!(matcher instanceof CapturesArguments)) {\n            continue;\n        }\n        // If there isn\u2019t an argument at this position, skip capturing.\n        if (invocation.getRawArguments().length <= position) {\n            continue;\n        }\n        // If the method is varargs and this is the vararg argument,\n        // capture each element of the varargs array.\n        if (invocation.getMethod().isVarArgs() \n                && isVariableArgument(invocation, position) \n                && isVarargMatcher(matcher)) {\n            Object varargsArray = invocation.getRawArguments()[position];\n            if (varargsArray != null) {\n                int length = Array.getLength(varargsArray);\n                for (int i = 0; i < length; i++) {\n                    ((CapturesArguments) matcher).captureFrom(Array.get(varargsArray, i));\n                }\n            } else {\n                ((CapturesArguments) matcher).captureFrom(null);\n            }\n            // Since the vararg parameter is always the last one, we can return immediately.\n            return;\n        } else {\n            // For non\u2010vararg parameters (or when the matcher isn\u2019t a vararg matcher)\n            // capture using the type-safe accessor.\n            ((CapturesArguments) matcher).captureFrom(invocation.getArgumentAt(position, Object.class));\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}