{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    // Support varargs matching and argument capturing\n    Object[] rawArguments = invocation.getRawArguments();\n    int rawArgCount = rawArguments.length;\n    boolean isVarArgs = invocation.getMethod().isVarArgs();\n    int matcherCount = matchers.size();\n\n    for (int position = 0; position < matcherCount; position++) {\n        Matcher m = matchers.get(position);\n        if (!(m instanceof CapturesArguments)) {\n            continue;\n        }\n        // If not enough raw arguments, skip\n        if (rawArgCount <= position) {\n            continue;\n        }\n\n        // Handle varargs capturing\n        if (isVarArgs && isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n            Object array = rawArguments[position];\n            if (array == null) {\n                // If vararg array is null, just capture null once (matches mockito behavior)\n                ((CapturesArguments) m).captureFrom(null);\n            } else {\n                int length = Array.getLength(array);\n                for (int i = 0; i < length; i++) {\n                    ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                }\n            }\n            // After capturing all varargs for vararg matcher, do not process more matchers for this argument\n            return;\n        } else {\n            ((CapturesArguments) m).captureFrom(rawArguments[position]);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}