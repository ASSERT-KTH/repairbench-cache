{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (!invocation.getMethod().isVarArgs()) {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    } else {\n        Object[] rawArguments = invocation.getRawArguments();\n        int varargPosition = invocation.getMethod().getParameterTypes().length - 1;\n        int rawArgumentsLength = rawArguments.length;\n        for (int matcherIndex = 0; matcherIndex < matchers.size(); matcherIndex++) {\n            Matcher m = matchers.get(matcherIndex);\n            if (!(m instanceof CapturesArguments)) {\n                continue;\n            }\n            if (matcherIndex < varargPosition) {\n                if (matcherIndex >= rawArgumentsLength) {\n                    break;  // defensive, but usually safe\n                }\n                ((CapturesArguments) m).captureFrom(rawArguments[matcherIndex]);\n            } else if (matcherIndex == varargPosition) {\n                // vararg matcher\n                if (rawArgumentsLength <= varargPosition) {\n                    // no varargs given, treat as empty\n                    continue;\n                }\n                Object varargArray = rawArguments[varargPosition];\n                if (varargArray == null || !varargArray.getClass().isArray()) {\n                    // probably null vararg\n                    ((CapturesArguments) m).captureFrom(varargArray);\n                    continue;\n                }\n                int varargLength = Array.getLength(varargArray);\n                for (int i = 0; i < varargLength; i++) {\n                    ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));\n                }\n            } else {\n                // extra matchers (anyVararg matchers expansion), shouldn't normally happen but handle gracefully\n                // There's a chance when same varargs matcher used repeatedly\n                continue;\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}