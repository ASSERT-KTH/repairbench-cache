{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArguments = invocation.getRawArguments();\n    int argumentCount = rawArguments.length;\n    boolean isVarArgs = invocation.getMethod().isVarArgs();\n    int matcherCount = matchers.size();\n\n    for (int position = 0; position < matcherCount; position++) {\n        Matcher m = matchers.get(position);\n        if (m instanceof CapturesArguments && argumentCount > position) {\n            // If this is the vararg position and it's a varargs method and matcher is vararg matcher\n            if (isVarArgs && isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                Object varargArray = rawArguments[position];\n                if (varargArray == null) {\n                    // Capture null vararg\n                    ((CapturesArguments) m).captureFrom(null);\n                } else {\n                    int varargLength = Array.getLength(varargArray);\n                    for (int i = 0; i < varargLength; i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));\n                    }\n                }\n                // since we've captured all varargs already, it does not make sense to process other matchers.\n                return;\n            } else {\n                ((CapturesArguments) m).captureFrom(rawArguments[position]);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}