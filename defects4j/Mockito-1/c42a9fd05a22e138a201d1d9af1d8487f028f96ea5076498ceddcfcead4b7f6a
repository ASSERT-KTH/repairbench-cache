{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    List<Matcher<?>> varargMatchers = new ArrayList<>();\n    List<Object> varargValues = new ArrayList<>();\n\n    if (invocation.getMethod().isVarArgs()) {\n        int varargPosition = invocation.getRawArguments().length - 1;\n        Matcher<?> varargMatcher = matchers.get(varargPosition);\n        if (varargMatcher instanceof CapturesVarargArguments) {\n            ((CapturesVarargArguments) varargMatcher).captureFrom(invocation.getRawArguments()[varargPosition]);\n        } else if (varargMatcher instanceof CapturesArguments) {\n            Object array = invocation.getRawArguments()[varargPosition];\n            for (int i = 0; i < Array.getLength(array); i++) {\n                ((CapturesArguments) varargMatcher).captureFrom(Array.get(array, i));\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher<?> m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n\n    // Handle vararg matchers separately\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher<?> m = matchers.get(position);\n        if (m instanceof CapturesVarargArguments) {\n            varargMatchers.add(m);\n            Object[] varargs = (Object[]) invocation.getRawArguments()[position];\n            for (Object vararg : varargs) {\n                varargValues.add(vararg);\n            }\n            // Capture all vararg values\n            ((CapturesVarargArguments) m).captureFrom(varargValues.toArray());\n            // Break after handling varargs\n            break;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}