{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        // In the varargs case, handle capturing of arguments, including the varargs array.\n        int rawArgsLen = invocation.getRawArguments().length;\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && rawArgsLen > position) {\n                // Check if this is the vararg position and the matcher expects a vararg.\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object array = invocation.getRawArguments()[position];\n                    int varargLength = array == null ? 0 : java.lang.reflect.Array.getLength(array);\n                    for (int i = 0; i < varargLength; i++) {\n                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));\n                    }\n                    // All varargs captured, no need to process more matchers.\n                    return;\n                } else {\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}