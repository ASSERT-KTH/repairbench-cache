{
    "generation": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        // For a varargs method, the declared parameters include a varargs array as the last element.\n        // The number of fixed (non\u2010varargs) parameters is:\n        int fixedParameterCount = invocation.getMethod().getParameterTypes().length - 1;\n        Object[] rawArguments = invocation.getRawArguments();\n        int matcherCount = matchers.size();\n        \n        for (int pos = 0; pos < matcherCount; pos++) {\n            if (pos >= rawArguments.length) {\n                // No argument was supplied for this matcher.\n                break;\n            }\n            Matcher m = matchers.get(pos);\n            if (!(m instanceof CapturesArguments)) {\n                continue;\n            }\n            if (pos == fixedParameterCount) {\n                // This matcher corresponds to the varargs parameter.\n                Object varargsArgument = rawArguments[pos];\n                if (varargsArgument != null && varargsArgument.getClass().isArray()) {\n                    int len = java.lang.reflect.Array.getLength(varargsArgument);\n                    for (int i = 0; i < len; i++) {\n                        ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(varargsArgument, i));\n                    }\n                } else {\n                    // In case the varargs argument is not an array, capture it directly.\n                    ((CapturesArguments) m).captureFrom(varargsArgument);\n                }\n                // Once we've captured the varargs parameter, we return.\n                return;\n            } else {\n                // Fixed (non-varargs) parameter: capture directly.\n                ((CapturesArguments) m).captureFrom(rawArguments[pos]);\n            }\n        }\n    } else {\n        // Non-varargs method: iterate over matchers and capture each corresponding argument.\n        for (int position = 0; position < matchers.size(); position++) {\n            if (position >= invocation.getRawArguments().length) {\n                break;\n            }\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}