{
    "generation": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n\n    // First pass: inject mocks whose concrete class exactly matches the field type\n    for (Field field : fields) {\n        for (Iterator<Object> it = mocks.iterator(); it.hasNext(); ) {\n            Object mock = it.next();\n            if (field.getType().equals(mock.getClass())) {\n                field.setAccessible(true);\n                try {\n                    field.set(fieldInstance, mock);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(\"Failed to inject mock into field \" + field, e);\n                }\n                it.remove();\n                break;\n            }\n        }\n    }\n\n    // Second pass: inject remaining mocks into fields where the field type is a supertype\n    for (Field field : fields) {\n        for (Iterator<Object> it = mocks.iterator(); it.hasNext(); ) {\n            Object mock = it.next();\n            if (field.getType().isAssignableFrom(mock.getClass())) {\n                field.setAccessible(true);\n                try {\n                    field.set(fieldInstance, mock);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(\"Failed to inject mock into field \" + field, e);\n                }\n                it.remove();\n                break;\n            }\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}