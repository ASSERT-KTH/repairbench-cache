{
    "generation": "    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        // Collect fields into a mutable list to sort them.\n        // The original method `orderedInstanceFieldsFrom` returns an Iterable, which needs to be\n        // converted to a List for sorting.\n        List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));\n\n        // Sort fields by type specificity to ensure that mocks are injected into\n        // the most specific matching field first. This addresses the \"best matching type\" requirement.\n        // If a mock can be injected into a field of type SpecificType and also into a field\n        // of type SuperType, it should be injected into the SpecificType field.\n        fields.sort(new Comparator<Field>() {\n            @Override\n            public int compare(Field f1, Field f2) {\n                Class<?> type1 = f1.getType();\n                Class<?> type2 = f2.getType();\n\n                // If type1 is a proper subtype of type2 (e.g., SpecificBean vs Object),\n                // then f1 is more specific and should come first.\n                // We want f1 before f2, so return -1.\n                if (type2.isAssignableFrom(type1) && !type1.isAssignableFrom(type2)) {\n                    return -1;\n                }\n                // If type2 is a proper subtype of type1, then f2 is more specific and should come first.\n                // We want f2 before f1, so return 1.\n                if (type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n                    return 1;\n                }\n                // If types are the same or unrelated (e.g., String vs Integer),\n                // maintain their original relative order (0) or use a stable tie-breaker\n                // like field name for deterministic results across JVMs (f1.getName().compareTo(f2.getName())).\n                // For this specific bug, maintaining original order for ties is sufficient.\n                return 0;\n            }\n        });\n\n        // Iterate through the sorted fields and attempt injection.\n        // Because the fields are sorted by specificity, the first matching mock\n        // will be injected into the most specific field, and then removed from the `mocks` set,\n        // ensuring it's injected only once.\n        for(Field field : fields) {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}