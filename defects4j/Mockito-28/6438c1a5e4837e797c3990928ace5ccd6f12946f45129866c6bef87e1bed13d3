{
    "generation": "import java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Set;\n\n    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));\n\n        // Sort fields by type specificity (most specific first)\n        Collections.sort(fields, new Comparator<Field>() {\n            @Override\n            public int compare(Field f1, Field f2) {\n                Class<?> type1 = f1.getType();\n                Class<?> type2 = f2.getType();\n\n                // If type1 is a superclass or superinterface of type2, and type2 is not a superclass/interface of type1,\n                // then type2 is more specific than type1. So f2 should come before f1.\n                if (type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n                    return 1; // f1 comes after f2\n                }\n                // If type2 is a superclass or superinterface of type1, and type1 is not a superclass/interface of type2,\n                // then type1 is more specific than type2. So f1 should come before f2.\n                else if (type2.isAssignableFrom(type1) && !type1.isAssignableFrom(type2)) {\n                    return -1; // f1 comes before f2\n                }\n                // If types are unrelated or the same, maintain original order (or any consistent order)\n                return 0;\n            }\n        });\n\n        for(Field field : fields) {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}