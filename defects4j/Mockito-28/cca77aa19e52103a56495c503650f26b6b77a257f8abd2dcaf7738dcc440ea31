{
    "generation": "    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        // Get the fields. Assuming orderedInstanceFieldsFrom returns a mutable List.\n        // If it were to return an immutable list, a copy would be needed:\n        // List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));\n        List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n\n        // Sort fields by type specificity (more specific types first).\n        // If Class A is assignable from Class B (A.isAssignableFrom(B)), then B is a subtype of A,\n        // making B more specific. We want fields with more specific types to be processed first.\n        Collections.sort(fields, new Comparator<Field>() {\n            @Override\n            public int compare(Field f1, Field f2) {\n                Class<?> type1 = f1.getType();\n                Class<?> type2 = f2.getType();\n\n                // If type1 is a supertype of type2 (e.g., type1=Object, type2=Bean),\n                // then type2 is more specific. We want f2 to come before f1.\n                // So, f1 should come after f2 (return 1).\n                if (type1.isAssignableFrom(type2) && !type1.equals(type2)) {\n                    return 1; // f1 comes after f2 (type2 is more specific)\n                }\n                // If type2 is a supertype of type1 (e.g., type2=Object, type1=Bean),\n                // then type1 is more specific. We want f1 to come before f2.\n                // So, f1 should come before f2 (return -1).\n                if (type2.isAssignableFrom(type1) && !type1.equals(type2)) {\n                    return -1; // f1 comes before f2 (type1 is more specific)\n                }\n                // If types are the same or unrelated (e.g., String and Integer), maintain their relative order.\n                return 0;\n            }\n        });\n\n        // Iterate over the sorted fields, attempting to inject mocks into the most specific types first.\n        // This ensures that if a mock can be injected into multiple fields of compatible types,\n        // it is injected into the field with the most specific type.\n        for(Field field : fields) {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}