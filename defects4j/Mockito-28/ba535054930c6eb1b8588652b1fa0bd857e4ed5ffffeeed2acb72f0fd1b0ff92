{
    "generation": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    // Get all fields and sort them by type specificity (most specific first)\n    List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));\n    fields.sort((f1, f2) -> {\n        Class<?> t1 = f1.getType();\n        Class<?> t2 = f2.getType();\n        if (t1.isAssignableFrom(t2)) {\n            return 1; // t2 is more specific\n        } else if (t2.isAssignableFrom(t1)) {\n            return -1; // t1 is more specific\n        }\n        return 0;\n    });\n\n    for (Field field : fields) {\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}