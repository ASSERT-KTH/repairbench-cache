{
    "generation": "    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        // Get all instance fields from the class\n        List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));\n        \n        // Sort fields by their declared type, from most specific to least specific.\n        // This ensures that if a mock can be injected into multiple fields (e.g., a field of type Bean and a field of type Object,\n        // where Bean extends Object), it will first attempt to inject into the most specific type (Bean).\n        fields.sort((f1, f2) -> {\n            Class<?> type1 = f1.getType();\n            Class<?> type2 = f2.getType();\n\n            if (type1.equals(type2)) {\n                return 0; // Same types, maintain original relative order\n            }\n            if (type1.isAssignableFrom(type2)) { \n                // type2 is a subclass or implementor of type1 (or same).\n                // This means type2 is more specific than type1.\n                // We want type2's field (f2) to come before type1's field (f1).\n                // So, f1 should be 'greater' than f2.\n                return 1; \n            } else if (type2.isAssignableFrom(type1)) { \n                // type1 is a subclass or implementor of type2.\n                // This means type1 is more specific than type2.\n                // We want type1's field (f1) to come before type2's field (f2).\n                // So, f1 should be 'less' than f2.\n                return -1;\n            } else {\n                return 0; // Unrelated types, maintain original relative order\n            }\n        });\n\n        // Iterate through the sorted fields and attempt injection\n        for(Field field : fields) {\n            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}