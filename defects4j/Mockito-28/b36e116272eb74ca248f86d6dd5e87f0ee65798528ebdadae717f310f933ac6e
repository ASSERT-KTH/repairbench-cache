{
    "generation": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));\n    // Sort fields to prioritize more specific types first\n    fields.sort((f1, f2) -> {\n        Class<?> type1 = f1.getType();\n        Class<?> type2 = f2.getType();\n        if (type1.isAssignableFrom(type2)) {\n            return 1; // type2 is more specific, f2 comes later in list, so we return 1 to sort f2 before f1\n        } else if (type2.isAssignableFrom(type1)) {\n            return -1; // type1 is more specific, f1 comes before f2\n        } else {\n            return 0; // unrelated types, maintain original order\n        }\n    });\n    for (Field field : fields) {\n        CandidateFilter.FilterResult result = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        Object injectedMock = result.getMock();\n        if (injectedMock != null) {\n            result.thenInject();\n            mocks.remove(injectedMock);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}