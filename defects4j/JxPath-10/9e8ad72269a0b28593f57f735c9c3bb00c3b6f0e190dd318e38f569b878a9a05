{
    "generation": "    public final Object computeValue(EvalContext context) {\n        Object v1 = args[0].computeValue(context);\n        Object v2 = args[1].computeValue(context);\n\n        /*\n         * XPath 1.0 spec, Section 3.4 Booleans: Relational expressions\n         * involving node-sets require checking for the existence of a node\n         * in the node-set that satisfies the comparison. If the node-set\n         * is empty, no such node exists, and the comparison must yield false.\n         * This applies to all comparison operators: =, !=, <, >, <=, >=.\n         *\n         * We check if either evaluated argument represents an empty node-set.\n         * In JXPath evaluation, empty node-sets are often represented as\n         * empty Iterators.\n         */\n        boolean v1IsEmptyIterator = v1 instanceof java.util.Iterator && !((java.util.Iterator) v1).hasNext();\n        boolean v2IsEmptyIterator = v2 instanceof java.util.Iterator && !((java.util.Iterator) v2).hasNext();\n\n        // Add check for NodeSet interface as well, if iterator check misses it.\n        boolean v1IsEmptyNodeSet = v1 instanceof org.apache.commons.jxpath.NodeSet && !org.apache.commons.jxpath.util.InfoSetUtil.booleanValue(v1);\n        boolean v2IsEmptyNodeSet = v2 instanceof org.apache.commons.jxpath.NodeSet && !org.apache.commons.jxpath.util.InfoSetUtil.booleanValue(v2);\n\n\n        if (v1IsEmptyIterator || v2IsEmptyIterator || v1IsEmptyNodeSet || v2IsEmptyNodeSet) {\n             // If either operand is an empty node-set (represented as empty iterator or empty NodeSet object),\n             // the result of the comparison is always false.\n            return Boolean.FALSE;\n        }\n\n        // If neither operand represents an empty node-set, proceed with the standard comparison logic.\n        return compute(v1, v2) ? Boolean.TRUE : Boolean.FALSE;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}