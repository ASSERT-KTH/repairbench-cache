{
    "generation": "    public final Object computeValue(EvalContext context) {\n        Object value1 = args[0].computeValue(context);\n        Object value2 = args[1].computeValue(context);\n\n        // XPath 1.0 rules for comparisons involving node-sets:\n        // A comparison is true if and only if there is a node in the first node-set\n        // and a node in the second node-set such that the result of performing the comparison\n        // on the string-values of the two nodes is true.\n        // If either operand is a node-set (even when compared to a non-node-set type),\n        // and that node-set is empty, then \"there is a node\" condition cannot be met,\n        // so the comparison should always be false.\n        // JXPath's test suite implies this rule also applies to '!=' comparisons.\n        boolean value1IsEmptyNodeSet = false;\n        if (value1 instanceof EvalContext) {\n            value1IsEmptyNodeSet = !((EvalContext) value1).hasNext();\n        } else if (value1 instanceof Collection) {\n            value1IsEmptyNodeSet = ((Collection) value1).isEmpty();\n        }\n        // NodePointer.NODE_NOT_FOUND is another representation of an empty node set (sentinel)\n        // that could potentially be returned by expressions or after EvalContext processing.\n        else if (value1 == NodePointer.NODE_NOT_FOUND) {\n            value1IsEmptyNodeSet = true;\n        }\n\n        boolean value2IsEmptyNodeSet = false;\n        if (value2 instanceof EvalContext) {\n            value2IsEmptyNodeSet = !((EvalContext) value2).hasNext();\n        } else if (value2 instanceof Collection) {\n            value2IsEmptyNodeSet = ((Collection) value2).isEmpty();\n        } else if (value2 == NodePointer.NODE_NOT_FOUND) {\n            value2IsEmptyNodeSet = true;\n        }\n\n        if (value1IsEmptyNodeSet || value2IsEmptyNodeSet) {\n            return Boolean.FALSE;\n        }\n\n        // If neither operand is an empty node set, proceed with the standard comparison logic\n        return compute(value1, value2) ? Boolean.TRUE : Boolean.FALSE;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}