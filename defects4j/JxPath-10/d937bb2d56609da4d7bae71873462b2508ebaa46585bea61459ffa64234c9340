{
    "generation": "    public final Object computeValue(EvalContext context) {\n        Object value1 = args[0].computeValue(context);\n        Object value2 = args[1].computeValue(context);\n\n        // According to XPath 1.0, for comparison operations (equal, not-equal, less-than,\n        // less-than-or-equal, greater-than, greater-than-or-equal), if either operand\n        // is an empty node-set, the result of the comparison is always false.\n        // This 'computeValue' method, by returning Boolean.TRUE/FALSE, implies it's\n        // part of a class that handles boolean-returning operations, making this\n        // a suitable place to implement this general XPath rule.\n\n        boolean isEmptyNodeSet1 = false;\n        if (value1 instanceof EvalContext) {\n            // An EvalContext is an iterator representing a node-set. If it has no elements, it's empty.\n            // Calling hasNext() does not consume the iterator, so it's safe for subsequent 'compute' call.\n            isEmptyNodeSet1 = !((EvalContext) value1).hasNext();\n        } else if (value1 instanceof org.apache.commons.jxpath.NodeSet) {\n            // A NodeSet directly holds a collection of nodes.\n            isEmptyNodeSet1 = ((org.apache.commons.jxpath.NodeSet) value1).getNodes().isEmpty();\n        } else if (value1 instanceof org.apache.commons.jxpath.ri.model.beans.NullPointer) {\n            // A NullPointer often represents a non-existent node, effectively an empty node-set.\n            isEmptyNodeSet1 = true;\n        }\n\n        boolean isEmptyNodeSet2 = false;\n        if (value2 instanceof EvalContext) {\n            isEmptyNodeSet2 = !((EvalContext) value2).hasNext();\n        } else if (value2 instanceof org.apache.commons.jxpath.NodeSet) {\n            isEmptyNodeSet2 = ((org.apache.commons.jxpath.NodeSet) value2).getNodes().isEmpty();\n        } else if (value2 instanceof org.apache.commons.jxpath.ri.model.beans.NullPointer) {\n            isEmptyNodeSet2 = true;\n        }\n\n        if (isEmptyNodeSet1 || isEmptyNodeSet2) {\n            // If either side is an empty node-set, the comparison is false.\n            return Boolean.FALSE;\n        }\n\n        // If neither operand is an empty node-set, proceed with the specific operation's computation.\n        // The 'compute' method (which is specific to each operation like >=, !=, etc.)\n        // will then handle the actual type conversions and comparison logic.\n        return compute(value1, value2) ? Boolean.TRUE : Boolean.FALSE;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}