{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and stores it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName) && !isLHSOfAssignment(n)) {\n            numUsesWithinCfgNode++;\n          }\n        }\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }\n\n    private boolean isLHSOfAssignment(Node n) {\n      Node current = n.getParent();\n      while (current != null) {\n        if (current.isAssign() && current.getFirstChild() == n) {\n          return true;\n        }\n        current = current.getParent();\n      }\n      return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}