{
    "generation": "private void getNumUseInUseCfgNode(final Node cfgNode) {\n    numUsesWithinCfgNode = 0;\n    AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isName() && n.getString().equals(varName)) {\n                if (parent.isAssign() && parent.getFirstChild() == n) {\n                    // Do not count the variable if it's on the left-hand side of an assignment\n                    // and is the first child of the assignment node, unless it's within a hook (conditional expression).\n                    if (!NodeUtil.isHook(parent.getParent())) {\n                        return;\n                    }\n                }\n                numUsesWithinCfgNode++;\n            }\n        }\n    };\n\n    NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}