{
    "generation": "private void getNumUseInUseCfgNode(final Node cfgNode) {\n    numUsesWithinCfgNode = 0;\n    AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isName() && n.getString().equals(varName) &&\n                // We make a special exception when the entire cfgNode is a chain\n                // of assignments, since in that case the assignment statements\n                // will happen after the inlining of the right-hand side.\n                // Also, we need to exclude cases where the variable is assigned\n                // inside a conditional expression (hook) to avoid incorrect inlining.\n                !(parent.isAssign() && parent.getFirstChild() == n) &&\n                !(NodeUtil.isHook(NodeUtil.getEnclosingStatement(n)) && NodeUtil.isAssignmentOp(parent))) {\n                numUsesWithinCfgNode++;\n            }\n        }\n    };\n\n    NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}