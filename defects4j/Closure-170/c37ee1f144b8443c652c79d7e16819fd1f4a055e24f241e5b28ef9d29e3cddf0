{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinUseCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName) &&\n        // Don't count lhs of top-level assignment chain or assignments within LHS of HOOK.\n        !(parent.isAssign() &&\n         (parent.getFirstChild() == n) &&\n         (parent.getParent() == cfgNode ||\n          (parent.getParent() != null && parent.getParent().isHook() &&\n           parent.getParent().getParent() == cfgNode)))) {\n        numUsesWithinCfgNode++;\n      }\n    }\n\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}