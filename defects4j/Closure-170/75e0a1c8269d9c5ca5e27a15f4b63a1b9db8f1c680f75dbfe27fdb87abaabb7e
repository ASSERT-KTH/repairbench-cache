{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinUseCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName) &&\n          // We make a special exception when the entire cfgNode is a chain\n          // of assignments, since in that case the assignment statements\n          // will happen after the inlining of the right hand side.\n          // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n          //   and remove this special case.\n          !(parent.isAssign() &&\n            (parent.getFirstChild() == n)) &&\n          // Additional fix: do not count assignment LHS inside conditional expression branches\n          !(parent.isAssign() &&\n            parent.getFirstChild() == n &&\n            isInCondBranch(parent))) {\n        // Don't count lhs of assignment or assignment lhs inside hook branch\n        numUsesWithinCfgNode++;\n      }\n    }\n\n    /**\n     * Determines if the assignment node is inside a hook (?:) branch.\n     */\n    private boolean isInCondBranch(Node assign) {\n      Node current = assign.getParent();\n      while (current != null) {\n        if (current.isHook()) {\n          Node condition = current.getFirstChild();\n          if (condition != assign) {\n            return true;\n          }\n        }\n        current = current.getParent();\n      }\n      return false;\n    }\n\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}