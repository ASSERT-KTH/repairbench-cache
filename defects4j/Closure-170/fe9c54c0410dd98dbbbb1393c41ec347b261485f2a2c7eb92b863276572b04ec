{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinUseCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName)) {\n        boolean isLhsOfTopLevelAssign =\n            parent.isAssign() && parent.getFirstChild() == n;\n\n        boolean isLhsOfAssignInHook =\n            parent.isAssign()\n            && parent.getFirstChild() == n\n            && parent.getParent() != null\n            && parent.getParent().isHook();\n\n        if (!(isLhsOfTopLevelAssign && !isLhsOfAssignInHook)) {\n          numUsesWithinCfgNode++;\n        }\n      }\n    }\n\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}