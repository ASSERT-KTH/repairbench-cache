{
    "generation": "/**\n * Computes the number of uses of the variable varName and stores it in\n * numUsesWithinCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n  numUsesWithinCfgNode = 0;\n\n  // Only when the entire cfgNode is just a chain of assignments\n  // do we skip counting the lhs names.  In all other contexts\n  // (e.g. inside a hook/ternary), we must count writes as uses.\n  final boolean isAssignmentChain =\n      cfgNode.isAssign()\n      || (cfgNode.isExprResult() && cfgNode.getFirstChild().isAssign());\n\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName()\n          && n.getString().equals(varName)\n          // only skip the lhs when we're in a top\u2010level assignment chain\n          && !(isAssignmentChain\n               && parent.isAssign()\n               && parent.getFirstChild() == n)) {\n        numUsesWithinCfgNode++;\n      }\n    }\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}