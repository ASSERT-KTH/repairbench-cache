{
    "generation": "/**\n * Computes the number of uses of the variable varName and stores it in\n * numUsesWithinCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName)) {\n        // Only skip counting the LHS if this ASSIGN is the top\u2010level\n        // chain of assignments (i.e. the ASSIGN node is a direct child of cfgNode).\n        boolean isLhsOfTopLevelAssign =\n            parent.isAssign()\n            && parent.getFirstChild() == n\n            && parent.getParent() == cfgNode;\n        if (!isLhsOfTopLevelAssign) {\n          numUsesWithinCfgNode++;\n        }\n      }\n    }\n  };\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}