{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName)) {\n            // We make a special exception when the entire cfgNode is a chain\n            // of assignments, since in that case the assignment statements\n            // will happen after the inlining of the right hand side.\n            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n            //   and remove this special case.\n\n            // The original condition `!(parent.isAssign() && (parent.getFirstChild() == n))`\n            // meant \"Don't count lhs of *any* assignment\".\n            // This is generally correct for a strict definition of \"use\" (read).\n            //\n            // However, for flow-sensitive inlining, a variable assigned on the\n            // LHS of a nested assignment (e.g., `(x = 5)` inside `1 ? (x = 5) : 0`)\n            // should be considered a \"use\" of the variable for inlining purposes.\n            // The value of the assignment expression (`x = 5` evaluates to `5`)\n            // is \"used\" by its parent, which complicates inlining.\n            //\n            // The exception should only apply if the `cfgNode` itself *is*\n            // the assignment node (i.e., `cfgNode` represents a top-level assignment).\n            // In such a case, the variable is being defined/reassigned, not \"used\"\n            // in a way that requires its value to be read.\n            //\n            // So, count `n` if:\n            // 1. `n` is not the LHS of an assignment, OR\n            // 2. `n` *is* the LHS of an assignment, BUT that assignment node is NOT the `cfgNode` itself.\n            boolean isLhsOfAssign = parent.isAssign() && (parent.getFirstChild() == n);\n\n            if (!isLhsOfAssign || parent != cfgNode) {\n              numUsesWithinCfgNode++;\n            }\n          }\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}