{
    "generation": "private void getNumUseInUseCfgNode(final Node cfgNode) {\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName)) {\n            // Only ignore the LHS of an assignment when that assignment is\n            // the \u201ctop\u2010level\u201d expression for this CFG node (i.e. a chain of assigns).\n            if (isLhsOfTopLevelAssign(n, cfgNode)) {\n              return;\n            }\n            numUsesWithinCfgNode++;\n          }\n        }\n\n        /**\n         * Returns true if n is the left-hand side of an assign node that is the entire cfgNode.\n         */\n        private boolean isLhsOfTopLevelAssign(Node n, Node cfgNode) {\n          Node p = n.getParent();\n          if (p != null && p.isAssign() && p.getFirstChild() == n) {\n            // If p is directly contained in cfgNode (or in an EXPR_RESULT whose child is p)\n            // then this assignment is a top-level assignment chain and we should ignore its LHS.\n            Node gp = p.getParent();\n            if (gp == cfgNode) {\n              return true;\n            }\n            if (cfgNode.isExprResult() && cfgNode.getFirstChild() == p) {\n              return true;\n            }\n          }\n          return false;\n        }\n      };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}