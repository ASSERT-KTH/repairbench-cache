{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName)) {\n            // The original code contained a special exception:\n            // !(parent.isAssign() && (parent.getFirstChild() == n))\n            // This exception prevented counting the left-hand side (LHS) of an\n            // assignment as a \"use\". However, for the purpose of flow-sensitive\n            // inlining, any reference to the variable, including an assignment\n            // to it, might be relevant to prevent incorrect inlining if the\n            // variable's value changes or is conditionally assigned.\n            // The associated TODO comment in the original code suggested removing\n            // this special case if SIDE_EFFECT_PREDICATE check became more exact.\n            // By removing this condition, we now count all occurrences of the\n            // variable within the cfgNode, whether it's an L-value or R-value.\n            numUsesWithinCfgNode++;\n          }\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}