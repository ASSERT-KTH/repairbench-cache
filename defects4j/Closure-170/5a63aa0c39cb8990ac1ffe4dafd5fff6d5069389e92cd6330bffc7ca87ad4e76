{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          // Count a node as a \"use\" if it's a NAME node and matches the variable name.\n          // The previous logic contained a special exception for the left-hand side of\n          // an assignment. However, for flow-sensitive inlining, an assignment\n          // involving the variable within the current CFG node represents a significant\n          // interaction that should prevent inlining, similar to a read.\n          //\n          // Removing the specific exclusion for LHS of assignments ensures that\n          // all references to the variable, including modifications, contribute\n          // to the use count within the CFG node. This correctly signals to the\n          // inliner that the variable is \"used\" (i.e., interacted with in a way\n          // that impacts inlining safety) within this node, preventing problematic\n          // inlining scenarios as seen in testVarAssinInsideHookIssue965 (related to Issue 965).\n          // The TODO regarding SIDE_EFFECT_PREDICATE suggests this broader counting\n          // is necessary until more precise side-effect analysis is integrated.\n          if (n.isName() && n.getString().equals(varName)) {\n              numUsesWithinCfgNode++;\n          }\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}