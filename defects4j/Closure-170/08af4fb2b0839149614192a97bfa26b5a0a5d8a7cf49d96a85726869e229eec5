{
    "generation": "/**\n * Computes the number of uses of the variable varName and store it in\n * numUseWithinUseCfgNode.\n */\nprivate void getNumUseInUseCfgNode(final Node cfgNode) {\n\n  numUsesWithinCfgNode = 0;\n  AbstractCfgNodeTraversalCallback gatherCb =\n      new AbstractCfgNodeTraversalCallback() {\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() && n.getString().equals(varName) &&\n        // We make a special exception when the entire cfgNode is a chain\n        // of assignments, since in that case the assignment statements\n        // will happen after the inlining of the right hand side.\n        // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n        //   and remove this special case.\n          !(parent.isAssign() &&\n           (parent.getFirstChild() == n) &&\n           // Additional check to handle hooks and other binary operations\n           !isInsideHookOrBinaryOperation(parent))) {\n            // Don't count lhs of top-level assignment chain\n            numUsesWithinCfgNode++;\n        }\n    }\n\n    private boolean isInsideHookOrBinaryOperation(Node node) {\n      Node current = node.getParent();\n      while (current != null && current != cfgNode) {\n        if (current.isHook() || current.isBinary()) {\n          return true;\n        }\n        current = current.getParent();\n      }\n      return false;\n    }\n\n  };\n\n  NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}