{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName) &&\n            // We make a special exception when the entire cfgNode is a chain\n            // of assignments, since in that case the assignment statements\n            // will happen after the inlining of the right hand side.\n            // This exception should only apply when the cfgNode itself is the\n            // assignment. For nested assignments (e.g., in a ternary or\n            // logical expression), the LHS of the assignment should be counted\n            // as a \"use\" or modification that prevents inlining.\n            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n            //   and remove this special case.\n              !( (parent == cfgNode) && parent.isAssign() &&\n                 (parent.getFirstChild() == n))) {\n              numUsesWithinCfgNode++;\n          }\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}