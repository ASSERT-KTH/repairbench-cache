{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n// buggy code\n//          if (n.isName() && n.getString().equals(varName) &&\n//            // We make a special exception when the entire cfgNode is a chain\n//            // of assignments, since in that case the assignment statements\n//            // will happen after the inlining of the right hand side.\n//            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact\n//            //   and remove this special case.\n//              !(parent.isAssign() &&\n//               (parent.getFirstChild() == n))) {\n//              // Don't count lhs of top-level assignment chain\n//              numUsesWithinCfgNode++;\n//          }\n          if (n.isName() && n.getString().equals(varName)) {\n            // Don't count lhs of top-level assignment chain\n            numUsesWithinCfgNode++;\n          }\n\n        }\n      };\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}