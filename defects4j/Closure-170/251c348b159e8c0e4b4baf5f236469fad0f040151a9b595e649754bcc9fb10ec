{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName)) {\n            // A variable is considered \"used\" if it is read (an R-value)\n            // or if it's assigned within an expression whose value is then used.\n            // It's not a \"use\" if it's a pure definition (like var declaration,\n            // function parameter, catch variable, or a top-level assignment statement).\n\n            // Case 1: If it's not an LValue, it's a direct read (R-value). Count it.\n            if (!NodeUtil.isLValue(n)) {\n              numUsesWithinCfgNode++;\n            } else {\n              // Case 2: It's an LValue (a definition site).\n              // We only count L-values that are part of an assignment expression\n              // where the assignment's result is then used.\n              // This is indicated if the assignment (parent) is not a top-level statement.\n              if (parent != null && parent.isAssign() && parent.getFirstChild() == n) {\n                 Node assignNode = parent;\n                 Node grandparent = assignNode.getParent();\n                 // If the assignment node's grandparent is null (no parent),\n                 // or if the grandparent is a statement block (e.g., EXPR_RESULT, BLOCK),\n                 // then this assignment is a top-level statement and not a \"use\" for inlining.\n                 // Otherwise, it's part of a larger expression whose value is consumed.\n                 if (grandparent != null && !NodeUtil.isStatementBlock(grandparent)) {\n                    // This assignment is part of a larger expression.\n                    // E.g., `(i = 5)` in `x = (i = 5) + y;` or `return (i=5), z;`\n                    // In these cases, the value of the assignment (which is `i`) is used.\n                    numUsesWithinCfgNode++;\n                 }\n              }\n            }\n          }\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}