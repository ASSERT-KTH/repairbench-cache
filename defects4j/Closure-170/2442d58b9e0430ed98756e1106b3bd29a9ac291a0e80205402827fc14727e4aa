{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName)) {\n            // Don't count the variable when it's the direct left-hand side of an assignment\n            if (!(parent.isAssign() && parent.getFirstChild() == n)) {\n              // Also don't count when it's inside a hook (ternary) that's part of an assignment\n              if (!(NodeUtil.isExprAssign(parent) || \n                   (parent.isHook() && parent.getParent() != null &&\n                    (NodeUtil.isExprAssign(parent.getParent()) ||\n                     parent.getParent().isAssign())))) {\n                numUsesWithinCfgNode++;\n              }\n            }\n          }\n        }\n\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}