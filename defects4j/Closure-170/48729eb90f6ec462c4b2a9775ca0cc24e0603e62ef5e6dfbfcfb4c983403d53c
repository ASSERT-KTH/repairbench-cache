{
    "generation": "    /**\n     * Computes the number of uses of the variable varName and store it in\n     * numUseWithinUseCfgNode.\n     */\n    private void getNumUseInUseCfgNode(final Node cfgNode) {\n\n      numUsesWithinCfgNode = 0;\n      AbstractCfgNodeTraversalCallback gatherCb =\n          new AbstractCfgNodeTraversalCallback() {\n\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName() && n.getString().equals(varName)) {\n            // Count occurrences that are definitely reads.\n            // NodeUtil.isLValue distinguishes between declarations, assignments,\n            // and uses. We should only count uses.\n            // Exclude labels (parent IS_LABEL), CATCH var name.\n            if (!NodeUtil.isLValue(n)\n                && !(parent != null && parent.isLabelName())) {\n              // A read of a variable, not a declaration or assignment.\n              // Examples:\n              //   var x = 1; // x is L-Value\n              //   x = 2; // x is L-Value\n              //   foo(x); // x is R-Value (use)\n              //   x++; // x is L-Value\n              //   x.prop; // x is R-Value (use)\n              //   ({x} = {}); // x is L-Value (destructuring)\n              //   label: // label is not a variable use\n              //   try {} catch (x) {} // x is CATCH var, not a typical use\n              // TODO(johnlenz): rework the catch var handling.\n              // This is technically a definition but isn't handled by Liveness\n              // analysis. See markCfgNodeRead.\n\n              // Don't count catch exception names. This is a definition.\n              // They are handled in References.\n              if (parent == null || !parent.isCatch()) {\n                numUsesWithinCfgNode++;\n              }\n            }\n          }\n        }\n      };\n\n      NodeTraversal.traverse(compiler, cfgNode, gatherCb);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}