{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        // This TokenBuffer will store all properties that are not handled by creator, id, regular, or ignorable properties.\n        // These are candidates for unwrapped properties.\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        // Main loop to consume all properties\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n\n            // 1. Creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // If it's a creator property, assign it to the buffer.\n                // We do NOT build the bean yet, even if all creator params are met,\n                // because we need to continue buffering other properties for the final bean.\n                buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n                continue; // Move to next field\n            }\n\n            // 2. Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue; // Move to next field\n            }\n\n            // 3. Regular property? Needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                // Buffer it for later assignment after bean is built\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue; // Move to next field\n            }\n\n            // 4. Ignorable property?\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue; // Move to next field\n            }\n\n            // 5. Unrecognized property: check any-setter first, then unwrapped.\n            // If an 'any setter' is configured, it gets priority over unwrapped for unknown properties.\n            if (_anySetter != null) {\n                // Deserialize the value and buffer it for the 'any setter'.\n                // This property is handled and should not be part of the unwrapped tokens.\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                continue;\n            }\n            \n            // If not handled by any of the above, it's an unwrapped property candidate.\n            // Copy its name and value to the token buffer for later unwrapped processing.\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n        }\n\n        // We hit END_OBJECT (or loop finished), so now build the bean and apply buffered properties.\n\n        Object bean;\n        try {\n            // Build the bean using the creator properties gathered.\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        \n        // Handle polymorphic types early (moved from original's early return block)\n        if (bean.getClass() != _beanType.getRawClass()) {\n            ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n            return null; // Or throw an appropriate exception\n        }\n\n        // Apply any regular properties and 'any-setter' properties that were buffered.\n        bean = buffer.handleBufferedProperties(ctxt, bean);\n\n        // Finally, process the unwrapped properties from the tokens buffer.\n        tokens.writeEndObject();\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}