{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    // All creator properties have been buffered and can be used to build the bean.\n                    // 'p' is now positioned at the token *after* the deserialized creator property value.\n                    // This will be the first unwrapped property's FIELD_NAME or END_OBJECT.\n\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        // This 'continue' is typically unreachable as wrapAndThrow usually rethrows.\n                        // If it were reached, parser state would be problematic.\n                        continue;\n                    }\n\n                    // Now, we need to process all remaining properties in the input stream.\n                    // These should be copied to the 'tokens' buffer for unwrapped handling.\n                    // The 't' variable of the outer 'for' loop is still holding the FIELD_NAME\n                    // of the creator property we just processed. We must advance the parser 'p'\n                    // and handle the remaining tokens within this block, then exit the outer loop.\n                    JsonToken currentTokenForUnwrapped = p.getCurrentToken(); // Get actual token 'p' is on\n\n                    // Loop through remaining fields and buffer them\n                    while (currentTokenForUnwrapped == JsonToken.FIELD_NAME) {\n                        String nextPropName = p.getCurrentName();\n                        p.nextToken(); // Move p to the value of 'nextPropName'\n\n                        tokens.writeFieldName(nextPropName); // Write the field name\n                        tokens.copyCurrentStructure(p);      // Copy the value (p is at value)\n\n                        currentTokenForUnwrapped = p.nextToken(); // Move p to the next FIELD_NAME or END_OBJECT\n                    }\n                    tokens.writeEndObject(); // Close the object in the token buffer\n\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n                    // At this point, 'p' is at END_OBJECT (or potentially beyond).\n                    // The outer 'for' loop will effectively terminate because we are returning.\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue; // Not all creator properties assigned yet, continue to next field\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            // \"any property\"?\n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n\n        // We hit END_OBJECT, so:\n        Object bean;\n        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}