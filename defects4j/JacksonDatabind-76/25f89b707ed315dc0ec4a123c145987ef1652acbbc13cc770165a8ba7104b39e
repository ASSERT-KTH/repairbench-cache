{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Just assign parameter; do not build bean or return early here.\n                buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n                continue; // Handled, move to next field\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue; // Handled, move to next field\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue; // Handled, move to next field\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue; // Handled, move to next field\n            }\n            // \"any property\"? This must come BEFORE buffering into 'tokens'\n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                continue; // Handled, move to next field\n            }\n\n            // If none of the above, it's an unwrapped property; buffer it for later\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            // No 'continue' needed as loop's p.nextToken() handles advancement.\n        }\n\n        // We hit END_OBJECT, meaning all properties from 'p' have been processed into buffers.\n        // Now, build the bean using creator properties and inject any buffered regular/any-setter properties.\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n\n        // 07-Mar-2017, tatu: [databind#1559] need to verify type for polymorphic cases\n        if (bean.getClass() != _beanType.getRawClass()) {\n            ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n            return null;\n        }\n\n        tokens.writeEndObject(); // Close the object in the TokenBuffer.\n        // Now, process all the unwrapped properties that were collected in 'tokens'.\n        // The main parser 'p' should be at END_OBJECT by now, so _unwrappedPropertyHandler will\n        // primarily process the 'tokens' buffer.\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}