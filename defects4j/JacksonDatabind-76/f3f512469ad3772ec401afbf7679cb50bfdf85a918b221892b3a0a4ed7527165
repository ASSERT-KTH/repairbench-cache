{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Last creator property to set?\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        // 26-Oct-2016, tatu: Need to retain property name, if possible\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        // never gets here, unless we modify wrapAndThrow to not throw, which seems unlikely.\n                        // Added for compiler, IDE warnings:\n                        continue; // Added for stricter compiler compliance\n                    }\n                    // if we have already created the bean, must handle extra properties separately..\n                    // If we get polymorphic builders, things are trickier... Fix is possible,\n                    // but tricky for now leave as unsupported, fail\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        // 13-Jan-2017, tatu: Not sure if this can be supported, actually...\n                        //   Need to delegate update/merge to actual deserializer; may require configuration etc?\n                        return ctxt.reportBadDefinition(_beanType,\n                                String.format(\"Cannot create builder instances of type %s (%s) using creator property '%s': incompatible builder type\",\n                                        _beanType, bean.getClass().getName(), creatorProp.getName()));\n                    }\n\n                    // Ok: need to feed buffered tokens into bean (builder) being built:\n                    // Important: must create a NEW parser, since given parser points somewhere else...\n                    // also: tokens have been fetched so need to start from beginning\n                    // 24-Feb-2017, tatu: Need to copy *remaining* tokens from incoming parser too...\n                    while (t == JsonToken.FIELD_NAME) {\n                        // *** FIX START ***\n                        // Need to copy lingered tokens, field name first then value\n                        tokens.writeFieldName(p.getCurrentName());\n                        p.nextToken(); // move to value\n                        // *** FIX END ***\n                        tokens.copyCurrentStructure(p);\n                        // And then move to the next token\n                        t = p.nextToken();\n                    }\n                    // tokens.writeEndObject(); // REMOVED as per [databind#139] / [databind#1648] fix; processUnwrapped will do it\n\n                    // Phew! All done!\n                    // 08-Dec-2016, tatu: Need to use `builder` instance, not `p` (parser) for context\n                    // Let processUnwrapped handle buffer finalization and parsing\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            // As per [databind#318], need to ensure we call view-processing settings\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            // \"any property\"?\n            // 09-Jan-2017, tatu: Is this even possible? How could it work? Assume not possible for now.\n            /*\n            if (_anySetter != null) {\n                 // Need to be buffered, otherwise could be problematic for ordering\n                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                 continue;\n            }\n            */\n\n            // Ok, then it is likely an unwrapped property, buffer\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n\n            // 09-Jan-2017, tatu: Is AnySetter possible? Let's assume NO, for now.\n            //   But if yes, would need buffering:\n            if (_anySetter != null) {\n                 try {\n                     // note: can not call \"_anySetter.deserializeAndSet()\" since we don't have an instance yet\n                     buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                 } catch (Exception e) {\n                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                 }\n            }\n        }\n\n        // We hit END_OBJECT, so:\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            // 26-Oct-2016, tatu: Need to retain property name, maybe? None available though.\n            // 28-Oct-2016, tatu: As per [databind#1414], need to ensure relationship with underlying cause is not lost\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        // Still need to process buffered tokens too\n        // 08-Dec-2016, tatu: Need to use `builder` instance, not `p` (parser) for context\n        // Let processUnwrapped handle buffer finalization and parsing\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}