{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        Object bean = null; // Will hold the bean instance once created\n\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value (value for propName)\n\n            // 1. If bean has already been created, we set properties directly on it\n            if (bean != null) {\n                // regular property?\n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                    continue;\n                }\n                // Ignorable property?\n                if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                    // Pass bean for context if the handler needs it, otherwise handledType() is also fine.\n                    handleIgnoredProperty(p, ctxt, bean, propName); \n                    continue;\n                }\n                // \"any property\"?\n                if (_anySetter != null) {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                    continue;\n                }\n                // If not handled by direct setting, ignorable, or anySetter -> it's an unwrapped property\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n                continue;\n            }\n\n            // 2. If bean is not yet created, continue with property-based creation logic\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    // All creator parameters assigned, build bean now\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        // If wrapAndThrow throws, it exits. If it doesn't (rarely), bean remains null,\n                        // and the loop will eventually build the bean in the final block, or throw.\n                        continue; \n                    }\n\n                    // If bean was built successfully, check for polymorphic type\n                    if (bean != null && bean.getClass() != _beanType.getRawClass()) {\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null; // Return early if polymorphic and unwrapped not supported\n                    }\n                    // DO NOT RETURN or break here. Continue the loop to process remaining fields\n                    // using the `if (bean != null)` branch in subsequent iterations.\n                }\n                continue; // Creator property handled (either assigned or waiting for more params)\n            }\n            // Object Id property? (Only applicable before bean is built by creator)\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            // \"any property\"? needs buffering\n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                continue;\n            }\n            // If not handled by creator, id, regular, ignorable, anySetter -> it's unwrapped or unknown\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n        }\n\n        // Loop finishes (we hit END_OBJECT or no more fields).\n        // If bean wasn't built yet, build it now from buffered creator properties.\n        if (bean == null) {\n            try {\n                bean = creator.build(ctxt, buffer);\n            } catch (Exception e) {\n                return wrapInstantiationProblem(e, ctxt);\n            }\n        }\n        \n        // If there are any buffered unwrapped properties, process them\n        // along with the remaining stream from 'p'.\n        tokens.writeEndObject(); // Close the token buffer object for consumption\n        \n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}