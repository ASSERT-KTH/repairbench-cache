{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n        DeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    // Flag to indicate whether we've built the bean but still have properties to parse\n    Object bean = null;\n    JsonToken t = p.getCurrentToken();\n\n    while (true) {\n        if (t != JsonToken.FIELD_NAME) {\n            break;\n        }\n\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                t = p.nextToken();\n                boolean success = false;\n                try {\n                    if (bean == null) {\n                        bean = creator.build(ctxt, buffer);\n                    }\n                    success = true;\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    // If we failed to build the bean, keep trying to process properties\n                    continue;\n                }\n\n                // If we successfully built the bean, start collecting remaining properties\n                if (success) {\n                    if (t == JsonToken.FIELD_NAME) {\n                        // Copy remaining properties to the token buffer\n                        do {\n                            tokens.writeFieldName(p.getCurrentName());\n                            p.nextToken();\n                            tokens.copyCurrentStructure(p);\n                            t = p.nextToken();\n                        } while (t == JsonToken.FIELD_NAME);\n                    }\n                    break; // Exit loop after processing creator properties, continue with remaining logic\n                }\n            }\n            t = p.nextToken(); // Move to next token if we didn't build the bean\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            t = p.nextToken();\n            continue;\n        }\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            // For unwrapped properties, write to token buffer if bean is not yet created\n            if (bean == null || !prop.getClass().getSimpleName().contains(\"UnwrappedPropertyHandler\")) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            } else {\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n            }\n            t = p.nextToken();\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            t = p.nextToken();\n            continue;\n        }\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        // \"any property\"?\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n        t = p.nextToken();\n    }\n\n    // If we didn't build the bean yet, do it now\n    if (bean == null) {\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n    }\n\n    // Handle remaining tokens\n    while (t == JsonToken.FIELD_NAME) {\n        // Add remaining fields to tokens buffer\n        tokens.writeFieldName(p.getCurrentName());\n        p.nextToken();\n        tokens.copyCurrentStructure(p);\n        t = p.nextToken();\n    }\n    tokens.writeEndObject();\n\n    if (bean.getClass() != _beanType.getRawClass()) {\n        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n        return null;\n    }\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}