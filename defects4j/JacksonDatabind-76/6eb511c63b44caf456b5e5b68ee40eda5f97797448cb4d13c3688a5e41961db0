{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    // Issue 1: Removed redundant 't = p.nextToken();' here.\n                    // The parser 'p' is already positioned at the token AFTER the value\n                    // of the creator property that was just deserialized.\n                    \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        // Changed to use wrapInstantiationProblem for consistency with later block\n                        return wrapInstantiationProblem(e, ctxt);\n                    }\n                    \n                    // Issue 2: Update 't' to reflect the actual current token after bean creation.\n                    // This is crucial for the subsequent 'while' loop to correctly consume remaining fields.\n                    t = p.getCurrentToken();\n\n                    // Now consume remaining fields from 'p' into 'tokens'\n                    // This loop collects all fields that appear AFTER the creator properties\n                    // are fulfilled, including regular properties and unwrapped properties.\n                    while (t == JsonToken.FIELD_NAME) {\n                        p.nextToken(); // move to value\n                        tokens.copyCurrentStructure(p); // copy value (and possibly nested structure)\n                        t = p.nextToken(); // move to next field name or END_OBJECT\n                    }\n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n                    // All properties (initial unwrapped + post-creator) are now in `tokens`\n                    // `p` is now at `END_OBJECT`.\n                    // The _unwrappedPropertyHandler will now process all properties from the `tokens` buffer\n                    // (and potentially the original parser 'p' if it has not reached END_OBJECT).\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue; // Creator property assigned, but not all found yet\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            // Issue 3: Reordered '_anySetter' check to come before buffering to tokens.\n            // If it's an 'any property', it should be buffered by the 'buffer' not copied to 'tokens'.\n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                continue;\n            }\n            // If not handled by any of the above, it's an unwrapped property / unknown property; buffer it to tokens\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n        }\n\n        // We hit END_OBJECT, so:\n        Object bean;\n        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        // Process any unwrapped properties that were buffered throughout the loop\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}