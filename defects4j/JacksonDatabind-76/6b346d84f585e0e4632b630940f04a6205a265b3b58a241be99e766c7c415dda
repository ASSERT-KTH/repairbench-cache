{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n        DeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n\n    Object bean = null;\n    boolean built = false;\n\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            if (!buffer.isComplete() && buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                // Once all creator parameters have been seen, build bean\n                try {\n                    bean = creator.build(ctxt, buffer);\n                    built = true;\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue;\n                }\n            } else {\n                // assignParameter must still be called to fill the buffer!\n                buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n            }\n            // Since creator property, no need to buffer into tokens (will not appear in \"unwrapped\")\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            if (!built) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            } else {\n                // After bean is built, assign directly\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n            }\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        // \"any property\"?\n        if (_anySetter != null) {\n            if (!built) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            } else {\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            }\n        }\n    }\n\n    // If not yet constructed, construct bean\n    if (!built) {\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n    }\n\n    tokens.writeEndObject();\n    if (bean.getClass() != _beanType.getRawClass()) {\n        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n        return null;\n    }\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}