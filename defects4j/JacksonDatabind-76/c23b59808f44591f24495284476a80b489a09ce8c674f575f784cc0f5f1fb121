{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    t = p.nextToken();\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue;\n                    }\n                    // Handle remaining properties after creator invocation\n                    while (t == JsonToken.FIELD_NAME) {\n                        String remainingPropName = p.getCurrentName();\n                        p.nextToken();\n                        SettableBeanProperty prop = _beanProperties.find(remainingPropName);\n                        if (prop != null) {\n                            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                        } else if (_ignorableProps != null && _ignorableProps.contains(remainingPropName)) {\n                            handleIgnoredProperty(p, ctxt, handledType(), remainingPropName);\n                        } else if (_anySetter != null) {\n                             buffer.bufferAnyProperty(_anySetter, remainingPropName, _anySetter.deserialize(p, ctxt));\n                        }\n                        t = p.nextToken();\n                    }\n\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, buffer.finish());\n                }\n                continue;\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n\n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n\n        // We hit END_OBJECT, so:\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, buffer.finish());\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}