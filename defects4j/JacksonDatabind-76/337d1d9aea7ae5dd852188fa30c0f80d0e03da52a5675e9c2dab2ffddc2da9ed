{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n            DeserializationContext ctxt)\n            throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        if (creator == null) {\n            return null;\n        }\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        // Collect all creator properties first\n        while (p.nextToken() != JsonToken.START_OBJECT) {\n            // Shouldn't happen; expecting START_OBJECT\n        }\n        JsonToken t;\n        do {\n            t = p.nextToken();\n            if (t != JsonToken.FIELD_NAME) break;\n\n            String propName = p.getCurrentName();\n            // Check if it's a creator property\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                p.nextToken();\n                Object value = creatorProp.deserialize(p, ctxt);\n                if (buffer.assignParameter(creatorProp, value)) {\n                    // Attempt to create the bean\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue;\n                    }\n                    // Assign unwrapped properties\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, null);\n                }\n            } else {\n                // Buffer other properties for later\n                p.nextToken();\n                buffer.bufferPropertyValue(p.getText(), p.getValue());\n            }\n        } while (t != JsonToken.END_OBJECT);\n\n        // Create the bean after all creator properties are processed\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, null);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}