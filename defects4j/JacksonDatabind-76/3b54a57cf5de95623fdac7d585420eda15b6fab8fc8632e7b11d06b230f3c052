{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n        DeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    boolean creatorPropertiesProcessed = false; // Flag to track if creator properties are processed\n\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                creatorPropertiesProcessed = true; // Mark creator properties as processed\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue;\n                }\n                // Continue processing remaining properties\n                while (t == JsonToken.FIELD_NAME) {\n                    propName = p.getCurrentName();\n                    p.nextToken();\n                    SettableBeanProperty prop = _beanProperties.find(propName);\n                    if (prop != null) {\n                        prop.deserializeSetAndReturn(p, ctxt, bean);\n                    } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                        handleIgnoredProperty(p, ctxt, handledType(), propName);\n                    } else if (_anySetter != null) {\n                        _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                    } else {\n                        tokens.writeFieldName(propName);\n                        tokens.copyCurrentStructure(p);\n                    }\n                    t = p.nextToken();\n                }\n                tokens.writeEndObject();\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n            continue;\n        }\n\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n\n        // If creator properties are not yet processed, buffer all properties\n        if (!creatorPropertiesProcessed) {\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        } else {\n            // Creator properties are processed, directly set properties on the bean\n            Object bean = creator.build(ctxt, buffer);\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                prop.deserializeSetAndReturn(p, ctxt, bean);\n            } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n            } else if (_anySetter != null) {\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            } else {\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n            }\n        }\n    }\n\n    // If creator properties were not processed, build the bean now\n    if (!creatorPropertiesProcessed) {\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n\n    return null; // Should not reach here\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}