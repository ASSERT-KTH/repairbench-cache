{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n        DeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    // we'll capture \"unwrapped\" fields here:\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // move to value\n        // Creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                // got all creator params, can build\n                t = p.nextToken();\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    // if exception, skip and continue\n                    continue;\n                }\n                // now handle any remaining fields: set normal props on bean,\n                // and collect unwrapped ones into our token buffer\n                while (t == JsonToken.FIELD_NAME) {\n                    String name = p.getCurrentName();\n                    p.nextToken();\n                    // (1) more creator props? unlikely but handle\n                    SettableBeanProperty cp = creator.findCreatorProperty(name);\n                    if (cp != null) {\n                        buffer.assignParameter(cp, cp.deserialize(p, ctxt));\n                        t = p.nextToken();\n                        continue;\n                    }\n                    // (2) object-id?\n                    if (buffer.readIdProperty(name)) {\n                        t = p.nextToken();\n                        continue;\n                    }\n                    // (3) regular bean property: apply on the built bean\n                    SettableBeanProperty prop = _beanProperties.find(name);\n                    if (prop != null) {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                        t = p.nextToken();\n                        continue;\n                    }\n                    // (4) ignorable?\n                    if (_ignorableProps != null && _ignorableProps.contains(name)) {\n                        handleIgnoredProperty(p, ctxt, bean, name);\n                        t = p.nextToken();\n                        continue;\n                    }\n                    // (5) otherwise, treat as unwrapped: copy structure into buffer\n                    tokens.writeFieldName(name);\n                    tokens.copyCurrentStructure(p);\n                    if (_anySetter != null) {\n                        _anySetter.deserializeAndSet(p, ctxt, bean, name);\n                    }\n                    t = p.nextToken();\n                }\n                tokens.writeEndObject();\n                // ensure no polymorphic weirdness\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportMappingException(\n                        \"Can not create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                // finally merge unwrapped fields\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n            // still waiting for creator params\n            continue;\n        }\n        // object-id?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // normal property: buffer for later\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        // ignorable?\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // everything else goes into unwrapped token buffer\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter,\n                                     propName,\n                                     _anySetter.deserialize(p, ctxt));\n        }\n    }\n\n    // if we get here, end of object before all creator params are seen\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n    // merge unwrapped\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}