{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n        DeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    // We create a TokenBuffer to collect properties that are \"unwrapped\"\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    // Loop through the JSON Object \u201cfields\u201d\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // move to the property value\n\n        // Is this a creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // creator property: try to assign its value into the buffer\n            if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                // when assignment makes creator fully satisfied, advance one token and build the bean\n                t = p.nextToken();\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue;\n                }\n                // Process any remaining fields in the input.\n                // Instead of blindly copying everything to the TokenBuffer (as in the buggy code)\n                // we now check: if a remaining property is a \"regular\" (non-unwrapped) property,\n                // apply it directly; otherwise copy it into the TokenBuffer for later unwrapped processing.\n                while (p.getCurrentToken() == JsonToken.FIELD_NAME) {\n                    String currName = p.getCurrentName();\n                    p.nextToken(); // move to the value of this property\n                    SettableBeanProperty prop = _beanProperties.find(currName);\n                    if (prop != null) {\n                        try {\n                            // Regular (non-unwrapped) property: apply it immediately\n                            bean = prop.deserializeSetAndReturn(p, ctxt, bean);\n                        } catch (Exception e) {\n                            wrapAndThrow(e, bean, currName, ctxt);\n                        }\n                    } else {\n                        // Unrecognized property: buffer it.\n                        tokens.writeFieldName(currName);\n                        tokens.copyCurrentStructure(p);\n                        if (_anySetter != null) {\n                            try {\n                                bean = _anySetter.deserializeSetAndReturn(p, ctxt, bean, currName);\n                            } catch (Exception e) {\n                                wrapAndThrow(e, bean, currName, ctxt);\n                            }\n                        }\n                    }\n                }\n                tokens.writeEndObject();\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n            // not enough creator parameters yet; leave this property consumed and continue\n            continue;\n        }\n        // If property is an Object Id, let the buffer handle it:\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // For a non-creator property: if there is a setter for it, buffer its value for later\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        // if property is ignorable, skip it\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // Otherwise, copy the property into the TokenBuffer (to be used by the unwrapped handler)\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n\n    // If we reach here then END_OBJECT was encountered before creator parameters were complete.\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}