{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n        DeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    // To keep fields which could not be passed to creator (non-creator, unwrapped, \"any\");\n    // We'll buffer ALL except ignorable (unless we have \"any\" for those)\n    // Also track creator field count so that we know when to instantiate\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // creator property: assign parameter and track completion\n            if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                // all creator parameters assigned, create bean instance:\n                t = p.nextToken();\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue;\n                }\n                // Now, process remaining fields:\n                for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n                    String remFieldName = p.getCurrentName();\n                    p.nextToken(); // to point to value\n                    SettableBeanProperty prop = _beanProperties.find(remFieldName);\n                    if (prop != null) {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                        continue;\n                    }\n                    if (_ignorableProps != null && _ignorableProps.contains(remFieldName)) {\n                        handleIgnoredProperty(p, ctxt, handledType(), remFieldName);\n                        continue;\n                    }\n                    tokens.writeFieldName(remFieldName);\n                    tokens.copyCurrentStructure(p);\n                    if (_anySetter != null) {\n                        buffer.bufferAnyProperty(_anySetter, remFieldName, _anySetter.deserialize(p, ctxt));\n                    }\n                }\n                tokens.writeEndObject();\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        // \"any property\"?\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n\n    // We hit END_OBJECT, so:\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n    // after instantiating, set buffered properties (that arrived before bean)\n    // See https://github.com/FasterXML/jackson-databind/issues/892\n    for (PropertyValue buffered = buffer.buffered(); buffered != null; buffered = buffered.next) {\n        buffered.assign(bean);\n    }\n    tokens.writeEndObject();\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}