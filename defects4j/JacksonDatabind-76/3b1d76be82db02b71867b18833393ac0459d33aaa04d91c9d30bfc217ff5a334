{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n        DeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    // Keep track of properties seen before creator is satisfied\n    List<String> seenProperties = new ArrayList<>();\n    List<JsonNode> seenValues = new ArrayList<>();\n    while (t == JsonToken.FIELD_NAME) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // save the property in case the creator isn't yet satisfied\n            Object value = creatorProp.deserialize(p, ctxt);\n            if (buffer.assignParameter(creatorProp, value)) {\n                // Creator is now satisfied, build bean\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    return null; // unreachable but keeps old structure\n                }\n                // replay buffered properties (before satisfaction)\n                // First, write all buffered tokens\n                for (int i = 0, len = seenProperties.size(); i < len; ++i) {\n                    String bufferedPropName = seenProperties.get(i);\n                    JsonNode bufferedValue = seenValues.get(i);\n                    tokens.writeFieldName(bufferedPropName);\n                    tokens.copyCurrentStructure(ctxt.getParser().codec().treeAsTokens(bufferedValue));\n                }\n                // Now, handle the remaining of current structure\n                t = p.nextToken();\n                while (t == JsonToken.FIELD_NAME) {\n                    String nextName = p.getCurrentName();\n                    p.nextToken();\n                    tokens.writeFieldName(nextName);\n                    tokens.copyCurrentStructure(p);\n                    t = p.nextToken();\n                }\n                tokens.writeEndObject();\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n            // creator not yet satisfied, buffer for later\n            try {\n                // JsonToken is pointing to value after .nextToken()\n                seenProperties.add(propName);\n                seenValues.add(ctxt.readTree(p));\n            } catch (Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n            }\n            t = p.getCurrentToken();\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            try {\n                seenProperties.add(propName);\n                seenValues.add(ctxt.readTree(p));\n            } catch (Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n            }\n            t = p.getCurrentToken();\n            continue;\n        }\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            Object value = prop.deserialize(p, ctxt);\n            buffer.bufferProperty(prop, value);\n            tokens.writeFieldName(propName);\n            prop.serializeAsField(value, tokens, ctxt); // Write the value into the tokens\n            t = p.getCurrentToken();\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            t = p.getCurrentToken();\n            continue;\n        }\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        // \"any property\"?\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n        t = p.getCurrentToken();\n    }\n\n    // We hit END_OBJECT, so:\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n    tokens.writeEndObject();\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}