{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        // Use TokenBuffer to store ALL non-creator properties encountered\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        Object bean = null; // To store bean instance once created\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            // Skip field name:\n            p.nextToken(); // to point to value\n\n            // Is it a creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // Found creator property, value still needed\n                Object value = creatorProp.deserialize(p, ctxt);\n                // Assign value and check if we are done with creator properties\n                if (buffer.assignParameter(creatorProp, value)) {\n                    // Got all creator params, try to build the bean\n                    // Need to advance token stream past value for the PROPERTY that triggered build\n                    t = p.nextToken(); // IMPORTANT: move past the value of this creator prop\n\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                         // Bean construction failed, report & return\n                        return wrapInstantiationProblem(e, ctxt);\n                    }\n                    // Catch possible polymorph type problem (check Builder pattern behavior?)\n                    // 25-Nov-2015, tatu: Actually, with builders, this is completely normal,\n                    //    so cannot verify type this way. And can't ensure format either.\n                    //    But leaving the check in place for now\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                         // 28-Oct-2023, tatu: Use the more specific helper method\n                         return ctxt.reportBadDefinition(_beanType, String.format(\n                                \"Cannot create polymorphic instances with unwrapped values (got instance of %s, expected %s)\",\n                                bean.getClass().getName(), _beanType.getRawClass().getName()));\n                    }\n\n                    // Bean built successfully. Check if we are now done with the input object\n                    if (t == JsonToken.END_OBJECT) {\n                        break; // Exit loop: bean is built, tokens contain pre-build props.\n                    }\n                    // Otherwise loop continues, and remaining props will be added to `tokens` below\n                    // Fall through to continue loop\n                }\n                // Handled creator property (either assigned parameter or built bean),\n                // continue to next property. Loop condition `t == JsonToken.FIELD_NAME`\n                // is checked based on `t` which was updated above if bean was built.\n                continue;\n            }\n\n            // Not a creator property...\n\n            // If bean is already built, it must be handled via TokenBuffer.\n            if (bean != null) {\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n                continue;\n            }\n\n            // Bean not yet built. Check for ObjectId, Ignorable, or buffer into TokenBuffer.\n\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue; // Handled by buffer\n            }\n            // Ignorable properties?\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName); // Skips the value\n                continue; // Skip buffering\n            }\n\n            // Otherwise, it's a property to be buffered for unwrapping/setting later\n            // (Could be a regular property (_beanProperties), part of unwrapped object, or 'any' property (_anySetter))\n            // All these need to be buffered and processed by UnwrappedPropertyHandler\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n        }\n\n        // Loop ended (either naturally at END_OBJECT or via break after mid-stream build)\n\n        // If bean was not built mid-stream, build it now.\n        if (bean == null) {\n            try {\n                bean = creator.build(ctxt, buffer);\n            } catch (Exception e) {\n                // Probably mapping exception?\n                return wrapInstantiationProblem(e, ctxt);\n            }\n        }\n\n        // We have the bean instance and the TokenBuffer containing all non-creator properties.\n        // Finalize the token stream and process it using the unwrapped handler.\n        tokens.writeEndObject();\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}