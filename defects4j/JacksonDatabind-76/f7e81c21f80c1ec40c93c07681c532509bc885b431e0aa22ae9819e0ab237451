{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject(); // Start object in the buffer for unwrapped properties\n\n        JsonToken t = p.getCurrentToken(); // Should be FIELD_NAME\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                // If it's a creator property, assign its value to the buffer\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    // All creator properties are now collected. Build the bean.\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        return wrapInstantiationProblem(e, ctxt);\n                    }\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n\n                    // Bean is built. Now process remaining fields from the main parser `p`.\n                    // Any properties buffered in `buffer` (regular properties for the bean)\n                    // are implicitly set during `creator.build()`.\n                    // `tokens` currently contains any unwrapped properties encountered BEFORE this point.\n\n                    // IMPORTANT FIX: p.getCurrentToken() instead of p.nextToken()\n                    // `p` was already advanced by `creatorProp.deserialize(p, ctxt)`\n                    // to point to the token AFTER the value.\n                    t = p.getCurrentToken(); \n\n                    // Consume remaining properties from `p` and apply them to the `bean`\n                    // or buffer them into `tokens` for the unwrapped handler.\n                    while (t == JsonToken.FIELD_NAME) {\n                        propName = p.getCurrentName();\n                        p.nextToken(); // to point to value\n\n                        SettableBeanProperty prop = _beanProperties.find(propName);\n                        if (prop != null) {\n                            try {\n                                prop.deserializeAndSet(p, ctxt, bean);\n                            } catch (Exception e) {\n                                wrapAndThrow(e, bean, propName, ctxt);\n                            }\n                        } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                            handleIgnoredProperty(p, ctxt, bean, propName);\n                        } else if (_anySetter != null) {\n                            // AnySetter present, apply directly to bean.\n                            _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                        } else {\n                            // Not handled by bean properties, ignorable, or any-setter.\n                            // Must be an unwrapped property. Buffer it into tokens.\n                            tokens.writeFieldName(propName);\n                            tokens.copyCurrentStructure(p);\n                        }\n                        t = p.nextToken(); // Advance to next field name or END_OBJECT\n                    }\n                    // `p` is now at END_OBJECT.\n                    // Finish the object in the buffered tokens.\n                    tokens.writeEndObject();\n\n                    // Finally, process all buffered unwrapped properties\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                // If not all creator parameters assigned yet, continue to next field.\n                continue;\n            }\n\n            // Not a creator property. Handle as usual before bean is built:\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            \n            // FIX: Prioritize _anySetter over buffering for unwrapped properties\n            // If not creator, id, regular, or ignorable, check for _anySetter or unwrapped handler.\n            if (_anySetter != null) {\n                // If _anySetter is present, buffer it with PropertyValueBuffer.\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            } else {\n                // If no _anySetter, then it's an unwrapped property, buffer it into tokens.\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n            }\n        }\n\n        // We hit END_OBJECT, but bean was not built mid-stream\n        // (all creator props not found, or not enough creator properties were found before END_OBJECT).\n        // Build the bean now.\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n\n        // `p` is at END_OBJECT. `tokens` holds all accumulated unwrapped properties.\n        tokens.writeEndObject(); // Ensure the buffered object is closed\n\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}