{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n        DeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    Object bean = null;\n\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            Object value = creatorProp.deserialize(p, ctxt);\n            if (buffer.assignParameter(creatorProp, value)) {\n                // creator parameters are all assigned: build the bean!\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue; // should not reach but keeps compiler happy\n                }\n                // Now, continue to read remaining properties and buffer them, including unwrapped\n                t = p.nextToken();\n                while (t == JsonToken.FIELD_NAME) {\n                    String remPropName = p.getCurrentName();\n                    p.nextToken();\n                    // regular property?\n                    SettableBeanProperty prop = _beanProperties.find(remPropName);\n                    if (prop != null) {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } else if (_ignorableProps != null && _ignorableProps.contains(remPropName)) {\n                        handleIgnoredProperty(p, ctxt, handledType(), remPropName);\n                    } else {\n                        tokens.writeFieldName(remPropName);\n                        tokens.copyCurrentStructure(p);\n                        // \"any property\"?\n                        if (_anySetter != null) {\n                            _anySetter.deserializeAndSet(p, ctxt, bean, remPropName);\n                        }\n                    }\n                    t = p.nextToken();\n                }\n                tokens.writeEndObject();\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering if bean not yet constructed\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            if (bean == null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            } else {\n                prop.deserializeAndSet(p, ctxt, bean);\n            }\n            continue;\n        }\n        // ignorable property?\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        // \"any property\"?\n        if (_anySetter != null) {\n            if (bean == null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            } else {\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            }\n        }\n    }\n\n    // We hit END_OBJECT, so:\n    if (bean == null) {\n        // hasn't been built yet\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n    }\n    tokens.writeEndObject();\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}