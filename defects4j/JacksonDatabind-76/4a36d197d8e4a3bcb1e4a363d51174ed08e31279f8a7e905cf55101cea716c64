{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        // Skip START_OBJECT token if present, move to first FIELD_NAME\n        if (t == JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n\n        // Loop through fields until END_OBJECT\n        while (t == JsonToken.FIELD_NAME) {\n            String propName = p.getCurrentName();\n\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                p.nextToken(); // Advance to value token\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        // wrapAndThrow typically throws an exception, so `return null` might be unreachable\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        return null; // Defensive return in case wrapAndThrow doesn't throw\n                    }\n                    // All creator properties processed, bean built.\n                    // Now consume remaining properties from the original parser\n                    // and copy them into the token buffer.\n                    // 'p' is now positioned at the token *after* the creator property value,\n                    // which is the next FIELD_NAME or END_OBJECT.\n                    while (p.getCurrentToken() == JsonToken.FIELD_NAME) {\n                        tokens.writeFieldName(p.getCurrentName());\n                        p.nextToken(); // advance to value\n                        tokens.copyCurrentStructure(p); // copies value, advances p to next FIELD_NAME or END_OBJECT\n                    }\n                    tokens.writeEndObject(); // Close the object in the token buffer\n\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n                    // Process the unwrapped properties stored in 'tokens'\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n            } else if (buffer.readIdProperty(propName)) {\n                // readIdProperty is expected to consume the ID value and advance the parser.\n            } else {\n                // regular property?\n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    p.nextToken(); // Advance to value token\n                    buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                    p.nextToken(); // Advance to value token\n                    handleIgnoredProperty(p, ctxt, handledType(), propName);\n                } else if (_anySetter != null) {\n                    p.nextToken(); // Advance to value token\n                    // _anySetter deserializes the value directly from the parser\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } else {\n                    // Unrecognized property: buffer for unwrapped handler\n                    tokens.writeFieldName(propName);\n                    p.nextToken(); // Advance to value token\n                    // copyCurrentStructure copies value (and children), advances p to next FIELD_NAME or END_OBJECT\n                    tokens.copyCurrentStructure(p);\n                }\n            }\n            // Advance to the next token (next FIELD_NAME or END_OBJECT) for the next iteration\n            t = p.nextToken();\n        }\n\n        // We hit END_OBJECT (loop terminated because t is not FIELD_NAME), so:\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        // Process any unwrapped properties that were buffered before the bean was built\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}