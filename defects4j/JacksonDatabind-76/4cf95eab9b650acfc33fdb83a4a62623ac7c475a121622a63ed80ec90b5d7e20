{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        Object resultBean = null;\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    try {\n                        resultBean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue;\n                    }\n                    if (resultBean.getClass() != _beanType.getRawClass()) {\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n                    // Process remaining fields\n                    break;\n                }\n                continue;\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            // \"any property\"?\n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n\n        Object bean;\n        if (resultBean != null) {\n            bean = resultBean;\n            // Need to process remaining fields after the last one processed\n            while (t == JsonToken.FIELD_NAME) {\n                String propName = p.getCurrentName();\n                p.nextToken(); // skip name\n                // Check if the field is a regular property\n                SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } else {\n                    // Handle other cases (ignorable, any setter, unwrapped)\n                    if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                        handleIgnoredProperty(p, ctxt, handledType(), propName);\n                    } else if (_anySetter != null) {\n                        _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                    } else {\n                        tokens.writeFieldName(propName);\n                        tokens.copyCurrentStructure(p);\n                    }\n                }\n                t = p.nextToken();\n            }\n        } else {\n            // We hit END_OBJECT, so:\n            try {\n                bean = creator.build(ctxt, buffer);\n            } catch (Exception e) {\n                return wrapInstantiationProblem(e, ctxt);\n            }\n        }\n\n        tokens.writeEndObject();\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}