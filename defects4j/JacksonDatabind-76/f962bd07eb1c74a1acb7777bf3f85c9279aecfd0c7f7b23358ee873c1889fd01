{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n        DeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    List<String> bufferedFieldNames = new ArrayList<>();\n    List<Object> bufferedFieldValues = new ArrayList<>();\n    List<SettableBeanProperty> bufferedFieldProperties = new ArrayList<>();\n\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken();\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            Object value = creatorProp.deserialize(p, ctxt);\n            if (buffer.assignParameter(creatorProp, value)) {\n                // assignParameter returns true when all creator params assigned!\n                // *But* we should consume the rest of the fields and process them as properties\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    continue;\n                }\n                // [Issue]: We need to process already-read but unprocessed properties:\n                // buffer properties that were seen before instantiating bean\n                for (int i = 0; i < bufferedFieldProperties.size(); ++i) {\n                    SettableBeanProperty prop = bufferedFieldProperties.get(i);\n                    prop.set(bean, bufferedFieldValues.get(i));\n                }\n                // process rest\n                while ((t = p.nextToken()) == JsonToken.FIELD_NAME) {\n                    String name = p.getCurrentName();\n                    p.nextToken();\n                    SettableBeanProperty prop = _beanProperties.find(name);\n                    if (prop != null) {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } else if (_ignorableProps != null && _ignorableProps.contains(name)) {\n                        handleIgnoredProperty(p, ctxt, handledType(), name);\n                    } else {\n                        tokens.writeFieldName(name);\n                        tokens.copyCurrentStructure(p);\n                        if (_anySetter != null) {\n                            _anySetter.deserializeAndSet(p, ctxt, bean, name);\n                        }\n                    }\n                }\n                tokens.writeEndObject();\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            } else {\n                // Buffer for use after bean instantiation if needed\n                bufferedFieldNames.add(propName);\n                bufferedFieldProperties.add(creatorProp);\n                bufferedFieldValues.add(value);\n            }\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            Object value = prop.deserialize(p, ctxt);\n            bufferedFieldNames.add(propName);\n            bufferedFieldProperties.add(prop);\n            bufferedFieldValues.add(value);\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        if (_anySetter != null) {\n            bufferedFieldNames.add(propName);\n            bufferedFieldProperties.add(null);\n            bufferedFieldValues.add(_anySetter.deserialize(p, ctxt));\n        }\n    }\n    // We hit END_OBJECT\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n    // apply properties buffered prior bean instantiation, including regular and unknown/any-setter\n    for (int i = 0, len = bufferedFieldProperties.size(); i < len; ++i) {\n        SettableBeanProperty prop = bufferedFieldProperties.get(i);\n        if (prop != null) {\n            prop.set(bean, bufferedFieldValues.get(i));\n        } else if (_anySetter != null) {\n            _anySetter.set(bean, bufferedFieldNames.get(i), bufferedFieldValues.get(i));\n        }\n    }\n    tokens.writeEndObject();\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}