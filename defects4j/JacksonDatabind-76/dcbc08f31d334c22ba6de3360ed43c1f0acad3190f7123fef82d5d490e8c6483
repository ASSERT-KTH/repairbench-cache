{
    "generation": "    @SuppressWarnings(\"resource\")\n    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n    \t\tDeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        final PropertyBasedCreator creator = _propertyBasedCreator;\n        PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n        TokenBuffer tokens = new TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n\n        JsonToken t = p.getCurrentToken();\n        for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n            String propName = p.getCurrentName();\n            p.nextToken(); // to point to value\n            // creator property?\n            SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                    // All creator properties seen: can build the bean\n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        return wrapInstantiationProblem(e, ctxt);\n                    }\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n\n                    // Now, consume remaining properties from the stream.\n                    // 'p' is currently pointing to the token AFTER the creator property's value.\n                    // We need to advance `p` to the next FIELD_NAME or END_OBJECT to start processing remaining fields.\n                    t = p.nextToken(); \n                    \n                    while (t == JsonToken.FIELD_NAME) {\n                        propName = p.getCurrentName();\n                        p.nextToken(); // Move `p` to point to the value token\n\n                        // Regular property? (includes unwrapped properties if handled by _beanProperties)\n                        SettableBeanProperty prop = _beanProperties.find(propName);\n                        if (prop != null) {\n                            prop.deserializeAndSet(p, ctxt, bean);\n                        } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                            handleIgnoredProperty(p, ctxt, handledType(), propName);\n                        } else if (_anySetter != null) {\n                            _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                        } else {\n                            // If it's none of the above, it's truly unknown OR an actual \"unwrapped\" property\n                            // that needs to be buffered for _unwrappedPropertyHandler\n                            tokens.writeFieldName(propName);\n                            tokens.copyCurrentStructure(p);\n                        }\n                        t = p.nextToken(); // Move `p` to next token (FIELD_NAME or END_OBJECT)\n                    }\n                    tokens.writeEndObject(); // Close the TokenBuffer object\n\n                    // At this point, `p` is at END_OBJECT.\n                    // The `bean` is built and regular properties are set.\n                    // The `tokens` buffer contains only truly unwrapped/unknown properties.\n                    // Pass `p` (at END_OBJECT) and `tokens` to the handler.\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue; // Continue main loop if not all creator properties handled yet\n            }\n            // Object Id property?\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            // regular property? needs buffering for when bean will be built\n            SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            // \"any property\"?\n            if (_anySetter != null) {\n                // If bean not built yet, buffer it:\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            } else {\n                // Unknown property: must be buffered for _unwrappedPropertyHandler\n                tokens.writeFieldName(propName);\n                tokens.copyCurrentStructure(p);\n            }\n        }\n\n        // We hit END_OBJECT, but creator properties may not have been fulfilled or some regular props\n        // were buffered. Build bean from buffered values.\n        Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n        // Then process any buffered unwrapped/unknown properties\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}