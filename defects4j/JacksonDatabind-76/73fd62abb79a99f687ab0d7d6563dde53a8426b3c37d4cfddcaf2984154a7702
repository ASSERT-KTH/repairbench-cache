{
    "generation": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n        DeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    // buffer for any unwrapped (or otherwise deferred) properties\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    // iterate all fields\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // move to value\n\n        // is this a creator (constructor/factory) parameter?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // deserialize into buffer; if this was the last needed param, we can build\n            if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n                // all creator parameters have been collected -> build the bean\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                    // if wrapAndThrow returns, continue parsing\n                    continue;\n                }\n                // now copy any remaining fields into token buffer\n                JsonToken t2 = p.nextToken();\n                while (t2 == JsonToken.FIELD_NAME) {\n                    // copy the entire field (name + value/structure)\n                    tokens.copyCurrentStructure(p);\n                    t2 = p.nextToken();\n                }\n                tokens.writeEndObject();\n                // no polymorphic variations for unwrapped\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                // process both regular and unwrapped properties from the buffer\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n            // not ready to build yet: continue scanning\n            continue;\n        }\n\n        // not a creator prop: maybe Object Id?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular bean property?\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        // ignorable?\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // otherwise this is unwrapped or \"any\" property; copy to buffer\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        if (_anySetter != null) {\n            Object value = _anySetter.deserialize(p, ctxt);\n            buffer.bufferAnyProperty(_anySetter, propName, value);\n        }\n    }\n\n    // end of object, build now\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n    // close the token-buffered object\n    tokens.writeEndObject();\n    // and process unwrapped\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}