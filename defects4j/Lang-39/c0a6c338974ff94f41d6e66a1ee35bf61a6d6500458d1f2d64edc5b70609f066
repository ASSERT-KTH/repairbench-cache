{
    "generation": "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                    boolean repeat, int timeToLive) {\n\n    if (text == null || text.length() == 0 || searchList == null ||\n        searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n        return text;\n    }\n\n    // if recursing, timeToLive must be non-negative to avoid endless loops\n    if (timeToLive < 0) {\n        throw new IllegalArgumentException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n\n    // Make sure lengths are ok; they need to be equal.\n    if (searchLength != replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n                + searchLength + \" vs \" + replacementLength);\n    }\n\n    // Keep track of which search strings have no more matches.\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n\n    int textIndex = -1;     // index where a match is found\n    int replaceIndex = -1;  // index in the searchList/replacementList arrays\n    int tempIndex = -1;\n\n    // Find the first match (logic duplicated below in the loop).\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||\n            searchList[i].length() == 0 || replacementList[i] == null) {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    // If no search strings are found, return the text.\n    if (textIndex == -1) {\n        return text;\n    }\n\n    int start = 0;\n\n    // Get a good guess on the size of the result buffer so it doesn't have to expand much.\n    int increase = 0;\n    // When a replacement is longer than the search string, assume 3 matches for that string.\n    for (int i = 0; i < searchLength; i++) {\n        if (searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n            continue;\n        }\n        int greater = replacementList[i].length() - searchList[i].length();\n        if (greater > 0) {\n            increase += 3 * greater; // assume 3 matches\n        }\n    }\n    increase = Math.min(increase, text.length() / 5);\n\n    StringBuilder buf = new StringBuilder(text.length() + increase);\n\n    while (textIndex != -1) {\n        // Append unchanged part.\n        for (int i = start; i < textIndex; i++) {\n            buf.append(text.charAt(i));\n        }\n        // Append the replacement.\n        buf.append(replacementList[replaceIndex]);\n\n        start = textIndex + searchList[replaceIndex].length();\n        textIndex = -1;\n        replaceIndex = -1;\n        tempIndex = -1;\n        // Find the next earliest match.\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||\n                searchList[i].length() == 0 || replacementList[i] == null) {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i], start);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n    }\n    // Append the rest of the text.\n    for (int i = start; i < text.length(); i++) {\n        buf.append(text.charAt(i));\n    }\n    String result = buf.toString();\n\n    if (!repeat) {\n        return result;\n    }\n    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}