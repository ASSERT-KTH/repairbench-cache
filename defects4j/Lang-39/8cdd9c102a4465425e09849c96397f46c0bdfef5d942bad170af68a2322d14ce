{
    "generation": "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) {\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength != replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength + \" vs \" + replacementLength);\n    }\n    // keep track of which still have matches\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    // find the earliest match\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] ||\n            searchList[i] == null || searchList[i].length() == 0 ||\n            replacementList[i] == null) {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else if (textIndex == -1 || tempIndex < textIndex) {\n            textIndex = tempIndex;\n            replaceIndex = i;\n        }\n    }\n    // no matches\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    // estimate buffer increase\n    int increase = 0;\n    for (int i = 0; i < searchLength; i++) {\n        if (searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n            continue;\n        }\n        int greater = replacementList[i].length() - searchList[i].length();\n        if (greater > 0) {\n            increase += 3 * greater;\n        }\n    }\n    increase = Math.min(increase, text.length() / 5);\n    StringBuilder buf = new StringBuilder(text.length() + increase);\n    // perform replacements\n    while (textIndex != -1) {\n        // append up to the match\n        buf.append(text, start, textIndex);\n        // append the replacement\n        buf.append(replacementList[replaceIndex]);\n        // move past the replaced segment\n        start = textIndex + searchList[replaceIndex].length();\n        // reset and look for the next match\n        textIndex = -1;\n        replaceIndex = -1;\n        tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] ||\n                searchList[i] == null || searchList[i].length() == 0 ||\n                replacementList[i] == null) {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i], start);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    // append the remainder of the text\n    buf.append(text, start, text.length());\n    String result = buf.toString();\n    if (!repeat) {\n        return result;\n    }\n    // recurse if requested\n    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}