{
    "generation": "private static String replaceEach(String text, String[] searchList, String[] replacementList,\n                                  boolean repeat, int timeToLive) {\n    // mchyzer Performance note: This creates very few new objects (one major goal)\n    if (text == null || text.length() == 0 || searchList == null ||\n        searchList.length == 0 || replacementList == null || replacementList.length == 0) {\n        return text;\n    }\n\n    // if recursing, this shouldn't be less than 0\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n\n    // make sure lengths are ok, these need to be equal\n    if (searchLength != replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength + \" vs \" + replacementLength);\n    }\n\n    // keep track of which still have matches\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n\n    // index on index that the match was found\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n\n    // find the first match\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||\n            searchList[i].length() == 0 || replacementList[i] == null) {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else if (textIndex == -1 || tempIndex < textIndex) {\n            textIndex = tempIndex;\n            replaceIndex = i;\n        }\n    }\n\n    // no search strings found, we are done\n    if (textIndex == -1) {\n        return text;\n    }\n\n    int start = 0;\n\n    // estimate buffer size increase\n    int increase = 0;\n    for (int i = 0; i < searchLength; i++) {\n        // skip null or empty searches and null replacements\n        if (searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {\n            continue;\n        }\n        int greater = replacementList[i].length() - searchList[i].length();\n        if (greater > 0) {\n            increase += 3 * greater; // assume 3 matches\n        }\n    }\n    // cap the increase to 20% of the original text length\n    increase = Math.min(increase, text.length() / 5);\n\n    StringBuilder buf = new StringBuilder(text.length() + increase);\n\n    // perform the replacements\n    while (textIndex != -1) {\n        // append the text before the match\n        buf.append(text, start, textIndex);\n        // append the replacement\n        buf.append(replacementList[replaceIndex]);\n        // update start to continue after the replaced part\n        start = textIndex + searchList[replaceIndex].length();\n\n        // reset and find the next match\n        textIndex = -1;\n        replaceIndex = -1;\n        tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||\n                searchList[i].length() == 0 || replacementList[i] == null) {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i], start);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n\n    // append the rest of the text\n    buf.append(text, start, text.length());\n    String result = buf.toString();\n\n    // if not repeating, return result\n    if (!repeat) {\n        return result;\n    }\n    // repeat if requested\n    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}