{
    "generation": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        String originalValue = attr.getValue();\n\n        // First, check if the original attribute value explicitly starts with any allowed protocol.\n        // This is crucial for custom protocols (e.g., \"cid:12345\", \"data:gzzt\")\n        // and also for already absolute standard URLs (e.g., \"http://example.com/image.png\").\n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (originalValue.toLowerCase().startsWith(prot)) {\n                // If the original value already contains a valid protocol prefix,\n                // it's considered valid. We should not attempt to resolve it with el.absUrl()\n                // as that might incorrectly strip custom protocols or non-standard schemes.\n                // The attribute will be kept with its original value in this case.\n                return true;\n            }\n        }\n\n        // If we reach here, the original value does not start with any of the explicitly allowed protocols.\n        // This implies it's either a relative URL (e.g., \"path/to/img.png\") or an unknown/invalid protocol.\n        // For relative URLs, we attempt to resolve them to an absolute URL based on the element's base URI.\n        // For other unrecognized protocols, absUrl might return an empty string.\n        String resolvedValue = el.absUrl(attr.getKey());\n\n        // If `preserveRelativeLinks` is false, the attribute's value should be updated\n        // to its resolved absolute form (or an empty string if resolution failed/invalid).\n        // This ensures the output HTML always contains absolute URLs when configured this way.\n        if (!preserveRelativeLinks) {\n            attr.setValue(resolvedValue);\n        }\n\n        // Now, check if the resolved value starts with any of the allowed protocols.\n        // This check primarily covers standard protocols (like http, https) for resolved relative URLs.\n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (resolvedValue.toLowerCase().startsWith(prot)) {\n                return true;\n            }\n        }\n\n        // If neither the original value (for explicit protocols) nor the resolved value\n        // matched an allowed protocol, then the attribute is considered invalid.\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}