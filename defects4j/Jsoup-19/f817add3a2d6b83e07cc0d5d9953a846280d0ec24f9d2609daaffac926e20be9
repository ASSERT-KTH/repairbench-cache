{
    "generation": "private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    String value = attr.getValue();\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    if (value.startsWith(\"//\")) { // protocol-relative, so resolve to absolute (e.g. \"//example.com/\" => \"http://example.com/\")\n        value = el.absUrl(attr.getKey());\n    } else if (value.length() > 0 && !value.contains(\":\")) { // it's a relative path, resolve\n        value = el.absUrl(attr.getKey());\n    }\n    \n    if (!preserveRelativeLinks && value.length() > 0)\n        attr.setValue(value);\n    \n    if (value.length() == 0)\n        value = attr.getValue(); // if we couldn't resolve it, use the original value\n    \n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}