{
    "generation": "private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    String value = attr.getValue();\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String absUrl = el.absUrl(attr.getKey());\n    if (!preserveRelativeLinks) {\n        // if it's a relative link and conversion to abs succeeded, update the attr\n        if (!absUrl.isEmpty()) {\n            value = absUrl;\n            attr.setValue(value);\n        }\n    } else {\n        // if preserveRelativeLinks, but absUrl resolving failed, keep original value\n        if (!absUrl.isEmpty()) {\n            value = absUrl;\n        }\n    }\n\n    String lowerValue = value.toLowerCase();\n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString().toLowerCase() + \":\";\n        if (lowerValue.startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}