{
    "generation": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        String originalValue = attr.getValue(); // Get the original attribute value\n        String resolvedValue = el.absUrl(attr.getKey()); // Get the absolute/resolved URL. This might be empty if baseUri is blank.\n\n        boolean protocolMatched = false;\n\n        // First, try to match protocols against the original value.\n        // This is crucial for custom absolute protocols (like cid:, data:) that absUrl might mishandle\n        // if the document has no base URI.\n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (originalValue.toLowerCase().startsWith(prot)) {\n                protocolMatched = true;\n                break;\n            }\n        }\n\n        // If the original value didn't match, and the resolved value is not empty,\n        // try to match protocols against the resolved value.\n        // This covers cases where originalValue was a relative URL that resolved to an allowed absolute protocol.\n        if (!protocolMatched && !resolvedValue.isEmpty()) {\n            for (Protocol protocol : protocols) {\n                String prot = protocol.toString() + \":\";\n                if (resolvedValue.toLowerCase().startsWith(prot)) {\n                    protocolMatched = true;\n                    break;\n                }\n            }\n        }\n\n        // If no valid protocol was found in either the original or resolved value, return false.\n        if (!protocolMatched) {\n            return false;\n        }\n\n        // If a valid protocol was found, now handle the attribute value update based on `preserveRelativeLinks`.\n        if (!preserveRelativeLinks) {\n            // If the original value was valid (e.g., \"cid:12345\") but `absUrl` produced an empty string (due to a bug/edge case),\n            // then we should revert the attribute's value to the original to preserve the valid content.\n            // This prevents valid custom scheme URLs from being dropped as empty.\n            if (resolvedValue.isEmpty() && !originalValue.isEmpty()) { // Check originalValue.isEmpty() to prevent \"removing\" an already empty string\n                attr.setValue(originalValue);\n            } else if (!resolvedValue.isEmpty()) {\n                // Otherwise, if `absUrl` produced a non-empty (and presumably correct) resolved value, use that.\n                // This handles cases where relative URLs were resolved to absolute.\n                attr.setValue(resolvedValue);\n            }\n            // If resolvedValue is empty and originalValue was also empty or not an absolute URL starting with allowed protocol,\n            // then it's implicitly handled as not being set/retained, which aligns with removal for unresolvable relative links.\n        }\n\n        return true; // A valid protocol was found and the attribute value was handled.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}