{
    "generation": "private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value = attr.getValue(); // FIX: use the literal attr value for protocol check, not absUrl (which strips unknown protocols)\n    if (!preserveRelativeLinks) {\n        // Only update to abs url if it's http, https, or similar. \n        // But for protocol validation, we check the actual input value.\n        String abs = el.absUrl(attr.getKey());\n        if (!abs.isEmpty()) { // only overwrite if it's a normal relative/abs\n            attr.setValue(abs);\n            value = abs; // for later protocol matching, if we're forcing abs\n        }\n    }\n\n    String check = value.trim().toLowerCase();\n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString().toLowerCase() + \":\";\n        if (check.startsWith(prot)) {\n            return true;\n        }\n    }\n    // Allow protocol-less relative URLs, unless protocols are specified\n    if (protocols.isEmpty() && !check.contains(\":\")) {\n        return true;\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}