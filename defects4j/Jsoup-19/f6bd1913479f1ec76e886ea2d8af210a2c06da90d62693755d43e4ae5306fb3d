{
    "generation": "private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n    // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n    // rels without a baseuri get removed\n    String value;\n    if (protocols != null && protocols.size() > 0) {\n        // if a protocol is allowed, use the attribute's original value (may be relative or protocol based)\n        value = attr.getValue();\n    } else {\n        // fallback: use absUrl if protocols are not defined (shouldn't happen in normal scenarios)\n        value = el.absUrl(attr.getKey());\n    }\n    if (!preserveRelativeLinks)\n        attr.setValue(el.absUrl(attr.getKey()));\n\n    for (Protocol protocol : protocols) {\n        String prot = protocol.toString().toLowerCase() + \":\";\n        if (value.toLowerCase().startsWith(prot)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}