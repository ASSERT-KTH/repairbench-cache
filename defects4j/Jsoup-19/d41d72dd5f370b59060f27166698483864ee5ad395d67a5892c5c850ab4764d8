{
    "generation": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n        // rels without a baseuri get removed\n\n        // Get the original value and the resolved absolute URL.\n        String originalValue = attr.getValue();\n        // absUrl() handles protocols like http, https, ftp, file, etc. It will return an empty string\n        // if the protocol is not resolvable (like cid:, mailto:) or if the base URI is invalid for resolution.\n        String resolvedValue = el.absUrl(attr.getKey());\n\n        // Determine which value to use for the protocol check.\n        // Prefer the resolved value if it's not empty (as it might have resolved a relative URL to an allowed protocol).\n        // Otherwise, fall back to the original value (e.g., for \"cid:\", \"data:\", \"mailto:\", or relative links that couldn't be resolved).\n        String valueToCheck = resolvedValue.isEmpty() ? originalValue : resolvedValue;\n\n        // Check if the value (resolved or original) starts with an allowed protocol.\n        boolean protocolIsValid = false;\n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (valueToCheck.toLowerCase().startsWith(prot)) {\n                protocolIsValid = true;\n                break;\n            }\n        }\n\n        // If the protocol is valid, decide whether to update the attribute value.\n        if (protocolIsValid) {\n            if (!preserveRelativeLinks) {\n                // If not preserving relative links, we might update the attribute.\n                // Use the resolved value if resolution was successful and produced a non-empty result.\n                // Otherwise, use the original value (important for preserving \"cid:\", \"mailto:\", etc.).\n                // This prevents absUrl returning \"\" from erasing a valid original value.\n                String finalValue = resolvedValue.isEmpty() ? originalValue : resolvedValue;\n                attr.setValue(finalValue);\n            }\n            // If preserveRelativeLinks is true, we don't modify the attribute, keeping the original value implicitly.\n            return true; // The attribute passes the protocol check.\n        }\n\n        // The protocol (checked on resolved or original value) is not in the allowed set.\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}