{
    "generation": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        String originalValue = attr.getValue();\n\n        // First, check if the original value already matches an allowed protocol (e.g., http:, cid:, data:)\n        // This is crucial for custom protocols that absUrl might not handle correctly.\n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (originalValue.toLowerCase().startsWith(prot)) {\n                // If it starts with a valid protocol, it's considered valid.\n                // For custom protocols (like cid:, data:), they are already absolute\n                // in their own context. No need to call absUrl or change the attribute value\n                // in this case, as it's already in its desired absolute form.\n                return true;\n            }\n        }\n\n        // If the original value didn't match a known protocol prefix,\n        // it might be a relative URL (e.g., \"foo.png\") or an invalid one.\n        // Try to resolve it to an absolute URL using the element's base URI.\n        // This will correctly resolve relative paths and handle scheme-relative URLs (e.g., \"//example.com\").\n        String resolvedValue = el.absUrl(attr.getKey());\n\n        // Now, check if the resolved value matches any allowed protocol.\n        // This is primarily for \"http:\" or \"https:\" URLs that were originally relative\n        // or scheme-relative and have now been made absolute.\n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (resolvedValue.toLowerCase().startsWith(prot)) {\n                // If the resolved value is valid, and we are not preserving relative links,\n                // update the attribute value to the resolved (absolute) URL.\n                if (!preserveRelativeLinks)\n                    attr.setValue(resolvedValue);\n                return true;\n            }\n        }\n\n        // If neither the original value (for direct protocol matches) nor the resolved value\n        // matched any allowed protocol, then the attribute is invalid.\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}