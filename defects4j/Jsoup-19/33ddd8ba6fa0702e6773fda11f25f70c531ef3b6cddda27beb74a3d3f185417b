{
    "generation": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        String originalValue = attr.getValue();\n        String processedValue; // This will hold the value to be used for checks and potentially set on the attribute\n\n        // First, check if the original value already starts with a whitelisted protocol.\n        // This is crucial for custom protocols (like \"cid:\", \"data:\") which java.net.URL cannot resolve.\n        boolean isAlreadyAbsoluteWithKnownProtocol = false;\n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (originalValue.toLowerCase().startsWith(prot)) {\n                isAlreadyAbsoluteWithKnownProtocol = true;\n                break;\n            }\n        }\n\n        if (isAlreadyAbsoluteWithKnownProtocol) {\n            // If it's already an absolute URL with a whitelisted protocol, use the original value.\n            // No resolution via el.absUrl() is needed, as it would fail for custom protocols.\n            processedValue = originalValue;\n        } else {\n            // For other cases (relative URLs like \"/path/to/img.png\", or standard absolute URLs like \"http://example.com\"),\n            // try to resolve them using el.absUrl().\n            // If el.absUrl() returns an empty string (e.g., for unknown/malformed standard protocols),\n            // processedValue will correctly become \"\" causing the attribute to be dropped.\n            processedValue = el.absUrl(attr.getKey());\n        }\n\n        // If relative links are not preserved, update the attribute's value to the processed (absolute or original) value.\n        // This ensures the output HTML contains absolute URLs when required.\n        if (!preserveRelativeLinks) {\n            attr.setValue(processedValue);\n        }\n        \n        // Finally, check if the processed value starts with any of the allowed protocols.\n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (processedValue.toLowerCase().startsWith(prot)) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}