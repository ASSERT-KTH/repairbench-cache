{
    "generation": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // Check the protocol based on the resolved (usually absolute) URL or the original value\n        String originalValue = attr.getValue();\n        // Try to resolve the URL absolute. Will be empty if the baseUri is not set, or if the attribute is not a URL.\n        // Also, may be empty for schemes like cid: data: mailto: if not handled by URL class used internally by absUrl.\n        String resolvedValue = el.absUrl(attr.getKey());\n\n        // Determine which value to check the protocol against. Prioritize resolved, fallback to original.\n        // If resolved is empty and original is not, it might be a custom protocol (cid:, data:)\n        // or an unresolvable relative URL. Use the original value for the check in these cases.\n        String valueForCheck = (!resolvedValue.isEmpty() || originalValue.isEmpty()) ? resolvedValue : originalValue;\n\n        // Perform the protocol check using the determined value.\n        boolean protocolOk = false;\n        // Trim required, as value might start with spaces\n        // ToLowerCase required as protocol matching should be case-insensitive.\n        String valueForCheckLower = valueForCheck.trim().toLowerCase();\n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\"; // Assuming Protocol.toString() gives the scheme name e.g., \"http\"\n            if (valueForCheckLower.startsWith(prot)) {\n                protocolOk = true;\n                break;\n            }\n        }\n\n        if (protocolOk) {\n            // The protocol specified in the attribute value (or inferred via resolution) is allowed.\n            // Now, decide whether to update the attribute value to the absolute version.\n            if (!preserveRelativeLinks) {\n                 // We want absolute URLs. Update the attribute if absUrl could resolve it to a non-empty string.\n                 if (!resolvedValue.isEmpty()) {\n                     // Resolved value is available (and non-empty), use it.\n                     attr.setValue(resolvedValue);\n                 }\n                 // If resolvedValue is empty (e.g., for cid:, data:, or unresolvable relative),\n                 // we validated the protocol based on originalValue, so we keep the attribute,\n                 // but we don't update its value here, leaving the original value in place.\n                 // This ensures custom protocol URLs like \"cid:123\" are preserved.\n            }\n            // If preserveRelativeLinks is true, we don't touch the attribute value.\n            return true; // Mark attribute as safe because the protocol check passed.\n        } else {\n            // The protocol was not in the allowed list when checking valueForCheck.\n            // This also implicitly handles the case where originalValue was a relative URL that\n            // could not be resolved (resolvedValue was empty, valueForCheck was originalValue,\n            // which doesn't start with \"http:\" etc.).\n            return false; // Mark attribute as unsafe.\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}