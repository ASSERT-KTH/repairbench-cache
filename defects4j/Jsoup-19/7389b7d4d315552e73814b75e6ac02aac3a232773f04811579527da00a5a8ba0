{
    "generation": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        String originalValue = attr.getValue();\n\n        // First, check the original attribute value against whitelisted protocols.\n        // This handles cases like \"cid:12345\" or \"data:image/png;base64,...\"\n        // which are not standard web URLs and absUrl might incorrectly resolve them\n        // to empty strings if baseUri is not present or malformed.\n        for (Protocol protocol : protocols) {\n            String protStr = protocol.toString() + \":\";\n            if (originalValue.toLowerCase().startsWith(protStr)) {\n                return true;\n            }\n        }\n\n        // If the original value didn't match a whitelisted protocol prefix,\n        // then try to resolve it to an absolute URL and check that.\n        // This covers relative URLs (e.g., \"/path/to/img.png\") that should resolve\n        // against a base URI and then be checked against standard protocols like http/https.\n        String resolvedValue = el.absUrl(attr.getKey());\n\n        // If preserveRelativeLinks is false, update the attribute value to the resolved absolute URL.\n        // This part is only reached if the original value didn't match a custom protocol directly.\n        if (!preserveRelativeLinks) {\n            attr.setValue(resolvedValue);\n        }\n        \n        // Now check the (potentially) resolved value against the protocols.\n        // This catches cases where a relative URL (e.g., /path/to/img.png)\n        // resolves to an absolute URL (e.g., http://example.com/path/to/img.png)\n        // and needs to be validated against \"http:\" or \"https:\".\n        for (Protocol protocol : protocols) {\n            String protStr = protocol.toString() + \":\";\n            if (resolvedValue.toLowerCase().startsWith(protStr)) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}