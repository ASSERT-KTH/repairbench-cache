{
    "generation": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        String originalValue = attr.getVal();\n\n        // First, check if the original value explicitly starts with one of the allowed protocols.\n        // This is crucial for custom protocols (like \"cid:\" or \"data:\") that are effectively absolute\n        // and should be preserved as-is, bypassing potential mishandling by el.absUrl() for non-standard schemes.\n        for (Protocol protocol : protocols) {\n            String protStr = protocol.toString() + \":\";\n            if (originalValue.toLowerCase().startsWith(protStr)) {\n                // If the original value matches an allowed custom protocol,\n                // it's considered valid. We explicitly set the attribute value\n                // back to its original form to ensure it's not altered.\n                attr.setValue(originalValue);\n                return true;\n            }\n        }\n\n        // If the original value did not match any explicit custom protocols (e.g., it's http:, or a relative path),\n        // then proceed with standard URL resolution logic using el.absUrl().\n        String resolvedValue = el.absUrl(attr.getKey());\n        \n        // If preserveRelativeLinks is false, update the attribute with the resolved absolute URL.\n        // For custom protocols, this step is bypassed by the earlier check.\n        // For standard URLs, absUrl typically returns an absolute URL, which is then set.\n        if (!preserveRelativeLinks) {\n            attr.setValue(resolvedValue);\n        }\n        \n        // Finally, check the (potentially resolved) value against the allowed protocols.\n        // This covers standard protocols (http, https, ftp) that might have been absolutized,\n        // and also situations where absUrl might correctly preserve a custom protocol (though\n        // the earlier block explicitly handles this to be safe).\n        for (Protocol protocol : protocols) {\n            String protStr = protocol.toString() + \":\";\n            if (resolvedValue.toLowerCase().startsWith(protStr)) {\n                return true;\n            }\n        }\n\n        // No valid protocol found for either the original or resolved value\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}