{
    "generation": "    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.\n        // rels without a baseuri get removed\n        String origValue = attr.getValue(); // Get the original value before resolving.\n        String value = el.absUrl(attr.getKey()); // Attempt to resolve URL\n\n        // If resolution returns an empty string but the original value was not empty,\n        // it might be a custom protocol (like 'cid:') or a relative URL without a base URI.\n        // In this case, use the original value for the protocol check.\n        String valueToCheck = value;\n        if (value.isEmpty() && !origValue.isEmpty()) {\n            valueToCheck = origValue;\n        }\n\n        // Check the protocol against the appropriate value (resolved or original).\n        for (Protocol protocol : protocols) {\n            String prot = protocol.toString() + \":\";\n            if (valueToCheck.toLowerCase().startsWith(prot)) {\n                // Protocol is valid.\n                // If relative links aren't preserved, update the attribute with the value\n                // that passed the check (which might be the resolved URL or the original URL\n                // if resolution failed for a valid custom protocol).\n                if (!preserveRelativeLinks) {\n                    attr.setValue(valueToCheck);\n                }\n                return true; // Valid protocol found.\n            }\n        }\n\n        // No valid protocol matched.\n        return false;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}