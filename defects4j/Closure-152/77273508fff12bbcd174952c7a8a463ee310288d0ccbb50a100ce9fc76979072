{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Handle case where typeOfThis might be a UnionType\n  JSType resolvedThis = safeResolve(typeOfThis, t, scope);\n  if (resolvedThis instanceof UnionType) {\n    // For now, just take the first object type in the union if any\n    ObjectType firstObjectType = null;\n    UnionType union = (UnionType) resolvedThis;\n    for (JSType alternative : union.getAlternates()) {\n      if (alternative instanceof ObjectType) {\n        if (firstObjectType == null) {\n          firstObjectType = (ObjectType) alternative;\n        } else if (!firstObjectType.isEquivalentTo(alternative)) {\n          // If there are incompatible object types, we'll handle the error elsewhere\n          break;\n        }\n      }\n    }\n    if (firstObjectType != null) {\n      typeOfThis = firstObjectType;\n    } else {\n      // If no object type exists in the union, use the union directly\n      typeOfThis = union;\n    }\n  } else {\n    typeOfThis = (ObjectType) resolvedThis;\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}