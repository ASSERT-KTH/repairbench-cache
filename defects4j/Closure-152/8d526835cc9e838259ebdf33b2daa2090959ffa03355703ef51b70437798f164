{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis instanceof ObjectType) {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else if (resolvedTypeOfThis instanceof UnionType) {\n      UnionType unionType = (UnionType) resolvedTypeOfThis;\n      boolean allObjectTypes = true;\n      for (JSType alternate : unionType.getAlternates()) {\n        if (!(alternate instanceof ObjectType)) {\n          allObjectTypes = false;\n          break;\n        }\n      }\n      if (allObjectTypes) {\n        typeOfThis = unionType.toMaybeObjectType();\n      } else {\n        t.report(JSError.make(typeOfThis, TYPEOF_THIS_MUST_BE_OBJECT,\n                resolvedTypeOfThis.toString()));\n        typeOfThis = getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n      }\n    } else {\n      t.report(JSError.make(typeOfThis, TYPEOF_THIS_MUST_BE_OBJECT,\n              resolvedTypeOfThis.toString()));\n      typeOfThis = getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}