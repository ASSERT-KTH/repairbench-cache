{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Instead of directly casting typeOfThis to ObjectType, we resolve it\n  // and then check whether it\u2019s an ObjectType or (in the case of a UnionType)\n  // a union of non\u2010nullable object types. (If it isn\u2019t acceptable we set it to null\n  // so that the error is reported later.)\n  JSType resolved = safeResolve(typeOfThis, t, scope);\n  UnionType union = resolved.toMaybeUnionType();\n  if (union != null) {\n    // If the union turns out to be nullable then we don\u2019t want to use it as the \"this\"\n    // type.  (Note that in Closure the non-null assertion \u201c!\u201d will remove null from\n    // the union; see testBackwardsTypedefUse2 vs testBackwardsTypedefUse3.)\n    typeOfThis = union.isNullable() ? null : (ObjectType) resolved;\n  } else if (resolved instanceof ObjectType) {\n    typeOfThis = (ObjectType) resolved;\n  } else {\n    typeOfThis = null;\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}