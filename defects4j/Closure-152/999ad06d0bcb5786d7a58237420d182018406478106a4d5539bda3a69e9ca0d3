{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis.isUnionType()) {\n      // If it's a UnionType, we need to find an ObjectType representation.\n      // Restrict by non-null/undefined first, as null/undefined are not objects.\n      UnionType unionType = resolvedTypeOfThis.toMaybeUnionType();\n      JSType restricted = unionType.restrictByNotNullOrUndefined();\n\n      // Get the least common supertype of the restricted union.\n      // For (Date|Array), this will typically resolve to the native ObjectType.\n      // For (string|Date), this will typically resolve to the UnknownType.\n      // Both ObjectType and UnknownType are valid ObjectType instances.\n      JSType leastSupertype = restricted.getLeastSupertype(t.getNativeType(JSTypeNative.NO_TYPE));\n\n      // The least supertype of a union of objects or mixed types is typically an ObjectType\n      // (like Object or UnknownType). If it's not, there's a deeper inconsistency.\n      typeOfThis = (ObjectType) leastSupertype;\n    } else if (resolvedTypeOfThis.isObjectType()) {\n      // If it's already an ObjectType (or a subclass), cast directly.\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else {\n      // If it's a PrimitiveType (e.g., string, number, boolean) or other JSType.\n      // Convert it to its corresponding wrapper ObjectType (e.g., String, Number, Boolean).\n      // This handles cases like `@this {string}` where the primitive 'string'\n      // needs to be represented as the 'String' object type for the `typeOfThis` field.\n      typeOfThis = resolvedTypeOfThis.toObjectType();\n    }\n\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}