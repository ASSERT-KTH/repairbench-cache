{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Only cast to ObjectType if the resolved typeOfThis is actually an ObjectType.\n  // Otherwise, leave it as the resolved type and let upstream code (TypeCheck)\n  // handle warning/reporting when a non-object type is used for @this.\n  JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n  if (resolvedTypeOfThis instanceof ObjectType) {\n    typeOfThis = (ObjectType) resolvedTypeOfThis;\n  } else {\n    typeOfThis = null;\n    // If it's not an ObjectType, don't assign it (or assign null)\n    // TypeCheck or further upstream code will report any needed warnings\n    // and use the original non-object type for message reporting.\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}