{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis instanceof ObjectType) {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else if (resolvedTypeOfThis instanceof UnionType) {\n      // Handle union types by finding the object types in the union\n      UnionType union = (UnionType) resolvedTypeOfThis;\n      List<ObjectType> objectTypes = new ArrayList<>();\n      for (JSType alt : union.getAlternates()) {\n        if (alt instanceof ObjectType) {\n          objectTypes.add((ObjectType) alt);\n        }\n      }\n      if (!objectTypes.isEmpty()) {\n        typeOfThis = objectTypes.get(0); // Take the first object type\n      } else {\n        // If no object types found, keep the original type\n        typeOfThis = (ObjectType) typeOfThis.resolve(t, scope);\n      }\n    } else {\n      typeOfThis = (ObjectType) typeOfThis.resolve(t, scope);\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}