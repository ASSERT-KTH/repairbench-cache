{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    JSType resolvedThisType = safeResolve(typeOfThis, t, scope);\n    // Check if the resolved type is an ObjectType or a UnionType that can be cast to ObjectType\n    if (resolvedThisType instanceof UnionType) {\n      // Check if all components of the union are ObjectTypes\n      UnionType unionType = (UnionType) resolvedThisType;\n      boolean allObjectTypes = true;\n      for (JSType alternate : unionType.getAlternates()) {\n        if (!(alternate instanceof ObjectType || alternate.isUnknownType())) {\n          allObjectTypes = false;\n          break;\n        }\n      }\n      if (allObjectTypes) {\n        typeOfThis = (ObjectType) resolvedThisType;\n      } else {\n        // If not all are objects, keep the original type (or report error)\n        // We'll let the type checker handle the actual error reporting\n        typeOfThis = (ObjectType) typeOfThis.resolve(t, scope);\n      }\n    } else {\n      typeOfThis = (ObjectType) resolvedThisType;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}