{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    // Fix: Remove the incorrect cast to ObjectType which caused ClassCastException\n    // when the resolved type was a UnionType or a primitive type.\n    typeOfThis = safeResolve(typeOfThis, t, scope);\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      // \u0627\u0641\u062a\u0631\u0636 \u0623\u0646 safeResolve \u0647\u0646\u0627 \u0633\u064a\u0639\u064a\u062f ObjectType \u0623\u0648 \u0646\u0648\u0639\u064b\u0627 \u064a\u0645\u0643\u0646 \u062a\u062d\u0648\u064a\u0644\u0647 \u0625\u0644\u064a\u0647 \u0628\u0623\u0645\u0627\u0646.\n      // If iface.resolve returns something other than ObjectType, this could still cast error.\n      // However, interfaces are expected to be ObjectTypes.\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n       boolean subtypesChanged = false;\n       ImmutableList.Builder<FunctionType> resolvedSubtypes = ImmutableList.builder();\n       for (FunctionType subType : subTypes) {\n         FunctionType resolvedSubType = (FunctionType) subType.resolve(t, scope);\n         resolvedSubtypes.add(resolvedSubType);\n         subtypesChanged |= (resolvedSubType != subType);\n       }\n       if (subtypesChanged) {\n         subTypes = resolvedSubtypes.build();\n       }\n    }\n\n\n    // Note: We should be calling JSType#resolveInternal directly, but it's\n    // protected. This is the best we can do for now.\n    return registry.isLastGeneration() ? this : super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}