{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Handle UnionType cases for typeOfThis\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis instanceof UnionType) {\n      // Find an ObjectType in the union if possible, otherwise use the original type\n      TypeOfThisResolvedToObjectType:\n      for (JSType type : ((UnionType) resolvedTypeOfThis).getAlternates()) {\n        if (type instanceof ObjectType) {\n          typeOfThis = (ObjectType) type;\n          break TypeOfThisResolvedToObjectType;\n        }\n      }\n      // If no ObjectType found in union, use the original type (will be reported as error elsewhere)\n      if (!(typeOfThis instanceof ObjectType)) {\n        typeOfThis = (ObjectType) resolvedTypeOfThis;\n      }\n    } else {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}