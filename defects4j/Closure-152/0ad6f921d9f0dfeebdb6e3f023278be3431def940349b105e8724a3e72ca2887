{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Handle typeOfThis which could be a UnionType\n    JSType resolvedThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedThis instanceof UnionType) {\n      // Check if all components of the union are ObjectTypes\n      boolean allObjectTypes = true;\n      for (JSType component : ((UnionType) resolvedThis).getAlternates()) {\n        if (!(component instanceof ObjectType)) {\n          allObjectTypes = false;\n          break;\n        }\n      }\n      if (allObjectTypes) {\n        typeOfThis = (UnionType) resolvedThis;\n      } else {\n        // Report error if not all components are ObjectTypes\n        t.report(JSError.make(t.getSourceName(), resolvedThis.getSourceName(),\n            resolvedThis.getLineNumber(), resolvedThis.getCharno(),\n            \"TypeCheck\", \"@this type of a function must be an object\\n\"\n            + \"Actual type: \" + resolvedThis.toString()));\n        typeOfThis = getNativeType(ObjectType.OBJECT);\n      }\n    } else {\n      typeOfThis = (ObjectType) resolvedThis;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}