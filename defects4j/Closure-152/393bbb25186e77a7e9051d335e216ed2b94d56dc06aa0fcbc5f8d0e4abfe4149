{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Warning about typeOfThis if it doesn't resolve to an ObjectType\n  // is handled further upstream.\n  // TODO(nicksantos): Handle this correctly if we have a UnionType.\n  JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n  if (resolvedTypeOfThis == null || resolvedTypeOfThis.isUnknownType()) {\n    typeOfThis = (ObjectType) resolvedTypeOfThis;\n  } else if (resolvedTypeOfThis instanceof ObjectType) {\n    typeOfThis = (ObjectType) resolvedTypeOfThis;\n  } else if (resolvedTypeOfThis.isUnionType()) {\n    UnionType union = resolvedTypeOfThis.toMaybeUnionType();\n    typeOfThis = null;\n    for (JSType alternate : union.getAlternates()) {\n      if (alternate.isObjectType()) {\n        ObjectType obj = alternate.toObjectType();\n        if (typeOfThis == null) {\n          typeOfThis = obj;\n        } else {\n          typeOfThis = registry.createUnionType(typeOfThis, obj);\n        }\n      }\n    }\n    // If no object types found, keep original resolved type even though it\n    // is not an ObjectType (may be null type, which is okay), will be checked upstream.\n    if (typeOfThis == null) {\n      typeOfThis = null;\n    }\n  } else {\n    // non-object, non-union type\n    typeOfThis = null; // assign to null, checking happens elsewhere\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}