{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis instanceof UnionType) {\n        // If the resolved type is a UnionType, check if it contains at least one ObjectType\n        UnionType unionType = (UnionType) resolvedTypeOfThis;\n        if (unionType.getRestrictedTypes().stream().anyMatch(type -> type instanceof ObjectType)) {\n            // If it does, set typeOfThis to the first ObjectType found\n            typeOfThis = (ObjectType) unionType.getRestrictedTypes().stream()\n                .filter(type -> type instanceof ObjectType)\n                .findFirst()\n                .orElse(null);\n        } else {\n            // If not, report an error and set typeOfThis to null\n            t.report(JSError.make(null, 0, CHECK_TYPES_RESOLVED, \n                \"@this type of a function must be an object\\nActual type: \" + resolvedTypeOfThis));\n            typeOfThis = null;\n        }\n    } else if (resolvedTypeOfThis instanceof ObjectType) {\n        typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else {\n        // If the resolved type is not an ObjectType, report an error and set typeOfThis to null\n        t.report(JSError.make(null, 0, CHECK_TYPES_RESOLVED, \n            \"@this type of a function must be an object\\nActual type: \" + resolvedTypeOfThis));\n        typeOfThis = null;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}