{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Attempt to safely convert the resolved typeOfThis to an ObjectType,\n  // using toObjectType() to handle cases like union types properly.\n  JSType resolvedThisType = safeResolve(typeOfThis, t, scope);\n  if (resolvedThisType != null) {\n    ObjectType maybeObj = resolvedThisType.toObjectType();\n    if (maybeObj != null) {\n      typeOfThis = maybeObj;\n    } else {\n      typeOfThis = null;\n    }\n  } else {\n    typeOfThis = null;\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}