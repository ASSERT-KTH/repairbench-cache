{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis.isObjectType()) {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else if (resolvedTypeOfThis.isUnionType()) {\n      ObjectType candidate = resolvedTypeOfThis.toObjectType();\n      if (candidate != null) {\n        // If the union can be represented as a common object type (e.g., !(Date|Array) -> Object)\n        typeOfThis = candidate;\n      } else {\n        // If the union contains non-object types (e.g., (Date|Array) due to null, or (string|Date))\n        // it's not a valid @this object type. Assign NoType.\n        typeOfThis = registry.getNoType(); // NoType is an ObjectType\n      }\n    } else {\n      // If resolvedTypeOfThis is not an ObjectType and not a UnionType (e.g., StringType, NumberType),\n      // it's not a valid @this object type. Assign NoType.\n      typeOfThis = registry.getNoType(); // NoType is an ObjectType\n    }\n\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}