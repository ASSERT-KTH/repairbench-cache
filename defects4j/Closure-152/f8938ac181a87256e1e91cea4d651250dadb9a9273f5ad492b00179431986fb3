{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Handle UnionType case for typeOfThis\n  JSType resolvedThisType = safeResolve(typeOfThis, t, scope);\n  if (resolvedThisType instanceof UnionType) {\n    UnionType unionType = (UnionType) resolvedThisType;\n    List<ObjectType> objectComponents = new ArrayList<>();\n    // Check if all components of the union are ObjectTypes\n    boolean allObjectTypes = true;\n    for (JSType component : unionType.getAlternates()) {\n      if (component instanceof ObjectType) {\n        objectComponents.add((ObjectType) component);\n      } else {\n        allObjectTypes = false;\n      }\n    }\n\n    if (allObjectTypes) {\n      // If all components are ObjectTypes, we can treat the union as an ObjectType\n      typeOfThis = unionType;\n    } else {\n      // Otherwise report an error\n      t.report(JSTypeResolution.UNION_TYPE_RESOLVE_ERROR,\n          JSTypeResolution.WARNABLE_ERROR_FORMAT,\n          \"type of this must be an object or union of objects. Found: \" +\n          resolvedThisType.toString());\n      // Default to Object type\n      typeOfThis = getNativeType(thread.getNativeObjectObject());\n    }\n  } else {\n    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}