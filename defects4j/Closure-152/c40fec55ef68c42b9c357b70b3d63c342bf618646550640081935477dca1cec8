{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Warning about typeOfThis if it doesn't resolve to an ObjectType\n  // is handled further upstream.\n  JSType resolvedThis = safeResolve(typeOfThis, t, scope);\n  if (!(resolvedThis instanceof ObjectType)) {\n    // If it's not an ObjectType but is a union that contains ObjectTypes,\n    // we should take the ObjectTypes. Otherwise, we'll let upstream handle the error.\n    if (resolvedThis instanceof UnionType) {\n      UnionType union = (UnionType) resolvedThis;\n      List<ObjectType> objectTypes = new ArrayList<>();\n      for (JSType type : union.getAlternates()) {\n        if (type instanceof ObjectType) {\n          objectTypes.add((ObjectType) type);\n        }\n      }\n      if (!objectTypes.isEmpty()) {\n        // If there are multiple object types, we'll just pick the first one\n        // This preserves existing behavior where only one ObjectType was expected\n        typeOfThis = (ObjectType) objectTypes.get(0);\n      } else {\n        // If there are no object types in the union, keep the original type and let upstream handle it\n        typeOfThis = (ObjectType) resolvedThis;\n      }\n    } else {\n      typeOfThis = (ObjectType) resolvedThis;\n    }\n  } else {\n    typeOfThis = (ObjectType) resolvedThis;\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}