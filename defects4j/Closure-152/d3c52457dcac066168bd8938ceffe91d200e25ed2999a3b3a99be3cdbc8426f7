{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis instanceof ObjectType) {\n        typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else if (resolvedTypeOfThis instanceof UnionType) {\n        // Handle UnionType by checking if all alternates are ObjectTypes\n        UnionType unionType = (UnionType) resolvedTypeOfThis;\n        boolean allObjectTypes = unionType.getAlternates().stream()\n                .allMatch(alt -> alt instanceof ObjectType);\n        if (allObjectTypes) {\n            typeOfThis = (ObjectType) unionType.getLeastSupertype();\n        } else {\n            // If not all alternates are ObjectTypes, report an error\n            t.report(JSError.make(null, 0, 0, \n                    \"UnionType cannot be used as @this type unless all alternates are ObjectTypes\", \n                    null, null));\n            typeOfThis = getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n        }\n    } else {\n        // If resolvedTypeOfThis is not an ObjectType or UnionType, report an error\n        t.report(JSError.make(null, 0, 0, \n                \"@this type of a function must be an object\", \n                \"Actual type: \" + resolvedTypeOfThis.toString(), null));\n        typeOfThis = getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}