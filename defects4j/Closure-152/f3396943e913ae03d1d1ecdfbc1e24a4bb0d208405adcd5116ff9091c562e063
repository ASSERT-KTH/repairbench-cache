{
    "generation": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n  // Handle typeOfThis if it doesn't resolve to an ObjectType\n  // and is a UnionType.\n  typeOfThis = safeResolve(typeOfThis, t, scope);\n  if (typeOfThis instanceof UnionType) {\n    UnionType unionType = (UnionType) typeOfThis;\n    for (JSType type : unionType.getAlternates()) {\n      if (!(type instanceof ObjectType)) {\n        t.report(JSError.make(\n            t.getSourceName(),\n            typeOfThis.getSourcePosition(),\n            TypeCheck.AT_THIS_MUST_BE_OBJECT,\n            typeOfThis.toString(),\n            unionType.toString()));\n      }\n    }\n  } else if (!(typeOfThis instanceof ObjectType)) {\n    t.report(JSError.make(\n        t.getSourceName(),\n        typeOfThis.getSourcePosition(),\n        TypeCheck.AT_THIS_MUST_BE_OBJECT,\n        typeOfThis.toString(),\n        typeOfThis.toString()));\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n\n  return super.resolveInternal(t, scope);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}