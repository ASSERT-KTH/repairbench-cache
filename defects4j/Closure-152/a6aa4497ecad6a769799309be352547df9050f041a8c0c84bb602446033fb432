{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // The original code caused a ClassCastException if typeOfThis resolved\n    // to a UnionType or a primitive type (like StringType).\n    // To fix this, we first resolve typeOfThis to a generic JSType.\n    // Then, we use JSType.toObjectType() to convert it into an ObjectType.\n    // If the resolved type is not an ObjectType or a union of ObjectTypes\n    // that can be coerced to a single ObjectType, toObjectType() will return null.\n    // This aligns with the \"warning handled upstream\" comment, as a null typeOfThis\n    // would signal an invalid @this type to the TypeCheck pass.\n    JSType resolvedRawTypeOfThis = safeResolve(typeOfThis, t, scope);\n    typeOfThis = resolvedRawTypeOfThis != null ? resolvedRawTypeOfThis.toObjectType() : null;\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}