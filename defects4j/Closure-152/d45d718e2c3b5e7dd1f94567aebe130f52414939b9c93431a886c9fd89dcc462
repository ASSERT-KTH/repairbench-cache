{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    // The original code was: typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n    // This caused a ClassCastException if safeResolve returned a UnionType\n    // or a PrimitiveType, as 'typeOfThis' field is declared as ObjectType.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis instanceof ObjectType) {\n      // If the resolved type is an ObjectType, it can be directly assigned.\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else {\n      // If the resolved type is not an ObjectType (e.g., UnionType, PrimitiveType),\n      // it cannot be assigned to the 'typeOfThis' field directly without a ClassCastException.\n      // To prevent the exception and allow upstream type checks to handle the invalid\n      // '@this' type (as indicated by the comment), we set typeOfThis to the\n      // UNKNOWN_TYPE object. This maintains the invariant that 'typeOfThis' is\n      // always an ObjectType, even if it represents an invalid or unresolved type.\n      typeOfThis = t.getNativeType(JSTypeNative.UNKNOWN_TYPE).toObjectType();\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}