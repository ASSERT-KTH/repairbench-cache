{
    "generation": "  @Override\n  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    // Fix: Avoid ClassCastException if typeOfThis resolves to a non-ObjectType or UnionType.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis == null) {\n      // If resolution yields null (e.g., type name not found),\n      // fallback to UNKNOWN_TYPE for internal consistency.\n      // The actual error about the unresolved type will be reported upstream.\n      typeOfThis = getRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    } else if (resolvedTypeOfThis.isObjectType()) {\n      // If the resolved type is directly an ObjectType, assign it.\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else if (resolvedTypeOfThis.isUnionType()) {\n      // If it's a UnionType, we need to check its components.\n      UnionType unionType = (UnionType) resolvedTypeOfThis;\n      // If the union consists purely of ObjectTypes (e.g., !(Date|Array)),\n      // it is generally considered acceptable for the `@this` type.\n      // We assign a common ObjectType for internal consistency and to prevent ClassCastException,\n      // letting more specific type checks happen upstream if needed.\n      if (unionType.isUnionOfObjectTypes()) {\n        typeOfThis = getRegistry().getNativeObjectType(JSTypeNative.OBJECT_TYPE);\n      } else {\n        // If the UnionType contains non-ObjectTypes (e.g., (Array|Date|null) or string|Date),\n        // it's not a valid `@this` type that can be represented as a direct ObjectType.\n        // Fallback to UNKNOWN_TYPE. The warning will be reported upstream.\n        typeOfThis = getRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n      }\n    } else {\n      // For any other non-ObjectType (e.g., PrimitiveType like 'string'),\n      // it's not a valid `@this` type. Fallback to UNKNOWN_TYPE.\n      // The warning will be reported upstream.\n      typeOfThis = getRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}