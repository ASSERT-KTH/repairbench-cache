{
    "generation": "    /**\n     * @param contentTypeSer Optional explicit type information serializer\n     *    to use for contained values (only used for properties that are\n     *    of container type)\n     */\n    @SuppressWarnings(\"deprecation\")\n    protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n            TypeSerializer typeSer, TypeSerializer contentTypeSer,\n            AnnotatedMember am, boolean defaultUseStaticTyping)\n        throws JsonMappingException\n    {\n        // do we have annotation that forces type to use (to declared type or its super type)?\n        JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n\n        // Container types can have separate type serializers for content (value / element) type\n        if (contentTypeSer != null) {\n            /* 04-Feb-2010, tatu: Let's force static typing for collection, if there is\n             *    type information for contents. Should work well (for JAXB case); can be\n             *    revisited if this causes problems.\n             */\n            if (serializationType == null) {\n//                serializationType = TypeFactory.type(am.getGenericType(), _beanDesc.getType());\n                serializationType = declaredType;\n            }\n            JavaType ct = serializationType.getContentType();\n            // Not exactly sure why, but this used to occur; better check explicitly:\n            if (ct == null) {\n                // 05-Mar-2017, tatu: Should this ever occur? It did in past, trying to see if it still does\n                prov.reportBadDefinition(_beanDesc.getType(), String.format(\n                        \"Problem trying to create BeanPropertyWriter for property '%s' (of type %s); serialization type %s has no content\",\n                        propDef.getName(), _beanDesc.getType(), serializationType));\n            }\n            serializationType = serializationType.withContentTypeHandler(contentTypeSer);\n            ct = serializationType.getContentType();\n        }\n        \n        Object valueToSuppress = null;\n        boolean suppressNulls = false;\n\n        // 12-Jul-2016, tatu: [databind#1256] Need to make sure we consider type refinement\n        //   for inclusion filtering purposes (not just serialization type)\n        JavaType actualType = (serializationType == null) ? declaredType : serializationType;\n\n        JsonInclude.Value inclV = _defaultInclusion.withOverrides(propDef.findInclusion());\n        JsonInclude.Include inclusion = inclV.getValueInclusion();\n        if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but...\n            inclusion = JsonInclude.Include.ALWAYS;\n        }\n\n        switch (inclusion) {\n        case NON_DEFAULT:\n            // 11-Nov-2015, tatu: This is tricky because semantics differ between cases,\n            //    so that if enclosing class has this, we may need to values of property,\n            //    whereas for global defaults OR per-property overrides, we have more\n            //    static definition. Sigh.\n            // First: case of class specifying it; try to find POJO property defaults\n            // 12-Jul-2016, tatu: Ideally would use getter type, not field type, but...\n            // 13-Jul-2016, tatu: Let's try actual type, see if that works better overall\n            //   ... note that this should only be done if enclosing class has the setting...\n\n            // 16-Aug-2016, tatu: To fix [databind#1347], need to handle explicit default value\n            Object defaultV = propDef.getMetadata().getDefaultValue();\n            if (defaultV == null) {\n                defaultV = getDefaultValue(actualType);\n            }\n\n            if (defaultV == null) {\n                suppressNulls = true;\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; // since default is null\n            } else {\n                if (defaultV.getClass().isArray()) {\n                    valueToSuppress = ArrayBuilders.getArrayComparator(defaultV);\n                }\n                // just use the value itself as marker, otherwise\n            }\n            // 23-Mar-2017, tatu: As per [databind#1548], must verify that the value is actual\n            //    instance of property type... can't do that earlier because property type not\n            //    passed, but here we do have it.\n            // 02-Jun-2017, tatu: Actually, need `actualType`, not `declaredType`...\n            if (valueToSuppress != null) {\n                if (!actualType.isTypeOrSubTypeOf(valueToSuppress.getClass())) {\n                    // 19-Apr-2018, tatu: Maybe this should be an exception instead...\n                    prov.reportBadDefinition(actualType,\n                            String.format(\"Default value type (%s) incompatible with type %s\",\n                                    ClassUtil.classNameOf(valueToSuppress), actualType));\n                }\n            }\n            break;\n        case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals\n            // always suppress nulls\n            suppressNulls = true;\n            // and for referential types, also \"empty\", which in their case means \"absent\"\n            // 12-Jul-2016, tatu: As per [databind#1256], need to use actual type...\n            if (actualType.isReferenceType()) { // <<< FIX: Use actualType instead of declaredType\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        case NON_EMPTY:\n            // always suppress nulls\n            suppressNulls = true;\n            // but possibly also 'empty' values:\n            valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            break;\n        case NON_NULL:\n            suppressNulls = true;\n            // fall through\n        case ALWAYS: // default\n        default: // should not happen but just in case\n            // we may still want to suppress empty collections, as per [JACKSON-254]:\n            // 12-Jul-2016, tatu: Ok, this is tricky... originally used declared type,\n            //   but that may not be right. Let's try `actualType` instead.\n            if (actualType.isContainerType()\n                    && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;\n            }\n            break;\n        }\n        BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n                am, _beanDesc.getClassAnnotations(), declaredType,\n                ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n\n        // How about custom null serializer?\n        Object serDef = _annotationIntrospector.findNullSerializer(am);\n        if (serDef != null) {\n            bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n        }\n        // And then, handling of unwrapping\n        NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n        if (unwrapper != null) {\n            bpw = bpw.unwrappingWriter(unwrapper);\n        }\n        return bpw;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}