{
    "generation": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n      // Get the JSType of the object literal node itself.\n      // This represents the type of the object being created.\n      // DisambiguateProperties operates on JSType, so T is JSType.\n      T objectLitType = (T) n.getJSType();\n\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Child node represents a property: STRING_KEY, GETTER_DEF, or SETTER_DEF.\n\n        // Get the property name. This is always safe for STRING_KEY, GET and SET.\n        String name = child.getString();\n\n        // Get the Property object associated with this name.\n        Property prop = getProperty(name);\n\n        // Process this property occurrence.\n        // Pass the type of the object literal (objectLitType) as the owner type.\n        // This aligns with handleGetProp/handleAssign which pass the type of the\n        // object on which the property is accessed/assigned.\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, objectLitType, null))) {\n          // Renaming failed due to invalidation. Report error if necessary.\n          if (propertiesToErrorFor.containsKey(name)) {\n            // For the error message, it might be helpful to know the type\n            // of the property value itself, as originally calculated.\n            T propertyValueType = typeSystem.getType(getScope(), n, name);\n\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                // Report the property value type in the message if available.\n                (propertyValueType == null ? \"null\" : propertyValueType.toString()),\n                // The owner is the object literal node.\n                n.toString(),\n                 \"\"));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}