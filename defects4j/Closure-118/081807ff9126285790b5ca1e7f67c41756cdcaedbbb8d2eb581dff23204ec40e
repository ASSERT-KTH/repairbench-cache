{
    "generation": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n      // In an object literal, children nodes alternate between property keys and property values.\n      // We are only interested in the property keys for disambiguation.\n      // The loop should iterate over the key nodes only, skipping the value nodes.\n      for (Node child = n.getFirstChild();\n          child != null;\n          // Advance by two nodes to get to the next property key.\n          // A key node is always followed by its value node in a valid OBJECTLIT structure.\n          child = child.getNext().getNext()) {\n        // The child node here represents a property key (e.g., STRING, GET, SET nodes).\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}