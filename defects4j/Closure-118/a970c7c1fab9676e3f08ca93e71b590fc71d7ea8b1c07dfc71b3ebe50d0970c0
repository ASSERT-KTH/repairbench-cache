{
    "generation": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n      // Treat non-quoted property names as \"originalName\" (unquoted) and quoted\n      // property names as computed properties, which are not to be disambiguated.\n      for (Node child = n.getFirstChild();\n           child != null;\n           child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        // Only process unquoted property names for renaming.\n        if (!child.isQuotedString()) {\n          String name = child.getString();\n          T type = typeSystem.getType(getScope(), n, name);\n\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child,\n                                     processProperty(t, prop, type, null))) {\n            // TODO(user): It doesn't look like the user can do much in this\n            // case right now.\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION, name,\n                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}