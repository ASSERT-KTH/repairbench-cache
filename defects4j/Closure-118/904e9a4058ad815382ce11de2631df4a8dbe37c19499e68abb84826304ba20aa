{
    "generation": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    String name;\n    // The property key can be a STRING, GET, or SET node.\n    if (child.isGet() || child.isSet()) {\n      name = child.getFirstChild().getString();\n    } else {\n      name = child.getString();\n    }\n\n    // Use the property node (child) rather than the whole object literal (n)\n    // when determining its type.\n    T type = typeSystem.getType(getScope(), child, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(),\n            child,\n            propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,\n            name,\n            (type == null ? \"null\" : type.toString()),\n            n.toString(),\n            \"\"));\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}