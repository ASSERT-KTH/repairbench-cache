{
    "generation": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child != null;\n      child = child.getNext()) {\n\n    // Check if the child is a property with bracket notation\n    if (child.getType() == Token.BRACKET) {\n      Node stringNode = child.getFirstChild();\n      String name = stringNode.getString();\n      T type = typeSystem.getType(getScope(), n, name);\n\n      Property prop = getProperty(name);\n      if (!prop.scheduleRenaming(stringNode,\n                                 processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(JSError.make(\n              t.getSourceName(), stringNode, propertiesToErrorFor.get(name),\n              Warnings.INVALIDATION, name,\n              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n        }\n      }\n    } else if (child.getType() == Token.NAME) {\n      // Handle dot notation\n      String name = child.getString();\n      T type = typeSystem.getType(getScope(), n, name);\n\n      Property prop = getProperty(name);\n      if (!prop.scheduleRenaming(child,\n                                 processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(JSError.make(\n              t.getSourceName(), child, propertiesToErrorFor.get(name),\n              Warnings.INVALIDATION, name,\n              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n        }\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}