{
    "generation": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n\n        // For string literal keys in object literals (e.g., {'a': 0}),\n        // the Node type is Token.STRING. The DisambiguateProperties pass\n        // sometimes relies on Node.getOriginalName() for property identification\n        // and disambiguation logic. By default, Node.getOriginalName() returns\n        // null for Token.STRING nodes. Setting it to the property name ensures\n        // these keys are treated consistently with unquoted NAME nodes (e.g., {a: 0})\n        // for disambiguation purposes. This helps in correctly tracking all\n        // occurrences of a property name regardless of its literal form in object\n        // literal definitions.\n        if (child.isString()) {\n            child.setOriginalName(name);\n        }\n\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}