{
    "generation": "/**\n * Processes a OBJECTLIT node.\n */\nprivate void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    // The property key can be defined as a plain string, a getter, or a setter.\n    // However, if the key was written with quotes, we must not schedule renaming.\n    String name;\n    if (child.isGetterDef() || child.isSetterDef()) {\n      // For getters/setters the key is stored as the first child.\n      Node key = child.getFirstChild();\n      if (key.isQuotedString()) {\n        continue;\n      }\n      name = key.getString();\n    } else {\n      if (child.isQuotedString()) {\n        continue;\n      }\n      name = child.getString();\n    }\n\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n      // TODO(user): Currently the only action is to report an error.\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}