{
    "generation": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n      // The JSType of the object literal itself, which is the receiver type for its properties.\n      // This is crucial for DisambiguateProperties to correctly identify the type\n      // on which these properties are defined.\n      T objectLitType = n.getJSType();\n\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Child can be a STRING_KEY, NUMBER_KEY, GETTER_DEF, or SETTER_DEF.\n        // For getters/setters, the actual property name is in their first child.\n        String name;\n        if (child.isGetterDef() || child.isSetterDef()) {\n          // For getter/setter definitions, the property name is the first child.\n          name = child.getFirstChild().getString();\n        } else {\n          // For string/number literal keys, the property name is the node's string value.\n          name = child.getString();\n        }\n\n        // We should never see a mix of numbers and strings. (This comment refers to the property names in a specific context)\n\n        // The original code passed 'type = typeSystem.getType(getScope(), n, name)'\n        // as the receiver type to processProperty. For OBJECTLIT, this would\n        // typically resolve to the type of the *value* of the property (e.g., NUMBER_TYPE for {a:0}),\n        // which is incorrect for disambiguation's receiver type.\n        // We need to pass the type of the object literal itself.\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, objectLitType, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (objectLitType == null ? \"null\" : objectLitType.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}