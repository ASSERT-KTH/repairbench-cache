{
    "generation": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Child node types can be:\n        // STRING_KEY: covers {a: 1}, {'a': 1}, {\"a\": 1}\n        // GETTER_DEF: covers {get a() {}}\n        // SETTER_DEF: covers {set a(v) {}}\n        // MEMBER_FUNCTION_DEF: covers {a() {}} (ES6 shorthand method)\n        // COMPUTED_PROP: covers {[a]: 1} (ES6 computed property)\n\n        // Properties defined with quoted keys (e.g., {'a': 1}) are not renamed.\n        // This aligns with the handling of property access using brackets (obj['a']).\n        // We check child.isStringKey() because isQuotedStringKey() is only meaningful for STRING_KEY.\n        // GETTER_DEF, SETTER_DEF, MEMBER_FUNCTION_DEF implicitly use unquoted names and are handled below.\n        // Computed properties are handled in handleComputedProperty().\n        if ((child.isStringKey() && child.isQuotedStringKey())\n            || child.isComputedProp()) {\n          continue;\n        }\n\n        // Get the property name. This works for STRING_KEY (unquoted), GETTER_DEF, SETTER_DEF, MEMBER_FUNCTION_DEF.\n        String name = child.getString();\n        // A property name should exist for the node types we handle here.\n        if (name == null) {\n          // Defensive check: skip if name is unexpectedly null.\n          continue;\n        }\n\n        // We should never see a mix of numbers and strings (referring to property keys).\n        // This comment might be slightly outdated or less relevant now.\n\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // Renaming invalidated for this property.\n          // Report error if this property was specifically marked for error reporting.\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}