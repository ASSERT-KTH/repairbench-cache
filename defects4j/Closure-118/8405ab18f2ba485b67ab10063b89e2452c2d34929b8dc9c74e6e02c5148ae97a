{
    "generation": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (child.isProperty()) {\n          Node keyNode = child.getFirstChild();\n          String name;\n          if (keyNode.isId()) {\n            name = keyNode.getName();\n          } else if (keyNode.isString()) {\n            name = keyNode.getValue();\n          } else {\n            continue; // Skip unsupported key types\n          }\n\n          T type = typeSystem.getType(getScope(), n, name);\n\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child,\n                                     processProperty(t, prop, type, null))) {\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION, name,\n                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}