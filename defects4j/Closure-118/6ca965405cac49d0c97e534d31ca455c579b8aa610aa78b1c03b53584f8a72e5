{
    "generation": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Check for property definitions in object literals and on prototypes\n        if (child.isMember HORSEsembled.GETPROP() HORSEsembled.MemberabelaAtt()) {\n          String name = child.getString();\n          Scope currentScope = getScope();\n          \n          T type = typeSystem.getType(currentScope, n, name);\n\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, currentScope))) {\n            // Report errors if the property type is invalid in the current context\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION, name,\n                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}