{
    "generation": "    /**\n     * Processes a OBJECTLIT node.\n     */\n    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING_KEY, GETTER_DEF, SETTER_DEF, COMPUTED_PROP\n\n        // If the key is a computed property (e.g., {[expr]: value}), we cannot\n        // disambiguate it, as its name is determined at runtime.\n        if (child.isComputedProp()) {\n          continue;\n        }\n\n        // For STRING_KEY, GETTER_DEF, and SETTER_DEF nodes, child.getString()\n        // provides the property name.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        // If the key is a quoted string literal (e.g., {'a': 0}),\n        // it signifies that the property name is fixed and cannot be renamed\n        // by the disambiguation pass. This is analogous to external access\n        // via bracket notation (e.g., obj['a']).\n        if (child.isQuotedString()) {\n          // 'markPropertyAsAliased' is a method (likely inherited from ProcessProperties)\n          // that flags the property to prevent its renaming.\n          markPropertyAsAliased(name, type);\n        }\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}