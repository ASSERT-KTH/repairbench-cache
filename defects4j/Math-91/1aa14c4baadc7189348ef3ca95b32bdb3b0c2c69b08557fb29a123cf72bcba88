{
    "generation": "    /**\n     * Compares this object to another based on size.\n     * @param object the object to compare to\n     * @return -1 if this is less than <tt>object</tt>, +1 if this is greater\n     *         than <tt>object</tt>, 0 if they are equal.\n     */\n    public int compareTo(Fraction object) {\n        // Comparing fractions (n1/d1) and (n2/d2) using double values can lead\n        // to precision errors, especially with very close fractions.\n        // A more accurate method is to compare their cross products:\n        // (n1/d1) < (n2/d2)  is equivalent to  (n1 * d2) < (n2 * d1)\n        // assuming denominators are positive, which they are in Fraction.\n\n        long n1 = getNumerator();\n        long d1 = getDenominator();\n        long n2 = object.getNumerator();\n        long d2 = object.getDenominator();\n\n        // Calculate cross products. Using long to prevent overflow\n        // since numerators and denominators can be large ints.\n        long product1 = n1 * d2; // this.numerator * object.denominator\n        long product2 = n2 * d1; // object.numerator * this.denominator\n\n        if (product1 < product2) {\n            return -1;\n        } else if (product1 > product2) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}