{
    "generation": "    public void collect(JSModule module, Scope scope, Node n) {\n      Node parent = n.getParent();\n\n      String name = null; // Initialize name to null\n      boolean isSet = false;\n      Name.Type type = Name.Type.OTHER;\n      boolean isPropAssign = false;\n\n      switch (n.getType()) {\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n        case Token.STRING_KEY:\n          // This may be a key in an object literal declaration.\n          // name = null; // Already null\n          if (parent != null && parent.isObjectLit()) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) {\n            return;\n          }\n          isSet = true;\n          switch (n.getType()) {\n            case Token.STRING_KEY:\n              // If the child is a computed property name, it doesn't have a static name.\n              if (!n.getFirstChild().isComputedProp()) {\n                type = getValueType(n.getFirstChild());\n              } else {\n                return; // Cannot determine name statically\n              }\n              break;\n            case Token.GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case Token.SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected:\" + n);\n          }\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n\n          // <<< FIX START >>>\n          // Don't process the NAME node if it's a declaration for a catch variable\n          // or a function parameter. These are local declarations defined by the scope creator.\n          if (parent != null && parent.isParamList()) {\n             Node grandparent = parent.getParent();\n             if (grandparent != null && (grandparent.isFunction() || grandparent.isCatch())) {\n                return; // Ignore parameter/catch variable NAME declarations\n             }\n          }\n          // <<< FIX END >>>\n\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                // If 'n' is the object part of a GETPROP (e.g., 'e' in e.name),\n                // let the GETPROP case handle the full 'e.name'.\n                // If 'n' is the property name part, it's not a variable reference.\n                // So, we ignore NAME nodes under GETPROP in this pass's NAME case.\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                // Ignore function expression names (they are local to the function)\n                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                  return;\n                }\n                // Otherwise, it's a function declaration name (potentially global)\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n                // Note: If parent.isParamList() was not handled by the fix above\n                // (e.g., different AST structure), it would fall here.\n                // A simple `get` of a parameter name is not a global reference.\n                // The check `isGlobalNameReference` *should* handle this correctly\n                // if scope analysis is right, but the explicit return above is safer.\n            }\n          }\n          // If we reached here, it's a potential reference or global declaration.\n          name = n.getString();\n          break; // Proceed to global check\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              // Removed case Token.GETPROP: return; (was in original buggy code, seemed wrong here)\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          // If none of the above 'set' cases match, isSet remains false (it's a 'get').\n          name = n.getQualifiedName();\n          if (name == null) {\n            return;\n          }\n          // Qualified names starting with 'this' are not global names.\n          if (name.startsWith(\"this.\")) {\n             return;\n          }\n          break; // Proceed to global check\n        default:\n          return; // Ignore other node types\n      }\n\n      // We must have a name at this point to proceed.\n      // The STRING_KEY, NAME, and GETPROP cases that don't return early should set name.\n      if (name == null) {\n        // This might happen for GETTER_DEF/SETTER_DEF if parent isn't OBJECTLIT,\n        // or computed string keys. Return safely.\n        return;\n      }\n\n      // We are only interested in global names.\n      if (!isGlobalNameReference(name, scope)) {\n        return;\n      }\n\n      // If we reach here, 'name' is potentially a global name reference or assignment.\n      if (isSet) {\n        if (isGlobalScope(scope)) {\n          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n        } else {\n          handleSetFromLocal(module, scope, n, parent, name);\n        }\n      } else {\n        handleGet(module, scope, n, parent, name);\n      }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}