{
    "generation": "/**\n * Draws the axis label.\n *\n * @param label  the label text.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @param dataArea  the area inside the axes.\n * @param edge  the location of the axis.\n * @param state  the axis state (<code>null</code> not permitted).\n * @param plotState  the plot state (<code>null</code> permitted).\n *\n * @return Information about the axis.\n */\n@Override\nprotected AxisState drawLabel(String label,\n                              Graphics2D g2,\n                              Rectangle2D plotArea,\n                              Rectangle2D dataArea,\n                              RectangleEdge edge,\n                              AxisState state,\n                              PlotRenderingInfo plotState) {\n\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n\n    // nothing to do if there is no label\n    if (label == null || label.length() == 0) {\n        return state;\n    }\n\n    // prepare to draw the label\n    Font font = getLabelFont();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    RectangleInsets insets = getLabelInsets();\n\n    // measure the (unrotated) string\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D bounds = TextUtilities.getTextBounds(label, g2, fm);\n    float w = (float) bounds.getWidth();\n    float h = (float) bounds.getHeight();\n\n    // common parameters\n    double angle = getLabelAngle();\n    TextAnchor anchor = TextAnchor.CENTER;\n    Shape hotspot = null;\n    float x, y;\n\n    // draw and update the cursor\n    if (edge == RectangleEdge.TOP) {\n        x = (float) dataArea.getCenterX();\n        y = (float) (state.getCursor() - insets.getBottom() - h / 2.0);\n        TextUtilities.drawRotatedString(\n                label, g2, x, y, anchor, angle, anchor\n        );\n        hotspot = new Rectangle2D.Float(\n                x - w / 2.0f, y - h / 2.0f, w, h\n        );\n        state.cursorUp(insets.getTop() + h + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        x = (float) dataArea.getCenterX();\n        y = (float) (state.getCursor() + insets.getTop() + h / 2.0);\n        TextUtilities.drawRotatedString(\n                label, g2, x, y, anchor, angle, anchor\n        );\n        hotspot = new Rectangle2D.Float(\n                x - w / 2.0f, y - h / 2.0f, w, h\n        );\n        state.cursorDown(insets.getTop() + h + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        // rotate text by -90\u00b0 around its centre\n        x = (float) (state.getCursor() - insets.getRight() - h / 2.0);\n        y = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(\n                label, g2, x, y, anchor, angle - Math.PI / 2.0, anchor\n        );\n        // note: width and height are swapped for the rotated text\n        hotspot = new Rectangle2D.Float(\n                x - h / 2.0f, y - w / 2.0f, h, w\n        );\n        state.cursorLeft(insets.getLeft() + h + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n        // rotate text by +90\u00b0 around its centre\n        x = (float) (state.getCursor() + insets.getLeft() + h / 2.0);\n        y = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(\n                label, g2, x, y, anchor, angle + Math.PI / 2.0, anchor\n        );\n        hotspot = new Rectangle2D.Float(\n                x - h / 2.0f, y - w / 2.0f, h, w\n        );\n        state.cursorRight(insets.getLeft() + h + insets.getRight());\n    }\n\n    // add an entity if we have a plotState and an entity-collection\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo chartInfo = plotState.getOwner();\n        if (chartInfo != null) {\n            EntityCollection entities = chartInfo.getEntityCollection();\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(\n                        this,\n                        hotspot,\n                        getLabelToolTip(),\n                        getLabelURL()\n                ));\n            }\n        }\n    }\n\n    return state;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}