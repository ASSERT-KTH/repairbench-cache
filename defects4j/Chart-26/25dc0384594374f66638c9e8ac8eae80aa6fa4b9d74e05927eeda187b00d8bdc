{
    "generation": "/**\n * Draws the axis label.\n *\n * @param label       the label text.\n * @param g2          the graphics device.\n * @param plotArea    the plot area.\n * @param dataArea    the area inside the axes.\n * @param edge        the location of the axis.\n * @param state       the axis state (<code>null</code> not permitted).\n * @param plotState   the plot state (<code>null</code> permitted).\n *\n * @return Information about the axis.\n */\n@Override\nprotected AxisState drawLabel(String label,\n                              Graphics2D g2,\n                              Rectangle2D plotArea,\n                              Rectangle2D dataArea,\n                              RectangleEdge edge,\n                              AxisState state,\n                              PlotRenderingInfo plotState) {\n\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if (label == null || label.length() == 0) {\n        // nothing to draw\n        return state;\n    }\n\n    // save the original graphics settings\n    Font originalFont = g2.getFont();\n    Paint originalPaint = g2.getPaint();\n\n    // set up for drawing the label\n    Font labelFont = getLabelFont();\n    g2.setFont(labelFont);\n    g2.setPaint(getLabelPaint());\n    RectangleInsets insets = getLabelInsets();\n\n    // measure the unrotated label\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D lb = TextUtilities.getTextBounds(label, g2, fm);\n    float w = (float) lb.getWidth();\n    float h = (float) lb.getHeight();\n\n    // compute the anchor point for the label\n    float x = 0f;\n    float y = 0f;\n    if (edge == RectangleEdge.TOP) {\n        x = (float) dataArea.getCenterX();\n        y = (float) (state.getCursor() - insets.getBottom() - h / 2f);\n        TextUtilities.drawRotatedString(\n                label, g2, x, y,\n                TextAnchor.CENTER,\n                getLabelAngle(),\n                TextAnchor.CENTER\n        );\n        state.cursorUp(insets.getTop() + h + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        x = (float) dataArea.getCenterX();\n        y = (float) (state.getCursor() + insets.getTop() + h / 2f);\n        TextUtilities.drawRotatedString(\n                label, g2, x, y,\n                TextAnchor.CENTER,\n                getLabelAngle(),\n                TextAnchor.CENTER\n        );\n        state.cursorDown(insets.getTop() + h + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        x = (float) (state.getCursor() - insets.getRight() - w / 2f);\n        y = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(\n                label, g2, x, y,\n                TextAnchor.CENTER,\n                getLabelAngle() - Math.PI / 2.0,\n                TextAnchor.CENTER\n        );\n        state.cursorLeft(insets.getLeft() + w + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n        x = (float) (state.getCursor() + insets.getLeft() + w / 2f);\n        y = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(\n                label, g2, x, y,\n                TextAnchor.CENTER,\n                getLabelAngle() + Math.PI / 2.0,\n                TextAnchor.CENTER\n        );\n        state.cursorRight(insets.getLeft() + w + insets.getRight());\n    }\n\n    // restore the original graphics settings\n    g2.setFont(originalFont);\n    g2.setPaint(originalPaint);\n\n    // add an entity for the axis label if requested\n    if (plotState != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        if (owner != null) {\n            EntityCollection entities = owner.getEntityCollection();\n            if (entities != null) {\n                Shape hotspot = new Rectangle2D.Float(\n                        x - w / 2f,\n                        y - h / 2f,\n                        w,\n                        h\n                );\n                entities.add(new AxisLabelEntity(\n                        this, hotspot,\n                        getLabelToolTip(),\n                        getLabelURL()\n                ));\n            }\n        }\n    }\n\n    return state;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}