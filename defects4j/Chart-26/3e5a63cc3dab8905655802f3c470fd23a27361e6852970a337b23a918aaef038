{
    "generation": "/**\n * Draws the axis label.\n *\n * @param label       the label text (possibly empty/null).\n * @param g2          the graphics device.\n * @param plotArea    the area within which the whole plot is drawn.\n * @param dataArea    the area within the axes.\n * @param edge        the edge of the plot for this axis.\n * @param state       collects information about the axis (never null).\n * @param plotState   collects information about the plot (possibly null).\n *\n * @return The updated AxisState.\n */\nprotected AxisState drawLabel(String label,\n                             Graphics2D g2,\n                             Rectangle2D plotArea,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge,\n                             AxisState state,\n                             PlotRenderingInfo plotState) {\n\n    // we expect a non-null state\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    // nothing to do if there's no label\n    if (label == null || label.length() == 0) {\n        return state;\n    }\n\n    // set up the font and paint\n    g2.setFont(getLabelFont());\n    g2.setPaint(getLabelPaint());\n\n    // measure the unrotated label\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D bounds = TextUtilities.getTextBounds(label, g2, fm);\n    double labelW = bounds.getWidth();\n    double labelH = bounds.getHeight();\n\n    // the insets around the label\n    RectangleInsets insets = getLabelInsets();\n\n    // common parameters\n    double angle = getLabelAngle();\n    double x = 0.0;\n    double y = 0.0;\n\n    // position and draw the label for each edge\n    if (edge == RectangleEdge.TOP) {\n        x = dataArea.getCenterX();\n        y = state.getCursor() - insets.getBottom() - (labelH / 2.0);\n        TextUtilities.drawRotatedString(\n            label, g2,\n            (float) x, (float) y,\n            TextAnchor.CENTER,\n            angle,\n            TextAnchor.CENTER\n        );\n        state.cursorUp(insets.getTop() + labelH + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        x = dataArea.getCenterX();\n        y = state.getCursor() + insets.getTop() + (labelH / 2.0);\n        TextUtilities.drawRotatedString(\n            label, g2,\n            (float) x, (float) y,\n            TextAnchor.CENTER,\n            angle,\n            TextAnchor.CENTER\n        );\n        state.cursorDown(insets.getTop() + labelH + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        x = state.getCursor() - insets.getRight() - (labelH / 2.0);\n        y = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(\n            label, g2,\n            (float) x, (float) y,\n            TextAnchor.CENTER,\n            angle - Math.PI / 2.0,\n            TextAnchor.CENTER\n        );\n        state.cursorLeft(insets.getLeft() + labelH + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n        x = state.getCursor() + insets.getLeft() + (labelH / 2.0);\n        y = dataArea.getCenterY();\n        TextUtilities.drawRotatedString(\n            label, g2,\n            (float) x, (float) y,\n            TextAnchor.CENTER,\n            angle + Math.PI / 2.0,\n            TextAnchor.CENTER\n        );\n        state.cursorRight(insets.getLeft() + labelH + insets.getRight());\n    }\n\n    // add an entity for interactivity (if requested)\n    if (plotState != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        if (owner != null) {\n            EntityCollection entities = owner.getEntityCollection();\n            if (entities != null) {\n                // compute the hotspot correctly for the rotated label\n                Rectangle2D hotspot = TextUtilities.calculateRotatedStringBounds(\n                    label, g2,\n                    (float) x, (float) y,\n                    TextAnchor.CENTER,\n                    angle,\n                    TextAnchor.CENTER\n                );\n                entities.add(new AxisLabelEntity(\n                    this, hotspot,\n                    getLabelToolTip(), getLabelURL()\n                ));\n            }\n        }\n    }\n\n    return state;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}