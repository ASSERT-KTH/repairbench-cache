{
    "generation": "/**\n * Draws the axis label.\n *\n * @param label      the label text.\n * @param g2         the graphics device.\n * @param plotArea   the plot area.\n * @param dataArea   the area inside the axes.\n * @param edge       the location of the axis.\n * @param state      the axis state (<code>null</code> not permitted).\n * @param plotState  the plot state (<code>null</code> permitted).\n *\n * @return Information about the axis.\n */\nprotected AxisState drawLabel(String label,\n                              Graphics2D g2,\n                              Rectangle2D plotArea,\n                              Rectangle2D dataArea,\n                              RectangleEdge edge,\n                              AxisState state,\n                              PlotRenderingInfo plotState) {\n\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n\n    // nothing to do if no label\n    if (label == null || label.length() == 0) {\n        return state;\n    }\n\n    // set up font and paint\n    g2.setFont(getLabelFont());\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n\n    // measure the label\n    RectangleInsets insets = getLabelInsets();\n    Rectangle2D rawBounds = TextUtilities.getTextBounds(label, g2, fm);\n\n    Shape hotspot = null;\n    double angle = getLabelAngle();\n    float w, h, x, y;\n\n    if (edge == RectangleEdge.TOP) {\n        // rotate the bounding box so we get the right width/height\n        AffineTransform rot = AffineTransform.getRotateInstance(\n                angle,\n                rawBounds.getCenterX(),\n                rawBounds.getCenterY()\n        );\n        Rectangle2D bounds = rot\n                .createTransformedShape(rawBounds)\n                .getBounds2D();\n        w = (float) bounds.getWidth();\n        h = (float) bounds.getHeight();\n\n        x = (float) dataArea.getCenterX();\n        y = (float) (state.getCursor()\n                - insets.getBottom()\n                - h / 2.0);\n\n        TextUtilities.drawRotatedString(\n                label, g2, x, y,\n                TextAnchor.CENTER,\n                angle,\n                TextAnchor.CENTER\n        );\n        hotspot = new Rectangle2D.Float(\n                x - w / 2.0f,\n                y - h / 2.0f,\n                w, h\n        );\n        state.cursorUp(insets.getTop() + h + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform rot = AffineTransform.getRotateInstance(\n                angle,\n                rawBounds.getCenterX(),\n                rawBounds.getCenterY()\n        );\n        Rectangle2D bounds = rot\n                .createTransformedShape(rawBounds)\n                .getBounds2D();\n        w = (float) bounds.getWidth();\n        h = (float) bounds.getHeight();\n\n        x = (float) dataArea.getCenterX();\n        y = (float) (state.getCursor()\n                + insets.getTop()\n                + h / 2.0);\n\n        TextUtilities.drawRotatedString(\n                label, g2, x, y,\n                TextAnchor.CENTER,\n                angle,\n                TextAnchor.CENTER\n        );\n        hotspot = new Rectangle2D.Float(\n                x - w / 2.0f,\n                y - h / 2.0f,\n                w, h\n        );\n        state.cursorDown(insets.getTop() + h + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        double theta = angle - Math.PI / 2.0;\n        AffineTransform rot = AffineTransform.getRotateInstance(\n                theta,\n                rawBounds.getCenterX(),\n                rawBounds.getCenterY()\n        );\n        Rectangle2D bounds = rot\n                .createTransformedShape(rawBounds)\n                .getBounds2D();\n        w = (float) bounds.getWidth();\n        h = (float) bounds.getHeight();\n\n        x = (float) (state.getCursor()\n                - insets.getRight()\n                - w / 2.0);\n        y = (float) dataArea.getCenterY();\n\n        TextUtilities.drawRotatedString(\n                label, g2, x, y,\n                TextAnchor.CENTER,\n                theta,\n                TextAnchor.CENTER\n        );\n        hotspot = new Rectangle2D.Float(\n                x - w / 2.0f,\n                y - h / 2.0f,\n                w, h\n        );\n        state.cursorLeft(insets.getLeft() + w + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n        double theta = angle + Math.PI / 2.0;\n        AffineTransform rot = AffineTransform.getRotateInstance(\n                theta,\n                rawBounds.getCenterX(),\n                rawBounds.getCenterY()\n        );\n        Rectangle2D bounds = rot\n                .createTransformedShape(rawBounds)\n                .getBounds2D();\n        w = (float) bounds.getWidth();\n        h = (float) bounds.getHeight();\n\n        x = (float) (state.getCursor()\n                + insets.getLeft()\n                + w / 2.0);\n        y = (float) dataArea.getCenterY();\n\n        TextUtilities.drawRotatedString(\n                label, g2, x, y,\n                TextAnchor.CENTER,\n                theta,\n                TextAnchor.CENTER\n        );\n        hotspot = new Rectangle2D.Float(\n                x - w / 2.0f,\n                y - h / 2.0f,\n                w, h\n        );\n        state.cursorRight(insets.getLeft() + w + insets.getRight());\n    }\n\n    // record an entity for the label if we have an info collection\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo info = plotState.getOwner();\n        if (info != null) {\n            EntityCollection entities = info.getEntityCollection();\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(\n                        this, hotspot,\n                        getLabelToolTip(),\n                        getLabelURL()\n                ));\n            }\n        }\n    }\n\n    return state;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}