{
    "generation": "/**\n * Draws the axis label.\n *\n * @param label       the label text.\n * @param g2          the graphics device.\n * @param plotArea    the plot area.\n * @param dataArea    the area inside the axes.\n * @param edge        the location of the axis.\n * @param state       the axis state (<code>null</code> not permitted).\n * @param plotState   the plot state (<code>null</code> permitted).\n *\n * @return Information about the axis.\n */\nprotected AxisState drawLabel(String label,\n                              Graphics2D g2,\n                              Rectangle2D plotArea,\n                              Rectangle2D dataArea,\n                              RectangleEdge edge,\n                              AxisState state,\n                              PlotRenderingInfo plotState) {\n\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n\n    if ((label == null) || (label.length() == 0)) {\n        return state;\n    }\n\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(),\n                labelBounds.getCenterX(),\n                labelBounds.getCenterY()\n        );\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor()\n                - insets.getBottom()\n                - h / 2.0);\n        TextUtilities.drawRotatedString(\n                label, g2,\n                labelx, labely,\n                TextAnchor.CENTER,\n                getLabelAngle(),\n                TextAnchor.CENTER\n        );\n        hotspot = new Rectangle2D.Float(\n                labelx - w / 2.0f,\n                labely - h / 2.0f,\n                w, h\n        );\n        state.cursorUp(\n                insets.getTop()\n                        + labelBounds.getHeight()\n                        + insets.getBottom()\n        );\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(),\n                labelBounds.getCenterX(),\n                labelBounds.getCenterY()\n        );\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor()\n                + insets.getTop()\n                + h / 2.0);\n        TextUtilities.drawRotatedString(\n                label, g2,\n                labelx, labely,\n                TextAnchor.CENTER,\n                getLabelAngle(),\n                TextAnchor.CENTER\n        );\n        hotspot = new Rectangle2D.Float(\n                labelx - w / 2.0f,\n                labely - h / 2.0f,\n                w, h\n        );\n        state.cursorDown(\n                insets.getTop()\n                        + labelBounds.getHeight()\n                        + insets.getBottom()\n        );\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() - Math.PI / 2.0,\n                labelBounds.getCenterX(),\n                labelBounds.getCenterY()\n        );\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor()\n                - insets.getRight()\n                - w / 2.0);\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(\n                label, g2,\n                labelx, labely,\n                TextAnchor.CENTER,\n                getLabelAngle() - Math.PI / 2.0,\n                TextAnchor.CENTER\n        );\n        hotspot = new Rectangle2D.Float(\n                labelx - w / 2.0f,\n                labely - h / 2.0f,\n                w, h\n        );\n        state.cursorLeft(\n                insets.getLeft()\n                        + labelBounds.getWidth()\n                        + insets.getRight()\n        );\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() + Math.PI / 2.0,\n                labelBounds.getCenterX(),\n                labelBounds.getCenterY()\n        );\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor()\n                + insets.getLeft()\n                + w / 2.0);\n        float labely = (float) (dataArea.getY()\n                + dataArea.getHeight() / 2.0);\n        TextUtilities.drawRotatedString(\n                label, g2,\n                labelx, labely,\n                TextAnchor.CENTER,\n                getLabelAngle() + Math.PI / 2.0,\n                TextAnchor.CENTER\n        );\n        hotspot = new Rectangle2D.Float(\n                labelx - w / 2.0f,\n                labely - h / 2.0f,\n                w, h\n        );\n        state.cursorRight(\n                insets.getLeft()\n                        + labelBounds.getWidth()\n                        + insets.getRight()\n        );\n    }\n\n    // add an entity if requested (and safe to do so)\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        if (owner != null) {\n            EntityCollection entities = owner.getEntityCollection();\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(\n                        this, hotspot,\n                        this.labelToolTip,\n                        this.labelURL\n                ));\n            }\n        }\n    }\n\n    return state;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}