{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n\n    // Compute defaultYear from instantLocal, but if the instantLocal is\n    // a date at December 31 or January 1, adjust to the instant's calendar year.\n    int currentYear = chrono.year().get(instantLocal);\n    int defaultYear = currentYear;\n    try {\n        // Handle cases where date may be end or start of year for leap day defaults\n        DateTimeField monthField = chrono.monthOfYear();\n        DateTimeField dayField = chrono.dayOfMonth();\n        int month = monthField.get(instantLocal);\n        int day = dayField.get(instantLocal);\n        // If the instantLocal is in December or January, prefer the calendar year\n        if ((month == 12 && day >= 28) || (month == 1 && day <= 3)) {\n            defaultYear = chrono.year().get(instantLocal);\n        }\n    } catch (Exception e) {\n        // ignore, fall back on currentYear\n    }\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    try {\n        instant.setMillis(bucket.computeMillis(false, text));\n    } catch (IllegalFieldValueException e) {\n        // Retry parse using the original instant's year as defaultYear if different from calculated defaultYear\n        if (defaultYear != currentYear) {\n            DateTimeParserBucket bucket2 = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear, currentYear);\n            int reparsePos = parser.parseInto(bucket2, text, position);\n            if (reparsePos == newPos) {  // only if parse matched fully again\n                instant.setMillis(bucket2.computeMillis(false, text));\n            } else {\n                throw e;\n            }\n        } else {\n            throw e;\n        }\n    }\n    \n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}