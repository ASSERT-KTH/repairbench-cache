{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    // Extract original instant millis and chronology\n    long instantMillis = instant.getMillis();\n    Chronology originalChrono = instant.getChronology();\n\n    // Determine default year from the supplied instant (using its own chronology and zone)\n    int defaultYear = originalChrono.year().get(instantMillis);\n\n    // Now select the chronology to use for parsing (may incorporate formatter\u2019s overrides)\n    Chronology chrono = selectChronology(originalChrono);\n\n    // Compute local\u2010millis for bucket according to the parsing chronology\u2019s time\u2010zone\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n\n    // Create the bucket with the correct default year\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n\n    // Perform the parse\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Compute the resulting millis and update the instant\n    instant.setMillis(bucket.computeMillis(false, text));\n\n    // Handle any parsed offset or zone\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n\n    // Apply formatter\u2019s override zone if present\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}