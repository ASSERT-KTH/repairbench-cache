{
    "generation": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        if (newPos >= 0) {\n            long newMillis = bucket.computeMillis(false, text);\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n            if (iZone != null) {\n                chrono = chrono.withZone(iZone);\n            }\n            // Create a new Partial with the parsed fields\n            Partial parsedPartial = new Partial(chrono);\n            for (FieldType type : bucket.getSavedFields()) {\n                DateTimeField field = chrono.getDateTimeField(type);\n                parsedPartial = parsedPartial.with(field.getType(), bucket.getSavedFieldIntoBucket(field.getType()));\n            }\n            // Resolve the fields with the current chronology\n            LocalInstant resolved = resolvedLocalInstant(chrono, parsedPartial.getValues(), parsedPartial.getTypes());\n            if (resolved != null) {\n                newMillis = chrono.getZone().getMillis(resolved.getLocalMillis(), resolved.getChronology());\n            }\n            instant.setMillis(newMillis);\n            instant.setChronology(chrono);\n        }\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}