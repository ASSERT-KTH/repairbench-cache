{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n\n    // Determine correct defaultYear based on formatter pattern (year at start/end)\n    int defaultYear = chrono.year().get(instantLocal);\n    boolean parsesMonthDayWithoutYear = false;\n    if (parser instanceof InternalParser) {\n        // crude way to figure out if formatter pattern is month-day only (without year)\n        // to avoid error for leap day parsing on leap year\n        String pattern = this.toString();\n        if ((pattern.contains(\"M\") || pattern.contains(\"L\")) && pattern.contains(\"d\") && !pattern.contains(\"y\")) {\n            parsesMonthDayWithoutYear = true;\n        }\n    }\n    if (parsesMonthDayWithoutYear) {\n        // If we are only parsing month and day (i.e., \"M d\" etc) and not year,\n        // we should use the year from the supplied instant, preserving leap years.\n        defaultYear = chrono.year().get(instantLocal);\n    }\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // In case of parsing month-day without explicit year, set year prior to computeMillis\n    if (parsesMonthDayWithoutYear && !bucket.getSavedFields().isEmpty()) {\n        boolean hasYearField = false;\n        for (DateTimeParserBucket.SavedField sf : bucket.getSavedFields()) {\n            if (sf.getField().getType() == org.joda.time.DateTimeFieldType.year()) {\n                hasYearField = true;\n                break;\n            }\n        }\n        if (!hasYearField) {\n            // explicitly save the year in bucket\n            bucket.saveField(org.joda.time.DateTimeFieldType.year(), defaultYear);\n        }\n    }\n\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}