{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    // Use local millis (with offset) for extracting default year\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n\n    // Determine default year based on input text:\n    int defaultYear;\n    if (parser.isParser() && parser.isFieldSet(DateTimeFieldType.monthOfYear())\n            && parser.isFieldSet(DateTimeFieldType.dayOfMonth())\n            && !parser.isFieldSet(DateTimeFieldType.year())) {\n        // If parsing month and day, but not year, use the year from the instant\n        defaultYear = chrono.year().get(instantLocal);\n    } else {\n        // Usual behaviour:\n        defaultYear = chrono.year().get(instantLocal);\n    }\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // This fixes bug for leap years:\n    // If the text only supplies month and day, and defaultYear is not a leap year and date is 2/29,\n    // but the instant's year is a leap year, we want that year for 2/29,\n    // so the defaultYear must match the instant's year.\n\n    // The above, though, is already accomplished by using instant's year as defaultYear.\n    // The real bug is that the supplied instant's millis may not be retained for fields not present in parse.\n    // Actually, DateTimeParserBucket.computeMillis handles this.\n\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}