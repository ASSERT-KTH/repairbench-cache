{
    "generation": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology originalChrono = instant.getChronology();\n        Chronology selectedChrono = selectChronology(originalChrono);\n        \n        long instantLocal = instantMillis + selectedChrono.getZone().getOffset(instantMillis);\n        int defaultYear = selectedChrono.year().get(instantLocal);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, selectedChrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            selectedChrono = selectedChrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            selectedChrono = selectedChrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(selectedChrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}