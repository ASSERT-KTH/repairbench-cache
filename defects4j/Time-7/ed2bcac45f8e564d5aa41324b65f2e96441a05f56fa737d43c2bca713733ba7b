{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Compute millis, possibly throwing if invalid\n    long parsedMillis;\n    try {\n        parsedMillis = bucket.computeMillis(false, text);\n    } catch (IllegalFieldValueException ex) {\n        // Special case: if only month/day are parsed but currentYear is not leap,\n        // retry parseMillis with leap year as defaultYear.\n        Integer newDefaultYear = null;\n\n        // Use 2004 as known leap year\n        if (defaultYear != 2004) {\n            newDefaultYear = 2004;\n        }\n\n        if (newDefaultYear != null) {\n            // re-parse with leap year to avoid failure\n            DateTimeParserBucket retryBucket = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear, newDefaultYear);\n            int retryPos = parser.parseInto(retryBucket, text, position);\n            if (retryPos == newPos) {\n                // successfully re-parsed the same length, commit\n                bucket = retryBucket;\n                newPos = retryPos;\n                parsedMillis = bucket.computeMillis(false, text);\n            } else {\n                // fallback to original error\n                throw ex;\n            }\n        } else {\n            throw ex;\n        }\n    }\n\n    instant.setMillis(parsedMillis);\n\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}