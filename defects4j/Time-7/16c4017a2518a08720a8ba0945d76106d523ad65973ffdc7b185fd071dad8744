{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    // First apply any formatter\u2010level chronology override\n    Chronology chrono = selectChronology(instant.getChronology());\n    // Compute the default year from the true local\u2010time of the instant\n    // (chronology.year().get(instantMillis) applies the zone offset once)\n    int defaultYear = chrono.year().get(instantMillis);\n    // Compute the local\u2010millis for the bucket\n    long instantLocal = chrono.getZone().convertUTCToLocal(instantMillis);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Update the instant using the parsed fields\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        chrono = chrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}