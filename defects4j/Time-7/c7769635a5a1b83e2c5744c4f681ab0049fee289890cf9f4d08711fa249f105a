{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    // Use the selected chronology (including any overrides)\n    Chronology chrono = selectChronology(instant.getChronology());\n    // Convert the UTC millis to local millis in that chronology\n    long instantLocal = chrono.getZone().convertUTCToLocal(instant.getMillis());\n    // Determine the default year from the local millis\n    int defaultYear = chrono.year().get(instantLocal);\n\n    // Build the parser bucket with local millis and default year\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n\n    // Parse the fields into the bucket\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Compute the result millis (UTC) and set it\n    instant.setMillis(bucket.computeMillis(false, text));\n\n    // Adjust chronology for any parsed offset or zone\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n\n    // Apply chronology (and any forced zone override) to the instant\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}