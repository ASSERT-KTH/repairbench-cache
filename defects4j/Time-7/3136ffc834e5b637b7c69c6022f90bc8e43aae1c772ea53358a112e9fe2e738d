{
    "generation": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        \n        // Check if year wasn't parsed and we need to validate month/day\n        if (bucket.getSavedFieldsCount() == 2 && \n            bucket.getSavedField(0).getField().equals(chrono.monthOfYear()) && \n            bucket.getSavedField(1).getField().equals(chrono.dayOfMonth())) {\n            // Only month and day were parsed - need to ensure valid combination\n            int month = bucket.getSavedField(0).getValue();\n            int day = bucket.getSavedField(1).getValue();\n            if (month == 2 && day == 29 && !chrono.year().isLeap(defaultYear)) {\n                // If Feb 29 is invalid for default year, try adjusting year\n                defaultYear = chrono.year().add(defaultYear, 1);\n                // Create new bucket with adjusted year\n                bucket = new DateTimeParserBucket(\n                    instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n                newPos = parser.parseInto(bucket, text, position);\n            }\n        }\n        \n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}