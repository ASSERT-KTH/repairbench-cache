{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    // If formatter only contains month or day but not year, update defaultYear from the instant's chronology\n    if (parser instanceof DateTimeFormatterInternalParser) {\n        DateTimeFormatterInternalParser internalParser = (DateTimeFormatterInternalParser) parser;\n        if (!internalParser.isParser() || internalParser.isPrinterParser()) {\n            // can't detect if year field exists; proceed with existing defaultYear\n        } else {\n            // unknown parser type\n        }\n    }\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos;\n    try {\n        newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n    } catch (IllegalFieldValueException e) {\n        // If parse fails due to illegal day-of-month (like Feb 29 on non-leap year)\n        // retry parse with instant's current year, which may be in leap year\n        if (bucket.getDefaultYear() != defaultYear) {\n            throw e;\n        }\n        int leapYear = chrono.year().get(instantLocal);\n        if (leapYear != defaultYear) {\n            DateTimeParserBucket retryBucket = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear, leapYear);\n            newPos = parser.parseInto(retryBucket, text, position);\n            instant.setMillis(retryBucket.computeMillis(false, text));\n            bucket = retryBucket;\n        } else {\n            throw e;\n        }\n    }\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}