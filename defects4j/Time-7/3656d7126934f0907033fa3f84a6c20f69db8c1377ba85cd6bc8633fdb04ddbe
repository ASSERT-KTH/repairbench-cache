{
    "generation": "    /**\n     * Parses a datetime from the given text, at the given position, saving the\n     * result into the fields of the given ReadWritableInstant. If the parse\n     * succeeds, the return value is the new text position. Note that the parse\n     * may succeed without fully reading the text and in this case those fields\n     * that were read will be set.\n     * <p>\n     * Only those fields present in the string will be changed in the specified\n     * instant. All other fields will remain unaltered. Thus if the string only\n     * contains a year and a month, then the day and time will be retained from\n     * the input instant. If this is not the behaviour you want, then reset the\n     * fields before calling this method, or use {@link #parseDateTime(String)}\n     * or {@link #parseMutableDateTime(String)}.\n     * <p>\n     * If it fails, the return value is negative, but the instant may still be\n     * modified. To determine the position where the parse failed, apply the\n     * one's complement operator (~) on the return value.\n     * <p>\n     * This parse method ignores the {@link #getDefaultYear() default year} and\n     * parses using the year from the supplied instant based on the chronology\n     * and time-zone of the supplied instant.\n     * <p>\n     * The parse will use the chronology of the instant.\n     *\n     * @param instant  an instant that will be modified, not null\n     * @param text  the text to parse\n     * @param position  position to start parsing from\n     * @return new position, negative value means parse failed -\n     *  apply complement operator (~) to get position of failure\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the instant is null\n     * @throws IllegalArgumentException if any field is out of range\n     */\n    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        // Get initial state from the instant\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n\n        // Calculate default year using the original instant's local time,\n        // using the original instant's chronology and zone.\n        // We calculate the local millis first to correctly determine the year\n        // in the instant's specific time zone.\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        int defaultYear = chrono.year().get(instantLocal); // Use local millis to get local year\n\n        // Select the chronology to use for parsing (might differ from instant's chrono\n        // due to withChronology call on the formatter).\n        Chronology parseChrono = selectChronology(chrono);\n\n        // Create the bucket using UTC millis and the parsing chronology.\n        // The bucket constructor expects the initial instant in UTC millis.\n        // Pass the original UTC instantMillis, not the calculated instantLocal.\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, parseChrono, iLocale, iPivotYear, defaultYear);\n\n        // Parse the text into the bucket. parser.parseInto populates the bucket.\n        int newPos = parser.parseInto(bucket, text, position);\n\n        // Compute the new millis by merging the parsed fields onto the initial instant.\n        // bucket.computeMillis(false, ...) performs the merge.\n        // This might throw IllegalFieldValueException if validation fails after merge.\n        long newMillis = bucket.computeMillis(false, text);\n\n        // Update the instant's millisecond value.\n        instant.setMillis(newMillis);\n\n        // Determine the final chronology based on parsed zone/offset.\n        // Start with the chronology used for parsing.\n        Chronology resultChrono = parseChrono;\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            // If offset was parsed, create a zone with that offset and update the chrono.\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            resultChrono = resultChrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            // If zone was parsed, use that zone to update the chrono.\n            resultChrono = resultChrono.withZone(bucket.getZone());\n        }\n\n        // Update the instant's chronology.\n        instant.setChronology(resultChrono);\n\n        // Apply the formatter's specific zone override if it was set (via withZone).\n        // This overrides any zone/offset determined during parsing.\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n\n        // Return the new position index from the parser.\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}