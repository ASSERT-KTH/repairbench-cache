{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    // Save existing fields so they can be restored if parsing fails\n    int savedYear = instant.getYear();\n    int savedMonth = instant.getMonth();\n    int savedDay = instant.getDay();\n    int savedHour = instant.getHour();\n    int savedMinute = instant.getMinute();\n    int savedSecond = instant.getSecond();\n    int savedMillis = instant.getMillis();\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    if (newPos >= 0) {\n        // Only modify fields that are actually parsed\n        if (bucket.getYear() != null) {\n            instant.setYear(bucket.getYear());\n        }\n        if (bucket.getMonth() != null) {\n            instant.setMonth(bucket.getMonth());\n        }\n        if (bucket.getDay() != null) {\n            instant.setDay(bucket.getDay());\n        }\n        if (bucket.getHour() != null) {\n            instant.setHour(bucket.getHour());\n        }\n        if (bucket.getMinute() != null) {\n            instant.setMinute(bucket.getMinute());\n        }\n        if (bucket.getSecond() != null) {\n            instant.setSecond(bucket.getSecond());\n        }\n        if (bucket.getMillis() != null) {\n            instant.setMillis(bucket.computeMillis(false, text));\n        }\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    } else {\n        // Restore saved fields if parsing failed\n        instant.setYear(savedYear);\n        instant.setMonth(savedMonth);\n        instant.setDay(savedDay);\n        instant.setHour(savedHour);\n        instant.setMinute(savedMinute);\n        instant.setSecond(savedSecond);\n        instant.setMillis(savedMillis);\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}