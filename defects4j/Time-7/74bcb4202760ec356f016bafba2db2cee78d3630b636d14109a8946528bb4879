{
    "generation": "    /**\n     * Parses a datetime from the given text, at the given position, saving the\n     * result into the fields of the given ReadWritableInstant. If the parse\n     * succeeds, the return value is the new text position. Note that the parse\n     * may succeed without fully reading the text and in this case those fields\n     * that were read will be set.\n     * <p>\n     * Only those fields present in the string will be changed in the specified\n     * instant. All other fields will remain unaltered. Thus if the string only\n     * contains a year and a month, then the day and time will be retained from\n     * the input instant. If this is not the behaviour you want, then reset the\n     * fields before calling this method, or use {@link #parseDateTime(String)}\n     * or {@link #parseMutableDateTime(String)}.\n     * <p>\n     * If it fails, the return value is negative, but the instant may still be\n     * modified. To determine the position where the parse failed, apply the\n     * one's complement operator (~) on the return value.\n     * <p>\n     * This parse method ignores the {@link #getDefaultYear() default year} and\n     * parses using the year from the supplied instant based on the chronology\n     * and time-zone of the supplied instant.\n     * <p>\n     * The parse will use the chronology of the instant.\n     *\n     * @param instant  an instant that will be modified, not null\n     * @param text  the text to parse\n     * @param position  position to start parsing from\n     * @return new position, negative value means parse failed -\n     *  apply complement operator (~) to get position of failure\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the instant is null\n     * @throws IllegalArgumentException if any field is out of range\n     */\n    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        chrono = selectChronology(chrono);\n\n        // Extract all fields from the original instant to preserve them.\n        // This is crucial for parseInto's contract which preserves unparsed fields.\n        int defaultYearForBucket = chrono.year().get(instantMillis);\n        int defaultMonthForBucket = chrono.monthOfYear().get(instantMillis);\n        int defaultDayForBucket = chrono.dayOfMonth().get(instantMillis);\n        int defaultHourForBucket = chrono.hourOfDay().get(instantMillis);\n        int defaultMinuteForBucket = chrono.minuteOfHour().get(instantMillis);\n        int defaultSecondForBucket = chrono.secondOfMinute().get(instantMillis);\n        int defaultMillisForBucket = chrono.millisOfSecond().get(instantMillis);\n        \n        // Create the bucket using 0L for instantLocal. This forces the bucket to use\n        // the 'defaultYearForBucket' parameter for the year if not parsed from the text.\n        // This addresses the leap year bug where instantLocal was not correctly informing\n        // the chronology about the leap year status when month/day were updated.\n        DateTimeParserBucket bucket = new DateTimeParserBucket(0L, chrono, iLocale, iPivotYear, defaultYearForBucket);\n\n        // Manually set all the original fields into the bucket.\n        // Fields parsed from the text will then overwrite these defaults.\n        bucket.set(chrono.monthOfYear(), defaultMonthForBucket);\n        bucket.set(chrono.dayOfMonth(), defaultDayForBucket);\n        // Note: Year is handled by defaultYearForBucket if not parsed.\n        bucket.set(chrono.hourOfDay(), defaultHourForBucket);\n        bucket.set(chrono.minuteOfHour(), defaultMinuteForBucket);\n        bucket.set(chrono.secondOfMinute(), defaultSecondForBucket);\n        bucket.set(chrono.millisOfSecond(), defaultMillisForBucket);\n        \n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}