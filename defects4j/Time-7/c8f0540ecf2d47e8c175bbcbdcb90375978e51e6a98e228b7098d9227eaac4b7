{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    // Capture the UTC millis of the input instant\n    long instantMillis = instant.getMillis();\n    // Select the chronology (possibly overridden by the formatter)\n    Chronology chrono = selectChronology(instant.getChronology());\n    // Compute the default year in that chronology from the UTC instant\n    int defaultYear = chrono.year().get(instantMillis);\n    // Convert UTC millis to local millis for the bucket\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n\n    // Create the bucket with the properly computed default year and local base instant\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n\n    // Parse into the bucket\n    int newPos = parser.parseInto(bucket, text, position);\n    // Compute the resulting instant (may throw if invalid)\n    instant.setMillis(bucket.computeMillis(false, text));\n\n    // If an offset or zone was parsed, adjust the chronology\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    // Apply the chronology (and possibly override with the formatter's zone)\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}