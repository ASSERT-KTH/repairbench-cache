{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    // Use the chronology already attached to the instant, and select the proper one.\n    Chronology chrono = selectChronology(instant.getChronology());\n    // Get the default year directly from the instant's millis.\n    int defaultYear = chrono.year().get(instantMillis);\n    \n    // Create the bucket using the instant's millis as the base.\n    DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // Compute the new millis from the bucket. This applies any parsed fields.\n    instant.setMillis(bucket.computeMillis(false, text));\n    \n    // If an offset was parsed, update the chronology's zone.\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    \n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}