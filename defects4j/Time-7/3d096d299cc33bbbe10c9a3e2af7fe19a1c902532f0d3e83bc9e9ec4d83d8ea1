{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    // Use instantMillis in UTC to get the correct local values, as MutableDateTime is always in local time of its own zone\n    Chronology chronoUTC = chrono.withUTC();\n    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n\n    // Determine correct default year: use the year from the instant in the proper chronology in its time zone\n    int defaultYear = chrono.year().get(instantMillis);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Only set the millis if parsing succeeded up to at least some position\n    if (newPos >= 0) {\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    } else {\n        // Even when parse failed, millis may be set (depends on parsing).\n        instant.setMillis(bucket.computeMillis(false, text));\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}