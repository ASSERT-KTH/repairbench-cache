{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Check if the parsed date is February 29th of a leap year\n    if (bucket.getMonthOfYear() == 2 && bucket.getDayOfMonth() == 29) {\n        int parsedYear = bucket.getYear();\n        if (parsedYear % 4 == 0 && (parsedYear % 100 != 0 || parsedYear % 400 == 0)) {\n            // It's a leap year, so February 29th is valid\n            instant.setMillis(bucket.computeMillis(false, text));\n        } else {\n            // It's not a leap year, so February 29th is invalid\n            throw new IllegalFieldValueException(\"Cannot parse \" + text + \": Value 29 for dayOfMonth must be in the range [1,28]\");\n        }\n    } else {\n        instant.setMillis(bucket.computeMillis(false, text));\n    }\n\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}