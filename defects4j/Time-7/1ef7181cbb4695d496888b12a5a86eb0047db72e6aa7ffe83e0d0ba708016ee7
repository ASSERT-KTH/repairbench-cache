{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n\n    // Determine a default year that is leap if day/month parsing is ambiguous.\n    int defaultYear;\n    if (parser instanceof DateTimeParserInternal && ((DateTimeParserInternal)parser).isMonthDayOnly()) {\n        // Try to find a leap year near the current year.\n        int year = chrono.year().get(instantLocal);\n        if (!chrono.year().isLeap(year)) {\n            if (chrono.year().isLeap(year + 1)) {\n                year = year + 1;\n            } else if (chrono.year().isLeap(year - 1)) {\n                year = year - 1;\n            } else {\n                // fallback: find a nearby leap year (within 4 years)\n                for (int off = 2; off <= 4; off++) {\n                    if (chrono.year().isLeap(year + off)) {\n                        year = year + off;\n                        break;\n                    }\n                    if (chrono.year().isLeap(year - off)) {\n                        year = year - off;\n                        break;\n                    }\n                }\n            }\n        }\n        defaultYear = year;\n    } else {\n        defaultYear = chrono.year().get(instantLocal);\n    }\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}