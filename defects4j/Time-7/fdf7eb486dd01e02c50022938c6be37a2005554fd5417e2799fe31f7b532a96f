{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n        // Adjust the parsed fields with the correct year if necessary\n        int parsedYear = bucket.getYear();\n        if (parsedYear == defaultYear) {\n            int parsedMonth = bucket.getMonth();\n            int parsedDay = bucket.getDayOfMonth();\n            if (parsedMonth == 2 && parsedDay == 29) {\n                // Check if the year is a leap year; if not, adjust to the nearest leap year\n                if (!chrono.year().isLeap(parsedYear)) {\n                    parsedYear = findNearestLeapYear(parsedYear);\n                }\n                bucket.setYear(parsedYear);\n            }\n        }\n        long computedMillis = bucket.computeMillis(false, text);\n        instant.setMillis(computedMillis);\n        \n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    }\n    return newPos;\n}\n\nprivate int findNearestLeapYear(int year) {\n    if (year % 4 != 0) {\n        year++;\n    }\n    while (true) {\n        if (isLeapYear(year)) {\n            return year;\n        }\n        year += (year % 4 == 0) ? 3 : 1; // Move to the next potential leap year\n    }\n}\n\nprivate boolean isLeapYear(int year) {\n    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}