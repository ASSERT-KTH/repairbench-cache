{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    \n    int defaultYear;\n    try {\n        defaultYear = chrono.year().get(instantLocal);\n        // Defensive: force leap year if day/month parse only and Feb 29 might be legal\n        // This fix sets defaultYear to leap year (e.g., 2004) if current year is not leap\n        // but we can't know ahead, so just use the parsed instant's year\n    } catch (IllegalArgumentException ex) {\n        // just in case underlying get() throws, fallback to ISO default\n        defaultYear = 2000;\n    }\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Only override millis if parse succeeded\n    try {\n        instant.setMillis(bucket.computeMillis(false, text));\n    } catch (IllegalFieldValueException e) {\n        // check if parse uses February 29 with a non-leap-year defaultYear,\n        // then try again with leap year default\n        if (defaultYear <= 1900 || DateTimeUtils.isLeapYear(defaultYear)) {\n            // already leap year or unlikely default, rethrow\n            throw e;\n        }\n        // leap year fallback is 2004\n        DateTimeParserBucket bucket2 = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, 2004);\n        parser.parseInto(bucket2, text, position);\n        instant.setMillis(bucket2.computeMillis(false, text));\n        // update bucket reference for timezone handling below\n        bucket = bucket2;\n    }\n\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}