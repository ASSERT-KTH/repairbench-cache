{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    // Grab the raw millis and pick up the selected chronology (with any overrides)\n    long instantMillis = instant.getMillis();\n    Chronology chrono = selectChronology(instant.getChronology());\n    // Compute default year from the raw instant in the selected chronology\n    int defaultYear = chrono.year().get(instantMillis);\n    // Compute the \"local\" instant to seed the bucket (for missing fields)\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n\n    DateTimeParserBucket bucket =\n        new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Build the final millis and apply back to the instant\n    long millis = bucket.computeMillis(false, text);\n    instant.setMillis(millis);\n\n    // Handle any parsed offset or zone\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n\n    // Push the chronology (and any explicit zone override) back into the instant\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}