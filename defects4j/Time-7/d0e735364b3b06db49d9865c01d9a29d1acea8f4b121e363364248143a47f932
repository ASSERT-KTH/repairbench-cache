{
    "generation": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    // Use the local instant (without time zone offset) for default year resolution\n    long instantLocal = instantMillis + zone.getOffset(instantMillis);\n\n    chrono = selectChronology(chrono);\n\n    // Use the year from the instant in the specified chronology, in the instant's time zone\n    int defaultYear = chrono.year().get(instantLocal);\n\n    // When parsing into an existing instant, if only some fields are parsed (e.g. month, day),\n    // the unparsed fields (like year) must default from the instant. But those values\n    // must reflect the instant's time zone. Therefore, we must use the original chronology with zone\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Fix: when only month/day is parsed (e.g. \"2 29\"), ensure all time fields from the instant\n    // (hour, minute, second, millis) are preserved.\n    // By passing 'false' to computeMillis, the retainOffset behavior is kept.\n    instant.setMillis(bucket.computeMillis(false, text));\n\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}