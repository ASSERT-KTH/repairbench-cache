{
    "generation": "    /**\n     * Parses a datetime from the given text, at the given position, saving the\n     * result into the fields of the given ReadWritableInstant. If the parse\n     * succeeds, the return value is the new text position. Note that the parse\n     * may succeed without fully reading the text and in this case those fields\n     * that were read will be set.\n     * <p>\n     * Only those fields present in the string will be changed in the specified\n     * instant. All other fields will remain unaltered. Thus if the string only\n     * contains a year and a month, then the day and time will be retained from\n     * the input instant. If this is not the behaviour you want, then reset the\n     * fields before calling this method, or use {@link #parseDateTime(String)}\n     * or {@link #parseMutableDateTime(String)}.\n     * <p>\n     * If it fails, the return value is negative, but the instant may still be\n     * modified. To determine the position where the parse failed, apply the\n     * one's complement operator (~) on the return value.\n     * <p>\n     * This parse method ignores the {@link #getDefaultYear() default year} and\n     * parses using the year from the supplied instant based on the chronology\n     * and time-zone of the supplied instant.\n     * <p>\n     * The parse will use the chronology of the instant.\n     *\n     * @param instant  an instant that will be modified, not null\n     * @param text  the text to parse\n     * @param position  position to start parsing from\n     * @return new position, negative value means parse failed -\n     *  apply complement operator (~) to get position of failure\n     * @throws UnsupportedOperationException if parsing is not supported\n     * @throws IllegalArgumentException if the instant is null\n     * @throws IllegalArgumentException if any field is out of range\n     */\n    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        \n        // Get the year from the input instant, as per Javadoc: \"parses using the year from the supplied instant\"\n        int defaultYear = chrono.year().get(instantMillis);\n        \n        // Calculate the instantLocal for the original instant to extract its time components.\n        long originalInstantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        \n        // Construct a new 'instantLocal' for the DateTimeParserBucket.\n        // This new instantLocal uses the defaultYear (from the input instant)\n        // and the time components (hour, minute, second, millis) from the original instant.\n        // The month and day are set to 1 (January 1st) to provide a neutral base for\n        // parsing month and day from the text, ensuring the Chronology's validation\n        // correctly considers the defaultYear's leap year status.\n        long bucketInstantLocal = chrono.getDateTimeMillis(\n            defaultYear, // Year from the input instant\n            1, // Month set to January\n            1, // Day set to 1st\n            chrono.hourOfDay().get(originalInstantLocal),\n            chrono.minuteOfHour().get(originalInstantLocal),\n            chrono.secondOfMinute().get(originalInstantLocal),\n            chrono.millisOfSecond().get(originalInstantLocal)\n        );\n        \n        chrono = selectChronology(chrono); // Apply formatter's chronology/zone settings\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            bucketInstantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        \n        int newPos = parser.parseInto(bucket, text, position);\n        \n        // computeMillis will now correctly apply the defaultYear's leap status\n        // when validating month/day fields.\n        instant.setMillis(bucket.computeMillis(false, text));\n        \n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}