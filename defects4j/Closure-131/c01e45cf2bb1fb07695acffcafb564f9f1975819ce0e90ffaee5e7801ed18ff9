{
    "generation": "import java.util.Set;\n// NOTE: The following import and the RESERVED_KEYWORDS set are assumed to exist\n// in the original file's context or be accessible. They are provided here\n// for completeness of the thought process but should not be part of the\n// final function-only output block if they are defined elsewhere.\n// import com.google.common.collect.ImmutableSet;\n\n/**\n * Utility functions for dealing with JavaScript identifiers.\n * TODO(nicksantos): Fold this into the NodeUtil class.\n * Copied from Rhino's Parser.java\n */\npublic final class NodeUtil {\n\n    // From Rhino Handler.Reserved\n    // TODO(user): This needs to be dynamic with language versions.\n    // Assume this set is defined and accessible within the scope of the function.\n    private static final Set<String> RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of(\n      \"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"delete\",\n      \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"in\", \"instanceof\",\n      \"new\", \"return\", \"switch\", \"this\", \"throw\", \"try\", \"typeof\", \"var\",\n      \"void\", \"while\", \"with\",\n      // ES5 reserved words\n      \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n      // ES5 strict mode reserved words\n      \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n      \"public\", \"static\", \"yield\",\n      // Literals\n      \"true\", \"false\", \"null\"\n      );\n\n    /**\n     * Determines whether {@code s} is a valid JavaScript identifier. {@link\n     * Character#isJavaIdentifierStart} and {@link Character#isIdentifierIgnorable}\n     * have known problems when checking JavaScript identifiers. This function is\n     * currently conservative and assumes that the identifier consists of only ASCII\n     * letters, digits, '$', and '_'. It also checks that the name is not a\n     * JavaScript reserved word.\n     *\n     * TODO(nicksantos): Make this function support non-ASCII characters in\n     * identifiers.\n     */\n    public static boolean isJSIdentifier(String s) {\n      int length = s.length();\n\n      if (length == 0 || RESERVED_KEYWORDS.contains(s)) {\n        return false;\n      }\n\n      char firstChar = s.charAt(0);\n      // Character.isJavaIdentifierStart is too permissive for JS for the purposes\n      // of the ConvertToDottedProperties pass. It allows non-ASCII characters\n      // and ignorable control characters. We adopt a conservative approach,\n      // allowing only ASCII letters, '$', and '_'.\n      if (!((firstChar >= 'a' && firstChar <= 'z') ||\n            (firstChar >= 'A' && firstChar <= 'Z') ||\n            firstChar == '$' ||\n            firstChar == '_')) {\n        return false;\n      }\n\n      for (int i = 1; i < length; i++) {\n        char c = s.charAt(i);\n        // Character.isJavaIdentifierPart is also too permissive.\n        // See comments above. We allow only ASCII letters, ASCII digits,\n        // '$', and '_'.\n        if (!((c >= 'a' && c <= 'z') ||\n              (c >= 'A' && c <= 'Z') ||\n              (c >= '0' && c <= '9') || // Allow digits in subsequent parts\n              c == '$' ||\n              c == '_')) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    // Assume other parts of the NodeUtil class exist here...\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}