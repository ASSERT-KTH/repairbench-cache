{
    "generation": "public static boolean isJSIdentifier(String s) {\n  int length = s.length();\n\n  if (length == 0 ||\n      !Character.isJavaIdentifierStart(s.charAt(0))) {\n    return false;\n  }\n\n  for (int i = 1; i < length; i++) {\n    if (!Character.isJavaIdentifierPart(s.charAt(i))) {\n      return false;\n    }\n  }\n\n  // Check if the identifier is a valid JavaScript identifier\n  // According to ECMAScript 5.1 section 7.6, a valid identifier\n  // must not be a reserved word and must be a valid Unicode identifier.\n  // Here we only check if it's a reserved word.\n  if (isReservedWord(s)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Helper function to check if a string is a reserved word in JavaScript\nprivate static boolean isReservedWord(String s) {\n  // List of reserved words in JavaScript (ECMAScript 5.1 section 7.6.1)\n  String[] reservedWords = {\n    \"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"delete\",\n    \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"in\", \"instanceof\",\n    \"new\", \"return\", \"switch\", \"this\", \"throw\", \"try\", \"typeof\", \"var\",\n    \"void\", \"while\", \"with\"\n  };\n\n  for (String word : reservedWords) {\n    if (s.equals(word)) {\n      return true;\n    }\n  }\n\n  return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}