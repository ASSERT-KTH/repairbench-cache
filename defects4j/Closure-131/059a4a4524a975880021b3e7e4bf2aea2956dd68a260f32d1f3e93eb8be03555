{
    "generation": "    /**\n     * Returns true if the specified string is a valid ECMAScript identifier name,\n     * restricted to ASCII characters. This function does *not* check if the\n     * identifier is a reserved word.\n     *\n     * This is a stricter definition than required by the ECMAScript spec,\n     * which allows a broader range of Unicode characters in identifiers.\n     * However, this stricter check is suitable for contexts like\n     * converting quoted property accesses to dotted accesses (a['foo'] -> a.foo)\n     * where restricting to simple ASCII identifiers is safer and matches behavior\n     * observed in the calling code's tests.\n     *\n     * ECMAScript 5.1 section 7.6 defines IdentifierName which includes\n     * IdentifierStart ::\n     *   UnicodeLetter\n     *   $\n     *   _\n     *   \\ UnicodeEscapeSequence\n     * IdentifierPart ::\n     *   IdentifierStart\n     *   UnicodeCombiningMark\n     *   UnicodeDigit\n     *   UnicodeConnectorPunctuation\n     *   <ZWNJ> <ZWJ>\n     *\n     * This implementation only checks for ASCII letters (a-z, A-Z), digits (0-9),\n     * underscore (_), and dollar sign ($).\n     *\n     * @param s The string to check.\n     * @return true if the string is a valid ASCII-only JavaScript identifier.\n     */\n    public static boolean isJSIdentifier(String s) {\n      int length = s.length();\n\n      if (length == 0) {\n        return false;\n      }\n\n      char firstChar = s.charAt(0);\n      // Check if the first character is a valid ASCII start character: letter, _, or $\n      if (!((firstChar >= 'a' && firstChar <= 'z') ||\n            (firstChar >= 'A' && firstChar <= 'Z') ||\n            firstChar == '_' ||\n            firstChar == '$')) {\n        return false;\n      }\n\n      // Check subsequent characters\n      for (int i = 1; i < length; i++) {\n        char c = s.charAt(i);\n        // Check if the character is a valid ASCII part character: letter, digit, _, or $\n        if (!((c >= 'a' && c <= 'z') ||\n              (c >= 'A' && c <= 'Z') ||\n              (c >= '0' && c <= '9') ||\n              c == '_' ||\n              c == '$')) {\n          return false;\n        }\n      }\n\n      // All characters are valid ASCII identifier parts.\n      // Note: This does not check against reserved words.\n      return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}