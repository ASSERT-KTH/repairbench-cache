{
    "generation": "    public static boolean isJSIdentifier(String s) {\n      int length = s.length();\n\n      if (length == 0) {\n        return false;\n      }\n\n      // First character must be an IdentifierStart\n      if (!isJSIdentifierStart(s.charAt(0))) {\n        return false;\n      }\n\n      // Subsequent characters must be IdentifierPart\n      for (int i = 1; i < length; i++) {\n        if (!isJSIdentifierPart(s.charAt(i))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    /**\n     * Checks if a character is a valid ECMAScript IdentifierStart.\n     * <p>\n     * According to ECMA-262, 5.1, Section 7.6, IdentifierStart includes:\n     * UnicodeLetter, $, or _.\n     * UnicodeLetter includes characters in Unicode categories:\n     * Lu (Uppercase letter), Ll (Lowercase letter), Lt (Titlecase letter),\n     * Lm (Modifier letter), Lo (Other letter), or Nl (Letter number).\n     *\n     * @param c The character to check.\n     * @return true if the character is a valid JavaScript identifier start character.\n     */\n    private static boolean isJSIdentifierStart(char c) {\n      if (c == '$' || c == '_') {\n        return true;\n      }\n      int type = Character.getType(c);\n      return type == Character.UPPERCASE_LETTER ||\n             type == Character.LOWERCASE_LETTER ||\n             type == Character.TITLECASE_LETTER ||\n             type == Character.MODIFIER_LETTER ||\n             type == Character.OTHER_LETTER ||\n             type == Character.LETTER_NUMBER; // Nl\n    }\n\n    /**\n     * Checks if a character is a valid ECMAScript IdentifierPart.\n     * <p>\n     * According to ECMA-262, 5.1, Section 7.6, IdentifierPart includes:\n     * IdentifierStart, UnicodeCombiningMark, UnicodeDigit,\n     * UnicodeConnectorPunctuation, ZWNJ (U+200C), or ZWJ (U+200D).\n     * <p>\n     * UnicodeDigit includes characters in Unicode category Nd (Decimal digit number).\n     * UnicodeCombiningMark includes characters in Unicode categories Mn (Nonspacing mark)\n     * or Mc (Spacing combining mark).\n     * UnicodeConnectorPunctuation includes characters in Unicode category Pc (Connector punctuation).\n     *\n     * @param c The character to check.\n     * @return true if the character is a valid JavaScript identifier part character.\n     */\n    private static boolean isJSIdentifierPart(char c) {\n      if (isJSIdentifierStart(c)) {\n        return true;\n      }\n      if (c == '\\u200C' || c == '\\u200D') { // ZWNJ (Zero Width Non-Joiner), ZWJ (Zero Width Joiner)\n        return true;\n      }\n      int type = Character.getType(c);\n      return type == Character.DECIMAL_DIGIT_NUMBER ||     // Nd\n             type == Character.NON_SPACING_MARK ||        // Mn\n             type == Character.COMBINING_SPACING_MARK ||  // Mc\n             type == Character.CONNECTOR_PUNCTUATION;     // Pc\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}