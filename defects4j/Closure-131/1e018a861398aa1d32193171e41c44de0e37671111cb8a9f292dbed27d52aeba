{
    "generation": "public static boolean isJSIdentifier(String s) {\n  if (s.isEmpty()) {\n    return false;\n  }\n\n  // Only allow simple ASCII letters, digits, underscore, and dollar sign.\n  char c = s.charAt(0);\n  if (!((c >= 'A' && c <= 'Z') ||\n        (c >= 'a' && c <= 'z') ||\n         c == '$' ||\n         c == '_')) {\n    return false;\n  }\n\n  for (int i = 1; i < s.length(); i++) {\n    c = s.charAt(i);\n    if (!((c >= 'A' && c <= 'Z') ||\n          (c >= 'a' && c <= 'z') ||\n          (c >= '0' && c <= '9') ||\n          c == '$' ||\n          c == '_')) {\n      return false;\n    }\n  }\n\n  // Disallow reserved words. Even though many ECMAScript versions \n  // permit using reserved words for property access, for the sake of \n  // conversion we don\u2019t want to convert them.\n  if (s.equals(\"break\") ||\n      s.equals(\"case\") ||\n      s.equals(\"catch\") ||\n      s.equals(\"class\") ||\n      s.equals(\"const\") ||\n      s.equals(\"continue\") ||\n      s.equals(\"debugger\") ||\n      s.equals(\"default\") ||\n      s.equals(\"delete\") ||\n      s.equals(\"do\") ||\n      s.equals(\"else\") ||\n      s.equals(\"enum\") ||\n      s.equals(\"export\") ||\n      s.equals(\"extends\") ||\n      s.equals(\"finally\") ||\n      s.equals(\"for\") ||\n      s.equals(\"function\") ||\n      s.equals(\"if\") ||\n      s.equals(\"import\") ||\n      s.equals(\"in\") ||\n      s.equals(\"instanceof\") ||\n      s.equals(\"new\") ||\n      s.equals(\"return\") ||\n      s.equals(\"super\") ||\n      s.equals(\"switch\") ||\n      s.equals(\"this\") ||\n      s.equals(\"throw\") ||\n      s.equals(\"try\") ||\n      s.equals(\"typeof\") ||\n      s.equals(\"var\") ||\n      s.equals(\"void\") ||\n      s.equals(\"while\") ||\n      s.equals(\"with\") ||\n      s.equals(\"null\") ||\n      s.equals(\"true\") ||\n      s.equals(\"false\")) {\n    return false;\n  }\n\n  return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}