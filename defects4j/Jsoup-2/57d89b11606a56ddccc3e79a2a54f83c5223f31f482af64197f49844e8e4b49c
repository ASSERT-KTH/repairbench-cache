{
    "generation": "private void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n\n    if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n\n    // Handle self-closing tags:\n    if (tq.matchChomp(\"/>\")) {\n        addChildToParent(child, true);\n    } else {\n        // consume the '>' that closes the start tag\n        tq.matchChomp(\">\");\n\n        if (tag.isData()) {\n            // PC data only tags (script, textarea): grab everything up to the end tag\n            String data = tq.chompTo(\"</\" + tagName);\n            tq.chompTo(\">\");\n\n            Node dataNode;\n            if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n                // text only, but parsed as encoded\n                dataNode = TextNode.createFromEncoded(data, baseUri);\n            } else {\n                // raw data (for script)\n                dataNode = new DataNode(data, baseUri);\n            }\n            child.appendChild(dataNode);\n\n            // treat the data tag as closed (don't push onto the stack)\n            addChildToParent(child, true);\n        } else {\n            // normal element: empty if the tag is intrinsically empty (e.g. img)\n            boolean isEmptyElement = tag.isEmpty();\n            addChildToParent(child, isEmptyElement);\n        }\n    }\n\n    // <base href>: update the base uri\n    if (\"base\".equals(child.tagName())) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            baseUri = href;\n            doc.setBaseUri(href);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}