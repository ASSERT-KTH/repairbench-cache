{
    "generation": "    private void parseStartTag() {\n        tq.consume(\"<\");\n        String tagName = tq.consumeWord();\n\n        if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text\n            tq.addFirst(\"&lt;\");\n            // Note: Jsoup's actual parser uses state transitions. This simulates handling as text.\n            parseTextNode();\n            return;\n        }\n\n        Attributes attributes = new Attributes();\n        while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n            Attribute attribute = parseAttribute();\n            if (attribute != null)\n                attributes.put(attribute);\n        }\n\n        Tag tag = Tag.valueOf(tagName);\n        Element child = new Element(tag, baseUri, attributes);\n\n        boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>\n        if (tq.matchChomp(\"/>\")) { // close empty element or tag\n            isEmptyElement = true;\n        } else {\n            tq.matchChomp(\">\"); // Consume the closing \">\" of the start tag\n        }\n        \n        // Add child to parent / stack before processing data, unless it's an empty element\n        addChildToParent(child, isEmptyElement);\n\n        // pc data only tags (textarea, script): read data up to end tag, add content as text node\n        // Only process data if the tag is not treated as empty (e.g. not <script />)\n        if (tag.isData() && !isEmptyElement) {\n            // Consume the data up to the specified end tag. Do not consume the end tag itself.\n            String data = tq.consumeTo(\"</\" + tagName);\n            \n            // The end tag (e.g., </script>) remains on the queue and will be handled by the main parser loop.\n\n            Node dataNode;\n            if (tag.equals(titleTag) || tag.equals(textareaTag)) // want to show as text, entities decoded\n                dataNode = TextNode.createFromEncoded(data, baseUri);\n            else // script/style, data is raw (for \" in script etc)\n                dataNode = new DataNode(data, baseUri); \n            child.appendChild(dataNode);   \n        }\n\n        // <base href>: update the base uri\n        if (child.tagName().equals(\"base\")) {\n            String href = child.absUrl(\"href\");\n            if (href.length() != 0) { // ignore <base target> etc\n                baseUri = href;\n                doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base\n            }\n        }\n        // After processing the start tag (and potentially its data), the function returns.\n        // If it was a data tag, the corresponding end tag is still in the queue to be processed next.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}