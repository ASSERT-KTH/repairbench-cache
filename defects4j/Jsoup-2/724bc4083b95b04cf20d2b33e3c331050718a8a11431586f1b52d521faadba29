{
    "generation": "private void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n\n    // not actually a tag, rewind and treat as text\n    if (tagName.length() == 0) {\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n\n    // read attributes\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n\n    // determine if this is an empty element: void tags or self-closed, \n    // and for data tags (script/style/textarea/title) treat as empty so we don't push them\n    boolean isData = tag.isData();\n    boolean isEmptyElement = tag.isEmpty() || isData;\n    if (tq.matchChomp(\"/>\")) {\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    addChildToParent(child, isEmptyElement);\n\n    // if it's a raw data tag, consume everything up to the matching end tag\n    if (isData) {\n        String data = tq.chompTo(\"</\" + tagName);\n        tq.chompTo(\">\"); // consume the closing '>'\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        } else {\n            dataNode = new DataNode(data, baseUri);\n        }\n        child.appendChild(dataNode);\n    }\n\n    // update base URI if we see a <base href=\"...\">\n    if (\"base\".equals(child.tagName())) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            baseUri = href;\n            doc.setBaseUri(href);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}