{
    "generation": "private void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n\n    if (tagName.length() == 0) { // doesn't look like a start tag after all; put < back on stack and handle as text\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n\n    boolean isEmptyElement = tag.isEmpty(); // empty element if void (e.g. img) or self-closed el (<div/>)\n    if (tq.matchChomp(\"/>\")) {\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n    // treat data-only tags (script, style, textarea, title) as empty so we don't push them on the stack\n    addChildToParent(child, isEmptyElement || tag.isData());\n\n    // pc data only tags (textarea, script): chomp to end tag, add content as a single data/text node\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName);\n        tq.chompTo(\">\");\n\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n            // for title/textarea, decode entities\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        } else {\n            // for script/style, keep raw\n            dataNode = new DataNode(data, baseUri);\n        }\n        child.appendChild(dataNode);\n    }\n\n    // <base href>: update the base uri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            baseUri = href;\n            doc.setBaseUri(href);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}