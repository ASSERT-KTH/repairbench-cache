{
    "generation": "private void parseStartTag() {\n    tq.consume(\"<\");\n    String tagName = tq.consumeWord();\n\n    // doesn't look like a start tag after all; put '<' back and treat as text\n    if (tagName.length() == 0) {\n        tq.addFirst(\"&lt;\");\n        parseTextNode();\n        return;\n    }\n\n    // read attributes\n    Attributes attributes = new Attributes();\n    while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n        Attribute attribute = parseAttribute();\n        if (attribute != null)\n            attributes.put(attribute);\n    }\n\n    Tag tag = Tag.valueOf(tagName);\n    Element child = new Element(tag, baseUri, attributes);\n\n    // for empty tags (img, <br/>) or data\u2010only tags (script, textarea, etc),\n    // mark as \"empty\" so they do not stay on the stack\n    boolean isEmptyElement = tag.isEmpty() || tag.isData();\n\n    // consume the close of the start tag\n    if (tq.matchChomp(\"/>\")) {\n        isEmptyElement = true;\n    } else {\n        tq.matchChomp(\">\");\n    }\n\n    // add to the tree (and only push to stack if !isEmptyElement)\n    addChildToParent(child, isEmptyElement);\n\n    // for data\u2010only tags, pull in all text up to the matching end tag\n    if (tag.isData()) {\n        String data = tq.chompTo(\"</\" + tagName);\n        tq.chompTo(\">\");\n\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag)) {\n            dataNode = TextNode.createFromEncoded(data, baseUri);\n        } else {\n            dataNode = new DataNode(data, baseUri);\n        }\n        child.appendChild(dataNode);\n    }\n\n    // handle <base href=\"...\"> updating the baseUri\n    if (child.tagName().equals(\"base\")) {\n        String href = child.absUrl(\"href\");\n        if (href.length() != 0) {\n            baseUri = href;\n            doc.setBaseUri(href);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}