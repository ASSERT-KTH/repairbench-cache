{
    "generation": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n\n    // Check if initial is the lower bound\n    if (initial == min) {\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n            return min;\n        }\n    }\n    // Check if initial is the upper bound\n    else if (initial == max) {\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0);\n            return max;\n        }\n    } else {\n        verifySequence(min, initial, max);\n    }\n\n    // Evaluate function at initial point\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // Evaluate function at min\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    // Evaluate function at max\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // Check bracketing for min and initial\n    if (yMin * yInitial < 0) {\n        return solve(f, min, max, initial);\n    }\n\n    // Check bracketing for initial and max\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, max, min);\n    }\n\n    // Check if min and max bracket the root\n    if (yMin * yMax < 0) {\n        return solve(f, min, max, initial);\n    }\n\n    // Check if min and max have the same sign as initial\n    if (yMin * yInitial > 0 && yMax * yInitial > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    // Full Brent algorithm starting with provided initial guess\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}