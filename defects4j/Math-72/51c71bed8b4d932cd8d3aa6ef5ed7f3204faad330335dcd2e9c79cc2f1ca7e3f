{
    "generation": "    /**\n     * Find a zero in the given interval with an initial guess.\n     * <p>Throws <code>IllegalArgumentException</code> if the values of the\n     * function at the three points have the same sign (note that it is\n     * allowed to have endpoints with the same sign if the initial point has\n     * opposite sign function-wise).</p>\n     *\n     * @param f function to solve.\n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @param initial the start value to use (must be set to min if no\n     * initial point is known).\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     *  the function\n     * @throws IllegalArgumentException if initial is not between min and max\n     * (even if it <em>is</em> a root)\n     */\n    public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // return the initial guess if it is good enough\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0); // BUG FIX: Should set 'min' (x-value) as result, not 'yMin' (function value)\n            return result;\n        }\n\n        // reduce interval if min and initial bracket the root\n        if (yInitial * yMin < 0) {\n            // Note: The call to solve here uses min, yMin, initial, yInitial.\n            // The original third and fourth arguments are min, yMin. The last two arguments are initial, yInitial.\n            // This suggests the internal solve method takes (x1, y1, x2, y2, x3, y3) where (x3, y3) is the initial guess.\n            // For bracketing min and initial, the interval becomes (min, initial).\n            // So, it should be solve(f, min, yMin, initial, yInitial, min, yMin) or solve(f, min, yMin, initial, yInitial, initial, yInitial) depending on which is the new 'initial' point.\n            // Given the signature solve(f, x1, y1, x2, y2, x3, y3), it correctly represents the interval [x1, x2] with initial guess x3.\n            // Here, the interval is [min, initial], so x1=min, y1=yMin, x2=initial, y2=yInitial. The initial guess would be initial.\n            // The original code implies solve(f, min, yMin, initial, yInitial, min, yMin). This seems correct for passing the new bounds and the initial guess, if the initial guess is min.\n            // However, the internal solve method usually takes x1, y1, x2, y2, x3, y3, where x3 is the initial guess.\n            // Let's assume the existing internal call structure is correct regarding parameter order for the internal solve method.\n            return solve(f, min, yMin, initial, yInitial, min, yMin);\n        }\n\n        // return the second endpoint if it is good enough\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0); // BUG FIX: Should set 'max' (x-value) as result, not 'yMax' (function value)\n            return result;\n        }\n\n        // reduce interval if initial and max bracket the root\n        if (yInitial * yMax < 0) {\n            // Similar to the previous case, interval is [initial, max].\n            // x1=initial, y1=yInitial, x2=max, y2=yMax. Initial guess could be initial.\n            // The call solve(f, initial, yInitial, max, yMax, initial, yInitial) seems consistent.\n            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n        }\n\n        if (yMin * yMax > 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        return solve(f, min, yMin, max, yMax, initial, yInitial);\n\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}