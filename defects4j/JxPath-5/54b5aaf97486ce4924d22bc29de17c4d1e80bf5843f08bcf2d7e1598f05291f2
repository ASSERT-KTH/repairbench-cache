{
    "generation": "    private int compareNodePointers(\n        NodePointer p1,\n        int depth1,\n        NodePointer p2,\n        int depth2) \n    {\n        if (depth1 < depth2) {\n            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n            return r == 0 ? -1 : r;\n        }\n        if (depth1 > depth2) {\n            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n            return r == 0 ? 1 : r;\n        }\n        // At this point, depth1 == depth2\n        if (p1 == null && p2 == null) {\n            return 0;\n        }\n\n        if (p1 != null && p1.equals(p2)) {\n            return 0;\n        }\n\n        // Now depth1 == depth2, p1 != null, p2 != null, and p1 != p2\n        // This block is for comparing two distinct pointers at the same conceptual depth.\n        // It specifically deals with root-level comparisons (depth1 == 1) or child comparisons.\n        if (depth1 == 1) {\n            // Special handling for VariablePointer, as it doesn't belong to the document tree\n            // and should not cause an exception when compared to other types of pointers.\n            if (p1 instanceof org.apache.commons.jxpath.ri.model.VariablePointer) {\n                if (!(p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer)) {\n                    // p1 is VariablePointer, p2 is not a VariablePointer.\n                    // Arbitrarily order VariablePointers before other NodePointers.\n                    return -1;\n                } else {\n                    // Both p1 and p2 are VariablePointers, and they are not equal (due to p1.equals(p2) check above).\n                    // Order them by their variable names for a consistent result.\n                    return ((org.apache.commons.jxpath.ri.model.VariablePointer) p1).getQName().toString().compareTo(\n                            ((org.apache.commons.jxpath.ri.model.VariablePointer) p2).getQName().toString());\n                }\n            } else if (p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer) {\n                // p2 is VariablePointer, p1 is not a VariablePointer.\n                // Arbitrarily order other NodePointers after VariablePointers.\n                return 1;\n            }\n\n            // If neither is a VariablePointer, and they are distinct root-level nodes,\n            // they are considered to be from different trees in the original design.\n            throw new JXPathException(\n                    \"Cannot compare pointers that do not belong to the same tree: '\"\n                            + p1 + \"' and '\" + p2 + \"'\");\n        }\n        \n        // Original logic for non-root comparisons or when parents are equal.\n        // If depth1 > 1, we recursively compare parents.\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n        if (r != 0) {\n            return r;\n        }\n\n        // If parents are equal (r == 0), compare children.\n        // This implies p1 and p2 are siblings under the same parent.\n        return p1.parent.compareChildNodePointers(p1, p2);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}