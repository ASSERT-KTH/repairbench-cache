{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n        // Instead of throwing an exception when pointers are from different trees,\n        // we return a stable ordering based on their string representations.\n        if (p1 == null) {\n            return (p2 == null) ? 0 : -1;\n        }\n        if (p2 == null) {\n            return 1;\n        }\n        String s1 = p1.toString();\n        String s2 = p2.toString();\n        int cmp = s1.compareTo(s2);\n        if (cmp == 0) {\n            // Fall back on comparing identity hash codes so that two different pointers \n            // with the same string representation still sort differently.\n            return System.identityHashCode(p1) - System.identityHashCode(p2);\n        }\n        return cmp;\n    }\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}