{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (p1 == null || p2 == null) {\n        // If either pointer is null, consider them as not belonging to the same tree.\n        // Define a total ordering: non-null > null\n        if (p1 == null && p2 == null) {\n            return 0;\n        }\n        return p1 == null ? -1 : 1;\n    }\n\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n\n    if (p1.equals(p2)) {\n        return 0;\n    }\n\n    if (depth1 == 1) {\n        // p1 and p2 are not the same, but at root level; just give a stable ordering\n        int cmp = p1.toString().compareTo(p2.toString());\n        if (cmp != 0) {\n            return cmp;\n        }\n        // fallback if toString is same but not equals (unlikely)\n        return System.identityHashCode(p1) - System.identityHashCode(p2);\n    }\n\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}