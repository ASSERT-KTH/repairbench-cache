{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    // If the two pointers come from different root trees,\n    // fall back to simple string\u2010based ordering (e.g. \"$var\" vs \"/MAIN/A\").\n    NodePointer root1 = p1;\n    while (root1 != null && root1.parent != null) {\n        root1 = root1.parent;\n    }\n    NodePointer root2 = p2;\n    while (root2 != null && root2.parent != null) {\n        root2 = root2.parent;\n    }\n    if (root1 != root2) {\n        String s1 = p1 == null ? \"\" : p1.toString();\n        String s2 = p2 == null ? \"\" : p2.toString();\n        return s1.compareTo(s2);\n    }\n\n    // Same root \u2013 perform the original depth\u2010and\u2010ancestor comparison.\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n\n    // Climb up until a difference is found\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n    // Finally compare siblings under the same parent\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}