{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        // Ascend p2 to p1's depth\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        // Ascend p1 to p2's depth\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n\n    // PATCH: if either pointer is rootless, treat as detached; order arbitrarily but safely\n    if (depth1 == 0) {\n        // both must be rootless/detached\n        String p1Str = p1 != null ? p1.toString() : \"null\";\n        String p2Str = p2 != null ? p2.toString() : \"null\";\n        return p1Str.compareTo(p2Str);\n    }\n\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n\n    try {\n        return p1.parent.compareChildNodePointers(p1, p2);\n    } catch (JXPathException ex) {\n        // Cannot compare children of different trees\n        // Instead of throwing, order by string for determinism\n        String p1Str = p1 != null ? p1.toString() : \"null\";\n        String p2Str = p2 != null ? p2.toString() : \"null\";\n        return p1Str.compareTo(p2Str);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}