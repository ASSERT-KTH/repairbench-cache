{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    \n    // Handle comparison between pointers from different trees\n    if (depth1 == 1 && depth2 == 1 && \n        ((p1 != null && p2 != null && !p1.getClass().equals(p2.getClass())) || \n         (p1 != null && p1.isAttribute()) || \n         (p2 != null && p2.isAttribute()))) {\n        // Compare based on pointer type and values for different trees\n        if (p1 != null && p2 != null) {\n            // First compare by type name for different pointer types\n            int result = p1.getClass().getName().compareTo(p2.getClass().getName());\n            if (result != 0) {\n                return result;\n            }\n            // If same type, compare by their string values\n            return p1.toString().compareTo(p2.toString());\n        }\n        return p1 == null ? -1 : 1;\n    }\n    \n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n\n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n\n    if (depth1 == 1) {\n        // Instead of throwing exception, compare the pointers directly\n        if (p1 != null && p2 != null) {\n            return p1.toString().compareTo(p2.toString());\n        }\n        return p1 == null ? -1 : 1;\n    }\n    \n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}