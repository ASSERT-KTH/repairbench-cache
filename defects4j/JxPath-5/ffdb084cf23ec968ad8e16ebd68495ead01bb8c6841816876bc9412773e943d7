{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    // Handle null pointers: if one is null and the other is not, ensure consistent ordering\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1 == null) {\n        return -1;\n    }\n    if (p2 == null) {\n        return 1;\n    }\n\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    if (p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n        // Instead of throwing, fall back to pointer comparison via identity or toString or class name.\n        // Ensures disparate roots do not fail with exception.\n        // Put a deterministic order for pointers in separate trees\n        int classCmp = p1.getClass().getName().compareTo(p2.getClass().getName());\n        if (classCmp != 0) {\n            return classCmp;\n        }\n        int strCmp = p1.toString().compareTo(p2.toString());\n        if (strCmp != 0) {\n            return strCmp;\n        }\n        // Final fallback: identity hashCode\n        return System.identityHashCode(p1) - System.identityHashCode(p2);\n    }\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}