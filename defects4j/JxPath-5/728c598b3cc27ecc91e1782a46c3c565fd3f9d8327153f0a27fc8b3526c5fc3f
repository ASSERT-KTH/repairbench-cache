{
    "generation": "    private int compareNodePointers(\n        NodePointer p1,\n        int depth1,\n        NodePointer p2,\n        int depth2) \n    {\n        // Special handling for VariablePointers and other \"rootless\" pointers.\n        // VariablePointers (and similar types that do not represent nodes in a document tree)\n        // have a depth of 0 and do not have a parent in the traditional tree sense.\n        // Attempting to compare them with document nodes via parent traversal leads to errors\n        // because they fundamentally do not belong to the same tree.\n        // For operations like \"union\" where different types of pointers are mixed,\n        // a consistent, albeit arbitrary, order is required rather than throwing an exception.\n\n        boolean p1IsVariable = (p1 instanceof org.apache.commons.jxpath.ri.model.VariablePointer);\n        boolean p2IsVariable = (p2 instanceof org.apache.commons.jxpath.ri.model.VariablePointer);\n\n        if (p1IsVariable && p2IsVariable) {\n            // Both are VariablePointers.\n            // If they are the same object or represent the same variable (checked by equals), they are equal.\n            if (p1 == null && p2 == null) {\n                return 0;\n            }\n            if (p1 != null && p1.equals(p2)) {\n                return 0;\n            }\n            // For two distinct VariablePointers, an arbitrary but consistent order is needed.\n            // Using identity hash code provides a deterministic (though arbitrary) ordering.\n            return System.identityHashCode(p1) - System.identityHashCode(p2);\n        }\n\n        if (p1IsVariable) {\n            // p1 is a VariablePointer, p2 is not (it's likely a document pointer or null).\n            // VariablePointers are typically considered \"before\" document pointers in sorted lists.\n            return -1;\n        }\n\n        if (p2IsVariable) {\n            // p2 is a VariablePointer, p1 is not (it's likely a document pointer or null).\n            // p1 (document pointer) comes \"after\" p2 (VariablePointer).\n            return 1;\n        }\n\n        // From this point, neither p1 nor p2 is a VariablePointer.\n        // The original logic for comparing document-tree pointers applies.\n\n        if (depth1 < depth2) {\n            // p1 is higher up the tree than p2, or p2 is deeper.\n            // Try to align depths by moving p2 up towards its parent.\n            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n            // If p1 and p2.parent are found to be the same (r == 0),\n            // it means p1 is an ancestor of p2. Thus, p1 comes before p2.\n            return r == 0 ? -1 : r;\n        }\n        if (depth1 > depth2) {\n            // p2 is higher up the tree than p1, or p1 is deeper.\n            // Try to align depths by moving p1 up towards its parent.\n            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n            // If p1.parent and p2 are found to be the same (r == 0),\n            // it means p2 is an ancestor of p1. Thus, p1 comes after p2.\n            return r == 0 ? 1 : r;\n        }\n        \n        // At this point, depth1 == depth2.\n\n        if (p1 == null && p2 == null) {\n            // Both pointers are null (e.g., reached beyond root for both). They are equal.\n            return 0;\n        }\n\n        if (p1 != null && p1.equals(p2)) {\n            // Pointers are equal (same node or equivalent).\n            return 0;\n        }\n\n        // If depths are equal (and > 0), and they are not equal,\n        // and we are at depth 1 (i.e., comparing root pointers of different trees),\n        // then they cannot be compared. This is the intended JXPathException for unrelated document trees.\n        if (depth1 == 1) { // Implicitly also depth2 == 1 since depths are equal at this point\n            throw new JXPathException(\n                    \"Cannot compare pointers that do not belong to the same tree: '\"\n                            + p1 + \"' and '\" + p2 + \"'\");\n        }\n        \n        // If depths are equal and > 1, and they are not equal,\n        // recursively compare their parents.\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n        if (r != 0) {\n            // If parents are different, their comparison determines the order.\n            return r;\n        }\n\n        // If parents are equal, compare the immediate children (p1 and p2) under that common parent.\n        // This assumes p1.parent is not null (which is guaranteed if depth1 > 1).\n        return p1.parent.compareChildNodePointers(p1, p2);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}