{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    \n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n    \n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    \n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    \n    // At this point depth1 == depth2\n    \n    if (depth1 == 0) {\n        // Both pointers are at the root, but they're not equal (checked above)\n        // Order them by their string representation as a last resort\n        return p1.toString().compareTo(p2.toString());\n    }\n    \n    // Check if pointers belong to different trees\n    if (p1.getRoot().getClass() != p2.getRoot().getClass()) {\n        // Different root types mean different trees - compare by string representation\n        return p1.toString().compareTo(p2.toString());\n    }\n    \n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n    \n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}