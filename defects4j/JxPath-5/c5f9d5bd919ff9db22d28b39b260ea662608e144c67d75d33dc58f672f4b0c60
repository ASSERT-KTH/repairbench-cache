{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    // Handle null cases first\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    \n    // If pointers are of different types (e.g., one is a variable, one is a node)\n    // We need a consistent ordering for these cases\n    if (p1 != null && p2 != null && !p1.getClass().equals(p2.getClass())) {\n        // Establish an arbitrary but consistent ordering based on class name\n        return p1.getClass().getName().compareTo(p2.getClass().getName());\n    }\n    \n    // Original recursion for different depths\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n\n    // Handle equal pointers\n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n\n    // Only throw exception if we're at depth 1 and both pointers are in the same tree type\n    if (depth1 == 1 && p1 != null && p2 != null && p1.getClass().equals(p2.getClass())) {\n        throw new JXPathException(\n                \"Cannot compare pointers that do not belong to the same tree: '\"\n                        + p1 + \"' and '\" + p2 + \"'\");\n    }\n    \n    // Continue with original comparison logic\n    if (depth1 > 1) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n        if (r != 0) {\n            return r;\n        }\n        \n        return p1.parent.compareChildNodePointers(p1, p2);\n    }\n    \n    // For pointers at depth 1 that don't match but need comparison\n    // Establish an ordering based on string representation\n    return p1.toString().compareTo(p2.toString());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}