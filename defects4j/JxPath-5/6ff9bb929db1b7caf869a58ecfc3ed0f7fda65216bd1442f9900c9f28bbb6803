{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    // First bring both pointers to the same depth.\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n\n    // If both are null or equal, they compare as the same.\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n\n    // When we reach the root (depth1 == 1) and the two pointers\n    // are not in the same tree, do NOT throw an exception.\n    // Fall back to a stable ordering by their path\u2010strings.\n    if (depth1 == 1) {\n        String s1 = p1 == null ? \"\" : p1.toString();\n        String s2 = p2 == null ? \"\" : p2.toString();\n        return s1.compareTo(s2);\n    }\n\n    // Otherwise, keep walking up to find their common ancestor.\n    int r = compareNodePointers(\n        p1.parent, depth1 - 1,\n        p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n\n    // Finally compare them as siblings under the same parent.\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}