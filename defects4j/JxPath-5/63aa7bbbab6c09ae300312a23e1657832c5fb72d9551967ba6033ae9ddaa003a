{
    "generation": "private int compareNodePointers(NodePointer p1, int depth1, NodePointer p2, int depth2) {\n    // Handle null pointers consistently.\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1 == null) {\n        return -1;\n    }\n    if (p2 == null) {\n        return 1;\n    }\n\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    \n    // At equal depth, if the pointers are equal, return 0.\n    if (p1.equals(p2)) {\n        return 0;\n    }\n    \n    // When we reach the root level (depth == 1) we no longer have a parent,\n    // so instead of throwing an exception for pointers from different trees,\n    // use a fallback ordering based on their string representations.\n    if (depth1 == 1) {\n        int cmp = p1.toString().compareTo(p2.toString());\n        if (cmp != 0) {\n            return cmp;\n        }\n        // If the string representations compare equal (which is unusual),\n        // use the identity hash code to ensure a consistent total order.\n        return System.identityHashCode(p1) - System.identityHashCode(p2);\n    }\n    \n    // Compare the parents.\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n    \n    // Finally, compare the two pointers as children of their common parent.\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}