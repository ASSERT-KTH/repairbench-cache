{
    "generation": "    private int compareNodePointers(\n        NodePointer p1,\n        int depth1,\n        NodePointer p2,\n        int depth2) \n    {\n        // If both pointers are null, consider them equal\n        if (p1 == null && p2 == null) {\n            return 0;\n        }\n        // If one pointer is null, consider it less than the other\n        if (p1 == null) {\n            return -1;\n        }\n        if (p2 == null) {\n            return 1;\n        }\n\n        if (depth1 < depth2) {\n            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n            return r == 0 ? -1 : r;\n        }\n        if (depth1 > depth2) {\n            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n            return r == 0 ? 1 : r;\n        }\n\n        if (p1.equals(p2)) {\n            return 0;\n        }\n\n        // If reached top and pointers are not equal, return comparison by string value\n        if (depth1 == 1) {\n            // Try to provide deterministic ordering rather than throwing exception\n            // Order by string to support heterogeneous sets ($var, nodes, etc.)\n            String s1 = String.valueOf(p1);\n            String s2 = String.valueOf(p2);\n            return s1.compareTo(s2);\n        }\n\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n        if (r != 0) {\n            return r;\n        }\n\n        return p1.parent.compareChildNodePointers(p1, p2);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}