{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n\n    if (p1 != null && p2 != null && p1.equals(p2)) {\n        return 0;\n    }\n\n    // If pointers are of different types or from different trees\n    if (depth1 == 0 || depth2 == 0 || \n        (p1 != null && p2 != null && !p1.isSameNodeType(p2))) {\n        return p1.getNodeId() < p2.getNodeId() ? -1 : 1;\n    }\n\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    \n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    \n    // Both depths are equal and > 0\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}