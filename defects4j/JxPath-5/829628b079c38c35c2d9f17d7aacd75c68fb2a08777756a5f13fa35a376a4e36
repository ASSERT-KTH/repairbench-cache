{
    "generation": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    // If both are null, they're equal\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    // If only one is null, define an ordering\n    if (p1 == null) {\n        return -1;\n    }\n    if (p2 == null) {\n        return 1;\n    }\n    // If same objects (including variables), return 0\n    if (p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n\n    // At this point depth1 == depth2, both not null, not equal\n\n    // If parents are both null or different trees, define ordering by toString comparison\n    if (depth1 == 1 || p1.parent == null || p2.parent == null) {\n        // Instead of throwing, define a fallback\n        int t = p1.toString().compareTo(p2.toString());\n        return t == 0 ? System.identityHashCode(p1) - System.identityHashCode(p2) : t;\n    }\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}