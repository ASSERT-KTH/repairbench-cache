{
    "generation": "    private int compareNodePointers(\n        NodePointer p1,\n        int depth1,\n        NodePointer p2,\n        int depth2) \n    {\n        if (depth1 < depth2) {\n            int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n            return r == 0 ? -1 : r;\n        }\n        if (depth1 > depth2) {\n            int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n            return r == 0 ? 1 : r;\n        }\n        if (p1 == null && p2 == null) {\n            return 0;\n        }\n\n        if (p1 != null && p1.equals(p2)) {\n            return 0;\n        }\n\n        if (depth1 == 1) {\n            NodePointer root1 = p1;\n            while (root1 != null && root1.parent != null) {\n                root1 = root1.parent;\n            }\n            NodePointer root2 = p2;\n            while (root2 != null && root2.parent != null) {\n                root2 = root2.parent;\n            }\n            if (root1 != root2) {\n                if (root1 == null) return -1;\n                if (root2 == null) return 1;\n                return Integer.compare(\n                    System.identityHashCode(root1),\n                    System.identityHashCode(root2)\n                );\n            } else {\n                throw new JXPathException(\n                    \"Cannot compare pointers that do not belong to the same tree: '\"\n                            + p1 + \"' and '\" + p2 + \"'\");\n            }\n        }\n\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n        if (r != 0) {\n            return r;\n        }\n\n        return p1.parent.compareChildNodePointers(p1, p2);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}