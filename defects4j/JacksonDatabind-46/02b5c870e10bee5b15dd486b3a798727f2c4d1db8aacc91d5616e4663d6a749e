{
    "generation": "    @Override\n    public StringBuilder getGenericSignature(StringBuilder sb)\n    {\n        // First, append the signature of the primary class (e.g., Ljava/util/concurrent/atomic/AtomicReference)\n        // The 'false' argument ensures no trailing ';' is added yet, as it will be part of the generic signature ending.\n        _classSignature(_class, sb, false);\n        // Append the opening angle bracket for generic type parameters\n        sb.append('<');\n        // Recursively append the generic signature of the referenced type (e.g., Ljava/lang/String;)\n        // This call will append the full signature of the type parameter, including its own trailing semicolon.\n        sb = _referencedType.getGenericSignature(sb);\n        // Finally, append the closing angle bracket for the generic type parameters,\n        // and the final semicolon for the overall class signature.\n        sb.append(\">;\");\n        return sb;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}