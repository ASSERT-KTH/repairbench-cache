{
    "generation": "  /**\n   * Visits a CALL node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   */\n  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      // Calculate isExtern once.\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        // Add null checks for safety\n        if (sourceName != null) {\n          CompilerInput functionSource = compiler.getInput(sourceName);\n          if (functionSource != null) { // Might be null for synthetic nodes\n             isExtern = functionSource.isExtern();\n          }\n        }\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        // Allow native types (like Number, String) to be called\n        // for type casting. DomHelper used to rely on this.\n        JSType nativeType = JSType.toMaybePrimitiveType(functionType.getInstanceType());\n        if (nativeType == null || !nativeType.isNumberValueType() && !nativeType.isStringValueType()) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM context, unless they are externs or specify global this.\n      JSType thisType = functionType.getTypeOfThis();\n      // Check if 'this' is explicitly specified (not Unknown) and not the global this type,\n      // and the function is not an extern, and it's not called as obj.method() or obj['method']().\n      if (!isExtern &&\n          thisType != null && // Ensure thisType is not null (getTypeOfThis can return null)\n          !thisType.isUnknownType() &&\n          !thisType.isGlobalThisType() && // Exclude functions that explicitly declare @this {Window}\n          !child.isGetProp() &&\n          !child.isGetElem()) {\n        report(t, n, FUNCTION_WITH_EXPLICIT_THIS, functionType.toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      // Handle cases where non-FunctionType is callable (e.g., UnionType).\n      // We might need to check for the 'this' mismatch in union types as well.\n      // TODO(dimvar): Check this mismatch across unions.\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}