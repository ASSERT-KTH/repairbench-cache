{
    "generation": "  /**\n   * Visits a CALL node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   */\n  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        // sourceName can be null for anonymous functions.\n        if (sourceName != null) {\n          CompilerInput functionSource = compiler.getInput(sourceName);\n          // functionSource can be null for synthetic nodes.\n          if (functionSource != null) {\n            isExtern = functionSource.isExtern();\n          }\n        }\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explcit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      // Check if the function has an explicit 'this' type annotated\n      // or is implicitly typed as 'this' of a prototype method.\n      JSType functionThisType = functionType.getTypeOfThis();\n\n      // Check if the 'this' type is constrained (i.e., not unknown or global this)\n      boolean requiresThis = !functionThisType.isUnknownType() &&\n                             functionThisType != typeRegistry.getGlobalThisType();\n\n      if (requiresThis) {\n        // Check if 'this' is provided by the call site.\n        // Calls performed via GETPROP (like obj.method()) or GETELEM\n        // (like obj['method']()) implicitly set 'this'.\n        // Direct calls (like func()) or calls on expressions do not.\n        // Note: .call and .apply are handled because they are called via\n        // GETPROP (func.call()).\n        if (!child.isGetProp() && !child.isGetElem()) {\n          // Report a warning if a function requiring 'this' is called\n          // without a 'this' context.\n          report(t, n, REQUIRES_THIS, functionType.toString());\n        }\n      }\n\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      // If the type is not a FunctionType, it might be a UnionType, etc.\n      // Or an object with a .call property (less common).\n      // For now, just ensure the node is typed (likely as unknown).\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}