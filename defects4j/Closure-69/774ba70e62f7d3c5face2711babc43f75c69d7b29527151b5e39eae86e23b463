{
    "generation": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n\n    // Check if the function requires a specific 'this' type and is called with it\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n        JSType thisType = functionType.getThisType();\n\n        if (thisType != null) {\n            // Get the type of 'this' from the call's context\n            JSType actualThisType = getJSTypeForThis(n, t.getScope());\n            if (actualThisType == null || !thisType.isEqualTo(actualThisType, t.getCompiler().getTypeRegistry(), true)) {\n                report(t, n, MUST_CALL_WITH_THIS_TYPE, thisType.toString(), childType.toString());\n            }\n        }\n    }\n\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if(functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n\n        if (functionType.isConstructor() &&\n                !functionType.isNativeObjectType() &&\n                (functionType.getReturnType().isUnknownType() ||\n                 functionType.getReturnType().isVoidType() ||\n                 !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}