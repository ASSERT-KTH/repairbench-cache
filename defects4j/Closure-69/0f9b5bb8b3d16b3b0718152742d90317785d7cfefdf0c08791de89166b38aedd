{
    "generation": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n\n        // Check if the function expects a specific 'this' type\n        JSType thisType = functionType.getThisType();\n        if (thisType != null && !thisType.isUnknownType()) {\n            // Verify that the call is in a GETPROP or GETELEM context\n            Node parent = n.getParent();\n            if (!(parent instanceof GetProp) && !(parent instanceof GetElem)) {\n                report(t, n, \"function (this:\" + thisType.toString() + \") must be called with a 'this' type\");\n            }\n        }\n\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n\n        if (functionType.isConstructor() &&\n                !functionType.isNativeObjectType() &&\n                (functionType.getReturnType().isUnknownType() ||\n                        functionType.getReturnType().isVoidType() ||\n                        !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}