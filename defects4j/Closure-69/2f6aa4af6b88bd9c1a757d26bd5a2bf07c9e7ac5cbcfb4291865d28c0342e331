{
    "generation": "/**\n * Visits a CALL node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n */\nprivate void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource != null && functionSource.isExtern();\n        }\n\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() &&\n            !functionType.isNativeObjectType() &&\n            (functionType.getReturnType().isUnknownType() ||\n             functionType.getReturnType().isVoidType() ||\n             !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n\n        // Functions with explicit 'this' types must be called with a valid 'this' context.\n        if (functionType.getTypeOfThis() != null &&\n            !isThisTypeValid(t, n, functionType.getTypeOfThis())) {\n            report(t, n, FUNCTION_TYPE_MISMATCH, childType.toString());\n        }\n\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n\n    // Additional checks for RegExp objects can be added here if needed.\n}\n\n/**\n * Checks if the 'this' type of a function call is valid.\n *\n * @param t The node traversal object.\n * @param n The CALL node.\n * @param thisType The expected 'this' type.\n * @return True if the 'this' type is valid, false otherwise.\n */\nprivate boolean isThisTypeValid(NodeTraversal t, Node n, JSType thisType) {\n    Node thisNode = n.getFirstChild().getNext();\n    if (thisNode == null || thisNode.isThis()) {\n        // 'this' keyword is used, check if it matches the expected type.\n        JSType thisNodeType = getJSType(thisNode);\n        return thisNodeType != null && thisNodeType.isSubtypeOf(thisType);\n    } else if (thisNode.isGetProp() || thisNode.isGetElem()) {\n        // Property access, check if the object type matches the expected 'this' type.\n        JSType objectType = getJSType(thisNode.getFirstChild());\n        return objectType != null && objectType.isSubtypeOf(thisType);\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}