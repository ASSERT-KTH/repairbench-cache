{
    "generation": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if (functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource != null && functionSource.isExtern();\n        }\n\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() &&\n                !functionType.isNativeObjectType() &&\n                (functionType.getReturnType().isUnknownType() ||\n                        functionType.getReturnType().isVoidType() ||\n                        !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n\n        // Check if the function has an explicit 'this' type\n        if (functionType.getTypeOfThis() != null && !isGetPropOrGetElem(n)) {\n            report(t, n, FUNCTION_TYPE_EXPECTED_THIS_OBJECT, functionType.toString());\n        }\n\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}\n\nprivate boolean isGetPropOrGetElem(Node n) {\n    Node parent = n.getParent();\n    return parent != null && (parent.isGetProp() || parent.isGetElem());\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}