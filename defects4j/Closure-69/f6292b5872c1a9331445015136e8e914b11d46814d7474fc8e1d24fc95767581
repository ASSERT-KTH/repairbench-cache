{
    "generation": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      JSType thisType = functionType.getThisType();\n      if (thisType != null && !thisType.isUnknownType() && !isThisTypeValid(n, thisType)) {\n        report(t, n, BAD_THIS_TYPE, functionType.toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n}\n\nprivate boolean isThisTypeValid(Node callNode, JSType expectedThisType) {\n    Node target = callNode.getFirstChild();\n    // Check if the call is made through a property access or element access\n    if (target.getParent().isCall()) {\n      Node callParent = target.getParent();\n      Node grandParent = callParent.getParent();\n      if (grandParent != null) {\n        if (grandParent.isGetProp() || grandParent.isGetElem()) {\n          return true;\n        }\n      }\n    }\n    // For direct calls on object properties/methods\n    if (target != null) {\n      Node parent = target.getParent();\n      if (parent != null && (parent.isGetProp() || parent.isGetElem())) {\n        return true;\n      }\n    }\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}