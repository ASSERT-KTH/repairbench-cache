{
    "generation": "/**\n * Visits a CALL node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n */\nprivate void visitCall(NodeTraversal t, Node n) {\n  Node child = n.getFirstChild();\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  // A couple of types can be called as if they were functions.\n  // If it is a function type, then validate parameters.\n  if (childType instanceof FunctionType) {\n    FunctionType functionType = (FunctionType) childType;\n\n    boolean isExtern = false;\n    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n    if(functionJSDocInfo != null) {\n      String sourceName = functionJSDocInfo.getSourceName();\n      CompilerInput functionSource = compiler.getInput(sourceName);\n      isExtern = functionSource != null && functionSource.isExtern();\n    }\n\n    // Non-native constructors should not be called directly\n    // unless they specify a return type and are defined\n    // in an extern.\n    if (functionType.isConstructor() &&\n        !functionType.isNativeObjectType() &&\n        (functionType.getReturnType().isUnknownType() ||\n         functionType.getReturnType().isVoidType() ||\n         !isExtern)) {\n      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    }\n\n    // Functions with explcit 'this' types must be called in a GETPROP\n    // or GETELEM.\n    ObjectType thisType = functionType.getTypeOfThis();\n    // Check if it's an explicit 'this' (not the default global one)\n    // When the function syntax explicitly declares a required this-type,\n    // and the call is not a property call (GETPROP, GETELEM), warn.\n    if (functionType.hasThisType() &&\n        !functionType.isInstanceType() &&\n        !NodeUtil.isGet(n.getFirstChild().getType())) {\n      // Only check when this type is not the default global object.\n      // In Closure Compiler, hasThisType() may return true for arrow functions (which are not \"callable with explicit this\").\n      // The logic, as in test, is to warn if this-type \u2260 UNKNOWN and \u2260 global, and call is not via GETPROP/GETELEM.\n      if (!functionType.getTypeOfThis().isUnknownType() &&\n          !functionType.getTypeOfThis().isAllType() &&\n          !NodeUtil.isGet(child.getType())) {\n        report(t, n, FUNCTION_THIS_ARG_EXPECTED,\n            childType.toString());\n      }\n    }\n\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n  } else {\n    ensureTyped(t, n);\n  }\n\n  // TODO: Add something to check for calls of RegExp objects, which is not\n  // supported by IE.  Either say something about the return type or warn\n  // about the non-portability of the call or both.\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}