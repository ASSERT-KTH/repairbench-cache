{
    "generation": "  /**\n   * Visits a CALL node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   */\n  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      // Check for function calls with explicit 'this' types.\n      // Such functions must be called as methods of an object,\n      // e.g. obj.method() or obj['method'](). Exceptions: Constructors and Interfaces.\n      JSType expectedThisType = functionType.getTypeOfThis();\n      // Check if 'this' is explicitly specified (i.e., not UnknownType).\n      // Also exclude constructors and interfaces, as they have different calling conventions\n      // or restrictions.\n      boolean isFunctionWithExplicitThis = !expectedThisType.isUnknownType() &&\n          !functionType.isConstructor() && !functionType.isInterface();\n      // Check if the call is a method call (obj.method() or obj['method']()).\n      boolean isMethodCall = child.isGetProp() || child.isGetElem();\n\n      // If a function requires an explicit 'this' but is not called as a method, report a warning.\n      if (isFunctionWithExplicitThis && !isMethodCall) {\n        report(t, n, FUNCTION_WITH_EXPLICIT_THIS, childType.toString());\n      }\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        // sourceName can be null for synthesized nodes.\n        if (sourceName != null) {\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            // functionSource can be null if the input is unavailable.\n            if (functionSource != null) {\n                isExtern = functionSource.isExtern();\n            }\n        }\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        // This check should ideally happen before the explicit 'this' check,\n        // but the original code had it here. Leaving it here for minimal changes,\n        // although the logic might slightly overlap or interact with the 'this' check\n        // in edge cases involving constructors with @this annotations (which is unusual).\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM. (Check performed above).\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}