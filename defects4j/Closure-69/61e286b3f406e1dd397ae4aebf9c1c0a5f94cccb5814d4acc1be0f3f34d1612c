{
    "generation": "  /**\n   * Visits a CALL node.\n   *\n   * @param t The node traversal object that supplies context, such as the\n   * scope chain to use in name lookups as well as error reporting.\n   * @param n The node being visited.\n   */\n  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if (functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        // Check if sourceName is null, as it can be (e.g. for built-in types).\n        if (sourceName != null) {\n          CompilerInput functionSource = compiler.getInput(sourceName);\n          // functionSource can be null if the function is defined in a synthesized script.\n          if (functionSource != null) {\n            isExtern = functionSource.isExtern();\n          }\n        }\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explcit 'this' types must be called in a GETPROP\n      // or GETELEM, or with .call/.apply\n      JSType typeOfThis = functionType.getTypeOfThis();\n      // NoObjectType means function is specified with @this {void} or has no\n      // @this annotation. UnknownType means we don't know the type.\n      // In either case, we don't complain.\n      if (!typeOfThis.isUnknownType() && !typeOfThis.isNoObjectType()) {\n        Node callTarget = n.getFirstChild();\n        boolean isMethodCall = callTarget.isGetProp() || callTarget.isGetElem();\n        boolean isCallOrApply = false;\n\n        if (isMethodCall) {\n           // Check if the call is explicitly using .call or .apply\n           String methodName = callTarget.getLastChild().getString();\n           if (\"call\".equals(methodName) || \"apply\".equals(methodName)) {\n               // Verify the object being called upon is actually a function\n               // or the Function prototype.\n               Node receiver = callTarget.getFirstChild();\n               JSType receiverType = getJSType(receiver).restrictByNotNullOrUndefined();\n               if (receiverType.isFunctionType() || receiverType.isFunctionPrototypeType()) {\n                   isCallOrApply = true;\n               }\n           }\n        }\n\n        // If it's not a method call (like obj.f(), arr[0]()) and it's not an\n        // explicit .call or .apply invocation, then issue a warning.\n        if (!isMethodCall && !isCallOrApply) {\n          report(t, n, NEED_EXPLICIT_THIS_TYPE, functionType.toString());\n        }\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}