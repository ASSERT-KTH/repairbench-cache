{
    "generation": "void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else {\n        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      // ... unchanged case statements ...\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        Context rhsContext = Context.OTHER;\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n\n        // Patch: parens for IN operator inside HOOK\n        Node trueBranch = first.getNext();\n        boolean encloseTrueBranch =\n            trueBranch.getType() == Token.IN;\n        if (encloseTrueBranch) {\n          add(\"(\");\n          addExpr(trueBranch, 1, rhsContext);\n          add(\")\");\n        } else {\n          addExpr(trueBranch, 1, rhsContext);\n        }\n\n        cc.addOp(\":\", true);\n\n        // Patch: parens for IN operator in the else branch\n        boolean encloseFalseBranch =\n            last.getType() == Token.IN;\n        if (encloseFalseBranch) {\n          add(\"(\");\n          addExpr(last, 1, rhsContext);\n          add(\")\");\n        } else {\n          addExpr(last, 1, rhsContext);\n        }\n        break;\n      }\n\n      // ... rest unchanged ...\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}