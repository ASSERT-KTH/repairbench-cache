{
    "generation": "  void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n      return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);\n      int p = NodeUtil.precedence(type);\n\n      // For right-hand-side of operations, only pass context if it's\n      // the IN_FOR_INIT_CLAUSE one.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Handle associativity.\n      // e.g. if the parse tree is a * (b * c),\n      // we can simply generate a * b * c.\n      if (last.getType() == type &&\n          NodeUtil.isAssociative(type)) {\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n        // Assignments are the only right-associative binary operators\n        addExpr(first, p, context);\n        cc.addOp(opstr, true);\n        addExpr(last, p, rhsContext);\n      } else {\n        // === BUG FIX HERE ===\n        // In the IN_FOR_INIT_CLAUSE context, always parenthesize \"in\" expressions,\n        // even inside a hook or comma, to preserve correct operator precedence.\n        boolean needsParensForIn = (type == Token.IN)\n            && (context == Context.IN_FOR_INIT_CLAUSE);\n        if (needsParensForIn) {\n          add(\"(\");\n        }\n        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n        if (needsParensForIn) {\n          add(\")\");\n        }\n      }\n      return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n      // ... unmodified code below ...\n      // [The rest of the switch and function body remains unchanged.]\n      // Only the handling of binary operators above is modified.\n      // ... Omitted for brevity ...\n      // End of function stays the same.\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }\n\n    cc.endSourceMapping(n);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}