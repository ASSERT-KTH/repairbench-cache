{
    "generation": "void add(Node n, Context context) {\n    if (!cc.continueProcessing()) {\n        return;\n    }\n\n    int type = n.getType();\n    String opstr = NodeUtil.opToStr(type);\n    int childCount = n.getChildCount();\n    Node first = n.getFirstChild();\n    Node last = n.getLastChild();\n\n    // Handle all binary operators\n    if (opstr != null && first != last) {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n            opstr, childCount);\n        int p = NodeUtil.precedence(type);\n\n        // For right-hand-side of operations, only pass context if it's\n        // the IN_FOR_INIT_CLAUSE one.\n        Context rhsContext = getContextForNoInOperator(context);\n\n        boolean isInOperator = (type == Token.IN);\n\n        // Handle associativity.\n        // e.g. if the parse tree is a * (b * c),\n        // we can simply generate a * b * c.\n        if (last.getType() == type &&\n            NodeUtil.isAssociative(type)) {\n            addExpr(first, p, context);\n            cc.addOp(opstr, true);\n            addExpr(last, p, rhsContext);\n        } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n            // Assignments are the only right-associative binary operators\n            addExpr(first, p, context);\n            cc.addOp(opstr, true);\n            addExpr(last, p, rhsContext);\n        } else {\n            int lhsMinPrecedence = p;\n            int rhsMinPrecedence = p + 1;\n            // Special handling: Parenthesize 'in' operator when in for init clause or inside comma/hook\n            if (isInOperator) {\n                boolean needsParens =\n                    context == Context.IN_FOR_INIT_CLAUSE || context == Context.OTHER;\n                if (needsParens) {\n                    add(\"(\");\n                }\n                addExpr(first, lhsMinPrecedence, context);\n                cc.addOp(opstr, true);\n                addExpr(last, rhsMinPrecedence, rhsContext);\n                if (needsParens) {\n                    add(\")\");\n                }\n                return;\n            }\n\n            unrollBinaryOperator(n, type, opstr, context, rhsContext, lhsMinPrecedence, rhsMinPrecedence);\n        }\n        return;\n    }\n\n    cc.startSourceMapping(n);\n\n    switch (type) {\n        // ... REMAINING CONTENT UNCHANGED ...\n        // The rest of the method remains unchanged; omitted for brevity\n    }\n\n    cc.endSourceMapping(n);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}