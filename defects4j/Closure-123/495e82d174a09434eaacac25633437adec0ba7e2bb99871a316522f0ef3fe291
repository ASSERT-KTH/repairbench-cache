{
    "generation": "void add(Node n, Context context) {\n    // ... [previous code remains unchanged until the Token.HOOK case]\n\n    case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        Context rhsContext = Context.OTHER;\n\n        // Check if either operand contains an \"in\" operator and wrap with parentheses if needed\n        boolean leftNeedsParens = NodeUtil.containsType(first, Token.IN);\n        boolean rightNeedsParens = NodeUtil.containsType(first.getNext(), Token.IN);\n\n        if (leftNeedsParens) {\n            add(\"(\");\n        }\n        addExpr(first, p + 1, context);\n        if (leftNeedsParens) {\n            add(\")\");\n        }\n\n        cc.addOp(\"?\", true);\n\n        if (rightNeedsParens) {\n            add(\"(\");\n        }\n        addExpr(first.getNext(), 1, rhsContext);\n        if (rightNeedsParens) {\n            add(\")\");\n        }\n\n        cc.addOp(\":\", true);\n\n        addExpr(last, 1, rhsContext);\n        break;\n    }\n\n    // ... [rest of the code remains unchanged]\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}