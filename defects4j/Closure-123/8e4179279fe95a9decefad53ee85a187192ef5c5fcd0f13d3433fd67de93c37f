{
    "generation": "/**\n * The main pretty-print method.  This method walks the AST and emits the\n * source text (with minimal legal alterations).\n */\nvoid add(Node n, Context context) {\n  if (!cc.continueProcessing()) {\n    return;\n  }\n\n  int type = n.getType();\n  String opstr = NodeUtil.opToStr(type);\n  int childCount = n.getChildCount();\n  Node first = n.getFirstChild();\n  Node last = n.getLastChild();\n\n  // Handle all binary operators\n  if (opstr != null && first != last) {\n    Preconditions.checkState(\n        childCount == 2,\n        \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n        opstr, childCount);\n    int p = NodeUtil.precedence(type);\n\n    // For right-hand-side of operations, only pass context if it's\n    // the IN_FOR_INIT_CLAUSE one.\n    Context rhsContext = getContextForNoInOperator(context);\n\n    // Handle associativity.\n    // e.g. if the parse tree is a * (b * c),\n    // we can simply generate a * b * c.\n    if (last.getType() == type &&\n        NodeUtil.isAssociative(type)) {\n      addExpr(first, p, context);\n      cc.addOp(opstr, true);\n      addExpr(last, p, rhsContext);\n    } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n      // Assignments are the only right-associative binary operators\n      addExpr(first, p, context);\n      cc.addOp(opstr, true);\n      addExpr(last, p, rhsContext);\n    } else {\n      unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n    }\n    return;\n  }\n\n  cc.startSourceMapping(n);\n\n  switch (type) {\n    // ... (all other cases unchanged) ...\n\n    case Token.HOOK: {\n      Preconditions.checkState(childCount == 3);\n      int p = NodeUtil.precedence(type);\n\n      // Propagate the FOR_INIT_CLAUSE context so any nested \"in\"\n      // operators get parenthesized when inside a for-init.\n      Context rhsContext = getContextForNoInOperator(context);\n\n      // Print the condition:\n      addExpr(first, p + 1, context);\n      cc.addOp(\"?\", true);\n\n      // Print the \"then\" branch:\n      addExpr(first.getNext(), 1, rhsContext);\n      cc.addOp(\":\", true);\n\n      // Print the \"else\" branch:\n      addExpr(last, 1, rhsContext);\n      break;\n    }\n\n    // ... (all other cases unchanged) ...\n\n    default:\n      throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n  }\n\n  cc.endSourceMapping(n);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}