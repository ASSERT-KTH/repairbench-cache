{
    "generation": "  void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n      return;\n    }\n\n    char c = newcode.charAt(0);\n    char last = getLastChar(); // Get the last character appended.\n\n    // Check if the last character appended was a word character (letter, number, underscore)\n    // and the new character is also a word character or a backslash.\n    // If so, add a space to separate them (e.g., \"return\" + \"foo\" -> \"return foo\").\n    if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(last)) {\n      // need space to separate. This is not pretty printing.\n      // For example: \"return foo;\"\n      append(\" \");\n    // Add a space if the last character was '/' and the new code starts with '/',\n    // to avoid ambiguity with comments or division operators, e.g., // or / /.\n    // This specifically addresses issues like printing / / / as / // /.\n    } else if (c == '/' && last == '/') {\n      // Do not allow a forward slash to appear immediately after a\n      // slash. For example,\n      // REGEXP DIV REGEXP\n      // is valid and should print like\n      // / // / /\n      // Note that this is different from the case where the first slash\n      // isCOMMENT. We don't handle that case here.\n\n      // REGEXP REGEXP\n      // is valid and should print like\n      // / / / /\n\n      // MOD ZERO\n      // is valid and should print like\n      // % 0\n      append(\" \");\n    }\n\n    append(newcode);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}