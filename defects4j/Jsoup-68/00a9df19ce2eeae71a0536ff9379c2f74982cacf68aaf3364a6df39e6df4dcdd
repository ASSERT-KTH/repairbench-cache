{
    "generation": "    private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n        // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope\n\n        // The actual index of the top element on the stack (highest index).\n        final int bottom = stack.size() - 1;\n\n        // Calculate the lowest index to search (the 'top' of the search range).\n        // MaxScopeSearchDepth specifies the maximum number of elements to check from the 'bottom' (current element).\n        // If MaxScopeSearchDepth is 1, we check only the 'bottom' element.\n        // If MaxScopeSearchDepth is N, we check N elements: bottom, bottom-1, ..., bottom-(N-1).\n        // So, the lowest index to check is bottom - (MaxScopeSearchDepth - 1).\n        // This value must not be less than 0.\n        final int top = Math.max(0, bottom - (MaxScopeSearchDepth - 1));\n\n        // don't walk too far up the tree\n        // The loop correctly iterates from the actual top of the stack down to the calculated 'top' boundary.\n        for (int pos = bottom; pos >= top; pos--) {\n            final String elName = stack.get(pos).nodeName();\n            if (inSorted(elName, targetNames))\n                return true;\n            if (inSorted(elName, baseTypes))\n                return false;\n            if (extraTypes != null && inSorted(elName, extraTypes))\n                return false;\n        }\n        //Validate.fail(\"Should not be reachable\"); // would end up false because hitting 'html' at root (basetypes)\n        return false;\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}