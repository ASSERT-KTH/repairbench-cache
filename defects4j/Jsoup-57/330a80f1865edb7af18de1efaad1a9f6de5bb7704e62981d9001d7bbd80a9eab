{
    "generation": "    /**\n     Remove an attribute by key. <b>Case insensitive.</b>\n     @param key attribute key to remove\n     */\n    public void removeIgnoreCase(String key) {\n        Validate.notEmpty(key);\n        if (attributes == null)\n            return;\n        // Iterate using the iterator's remove method to avoid ConcurrentModificationException\n        for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n            String attrKey = it.next();\n            if (attrKey.equalsIgnoreCase(key)) {\n                it.remove(); // Use iterator's remove method\n                // Assuming attribute keys are unique case-insensitively,\n                // we can break after finding the first match.\n                // However, the original code iterated through all, so we retain that behavior\n                // unless optimization is explicitly desired and safe.\n                // If multiple keys could match case-insensitively (unlikely for standard maps),\n                // this loop would remove all of them.\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}