{
    "generation": "    protected void addChildren(int index, Node... children) {\n        Validate.noNullElements(children);\n        ensureChildNodes();\n\n        // First pass: If any children are already children of this node, remove them first.\n        // This is necessary because we might be moving them to a different position,\n        // and removing them first avoids index issues and concurrent modification problems\n        // during the addition phase. We must remove them by object identity for correctness\n        // in case Nodes are effectively equal but different instances.\n        for (Node child : children) {\n            if (child.parentNode == this) {\n                // Use remove(Object) which relies on equals(). Node uses identity equals by default.\n                // This finds the specific instance and removes it.\n                childNodes.remove(child);\n                // Note: We do not call this.removeChild(child) as that has side effects\n                // like reindexing which we want to defer until the end of the operation.\n                // The child's parentNode link is temporarily incorrect (still points to this)\n                // but will be corrected in the second pass.\n            }\n        }\n\n        // Second pass: Add the children at the specified index. Iterate backwards through the\n        // input `children` array to maintain the intended order when inserting at `index`.\n        for (int i = children.length - 1; i >= 0; i--) {\n            Node in = children[i];\n\n            // Reparent the child. Remove from previous parent if it exists and is *not this*.\n            // This check prevents attempting to remove self from self if the node was already a child.\n            if (in.parentNode != null && in.parentNode != this) {\n                // If the node had a different parent, remove it from there cleanly.\n                in.parentNode.removeChild(in);\n            }\n\n            // Set the parent node for the child to this node.\n            in.setParentNode(this);\n\n            // Add the child to this node's children list at the specified index.\n            childNodes.add(index, in);\n        }\n\n        // Final step: Reindex all children starting from the insertion point.\n        // This sets the correct siblingIndex for all children affected by the additions/moves.\n        // We only need to reindex from the insertion point onwards.\n        reindexChildren(index);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}