{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n    if (!token.startsWith(\"-\") || token.length() == 1)\n    {\n        return false;\n    }\n\n    // handle several concatenated short options (e.g. -ab)\n    String tokenBody;\n    int pos = token.indexOf(\"=\");\n    if (pos == -1) {\n        tokenBody = token.substring(1);\n    } else {\n        tokenBody = token.substring(1, pos);\n    }\n\n    // If the full body is a known short option, return true.\n    if (options.hasShortOption(tokenBody)) {\n        return true;\n    }\n\n    // If all characters in the body are individual short options, return true.\n    for (int i = 0; i < tokenBody.length(); ++i) {\n        String ch = String.valueOf(tokenBody.charAt(i));\n        if (!options.hasShortOption(ch)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}