{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     *\n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (!token.startsWith(\"-\") || token.length() == 1)\n        {\n            return false;\n        }\n\n        // check if this is a single short option with value (-S=V)\n        int pos = token.indexOf(\"=\");\n        if (pos != -1) {\n            String optName = token.substring(1, pos);\n            if (optName.length() == 1 && options.hasShortOption(optName)) {\n                return true;\n            }\n        }\n\n        // for concatenated short options (-S1S2) or single short option (-S)\n        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\n        if (optName.length() == 1) {\n            return options.hasShortOption(optName);\n        } else {\n            // check if all characters are valid short options\n            for (int i = 0; i < optName.length(); i++) {\n                if (!options.hasShortOption(optName.substring(i, i+1))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}