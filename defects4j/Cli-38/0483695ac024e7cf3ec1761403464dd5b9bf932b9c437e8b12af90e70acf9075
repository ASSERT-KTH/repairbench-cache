{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n    if (!token.startsWith(\"-\") || token.length() == 1)\n    {\n        return false;\n    }\n\n    // remove leading \"-\" and \"=value\"\n    int pos = token.indexOf(\"=\");\n    String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\n\n    // if the whole optName is a known short option, return true\n    if (options.hasShortOption(optName)) {\n        return true;\n    }\n\n    // else, if the first character is a short option (concatenated short options case)\n    String firstOpt = optName.substring(0, 1);\n    if (options.hasShortOption(firstOpt)) {\n        // do not check about subsequent letters here, they will be handled during parsing\n        return true;\n    }\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}