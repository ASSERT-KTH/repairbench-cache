{
    "generation": "/**\n * Tells if the token looks like a short option.\n *\n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n    if (!token.startsWith(\"-\") || token.length() == 1)\n    {\n        return false;\n    }\n\n    // check for several concatenated short options\n    if (token.startsWith(\"--\"))\n    {\n        return false;\n    }\n\n    // remove leading \"-\" and \"=value\"\n    int pos = token.indexOf(\"=\");\n    String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\n\n    // Check if the first character is a valid short option\n    if (optName.length() > 0 && options.hasShortOption(optName.substring(0, 1))) {\n        return true;\n    }\n\n    // Check if the entire token (without - and =value) is a valid short option\n    if (options.hasShortOption(optName)) {\n        return true;\n    }\n\n    // For concatenated short options (like -abcd), check if all characters are valid short options\n    for (int i = 0; i < optName.length(); i++) {\n        String singleOption = optName.substring(i, i + 1);\n        if (!options.hasShortOption(singleOption)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}