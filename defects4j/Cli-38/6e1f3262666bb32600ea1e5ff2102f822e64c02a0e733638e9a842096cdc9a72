{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token) {\n    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2, concatenated -ab)\n    if (!token.startsWith(\"-\") || token.length() == 1) {\n        return false;\n    }\n\n    // strip leading \"-\" and any \"=value\"\n    int eq = token.indexOf(\"=\");\n    String optName = (eq == -1)\n        ? token.substring(1)\n        : token.substring(1, eq);\n\n    // exact match (including multi\u2010char short options)\n    if (options.hasShortOption(optName)) {\n        return true;\n    }\n\n    // check for several concatenated single\u2010char short options, e.g. \"-ab\"\n    if (eq == -1 && optName.length() > 1) {\n        for (int i = 0; i < optName.length(); i++) {\n            String s = Character.toString(optName.charAt(i));\n            // each must exist and must not require its own argument\n            if (!options.hasShortOption(s)\n                || options.getOption(s).hasArg()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}