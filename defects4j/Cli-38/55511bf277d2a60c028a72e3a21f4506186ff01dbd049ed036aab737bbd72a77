{
    "generation": "/**\n * Tells if the token looks like a short option.\n * \n * @param token\n */\nprivate boolean isShortOption(String token)\n{\n    // short options (-S, -SV, -S=V, -SV1=V2, -S1S2, -ab)\n    if (!token.startsWith(\"-\") || token.length() == 1)\n    {\n        return false;\n    }\n\n    // strip leading \"-\" and any \"=value\"\n    int pos = token.indexOf(\"=\");\n    String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\n\n    // a single known short option (with or without attached value)\n    if (options.hasShortOption(optName))\n    {\n        return true;\n    }\n\n    // check for concatenated short options, e.g. \"-ab\"\n    if (optName.length() > 1)\n    {\n        for (char c : optName.toCharArray())\n        {\n            String s = String.valueOf(c);\n            // each must be a known short option and none may take an argument\n            if (!options.hasShortOption(s) || options.getOption(s).hasArg())\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    return false;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}