{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     *\n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (!token.startsWith(\"-\") || token.length() == 1)\n        {\n            return false;\n        }\n\n        // check for several concatenated short options\n        if (!token.contains(\"=\") && token.length() > 2) {\n            // For concatenated short options without '='\n            String opts = token.substring(1);\n            for (int i = 0; i < opts.length(); i++) {\n                String optName = opts.substring(i, i+1);\n                if (!options.hasShortOption(optName)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        // remove leading \"-\" and \"=value\"\n        int pos = token.indexOf(\"=\");\n        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\n        return options.hasShortOption(optName);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}