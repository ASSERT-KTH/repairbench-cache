{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     * \n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (!token.startsWith(\"-\") || token.length() == 1)\n        {\n            return false;\n        }\n\n        // remove leading \"-\" and \"=value\"\n        int pos = token.indexOf(\"=\");\n        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\n        \n        // A token is considered a short option if:\n        // 1. Its full name (after stripping leading '-' and trailing '=value') is a registered short option (e.g., \"-t1\" where \"t1\" is an option).\n        // OR\n        // 2. It represents concatenated short options, meaning its first character after the hyphen\n        //    is a registered short option (e.g., \"-ab\" where \"a\" is an option).\n        return options.hasShortOption(optName) || (optName.length() > 0 && options.hasShortOption(optName.substring(0, 1)));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}