{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     *\n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (!token.startsWith(\"-\") || token.length() == 1)\n        {\n            return false;\n        }\n\n        // Check if all characters (after '-') are valid short options\n        String candidate = token.substring(1);\n        int equalPos = candidate.indexOf('=');\n        if (equalPos != -1) {\n            candidate = candidate.substring(0, equalPos);\n        }\n\n        // Check if each character in the candidate is a valid short option\n        if (options.hasShortOption(candidate)) {\n            return true;\n        }\n\n        // Check for concatenated short options\n        for (int i = 0; i < candidate.length(); i++) {\n            String opt = candidate.substring(i, i+1);\n            if (!options.hasShortOption(opt)) {\n                return false;\n            }\n        }\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}