{
    "generation": "    /**\n     * Tells if the token looks like a short option.\n     *\n     * @param token\n     */\n    private boolean isShortOption(String token)\n    {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (!token.startsWith(\"-\") || token.length() == 1)\n        {\n            return false;\n        }\n\n        // check for several concatenated short options (like -ab)\n        if (token.length() > 2 && !token.contains(\"=\") && !options.hasShortOption(token.substring(1))) {\n            // check if all chars in substring are separate short options\n            String optChars = token.substring(1);\n            for (char c : optChars.toCharArray()) {\n                if (!options.hasShortOption(String.valueOf(c))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        // remove leading \"-\" and \"=value\"\n        int pos = token.indexOf(\"=\");\n        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\n        return options.hasShortOption(optName);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}