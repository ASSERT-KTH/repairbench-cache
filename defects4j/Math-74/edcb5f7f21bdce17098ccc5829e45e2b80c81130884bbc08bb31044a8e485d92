{
    "generation": "@Override\npublic double integrate(final FirstOrderDifferentialEquations equations,\n                        final double t0, final double[] y0,\n                        final double t, final double[] y)\n    throws DerivativeException, IntegratorException {\n\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    // In Adams\u2013Moulton the FSAL shortcut is not applicable,\n    // so we force it to false to always recompute the derivatives.\n    fsal = false;\n    final boolean forward = t > t0;\n\n    // Create internal working arrays.\n    final int stages = c.length + 1;\n    if (y != y0) {\n        System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][y0.length];\n    final double[] yTmp = new double[y0.length];\n\n    // Set up the step interpolator.\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n        rki.reinitialize(this, yTmp, yDotK, forward);\n        interpolator = rki;\n    } else {\n        interpolator = new DummyStepInterpolator(yTmp, forward);\n    }\n    interpolator.storeTime(t0);\n\n    // Set up integration control objects.\n    stepStart = t0;\n    double hNew = 0;\n    boolean firstTime = true;\n    for (StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    boolean lastStep = false;\n\n    // Main integration loop.\n    while (!lastStep) {\n\n        interpolator.shift();\n\n        double error = 0;\n        // Loop to try one step with a given stepsize.\n        for (boolean loop = true; loop;) {\n\n            // ALWAYS compute derivatives at the beginning of the step.\n            computeDerivatives(stepStart, y, yDotK[0]);\n\n            if (firstTime) {\n                final double[] scale;\n                if (vecAbsoluteTolerance == null) {\n                    scale = new double[y0.length];\n                    java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n                } else {\n                    scale = vecAbsoluteTolerance;\n                }\n                hNew = initializeStep(equations, forward, getOrder(), scale,\n                                      stepStart, y, yDotK[0], yTmp, yDotK[1]);\n                firstTime = false;\n            }\n\n            stepSize = hNew;\n\n            // Compute the intermediate stages.\n            for (int k = 1; k < stages; ++k) {\n                for (int j = 0; j < y0.length; ++j) {\n                    double sum = a[k - 1][0] * yDotK[0][j];\n                    for (int l = 1; l < k; ++l) {\n                        sum += a[k - 1][l] * yDotK[l][j];\n                    }\n                    yTmp[j] = y[j] + stepSize * sum;\n                }\n\n                computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]);\n            }\n\n            // Estimate the state at the end of the step.\n            for (int j = 0; j < y0.length; ++j) {\n                double sum = b[0] * yDotK[0][j];\n                for (int l = 1; l < stages; ++l) {\n                    sum += b[l] * yDotK[l][j];\n                }\n                yTmp[j] = y[j] + stepSize * sum;\n            }\n\n            // Estimate the error.\n            error = estimateError(yDotK, y, yTmp, stepSize);\n            if (error <= 1.0) {\n                // Handle discrete events.\n                interpolator.storeTime(stepStart + stepSize);\n                if (manager.evaluateStep(interpolator)) {\n                    final double dt = manager.getEventTime() - stepStart;\n                    if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                        // The next step would be too small, so accept it.\n                        loop = false;\n                    } else {\n                        // Adjust hNew to hit the event exactly.\n                        hNew = dt;\n                    }\n                } else {\n                    // The step is accepted.\n                    loop = false;\n                }\n            } else {\n                // Reject the step and reduce stepsize.\n                final double factor = Math.min(maxGrowth,\n                    Math.max(minReduction, safety * Math.pow(error, exp)));\n                hNew = filterStep(stepSize * factor, forward, false);\n            }\n        }\n\n        // The step has been accepted.\n        final double nextStep = stepStart + stepSize;\n        System.arraycopy(yTmp, 0, y, 0, y0.length);\n        manager.stepAccepted(nextStep, y);\n        lastStep = manager.stop();\n\n        // Let the step handlers process the step.\n        interpolator.storeTime(nextStep);\n        for (StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, lastStep);\n        }\n        stepStart = nextStep;\n\n        if (manager.reset(stepStart, y) && !lastStep) {\n            // An event handler altered the state so recompute derivatives.\n            computeDerivatives(stepStart, y, yDotK[0]);\n        }\n\n        if (!lastStep) {\n            // Make sure stepSize is non zero.\n            stepSize = filterStep(stepSize, forward, true);\n\n            // Control the stepsize for the next step.\n            final double factor = Math.min(maxGrowth,\n                Math.max(minReduction, safety * Math.pow(error, exp)));\n            final double scaledH = stepSize * factor;\n            final double nextT = stepStart + scaledH;\n            final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n            hNew = filterStep(scaledH, forward, nextIsLast);\n        }\n    }\n\n    final double stopTime = stepStart;\n    resetInternalState();\n    return stopTime;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}