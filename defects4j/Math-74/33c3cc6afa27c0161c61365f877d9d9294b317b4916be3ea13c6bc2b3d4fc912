{
    "generation": "  /** {@inheritDoc} */\n  @Override\n  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException {\n\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    final boolean forward = t > t0;\n\n    // create some internal working arrays\n    final int stages = c.length + 1;\n    if (y != y0) {\n      System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][y0.length];\n    final double[] yTmp = new double[y0.length];\n\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n      rki.reinitialize(this, yTmp, yDotK, forward);\n      interpolator = rki;\n    } else {\n      interpolator = new DummyStepInterpolator(yTmp, forward);\n    }\n    interpolator.storeTime(t0);\n\n    // set up integration control objects\n    stepStart         = t0;\n    double  hNew      = 0;\n    // Use a flag for the very first step evaluation, to avoid recomputing K1\n    boolean firstStepAttempt = true;\n\n    for (StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    boolean lastStep = false;\n\n    // main integration loop\n    while (!lastStep) {\n\n      interpolator.shift();\n\n      double error = 0;\n      for (boolean loop = true; loop;) {\n\n        // First stage computation: compute yDotK[0] = f(stepStart, y)\n        // This is always needed if it's the first step attempt OR if FSAL is not enabled.\n        // If FSAL is enabled and it's not the first step attempt, yDotK[0] should\n        // already hold the derivative from the end of the previous successful step.\n        if (firstStepAttempt || !fsal) {\n          computeDerivatives(stepStart, y, yDotK[0]);\n        }\n\n        int kStart = 1; // Default starting index for stage computations (k=1 corresponds to yDotK[1])\n        if (firstStepAttempt) {\n          // Initialize the step size hNew on the very first attempt\n          final double[] scale;\n          if (vecAbsoluteTolerance == null) {\n              scale = new double[y0.length];\n              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n            } else {\n              scale = vecAbsoluteTolerance;\n            }\n          // initializeStep computes the first step size hNew\n          // and it internally computes the second derivative estimate yDotK[1]\n          hNew = initializeStep(equations, forward, getOrder(), scale,\n                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n\n          // Since initializeStep computed yDotK[1], the stages loop below\n          // should start from k=2 for this first attempt to avoid redundant computation.\n          kStart = 2;\n\n          // Mark that the first step initialization is done.\n          // This flag should remain false even if the first attempt is rejected.\n          firstStepAttempt = false;\n        }\n        // stepSize is the size to be used for the current attempt\n        stepSize = hNew;\n\n        // compute next stages (yDotK[kStart] ... yDotK[stages-1])\n        for (int k = kStart; k < stages; ++k) {\n\n          for (int j = 0; j < y0.length; ++j) {\n            double sum = a[k-1][0] * yDotK[0][j];\n            for (int l = 1; l < k; ++l) {\n              sum += a[k-1][l] * yDotK[l][j];\n            }\n            yTmp[j] = y[j] + stepSize * sum;\n          }\n\n          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n\n        }\n\n        // estimate the state at the end of the step\n        for (int j = 0; j < y0.length; ++j) {\n          double sum    = b[0] * yDotK[0][j];\n          for (int l = 1; l < stages; ++l) {\n            sum    += b[l] * yDotK[l][j];\n          }\n          yTmp[j] = y[j] + stepSize * sum;\n        }\n\n        // estimate the error at the end of the step\n        error = estimateError(yDotK, y, yTmp, stepSize);\n        if (error <= 1.0) {\n\n          // Step is within error tolerance. Check for events.\n          interpolator.storeTime(stepStart + stepSize);\n          if (manager.evaluateStep(interpolator)) {\n              // An event occurred during the step. Need to handle it.\n              final double dt = manager.getEventTime() - stepStart;\n              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n                  // Event occurs very close to the start. Accept the current step to avoid ultra-small steps.\n                  // Might slightly overshoot the event time.\n                  loop = false; // Accept step and exit inner loop\n              } else {\n                  // Event occurs within the step. Reject the current step size\n                  // and retry with a new step size hNew = dt to hit the event time exactly.\n                  hNew = dt;\n                  // loop remains true, inner loop continues with the new hNew\n              }\n          } else {\n            // No event detected. Accept the step.\n            loop = false; // Exit inner loop\n          }\n\n        } else {\n          // Error is too large. Reject the step and reduce step size.\n          final double factor =\n              Math.min(maxGrowth,\n                       Math.max(minReduction, safety * Math.pow(error, exp)));\n          hNew = filterStep(stepSize * factor, forward, false);\n          // loop remains true, inner loop continues with the reduced hNew\n        }\n\n      } // End of inner step control loop (exits when a step is accepted)\n\n      // The step has been accepted (error is acceptable, and events are handled)\n      final double nextStep = stepStart + stepSize; // stepSize is the size of the accepted step\n      System.arraycopy(yTmp, 0, y, 0, y0.length); // Update the state array y\n      manager.stepAccepted(nextStep, y);\n      lastStep = manager.stop(); // Check if the integration should stop\n\n      // provide the step data to the step handler\n      interpolator.storeTime(nextStep);\n      for (StepHandler handler : stepHandlers) {\n          handler.handleStep(interpolator, lastStep);\n      }\n      stepStart = nextStep; // Advance stepStart to the end of the accepted step\n\n      if (fsal) {\n        // If First Same As Last optimization applies, save the last evaluation\n        // f(t_n+1, y_n+1) = yDotK[stages - 1] for use as the first evaluation\n        // f(t_{n+1}, y_{n+1}) = yDotK[0] in the next step.\n        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n      }\n\n      if (manager.reset(stepStart, y) && ! lastStep) {\n        // An event handler requested a state reset, this invalidates the current derivatives.\n        // Recompute the derivative at the new step start.\n        computeDerivatives(stepStart, y, yDotK[0]);\n        // This overwrites the potentially saved FSAL value, which is correct.\n      }\n\n      if (! lastStep) {\n        // Prepare for the next step: step size control\n\n        // Ensure stepSize is not zero (could happen with events at step boundaries)\n        stepSize = filterStep(stepSize, forward, true);\n\n        // Calculate the step size for the next attempt using the error from the accepted step\n        final double factor = Math.min(maxGrowth,\n                                       Math.max(minReduction,\n                                                safety * Math.pow(error, exp)));\n        final double scaledH = stepSize * factor;\n        final double nextT = stepStart + scaledH;\n        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n        // hNew holds the recommended step size for the next step attempt\n        hNew = filterStep(scaledH, forward, nextIsLast);\n      }\n\n    } // End of main integration loop (while !lastStep)\n\n    final double stopTime = stepStart;\n    resetInternalState();\n    return stopTime;\n\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}