{
    "generation": "    @Override\n    public int read() throws IOException {\n        int current = super.read();\n        // Increment lineCounter for line breaks.\n        // Handles CR, LF, and CRLF sequences correctly.\n        if (current == '\\n') {\n            // If current is LF and the previous character was NOT CR,\n            // then it's a standalone LF, so increment.\n            // If previous was CR, it's part of a CRLF sequence, and CR already incremented the counter.\n            if (lastChar != '\\r') {\n                lineCounter++;\n            }\n        } else if (current == '\\r') {\n            // A carriage return always increments the line counter.\n            // If it's followed by LF, the LF will be ignored by the above 'if' clause,\n            // preventing double-counting for CRLF.\n            lineCounter++;\n        }\n        lastChar = current; // Store the current character for the next read\n        return lastChar;    // Return the character read\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}