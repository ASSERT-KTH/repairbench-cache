{
    "generation": "    @Override\n    public int read() throws IOException {\n        int current = super.read();\n        // If the current character is a newline (LF)\n        if (current == '\\n') {\n            // Increment lineCounter only if the previous character was NOT a carriage return (CR).\n            // This prevents double-counting for '\\r\\n' sequences, as the '\\r' part\n            // would have already incremented the counter (see the else-if block).\n            if (lastChar != '\\r') {\n                lineCounter++;\n            }\n        }\n        // If the current character is a carriage return (CR)\n        else if (current == '\\r') {\n            // Always increment lineCounter for a CR.\n            // If this CR is part of an '\\r\\n' sequence, the subsequent '\\n' will be\n            // handled by the 'if (current == '\\n')' block, but it will not increment\n            // due to the 'lastChar != '\\r'' check.\n            lineCounter++;\n        }\n        lastChar = current; // Store the current character for the next read operation\n        return lastChar;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}