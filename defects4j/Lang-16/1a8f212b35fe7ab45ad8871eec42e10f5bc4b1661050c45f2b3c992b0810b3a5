{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            // behaviour changed across JDK versions, see LANG-1006\n            return null;\n        }\n        // Fixed: Handle 0X/-0X case-insensitively for hex detection\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n            // Note: NFE checking is done by createInteger (which calls Integer.decode)\n            // Note: Should handle L suffix? Decided against for now (see LANG-847)\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        // Fixed: Use Math.max for cleaner exponent position finding\n        int decPos = str.indexOf('.');\n        int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));\n\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                // Fixed: Removed redundant 'expPos > str.length()' check & simplified condition\n                if (expPos < decPos) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                // Fixed: Removed redundant 'expPos > str.length()' check\n                // if (expPos > str.length()) { // Always false from indexOf\n                //    throw new NumberFormatException(str + \" is not a valid number.\");\n                // }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1);\n            // isAllZeros check depends on mant & exp matching the numeric string accurately\n            // Re-calculate mant and possibly exp based on 'numeric' if safer? For now, trust original logic.\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Note: Potential issue if dec/expPos refers to the 'L' itself?\n                    // 'L' is handled by the !isDigit check, so dec/exp calculations should be fine.\n                    // Need to ensure \"1.2L\" or \"1e2L\" throw correctly.\n                    if (dec == null && expPos == -1 && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            // NFE already handled by createLong\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        // NFE already handled by createBigInteger\n                        return createBigInteger(numeric);\n\n                    }\n                    // Throws NFE if not a valid long format (e.g., has '.', 'e', 'E')\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        // Use NumberUtils helper to abstract Float.valueOf ?\n                        // Assuming NumberUtils.createFloat calls Float.valueOf\n                        Float f = NumberUtils.createFloat(numeric);\n                        // Prevent Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NaN return\n                        // Prevent 0.0f return unless the string is actually all zeros\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$ intended in original code\n                case 'd' :\n                case 'D' :\n                    try {\n                        // Use NumberUtils helper to abstract Double.valueOf ?\n                        // Assuming NumberUtils.createDouble calls Double.valueOf\n                        Double d = NumberUtils.createDouble(numeric);\n                        // Prevent Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN return\n                        // Prevent 0.0d return unless the string is actually all zeros\n                        // Original code used d.floatValue() - corrected to d.doubleValue()\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        // Fall back to BigDecimal if Double is infinite or zero inappropriately\n                        // NFE already handled by createBigDecimal\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    // Last char is not digit, not '.', not L,F,D - invalid.\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            // Last character is digit or '.'\n\n            // Extract exponent value if present (goes to end of string)\n            if (expPos > -1 && expPos < str.length()) { // Check expPos is valid index first\n                 // Check if char after exp is valid (+,-,digit) and if there are digits after sign\n                 if (expPos + 1 < str.length()) {\n                     char expStartChar = str.charAt(expPos + 1);\n                     boolean expSignOk = (expStartChar == '+' || expStartChar == '-');\n                     if (!expSignOk && !Character.isDigit(expStartChar)) {\n                         throw new NumberFormatException(str + \" is not a valid number.\"); // e.g. \"1e$\"\n                     }\n                     // Check for \"1e+\" or \"1e-\" without digits\n                     if (expSignOk && expPos + 2 >= str.length()) {\n                         throw new NumberFormatException(str + \" is not a valid number.\");\n                     }\n                     exp = str.substring(expPos + 1);\n                 } else {\n                      throw new NumberFormatException(str + \" is not a valid number.\"); // e.g. \"1e\"\n                 }\n            } else {\n                exp = null;\n            }\n\n            if (dec == null && expPos == -1) { // Use expPos check based on original string\n                //Must be an int,long,bigint\n                try {\n                    // NFE handled by createInteger\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                     // NFE handled by createLong\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                 // NFE handled by createBigInteger\n                return createBigInteger(str);\n\n            } else {\n                //Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    // Use helper assuming it calls Float.valueOf(str)\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    // Use helper assuming it calls Double.valueOf(str)\n                    Double d = createDouble(str);\n                    // Original code used d.doubleValue() here, which is correct\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                // NFE handled by createBigDecimal\n                return createBigDecimal(str);\n\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}