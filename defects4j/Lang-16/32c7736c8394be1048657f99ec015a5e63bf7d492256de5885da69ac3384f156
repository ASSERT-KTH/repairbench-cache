{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to handle Long.MIN_VALUE explicitly as it lies outside the range of BigInteger.valueOf\n        // See LANG-1518 / LANG-1543\n        if (\"-9223372036854775808L\".equals(str)) {\n            return Long.valueOf(-9223372036854775808L);\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            throw new NumberFormatException(str + \" is not a valid number.\"); // Changed to throw exception as \"--\" is not valid\n        }\n        // Fix: Handle uppercase \"X\" for hexadecimal numbers\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n            int hexDigits = str.length() - (str.startsWith(\"-\") ? 3: 2);\n            if (hexDigits > 16 || (hexDigits == 16 && str.charAt(str.startsWith(\"-\") ? 3 : 2) > '7')) {\n                 // Potentially beyond Long range, use BigInteger\n                 return createBigInteger(str);\n            }\n             if (hexDigits > 8 || (hexDigits == 8 && str.charAt(str.startsWith(\"-\") ? 3 : 2) > '7')) {\n                 // Potentially beyond Integer range, use Long\n                 return createLong(str);\n             }\n            // Fits within Integer range\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        // Fix: Correctly find the first exponent character 'e' or 'E'\n        int expPos = str.indexOf('e');\n        if (expPos == -1) {\n            expPos = str.indexOf('E');\n        }\n\n        if (decPos > -1) { // Found decimal point\n\n            if (expPos > -1) { // Found exponent\n                // Fix: Remove impossible check `expPos > str.length()`\n                if (expPos < decPos) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n                mant = str.substring(0, decPos);\n            } else { // No exponent\n                dec = str.substring(decPos + 1);\n                mant = str.substring(0, decPos);\n            }\n\n        } else { // No decimal point\n            if (expPos > -1) { // Found exponent\n                // Fix: Remove impossible check `expPos > str.length()`\n                mant = str.substring(0, expPos);\n            } else { // No decimal point, no exponent\n                mant = str;\n            }\n            dec = null; // No decimal part\n        }\n\n        // Handle type qualifiers or invalid trailing characters\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) { // Exponent exists and has digits after it\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null; // No exponent digits part\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1); // String without the type qualifier\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Check mantissa and exponent parts for zeros\n\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Check if the string represents a valid long integer (potentially starting with '-')\n                    if (dec == null\n                        && exp == null\n                        && (numeric.isEmpty() ? false : (numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric))) {\n                        try {\n                            // Attempt to create a Long\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) { // NOPMD\n                            // If Long creation fails (likely too large), try BigInteger\n                            return createBigInteger(numeric);\n                        }\n                    }\n                    // If format is invalid for Long/BigInteger (e.g., contains '.', 'e', 'E'), throw exception\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        // Check for infinity or precision loss (value becomes 0 when original string wasn't all zeros)\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            // Return Float if it's finite and didn't lose precision significantly\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number; proceed to Double/BigDecimal\n                    }\n                    // Fall \u0631\u0645\u0648\u0632 to Double/BigDecimal handling if Float creation failed or resulted in infinity/precision loss\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                         // Check for infinity or precision loss (value becomes 0 when original string wasn't all zeros)\n                       if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Use doubleValue() for comparison\n                           // Return Double if it's finite and didn't lose precision significantly\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number; proceed to BigDecimal\n                    }\n                    // Fall \u0631\u0645\u0648\u0632 to BigDecimal handling if Double creation failed or resulted in infinity/precision loss\n                    //$FALL-THROUGH$\n                    try {\n                        // Final attempt with BigDecimal for maximum precision\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { // NOPMD\n                        // If all attempts fail, the number format is invalid\n                        throw new NumberFormatException(str + \" is not a valid number.\"); // Throw specific exception\n                    }\n                default :\n                    // Invalid trailing character (not L, F, D, digit, or '.')\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else { // Last character is a digit or '.' (no type qualifier)\n            // Determine exponent string if applicable\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length());\n            } else {\n                exp = null;\n            }\n\n            // Check if the number format suggests an integer type (no decimal, no exponent)\n            if (dec == null && exp == null) {\n                 // Must be an Integer, Long, or BigInteger\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number and try the next type\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number and try the next type\n                }\n                // Final attempt for integer types\n                return createBigInteger(str);\n\n            } else { // Number has a decimal point or exponent: Float, Double, or BigDecimal\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(str);\n                     // Check for infinity or precision loss\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number and try the next type\n                }\n                try {\n                    Double d = createDouble(str);\n                     // Check for infinity or precision loss\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Use doubleValue()\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                   // ignore the bad number and try the next type\n                }\n                // Final attempt with BigDecimal\n                return createBigDecimal(str);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}