{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        // Handle hexadecimal numbers (0x or 0X) case-insensitively\n        if (str.regionMatches(true, 0, \"0x\", 0, 2) || str.regionMatches(true, 0, \"-0x\", 0, 3)) {\n            return createInteger(str); // Assuming createInteger can handle hex format\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        // The original calculation is unusual, but handles 'e' or 'E'.\n        // It results in -1 if neither is found.\n        // It results in the index of 'e' or 'E' if only one is found.\n        // It results in (indexOf('e') + indexOf('E') + 1) if both are found (may lead to errors for invalid strings like \"1e2E3\")\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos || expPos > str.length()) { // Check if 'E'/'e' appears before '.' or past end of string\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                // Check if 'E'/'e' is past end of string - handles \"1E\" case?\n                 if (expPos > str.length()) { // This check seems valid, e.g. for \"1E\" expPos=1, length=2 -> false; for \"1eE\" expPos=4, length=3 -> true\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1);\n            // isAllZeros check needs to be robust, e.g. consider \"0.0f\"\n            // Assuming isAllZeros checks the relevant parts (mantissa and exponent)\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Check if the string representation is suitable for Long/BigInteger\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            // Use createLong/createBigInteger which should handle parsing\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        // If createLong fails, try BigInteger\n                        return createBigInteger(numeric); // This should handle arbitrary size\n\n                    }\n                    // If format is not valid for Long (e.g., has '.', 'e', or non-digits)\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        // Use a helper that likely calls Float.valueOf(numeric)\n                        Float f = NumberUtils.createFloat(numeric);\n                        // Check for infinity and loss of precision (potential zero value)\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number, maybe try Double/BigDecimal\n                    }\n                    //$FALL-THROUGH$ // Fall through intended if Float fails or loses precision\n                case 'd' :\n                case 'D' :\n                    try {\n                        // Use a helper that likely calls Double.valueOf(numeric)\n                        Double d = NumberUtils.createDouble(numeric);\n                        // Check for infinity and loss of precision (potential zero value)\n                        // Note: Original used d.floatValue() which is likely a bug, should be d.doubleValue() or just d\n                         if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number, maybe try BigDecimal\n                    }\n                    try {\n                        // Last resort for F/f/D/d is BigDecimal\n                        return createBigDecimal(numeric); // Assumes helper calls new BigDecimal(numeric)\n                    } catch (NumberFormatException e) { // NOPMD\n                        // ignore the bad number - If all fail, throw original exception?\n                        // Or rethrow? The original code effectively swallows NumberFormatException here\n                        // and falls through to the default throw, which is reasonable.\n                    }\n                    //$FALL-THROUGH$ // Fall through to default if all fail\n                default :\n                    // Invalid type suffix\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            // Handle exponent part\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1); // Get full exponent including sign\n            } else {\n                // If 'e'/'E' is the last char or not present correctly\n                 if (expPos > -1 && expPos >= str.length() -1) { // Check if E/e is last char or invalid pos\n                       throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                exp = null;\n            }\n            if (dec == null && exp == null) { // No decimal point and no exponent = integer types\n                //Must be an int,long,bigint\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                // Last resort is BigInteger\n                return createBigInteger(str);\n\n            } else { // Has decimal point or exponent = floating point types\n                //Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    // Use helper method, likely calls Float.valueOf(str)\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                     // Use helper method, likely calls Double.valueOf(str)\n                    Double d = createDouble(str);\n                    // Note: Original used d.doubleValue(), which is correct here.\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                // Last resort is BigDecimal\n                return createBigDecimal(str);\n            }\n        }\n    }\n\n    // Assume the following helper methods exist elsewhere in NumberUtils:\n    // createInteger(String), createLong(String), createBigInteger(String)\n    // createFloat(String), createDouble(String), createBigDecimal(String)\n    // isDigits(String), isAllZeros(String)\n    // Assume StringUtils.isBlank(String) exists",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}