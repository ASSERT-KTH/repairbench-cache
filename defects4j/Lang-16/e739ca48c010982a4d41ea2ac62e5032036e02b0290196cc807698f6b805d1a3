{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null; // Should this be an error?\n        }\n        // Fix: Handle both lower and upper case hexadecimal prefixes.\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        // Correct calculation for expPos\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Handles both 'e' and 'E'\n        // If both 'e' and 'E' are not found, expPos will be -1 + -1 + 1 = -1\n        // If 'e' is found at index i, expPos will be i + (-1) + 1 = i\n        // If 'E' is found at index j, expPos will be (-1) + j + 1 = j\n\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                // Check exponent position relative to decimal and string length\n                if (expPos < decPos || expPos >= str.length()) { // Use >= to prevent index out of bounds\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                // Check exponent position relative to string length\n                if (expPos >= str.length()) { // Use >= to prevent index out of bounds\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            // Check for exponent part correctly\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            String numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp); // Include dec in allZeros check\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Check if the numeric part is a valid integer representation\n                    if (dec == null\n                        && exp == null\n                        && (numeric.length() > 0 && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))) { // Check length > 0\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) { // NOPMD\n                            // Fallthrough intended for BigInteger\n                        }\n                        // Ensure createBigInteger is called with the correct string\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        // Check for underflow/overflow issues precisely\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            // If it's too big for a float or the float value = 0 and the string\n                            // has non-zeros in it, then float does not have the precision we want\n                            // Special case: \"0.0f\" should be Float 0.0f\n                             if (f.floatValue() != 0.0f || allZeros) {\n                                return f;\n                             }\n                        }\n\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    // Fallthrough intended for d/D and BigDecimal\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                         // Check for underflow/overflow issues precisely\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                             // Special case: \"0.0d\" should be Double 0.0d\n                             if (d.doubleValue() != 0.0d || allZeros) {\n                                return d;\n                             }\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        // Use the numeric part for BigDecimal as well\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    // Fallthrough intended - throw exception if no suitable type found\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        } else {\n            //User doesn't have a preference on the return type, so let's start\n            //small and go from there...\n            // Extract exponent correctly when no type qualifier is present\n            if (expPos > -1 && expPos < str.length()) { // Check expPos < length\n                 exp = str.substring(expPos + 1); // No need to exclude last char\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                //Must be an int,long,bigint\n                // Check for valid integer digits first\n                 if (str.length() > 0 && (str.charAt(0) == '-' && isDigits(str.substring(1)) || isDigits(str))) {\n                    try {\n                        return createInteger(str);\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createLong(str);\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    return createBigInteger(str);\n                 }\n                 // If not pure digits (e.g., \"+123\"), throw exception\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n\n            } else {\n                //Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp); // Include dec in allZeros check\n                try {\n                    Float f = createFloat(str);\n                    // Check for underflow/overflow issues precisely\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        // Special case: \"0.0\" should be Float 0.0f\n                         if (f.floatValue() != 0.0f || allZeros) {\n                            // Ensure we return Float for values like \"1.0\" etc.\n                            // that fit in float accurately\n                            if (f.toString().equals(str)) {\n                                return f;\n                            }\n                            // Check if Double offers better precision or range\n                             try {\n                                if (Double.parseDouble(str) <= Float.MAX_VALUE) {\n                                    return f;\n                                }\n                             } catch (NumberFormatException nfe) {} // Ignore, try Double next\n                        }\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                    // Check for underflow/overflow issues precisely\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        // Special case: \"0.0\" should be Double 0.0d\n                         if (d.doubleValue() != 0.0d || allZeros) {\n                            // Return Double if it fits and isn't zero unless specified as zero\n                             // Use BigDecimal to check if Double representation is exact for the input string\n                             try {\n                                if (!new java.math.BigDecimal(str).equals(new java.math.BigDecimal(d))) {\n                                    // If Double isn't exact, prefer BigDecimal later\n                                } else {\n                                    return d; // Return Double if exact\n                                }\n                             } catch (NumberFormatException nfe) {} // Ignore, proceed to BigDecimal\n                             // If not exact or exception, but still valid double range\n                             return d;\n                         }\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n\n                return createBigDecimal(str);\n\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}