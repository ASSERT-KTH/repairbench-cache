{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n     * will be interpreted as a hexadecimal integer.  Values with leading\n     * <code>0</code>'s will not be interpreted as octal.</p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null; // Method contract returns null for non-numbers, keep consistent\n        }\n        // Fix 1: Handle 0X/-0X prefix (case-insensitive)\n        if (str.startsWith(\"0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0x\") || str.startsWith(\"-0X\")) {\n             // The called method (createInteger) should handle hex parsing including 0X.\n             // If hex number is large it should ideally return Long or BigInteger,\n             // but createInteger suggests Integer. Let's trust createInteger handles hex.\n             // Consider using createBigInteger(str) for full hex range if createInteger fails large hex.\n            return createInteger(str);\n        }\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        int decPos = str.indexOf('.');\n        // Fix 2: Correctly find the exponent indicator position (case-insensitive)\n        int expPos = str.indexOf('e');\n        if (expPos == -1) {\n            expPos = str.indexOf('E');\n        }\n\n        // Parse the string into mantissa, decimal, and exponent parts\n        if (decPos > -1) { // Number has a decimal point\n            if (expPos > -1) { // Number has an exponent\n                if (expPos < decPos) { // Exponent marker must be after decimal point\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n                mant = str.substring(0, decPos);\n            } else { // Number has decimal point but no exponent\n                dec = str.substring(decPos + 1);\n                mant = str.substring(0, decPos);\n            }\n        } else { // Number has no decimal point\n            if (expPos > -1) { // Number has an exponent\n                 // Check if exponent indicator is the first character (e.g. \"e1\") which is invalid\n                 if(expPos == 0) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                mant = str.substring(0, expPos);\n            } else { // Number has no decimal point and no exponent (integer)\n                mant = str;\n            }\n            dec = null; // No decimal part\n        }\n\n        // Check if the string ends with a letter (type qualifier) or not\n        if (!Character.isDigit(lastChar) && lastChar != '.') { // Ends with a non-digit, non-dot character\n             // Check if the exponent marker is the penultimate character (e.g. \"123eL\", \"1.2eF\") - invalid\n             if (expPos > -1 && expPos == str.length() - 2) {\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n\n            // Extract exponent digits if present\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            // The part of the string excluding the final type qualifier\n            String numeric = str.substring(0, str.length() - 1);\n            // Check if mantissa and exponent parts are all zeros (doesn't check decimal part)\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' : case 'L' :\n                    // Long type requested: Must not have decimal, must not have exponent (based on original check exp == null)\n                    // and must be composed of digits (optional leading minus)\n                    if (dec == null\n                        && exp == null // Original check implies 'L' is not valid with 'e'/'E' notation.\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) { // NOPMD\n                            // Fallback to BigInteger if value is too large for Long\n                        }\n                        return createBigInteger(numeric);\n                    }\n                    // Invalid format for 'L' suffix (e.g., has decimal or exponent)\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' : case 'F' :\n                    // Float type requested\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        // Check for infinity or zero result where original string was non-zero\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // Ignore NFE, fall through to try Double/BigDecimal for better precision/range\n                    }\n                    //$FALL-THROUGH$\n                case 'd' : case 'D' :\n                    // Double type requested or fallback from Float\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        // Fix 3: Use doubleValue() for check, not floatValue()\n                        // Check for infinity or zero result where original string was non-zero\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                             return d;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                         // Ignore NFE, fall through to try BigDecimal\n                    }\n                    try {\n                        // Fallback to BigDecimal for precision/range issues with Double\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { // NOPMD\n                        // Ignore NFE from BigDecimal, fall through to default error\n                    }\n                    //$FALL-THROUGH$\n                default : // Invalid type qualifier character\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else { // Ends with a digit or a decimal point (e.g. \"123\", \"123.45\", \"1.\", \"1.3e4\")\n            // Check if the exponent marker is the last character (e.g. \"123e\", \"1.5E\") - invalid\n            if (expPos > -1 && expPos == str.length() - 1) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n\n            // Extract exponent digits if present\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length());\n            } else {\n                exp = null;\n            }\n            // Determine return type automatically (no type qualifier)\n            if (dec == null && exp == null) {\n                // Integral number: Try Integer -> Long -> BigInteger\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                return createBigInteger(str); // Final fallback for large integers\n            } else {\n                // Non-integral number (has decimal or exponent): Try Float -> Double -> BigDecimal\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // Checks mantissa and exponent digits\n                try {\n                    Float f = createFloat(str);\n                     // Check for infinity or zero result where original string was non-zero\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                    // Fix 3: Use doubleValue() for check, not floatValue()\n                    // Check for infinity or zero result where original string was non-zero\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                return createBigDecimal(str); // Final fallback for non-integral numbers\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}