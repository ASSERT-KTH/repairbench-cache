{
    "generation": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        }\n        if (str.startsWith(\"0x\") || str.startsWith(\"0X\") ||\n           str.startsWith(\"-0x\") || str.startsWith(\"-0X\")) {\n            return createInteger(str);\n        }\n        // Modified expPos calculation to properly handle both 'e' and 'E'\n        int decPos = str.indexOf('.');\n        int expPos = -1;\n        int expPosE = str.indexOf('e');\n        int expPosE2 = str.indexOf('E');\n        if (expPosE > -1 && expPosE2 > -1) {\n            expPos = Math.min(expPosE, expPosE2);\n        } else if (expPosE > -1) {\n            expPos = expPosE;\n        } else if (expPosE2 > -1) {\n            expPos = expPosE2;\n        }\n        // Rest of the expPos handling\n        if (expPos > -1 && expPos < str.length() - 1) {\n            // Check if 'e' or 'E' is followed by digits or sign\n            char nextChar = str.charAt(expPos + 1);\n            if (!Character.isDigit(nextChar) && nextChar != '+' && nextChar != '-') {\n                expPos = -1;\n            }\n        }\n\n        if (expPos == -1) {\n            expPos = str.length() + 1; // signal that there's no exponent\n        }\n\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n\n        if (decPos > -1) {\n            if (expPos > -1) {\n                if (expPos < decPos) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1 && expPos < str.length()) {\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n\n        // Handle exponential part if present\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1);\n            // Verify the exponent part is valid\n            boolean expValid = false;\n            try {\n                Long.parseLong(exp); // This will throw if the exponent is invalid\n                expValid = true;\n            } catch (NumberFormatException nfe) {\n                // Check if first character is sign\n                if (exp.length() > 1) {\n                    if ((exp.charAt(0) == '+' || exp.charAt(0) == '-') &&\n                        isDigits(exp.substring(1))) {\n                        expValid = true;\n                    }\n                }\n            }\n            if (!expValid) {\n                expPos = -1;\n                exp = null;\n            }\n        } else {\n            exp = null;\n        }\n\n        if (!Character.isDigit(lastChar) && lastChar != '.' && lastChar != 'e' && lastChar != 'E') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            // Requesting a specific type\n            String numeric = str.substring(0, str.length() - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (Character.toLowerCase(lastChar)) {\n                case 'l':\n                    if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f':\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    // fall through\n                case 'd':\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore the bad number\n                    }\n                    // fall through\n                default:\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            // User doesn't have a preference on the return type\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1);\n            } else {\n                exp = null;\n            }\n            if (dec == null && exp == null) {\n                // Must be an int,long,bigint\n                try {\n                    return createInteger(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                return createBigInteger(str);\n            } else {\n                // Must be a float,double,BigDec\n                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                try {\n                    Float f = createFloat(str);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    Double d = createDouble(str);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                return createBigDecimal(str);\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}