{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        // protection for poorness in java.lang.BigDecimal.\n        return null;\n    }\n    // Handle hex: 0x, 0X, -0x, -0X\n    int hexPrefixLen = 0;\n    if (str.startsWith(\"0x\") || str.startsWith(\"0X\")) {\n        hexPrefixLen = 2;\n    } else if (str.startsWith(\"-0x\") || str.startsWith(\"-0X\")) {\n        hexPrefixLen = 3;\n    }\n    if (hexPrefixLen > 0) {\n        return createInteger(str);\n    }\n\n    int strLen = str.length();\n    char lastChar = str.charAt(strLen - 1);\n    int decPos = str.indexOf('.');\n    int expPos1 = str.indexOf('e');\n    int expPos2 = str.indexOf('E');\n    int expPos;\n    if (expPos1 > -1 && expPos2 > -1) {\n        expPos = Math.min(expPos1, expPos2); // pick the first occurrence\n    } else {\n        expPos = Math.max(expPos1, expPos2);\n    }\n\n    String mant;\n    String dec;\n    String exp = null;\n\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos || expPos > strLen) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n            exp = str.substring(expPos + 1, strLen);\n        } else {\n            dec = str.substring(decPos + 1);\n            exp = null;\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            if (expPos > strLen) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n            exp = str.substring(expPos + 1, strLen);\n        } else {\n            mant = str;\n            exp = null;\n        }\n        dec = null;\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if ((lastChar == 'l') || (lastChar == 'L') ||\n            (lastChar == 'f') || (lastChar == 'F') ||\n            (lastChar == 'd') || (lastChar == 'D')) {\n            String numeric = str.substring(0, strLen - 1);\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n            switch (lastChar) {\n                case 'l':\n                case 'L':\n                    if (dec == null\n                            && exp == null\n                            && (numeric.length() > 0 &&\n                                ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric)))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f':\n                case 'F':\n                    try {\n                        Float f = createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore\n                    }\n                    // Try BigDecimal for extreme exponents\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'd':\n                case 'D':\n                    try {\n                        Double d = createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) {\n                        // ignore\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) {\n                        // ignore\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        }\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    } else {\n        // No type qualifier\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        if (dec == null && exp == null) {\n            // integer...\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n                // fall through\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n                // fall through\n            }\n            return createBigInteger(str);\n        } else {\n            // float/double/bigdecimal\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // fall through\n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // fall through\n            }\n            return createBigDecimal(str);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}