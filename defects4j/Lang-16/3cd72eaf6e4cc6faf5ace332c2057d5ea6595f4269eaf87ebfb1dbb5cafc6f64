{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n        try {\n            String hex = str.substring(2);\n            if (!hex.isEmpty() && (hex.charAt(0) == '.') {\n                hex = \"0\" + hex;\n            }\n            return createInteger(hex, 16);\n        } catch (NumberFormatException e) {\n            return createBigInteger(hex, 16);\n        }\n    }\n\n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e');\n    if (expPos == -1) {\n        expPos = str.indexOf('E');\n    }\n    expPos++;\n\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        return createBigInteger(numeric);\n                    }\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n            case 'd':\n            case 'D':\n                try {\n                    Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) {\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n            }\n            return createBigInteger(str);\n        } else {\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n            }\n            return createBigDecimal(str);\n        }\n    }\n}\n\nprivate static Integer createInteger(String str) throws NumberFormatException {\n    if (str.isEmpty()) {\n        return null;\n    }\n    return Integer.valueOf(str);\n}\n\nprivate static Integer createInteger(String str, int radix) throws NumberFormatException {\n    if (str.isEmpty()) {\n        return null;\n    }\n    return Integer.valueOf(str, radix);\n}\n\nprivate static Long createLong(String str) throws NumberFormatException {\n    if (str.isEmpty()) {\n        return null;\n    }\n    return Long.valueOf(str);\n}\n\nprivate static Float createFloat(String str) throws NumberFormatException {\n    if (str.isEmpty()) {\n        return null;\n    }\n    return Float.valueOf(str);\n}\n\nprivate static Double createDouble(String str) throws NumberFormatException {\n    if (str.isEmpty()) {\n        return null;\n    }\n    return Double.valueOf(str);\n}\n\nprivate static BigDecimal createBigDecimal(String str) throws NumberFormatException {\n    if (str.isEmpty()) {\n        return null;\n    }\n    return new BigDecimal(str);\n}\n\nprivate static BigInteger createBigInteger(String str) throws NumberFormatException {\n    if (str.isEmpty()) {\n        return null;\n    }\n    return new BigInteger(str);\n}\n\nprivate static BigInteger createBigInteger(String str, int radix) throws NumberFormatException {\n    if (radix == 10) {\n        return createBigInteger(str);\n    }\n    return new BigInteger(str, radix);\n}\n\nprivate static boolean isAllZeros(String str) {\n    if (str == null) {\n        return true;\n    }\n    for (char c : str.toCharArray()) {\n        if (c != '0') {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static boolean isDigits(String str) {\n    if (str == null) {\n        return false;\n    }\n    for (char c : str.toCharArray()) {\n        if (!Character.isDigit(c)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}