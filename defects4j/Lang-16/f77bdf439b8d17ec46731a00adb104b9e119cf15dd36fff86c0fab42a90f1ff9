{
    "generation": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        // Protection for invalid \"--\".\n        return null;\n    }\n    boolean hex = false;\n    String hexPrefix = null;\n    int startIndex = 0;\n    if (str.startsWith(\"-\")) {\n        startIndex = 1;\n    }\n    if (str.length() > startIndex + 1) {\n        hexPrefix = str.substring(startIndex, startIndex + 2);\n        if (hexPrefix.equalsIgnoreCase(\"0x\")) {\n            hex = true;\n        }\n    }\n\n    if (hex) {\n        return createInteger(str);\n    }\n\n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n\n    int decPos = str.indexOf('.');\n    int expPos1 = str.indexOf('e');\n    int expPos2 = str.indexOf('E');\n    int expPos;\n    if (expPos1 > -1 && expPos2 > -1) {\n        expPos = Math.min(expPos1, expPos2);\n    } else {\n        expPos = Math.max(expPos1, expPos2);\n    }\n\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos || expPos > str.length() - 1) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length() - 1) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        String expStr;\n        if (expPos > -1 && expPos < str.length() - 1) {\n            expStr = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            expStr = null;\n        }\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(expStr);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null && expStr == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        // Too big for a long\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                //$FALL-THROUGH$\n            case 'd':\n            case 'D':\n                try {\n                    Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        String expStr;\n        if (expPos > -1 && expPos < str.length() - 1) {\n            expStr = str.substring(expPos + 1);\n        } else {\n            expStr = null;\n        }\n        if (dec == null && expStr == null) {\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n            return createBigInteger(str);\n        } else {\n            boolean allZeros = isAllZeros(mant) && isAllZeros(expStr);\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n            return createBigDecimal(str);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}