{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        incrementIterationsCounter();\n\n        // Save the original simplex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // Perform reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // Compute expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // Accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            return;\n        }\n\n        // Perform contraction step\n        final RealPointValuePair[] originalBeforeContraction = simplex.clone();\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            return;\n        }\n\n        // Revert to original simplex before contraction since contraction didn't improve\n        simplex = originalBeforeContraction;\n\n        // Perform shrink step\n        final RealPointValuePair[] shrunk = new RealPointValuePair[original.length];\n        shrunk[0] = best;\n        for (int i = 1; i < original.length; i++) {\n            final double[] x = original[i].getPointRef();\n            final double[] newX = new double[x.length];\n            for (int j = 0; j < x.length; j++) {\n                newX[j] = best.getPoint()[j] + gamma * (x[j] - best.getPoint()[j]);\n            }\n            final double value = evaluate(newX);\n            shrunk[i] = new RealPointValuePair(newX, value, false);\n        }\n\n        // Sort the shrunk simplex\n        Arrays.sort(shrunk, comparator);\n        simplex = shrunk;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}