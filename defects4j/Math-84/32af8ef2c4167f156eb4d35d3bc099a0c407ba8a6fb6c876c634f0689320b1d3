{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final RealPointValuePair[] previous = simplex.clone();\n    final RealPointValuePair bestPrevious = previous[0];\n\n    incrementIterationsCounter();\n\n    // perform a reflection step\n    final RealPointValuePair reflected = evaluateNewSimplex(previous, 1.0, comparator);\n    final RealPointValuePair best = simplex[0];\n\n    // if reflected point is better than the best, try expansion\n    if (comparator.compare(reflected, bestPrevious) < 0) {\n\n        final RealPointValuePair[] reflectedSimplex = simplex.clone();\n        final RealPointValuePair expanded = evaluateNewSimplex(previous, khi, comparator);\n\n        if (comparator.compare(expanded, reflected) < 0) {\n            // accept the expanded simplex\n            // simplex is already updated in evaluateNewSimplex\n        } else {\n            // accept the reflected simplex\n            simplex = reflectedSimplex;\n        }\n        return;\n    }\n\n    // if reflected point is not better, try contraction\n    final RealPointValuePair contracted = evaluateNewSimplex(previous, gamma, comparator);\n    if (comparator.compare(contracted, bestPrevious) < 0) {\n        // accept the contracted simplex (already set by evaluateNewSimplex)\n        return;\n    }\n\n    // shrink simplex towards best point\n    final double[] bestPoint = previous[0].getPointRef();\n    for (int i = 1; i < simplex.length; i++) {\n        double[] curr = simplex[i].getPointRef();\n        double[] shrunk = new double[curr.length];\n        for (int j = 0; j < curr.length; ++j) {\n            shrunk[j] = bestPoint[j] + sigma * (curr[j] - bestPoint[j]);\n        }\n        simplex[i] = new RealPointValuePair(\n            shrunk,\n            computeObjectiveValue(shrunk),\n            false\n        );\n    }\n    // after shrinking, sort simplex\n    Arrays.sort(simplex, comparator);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}