{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // Save a copy of the current simplex for convergence checking at the end\n    final RealPointValuePair[] previous = simplex.clone();\n\n    incrementIterationsCounter();\n\n    // save the original vertex\n    final RealPointValuePair[] original = simplex.clone();\n    final RealPointValuePair best = original[0];\n\n    // perform a reflection step\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n\n        // compute the expanded simplex\n        final RealPointValuePair[] reflectedSimplex = simplex.clone();\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // accept the reflected simplex\n            simplex = reflectedSimplex;\n        }\n        // else: expanded simplex is better, already set by evaluateNewSimplex(khi), so keep it\n\n        // check convergence\n        if (getConvergenceChecker() != null &&\n            getConvergenceChecker().converged(getIterations(), previous[0], simplex[0])) {\n            return;\n        }\n\n        return;\n    }\n\n    // compute the contracted simplex\n    final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        // accept the contracted simplex\n        // already set by evaluateNewSimplex(gamma)\n\n        // check convergence\n        if (getConvergenceChecker() != null &&\n            getConvergenceChecker().converged(getIterations(), previous[0], simplex[0])) {\n            return;\n        }\n\n        return;\n    }\n\n    // Reduction: shrink simplex towards best point\n    for (int i = 1; i < simplex.length; ++i) {\n        final double[] bestPoint = simplex[0].getPointRef();\n        final double[] currPoint = simplex[i].getPointRef();\n        double[] shrunk = new double[bestPoint.length];\n        for (int j = 0; j < bestPoint.length; ++j) {\n            shrunk[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);\n        }\n        simplex[i] = new RealPointValuePair(shrunk, computeObjectiveValue(shrunk), false);\n    }\n\n    // sort simplex\n    Arrays.sort(simplex, comparator);\n\n    // check convergence\n    if (getConvergenceChecker() != null &&\n        getConvergenceChecker().converged(getIterations(), previous[0], simplex[0])) {\n        return;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}