{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // Store a reference simplex for convergence check\n    final RealPointValuePair[] previousSimplex = simplex.clone();\n\n    incrementIterationsCounter();\n\n    // save the original vertex\n    final RealPointValuePair[] original = simplex.clone();\n    final RealPointValuePair best = original[0];\n\n    // perform a reflection step\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n\n        // compute the expanded simplex\n        final RealPointValuePair[] reflectedSimplex = simplex.clone();\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // accept the reflected simplex\n            simplex = reflectedSimplex;\n        }\n        // else, leave the simplex as the expanded one assigned by evaluateNewSimplex (expanded)\n\n        // check for convergence\n        if (getConvergenceChecker() != null &&\n            getConvergenceChecker().converged(getIterations(), previousSimplex[0], simplex[0])) {\n            return;\n        }\n        return;\n\n    }\n\n    // compute the contracted simplex\n    final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        // accept the contracted simplex\n        // no need to assign explicitly, evaluateNewSimplex does it\n        // check for convergence\n        if (getConvergenceChecker() != null &&\n            getConvergenceChecker().converged(getIterations(), previousSimplex[0], simplex[0])) {\n            return;\n        }\n        return;\n    }\n\n    // Check for convergence: if no step improved, check\n    if (getConvergenceChecker() != null &&\n        getConvergenceChecker().converged(getIterations(), previousSimplex[0], simplex[0])) {\n        return;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}