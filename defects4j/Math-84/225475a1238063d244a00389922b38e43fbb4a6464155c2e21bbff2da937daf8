{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n        \n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n        \n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            \n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n            } else {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            \n        } else {\n            \n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n            } else {\n                // perform a shrink step\n                final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[simplex.length];\n                shrunkSimplex[0] = original[0];\n                for (int i = 1; i < simplex.length; ++i) {\n                    final double[] p = original[i].getPointRef();\n                    final double[] barycenter = original[0].getPointRef();\n                    final double[] direction = new double[p.length];\n                    for (int j = 0; j < p.length; ++j) {\n                        direction[j] = sigma * (p[j] - barycenter[j]);\n                    }\n                    shrunkSimplex[i] = evaluateNewPoint(original[0].getPointRef(), direction, comparator);\n                }\n                simplex = shrunkSimplex;\n            }\n            \n        }\n        \n        // check convergence\n        int iter = getIterations();\n        boolean converged = getConvergenceChecker().converged(iter, original[0], simplex[0]);\n        if (converged) {\n            return;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}