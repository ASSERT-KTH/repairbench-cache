{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the expanded simplex\n                simplex = buildSimplex(reflectedSimplex.length,\n                    new MultivariateRealFunction() {\n                        public double value(double[] v)\n                        throws FunctionEvaluationException {\n                            // rebuild simplex by dilated reflection expansion\n                            ArrayRealVector x = new ArrayRealVector(original[1]\n                                .getPoint(), false);\n                            return function.value(x.mapAdd(reflected.getPoint())\n                                .mapMultiply(1 + khi).getDataRef());\n                        }\n                    });\n            }\n            return;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = buildSimplex(simplex.length,\n                new MultivariateRealFunction() {\n                    public double value(double[] v)\n                    throws FunctionEvaluationException {\n                        // rebuild simplex by contraction\n                        ArrayRealVector x = new ArrayRealVector(original[1]\n                            .getPoint(), false);\n                        return function.value(x.mapAdd(reflected.getPoint())\n                            .mapMultiply(gamma).getDataRef());\n                    }\n                });\n            return;\n        }\n\n        // perform a reduction step\n        simplex = buildSimplex(simplex.length,\n            new MultivariateRealFunction() {\n                public double value(double[] v)\n                throws FunctionEvaluationException {\n                    // rebuild simplex by reduction\n                    ArrayRealVector x = new ArrayRealVector(reflected.getPoint());\n                    ArrayRealVector o = new ArrayRealVector(simplex[0].getPoint());\n                    return function.value(x.mapAdd(o.scalarMultiply(-0.5)).getDataRef());\n                }\n            });\n\n        if (getConvergenceChecker().converged(getIterationsCounter(),\n            simplex[0], simplex[simplex.length - 1])) {\n            return;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}