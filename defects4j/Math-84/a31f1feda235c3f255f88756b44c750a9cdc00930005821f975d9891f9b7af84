{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // one pass: reflect, then either expand or contract/shrink\n        incrementIterationsCounter();\n\n        // save the current simplex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best     = original[0];\n\n        // 1) Reflection\n        final RealPointValuePair reflected = \n            evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // 2) Expansion\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded =\n                evaluateNewSimplex(original, khi, comparator);\n            // choose the better of reflection or expansion\n            if (comparator.compare(reflected, expanded) <= 0) {\n                simplex = reflectedSimplex;\n            }\n\n        } else {\n\n            // 3) Contraction (or shrink)\n            evaluateNewSimplex(original, gamma, comparator);\n\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}