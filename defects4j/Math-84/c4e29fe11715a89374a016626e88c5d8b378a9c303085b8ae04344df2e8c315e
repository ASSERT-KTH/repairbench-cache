{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // one iteration of the multi\u2010directional simplex\n    incrementIterationsCounter();\n\n    // save the original simplex and its best point\n    final RealPointValuePair[] original = simplex;\n    final RealPointValuePair best     = original[0];\n\n    // 1) reflection\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n\n        // 2) expansion\n        final RealPointValuePair[] reflectedSimplex = simplex;\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        // if expansion did not improve on reflection, keep the reflected\n        if (comparator.compare(reflected, expanded) <= 0) {\n            simplex = reflectedSimplex;\n        }\n        return;\n    }\n\n    // 3) contraction\n    final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        // contraction improved \u2014 accept it\n        return;\n    }\n\n    // 4) shrink (no improvement by reflection or contraction)\n    //    move all points toward the best point\n    simplex = original;\n    for (int i = 1; i < simplex.length; i++) {\n        final double[] xOrig  = original[i].getPoint();\n        final double[] xBest  = best.getPoint();\n        final double[] xShrunk = new double[xOrig.length];\n        for (int j = 0; j < xOrig.length; j++) {\n            xShrunk[j] = xBest[j] + gamma * (xOrig[j] - xBest[j]);\n        }\n        // evaluate the new (shrunk) point\n        simplex[i] = new RealPointValuePair(xShrunk,\n                                            computeObjectiveValue(xShrunk),\n                                            false);\n    }\n    // resort the simplex\n    sort(simplex, comparator);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}