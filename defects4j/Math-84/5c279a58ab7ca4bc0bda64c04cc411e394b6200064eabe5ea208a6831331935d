{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // Save a copy of the previous simplex for convergence check\n    final RealPointValuePair[] previous = simplex.clone();\n\n    incrementIterationsCounter();\n\n    // save the original vertex\n    final RealPointValuePair[] original = simplex.clone();\n    final RealPointValuePair best = original[0];\n\n    // perform a reflection step\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n\n        // compute the expanded simplex\n        final RealPointValuePair[] reflectedSimplex = simplex.clone();\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // accept the reflected simplex\n            simplex = reflectedSimplex;\n        }\n        // else, the expanded simplex is already set in simplex\n\n        // After making changes, check convergence and return if converged\n        if (getConvergenceChecker().converged(getIterations(), previous, simplex)) {\n            return;\n        }\n        return;\n\n    }\n\n    // compute the contracted simplex\n    final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        // accept the contracted simplex\n\n        // After making changes, check convergence and return if converged\n        if (getConvergenceChecker().converged(getIterations(), previous, simplex)) {\n            return;\n        }\n        return;\n    }\n\n    // If no improvement was found, check convergence before continuing\n    if (getConvergenceChecker().converged(getIterations(), previous, simplex)) {\n        return;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}