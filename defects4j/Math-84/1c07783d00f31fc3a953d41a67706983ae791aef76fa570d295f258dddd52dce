{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();\n    RealPointValuePair[] previous = new RealPointValuePair[simplex.length];\n    for (int i = 0; i < simplex.length; ++i) {\n        previous[i] = simplex[i];\n    }\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            // check for convergence and return if converged\n            boolean converged = true;\n            for (int i = 0; i < simplex.length; ++i) {\n                converged &= checker.converged(getIterations(), previous[i], simplex[i]);\n            }\n            if (converged) {\n                return;\n            }\n\n            // prepare for next iteration\n            for (int i = 0; i < simplex.length; ++i) {\n                previous[i] = simplex[i];\n            }\n\n            continue;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n\n            // check for convergence and return if converged\n            boolean converged = true;\n            for (int i = 0; i < simplex.length; ++i) {\n                converged &= checker.converged(getIterations(), previous[i], simplex[i]);\n            }\n            if (converged) {\n                return;\n            }\n\n            // prepare for next iteration\n            for (int i = 0; i < simplex.length; ++i) {\n                previous[i] = simplex[i];\n            }\n\n            continue;\n        }\n\n        // neither reflection, expansion nor contraction was good enough:\n        // shrink simplex in all directions towards the best point\n        for (int i = 1; i < simplex.length; ++i) {\n            final double[] bestPoint = simplex[0].getPoint();\n            final double[] si = simplex[i].getPoint();\n            final double[] newSi = new double[si.length];\n            for (int j = 0; j < si.length; ++j) {\n                newSi[j] = bestPoint[j] + sigma * (si[j] - bestPoint[j]);\n            }\n            final double newValue = computeObjectiveValue(newSi);\n            simplex[i] = new RealPointValuePair(newSi, newValue);\n        }\n\n        // check for convergence and return if converged\n        boolean converged = true;\n        for (int i = 0; i < simplex.length; ++i) {\n            converged &= checker.converged(getIterations(), previous[i], simplex[i]);\n        }\n        if (converged) {\n            return;\n        }\n\n        // prepare for next iteration\n        for (int i = 0; i < simplex.length; ++i) {\n            previous[i] = simplex[i];\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}