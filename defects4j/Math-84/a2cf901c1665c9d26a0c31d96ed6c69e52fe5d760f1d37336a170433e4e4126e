{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // One iteration of the simplex transformation.\n    incrementIterationsCounter();\n\n    // Save a copy of the current simplex.\n    final RealPointValuePair[] original = simplex.clone();\n    final RealPointValuePair best = original[0];\n\n    // Reflection step.\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n        // If reflection improved the best point, try an expansion step.\n        final RealPointValuePair[] reflectedSimplex = simplex.clone();\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // If the expansion did not outperform the reflection,\n            // restore the reflected simplex.\n            simplex = reflectedSimplex;\n        }\n        return;\n    }\n\n    // Contraction step.\n    final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        // Accept the contracted simplex.\n        return;\n    }\n\n    // If neither reflection nor contraction has improved the simplex,\n    // perform a shrink of the simplex toward the best vertex.\n    final double shrinkCoefficient = 0.5;\n    for (int i = 1; i < simplex.length; i++) {\n        final double[] current = simplex[i].getPoint();\n        final double[] bestPoint = best.getPoint();\n        final double[] newPoint = new double[current.length];\n        for (int j = 0; j < current.length; j++) {\n            newPoint[j] = bestPoint[j] + shrinkCoefficient * (current[j] - bestPoint[j]);\n        }\n        simplex[i] = new RealPointValuePair(newPoint, function.value(newPoint));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}