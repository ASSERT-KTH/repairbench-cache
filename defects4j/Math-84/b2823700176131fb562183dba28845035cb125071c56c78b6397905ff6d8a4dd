{
    "generation": "@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // In each iteration we transform the current simplex (stored in the field \"simplex\")\n    // until the convergence criteria are met.\n    while (true) {\n        // Increment iteration counter (this may throw if max iterations are exceeded).\n        incrementIterationsCounter();\n\n        // Keep a copy of the current simplex for convergence checking.\n        final RealPointValuePair[] previousSimplex = simplex.clone();\n        final RealPointValuePair best = simplex[0];\n\n        // --- Reflection Step ---\n        // Compute a reflected simplex using a scale factor 1.0.\n        final RealPointValuePair reflected = evaluateNewSimplex(previousSimplex, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // The reflected point improves upon the best. Try expansion.\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(previousSimplex, khi, comparator);\n            // If expansion does not improve on the reflection, accept the reflected simplex.\n            if (comparator.compare(reflected, expanded) <= 0) {\n                simplex = reflectedSimplex;\n            }\n        } else {\n            // --- Contraction Step ---\n            // Reflection did not yield a new best; try a contraction with factor gamma.\n            final RealPointValuePair contracted = evaluateNewSimplex(previousSimplex, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // Contraction produced an improvement; the new simplex has already been stored.\n            } else {\n                // --- Shrink Step ---\n                // Neither reflection nor contraction improved the simplex;\n                // shrink the simplex towards the best point.\n                final double shrink = 0.5;\n                final double[] bestPoint = best.getPoint();\n                for (int i = 1; i < simplex.length; i++) {\n                    final double[] currentPoint = simplex[i].getPoint();\n                    final double[] newPoint = new double[currentPoint.length];\n                    for (int j = 0; j < currentPoint.length; j++) {\n                        newPoint[j] = bestPoint[j] + shrink * (currentPoint[j] - bestPoint[j]);\n                    }\n                    // Evaluate the objective function at the new point.\n                    simplex[i] = new RealPointValuePair(newPoint, evaluate(newPoint));\n                }\n            }\n        }\n\n        // --- Convergence Check ---\n        // If the simplex has converged (according to the convergenceChecker), we exit.\n        if (convergenceChecker.converged(getIterations(), previousSimplex, simplex)) {\n            return;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}