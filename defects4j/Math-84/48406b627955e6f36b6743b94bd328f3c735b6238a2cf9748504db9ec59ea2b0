{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // The original code had a while(true) loop here which could lead to\n        // infinite looping if neither reflection nor contraction improved\n        // the situation. The fix removes the loop and adds a shrink step\n        // as is standard in Nelder-Mead algorithms when other steps fail,\n        // ensuring the simplex changes and the algorithm progresses.\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        // evaluateNewSimplex is responsible for updating the simplex internally\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // reflected point is better than the best point\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex; // save the reflected simplex state\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            // simplex is now in the expanded state\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // expansion didn't yield a better point than reflection\n                // revert to the reflected simplex state\n                simplex = reflectedSimplex;\n            }\n            // else accept the expanded simplex (which is the current state of simplex)\n\n            // improvement found, exit iteration\n            return;\n\n        }\n\n        // reflect point is not better than the best point\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // contracted point is better than the best point\n            // accept the contracted simplex (already updated by evaluateNewSimplex)\n\n            // improvement found, exit iteration\n            return;\n        }\n\n        // Neither reflection nor contraction produced a point better than the best point.\n        // Perform a shrink step (replaces all points except the best).\n        // This step was missing in the original code.\n        evaluateNewSimplex(original, sigma, comparator);\n\n        // The simplex has been updated (shrunk), end of iteration.\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}