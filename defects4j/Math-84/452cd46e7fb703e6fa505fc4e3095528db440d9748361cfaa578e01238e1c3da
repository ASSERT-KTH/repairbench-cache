{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final RealPointValuePair[] previous = simplex.clone();\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            // else expanded simplex is better and simplex has been updated in evaluateNewSimplex\n\n            // check convergence and return if satisfied\n            if (checker != null && checker.converged(getIterations(), previous[0], simplex[0])) {\n                return;\n            }\n            System.arraycopy(simplex, 0, previous, 0, simplex.length);\n            continue;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            // simplex has been updated in evaluateNewSimplex\n            if (checker != null && checker.converged(getIterations(), previous[0], simplex[0])) {\n                return;\n            }\n            System.arraycopy(simplex, 0, previous, 0, simplex.length);\n            continue;\n        }\n\n        // shrink simplex towards best point (original[0]) if neither reflected nor contracted improved\n        for (int i = 1; i < simplex.length; ++i) {\n            final double[] bestPoint = original[0].getPoint();\n            final double[] currPoint = simplex[i].getPoint();\n            final double[] newPoint = currPoint.clone();\n            for (int j = 0; j < newPoint.length; ++j) {\n                newPoint[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);\n            }\n            final double newValue = computeObjectiveValue(newPoint);\n            simplex[i] = new RealPointValuePair(newPoint, newValue);\n        }\n        java.util.Arrays.sort(simplex, comparator);\n\n        if (checker != null && checker.converged(getIterations(), previous[0], simplex[0])) {\n            return;\n        }\n        System.arraycopy(simplex, 0, previous, 0, simplex.length);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}