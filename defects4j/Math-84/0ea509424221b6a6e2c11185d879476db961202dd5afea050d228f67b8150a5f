{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (getIterations() < getMaxIterations() && getEvaluations() < getMaxEvaluations()) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = replaceWorstPoint(original, reflected, comparator);\n            } else {\n                // accept the expanded simplex\n                simplex = replaceWorstPoint(original, expanded, comparator);\n            }\n\n            // check convergence\n            if (checkConvergence(simplex, comparator)) {\n                return;\n            }\n\n            continue;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = replaceWorstPoint(original, contracted, comparator);\n\n            // check convergence\n            if (checkConvergence(simplex, comparator)) {\n                return;\n            }\n        } else {\n            // go to the next iteration with a smaller simplex\n            reduceStepSize();\n        }\n    }\n\n    // max iterations exceeded\n    throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n}\n\nprivate RealPointValuePair[] replaceWorstPoint(final RealPointValuePair[] original, \n                                               final RealPointValuePair replacement,\n                                               final Comparator<RealPointValuePair> comparator) {\n    RealPointValuePair[] newSimplex = original.clone();\n    int worstIndex = 0;\n    for (int i = 1; i < newSimplex.length; i++) {\n        if (comparator.compare(newSimplex[i], newSimplex[worstIndex]) > 0) {\n            worstIndex = i;\n        }\n    }\n    newSimplex[worstIndex] = replacement;\n    return newSimplex;\n}\n\nprivate boolean checkConvergence(final RealPointValuePair[] simplex, \n                                 final Comparator<RealPointValuePair> comparator) {\n    final double[] values = new double[simplex.length];\n    for (int i = 0; i < simplex.length; i++) {\n        values[i] = simplex[i].getValue();\n    }\n    return getConvergenceChecker().converged(0, values);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}