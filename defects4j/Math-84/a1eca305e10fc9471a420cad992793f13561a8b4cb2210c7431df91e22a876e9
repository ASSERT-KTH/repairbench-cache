{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original simplex and its best vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // try an expansion step from the reflected simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            return;\n        }\n\n        // perform a contraction step\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            return;\n        }\n\n        // Neither reflection nor contraction improved the simplex.\n        // Perform a shrink step: update all vertices (except the best) toward the best vertex.\n        // Here we use a shrink factor of 0.5.\n        for (int i = 1; i < simplex.length; i++) {\n            final double[] vertex = simplex[i].getPoint();\n            final double[] bestPoint = best.getPoint();\n            final double[] newVertex = new double[vertex.length];\n            for (int j = 0; j < vertex.length; j++) {\n                newVertex[j] = bestPoint[j] + 0.5 * (vertex[j] - bestPoint[j]);\n            }\n            simplex[i] = new RealPointValuePair(newVertex, computeObjectiveValue(newVertex));\n        }\n        return;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}