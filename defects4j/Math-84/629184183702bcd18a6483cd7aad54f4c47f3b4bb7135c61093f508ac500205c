{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = replaceWorstPoint(reflected, comparator);\n            } else {\n                // accept the expanded simplex\n                simplex = replaceWorstPoint(expanded, comparator);\n            }\n\n        } else {\n            // perform a contraction step\n            final RealPointValuePair[] contractedSimplex = new RealPointValuePair[simplex.length];\n            contractedSimplex[0] = best;\n            for (int i = 1; i < simplex.length; ++i) {\n                final RealPointValuePair point = simplex[i];\n                final double[] newPoint = new double[point.getPoint().length];\n                for (int j = 0; j < newPoint.length; ++j) {\n                    newPoint[j] = (1 - gamma) * best.getPoint()[j] + gamma * point.getPoint()[j];\n                }\n                contractedSimplex[i] = new RealPointValuePair(newPoint, Double.NaN, false);\n            }\n            simplex = evaluateSimplex(contractedSimplex, comparator);\n        }\n\n        // check convergence\n        boolean converged = true;\n        for (int i = 1; i < simplex.length; ++i) {\n            if (!isConverged(simplex[i].getPoint(), best.getPoint())) {\n                converged = false;\n                break;\n            }\n        }\n        if (converged) {\n            return;\n        }\n\n        // check we didn't exceed the number of allowed iterations\n        checkIterationCount();\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}