{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();\n    RealPointValuePair previous = simplex[0];\n    boolean converged = false;\n\n    while (!converged) {\n\n        incrementIterationsCounter();\n\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            // optional: else, keep expanded\n            converged = checker.converged(getIterations(), previous, simplex[0]);\n            previous = simplex[0];\n            continue;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            // the simplex has already been updated inside evaluateNewSimplex\n            converged = checker.converged(getIterations(), previous, simplex[0]);\n            previous = simplex[0];\n            continue;\n        }\n\n        // if contraction failed, shrink simplex towards best point and continue\n        for (int i = 1; i < simplex.length; ++i) {\n            final double[] bestPoint = simplex[0].getPoint();\n            final double[] currPoint = simplex[i].getPoint().clone();\n            for (int j = 0; j < currPoint.length; ++j) {\n                currPoint[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);\n            }\n            final double currValue = computeObjectiveValue(currPoint);\n            simplex[i] = new RealPointValuePair(currPoint, currValue);\n        }\n\n        // sort simplex\n        Arrays.sort(simplex, comparator);\n\n        converged = checker.converged(getIterations(), previous, simplex[0]);\n        previous = simplex[0];\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}