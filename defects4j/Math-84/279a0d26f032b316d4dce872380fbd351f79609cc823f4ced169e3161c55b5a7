{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    // Count one iteration.\n    incrementIterationsCounter();\n\n    // Save the current simplex.\n    final RealPointValuePair[] original = simplex;\n    final RealPointValuePair best = original[0];\n\n    // Reflection step.\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n        // Expansion step.\n        final RealPointValuePair[] reflectedSimplex = simplex;\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            simplex = reflectedSimplex;\n        }\n        return;\n    }\n\n    // Contraction step.\n    final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        return;\n    }\n\n    // If neither reflection nor contraction improved the simplex,\n    // perform a shrink step.\n    final double[] bestPoint = best.getPoint();\n    for (int i = 1; i < simplex.length; i++) {\n        final double[] vertex = simplex[i].getPoint();\n        final double[] shrunk = new double[vertex.length];\n        for (int j = 0; j < vertex.length; j++) {\n            shrunk[j] = bestPoint[j] + 0.5 * (vertex[j] - bestPoint[j]);\n        }\n        // Re-evaluate the function at the new (shrunk) vertex.\n        simplex[i] = new RealPointValuePair(shrunk, getFunctionValue(shrunk));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}