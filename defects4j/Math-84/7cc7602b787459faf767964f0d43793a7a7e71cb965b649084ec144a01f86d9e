{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // one reflection/expansion/contraction cycle per call\n    incrementIterationsCounter();\n\n    // save the original simplex and its best vertex\n    final RealPointValuePair[] original = simplex;\n    final RealPointValuePair best     = original[0];\n\n    // reflection\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n        // expansion\n        final RealPointValuePair[] reflectedSimplex = simplex;\n        final RealPointValuePair expanded         = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // accept the reflected simplex if expansion isn't better\n            simplex = reflectedSimplex;\n        }\n    } else {\n        // contraction (or shrink)\n        evaluateNewSimplex(original, gamma, comparator);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}