{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) >= 0) {\n                // neither reflection nor contraction has improved the best point\n                // perform a shrink step\n                final RealPointValuePair[] shrunkSimplex = original.clone();\n                final RealPointValuePair bestOriginal = original[0];\n                for (int i = 1; i < original.length; ++i) {\n                    double[] newPoint = new double[bestOriginal.getPointRef().length];\n                    for (int j = 0; j < newPoint.length; ++j) {\n                        newPoint[j] = bestOriginal.getPointRef()[j] + gamma * (original[i].getPointRef()[j] - bestOriginal.getPointRef()[j]);\n                    }\n                    shrunkSimplex[i] = new RealPointValuePair(newPoint, Double.NaN, false);\n                }\n                evaluateSimplex(comparator);\n            }\n\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}