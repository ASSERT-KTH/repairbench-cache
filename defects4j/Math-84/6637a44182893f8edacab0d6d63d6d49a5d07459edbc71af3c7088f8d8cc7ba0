{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // count an iteration\n    incrementIterationsCounter();\n\n    // Save the current simplex and its best vertex.\n    final RealPointValuePair[] original = simplex;\n    final RealPointValuePair best = original[0];\n\n    // Reflection step.\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n        // Reflection improved the best point.\n        // Save the reflected simplex so it can be recovered if expansion fails.\n        final RealPointValuePair[] reflectedSimplex = simplex;\n        // Try an expansion step.\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // If expansion did not improve upon the reflection,\n            // restore the reflected simplex.\n            simplex = reflectedSimplex;\n        }\n        return;\n    }\n\n    // Contraction step.\n    final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        // If contraction produced improvement, accept it.\n        return;\n    }\n\n    // Neither reflection nor contraction yielded an improvement.\n    // Therefore, perform a shrink of the simplex around the best vertex.\n    // (Shrink each vertex (except the best) toward the best by a factor of 0.5.)\n    for (int i = 1; i < simplex.length; i++) {\n        final double[] bestPoint = best.getPointRef();\n        final double[] currentPoint = simplex[i].getPointRef();\n        final double[] newPoint = new double[bestPoint.length];\n        for (int j = 0; j < bestPoint.length; j++) {\n            newPoint[j] = bestPoint[j] + 0.5 * (currentPoint[j] - bestPoint[j]);\n        }\n        // Re-evaluate the objective function at the new point.\n        simplex[i] = new RealPointValuePair(newPoint, evaluate(newPoint));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}