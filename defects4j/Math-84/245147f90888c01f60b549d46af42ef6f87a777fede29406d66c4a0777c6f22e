{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = replaceFirstSimplex(reflected);\n            } else {\n                // accept the expanded simplex\n                simplex = replaceFirstSimplex(expanded);\n            }\n\n        } else {\n            // perform a contraction step\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = replaceFirstSimplex(contracted);\n            } else {\n                // we shrink the simplex\n                simplex = shrinkSimplex(comparator);\n            }\n        }\n\n    }\n\n    private RealPointValuePair[] replaceFirstSimplex(final RealPointValuePair replacement) {\n        System.arraycopy(simplex, 1, simplex, 1, simplex.length - 1);\n        simplex[0] = replacement;\n        return simplex;\n    }\n\n    private RealPointValuePair[] shrinkSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException {\n        final RealPointValuePair best = simplex[0];\n        for (int i = 1; i < simplex.length; ++i) {\n            final RealPointValuePair newVertex = evaluateNewSimplex(best, simplex[i], 0.5, comparator);\n            simplex[i] = newVertex;\n        }\n        // re-sort vertices (if needed)\n        sortSimplex(simplex, comparator);\n        return simplex;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}