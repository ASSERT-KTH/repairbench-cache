{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n// buggy code\n//        while (true) {\n//            incrementIterationsCounter();\n//            // save the original vertex\n//            final RealPointValuePair[] original = simplex;\n//            final RealPointValuePair best = original[0];\n//            // perform a reflection step\n//            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n//            if (comparator.compare(reflected, best) < 0) {\n//                // compute the expanded simplex\n//                final RealPointValuePair[] reflectedSimplex = simplex;\n//                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n//                if (comparator.compare(reflected, expanded) <= 0) {\n//                    // accept the reflected simplex\n//                    simplex = reflectedSimplex;\n//                }\n//                return;\n//            }\n//            // compute the contracted simplex\n//            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n//            if (comparator.compare(contracted, best) < 0) {\n//                // accept the contracted simplex\n//            // check convergence\n            while (true) {\n                incrementIterationsCounter();\n                // save the original vertex\n                final RealPointValuePair[] original = simplex;\n                final RealPointValuePair best = original[0];\n                // perform a reflection step\n                final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n                if (comparator.compare(reflected, best) < 0) {\n                    // compute the expanded simplex\n                    final RealPointValuePair[] reflectedSimplex = simplex;\n                    final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                    if (comparator.compare(reflected, expanded) <= 0) {\n                        // accept the reflected simplex\n                        simplex = reflectedSimplex;\n                    }\n                    return;\n                }\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = original;\n                }\n                return;\n            }\n        }\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}