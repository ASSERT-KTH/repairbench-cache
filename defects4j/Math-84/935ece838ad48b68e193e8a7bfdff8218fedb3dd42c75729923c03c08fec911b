{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n            \n            // Check if we've reached the maximum allowed iterations\n            incrementIterationsCounter();\n            \n            // Check for convergence\n            boolean converged = checkConvergence();\n            if (converged) {\n                return;\n            }\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n                // Continue with next iteration, don't return\n                continue;\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // Accept the contracted simplex - no explicit update needed\n                // as evaluateNewSimplex already updated the simplex\n                continue;\n            }\n            \n            // Perform a sigma contraction of the simplex\n            RealPointValuePair[] points = new RealPointValuePair[simplex.length];\n            points[0] = simplex[0];\n            for (int i = 1; i < simplex.length; ++i) {\n                final double[] contractedCoordinates = contract(original[0], original[i]);\n                points[i] = new RealPointValuePair(contractedCoordinates,\n                                                   evaluate(contractedCoordinates), false);\n            }\n            simplex = points;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}