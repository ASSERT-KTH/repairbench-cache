{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = evaluateNewSimplex(original, khi, comparator);\n                } else {\n                    // accept the reflected simplex\n                    simplex = evaluateNewSimplex(original, 1.0, comparator);\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contractedSimplex;\n                } else {\n                    // do a complete restart\n                    simplex = original;\n                    for (int i = 0; i < simplex.length; i++) {\n                        RealPointValuePair vertex = simplex[i];\n                        final double[] point = vertex.getPointRef();\n                        double[] centroid = computeCentroid(simplex, i);\n                        for (int k = 0; k < point.length; k++) {\n                            point[k] = centroid[k] + alpha * (point[k] - centroid[k]);\n                        }\n                        simplex[i] = new RealPointValuePair(point, computeFunctionValue(point), false);\n                    }\n                    sortSimplex(comparator);\n                }\n\n            }\n\n            // check convergence\n            if (isConverged(simplex)) {\n                return;\n            }\n\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}