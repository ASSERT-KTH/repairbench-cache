{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();\n    RealPointValuePair previous = simplex[0];\n    \n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save original simplex and best point\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            // check convergence before returning\n            if (checker != null && checker.converged(getIterations(), previous, simplex[0])) {\n                return;\n            }\n\n            previous = simplex[0];\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // contracted is better than the best point so accept it\n            // simplex is already updated in evaluateNewSimplex\n            if (checker != null && checker.converged(getIterations(), previous, simplex[0])) {\n                return;\n            }\n\n            previous = simplex[0];\n            return;\n        }\n\n        // Neither reflection nor contraction improved things: shrink simplex towards best point\n        // Call evaluateNewSimplex with parameter=0 for shrinking\n        evaluateNewSimplex(original, 0.0, comparator);\n\n        // check convergence after shrink\n        if (checker != null && checker.converged(getIterations(), previous, simplex[0])) {\n            return;\n        }\n\n        previous = simplex[0];\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}