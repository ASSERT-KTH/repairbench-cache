{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final RealPointValuePair[] previous = simplex.clone();\n\n    incrementIterationsCounter();\n\n    // save the original vertex\n    final RealPointValuePair[] original = simplex.clone();\n    final RealPointValuePair best = original[0];\n\n    // perform a reflection step\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n\n        // compute the expanded simplex\n        final RealPointValuePair[] reflectedSimplex = simplex.clone();\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // accept the reflected simplex\n            simplex = reflectedSimplex;\n        }\n        // else expanded was accepted via evaluateNewSimplex\n\n        return;\n    }\n\n    // compute the contracted simplex\n    final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        // accept the contracted simplex\n        // evaluateNewSimplex already sets simplex\n        return;\n    }\n\n    // check for convergence: do not loop forever!\n    // note: in original version, the loop is handled externally by the optimizer\n\n    // If none of reflection/expansion/contraction improves, just return\n    // and let the optimizer convergence checker decide to stop or continue\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}