{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        final RealPointValuePair reflectedBest = simplex[0];\n\n        if (comparator.compare(reflectedBest, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            final RealPointValuePair expandedBest = simplex[0];\n\n            if (comparator.compare(reflectedBest, expandedBest) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            // else simplex is already set to expanded\n        } else {\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            final RealPointValuePair contractedBest = simplex[0];\n            if (comparator.compare(contractedBest, best) < 0) {\n                // accept the contracted simplex\n                // already set\n            } else {\n                // shrink simplex towards best\n                for (int i = 1; i < simplex.length; ++i) {\n                    final double[] bestPoint = best.getPointRef();\n                    final double[] currPoint = simplex[i].getPointRef();\n                    final double[] newPoint = new double[currPoint.length];\n                    for (int j = 0; j < currPoint.length; ++j) {\n                        newPoint[j] = 0.5 * (bestPoint[j] + currPoint[j]);\n                    }\n                    simplex[i] = new RealPointValuePair(newPoint,\n                                                        computeObjectiveValue(newPoint),\n                                                        false);\n                }\n            }\n        }\n\n        // check convergence\n        if (getConvergenceChecker() != null &&\n            getConvergenceChecker().converged(getIterations(), best, simplex[0])) {\n            return;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}