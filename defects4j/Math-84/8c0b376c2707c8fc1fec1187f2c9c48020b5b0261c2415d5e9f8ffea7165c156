{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final int maxUltra = getMaxUltraEvaluations();\n    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();\n    final int maxEvaluations = getMaxEvaluations();\n\n    // Initialize iterations counter\n    resetIterationsCounter();\n    resetEvaluationsCounter();\n\n    while (true) {\n        // Check convergence first\n        if (checker != null) {\n            if (checker.converged(getIterations(), simplex)) {\n                return;\n            }\n        }\n\n        // Check evaluations limit\n        if (getEvaluations() >= maxEvaluations) {\n            throw new OptimizationException(\n                new MaxEvaluationsExceededException(maxEvaluations));\n        }\n\n        // Check iterations limit\n        if (getIterations() >= getMaxIterations()) {\n            throw new OptimizationException(\n                new MaxIterationsExceededException(getMaxIterations()));\n        }\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            return;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            // check convergence\n            if (checker != null && checker.converged(getIterations(), simplex)) {\n                return;\n            }\n        }\n\n        // Perform a shrink operation if none of the above worked\n        simplex = shrinkSimplex(original, comparator);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}