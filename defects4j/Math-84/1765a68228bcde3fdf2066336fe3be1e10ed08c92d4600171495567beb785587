{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // Save the original vertex\n    final RealPointValuePair[] original = simplex.clone();\n    final RealPointValuePair best = original[0];\n    final RealPointValuePair worst = original[original.length - 1];\n\n    // --- Reflection step ---\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n        // Compute expanded simplex\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // Accept the reflected simplex\n            // 'simplex' already set by evaluateNewSimplex for reflected\n            // no action needed, just return\n        } else {\n            // Accept the expanded simplex\n            // 'simplex' already set by evaluateNewSimplex for expanded\n        }\n        return;\n    }\n\n    // If reflected point is not better than the best, try contraction\n    if (comparator.compare(reflected, worst) < 0) {\n        // Accept the reflected simplex (better than at least worst)\n        // 'simplex' already set by evaluateNewSimplex for reflected\n        return;\n    }\n\n    // Otherwise, perform contraction\n    final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n    if (comparator.compare(contracted, worst) < 0) {\n        // Accept the contracted simplex\n        // 'simplex' already set by evaluateNewSimplex for contracted\n        return;\n    }\n\n    // If contraction was not successful, shrink the simplex towards best\n    for (int i = 1; i < simplex.length; ++i) {\n        final double[] bestPoint = simplex[0].getPointRef();\n        final double[] currPoint = simplex[i].getPointRef();\n        double[] shrinked = new double[currPoint.length];\n        for (int j = 0; j < currPoint.length; ++j) {\n            shrinked[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);\n        }\n        simplex[i] = new RealPointValuePair(\n                shrinked, \n                function.value(shrinked), \n                false\n        );\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}