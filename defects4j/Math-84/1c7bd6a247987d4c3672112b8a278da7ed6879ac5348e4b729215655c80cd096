{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        final RealPointValuePair[] previous = simplex.clone();\n        final RealPointValuePair bestPrevious = previous[0];\n\n        // save the original simplex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            // else the expanded simplex is already in place (simplex updated inside evaluateNewSimplex)\n\n            // check convergence\n            boolean converged = true;\n            for (int i = 0; i < simplex.length; ++i) {\n                if (!checker.converged(getIterations(), previous[i], simplex[i])) {\n                    converged = false;\n                    break;\n                }\n            }\n            if (converged) {\n                return;\n            } else {\n                continue;\n            }\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            // simplex updated inside evaluateNewSimplex\n\n            // check convergence\n            boolean converged = true;\n            for (int i = 0; i < simplex.length; ++i) {\n                if (!checker.converged(getIterations(), previous[i], simplex[i])) {\n                    converged = false;\n                    break;\n                }\n            }\n            if (converged) {\n                return;\n            } else {\n                continue;\n            }\n        }\n\n        // shrink the simplex towards the best point\n        for (int i = 1; i < simplex.length; ++i) {\n            final double[] bestPoint = original[0].getPoint();\n            final double[] x = original[i].getPoint();\n            final double[] newX = new double[x.length];\n            for (int j = 0; j < x.length; ++j) {\n                newX[j] = bestPoint[j] + sigma * (x[j] - bestPoint[j]);\n            }\n            simplex[i] = new RealPointValuePair(newX, evaluateObjective(newX), false);\n        }\n        // reordering simplex\n        Arrays.sort(simplex, comparator);\n\n        // check convergence\n        boolean converged = true;\n        for (int i = 0; i < simplex.length; ++i) {\n            if (!checker.converged(getIterations(), previous[i], simplex[i])) {\n                converged = false;\n                break;\n            }\n        }\n        if (converged) {\n            return;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}