{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // Save current best point\n    final RealPointValuePair[] original = simplex;\n    final RealPointValuePair best = original[0];\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // Perform reflection\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // Reflection is better than the best point so far\n\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // Accept reflected simplex\n                simplex = reflectedSimplex;\n            }\n            // Else keep expanded simplex (already in this.simplex)\n        } else {\n            // Try a contraction\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // Accept contracted simplex (already in this.simplex)\n                // otherwise, all other options failed and the simplex has been reduced\n            } else {\n                // Shrink simplex towards best point\n                for (int i = 1; i < simplex.length; ++i) {\n                    final double[] bestPoint = simplex[0].getPointRef();\n                    final double[] currentPoint = simplex[i].getPointRef();\n                    final double[] newPoint = new double[bestPoint.length];\n                    for (int j = 0; j < bestPoint.length; ++j) {\n                        newPoint[j] = bestPoint[j] + 0.5 * (currentPoint[j] - bestPoint[j]);\n                    }\n                    simplex[i] = new RealPointValuePair(newPoint, Double.NaN, false);\n                }\n                evaluateSimplex(comparator);\n            }\n        }\n\n        // After one iteration, check convergence between best and worst point\n        final RealPointValuePair previousBest = best;\n        final RealPointValuePair currentBest = simplex[0];\n        final boolean converged = getConvergenceChecker().converged(getIterations(), previousBest, currentBest);\n        if (converged) {\n            return;\n        }\n\n        // update \"original\" and \"best\" for next iteration\n        // (deep copy is not necessary as evaluating new simplex does not alter existing one directly)\n        System.arraycopy(simplex, 0, original, 0, simplex.length);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}