{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = createSimplex(original, reflected);\n            } else {\n                // accept the expanded simplex\n                simplex = createSimplex(original, expanded);\n            }\n        } else {\n            // perform a contraction step\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = createSimplex(original, contracted);\n            } else {\n                // shrink simplex (not sure this can really ever happen)\n                simplex = shrinkSimplex(original, comparator);\n            }\n        }\n\n        // check convergence\n        boolean converged = true;\n        for (int i = 1; converged && (i < simplex.length); ++i) {\n            converged = comparator.compare(original[0], simplex[i]) >= 0;\n        }\n        if (converged) {\n            // we are done\n            return;\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}