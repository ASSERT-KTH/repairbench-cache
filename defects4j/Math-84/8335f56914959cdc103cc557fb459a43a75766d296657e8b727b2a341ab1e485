{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPoint() != original[0].getPoint() ? evaluateNewSimplex(original, khi, comparator, true) : simplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflected.getPoint() != original[0].getPoint() ? evaluateNewSimplex(original, 1.0, comparator, true) : simplex;\n                }\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.getPoint() != original[0].getPoint() ? evaluateNewSimplex(original, gamma, comparator, true) : simplex;\n                } else {\n                    // perform a shrink step\n                    simplex = shrinkSimplex(original, comparator);\n                }\n            }\n            if (converged(simplex)) {\n                return;\n            }\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}