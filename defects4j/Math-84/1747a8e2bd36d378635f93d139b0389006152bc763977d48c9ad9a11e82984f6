{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = new RealPointValuePair[]{expanded};\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = new RealPointValuePair[]{contracted};\n\n                // check convergence\n                return;\n            } else {\n                //compute the shrink simplex\n                final RealPointValuePair[] shrinkedSimplex = shrinkSimplex(original, best) ;\n                simplex = shrinkedSimplex;\n                return;\n\n            }\n\n        }\n\n    }\n\n    private RealPointValuePair[] shrinkSimplex(final RealPointValuePair[] original, final RealPointValuePair best) throws FunctionEvaluationException {\n        RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n        for(int i = 0; i < original.length; i++){\n            shrinkedSimplex[i] = new RealPointValuePair(best.getPoint(), best.getValue());\n        }\n        return shrinkedSimplex;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}