{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        // check if we test max evaluation\n        if (getEvaluations() >= this.getMaxEvaluations()) {\n            throw new OptimizationException(new MaxEvaluationsExceededException(getMaxEvaluations()));\n        }\n\n        // check if we test max iterations\n        if (getIterations() >= this.getMaxIterations()) {\n            throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n        }\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = Arrays.copyOf(original, original.length);\n            simplex[simplex.length-1] = contracted;\n        }\n\n        // check convergence\n        if (convergenceChecker != null &&\n            convergenceChecker.converged(getIterations(), simplex)) {\n            return;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}