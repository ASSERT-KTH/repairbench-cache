{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // cache the original checker\n    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();\n    \n    final RealPointValuePair[] previousSimplex = new RealPointValuePair[simplex.length];\n    for (int i = 0; i < simplex.length; ++i) {\n        previousSimplex[i] = simplex[i];\n    }\n    \n    incrementIterationsCounter();\n\n    // save the original vertex\n    final RealPointValuePair[] original = simplex;\n    final RealPointValuePair best = original[0];\n\n    // perform a reflection step\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n\n        // compute the expanded simplex\n        final RealPointValuePair[] reflectedSimplex = simplex;\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // accept the reflected simplex\n            simplex = reflectedSimplex;\n        }\n        // else already set by evaluateNewSimplex\n\n    } else {\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            // already performed by evaluateNewSimplex\n        }\n        // else already performed by evaluateNewSimplex\n    }\n\n    // Now test for convergence\n    boolean converged = true;\n    for (int i = 0; i < simplex.length; ++i) {\n        if (!checker.converged(getIterations(), previousSimplex[i], simplex[i])) {\n            converged = false;\n            break;\n        }\n    }\n    if (converged) {\n        throw new OptimizationException(null); // break optimization, will be handled outside\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}