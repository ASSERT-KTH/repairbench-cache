{
    "generation": "@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        if (isMaxIterationsReached()) {\n            break;\n        }\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair[] reflectedSimplex = evaluateSimplex(comparator);\n\n        // perform a reflection step\n        final RealPointValuePair reflected = reflectedSimplex[0];\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] expandedSimplex = evaluateSimplex(comparator, khi);\n            final RealPointValuePair expanded = expandedSimplex[0];\n            if (comparator.compare(reflected, expanded) <= 0) {\n                simplex = reflectedSimplex;\n            } else {\n                simplex = expandedSimplex;\n            }\n\n            continue;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair[] contractedSimplex = evaluateSimplex(comparator, gamma);\n        final RealPointValuePair contracted = contractedSimplex[0];\n        if (comparator.compare(contracted, best) < 0) {\n            simplex = contractedSimplex;\n        } else {\n\n            // perform the shrink step\n            simplex = shrinkSimplex(original);\n            continue;\n\n        }\n\n        // Check convergence\n        boolean converged = true;\n        for (int i = 1; i < simplex.length; i++) {\n            if (comparator.compare(simplex[i], best) != 0) {\n                converged = false;\n                break;\n            }\n        }\n        if (converged) {\n            break;\n        }\n\n    }\n\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}