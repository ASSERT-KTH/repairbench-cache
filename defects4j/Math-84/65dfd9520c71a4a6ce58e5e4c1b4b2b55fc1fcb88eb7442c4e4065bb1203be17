{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = replaceFirstSimplex(reflected);\n            } else {\n                // accept the expanded simplex\n                simplex = replaceFirstSimplex(expanded);\n            }\n\n        } else {\n            // perform a contraction step\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, worst) < 0) {\n                // accept the contracted simplex\n                simplex = replaceFirstSimplex(contracted);\n            } else {\n                // shrink the simplex\n                for (int i = 1; i < simplex.length; ++i) {\n                    final RealPointValuePair newVertex = new RealPointValuePair(\n                        new double[] {\n                            (simplex[i].getPoint()[0] + best.getPoint()[0]) / 2,\n                            (simplex[i].getPoint()[1] + best.getPoint()[1]) / 2 },\n                        Double.NaN);\n                    simplex[i] = newVertex;\n                }\n                // evaluate the simplex\n                evaluateSimplex(comparator);\n            }\n        }\n\n        // check convergence\n        return;\n\n    }\n\n    /**\n     * Replace the first point in the simplex (the worst point) with a new point.\n     *\n     * @param newPoint new point to put at the first position\n     * @return a new simplex with the new point at the first position\n     */\n    private RealPointValuePair[] replaceFirstSimplex(RealPointValuePair newPoint) {\n        final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n        newSimplex[0] = newPoint;\n        System.arraycopy(simplex, 1, newSimplex, 1, simplex.length - 1);\n        return newSimplex;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}