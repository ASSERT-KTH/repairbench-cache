{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n                // Return only if the simplex was improved\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                // Return to allow the next iteration to proceed\n                return;\n            } else {\n                // Perform shrink step if both reflection and contraction fail\n                for (int i = 0; i < original.length; i++) {\n                    if (i != 0) { // skip the best point\n                        final double[] newPoint = new double[original[i].getPoint().length];\n                        final double[] bestPoint = best.getPoint();\n                        for (int j = 0; j < newPoint.length; j++) {\n                            newPoint[j] = (original[i].getPoint()[j] + bestPoint[j]) / 2.0;\n                        }\n                        simplex[i] = new RealPointValuePair(newPoint, Double.NaN, false);\n                    }\n                }\n            }\n\n            // Check for convergence\n            if (isConverged()) {\n                return;\n            }\n\n            // Check if maximum iterations have been reached\n            if (getIterations() >= getMaxIterations()) {\n                throw new MaxIterationsExceededException(getMaxIterations(), getIterations());\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}