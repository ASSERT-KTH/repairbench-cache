{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex based on the reflected simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = simplex; // Already set by evaluateNewSimplex\n                } else {\n                    // revert to the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n                return;\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            final RealPointValuePair[] contractedSimplex = simplex;\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contractedSimplex;\n                return;\n            } else {\n                // Revert to original simplex as contraction didn't improve\n                simplex = original;\n\n                // Check convergence\n                if (getConvergenceChecker().converged(getIterations(), getEvaluations(), best, best)) {\n                    return;\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}