{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // store current simplex\n        final RealPointValuePair[] previous = simplex.clone();\n        final RealPointValuePair best = previous[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(previous, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(previous, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            // else keep expanded (simplex has already been updated in evaluateNewSimplex)\n\n            // check convergence after expansion/reflection\n            if (checker != null && checker.converged(getIterations(), previous, simplex)) {\n                return;\n            }\n\n            continue;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(previous, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex (simplex has already been updated)\n            if (checker != null && checker.converged(getIterations(), previous, simplex)) {\n                return;\n            }\n            continue;\n        }\n\n        // shrink simplex towards best point\n        for (int i = 1; i < simplex.length; ++i) {\n            final double[] bestPoint = simplex[0].getPointRef();\n            final double[] currPoint = simplex[i].getPointRef();\n            final double[] shrunk = new double[bestPoint.length];\n            for (int j = 0; j < bestPoint.length; ++j) {\n                shrunk[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);\n            }\n            simplex[i] = new RealPointValuePair(\n                    shrunk,\n                    computeObjectiveValue(shrunk),\n                    false);\n        }\n        // re-sort simplex after shrink\n        Arrays.sort(simplex, comparator);\n\n        if (checker != null && checker.converged(getIterations(), previous, simplex)) {\n            return;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}