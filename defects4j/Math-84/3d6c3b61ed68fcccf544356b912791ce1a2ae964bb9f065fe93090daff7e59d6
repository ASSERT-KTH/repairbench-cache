{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = original;\n                System.arraycopy(evaluateSimplex(reflected.getPoint(), comparator), 0, simplex, 0, simplex.length);\n            } else {\n                // accept the expanded simplex\n                simplex = original;\n                System.arraycopy(evaluateSimplex(expanded.getPoint(), comparator), 0, simplex, 0, simplex.length);\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = original;\n                System.arraycopy(evaluateSimplex(contracted.getPoint(), comparator), 0, simplex, 0, simplex.length);\n            } else {\n                // shrink the simplex\n                for (int i = 1; i < simplex.length; ++i) {\n                    final double[] x = simplex[i].getPoint();\n                    final double[] xSmall = new double[x.length];\n                    for (int j = 0; j < x.length; ++j) {\n                        xSmall[j] = best.getPoint()[j] + rho * (x[j] - best.getPoint()[j]);\n                    }\n                    simplex[i] = new RealPointValuePair(xSmall, Double.NaN, false);\n                }\n                evaluateSimplex(comparator);\n            }\n\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}