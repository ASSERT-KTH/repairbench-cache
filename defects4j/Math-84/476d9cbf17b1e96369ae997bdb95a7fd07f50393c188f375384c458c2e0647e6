{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();\n\n    RealPointValuePair[] previousSimplex = simplex.clone();\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            // else, keep current simplex (expanded step), which is already set\n\n            // check convergence\n            boolean converged = true;\n            for (int i = 0; i < simplex.length; ++i) {\n                if (!checker.converged(getIterations(), previousSimplex[i], simplex[i])) {\n                    converged = false;\n                    break;\n                }\n            }\n            if (converged) {\n                return;\n            }\n\n            previousSimplex = simplex.clone();\n            continue;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n\n            // check convergence\n            boolean converged = true;\n            for (int i = 0; i < simplex.length; ++i) {\n                if (!checker.converged(getIterations(), previousSimplex[i], simplex[i])) {\n                    converged = false;\n                    break;\n                }\n            }\n            if (converged) {\n                return;\n            }\n\n            previousSimplex = simplex.clone();\n            continue;\n        }\n\n        // if we reach here, shrink the simplex towards best point, to avoid indefinite loop\n        for (int i = 1; i < simplex.length; ++i) {\n            double[] xi = simplex[0].getPoint().clone();\n            double[] xOld = simplex[i].getPoint();\n            for (int j = 0; j < xi.length; ++j) {\n                xi[j] = simplex[0].getPoint()[j] + sigma * (xOld[j] - simplex[0].getPoint()[j]);\n            }\n            final double f = computeObjectiveValue(xi);\n            simplex[i] = new RealPointValuePair(xi, f, true);\n        }\n\n        // check convergence\n        boolean converged = true;\n        for (int i = 0; i < simplex.length; ++i) {\n            if (!checker.converged(getIterations(), previousSimplex[i], simplex[i])) {\n                converged = false;\n                break;\n            }\n        }\n        if (converged) {\n            return;\n        }\n\n        previousSimplex = simplex.clone();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}