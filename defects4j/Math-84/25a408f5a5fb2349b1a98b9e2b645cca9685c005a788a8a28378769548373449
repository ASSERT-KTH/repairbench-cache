{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = simplex;\n            } else {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            return;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            return;\n        }\n\n        // check convergence\n        final RealPointValuePair[] simplex = this.simplex;\n        int j = 0;\n        for (int i = 1; i < simplex.length; ++i) {\n            if (comparator.compare(simplex[i], simplex[j]) < 0) {\n                j = i;\n            }\n        }\n        this.simplex[j] = best;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}