{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        incrementIterationsCounter();\n\n        // Save the original simplex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // Perform reflection\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // Reflection is better than the best; try expansion\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, 2.0, comparator); // Use khi (typically 2.0)\n            if (comparator.compare(expanded, reflected) < 0) {\n                // Expanded is better, keep the expanded simplex\n            } else {\n                // Revert to the reflected simplex\n                simplex = reflectedSimplex;\n            }\n        } else {\n            // Reflection did not improve; perform contraction\n            final RealPointValuePair contracted = evaluateNewSimplex(original, 0.5, comparator); // Use gamma (typically 0.5)\n            if (comparator.compare(contracted, best) >= 0) {\n                // Contraction did not improve; perform shrink\n                evaluateNewSimplex(original, 0.5, comparator); // Use sigma (typically 0.5)\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}