{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();\n    RealPointValuePair[] previous = null;\n    RealPointValuePair[] current = simplex;\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        if (previous != null && checker != null) {\n            boolean converged = true;\n            for (int i = 0; i < simplex.length; ++i) {\n                if (!checker.converged(getIterations(), previous[i], current[i])) {\n                    converged = false;\n                    break;\n                }\n            }\n            if (converged) {\n                return;\n            }\n        }\n\n        // save the original vertex\n        final RealPointValuePair[] original = current.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            previous = current;\n            current = simplex;\n            continue;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            previous = current;\n            current = simplex;\n            continue;\n        }\n\n        // if no improvement, break\n        return;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}