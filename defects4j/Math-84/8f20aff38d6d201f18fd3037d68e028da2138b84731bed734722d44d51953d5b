{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    boolean converged = false;\n    while (!converged && getIterations() < getMaxIterations()) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the expanded simplex\n                simplex = newSimplex(original, reflected, expanded);\n            }\n            converged = convergenceChecker.converged(getIterations(), simplex);\n            if (converged) {\n                return;\n            }\n            continue;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = newSimplex(original, contracted);\n            converged = convergenceChecker.converged(getIterations(), simplex);\n            if (converged) {\n                return;\n            }\n            continue;\n        }\n\n        // perform a reduction step if neither reflection nor contraction helped\n        performReduction();\n\n        // check convergence\n        converged = convergenceChecker.converged(getIterations(), simplex);\n    }\n\n    if (!converged) {\n        throw new OptimizationException(\n                new MaxIterationsExceededException(getMaxIterations()));\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}