{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = replaceFirstSimplex(reflected);\n            } else {\n                // accept the expanded simplex\n                simplex = replaceFirstSimplex(expanded);\n            }\n        } else {\n            // perform a contraction step\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, worst(best, comparator)) >= 0) {\n                // we are trapped in a flat area or wrong direction\n                simplex = shrinkSimplex(comparator);\n            } else {\n                // accept the contracted simplex\n                simplex = replaceFirstSimplex(contracted);\n            }\n        }\n\n        // check convergence\n        boolean converged = true;\n        for (RealPointValuePair point : simplex) {\n            if (comparator.compare(point, best) < 0) {\n                converged = false;\n                break;\n            }\n        }\n        if (converged) {\n            return;\n        }\n\n        incrementIterationsCounter();\n    }\n\n    private RealPointValuePair[] replaceFirstSimplex(RealPointValuePair newPoint) {\n        RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n        newSimplex[0] = newPoint;\n        System.arraycopy(simplex, 1, newSimplex, 1, simplex.length - 1);\n        return newSimplex;\n    }\n\n    private RealPointValuePair worst(RealPointValuePair best, Comparator<RealPointValuePair> comparator) {\n        RealPointValuePair worst = simplex[1];\n        for (int i = 2; i < simplex.length; i++) {\n            if (comparator.compare(worst, simplex[i]) < 0) {\n                worst = simplex[i];\n            }\n        }\n        return comparator.compare(best, worst) < 0 ? best : worst;\n    }\n\n    private RealPointValuePair[] shrinkSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException {\n        final RealPointValuePair best = simplex[0];\n        final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n        newSimplex[0] = best;\n        for (int i = 1; i < simplex.length; ++i) {\n            final RealPointValuePair contracted = evaluateNewSimplex(best, simplex[i], sigma, comparator);\n            if (comparator.compare(contracted, simplex[i]) < 0) {\n                newSimplex[i] = contracted;\n            } else {\n                newSimplex[i] = simplex[i];\n            }\n        }\n        return newSimplex;\n    }\n\n    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n                                                  final double coeff,\n                                                  final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException {\n        final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];\n        final double[] xSmallest = original[0].getPoint();\n        final double fSmallest = original[0].getValue();\n        double sum = 0;\n        for (int i = 1; i < original.length; ++i) {\n            final double[] x = original[i].getPoint();\n            for (int j = 0; j < x.length; ++j) {\n                x[j] = xSmallest[j] + coeff * (x[j] - xSmallest[j]);\n            }\n            newSimplex[i] = new RealPointValuePair(x, Double.NaN, false);\n            sum += newSimplex[i].getValue();\n        }\n        newSimplex[0] = new RealPointValuePair(xSmallest, fSmallest, false);\n\n        final RealPointValuePair centroid = new RealPointValuePair(computeCentroid(newSimplex), sum / (newSimplex.length - 1), false);\n        newSimplex[0] = evaluate(centroid.getPointRef());\n\n        return getReplacement(newSimplex, comparator);\n    }\n\n    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair smallest,\n                                                  final RealPointValuePair point,\n                                                  final double coeff,\n                                                  final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException {\n        final double[] xSmallest = smallest.getPointRef();\n        final double[] x = point.getPointRef();\n        final double[] xNew = new double[x.length];\n        for (int i = 0; i < x.length; ++i) {\n            xNew[i] = xSmallest[i] + coeff * (x[i] - xSmallest[i]);\n        }\n\n        return evaluate(xNew);\n    }\n\n    private RealPointValuePair getReplacement(final RealPointValuePair[] newSimplex,\n                                              final Comparator<RealPointValuePair> comparator) {\n        RealPointValuePair replacement = newSimplex[0];\n        for (int i = 1; i < newSimplex.length; ++i) {\n            if (comparator.compare(replacement, newSimplex[i]) > 0) {\n                replacement = newSimplex[i];\n            }\n        }\n        return replacement;\n    }\n\n    private double[] computeCentroid(final RealPointValuePair[] points) {\n        final double[] centroid = new double[points[0].getDimension()];\n        for (int i = 0; i < centroid.length; ++i) {\n            double sum = 0;\n            for (int j = 0; j < points.length; ++j) {\n                sum += points[j].getPointRef()[i];\n            }\n            centroid[i] = sum / points.length;\n        }\n        return centroid;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}