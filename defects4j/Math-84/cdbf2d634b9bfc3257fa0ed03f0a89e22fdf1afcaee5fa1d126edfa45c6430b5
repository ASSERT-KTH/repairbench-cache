{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = getSimplex();\n            } else {\n                // accept the expanded simplex\n                simplex = getSimplex();\n            }\n        } else {\n            // perform a contraction step\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) >= 0) {\n                // shrink the simplex\n                for (int i = 1; i < simplex.length; ++i) {\n                    final double[] point = simplex[i].getPoint();\n                    final double[] bestPoint = best.getPoint();\n                    for (int j = 0; j < point.length; ++j) {\n                        point[j] = bestPoint[j] + delta * (point[j] - bestPoint[j]);\n                    }\n                    simplex[i] = new RealPointValuePair(point, Double.NaN, false);\n                }\n                evaluateSimplex(comparator);\n            } else {\n                // accept the contracted simplex\n                simplex = getSimplex();\n            }\n        }\n\n        // check convergence\n        boolean converged = true;\n        for (int i = 1; i < simplex.length; ++i) {\n            if (comparator.compare(best, simplex[i]) != 0) {\n                converged = false;\n                break;\n            }\n        }\n        if (converged) {\n            return;\n        }\n\n        // we have not converged yet\n        throw new OptimizationException(\"no convergence\");\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}