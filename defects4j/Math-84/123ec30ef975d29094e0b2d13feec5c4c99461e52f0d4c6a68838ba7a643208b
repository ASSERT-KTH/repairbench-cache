{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            return;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            return;\n        }\n\n        // if we cannot improve on the best point, we shrink the simplex\n        final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n        newSimplex[0] = original[0];\n        for (int i = 1; i < original.length; ++i) {\n            final double[] coordinatesI = original[i].getPointRef();\n            final double[] bestCoordinates = original[0].getPointRef();\n            final double[] contracted0 = new double[coordinatesI.length];\n            for (int k = 0; k < contracted0.length; ++k) {\n                contracted0[k] = sigma * coordinatesI[k] + (1.0 - sigma) * bestCoordinates[k];\n            }\n            newSimplex[i] = new RealPointValuePair(contracted0,\n                                                   evaluationFunction.value(contracted0),\n                                                   false);\n        }\n        simplex = newSimplex;\n        return;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}