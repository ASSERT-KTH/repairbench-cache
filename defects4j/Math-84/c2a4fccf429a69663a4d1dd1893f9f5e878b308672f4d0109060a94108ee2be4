{
    "generation": "@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // count one more iteration\n    incrementIterationsCounter();\n\n    // make a working copy of the current simplex\n    final RealPointValuePair[] original = simplex.clone();\n    final RealPointValuePair best = original[0];\n\n    // 1) reflection\n    RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n        // reflection improved -> try expansion\n        final RealPointValuePair[] reflectedSimplex = simplex;\n        RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(expanded, reflected) < 0) {\n            // expansion gave further improvement -> keep expanded\n            // simplex already holds the expanded points\n        } else {\n            // reflection was better than expansion -> revert to reflection\n            simplex = reflectedSimplex;\n        }\n    } else {\n        // 2) contraction (no improvement on reflection)\n        RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // contraction improved -> keep contracted\n            // simplex already holds the contracted points\n        } else {\n            // 3) shrink (no improvement at all) -> reduce around best\n            evaluateNewSimplex(original, sigma, comparator);\n            // simplex now holds the shrunken points\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}