{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // Save original simplex\n    final RealPointValuePair[] original = simplex.clone();\n    final RealPointValuePair best = original[0];\n\n    // perform a reflection step\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n\n    if (comparator.compare(reflected, best) < 0) {\n        // compute the expanded simplex\n        final RealPointValuePair[] reflectedSimplex = simplex.clone();\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // accept the reflected simplex\n            simplex = reflectedSimplex;\n        }\n        // else the expanded simplex is best, so keep as is (\"evaluateNewSimplex\" already updated \"simplex\")\n        // either way, step is done\n        return;\n    }\n\n    // compute the contracted simplex\n    final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        // accept the contracted simplex\n        // \"evaluateNewSimplex\" already updated \"simplex\"\n        return;\n    }\n\n    // if we get here, neither reflection nor contraction produced improvement, so shrink towards best\n    for (int i = 1; i < simplex.length; ++i) {\n        final double[] bestPoint = simplex[0].getPointRef();\n        final double[] currPoint = simplex[i].getPointRef();\n        double[] newPoint = new double[bestPoint.length];\n        for (int j = 0; j < bestPoint.length; ++j) {\n            newPoint[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);\n        }\n        simplex[i] = new RealPointValuePair(\n            newPoint, \n            function.value(newPoint), \n            false);\n    }\n    // Sort the simplex, as required\n    Arrays.sort(simplex, comparator);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}