{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (!convergenceChecker.converged(getIterations(), previous, current)) {\n            if (getIterations() >= maxIterations) {\n                throw new MaxIterationsExceededException(maxIterations);\n            }\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = new RealPointValuePair[] { expanded };\n                }\n                return;\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = new RealPointValuePair[] { contracted };\n                return;\n            }\n\n            // perform a reduction step\n            final RealPointValuePair[] reducedSimplex = new RealPointValuePair[simplex.length];\n            for (int i = 0; i < reducedSimplex.length; i++) {\n                double[] reducedPoint = new double[simplex[i].getPoint().length];\n                for (int j = 0; j < reducedPoint.length; j++) {\n                    reducedPoint[j] = (simplex[i].getPoint()[j] + original[0].getPoint()[j]) * 0.5;\n                }\n                reducedSimplex[i] = new RealPointValuePair(reducedPoint,\n                                                           Double.NaN, false);\n            }\n            evaluateSimplex(reducedSimplex, comparator);\n            simplex = reducedSimplex;\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}