{
    "generation": "@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // Save a copy of the current simplex to use in the convergence check.\n    RealPointValuePair[] prevSimplex = simplex.clone();\n    final double shrinkFactor = 0.5;\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // Make a copy of the current simplex.\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // --- Reflection step ---\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // We got an improvement. Try an expansion step.\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // If the expansion did not yield a better simplex, keep the reflected one.\n                simplex = reflectedSimplex;\n            }\n        } else {\n            // --- Contraction step ---\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // The contracted simplex is accepted (its update is assumed to occur in evaluateNewSimplex).\n            } else {\n                // --- Shrink the simplex ---\n                // Neither reflection nor contraction improved the simplex.\n                // So, shrink all vertices (except the best one) toward the best vertex.\n                final RealPointValuePair bestVertex = simplex[0];\n                final double[] bestPoint = bestVertex.getPointRef();\n                for (int i = 1; i < simplex.length; i++) {\n                    final double[] currentPoint = simplex[i].getPointRef();\n                    final double[] newPoint = new double[bestPoint.length];\n                    for (int j = 0; j < bestPoint.length; j++) {\n                        newPoint[j] = bestPoint[j] + shrinkFactor * (currentPoint[j] - bestPoint[j]);\n                    }\n                    simplex[i] = new RealPointValuePair(newPoint, getObjectiveFunction().value(newPoint));\n                }\n            }\n        }\n\n        // Check for convergence by comparing the previous simplex with the current one.\n        if (convergenceChecker.converged(prevSimplex, simplex)) {\n            return;\n        }\n        prevSimplex = simplex.clone();\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}