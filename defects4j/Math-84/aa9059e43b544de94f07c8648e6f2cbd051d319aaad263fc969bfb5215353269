{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        boolean improved = true;\n\n        while (improved) {\n\n            improved = false;\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                improved = true;\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the expanded simplex\n                    simplex = evaluateNewSimplex(original, khi, comparator);\n                }\n            } else {\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = evaluateNewSimplex(original, gamma, comparator);\n                    improved = true;\n                } else {\n                    // check convergence\n                    if (comparator.compare(contracted, best) >= 0) {\n                        throw new OptimizationException(new ConvergenceException(\n                            Localization.TRANSLATION_UNABLE_TO_FIND_IMPROVING_POINT,\n                            getEvaluations(),\n                            getIterations()));\n                    }\n                }\n            }\n\n            // Check for convergence based on maximal iterations or evaluations\n            if (getIterations() >= getMaxIterations() || getEvaluations() >= getMaxEvaluations()) {\n                throw new OptimizationException(new MaxIterationsExceededException(\n                    getMaxIterations(),\n                    getEvaluations(),\n                    getIterations()));\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}