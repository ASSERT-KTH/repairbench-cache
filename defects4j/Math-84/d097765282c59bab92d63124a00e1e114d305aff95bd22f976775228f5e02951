{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // save the original simplex\n    final RealPointValuePair[] original = simplex.clone();\n    final RealPointValuePair best = original[0];\n    final RealPointValuePair worst = original[original.length - 1];\n\n    // perform a reflection step\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n\n    // Check whether we improved beyond the best point\n    if (comparator.compare(reflected, best) < 0) {\n        // compute the expanded simplex\n        final RealPointValuePair[] reflectedSimplex = simplex.clone();\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(expanded, reflected) < 0) {\n            // accept the expanded simplex\n            simplex = simplex.clone();\n        } else {\n            // accept the reflected simplex\n            simplex = reflectedSimplex;\n        }\n        incrementIterationsCounter();\n        return;\n    }\n\n    // If reflected is not better than best, but better than worst, accept it\n    if (comparator.compare(reflected, worst) < 0) {\n        simplex = simplex.clone();\n        incrementIterationsCounter();\n        return;\n    }\n\n    // Otherwise, try contraction\n    final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        // accept the contracted simplex\n        simplex = simplex.clone();\n        incrementIterationsCounter();\n        return;\n    }\n\n    // If contraction did not work, shrink the simplex towards best\n    for (int i = 1; i < simplex.length; ++i) {\n        final double[] bestPoint = best.getPoint();\n        final double[] curr = simplex[i].getPoint();\n        double[] shrunk = new double[bestPoint.length];\n        for (int j = 0; j < shrunk.length; ++j) {\n            shrunk[j] = bestPoint[j] + sigma * (curr[j] - bestPoint[j]);\n        }\n        simplex[i] = new RealPointValuePair(\n            shrunk, \n            evaluationFunction.value(shrunk),\n            false\n        );\n    }\n    // Sort simplex after shrinking\n    Arrays.sort(simplex, comparator);\n    incrementIterationsCounter();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}