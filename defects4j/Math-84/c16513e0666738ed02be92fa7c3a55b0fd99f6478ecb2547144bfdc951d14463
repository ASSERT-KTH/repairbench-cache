{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the expanded simplex\n                    simplex = getSimplex();\n                }\n\n                return;\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = getSimplex();\n                return;\n            }\n\n            // perform a reduction step\n            final RealPointValuePair[] reduced = new RealPointValuePair[simplex.length];\n            for (int i = 1; i < simplex.length; ++i) {\n                final double[] reducedPoint = new double[best.getPoint().length];\n                for (int j = 0; j < reducedPoint.length; ++j) {\n                    reducedPoint[j] = (simplex[i].getPoint()[j] + best.getPoint()[j]) * 0.5;\n                }\n                reduced[i] = new RealPointValuePair(reducedPoint, Double.NaN);\n            }\n            reduced[0] = best;\n            simplex = reduced;\n\n            // check convergence\n            if (isConverged()) {\n                return;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}