{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (getIterations() < getMaxIterations() && getEvaluations() < getMaxEvaluations()) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the expanded simplex\n                simplex = new RealPointValuePair[] {expanded};\n            }\n\n            // check convergence\n            if (isConverged(best, reflected)) {\n                return;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = new RealPointValuePair[] {contracted};\n\n                // check convergence\n                if (isConverged(best, contracted)) {\n                    return;\n                }\n            } else {\n                // reset the simplex to the best point\n                simplex = new RealPointValuePair[] {best};\n\n                // check convergence\n                if (isConverged(best, best)) {\n                    return;\n                }\n            }\n        }\n    }\n\n    // max iterations or evaluations exceeded\n    throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n}\n\nprivate boolean isConverged(final RealPointValuePair best, final RealPointValuePair point) {\n    return Math.abs(point.getValue() - best.getValue()) <= getConvergenceChecker().getRelativeThreshold() * Math.abs(best.getValue())\n        || Math.abs(point.getValue() - best.getValue()) <= getConvergenceChecker().getAbsoluteThreshold();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}