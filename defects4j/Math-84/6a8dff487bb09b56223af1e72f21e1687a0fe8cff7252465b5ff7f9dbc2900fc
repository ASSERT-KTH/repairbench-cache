{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // Keep a copy of previous simplex to check convergence\n        final RealPointValuePair[] previousSimplex = simplex.clone();\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        incrementIterationsCounter();\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            // If expanded is better, evaluateNewSimplex already updated simplex\n            // Otherwise, reflectedSimplex is better, already assigned above\n            // Return after expansion/reflection\n            // convergence check below\n\n        } else {\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                // evaluateNewSimplex already updated simplex\n                // Return after contraction\n            } else {\n                // shrink not implemented in MultiDirectional, so nothing to do\n                // Just return\n            }\n        }\n\n        // check convergence: compare previousSimplex and current simplex arrays\n        boolean converged = true;\n        for (int i = 0; i < simplex.length; ++i) {\n            if (!previousSimplex[i].equals(simplex[i])) {\n                converged = false;\n                break;\n            }\n        }\n        // If no improvement, throw exception to prevent infinite loop\n        if (converged) {\n            throw new OptimizationException(\"Simplex is stuck: no improvement in simplex\");\n        }\n        // otherwise, return as the simplex has moved/improved\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}