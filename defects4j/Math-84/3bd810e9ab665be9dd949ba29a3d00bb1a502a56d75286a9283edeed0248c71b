{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // count one more iteration (will throw if maxIterations is exceeded)\n    incrementIterationsCounter();\n\n    // save the current simplex for reference\n    final RealPointValuePair[] original = simplex.clone();\n    final RealPointValuePair best = original[0];\n\n    // 1) Reflection (scale = 1.0)\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n    if (comparator.compare(reflected, best) < 0) {\n        // 2) Expansion\n        // remember the reflected simplex\n        final RealPointValuePair[] reflectedSimplex = simplex.clone();\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        // if expansion did not improve over reflection, keep the reflection\n        if (comparator.compare(expanded, reflected) <= 0) {\n            simplex = reflectedSimplex;\n        }\n        return;\n    }\n\n    // 3) Contraction\n    final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n    if (comparator.compare(contracted, best) < 0) {\n        // contraction improved over the original best\n        return;\n    }\n\n    // 4) Shrink (reduce the simplex around the best point)\n    final double[] bestPoint = best.getPoint();\n    for (int i = 1; i < original.length; i++) {\n        // move each vertex partway back towards the best\n        final double[] xi = original[i].getPoint().clone();\n        for (int j = 0; j < xi.length; j++) {\n            xi[j] = bestPoint[j] + gamma * (xi[j] - bestPoint[j]);\n        }\n        // reevaluate the function at the shrunk point\n        simplex[i] = new RealPointValuePair(xi, computeObjectiveValue(xi));\n    }\n    // keep the best point in place\n    simplex[0] = best;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}