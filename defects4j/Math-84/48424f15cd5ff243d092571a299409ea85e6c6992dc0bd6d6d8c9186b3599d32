{
    "generation": "/** {@inheritDoc} */\n@Override\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // save the original vertex\n    final RealPointValuePair[] original = simplex.clone();\n    final RealPointValuePair best = original[0];\n\n    // perform a reflection step\n    final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n\n    if (comparator.compare(reflected, best) < 0) {\n\n        // compute the expanded simplex\n        final RealPointValuePair[] reflectedSimplex = simplex.clone();\n        final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n        if (comparator.compare(reflected, expanded) <= 0) {\n            // accept the reflected simplex\n            simplex = reflectedSimplex;\n        }\n        // else: simplex already updated in expanded case, keep as is.\n        return;\n\n    } else {\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            // nothing to do, simplex was already set in evaluateNewSimplex\n        }\n        // else: simplex already updated in contracted case, keep as is.\n        return;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}