{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (!isConvergenceReached()) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = new RealPointValuePair[] { expanded };\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = new RealPointValuePair[] { contracted };\n\n                // check convergence\n                return;\n            } else {\n                //compute the reduced simplex\n                final RealPointValuePair reduced = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(reduced, best) < 0) {\n                    simplex = new RealPointValuePair[] { reduced };\n                    return;\n                } else {\n                    //shrink the simplex\n                    for(int i = 1; i < simplex.length; ++i) {\n                        simplex[i] = new RealPointValuePair(best.getPoint()[0] + (simplex[i].getPoint()[0] - best.getPoint()[0]) * sigma,\n                                best.getPoint()[1] + (simplex[i].getPoint()[1] - best.getPoint()[1]) * sigma);\n                    }\n                }\n            }\n\n\n        }\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}