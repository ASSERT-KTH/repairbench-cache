{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = original;\n                simplex[0] = reflected;\n            } else {\n                // accept the expanded simplex\n                simplex = original;\n                simplex[0] = expanded;\n            }\n\n        } else {\n            // perform a contraction step\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) >= 0) {\n                // perform a shrink step\n                for (int i = 1; i < simplex.length; ++i) {\n                    simplex[i] = new RealPointValuePair(\n                        new double[] {\n                            0.5 * (simplex[i].getPoint()[0] + best.getPoint()[0]),\n                            0.5 * (simplex[i].getPoint()[1] + best.getPoint()[1])\n                        },\n                        Double.NaN,\n                        false\n                    );\n                }\n                // reevaluate the simplex\n                for (int i = 1; i < simplex.length; ++i) {\n                    simplex[i] = evaluate(simplex[i].getPoint());\n                }\n            } else {\n                // accept the contracted simplex\n                simplex = original;\n                simplex[0] = contracted;\n            }\n        }\n\n        // check convergence\n        return;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}