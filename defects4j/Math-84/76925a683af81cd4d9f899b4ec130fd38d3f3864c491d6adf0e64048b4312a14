{
    "generation": "    /** {@inheritDoc} */\n    @Override\n    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = replaceFirstSimplex(reflected);\n            } else {\n                // accept the expanded simplex\n                simplex = replaceFirstSimplex(expanded);\n            }\n        } else {\n            // perform a contraction step\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = replaceFirstSimplex(contracted);\n            } else {\n                // shrink the simplex\n                for (int i = 1; i < simplex.length; ++i) {\n                    final RealPointValuePair value = new RealPointValuePair(\n                            simplex[0].getPointRef()[0] + delta * (simplex[i].getPointRef()[0] - simplex[0].getPointRef()[0]),\n                            simplex[0].getPointRef()[1] + delta * (simplex[i].getPointRef()[1] - simplex[0].getPointRef()[1]),\n                            Double.NaN, false);\n                    simplex[i] = evaluate(value, comparator);\n                }\n                Arrays.sort(simplex, comparator);\n            }\n        }\n\n        // check convergence\n        return;\n\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}