{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n\n    // Find properties in common.\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property)) {\n        JSType thisPropertyType = getPropertyType(property);\n        JSType thatPropertyType =\n            that.toMaybeRecordType().getPropertyType(property);\n        if (thisPropertyType.isEquivalentTo(thatPropertyType)) {\n          builder.addProperty(property, thisPropertyType,\n              getPropertyNode(property));\n        }\n      }\n    }\n\n    JSType result = builder.build();\n    if (result.getPropertiesCount() == 0) {\n      return registry.createUnionType(this, that);\n    } else {\n      return result;\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}