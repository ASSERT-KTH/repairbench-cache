{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n\n    RecordType thisRecord = this.toMaybeRecordType().orElseThrow();\n    RecordType thatRecord = that.toMaybeRecordType().orElseThrow();\n\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    // Add all properties from both records where types are equivalent\n    for (String property : thisRecord.getProperties().keySet()) {\n        JSType thisType = thisRecord.getPropertyType(property);\n        JSType thatType = thatRecord.getPropertyType(property);\n        if (thatType != null && thisType.isEquivalentTo(thatType)) {\n            builder.addProperty(property, thisType, thisRecord.getPropertyNode(property));\n        }\n    }\n\n    // Add properties from 'that' not present in 'this'\n    for (String property : thatRecord.getProperties().keySet()) {\n        if (!thisRecord.hasProperty(property)) {\n            JSType thatType = thatRecord.getPropertyType(property);\n            builder.addProperty(property, thatType, thatRecord.getPropertyNode(property));\n        }\n    }\n\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}