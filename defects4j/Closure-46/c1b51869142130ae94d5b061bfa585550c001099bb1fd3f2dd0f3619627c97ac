{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property)) {\n        JSType thisPropertyType = getPropertyType(property);\n        JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n        if (thisPropertyType.isEquivalentTo(thatPropertyType)) {\n          builder.addProperty(property, thisPropertyType,\n              getPropertyNode(property));\n        }\n      }\n    }\n\n    for (String property : that.toMaybeRecordType().getProperties()) {\n        if (this.toMaybeRecordType() != null &&\n            this.toMaybeRecordType().hasProperty(property)) {\n          continue;\n        }\n        builder.addProperty(\n            property, that.toMaybeRecordType().getPropertyType(property), null);\n      }\n\n    JSType result = builder.build();\n    return result.isEmptyType() ? registry.getNativeObjectType(OBJECT_TYPE) : result;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}