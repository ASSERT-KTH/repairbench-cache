{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n  // Collect all properties from both record types\n  Set<String> allProperties = new HashSet<>(properties.keySet());\n  allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());\n\n  for (String property : allProperties) {\n    JSType thisType = properties.get(property);\n    JSType thatType = that.toMaybeRecordType().getPropertyType(property);\n\n    if (thisType != null && thatType != null) {\n      // If both record types have the property, use the union of the types\n      builder.addProperty(property, registry.createUnionType(thisType, thatType), null);\n    } else if (thisType != null) {\n      // If only this record type has the property, use this type\n      builder.addProperty(property, thisType, getPropertyNode(property));\n    } else {\n      // If only the other record type has the property, use that type\n      builder.addProperty(property, thatType, null);\n    }\n  }\n\n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}