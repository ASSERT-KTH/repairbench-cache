{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordType otherRecord = that.toMaybeRecordType();\n\n  // Collect common properties with equivalent types\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String property : properties.keySet()) {\n    if (otherRecord.hasProperty(property) &&\n        otherRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n      builder.addProperty(property, getPropertyType(property), getPropertyNode(property));\n    }\n  }\n  RecordType commonRecord = builder.build();\n  if (commonRecord.getPropertiesCount() == 0) {\n    // No common properties with equivalent types, so return union.\n    return registry.createUnionType(this, that);\n  }\n  if (commonRecord.isEquivalentTo(this)) {\n    return that;\n  }\n  if (commonRecord.isEquivalentTo(that)) {\n    return this;\n  }\n  // Otherwise, return the union of input record types\n  return registry.createUnionType(this, that);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}