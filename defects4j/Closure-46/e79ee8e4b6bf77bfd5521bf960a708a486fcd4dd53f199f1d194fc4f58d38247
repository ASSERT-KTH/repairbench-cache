{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    RecordType thatRecord = that.toMaybeRecordType();\n    Set<String> allProperties = new HashSet<>(properties.keySet());\n    allProperties.addAll(thatRecord.properties.keySet());\n    for (String property : allProperties) {\n      if (properties.containsKey(property) && thatRecord.hasProperty(property)) {\n        JSType thisPropertyType = getPropertyType(property);\n        JSType thatPropertyType = thatRecord.getPropertyType(property);\n        if (thisPropertyType.isEquivalentTo(thatPropertyType)) {\n          builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n        } else {\n          builder.addProperty(property, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n        }\n      } else if (properties.containsKey(property)) {\n        builder.addProperty(property, getPropertyType(property), getPropertyNode(property));\n      } else if (thatRecord.hasProperty(property)) {\n        builder.addProperty(property, thatRecord.getPropertyType(property), thatRecord.getPropertyNode(property));\n      }\n    }\n    JSType result = builder.build();\n    if (result.getProperties().isEmpty()) {\n      return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    return registry.createUnionType(this, that);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}