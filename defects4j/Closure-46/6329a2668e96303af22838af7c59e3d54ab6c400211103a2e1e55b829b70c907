{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    // The superclass implementation of JSType.getLeastSupertype already\n    // handles the various relationships between record types and other types\n    // correctly, including subtyping and creating union types where appropriate.\n    // The specific logic previously implemented for RecordType was incorrect\n    // as it created a new record type representing a restrictive intersection\n    // of equivalent properties, which is not the definition of the least supertype.\n    // By delegating to the superclass, we leverage the general and correct\n    // least supertype computation for all cases involving RecordTypes.\n    return super.getLeastSupertype(that);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}