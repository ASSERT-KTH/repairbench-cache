{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n\n    // Find the properties that are in both types.\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property)) {\n        JSType thisPropertyType = getPropertyType(property);\n        JSType thatPropertyType =\n            that.toMaybeRecordType().getPropertyType(property);\n        if (thisPropertyType.isEquivalentTo(thatPropertyType)) {\n          builder.addProperty(\n              property, thisPropertyType, getPropertyNode(property));\n        } else {\n           return registry.createUnionType(this, that);\n        }\n      }\n    }\n\n    for (String property : that.toMaybeRecordType().getOwnPropertyNames()) {\n      if (!properties.containsKey(property)) {\n        return registry.createUnionType(this, that);\n      }\n    }\n\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}