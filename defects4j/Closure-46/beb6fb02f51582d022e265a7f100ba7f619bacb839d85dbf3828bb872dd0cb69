{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    // Add properties from the current record type\n    for (String property : properties.keySet()) {\n      builder.addProperty(property, getPropertyType(property), getPropertyNode(property));\n    }\n\n    // Add properties from the `that` record type\n    for (String property : that.toMaybeRecordType().getPropertyNames()) {\n      if (!properties.containsKey(property)) {\n        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);\n      }\n    }\n\n    // Build the resulting record type\n    JSType result = builder.build();\n\n    // If the result is not a union type, return it directly\n    if (!that.isUnionType()) {\n      return result;\n    }\n\n    // Otherwise, create a union type of the current record type and the `that` record type\n    return registry.createUnionType(this, that);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}