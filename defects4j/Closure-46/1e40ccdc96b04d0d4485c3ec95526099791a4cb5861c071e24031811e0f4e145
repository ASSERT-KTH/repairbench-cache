{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property)) {\n        JSType thatType = that.toMaybeRecordType().getPropertyType(property);\n        JSType thisType = getPropertyType(property);\n        if (thisType.isEquivalentTo(thatType)) {\n          builder.addProperty(property, thisType, getPropertyNode(property));\n        }\n      }\n    }\n\n    for (String property : that.toMaybeRecordType().properties().keySet()) {\n      if (!properties.containsKey(property)) {\n        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);\n      }\n    }\n\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}