{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n\n    ObjectType thatRecord = that.toObjectType();\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (thatRecord.hasProperty(property)) {\n        JSType thisPropertyType = getPropertyType(property);\n        JSType thatPropertyType = thatRecord.getPropertyType(property);\n        if (thisPropertyType != null && thatPropertyType != null) {\n          JSType leastSupertype = thisPropertyType.getLeastSupertype(thatPropertyType);\n          builder.addProperty(property, leastSupertype, getPropertyNode(property));\n        }\n      }\n    }\n\n    for (String property : thatRecord.getPropertyNames()) {\n      if (!properties.containsKey(property)) {\n        builder.addProperty(property, thatRecord.getPropertyType(property), thatRecord.getPropertyNode(property));\n      }\n    }\n\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}