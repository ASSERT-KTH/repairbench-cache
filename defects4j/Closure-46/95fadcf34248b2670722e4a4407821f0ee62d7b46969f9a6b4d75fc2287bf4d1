{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    RecordType thisRecord = this.toMaybeRecordType();\n    RecordType thatRecord = that.toMaybeRecordType();\n    \n    // Get all unique properties from both records\n    Set<String> allProperties = new HashSet<>(thisRecord.properties.keySet());\n    allProperties.addAll(thatRecord.properties.keySet());\n    \n    for (String property : allProperties) {\n        JSType thisPropertyType = thisRecord.properties.get(property);\n        JSType thatPropertyType = thatRecord.properties.get(property);\n        \n        if (thisRecord.properties.containsKey(property) && thatRecord.properties.containsKey(property)) {\n            if (thisPropertyType.isEquivalentTo(thatPropertyType)) {\n                builder.addProperty(property, thisPropertyType, thisRecord.getPropertyNode(property));\n            } else {\n                // If property types are not equivalent, use the least supertype of the property types\n                builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType), null);\n            }\n        } else if (thisRecord.properties.containsKey(property)) {\n            builder.addProperty(property, thisPropertyType, thisRecord.getPropertyNode(property));\n        } else if (thatRecord.properties.containsKey(property)) {\n            builder.addProperty(property, thatPropertyType, thatRecord.getPropertyNode(property));\n        }\n    }\n    \n    JSType result = builder.build();\n    if (result.getProperties().isEmpty()) {\n        // If no common properties, return the union of the two record types\n        return registry.createUnionType(this, that);\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}