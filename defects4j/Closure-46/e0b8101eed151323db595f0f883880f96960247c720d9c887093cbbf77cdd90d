{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n\n    RecordType thatRecord = that.toMaybeRecordType();\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    // Collect all properties from both types\n    Set<String> allProperties = new HashSet<>(properties.keySet());\n    allProperties.addAll(thatRecord.getPropertyNames());\n\n    boolean needsUnion = false;\n\n    for (String property : allProperties) {\n      if (properties.containsKey(property) && thatRecord.hasProperty(property)) {\n        JSType thisType = getPropertyType(property);\n        JSType thatType = thatRecord.getPropertyType(property);\n\n        if (thisType.isEquivalentTo(thatType)) {\n          builder.addProperty(property, thisType, getPropertyNode(property));\n        } else {\n          needsUnion = true;\n        }\n      } else {\n        needsUnion = true;\n      }\n    }\n\n    if (needsUnion) {\n      return registry.createUnionType(this, that);\n    }\n\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}