{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n\n  RecordType thatRecord = that.toMaybeRecordType();\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n  // Collect all property names from both types\n  Set<String> allProperties = new HashSet<>(properties.keySet());\n  allProperties.addAll(thatRecord.properties.keySet());\n\n  // Check if all properties are exactly the same (including types)\n  boolean allPropertiesMatch = true;\n  for (String property : allProperties) {\n    if (!properties.containsKey(property) ||\n        !thatRecord.properties.containsKey(property) ||\n        !properties.get(property).isEquivalentTo(thatRecord.properties.get(property))) {\n      allPropertiesMatch = false;\n      break;\n    }\n  }\n\n  if (allPropertiesMatch) {\n    // If all properties match exactly, return this type\n    return this;\n  } else {\n    // Otherwise return the union of both types\n    return registry.createUnionType(this, that);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}