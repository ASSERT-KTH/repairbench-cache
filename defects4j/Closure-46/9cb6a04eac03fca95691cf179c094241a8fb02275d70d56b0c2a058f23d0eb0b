{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n  // Get all property names from both types\n  Set<String> allProperties = new HashSet<>();\n  allProperties.addAll(properties.keySet());\n  if (that.isRecordType()) {\n    allProperties.addAll(that.toMaybeRecordType().getProperties());\n  }\n\n  // Add all properties from both types, preserving types where they match\n  for (String property : allProperties) {\n    JSType thisType = properties.containsKey(property) ?\n        getPropertyType(property) : null;\n    JSType thatType = that.toMaybeRecordType().getPropertyType(property);\n    boolean hasThisProperty = properties.containsKey(property);\n    boolean hasThatProperty = that.toMaybeRecordType().hasProperty(property);\n\n    if (hasThisProperty && hasThatProperty) {\n      // If both types have the property with equivalent types, add it as is\n      if (thatType.isEquivalentTo(thisType)) {\n        builder.addProperty(property, thisType, getPropertyNode(property));\n      } else {\n        // Types differ, we need to create a union of the property types\n        JSType unionType = registry.createUnionType(thisType, thatType);\n        builder.addProperty(property, unionType, getPropertyNode(property));\n      }\n    } else if (hasThisProperty) {\n      // Only this type has the property\n      builder.addProperty(property, thisType, getPropertyNode(property));\n    } else if (hasThatProperty) {\n      // Only that type has the property\n      builder.addProperty(property, thatType, null);\n    }\n  }\n\n  // If we're missing any properties that the other type has, we need to union\n  // If we're missing any properties that this type has, we need to union\n  // If there are type mismatches on shared properties, we need to return a union\n\n  // First check if all properties are compatible (types match on shared properties)\n  boolean allPropertiesCompatible = true;\n  for (String property : properties.keySet()) {\n    if (that.toMaybeRecordType().hasProperty(property)) {\n      JSType thisType = getPropertyType(property);\n      JSType thatType = that.toMaybeRecordType().getPropertyType(property);\n      if (!thisType.isEquivalentTo(thatType)) {\n        allPropertiesCompatible = false;\n        break;\n      }\n    }\n  }\n\n  // If not all properties are compatible, we need to create a union type\n  if (!allPropertiesCompatible) {\n    RecordType thisTypeAsRecord = this;\n    RecordType thatTypeAsRecord = that.toMaybeRecordType();\n    return registry.createUnionType(thisTypeAsRecord, thatTypeAsRecord);\n  }\n\n  // If we got here, all shared properties have matching types\n  // Now check if one type has properties the other doesn't\n  boolean hasExtraProperties = false;\n  for (String property : properties.keySet()) {\n    if (!that.toMaybeRecordType().hasProperty(property)) {\n      hasExtraProperties = true;\n      break;\n    }\n  }\n  for (String property : that.toMaybeRecordType().getProperties()) {\n    if (!properties.containsKey(property)) {\n      hasExtraProperties = true;\n      break;\n    }\n  }\n\n  // If there are extra properties in either type, we need to return a union\n  if (hasExtraProperties) {\n    return registry.createUnionType(this, that.toMaybeRecordType());\n  }\n\n  // If we get here, both types have exactly the same properties with equivalent types\n  // so we can return either type (they're essentially the same)\n  return this;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}