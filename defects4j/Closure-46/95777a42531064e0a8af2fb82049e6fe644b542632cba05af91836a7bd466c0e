{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n\n  // If we're not compatible at all, return a union type\n  if (!this.isEquivalentTo(that) &&\n      !this.isSubtype(that) &&\n      !that.isSubtype(this)) {\n    return registry.createUnionType(this, that);\n  }\n\n  // For compatible types, build a record type with the union of properties\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n  // Add all properties from both types\n  Set<String> allProperties = new HashSet<>();\n  allProperties.addAll(properties.keySet());\n  allProperties.addAll(that.toMaybeRecordType().properties.keySet());\n\n  for (String property : allProperties) {\n    JSType thisType = this.hasProperty(property) ? this.getPropertyType(property) : null;\n    JSType thatType = that.toMaybeRecordType().hasProperty(property) ?\n                       that.toMaybeRecordType().getPropertyType(property) : null;\n\n    if (thisType != null && thatType != null) {\n      // Both have the property - take the least supertype of the types\n      builder.addProperty(property, thisType.getLeastSupertype(thatType), null);\n    } else if (thisType != null) {\n      // Only this has the property\n      builder.addProperty(property, thisType, null);\n    } else if (thatType != null) {\n      // Only that has the property\n      builder.addProperty(property, thatType, null);\n    }\n  }\n\n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}