{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n\n  RecordType otherRecord = that.toMaybeRecordType();\n  // Find common properties with equal types\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String prop : properties.keySet()) {\n    if (otherRecord.hasProperty(prop)) {\n      JSType thisPropType = getPropertyType(prop);\n      JSType otherPropType = otherRecord.getPropertyType(prop);\n      if (thisPropType.isEquivalentTo(otherPropType)) {\n        builder.addProperty(prop, thisPropType, getPropertyNode(prop));\n      }\n    }\n  }\n  RecordType commonSubRecord = builder.build();\n  if (commonSubRecord.getPropertiesCount() == 0) {\n    // no common properties with equal types -> union of the two records\n    return registry.createUnionType(this, that);\n  }\n\n  // The least supertype is a record common to both inputs, so the union type\n  // due to disjoint property names/types is safe here.\n  if (commonSubRecord.isEquivalentTo(this)) {\n    return that;\n  }\n  if (commonSubRecord.isEquivalentTo(that)) {\n    return this;\n  }\n  return registry.createUnionType(this, that);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}