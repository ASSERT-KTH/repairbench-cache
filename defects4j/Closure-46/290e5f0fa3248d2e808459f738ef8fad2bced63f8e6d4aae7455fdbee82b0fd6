{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordType thatRecord = that.toMaybeRecordType();\n    if (this.properties.isEmpty() || thatRecord.properties.isEmpty()) {\n        // If either record has no properties, the union is the correct LST\n        return registry.createUnionType(this, that);\n    }\n\n    // Check if one type is a subtype of the other\n    if (this.isSubtype(that)) {\n        return that;\n    }\n    if (that.isSubtype(this)) {\n        return this;\n    }\n\n    // Find common properties with equivalent types\n    boolean hasCommonProperties = false;\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n        if (thatRecord.hasProperty(property) &&\n            thatRecord.getPropertyType(property).isEquivalentTo(\n                getPropertyType(property))) {\n            builder.addProperty(property, getPropertyType(property),\n                getPropertyNode(property));\n            hasCommonProperties = true;\n        }\n    }\n\n    if (hasCommonProperties) {\n        JSType commonType = builder.build();\n        // If there are common properties, the LST is the union of the common parts and the two types\n        // But actually, the least supertype for records with no common structure is their union\n        // So we need to return the union in most cases\n        return registry.createUnionType(this, that);\n    } else {\n        return registry.createUnionType(this, that);\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}