{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n\n    // If the types are equivalent, return either one\n    if (isEquivalentTo(that)) {\n        return this;\n    }\n\n    // Create a new builder for the union type\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    // Add properties from both types\n    for (String property : properties.keySet()) {\n        if (that.toMaybeRecordType().hasProperty(property) &&\n            that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n                getPropertyType(property))) {\n            builder.addProperty(property, getPropertyType(property),\n                getPropertyNode(property));\n        }\n    }\n\n    // Add properties that are only in this type\n    for (String property : properties.keySet()) {\n        if (!that.toMaybeRecordType().hasProperty(property)) {\n            builder.addProperty(property, getPropertyType(property),\n                getPropertyNode(property));\n        }\n    }\n\n    // Add properties that are only in the other type\n    for (String property : that.toMaybeRecordType().getProperties()) {\n        if (!properties.containsKey(property)) {\n            builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property),\n                that.toMaybeRecordType().getPropertyNode(property));\n        }\n    }\n\n    // If no common properties, return union type\n    if (builder.getProperties().isEmpty()) {\n        return registry.createUnionType(this, that);\n    }\n\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}