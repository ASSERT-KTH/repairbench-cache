{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property)) {\n        JSType thatPropType = that.toMaybeRecordType().getPropertyType(property);\n        JSType thisPropType = getPropertyType(property);\n\n        if (thisPropType.isEquivalentTo(thatPropType)) {\n          builder.addProperty(property, thisPropType, getPropertyNode(property));\n        } else {\n          // If the types are not equivalent, add the union of the two types.\n          JSType unionType = registry.createUnionType(thisPropType, thatPropType);\n          builder.addProperty(property, unionType, getPropertyNode(property));\n        }\n      }\n    }\n\n    // Add properties from 'that' that are not present in 'this'\n    for (String property : that.toMaybeRecordType().getProperties()) {\n      if (!properties.containsKey(property)) {\n        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);\n      }\n    }\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}