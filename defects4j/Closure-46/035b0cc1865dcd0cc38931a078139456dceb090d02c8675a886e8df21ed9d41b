{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n  // Collect all properties from both record types\n  Set<String> allProperties = new HashSet<>(properties.keySet());\n  allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());\n\n  for (String property : allProperties) {\n    JSType thisType = getPropertyType(property);\n    JSType thatType = that.toMaybeRecordType().getPropertyType(property);\n\n    if (thisType != null && thatType != null) {\n      // If both types have the property, create a union type\n      builder.addProperty(property, registry.createUnionType(thisType, thatType), null);\n    } else if (thisType != null) {\n      // If only this type has the property, add it as is\n      builder.addProperty(property, thisType, getPropertyNode(property));\n    } else if (thatType != null) {\n      // If only that type has the property, add it as is\n      builder.addProperty(property, thatType, null);\n    }\n  }\n\n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}