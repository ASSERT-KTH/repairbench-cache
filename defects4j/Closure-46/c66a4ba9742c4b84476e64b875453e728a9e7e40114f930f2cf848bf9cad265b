{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n\n  RecordType thatRecord = that.toMaybeRecordType();\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n  // Check if all properties in this type exist in that type with equivalent types\n  boolean allPropertiesMatch = true;\n  for (String property : properties.keySet()) {\n    if (!thatRecord.hasProperty(property) ||\n        !thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n      allPropertiesMatch = false;\n      break;\n    }\n  }\n\n  // If all properties match, return the more specific type (this type)\n  if (allPropertiesMatch) {\n    return this;\n  }\n\n  // Otherwise, return the union of both types\n  return registry.createUnionType(this, that);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}