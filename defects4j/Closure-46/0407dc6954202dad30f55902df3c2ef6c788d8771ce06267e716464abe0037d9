{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordType thisRec = this.toMaybeRecordType();\n    RecordType thatRec = that.toMaybeRecordType();\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    \n    // Collect all unique property names from both records\n    Set<String> allProperties = new HashSet<>(thisRec.getPropertyNames());\n    allProperties.addAll(thatRec.getPropertyNames());\n    \n    for (String property : allProperties) {\n        if (thisRec.hasProperty(property) && thatRec.hasProperty(property)) {\n            // Property exists in both, compute the least supertype\n            PropertyType thisType = thisRec.getPropertyType(property);\n            PropertyType thatType = thatRec.getPropertyType(property);\n            // Note: The order might matter here for commutativity\n            JSType supertype = thisType.getLeastSupertype(thatType);\n            builder.addProperty(property, supertype, thisRec.getPropertyNode(property));\n        } else if (thisRec.hasProperty(property)) {\n            // Property only exists in this record\n            builder.addProperty(property, thisRec.getPropertyType(property), thisRec.getPropertyNode(property));\n        } else {\n            // Property only exists in that record\n            builder.addProperty(property, thatRec.getPropertyType(property), thatRec.getPropertyNode(property));\n        }\n    }\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}