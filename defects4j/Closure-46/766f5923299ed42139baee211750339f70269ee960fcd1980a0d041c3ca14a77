{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    RecordType thatRecord = that.toMaybeRecordType();\n    for (String property : properties.keySet()) {\n        if (thatRecord.hasProperty(property)) {\n            JSType thisPropertyType = getPropertyType(property);\n            JSType thatPropertyType = thatRecord.getPropertyType(property);\n            if (thisPropertyType.isEquivalentTo(thatPropertyType)) {\n                builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n            } else {\n                // If property types are not equivalent, the least supertype will not have this property\n                // unless it's present in both records with equivalent types, which we already checked.\n                // Therefore, we skip adding this property to the builder.\n            }\n        }\n    }\n    // Add properties from 'that' which are not in 'this'\n    for (String property : thatRecord.getProperties().keySet()) {\n        if (!properties.containsKey(property)) {\n            builder.addProperty(property, thatRecord.getPropertyType(property), thatRecord.getPropertyNode(property));\n        }\n    }\n    JSType result = builder.build();\n    if (result.getProperties().isEmpty()) {\n        // If no common properties, return the union of both record types\n        return registry.createUnionType(this, that);\n    }\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}