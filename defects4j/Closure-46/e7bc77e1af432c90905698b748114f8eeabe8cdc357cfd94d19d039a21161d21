{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    for (String property : properties.keySet()) {\n      if (that.toMaybeRecordType().hasProperty(property)) {\n        JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);\n        JSType thisPropertyType = getPropertyType(property);\n\n        if (thisPropertyType.isEquivalentTo(thatPropertyType)) {\n          builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n        } else {\n          // If the property exists in both but the types are not equivalent,\n          // then the least supertype is the union of the two types.\n          builder.addProperty(property, registry.createUnionType(thisPropertyType, thatPropertyType), getPropertyNode(property));\n        }\n      }\n    }\n    for (String property : that.toMaybeRecordType().getProperties()) {\n      if (!properties.containsKey(property)) {\n        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);\n      }\n    }\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}