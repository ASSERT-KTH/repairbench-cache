{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    RecordType thisRecord = this.toMaybeRecordType().orElseThrow();\n    RecordType thatRecord = that.toMaybeRecordType().orElseThrow();\n\n    // Collect all unique property names from both records\n    Set<String> allProperties = new HashSet<>(thisRecord.getProperties());\n    allProperties.addAll(thatRecord.getProperties());\n\n    for (String property : allProperties) {\n        if (thisRecord.getProperties().containsKey(property) && thatRecord.getProperties().containsKey(property)) {\n            if (thisRecord.getPropertyType(property).isEquivalentTo(thatRecord.getPropertyType(property))) {\n                builder.addProperty(property, thisRecord.getPropertyType(property), thisRecord.getPropertyNode(property));\n            } else {\n                builder.addProperty(property, thatRecord.getPropertyType(property), thatRecord.getPropertyNode(property));\n            }\n        } else if (thisRecord.getProperties().containsKey(property)) {\n            builder.addProperty(property, thisRecord.getPropertyType(property), thisRecord.getPropertyNode(property));\n        } else {\n            builder.addProperty(property, thatRecord.getPropertyType(property), thatRecord.getPropertyNode(property));\n        }\n    }\n\n    return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}