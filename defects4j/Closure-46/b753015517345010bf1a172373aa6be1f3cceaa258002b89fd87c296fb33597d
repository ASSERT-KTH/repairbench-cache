{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    // Add all properties from the current record type\n    for (String property : properties.keySet()) {\n      builder.addProperty(property, getPropertyType(property), getPropertyNode(property));\n    }\n\n    // Add properties from the other record type if they are not already present or have a compatible type\n    for (String property : that.toMaybeRecordType().getProperties().keySet()) {\n      if (!properties.containsKey(property)) {\n        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);\n      } else {\n        JSType currentType = getPropertyType(property);\n        JSType thatType = that.toMaybeRecordType().getPropertyType(property);\n        if (!currentType.isEquivalentTo(thatType)) {\n          builder.addProperty(property, registry.createUnionType(currentType, thatType), null);\n        }\n      }\n    }\n\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}