{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    RecordType thatRecord = that.toMaybeRecordType();\n    for (String property : properties.keySet()) {\n      if (thatRecord.hasProperty(property)) {\n        JSType thisPropertyType = getPropertyType(property);\n        JSType thatPropertyType = thatRecord.getPropertyType(property);\n        if (thisPropertyType.isEquivalentTo(thatPropertyType)) {\n          builder.addProperty(property, thisPropertyType, getPropertyNode(property));\n        } else {\n          builder.addProperty(property, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n        }\n      } else {\n        builder.addProperty(property, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n    }\n    for (String property : thatRecord.getPropertyNames()) {\n      if (!properties.containsKey(property)) {\n        builder.addProperty(property, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));\n      }\n    }\n    if (builder.getPropertyCount() == 0) {\n      return registry.getNativeType(JSTypeNative.VOID_TYPE);\n    }\n    return builder.build();\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}