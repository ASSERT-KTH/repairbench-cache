{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n\n  RecordType thatRecord = that.toMaybeRecordType();\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n  // Find common properties with equivalent types\n  boolean hasCommonProperties = false;\n  for (String property : properties.keySet()) {\n    if (thatRecord.hasProperty(property) &&\n        thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n      builder.addProperty(property, getPropertyType(property), getPropertyNode(property));\n      hasCommonProperties = true;\n    }\n  }\n\n  // If there are common properties, return the built type\n  // Otherwise return the union of both types\n  if (hasCommonProperties) {\n    return builder.build();\n  } else {\n    return registry.createUnionType(this, that);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}