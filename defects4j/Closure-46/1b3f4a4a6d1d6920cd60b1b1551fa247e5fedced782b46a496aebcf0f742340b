{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n\n  // If this record has a property that's not present on `that` record, or\n  // vice-versa, the least supertype is their union type.\n  if (!that.toMaybeRecordType().getProperties().containsAll(getProperties())\n      || !getProperties().containsAll(that.toMaybeRecordType().getProperties())) {\n    return registry.createUnionType(this, that);\n  }\n\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String property : properties.keySet()) {\n    if (that.toMaybeRecordType().hasProperty(property) &&\n        that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n            getPropertyType(property))) {\n      builder.addProperty(property, getPropertyType(property),\n          getPropertyNode(property));\n    }\n  }\n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}