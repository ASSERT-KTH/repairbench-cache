{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n\n    // First try building a common supertype with compatible properties\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    boolean hasCommonProperties = false;\n    RecordType otherRecord = that.toMaybeRecordType();\n\n    // Check for common properties with compatible types\n    for (String property : properties.keySet()) {\n      if (otherRecord.hasProperty(property)) {\n        JSType thisPropType = getPropertyType(property);\n        JSType otherPropType = otherRecord.getPropertyType(property);\n        if (thisPropType.isSubtype(otherPropType) ||\n            otherPropType.isSubtype(thisPropType)) {\n          JSType commonSuperType =\n              thisPropType.getLeastSupertype(otherPropType);\n          builder.addProperty(property, commonSuperType,\n              getPropertyNode(property));\n          hasCommonProperties = true;\n        }\n      }\n    }\n\n    // If we found common properties, check if we can form a supertype\n    // Otherwise, create a union type\n    if (hasCommonProperties) {\n      // Add properties unique to each type (with their original types)\n      // For this type\n      for (String property : properties.keySet()) {\n        if (!otherRecord.hasProperty(property)) {\n          builder.addProperty(property, getPropertyType(property),\n              getPropertyNode(property));\n        }\n      }\n      // For the other type\n      for (String property : otherRecord.getProperties()) {\n        if (!hasProperty(property)) {\n          builder.addProperty(property, otherRecord.getPropertyType(property),\n              otherRecord.getPropertyNode(property));\n        }\n      }\n      return builder.build();\n    } else {\n      // No common properties, so return union type\n      return registry.createUnionType(this, that);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}