{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n\n  RecordType thatRecord = that.toMaybeRecordType();\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n  for (String property : properties.keySet()) {\n    if (thatRecord.hasProperty(property) &&\n        thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n      builder.addProperty(property, getPropertyType(property),\n          getPropertyNode(property));\n    }\n  }\n\n  RecordType meet = builder.build();\n\n  if (meet.getPropertiesCount() == 0) {\n    // No common properties or no equivalent types, so the least supertype\n    // is just the union of the two record types.\n    return registry.createUnionType(this, thatRecord);\n  }\n\n  return meet;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}