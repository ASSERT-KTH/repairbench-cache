{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  \n  // Collect all unique properties from both the current and 'that' record types\n  Set<String> allProperties = new HashSet<>(properties.keySet());\n  allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());\n  \n  for (String property : allProperties) {\n    JSType thisType = getPropertyType(property);\n    JSType thatType = that.toMaybeRecordType().getPropertyType(property);\n    \n    if (thisType != null && thatType != null && thisType.isEquivalentTo(thatType)) {\n      builder.addProperty(property, thisType, getPropertyNode(property));\n    }\n  }\n  return builder.build();\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}