{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  RecordType otherRecordType = that.toMaybeRecordType();\n  for (String property : properties.keySet()) {\n    if (otherRecordType.hasProperty(property) &&\n        otherRecordType.getPropertyType(property).isEquivalentTo(\n            getPropertyType(property))) {\n      builder.addProperty(property, getPropertyType(property),\n          getPropertyNode(property));\n    }\n  }\n  // If the record types have nothing in common, we return the `?` type\n  // (the universal type). Otherwise, we return the join of all the\n  // common properties, and make it a record type.\n  JSType result = builder.build();\n  return result.isEmptyType() ?\n      registry.getNativeObjectType(JSTypeNative.TOP_OBJECT_TYPE) : result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}