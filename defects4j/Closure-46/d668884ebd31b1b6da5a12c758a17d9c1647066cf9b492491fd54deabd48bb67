{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n        return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    // Combine properties from both types\n    RecordType thisType = this.toMaybeRecordType().orElseThrow();\n    RecordType otherType = that.toMaybeRecordType().orElseThrow();\n\n    // Add properties from this type\n    for (String prop : thisType.getProperties()) {\n        JSType thisTypeProp = thisType.getPropertyType(prop);\n        if (otherType.hasProperty(prop)) {\n            JSType otherPropType = otherType.getPropertyType(prop);\n            if (!thisTypeProp.isEquivalentTo(otherPropType)) {\n                builder.addProperty(prop, registry.createUnionType(thisTypeProp, otherPropType), null);\n            } else {\n                builder.addProperty(prop, thisTypeProp, null);\n            }\n        } else {\n            builder.addProperty(prop, thisTypeProp, null);\n        }\n    }\n\n    // Add properties from other type not present in this type\n    for (String prop : otherType.getProperties()) {\n        if (!thisType.hasProperty(prop)) {\n            builder.addProperty(prop, otherType.getPropertyType(prop), null);\n        }\n    }\n\n    JSType superType = builder.build();\n\n    // If the built type is equivalent to this or that, return the other as supertype\n    if (superType.isEquivalentTo(this)) {\n        return that;\n    } else if (superType.isEquivalentTo(that)) {\n        return this;\n    }\n\n    return superType;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}