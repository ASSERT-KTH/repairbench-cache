{
    "generation": "  @Override\n  public JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n\n    // Create a new builder for the result type\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n\n    // Collect all properties from both types\n    Set<String> allProperties = new HashSet<>(properties.keySet());\n    allProperties.addAll(that.toMaybeRecordType().getProperties());\n\n    // For each property in the union of both types' properties\n    for (String property : allProperties) {\n      if (this.properties.containsKey(property) &&\n          that.toMaybeRecordType().getProperties().containsKey(property)) {\n        // If both have the property, use the least supertype of their types\n        JSType typeA = getPropertyType(property);\n        JSType typeB = that.toMaybeRecordType().getPropertyType(property);\n        if (typeA != null && typeB != null) {\n          builder.addProperty(property, typeA.getLeastSupertype(typeB), null);\n        }\n      } else if (this.properties.containsKey(property)) {\n        // If only this has the property, add it as-is\n        builder.addProperty(property, getPropertyType(property), getPropertyNode(property));\n      } else {\n        // If only that has the property, add it as-is\n        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property),\n           that.toMaybeRecordType().getPropertyNode(property));\n      }\n    }\n\n    // The least supertype of two record types is the union of the two record types\n    return registry.createUnionType(this, that.toMaybeRecordType());\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}