{
    "generation": "@Override\npublic JSType getLeastSupertype(JSType that) {\n    if (!that.isRecordType()) {\n      return super.getLeastSupertype(that);\n    }\n    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n    Set<String> allProperties = new HashSet<>(properties.keySet());\n    allProperties.addAll(that.toMaybeRecordType().properties.keySet());\n    for (String property : allProperties) {\n      if (properties.containsKey(property) && that.toMaybeRecordType().hasProperty(property)) {\n        JSType commonType = properties.get(property).getLeastSupertype(that.toMaybeRecordType().getPropertyType(property));\n        if (commonType != null) {\n          builder.addProperty(property, commonType, getPropertyNode(property));\n        }\n      } else if (properties.containsKey(property)) {\n        builder.addProperty(property, getPropertyType(property), getPropertyNode(property));\n      } else if (that.toMaybeRecordType().hasProperty(property)) {\n        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyNode(property));\n      }\n    }\n    JSType result = builder.build();\n    return result.getLeastSupertype(that); // Ensure the result is the least supertype with the original 'that' type\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}