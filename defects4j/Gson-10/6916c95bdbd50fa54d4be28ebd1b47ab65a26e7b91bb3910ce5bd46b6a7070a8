{
    "generation": "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n    final Gson context, final Field field, final String name,\n    final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n  final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n  // Look for a JsonAdapter annotation on the field.\n  JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n  TypeAdapter<?> mapped = null;\n  if (annotation != null) {\n    mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n  }\n  // If there is a JsonAdapter annotation and it produced a type adapter,\n  // we want to use that adapter as-is (without runtime-type wrapping).\n  final boolean skipRuntimeTypeWrapping = (annotation != null) && (mapped != null);\n  if (mapped == null) {\n    mapped = context.getAdapter(fieldType);\n  }\n  final TypeAdapter<?> typeAdapter = mapped;\n  return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    @Override\n    void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException {\n      Object fieldValue = field.get(value);\n      // Only wrap with a runtime type adapter if no JsonAdapter annotation was used.\n      TypeAdapter chosenAdapter = skipRuntimeTypeWrapping\n          ? typeAdapter\n          : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n      chosenAdapter.write(writer, fieldValue);\n    }\n    @Override\n    void read(JsonReader reader, Object value) throws IOException, IllegalAccessException {\n      Object fieldValue = typeAdapter.read(reader);\n      if (fieldValue != null || !isPrimitive) {\n        field.set(value, fieldValue);\n      }\n    }\n    @Override\n    public boolean writeField(Object value) throws IOException, IllegalAccessException {\n      if (!serialized) return false;\n      Object fieldValue = field.get(value);\n      // Avoid infinite recursion (e.g. Throwable.cause).\n      return fieldValue != value;\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}