{
    "generation": "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n    final Gson context, final Field field, final String name,\n    final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n  final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n  JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n  TypeAdapter<?> mapped = null;\n  if (annotation != null) {\n    mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n  }\n  final boolean jsonAdapterPresent = mapped != null;\n  if (mapped == null) mapped = context.getAdapter(fieldType);\n\n  final TypeAdapter<?> typeAdapter = mapped;\n  return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the type adapter and field type always agree\n    @Override void write(JsonWriter writer, Object value)\n        throws IOException, IllegalAccessException {\n      Object fieldValue = field.get(value);\n      TypeAdapter t =\n        new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n      t.write(writer, fieldValue);\n    }\n    @Override void read(JsonReader reader, Object value)\n        throws IOException, IllegalAccessException {\n      Object fieldValue;\n      if (jsonAdapterPresent) {\n        // Always delegate to the jsonAdapter to read (potentially a String) and convert\n        fieldValue = typeAdapter.read(reader);\n        // If we get null from the adapter and the primitive type, assign the default primitive value\n        if (fieldValue == null && isPrimitive) {\n          // ignore nulls for primitive when custom adapter returns null\n          return;\n        }\n      } else {\n        // default Gson deserialization\n        fieldValue = typeAdapter.read(reader);\n        if (fieldValue == null && isPrimitive) {\n          // ignore nulls for primitive\n          return;\n        }\n      }\n      field.set(value, fieldValue);\n    }\n    @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {\n      if (!serialized) return false;\n      Object fieldValue = field.get(value);\n      return fieldValue != value; // avoid recursion for example for Throwable.cause\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}