{
    "generation": "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n    final Gson context, final Field field, final String name,\n    final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n  final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n  JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n  TypeAdapter<?> mapped = null;\n  if (annotation != null) {\n    // If the field is a primitive, wrap it so that factories targeting the boxed type still match\n    TypeToken<?> annotationType = fieldType;\n    if (isPrimitive) {\n      annotationType = TypeToken.get(Primitives.wrap(fieldType.getRawType()));\n    }\n    mapped = getTypeAdapter(constructorConstructor, context, annotationType, annotation);\n  }\n  final boolean jsonAdapterPresent = mapped != null;\n  if (mapped == null) {\n    mapped = context.getAdapter(fieldType);\n  }\n\n  final TypeAdapter<?> typeAdapter = mapped;\n  return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Override void write(JsonWriter writer, Object value)\n        throws IOException, IllegalAccessException {\n      Object fieldValue = field.get(value);\n      TypeAdapter t =\n          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n      t.write(writer, fieldValue);\n    }\n\n    @Override void read(JsonReader reader, Object value)\n        throws IOException, IllegalAccessException {\n      Object fieldValue = typeAdapter.read(reader);\n      if (fieldValue != null || !isPrimitive) {\n        field.set(value, fieldValue);\n      }\n    }\n\n    @Override public boolean writeField(Object value)\n        throws IOException, IllegalAccessException {\n      if (!serialized) return false;\n      Object fieldValue = field.get(value);\n      if (fieldValue == value) return false; // avoid recursion for example for Throwable.cause\n      if (fieldValue == null && isPrimitive && !jsonAdapterPresent) {\n        // skip default\u2010primitive values unless a custom @JsonAdapter is present\n        return false;\n      }\n      return true;\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}