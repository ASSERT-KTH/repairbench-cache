{
    "generation": "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n    final Gson context, final Field field, final String name,\n    final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n  final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n  // special casing primitives here saves ~5% on Android...\n  JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n  TypeAdapter<?> mapped = null;\n  if (annotation != null) {\n    mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n  }\n  final boolean jsonAdapterPresent = mapped != null;\n  if (mapped == null) mapped = context.getAdapter(fieldType);\n\n  final TypeAdapter<?> typeAdapter = mapped;\n  return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the type adapter and field type always agree\n    @Override\n    void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException {\n      Object fieldValue = field.get(value);\n      if (jsonAdapterPresent) {\n        // When a JsonAdapter annotation is present the annotated adapter should be used directly.\n        typeAdapter.write(writer, fieldValue);\n      } else {\n        // Otherwise use the runtime type wrapper to honor dynamic type information.\n        TypeAdapter t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n        t.write(writer, fieldValue);\n      }\n    }\n    @Override\n    void read(JsonReader reader, Object value) throws IOException, IllegalAccessException {\n      Object fieldValue = typeAdapter.read(reader);\n      if (fieldValue != null || !isPrimitive) {\n        field.set(value, fieldValue);\n      }\n    }\n    @Override\n    public boolean writeField(Object value) throws IOException, IllegalAccessException {\n      if (!serialized) return false;\n      Object fieldValue = field.get(value);\n      return fieldValue != value; // avoid recursion for example for Throwable.cause\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}