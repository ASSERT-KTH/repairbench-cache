{
    "generation": "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n    final Gson context, final Field field, final String name,\n    final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n  final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());\n  // Try to get a type adapter from a @JsonAdapter annotation.\n  JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n  TypeAdapter<?> mapped = null;\n  if (annotation != null) {\n    mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);\n  }\n  // If a field is annotated with @JsonAdapter, we want to use its adapter directly\n  // (without the runtime wrapper) so that its behavior takes precedence.\n  final boolean skipRuntimeTypeWrapper = (annotation != null);\n  if (mapped == null) {\n    mapped = context.getAdapter(fieldType);\n  }\n\n  final TypeAdapter<?> typeAdapter = mapped;\n  return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    @Override\n    void write(JsonWriter writer, Object value)\n        throws IOException, IllegalAccessException {\n      Object fieldValue = field.get(value);\n      if (skipRuntimeTypeWrapper) {\n        // When annotated, use the annotated adapter directly.\n        typeAdapter.write(writer, fieldValue);\n      } else {\n        // Otherwise, wrap with the runtime type adapter to allow for polymorphic types.\n        new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType())\n            .write(writer, fieldValue);\n      }\n    }\n    @Override\n    void read(JsonReader reader, Object value)\n        throws IOException, IllegalAccessException {\n      Object fieldValue = typeAdapter.read(reader);\n      if (fieldValue != null || !isPrimitive) {\n        field.set(value, fieldValue);\n      }\n    }\n    @Override\n    public boolean writeField(Object value) throws IOException, IllegalAccessException {\n      if (!serialized) return false;\n      Object fieldValue = field.get(value);\n      return fieldValue != value; // avoid recursion for example for Throwable.cause\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}