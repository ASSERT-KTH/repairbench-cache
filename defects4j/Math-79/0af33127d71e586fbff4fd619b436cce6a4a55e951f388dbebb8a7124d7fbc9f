{
    "generation": "/**\n * Calculates the L<sub>2</sub> (Euclidean) distance between two points.\n *\n * @param p1 the first point\n * @param p2 the second point\n * @return the L<sub>2</sub> distance between the two points\n * @throws IllegalArgumentException if p1 or p2 are null, or if their lengths are not equal\n */\npublic static double distance(int[] p1, int[] p2) {\n    if (p1 == null || p2 == null) {\n        throw new IllegalArgumentException(\"Points must not be null\");\n    }\n    if (p1.length != p2.length) {\n        throw new IllegalArgumentException(\"Points must have the same dimension\");\n    }\n    long sum = 0;\n    for (int i = 0; i < p1.length; i++) {\n        final long dp = (long) p1[i] - (long) p2[i];\n        sum += dp * dp;\n    }\n    return Math.sqrt(sum);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}