{
    "generation": "/**\n * Calculates the L<sub>2</sub> (Euclidean) distance between two points.\n *\n * If one of the points is null while the other is not, the distance is defined to be\n * positive infinity. If both points are null, the distance is 0.\n *\n * @param p1 the first point (an array of integers)\n * @param p2 the second point (an array of integers)\n * @return the L<sub>2</sub> distance between the two points\n * @throws IllegalArgumentException if the arrays are non-null but of different lengths\n */\npublic static double distance(int[] p1, int[] p2) {\n    if (p1 == null && p2 == null) {\n        return 0.0;\n    }\n    if (p1 == null || p2 == null) {\n        return Double.POSITIVE_INFINITY;\n    }\n    if (p1.length != p2.length) {\n        throw new IllegalArgumentException(\"Point dimension mismatch\");\n    }\n    double sum = 0.0;\n    for (int i = 0; i < p1.length; i++) {\n        double d = p1[i] - p2[i];\n        sum += d * d;\n    }\n    return Math.sqrt(sum);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}