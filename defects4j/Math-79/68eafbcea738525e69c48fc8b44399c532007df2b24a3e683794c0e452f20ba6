{
    "generation": "    /**\n     * Calculates the L<sub>2</sub> (Euclidean) distance between two points.\n     *\n     * @param p1 the first point\n     * @param p2 the second point\n     * @return the L<sub>2</sub> distance between the two points\n     */\n    public static double distance(int[] p1, int[] p2) {\n      // Fix: Add null checks for input points.\n      // A NullPointerException indicates that one of the input arrays was null.\n      // Throwing an IllegalArgumentException is appropriate for invalid input arguments.\n      if (p1 == null || p2 == null) {\n          throw new IllegalArgumentException(\"Points cannot be null.\");\n      }\n\n      // The original code assumes p1 and p2 have the same length.\n      // If their lengths differ, an ArrayIndexOutOfBoundsException would occur,\n      // but the current reported issue is NullPointerException.\n      // For full robustness, one might add a length check here as well:\n      // if (p1.length != p2.length) {\n      //     throw new IllegalArgumentException(\"Points must have the same dimension.\");\n      // }\n\n      int sum = 0;\n      for (int i = 0; i < p1.length; i++) {\n          final int dp = p1[i] - p2[i];\n          sum += dp * dp;\n      }\n      return Math.sqrt(sum);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}