{
    "generation": "    /**\n     * Calculates the L<sub>2</sub> (Euclidean) distance between two points.\n     *\n     * @param p1 the first point\n     * @param p2 the second point\n     * @return the L<sub>2</sub> distance between the two points\n     */\n    public static double distance(int[] p1, int[] p2) {\n        if (p1 == null || p2 == null) {\n            return Double.MAX_VALUE;\n        }\n        int minLength = Math.min(p1.length, p2.length);\n        int sum = 0;\n        for (int i = 0; i < minLength; i++) {\n            final int dp = p1[i] - p2[i];\n            sum += dp * dp;\n        }\n        // Add squared difference for extra dimensions in the longer array\n        for (int i = minLength; i < p1.length; i++) {\n            sum += p1[i] * p1[i];\n        }\n        for (int i = minLength; i < p2.length; i++) {\n            sum += p2[i] * p2[i];\n        }\n        return Math.sqrt(sum);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}