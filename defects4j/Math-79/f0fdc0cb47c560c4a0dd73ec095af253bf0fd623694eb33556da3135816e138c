{
    "generation": "    /**\n     * Calculates the L<sub>2</sub> (Euclidean) distance between two points.\n     *\n     * @param p1 the first point\n     * @param p2 the second point\n     * @return the L<sub>2</sub> distance between the two points\n     */\n    public static double distance(int[] p1, int[] p2) {\n      // Fix for NullPointerException: Ensure p1 and p2 are not null.\n      // A NullPointerException would occur if p1 or p2 are null when their length is accessed.\n      // Throwing IllegalArgumentException provides a more informative error for invalid input.\n      if (p1 == null || p2 == null) {\n          throw new IllegalArgumentException(\"Input points cannot be null.\");\n      }\n\n      // Euclidean distance requires points to have the same number of dimensions.\n      // This also prevents an ArrayIndexOutOfBoundsException if p1.length > p2.length.\n      if (p1.length != p2.length) {\n          throw new IllegalArgumentException(\"Points must have the same dimension.\");\n      }\n\n      int sum = 0;\n      for (int i = 0; i < p1.length; i++) {\n          final int dp = p1[i] - p2[i];\n          sum += dp * dp;\n      }\n      return Math.sqrt(sum);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}