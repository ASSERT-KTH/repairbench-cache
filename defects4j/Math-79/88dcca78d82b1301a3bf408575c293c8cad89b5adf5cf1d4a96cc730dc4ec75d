{
    "generation": "    /**\n     * Calculates the L<sub>2</sub> (Euclidean) distance between two points.\n     *\n     * @param p1 the first point\n     * @param p2 the second point\n     * @return the L<sub>2</sub> distance between the two points\n     */\n    public static double distance(int[] p1, int[] p2) {\n      // MATH-305: NullPointerException can occur if one or both points are null.\n      // This can happen, for example, if a cluster becomes empty and its centroid\n      // is implicitly set to null by the clustering algorithm.\n\n      // If both points are null, their \"distance\" is considered 0.\n      if (p1 == null && p2 == null) {\n          return 0.0;\n      }\n      // If one point is null and the other is not, their distance is considered infinite.\n      if (p1 == null || p2 == null) {\n          return Double.POSITIVE_INFINITY;\n      }\n\n      // At this point, both p1 and p2 are guaranteed to be non-null.\n      // The original code implicitly assumes p1.length == p2.length.\n      // If their lengths differ, an ArrayIndexOutOfBoundsException would occur.\n      // However, the reported issue is NullPointerException.\n      // In clustering contexts, points typically have consistent dimensions.\n      // No explicit check for length mismatch is added here, as it's not the cause of the reported NPE.\n\n      int sum = 0;\n      for (int i = 0; i < p1.length; i++) {\n          final int dp = p1[i] - p2[i];\n          sum += dp * dp;\n      }\n      return Math.sqrt(sum);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}