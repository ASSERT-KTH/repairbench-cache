{
    "generation": "public List getValues(final Option option,\n                      List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // If valueList is null, new ArrayList\n    List resultList = new ArrayList();\n    if (valueList != null && !valueList.isEmpty()) {\n        resultList.addAll(valueList);\n    }\n\n    int resultSize = resultList.size();\n    int requiredSize = option.getArgument() != null ? option.getArgument().getMinimum() : 0;\n\n    // If not enough args, add as many defaults as necessary to fill up to minimum or provided defaults\n    if (option.getArgument() != null) {\n        List allDefaults = new ArrayList();\n        if (defaultValues != null) {\n            allDefaults.addAll(defaultValues);\n        }\n        List optionDefaults = (List) this.defaultValues.get(option);\n        if (optionDefaults != null) {\n            allDefaults.addAll(optionDefaults);\n        }\n        int defIdx = 0;\n        while (resultList.size() < option.getArgument().getMinimum() && defIdx < allDefaults.size()) {\n            resultList.add(allDefaults.get(defIdx++));\n        }\n        // If still not enough, try to fill up to maximum (if not unlimited) using available defaults\n        int max = option.getArgument().getMaximum();\n        if (max != Integer.MAX_VALUE) {\n            while (resultList.size() < max && defIdx < allDefaults.size()) {\n                resultList.add(allDefaults.get(defIdx++));\n            }\n        }\n    }\n\n    return resultList.isEmpty() ? Collections.EMPTY_LIST : resultList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}