{
    "generation": "    public List getValues(final Option option,\n                          List defaultValues) {\n        // initialize the return list\n        List valueList = (List) values.get(option);\n\n        // grab the correct default values\n        if ((valueList == null) || valueList.isEmpty()) {\n            valueList = defaultValues;\n        }\n\n        // augment the list with the default values\n        if (valueList == null) {\n            valueList = new ArrayList();\n        }\n        List optionDefaults = (List) this.defaultValues.get(option);\n        if (optionDefaults != null && !optionDefaults.isEmpty()) {\n            if (valueList.isEmpty()) {\n                valueList = new ArrayList(optionDefaults);\n            } else {\n                // Only add defaults that weren't provided by user and don't exceed maximum\n                int maxArgs = getMaximumNumberOfArguments(option);\n                int neededDefaults = maxArgs - valueList.size();\n                if (neededDefaults > 0) {\n                    // Copy the list to avoid modifying the original\n                    valueList = new ArrayList(valueList);\n                    // Add needed defaults up to the maximum\n                    for (int i = optionDefaults.size() - 1, count = 0;\n                         i >= 0 && count < neededDefaults;\n                         i--, count++) {\n                        valueList.add(optionDefaults.get(i));\n                    }\n                }\n            }\n        }\n\n        return valueList == null ? Collections.EMPTY_LIST : valueList;\n    }\n\n    private int getMaximumNumberOfArguments(Option option) {\n        Argument argument = option.getArgument();\n        if (argument != null) {\n            return argument.getMaximum();\n        }\n        return Integer.MAX_VALUE;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}