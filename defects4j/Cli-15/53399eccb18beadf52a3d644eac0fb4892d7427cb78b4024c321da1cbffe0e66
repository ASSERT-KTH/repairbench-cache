{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // If no user-supplied values, set to defaultValues\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // If still empty, try other defaultValues map\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n\n    // If we have some user values but not enough, fill in from defaultValues\n    Argument argument = option.getArgument();\n    if (argument != null && valueList != null) {\n        int required = argument.getMinimum();\n        int maximum = argument.getMaximum();\n        int size = valueList.size();\n        // Only augment if less than maximum and argument allows more values\n        if (size < maximum) {\n            List merged = new ArrayList(valueList);\n            // first try artificially supplied defaults\n            List defList = defaultValues;\n            if (defList == null || defList.isEmpty()) {\n                defList = (List) this.defaultValues.get(option);\n            }\n            if (defList != null) {\n                for (int i = size; i < maximum && i < defList.size(); ++i) {\n                    merged.add(defList.get(i));\n                }\n            }\n            valueList = merged;\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}