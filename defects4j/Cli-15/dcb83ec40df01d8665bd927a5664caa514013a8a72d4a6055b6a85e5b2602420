{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if value list is empty or null, use the provided default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n    } else if (defaultValues != null && !defaultValues.isEmpty()) {\n        // If we have values but there are default values too,\n        // create a new list combining both\n        List combinedList = new ArrayList(valueList);\n        \n        // Add any default values that aren't already included\n        for (int i = valueList.size(); i < defaultValues.size(); i++) {\n            combinedList.add(defaultValues.get(i));\n        }\n        \n        valueList = combinedList;\n    }\n\n    // augment the list with the default values from instance variable if needed\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    } else if (this.defaultValues.containsKey(option)) {\n        List instanceDefaults = (List) this.defaultValues.get(option);\n        if (instanceDefaults != null && !instanceDefaults.isEmpty()) {\n            // Create a copy if we haven't already\n            if (valueList != defaultValues || valueList == defaultValues && valueList == instanceDefaults) {\n                valueList = new ArrayList(valueList);\n            }\n            \n            // Add any default values that aren't already included\n            for (int i = valueList.size(); i < instanceDefaults.size(); i++) {\n                valueList.add(instanceDefaults.get(i));\n            }\n        }\n    }\n    \n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}