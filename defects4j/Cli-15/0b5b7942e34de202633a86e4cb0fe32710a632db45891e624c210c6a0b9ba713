{
    "generation": "public List getValues(final Option option,\n                      List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if not present or empty, use defaultValues\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // If still null or not enough arguments, augment with option's own defaults\n    if (valueList == null) {\n        valueList = (List) this.defaultValues.get(option);\n        if (valueList == null) {\n            return Collections.EMPTY_LIST;\n        }\n        return valueList;\n    }\n\n    // get the maximum allowed if possible\n    int maximum = Integer.MAX_VALUE;\n    if (option instanceof DefaultOption) {\n        Argument arg = ((DefaultOption) option).getArgument();\n        if (arg != null) {\n            maximum = arg.getMaximum();\n        }\n    }\n\n    // Get the list of default values for the option\n    List optionDefaults = (List) this.defaultValues.get(option);\n\n    // augment valueList with remaining default values if needed\n    if (optionDefaults != null && valueList.size() < maximum) {\n        List fullList = new ArrayList(valueList);\n        int toAdd = maximum - fullList.size();\n        // add default values only up to maximum number of arguments\n        for (int i = fullList.size(); optionDefaults != null && i < maximum && i < optionDefaults.size(); i++) {\n            fullList.add(optionDefaults.get(i));\n        }\n        return fullList;\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}