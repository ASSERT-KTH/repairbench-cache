{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    if (valueList == null || valueList.isEmpty()) {\n        // no values, use defaults\n        valueList = (defaultValues != null) ? new ArrayList(defaultValues) : null;\n    } else if (defaultValues != null && !defaultValues.isEmpty()) {\n        // some values present, possibly add *remaining* defaults\n        int maxArgs = option.getArgument().getMaximum();\n        int supplied = valueList.size();\n\n        if (maxArgs < Integer.MAX_VALUE && supplied < maxArgs) {\n            // clone to new list to avoid mutating internal structures\n            valueList = new ArrayList(valueList);\n            ListIterator iter = defaultValues.listIterator();\n            // skip defaults added as explicit input\n            for (int i = 0; i < supplied && iter.hasNext(); i++) {\n                iter.next();\n            }\n            // add remaining defaults up to max\n            while (supplied < maxArgs && iter.hasNext()) {\n                valueList.add(iter.next());\n                supplied++;\n            }\n        }\n    }\n\n    if ((valueList == null || valueList.isEmpty()) && this.defaultValues != null) {\n        List defaultsFromMap = (List) this.defaultValues.get(option);\n        if (defaultsFromMap != null && !defaultsFromMap.isEmpty()) {\n            valueList = new ArrayList(defaultsFromMap);\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}