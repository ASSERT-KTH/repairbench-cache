{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if there are no parsed values, fall back to defaults\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // If still null or empty, check the instance defaultValues map\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n\n    // If still null, return empty list\n    if (valueList == null) {\n        return Collections.EMPTY_LIST;\n    }\n\n    // Determine maximum argument count if possible\n    int maximum = Integer.MAX_VALUE;\n    if (option instanceof DefaultOption) {\n        Argument arg = ((DefaultOption) option).getArgument();\n        if (arg != null) {\n            maximum = arg.getMaximum();\n        }\n    }\n\n    // Copy all present values\n    List result = new ArrayList(valueList);\n\n    // Pad with defaults if fewer than maximum and default values exist\n    if (result.size() < maximum) {\n        List defVals = defaultValues;\n        if (defVals == null || defVals.isEmpty()) {\n            defVals = (List) this.defaultValues.get(option);\n        }\n        if (defVals != null) {\n            for (int i = result.size(); i < maximum && i < defVals.size(); ++i) {\n                result.add(defVals.get(i));\n            }\n        }\n    }\n\n    return result;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}