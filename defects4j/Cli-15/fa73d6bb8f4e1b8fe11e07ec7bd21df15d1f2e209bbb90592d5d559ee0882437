{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values if no value is present\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // If still empty, check this.defaultValues\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n\n    // If we have a list AND we have any defaultValues, and valueList contains fewer than max number of required arguments,\n    // add remaining default values from defaultValues (or this.defaultValues) until we reach the correct size.\n    int minArgs = 0;\n    int maxArgs = Integer.MAX_VALUE;\n    Argument arg = null;\n    if (option instanceof DefaultOption) {\n        arg = ((DefaultOption) option).getArgument();\n    }\n    if (arg != null) {\n        minArgs = arg.getMinimum();\n        maxArgs = arg.getMaximum();\n    }\n\n    // Gather all possible defaults (from passed defaultValues or this.defaultValues)\n    List allDefaults = (List) this.defaultValues.get(option);\n    if ((allDefaults == null || allDefaults.isEmpty()) && defaultValues != null && !defaultValues.isEmpty()) {\n        allDefaults = defaultValues;\n    }\n\n    if (valueList == null) {\n        valueList = new ArrayList();\n    } else {\n        // make a defensive copy to avoid mutating original list\n        valueList = new ArrayList(valueList);\n    }\n\n    if (allDefaults != null && !allDefaults.isEmpty()) {\n        int requiredSize = Math.min(maxArgs, valueList.size() + allDefaults.size());\n        for (int i = valueList.size(); i < requiredSize && i < allDefaults.size(); i++) {\n            valueList.add(allDefaults.get(i));\n        }\n    }\n\n    return valueList == null || valueList.isEmpty() ? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}