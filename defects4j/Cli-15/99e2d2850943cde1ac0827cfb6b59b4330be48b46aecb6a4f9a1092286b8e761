{
    "generation": "public List getValues(final Option option,\n                     List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // augment the list with the default values if needed\n    if (valueList != null && !valueList.isEmpty()) {\n        List optionDefaults = (List) this.defaultValues.get(option);\n        if (optionDefaults != null && !optionDefaults.isEmpty()) {\n            // Only add default values if we haven't reached the maximum\n            Argument argument = option.getArgument();\n            if (argument != null && (valueList.size() < argument.getMaximum())) {\n                // Add only the needed number of default values\n                int needed = argument.getMaximum() - valueList.size();\n                for (int i = 0; i < needed && i < optionDefaults.size(); i++) {\n                    valueList.add(optionDefaults.get(i));\n                }\n            }\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}