{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // get the provided values for the option\n    List valueList = (List) values.get(option);\n\n    // If not found, try defaultValues argument\n    if (valueList == null) {\n        valueList = defaultValues;\n    }\n\n    // If still null or empty, try this.defaultValues.get(option)\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n\n    // Now, if valueList is not null and not empty, \n    // and if we have both user values and defaults, and the option supports more args,\n    // we need to fill up to the maximum number of allowed arguments using defaults\n    Argument arg = option.getArgument();\n    if (arg != null && valueList != null) {\n        int maxArgs = arg.getMaximum();\n        if (maxArgs != Integer.MAX_VALUE && valueList.size() < maxArgs) {\n            // Try to fill remaining values from defaults\n            List allDefaults = (List) this.defaultValues.get(option);\n            if (allDefaults != null) {\n                List<Object> extended = new ArrayList<Object>(valueList);\n                for (int i = valueList.size(); i < maxArgs && i < allDefaults.size(); i++) {\n                    extended.add(allDefaults.get(i));\n                }\n                valueList = extended;\n            }\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}