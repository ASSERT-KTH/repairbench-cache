{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // augment the list with the default values\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n\n    // if the valueList is still empty or null, but we have defaultValues available,\n    // we need to use those defaults instead of returning an empty list\n    if ((valueList == null || valueList.isEmpty()) && defaultValues != null && !defaultValues.isEmpty()) {\n        valueList = new ArrayList(defaultValues);\n    }\n\n    // if there are more default values as specified, add them to the list.\n    // copy the list first to avoid modifying the original list\n    if (valueList != null && !valueList.isEmpty()) {\n        if (defaultValues != null && !defaultValues.isEmpty()) {\n            List tempList = new ArrayList(valueList);\n            tempList.addAll(defaultValues.subList(valueList.size() - getCommonElements(valueList, defaultValues),\n                                                 defaultValues.size()));\n            valueList = tempList;\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}\n\nprivate int getCommonElements(List a, List b) {\n    int count = 0;\n    for (int i = 0; i < Math.min(a.size(), b.size()); i++) {\n        if (a.get(i).equals(b.get(i))) {\n            count++;\n        } else {\n            break;\n        }\n    }\n    return count;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}