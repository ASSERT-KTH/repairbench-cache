{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    List valueList = (List) values.get(option);\n\n    // If no user-supplied values, fall back to default values\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // If still no defaults, try global defaults\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n\n    // Merge valueList with global defaults if user supplied fewer than allowed\n    // or if explicit defaultValues present but not enough entries.\n    // The defaultValues can be a list of multiple defaults for an argument that allows multiple values\n    List originalList = valueList;\n    List optionDefaults = (List) this.defaultValues.get(option);\n    // Defensive copying to avoid mutating original\n    List merged = null;\n    if (optionDefaults != null && !optionDefaults.isEmpty()) {\n        if (valueList == null || valueList.isEmpty()) {\n            merged = new ArrayList(optionDefaults);\n        } else {\n            merged = new ArrayList(valueList);\n            // Only fill up to the number of defaults (or the max allowed by the option)\n            // So, if fewer than defaults are supplied, fill in defaults\n            int maxFill = optionDefaults.size();\n            for (int i = merged.size(); i < maxFill; ++i) {\n                merged.add(optionDefaults.get(i));\n            }\n        }\n    } else {\n        if (valueList != null) {\n            merged = valueList;\n        }\n    }\n\n    return merged == null ? Collections.EMPTY_LIST : merged;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}