{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // If valueList is null, use defaultValues (if provided)\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // If valueList is still null or empty, use this.defaultValues.get(option) (may be null)\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    } \n    // Otherwise, if valueList is not null, and defaultValues is provided and non-empty,\n    // and valueList.size() < defaultValues.size(), augment with trailing default values\n    else if (defaultValues != null && !defaultValues.isEmpty() && valueList.size() < defaultValues.size()) {\n        // Copy the list to avoid mutating original\n        valueList = new ArrayList(valueList);\n        for (int i = valueList.size(); i < defaultValues.size(); ++i) {\n            valueList.add(defaultValues.get(i));\n        }\n    }\n    // Otherwise, in case this.defaultValues is relevant for extra trailing defaults (very unlikely)\n    else if (this.defaultValues.get(option) instanceof List \n            && valueList.size() < ((List) this.defaultValues.get(option)).size()) {\n        List optDefaults = (List) this.defaultValues.get(option);\n        valueList = new ArrayList(valueList);\n        for (int i = valueList.size(); i < optDefaults.size(); ++i) {\n            valueList.add(optDefaults.get(i));\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}