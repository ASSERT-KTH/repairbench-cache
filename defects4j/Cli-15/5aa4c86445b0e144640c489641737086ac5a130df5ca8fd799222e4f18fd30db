{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // If no values, start with a copy of defaults\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues == null ? null : new ArrayList(defaultValues);\n    } else {\n        valueList = new ArrayList(valueList); // Copy to avoid affecting original list\n    }\n\n    // If still null or empty, try secondary defaultValues\n    if ((valueList == null) || valueList.isEmpty()) {\n        List secondaryDefaults = (List) this.defaultValues.get(option);\n        if (secondaryDefaults != null && !secondaryDefaults.isEmpty()) {\n            valueList = new ArrayList(secondaryDefaults);\n        }\n    }\n\n    // Now, if there are still slots to fill and defaults left, augment\n    if (option instanceof Command) {\n        Argument arg = ((Command) option).getArgument();\n        if (arg != null) {\n            int max = arg.getMaximum();\n            // If \"unlimited\" (e.g. Integer.MAX_VALUE), just skip this logic (cannot figure out how many).\n            if (max != Integer.MAX_VALUE && valueList != null) {\n                int valueCount = valueList.size();\n                List allDefaults = arg.getDefaultValues();\n                if (allDefaults != null && !allDefaults.isEmpty()) {\n                    for (int i = valueCount; i < max && i < allDefaults.size(); ++i) {\n                        valueList.add(allDefaults.get(i));\n                    }\n                }\n            }\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}