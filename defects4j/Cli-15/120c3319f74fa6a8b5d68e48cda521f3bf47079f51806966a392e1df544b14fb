{
    "generation": "public List getValues(final Option option,\n                      List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // grab the correct default values\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // If we still have no values, try this.defaultValues map\n    if (valueList == null || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    } else {\n        // If we have some values, and default values exist, augment up to max\n        List argDefaults = (List) this.defaultValues.get(option);\n        if (argDefaults != null && !argDefaults.isEmpty()) {\n            int max = Integer.MAX_VALUE;\n            Argument argument = null;\n            if (option instanceof DefaultOption) {\n                argument = ((DefaultOption) option).getArgument();\n            }\n            if (argument != null && argument.getMaximum() != null) {\n                max = argument.getMaximum().intValue();\n            }\n            // Make a new list so we don't modify the original valueList\n            List newValueList = new ArrayList(valueList);\n            int fillFrom = newValueList.size();\n            for (int i = 0; i < argDefaults.size() && newValueList.size() < max; i++) {\n                newValueList.add(argDefaults.get(i));\n            }\n            valueList = newValueList;\n        }\n    }\n\n    return valueList == null ? Collections.EMPTY_LIST : valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}