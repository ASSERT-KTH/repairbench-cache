{
    "generation": "public List getValues(final Option option, List defaultValues) {\n    // initialize the return list\n    List valueList = (List) values.get(option);\n\n    // if no explicit values, use built-in defaults\n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = (List) this.defaultValues.get(option);\n    }\n\n    // if still no values, use passed-in defaultValues \n    if ((valueList == null) || valueList.isEmpty()) {\n        valueList = defaultValues;\n    }\n\n    // if still no values, return empty list\n    if (valueList == null) {\n        return Collections.EMPTY_LIST;\n    }\n\n    // else, deal with filling in defaults beyond provided values\n\n    int maxArgs = option.getArgument().getMaximum();\n    List allDefaults = (List) this.defaultValues.get(option);\n\n    // if there are built-in defaults, and consumed values are fewer than max, append any remaining defaults\n    if (allDefaults != null && !allDefaults.isEmpty() && valueList.size() < maxArgs) {\n        List combined = new ArrayList(valueList);\n        for (int i = valueList.size(); i < maxArgs && i < allDefaults.size(); i++) {\n            combined.add(allDefaults.get(i));\n        }\n        return combined;\n    }\n\n    return valueList;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}