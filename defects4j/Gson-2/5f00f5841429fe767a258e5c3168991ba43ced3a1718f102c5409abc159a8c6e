{
    "generation": "  /**\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   */\n  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n        // Create a new instance of the type adapter to avoid potential casting issues.\n        return (TypeAdapter<T2>) new TypeAdapterRuntimeTypeImposing(typeAdapter, clazz, requestedType);\n\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n  }\n\n  // Helper class to impose runtime type check during deserialization\n  private static class TypeAdapterRuntimeTypeImposing<T> extends TypeAdapter<T> {\n    private final TypeAdapter<T> delegate;\n    private final Class<T> baseClass;\n    private final Class<? super T> requestedType;\n\n    public TypeAdapterRuntimeTypeImposing(TypeAdapter<T> delegate, Class<T> baseClass, Class<? super T> requestedType) {\n      this.delegate = delegate;\n      this.baseClass = baseClass;\n      this.requestedType = requestedType;\n    }\n\n    @Override\n    public T read(JsonReader in) throws IOException {\n      T result = delegate.read(in);\n      if (result != null && !requestedType.isInstance(result)) {\n        throw new JsonParseException(\"Expected type \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n      }\n      return result;\n    }\n\n    @Override\n    public void write(JsonWriter out, T value) throws IOException {\n      delegate.write(out, value);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}