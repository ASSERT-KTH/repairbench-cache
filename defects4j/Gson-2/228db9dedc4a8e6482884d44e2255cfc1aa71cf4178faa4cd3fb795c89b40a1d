{
    "generation": "  /**\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   */\n  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n\n        // The factory provides a TypeAdapter<T1> (the base type for the hierarchy).\n        // However, the `create` method is asked to provide a TypeAdapter<T2> for a specific\n        // requested type T2, which is a subtype of T1 (based on the isAssignableFrom check).\n        //\n        // To fulfill the contract \"We do a runtime check to confirm that the deserialized type\n        // matches the type requested\", we must wrap the original typeAdapter.\n        // The wrapped adapter will:\n        // 1. Delegate writing to the original adapter (safe because T2 is a subtype of T1).\n        // 2. Delegate reading to the original adapter, but then perform a runtime check\n        //    to ensure the deserialized object is an instance of the `requestedType` (T2).\n        //    If not, it throws a JsonSyntaxException, as expected by the failing test.\n\n        final TypeAdapter<T1> hierarchyAdapter = typeAdapter;\n        return new TypeAdapter<T2>() {\n          @Override\n          public void write(JsonWriter out, T2 value) throws IOException {\n            // T2 is a subtype of T1, so casting value to T1 is safe for writing.\n            hierarchyAdapter.write(out, (T1) value);\n          }\n\n          @Override\n          public T2 read(JsonReader in) throws IOException {\n            T1 result = hierarchyAdapter.read(in);\n            if (result == null) {\n              return null;\n            }\n\n            // Perform the runtime type check: ensure the deserialized object is an instance\n            // of the requested concrete type (T2).\n            if (!requestedType.isInstance(result)) {\n              // This is the point where a JsonPrimitive read from \"abc\" would be checked\n              // against a requestedType of JsonObject.class, and fail.\n              throw new com.google.gson.JsonSyntaxException(\n                  \"Expected a \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n            }\n\n            // If the type check passes, it's safe to cast the result to T2.\n            return (T2) result;\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}