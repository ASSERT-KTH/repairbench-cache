{
    "generation": "  /**\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   */\n  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n\n        // The original typeAdapter (for T1) is being used for a possibly more specific type (T2).\n        // This requires creating a new TypeAdapter<T2> that wraps the original.\n        // The read method of this new adapter must ensure that the deserialized T1 instance\n        // can be safely cast to T2, throwing a JsonSyntaxException if not.\n        return new TypeAdapter<T2>() {\n          @Override\n          public T2 read(JsonReader in) throws IOException {\n            // Read the object as T1 using the provided typeAdapter\n            T1 result = typeAdapter.read(in);\n\n            // Perform a runtime check to ensure the deserialized object is an instance of T2.\n            // If the original typeAdapter returns null, we don't need to check its type.\n            if (result != null && !requestedType.isInstance(result)) {\n              // The deserialized object is not assignable to the requested type T2.\n              // For example, reading a JsonPrimitive when JsonObject was expected.\n              throw new com.google.gson.JsonSyntaxException(\n                  \"Expected a \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n            }\n            // Safely cast to T2 after the runtime check.\n            return (T2) result;\n          }\n\n          @Override\n          public void write(JsonWriter out, T2 value) throws IOException {\n            // Since requestedType (T2) is assignable from clazz (T1),\n            // 'value' (which is T2) can be safely cast to T1 for writing.\n            typeAdapter.write(out, (T1) value);\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}