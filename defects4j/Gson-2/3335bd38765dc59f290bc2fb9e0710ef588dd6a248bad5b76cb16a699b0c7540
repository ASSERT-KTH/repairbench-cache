{
    "generation": "  /**\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   */\n  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n\n        // T1 is assignable from T2, meaning T1 is a supertype of T2 (or T1 == T2).\n        // The delegate `typeAdapter` handles deserialization for T1.\n        // We need to return a TypeAdapter<T2> that ensures the deserialized object\n        // is indeed an instance of T2 at runtime, throwing an exception if not.\n        final TypeAdapter<T1> delegate = typeAdapter;\n\n        return new TypeAdapter<T2>() {\n          @Override\n          public void write(JsonWriter out, T2 value) throws IOException {\n            // It's safe to cast T2 to T1 because T1 is a supertype of T2.\n            delegate.write(out, (T1) value);\n          }\n\n          @Override\n          public T2 read(JsonReader in) throws IOException {\n            // Read the object as T1 using the delegate adapter.\n            T1 result = delegate.read(in);\n\n            // If the delegate adapter read a null value, we return null.\n            if (result == null) {\n              return null;\n            }\n\n            // Perform the runtime check to confirm that the deserialized type\n            // (which is a T1 instance) matches the type requested (T2).\n            // This is the core of the fix, ensuring the correct type is received.\n            if (!requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n\n            // If the runtime check passes, it's safe to cast the T1 instance to T2.\n            return (T2) result;\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}