{
    "generation": "  /**\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   */\n  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n\n        // Return a wrapper adapter that delegates to the user-provided adapter\n        // but performs runtime type checking after deserialization.\n        return new TypeAdapter<T2>() {\n          @Override\n          public void write(JsonWriter out, T2 value) throws IOException {\n            // Delegate writing to the original adapter.\n            // Cast is safe because T2 is assignable to T1.\n            typeAdapter.write(out, (T1) value);\n          }\n\n          @Override\n          public T2 read(JsonReader in) throws IOException {\n            // Delegate reading to the original adapter.\n            T1 result = typeAdapter.read(in);\n            // Perform runtime check: ensure the deserialized object is assignable\n            // to the specifically requested type T2.\n            if (result != null && !requestedType.isInstance(result)) {\n              // The deserialized object is not an instance of the requested type.\n              // Throw an exception similar to what Gson does for type mismatches.\n              throw new JsonSyntaxException(\n                  \"Expected a \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n            }\n            // Cast is safe due to the isInstance check.\n            return (T2) result;\n          }\n        };\n      }\n\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}