{
    "generation": "  /**\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   */\n  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n\n        // The original `typeAdapter` is for `clazz` (T1).\n        // We are asked to provide an adapter for `requestedType` (T2), which is a subtype of `clazz`.\n        // The Javadoc states: \"We do a runtime check to confirm that the deserialized type matches the type requested.\"\n        // This implies that the returned adapter must verify that the object read from JSON is\n        // indeed an instance of `requestedType`, not just `clazz`.\n        // The original implementation directly returned the `typeAdapter` cast to `TypeAdapter<T2>`,\n        // which could lead to `ClassCastException` if the `typeAdapter` (for T1) reads a value that is\n        // not an instance of T2, but is still assignable to T1 (e.g., JsonPrimitive vs JsonObject when T1 is JsonElement).\n\n        return new TypeAdapter<T2>() {\n          @Override public void write(JsonWriter out, T2 value) throws IOException {\n            // It's safe to cast T2 to T1 because T2 is a subtype of T1 (due to clazz.isAssignableFrom(requestedType)).\n            typeAdapter.write(out, (T1) value);\n          }\n\n          @Override public T2 read(JsonReader in) throws IOException {\n            // Read the value using the base type adapter (for T1).\n            T1 result = typeAdapter.read(in);\n\n            // Perform the runtime check as per the Javadoc.\n            // If the deserialized object is null or an instance of the requested type (T2), it's valid.\n            if (result == null || requestedType.isInstance(result)) {\n              return (T2) result;\n            } else {\n              // If the deserialized type does not match the requested type, throw an exception.\n              // This handles cases like expecting a JsonObject but receiving a JsonPrimitive.\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}