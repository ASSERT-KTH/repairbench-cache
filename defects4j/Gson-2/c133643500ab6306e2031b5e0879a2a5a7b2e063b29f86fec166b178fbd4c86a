{
    "generation": "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n    final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n  return new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\")\n    public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n      final Class<? super T2> requestedType = typeToken.getRawType();\n      if (!clazz.isAssignableFrom(requestedType)) {\n        return null;\n      }\n      // Wrap the given adapter so that the returned value is checked at runtime.\n      TypeAdapter<T1> wrapped = new TypeAdapter<T1>() {\n        @Override\n        public void write(JsonWriter out, T1 value) throws IOException {\n          typeAdapter.write(out, value);\n        }\n\n        @Override\n        public T1 read(JsonReader in) throws IOException {\n          T1 result = typeAdapter.read(in);\n          if (result != null && !clazz.isInstance(result)) {\n            throw new JsonSyntaxException(\"Expected a \" + clazz.getName() \n                + \" but was \" + result.getClass().getName());\n          }\n          return result;\n        }\n      };\n      return (TypeAdapter<T2>) wrapped.nullSafe();\n    }\n\n    @Override\n    public String toString() {\n      return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}