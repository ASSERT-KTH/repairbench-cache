{
    "generation": "  /**\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   */\n  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null;\n        }\n\n        // The type hierarchy factory is for a base class 'clazz' (T1) and its adapter 'typeAdapter'.\n        // When asked to create an adapter for 'requestedType' (T2), which is a subtype of T1,\n        // we should use the 'typeAdapter' for T1, but ensure that the deserialized object\n        // is actually an instance of T2 at runtime.\n        final TypeAdapter<T1> delegate = typeAdapter; // The adapter for the base class T1\n\n        return new TypeAdapter<T2>() {\n          @Override\n          public void write(JsonWriter out, T2 value) throws IOException {\n            // It's safe to cast T2 to T1 for writing, because T2 is a subtype of T1.\n            delegate.write(out, (T1) value);\n          }\n\n          @Override\n          public T2 read(JsonReader in) throws IOException {\n            // Read the object using the delegate adapter for T1.\n            T1 result = delegate.read(in);\n\n            // Perform the runtime check: confirm that the deserialized type matches the type requested.\n            // If the result is null (e.g., from a JSON null), it's always valid.\n            // Otherwise, ensure the result is an instance of the requestedType.\n            if (result == null || requestedType.isInstance(result)) {\n              // If the type matches, cast it to T2 and return. This cast is safe\n              // because requestedType.isInstance(result) was true.\n              return (T2) result;\n            } else {\n              // The deserialized type does not match the requested type, throw a JsonSyntaxException.\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}