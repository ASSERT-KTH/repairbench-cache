{
    "generation": "public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n    final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n  return new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\")\n    public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n      final Class<? super T2> requestedType = typeToken.getRawType();\n      if (!clazz.isAssignableFrom(requestedType)) {\n        return null;\n      }\n      \n      // Wrap the typeAdapter with a new adapter that checks the deserialized type\n      return new TypeAdapter<T2>() {\n        @Override\n        public T2 fromJson(JsonReader in) throws IOException {\n          T1 obj = typeAdapter.fromJson(in);\n          if (obj != null && !requestedType.isInstance(obj)) {\n            throw new JsonSyntaxException(\"Expected \" + requestedType.getName() + \" but was \" + obj.getClass().getName());\n          }\n          return (T2) obj;\n        }\n\n        @Override\n        public void toJson(JsonWriter out, T2 value) throws IOException {\n          typeAdapter.toJson(out, (T1) value);\n        }\n      };\n    }\n    \n    @Override public String toString() {\n      return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}