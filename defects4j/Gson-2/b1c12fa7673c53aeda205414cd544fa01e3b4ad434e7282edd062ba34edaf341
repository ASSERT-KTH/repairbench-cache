{
    "generation": "  /**\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   */\n  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null; // Not part of this hierarchy\n        }\n\n        // If the requested type is exactly the base type of the hierarchy,\n        // use the provided adapter directly without additional checks.\n        if (requestedType == clazz) {\n          return (TypeAdapter<T2>) typeAdapter; // T2 is effectively T1 here\n        }\n\n        // For subtypes of the base type, wrap the adapter to perform a runtime\n        // check to ensure the deserialized object is an instance of the requested type.\n        final TypeAdapter<T1> hierarchyAdapter = typeAdapter;\n\n        return new TypeAdapter<T2>() {\n          @Override public T2 read(JsonReader in) throws IOException {\n            // Read using the base adapter for the hierarchy\n            T1 result = hierarchyAdapter.read(in);\n\n            // If the result is null, return null.\n            if (result == null) {\n              return null;\n            }\n\n            // Perform the runtime check: confirm deserialized type matches requested type.\n            // If the deserialized object is not an instance of the requested type,\n            // it means the adapter produced an incompatible object.\n            if (!requestedType.isInstance(result)) {\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n\n            // The cast is safe due to the isInstance check.\n            return (T2) result;\n          }\n\n          @Override public void write(JsonWriter out, T2 value) throws IOException {\n            // When writing, the value is of type T2 (a subtype of T1).\n            // It's safe to cast to T1 for the hierarchyAdapter to write.\n            hierarchyAdapter.write(out, (T1) value);\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}