{
    "generation": "  /**\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   */\n  public static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n      final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n    return new TypeAdapterFactory() {\n      @SuppressWarnings(\"unchecked\")\n      public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n        final Class<? super T2> requestedType = typeToken.getRawType();\n        if (!clazz.isAssignableFrom(requestedType)) {\n          return null; // This factory cannot handle the requested type.\n        }\n\n        // The requested type is a subtype of 'clazz'.\n        // We must return a TypeAdapter<T2> that wraps the provided typeAdapter (which is for T1).\n        // This wrapper needs to perform the runtime check mentioned in the Javadoc.\n        return new TypeAdapter<T2>() {\n          @Override public void write(JsonWriter out, T2 value) throws IOException {\n            // If the value is null, write a JSON null.\n            if (value == null) {\n              out.nullValue();\n              return;\n            }\n            // T2 is a subtype of T1, so it's safe to cast 'value' to T1 for writing.\n            typeAdapter.write(out, (T1) value);\n          }\n\n          @Override public T2 read(JsonReader in) throws IOException {\n            // Read the object using the original type adapter for T1.\n            T1 result = typeAdapter.read(in);\n\n            // If the JSON was null, the result will be null, which is valid.\n            if (result == null) {\n              return null;\n            }\n\n            // Perform the runtime check: ensure the deserialized object is an instance of the requested type (T2).\n            if (!requestedType.isInstance(result)) {\n              // The deserialized type does not match the requested subtype.\n              // This indicates a mismatch, e.g., expecting a JsonObject but getting a JsonPrimitive.\n              throw new JsonSyntaxException(\"Expected a \" + requestedType.getName()\n                  + \" but was \" + result.getClass().getName());\n            }\n\n            // The deserialized object is confirmed to be an instance of T2, so the cast is safe.\n            return (T2) result;\n          }\n        };\n      }\n      @Override public String toString() {\n        return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n      }\n    };\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}