{
    "generation": "/**\n * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n * that the deserialized type matches the type requested.\n */\npublic static <T1> TypeAdapterFactory newTypeHierarchyFactory(\n    final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {\n  return new TypeAdapterFactory() {\n    @SuppressWarnings(\"unchecked\")\n    public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {\n      final Class<? super T2> requestedType = typeToken.getRawType();\n      if (!clazz.isAssignableFrom(requestedType)) {\n        return null;\n      }\n      // Wrap typeAdapter to perform a runtime type check during read\n      return new TypeAdapter<T2>() {\n        @Override\n        public T2 read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n          T1 result = typeAdapter.read(in);\n          if (result == null || requestedType.isInstance(result)) {\n            return (T2) result;\n          }\n          throw new com.google.gson.JsonSyntaxException(\"Expected a \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n        }\n        @Override\n        public void write(com.google.gson.stream.JsonWriter out, T2 value) throws java.io.IOException {\n          typeAdapter.write(out, value);\n        }\n      };\n    }\n    @Override public String toString() {\n      return \"Factory[typeHierarchy=\" + clazz.getName() + \",adapter=\" + typeAdapter + \"]\";\n    }\n  };\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}