{
    "generation": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.NodeUtil;\n\n// ... other code ...\n\n  /**\n   * Checks if the given node might be part of control flow that can be altered\n   * by an exception handler (a CATCH block). Traverses the AST upwards from\n   * the node, looking for an enclosing TRY node with a non-empty CATCH block.\n   * Stops searching at function boundaries.\n   *\n   * @param cfgNode The node in the AST to check.\n   * @return {@code true} if an enclosing TRY...CATCH is found,\n   *         {@code false} otherwise.\n   */\n  private boolean hasExceptionHandler(Node cfgNode) {\n    Node n = cfgNode;\n    // Check the node and its ancestors.\n    while (n != null) {\n      // Check if the current node 'n' is a TRY node with a CATCH block.\n      if (n.isTry()) {\n        Node catchBlock = NodeUtil.getCatchBlock(n);\n        // A non-null catch block with children indicates a CATCH clause exists.\n        if (catchBlock != null && catchBlock.hasChildren()) {\n          // Found an enclosing TRY with a CATCH. The original node cfgNode\n          // is either within the try, catch, or finally block of this TRY.\n          // In any case, its execution context is influenced by the presence\n          // of this exception handler.\n          return true;\n        }\n      }\n\n      // Stop searching upwards if we encounter a function boundary,\n      // as exception handlers are generally function-scoped in terms of\n      // how enclosing handlers are determined.\n      if (n.isFunction()) {\n        break;\n      }\n\n      // Move up to the parent node.\n      n = n.getParent();\n    }\n\n    // No corresponding TRY...CATCH found in the ancestry chain\n    // up to the function boundary or root.\n    return false;\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}