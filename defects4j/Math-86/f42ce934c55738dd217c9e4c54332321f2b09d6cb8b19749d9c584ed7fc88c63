{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData();\n        cachedL  = null;\n        cachedLT = null;\n\n        // check the matrix before transformation\n        // This loop also zeroes out the lower triangular part of the matrix.\n        for (int i = 0; i < order; ++i) {\n\n            final double[] lI = lTData[i];\n\n            // Initial check for diagonal elements.\n            // While this catches some cases, the critical check for positivity\n            // must happen during the decomposition, when diagonal elements are\n            // progressively reduced.\n            if (lTData[i][i] < absolutePositivityThreshold) {\n                // This early check can be removed if the later one is sufficient,\n                // but keeping it doesn't harm and catches some trivial cases earlier.\n                // However, based on the problem and common Cholesky implementations,\n                // the crucial check is after subtractions.\n            }\n            // check off-diagonal elements (and reset them to 0)\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j];\n                final double lIJ = lI[j];\n                final double lJI = lJ[i];\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                lJ[i] = 0; // Zero out lower triangular part (lTData[j][i] where j > i)\n           }\n        }\n\n        // transform the matrix\n        // This loop performs the actual Cholesky decomposition in-place,\n        // transforming the upper triangular part of lTData into the Cholesky factor L^T.\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i];\n\n            // The value ltI[i] here has been updated by subtractions from previous rows/columns\n            // (due to the inner loops involving lTData[q][p] -= ltI[q] * ltI[p];).\n            // This is the critical point where the diagonal element must be positive\n            // for the Cholesky decomposition to be possible.\n            if (ltI[i] < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            ltI[i] = Math.sqrt(ltI[i]); // Calculate L^T_ii\n            final double inverse = 1.0 / ltI[i];\n\n            // Calculate L^T_ij for j > i (columns q) and update subsequent diagonal elements.\n            for (int q = i + 1; q < order; ++q) { // Corrected loop: iterate q from i+1 to order-1\n                ltI[q] *= inverse; // Calculate L^T_iq\n\n                final double[] ltQ = lTData[q]; // Current row is q (which is > i)\n                // For elements in row q, subtract contributions from row i.\n                // This updates lTData[q][p] to prepare it for its own decomposition later.\n                for (int p = q; p < order; ++p) { // Iterate p from q to order-1\n                    ltQ[p] -= ltI[q] * ltI[p];\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}