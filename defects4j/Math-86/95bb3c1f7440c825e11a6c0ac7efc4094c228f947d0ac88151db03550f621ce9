{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        // Use getData() to get a potentially modifiable reference or copy.\n        // The Cholesky decomposition modifies the matrix data in place to store L^T.\n        lTData   = matrix.getData();\n        cachedL  = null;\n        cachedLT = null;\n\n        // Check matrix symmetry and zero out lower triangular part (below diagonal).\n        // The decomposition algorithm relies on the upper triangular part of the matrix.\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i]; // Row i\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j]; // Row j\n                final double lIJ = lI[j];      // A[i][j] from upper triangle\n                final double lJI = lJ[i];      // A[j][i] from lower triangle\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    // Matrix is not symmetric enough relative to its elements\n                    throw new NotSymmetricMatrixException();\n                }\n                 // Zero the element below the diagonal after the symmetry check.\n                 // The algorithm will compute L^T in the upper triangle.\n                 lJ[i] = 0.0;\n            }\n        }\n\n        // Perform the Cholesky decomposition (L^T in the upper triangle) using the outer product method.\n        // Algorithm: For each row i, compute U_ii and U_ij (j > i), then update the trailing submatrix.\n        for (int i = 0; i < order; ++i) {\n            final double[] ltI = lTData[i]; // Row i of the matrix being transformed\n\n            // Calculate the value that will become the diagonal element U_ii.\n            // At this point, ltI[i] holds A_ii - sum_{k=0}^{i-1} U_ki^2 due to previous updates.\n            final double d = ltI[i];\n\n            // Check for positive definiteness: the diagonal element must be strictly positive.\n            // Use <= threshold to ensure strict positivity.\n            if (d <= absolutePositivityThreshold) {\n                // The matrix is not positive definite.\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            // Calculate U_ii = sqrt(d) and store it back into the matrix.\n            ltI[i] = Math.sqrt(d);\n            final double inverse = 1.0 / ltI[i]; // Precompute 1.0 / U_ii\n\n            // Calculate the remaining elements of row i: U_ij = A'_ij / U_ii for j > i.\n            // At this point, ltI[j] holds A'_ij = A_ij - sum_{k=0}^{i-1} U_ki * U_kj.\n            for (int j = i + 1; j < order; ++j) {\n                ltI[j] *= inverse; // Compute U_ij = A'_ij / U_ii and store it back in ltI[j]\n            }\n\n            // Update the trailing submatrix A'_{qp} = A'_{qp} - U_iq * U_ip for q > i, p >= q.\n            // This step subtracts the outer product of the computed part of row i from the\n            // remaining lower-right submatrix.\n            for (int q = i + 1; q < order; ++q) {\n                final double[] ltQ = lTData[q]; // Row q to be updated\n                final double u_iq = ltI[q];     // U_iq (already computed and stored in ltI[q])\n                for (int p = q; p < order; ++p) {\n                    final double u_ip = ltI[p]; // U_ip (already computed and stored in ltI[p])\n                    ltQ[p] -= u_iq * u_ip;      // Update element A'[q][p]\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}