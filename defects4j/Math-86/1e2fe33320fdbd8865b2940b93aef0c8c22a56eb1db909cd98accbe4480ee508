{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        // lTData will store the Cholesky factor L^T (an upper triangular matrix) in-place.\n        // Initially, it contains a copy of the input matrix.\n        lTData   = matrix.getData();\n        cachedL  = null;\n        cachedLT = null;\n\n        // Check the matrix for symmetry and prepare for L^T storage by zeroing out the lower triangle.\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i]; // Row i of the current matrix (initially A)\n\n            // The check for positivity of diagonal elements (lTData[i][i]) should be done\n            // during the transformation, after the corresponding sum of squared terms\n            // has been subtracted from A_ii. The original location of this check was incorrect\n            // as it was applied to the initial A_ii, not the modified intermediate value.\n            // if (lTData[i][i] < absolutePositivityThreshold) {\n            //     throw new NotPositiveDefiniteMatrixException();\n            // }\n\n            // Check off-diagonal elements for symmetry and set the lower triangular part to 0.\n            // This ensures that lTData, which will store L^T, has zeros below the diagonal.\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j]; // Row j of the current matrix (initially A)\n                final double lIJ = lI[j];      // A_ij\n                final double lJI = lJ[i];      // A_ji\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                // Set the element in the strictly lower triangle to 0.\n                // This is consistent with lTData representing L^T, which is upper triangular.\n                lJ[i] = 0; // lTData[j][i] = 0 for j > i\n            }\n        }\n\n        // Transform the matrix in-place into its Cholesky decomposition L^T (U),\n        // using a \"right-looking\" or outer-product form of the algorithm.\n        // At the start of iteration 'i', lTData[i][j] (which is A_ij') holds\n        // the original A_ij minus the sum of products from previous columns (k < i).\n        // Specifically, lTData[i][i] holds A_ii - sum_{k<i} (L_ki^2) which is L_ii^2.\n        // And lTData[i][j] for j > i holds A_ij - sum_{k<i} (L_ki * L_kj).\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i]; // This array represents row i of the matrix being transformed (L^T).\n\n            // Calculate the diagonal element L_ii (which is (L^T)_ii).\n            // At this point, ltI[i] (which is lTData[i][i]) contains L_ii^2.\n            // We must check if this value is positive before taking the square root.\n            if (ltI[i] < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n            ltI[i] = Math.sqrt(ltI[i]); // Compute L_ii\n            final double inverse = 1.0 / ltI[i]; // Compute 1 / L_ii\n\n            // Calculate off-diagonal elements L_ij (where j > i, for (L^T)_ji) in the current row i.\n            // Also, update elements in subsequent rows/columns by subtracting outer products.\n            // This loop processes columns 'q' from 'i + 1' to 'order - 1'.\n            for (int q = i + 1; q < order; ++q) {\n                // ltI[q] (which is lTData[i][q]) contains A_iq (after previous subtractions).\n                // Divide by L_ii to get L_iq.\n                ltI[q] *= inverse; // Compute L_iq (which is (L^T)_iq, since lTData stores L^T)\n\n                final double[] ltQ = lTData[q]; // This array represents row q of the matrix (for future updates).\n                // Subtract the outer product term L_iq * L_ip from future elements L_qp.\n                // This updates lTData[q][p] (representing A_qp) by subtracting L_iq * L_ip.\n                // L_iq and L_ip are the values just computed or already computed in the current row 'i'.\n                // This loop goes from p=q to order-1, updating L_qp for all p >= q.\n                for (int p = q; p < order; ++p) {\n                    ltQ[p] -= ltI[q] * ltI[p];\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}