{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        // lTData will store the upper triangular factor (L^T).\n        // The matrix.getData() method in Array2DRowRealMatrix returns a reference to its internal data.\n        // This means the input matrix will be modified in place during the decomposition.\n        lTData   = matrix.getData();\n        cachedL  = null;\n        cachedLT = null;\n\n        // Perform initial checks and pre-processing\n        for (int i = 0; i < order; ++i) {\n\n            final double[] lI = lTData[i];\n\n            // The check for positive definiteness for diagonal elements (lTData[i][i] < absolutePositivityThreshold)\n            // was incorrectly placed here in the original code. It should be performed inside the main\n            // transformation loop, after elements have been reduced by previous steps.\n            // Here, lTData[i][i] still holds the original A_ii.\n\n            // Check off-diagonal elements for symmetry and set lower triangular part to zero.\n            // Setting lTData[j][i] = 0 (for j > i) effectively pre-processes the matrix\n            // so that lTData starts containing the upper triangular part of A and zeros below diagonal.\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j];\n                final double lIJ = lI[j]; // A_ij\n                final double lJI = lJ[i]; // A_ji\n\n                // Check for symmetry: |A_ij - A_ji| > threshold * max(|A_ij|, |A_ji|)\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                lJ[i] = 0; // Set A_ji to zero (element in the lower triangular part)\n           }\n        }\n\n        // Perform the Cholesky decomposition (computes L^T in-place in lTData)\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i];\n\n            // At this point, lTData[i][i] (or ltI[i]) holds the value A_ii - sum(U_ki^2 for k < i),\n            // which is the squared diagonal element (U_ii^2) of the upper triangular Cholesky factor.\n            // If this value is not strictly positive, the matrix is not positive definite.\n            // This check is crucial and was missing/misplaced in the original code.\n            if (ltI[i] < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            // Calculate the diagonal element U_ii = sqrt(U_ii^2)\n            ltI[i] = Math.sqrt(ltI[i]);\n            final double inverse = 1.0 / ltI[i];\n\n            // Compute the remaining off-diagonal elements in the current row (U_ij for j > i)\n            // and update the trailing submatrix.\n            for (int q = order - 1; q > i; --q) { // Iterate columns 'q' from right to left (j > i)\n                ltI[q] *= inverse; // Calculate U_iq = (A_iq - sum) / U_ii\n\n                // Update the trailing submatrix: A_qp = A_qp - U_iq * U_ip\n                // This is the outer product subtraction, reducing the remaining part of the matrix.\n                final double[] ltQ = lTData[q]; // Get row 'q'\n                for (int p = q; p < order; ++p) { // Iterate columns 'p' from 'q' to order-1\n                    ltQ[p] -= ltI[q] * ltI[p];\n                }\n            }\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}