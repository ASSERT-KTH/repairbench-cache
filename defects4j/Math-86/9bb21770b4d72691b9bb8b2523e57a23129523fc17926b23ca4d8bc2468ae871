{
    "generation": "/**\n * Calculates the Cholesky decomposition of the given matrix.\n * @param matrix the matrix to decompose\n * @param relativeSymmetryThreshold threshold above which off-diagonal\n * elements are considered too different and matrix not symmetric\n * @param absolutePositivityThreshold threshold below which diagonal\n * elements are considered null and matrix not positive definite\n * @exception NonSquareMatrixException if matrix is not square\n * @exception NotSymmetricMatrixException if matrix is not symmetric\n * @exception NotPositiveDefiniteMatrixException if the matrix is not\n * strictly positive definite\n * @see #CholeskyDecompositionImpl(RealMatrix)\n * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n */\npublic CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n    throws NonSquareMatrixException,\n           NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                           matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData = matrix.getData();\n    cachedL = null;\n    cachedLT = null;\n\n    // Check symmetry\n    for (int i = 0; i < order; ++i) {\n        final double[] rowI = lTData[i];\n        for (int j = i + 1; j < order; ++j) {\n            final double[] rowJ = lTData[j];\n            final double rij = rowI[j];\n            final double rji = rowJ[i];\n            final double maxDelta = relativeSymmetryThreshold *\n                Math.max(Math.abs(rij), Math.abs(rji));\n            if (Math.abs(rij - rji) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n        }\n    }\n\n    // Make a copy to avoid modifying the original matrix during checks\n    double[][] matrixData = matrix.getDataRef();\n    double[][] a = new double[order][order];\n    for (int i = 0; i < order; ++i) {\n        a[i] = matrixData[i].clone();\n    }\n\n    // Perform Cholesky decomposition with checks\n    for (int i = 0; i < order; ++i) {\n        // Check diagonal element before processing\n        if (a[i][i] < absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n\n        // Process diagonal element\n        double sum = a[i][i];\n        for (int k = 0; k < i; ++k) {\n            sum -= a[i][k] * a[i][k];\n        }\n\n        if (sum <= absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n\n        a[i][i] = Math.sqrt(sum);\n        double inverse = 1.0 / a[i][i];\n\n        // Process row elements\n        for (int j = i + 1; j < order; ++j) {\n            sum = a[i][j];\n            for (int k = 0; k < i; ++k) {\n                sum -= a[i][k] * a[j][k];\n            }\n            a[i][j] = sum * inverse;\n        }\n    }\n\n    // Copy back the lower triangular part (upper triangular is zero)\n    for (int i = 0; i < order; ++i) {\n        System.arraycopy(a[i], 0, lTData[i], 0, i + 1);\n        for (int j = i + 1; j < order; ++j) {\n            lTData[j][i] = 0; // Ensure lower matrix is zeroed\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}