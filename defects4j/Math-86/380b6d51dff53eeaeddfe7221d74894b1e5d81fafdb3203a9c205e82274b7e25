{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        \n        // Deep copy the matrix data to avoid modifying the original matrix\n        final double[][] matrixData = matrix.getData();\n        lTData = new double[order][order];\n        for (int i = 0; i < order; ++i) {\n            System.arraycopy(matrixData[i], 0, lTData[i], 0, order);\n        }\n\n        cachedL  = null;\n        cachedLT = null;\n\n        // Check for symmetry using the copied data\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i];\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j];\n                final double lIJ = lI[j];\n                final double lJI = lJ[i];\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                // REMOVED: lJ[i] = 0; This line was prematurely zeroing out original data\n                // which is needed for the decomposition calculations.\n           }\n        }\n\n        // Transform the matrix using Cholesky decomposition (storing L^T in lTData)\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i];\n\n            // Calculate sum of squares for the diagonal element (L^T_ii = L_ii)\n            // L_ii^2 = A_ii - sum_{k=0}^{i-1} L_ik^2\n            // Here L_ik is stored as lTData[k][i] (since lTData stores L^T)\n            double sumForDiagonal = 0.0;\n            for (int k = 0; k < i; ++k) {\n                sumForDiagonal += lTData[k][i] * lTData[k][i];\n            }\n            final double currentDiagValue = lTData[i][i] - sumForDiagonal;\n\n            // Check for positivity after subtracting previous terms\n            if (currentDiagValue < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            ltI[i] = Math.sqrt(currentDiagValue);\n            final double inverseDiagonalElement = 1.0 / ltI[i];\n\n            // Calculate off-diagonal elements L^T_ij for j > i (which are L_ji)\n            // L_ji = (A_ji - sum_{k=0}^{i-1} L_jk * L_ik) / L_ii\n            // Here, A_ji is lTData[i][j], L_jk is lTData[k][j], L_ik is lTData[k][i]\n            for (int j = i + 1; j < order; ++j) {\n                double sumForOffDiagonal = 0.0;\n                for (int k = 0; k < i; ++k) {\n                    sumForOffDiagonal += lTData[k][i] * lTData[k][j];\n                }\n                ltI[j] = (ltI[j] - sumForOffDiagonal) * inverseDiagonalElement;\n            }\n\n            // Update the remaining submatrix elements (outer product subtraction)\n            // A_qp -= L^T_iq * L^T_ip\n            for (int q = order - 1; q > i; --q) {\n                // REMOVED: ltI[q] *= inverse; This was redundant as ltI[q] (lTData[i][q])\n                // is already calculated as L^T_iq in the previous loop.\n                final double[] ltQ = lTData[q];\n                for (int p = q; p < order; ++p) {\n                    ltQ[p] -= ltI[q] * ltI[p];\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}