{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        // Make a deep copy of the matrix data to avoid modifying the input matrix.\n        // The lTData field will store the L^T factor.\n        final double[][] matrixData = matrix.getData();\n        lTData = new double[order][order];\n        for (int i = 0; i < order; ++i) {\n            System.arraycopy(matrixData[i], 0, lTData[i], 0, order);\n        }\n\n        cachedL  = null;\n        cachedLT = null;\n\n        // Check for symmetry and zero out the lower triangle (for L^T factor, which is upper triangular)\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i];\n            // Check off-diagonal elements for symmetry\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j];\n                final double lIJ = lI[j]; // element at (i, j)\n                final double lJI = lJ[i]; // element at (j, i)\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                // Zero out the element at (j, i) to make lTData upper triangular for L^T\n                // This corresponds to L^T[j][i] where j > i, which must be zero.\n                lJ[i] = 0;\n           }\n        }\n\n        // Transform the matrix into its Cholesky decomposition L^T (U)\n        // This loop applies the Cholesky algorithm to compute the upper triangular factor (L^T).\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i];\n\n            // At this point, lTData[i][i] contains the value:\n            // original A[i][i] - sum_{k=0}^{i-1} (L^T[k][i])^2.\n            // This is the value that must be non-negative for the matrix to be positive definite.\n            // This is the correct place to check for positive definiteness.\n            if (ltI[i] < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            ltI[i] = Math.sqrt(ltI[i]); // Compute the diagonal element of L^T (U_ii)\n            final double inverse = 1.0 / ltI[i];\n\n            // Update the rest of the current row (L^T[i][q] for q > i) and\n            // update the submatrix for future steps.\n            // The loop for 'q' can go backwards or forwards, the order of operations for ltI[q]\n            // and ltQ[p] is critical.\n            for (int q = order - 1; q > i; --q) {\n                // Compute L^T[i][q] (U_iq) = (A_iq - sum_{k=0}^{i-1} U_ki * U_kq) / U_ii\n                // The A_iq part (lTData[i][q]) has already been updated by previous iterations'\n                // outer product subtractions.\n                ltI[q] *= inverse;\n\n                // Update the remaining submatrix (elements A_qp for q,p >= i+1)\n                // by subtracting the outer product of the current row.\n                // A_qp = A_qp - U_iq * U_ip\n                final double[] ltQ = lTData[q];\n                for (int p = q; p < order; ++p) {\n                    ltQ[p] -= ltI[q] * ltI[p];\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}