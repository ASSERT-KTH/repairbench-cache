{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData();\n        cachedL  = null;\n        cachedLT = null;\n\n        // Check the matrix for symmetry and zero out the lower triangle.\n        // The original matrix is assumed to be A. lTData will be transformed in-place\n        // to become U (upper triangular) such that A = U^T * U.\n        // Initially, the lower triangle of lTData is set to 0.\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i];\n            // check off-diagonal elements for symmetry (and reset them to 0)\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j];\n                final double lIJ = lI[j];\n                final double lJI = lJ[i];\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                // Zero out the lower triangle elements; lTData will become upper triangular (U)\n                lJ[i] = 0;\n           }\n        }\n\n        // Perform the Cholesky decomposition (A = U^T * U, in-place, U is upper triangular).\n        // This is a variant of the outer product Cholesky algorithm.\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i];\n\n            // The value ltI[i] (which is lTData[i][i]) at this point should hold\n            // A_ii - sum(U_ki^2 for k < i), accumulated from previous outer product steps.\n            // This reduced diagonal element must be strictly positive for the matrix to be\n            // positive definite.\n            if (ltI[i] < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            ltI[i] = Math.sqrt(ltI[i]);\n            final double inverse = 1.0 / ltI[i];\n\n            // Compute U_ij for j > i, and update the remaining submatrix.\n            // The inner loop iterates from right to left for columns 'q'\n            // and updates elements in the submatrix below and to the right of the current pivot.\n            for (int q = order - 1; q > i; --q) {\n                // Compute U_iq\n                ltI[q] *= inverse; // (A_iq - sum(U_ki * U_kq for k < i)) / U_ii\n\n                // Update the remaining submatrix (lTData[q][p] where q > i, p >= q)\n                final double[] ltQ = lTData[q];\n                for (int p = q; p < order; ++p) {\n                    ltQ[p] -= ltI[q] * ltI[p];\n                }\n            }\n        }\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}