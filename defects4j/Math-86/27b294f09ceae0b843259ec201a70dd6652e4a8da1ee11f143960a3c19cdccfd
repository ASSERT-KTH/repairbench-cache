{
    "generation": "/**\n * Calculates the Cholesky decomposition of the given matrix.\n * @param matrix the matrix to decompose\n * @param relativeSymmetryThreshold threshold above which off-diagonal\n * elements are considered too different and matrix not symmetric\n * @param absolutePositivityThreshold threshold below which diagonal\n * elements are considered null and matrix not positive definite\n * @exception NonSquareMatrixException if matrix is not square\n * @exception NotSymmetricMatrixException if matrix is not symmetric\n * @exception NotPositiveDefiniteMatrixException if the matrix is not\n * strictly positive definite\n * @see #CholeskyDecompositionImpl(RealMatrix)\n * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n */\npublic CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n    throws NonSquareMatrixException,\n           NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                           matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData   = matrix.getData();\n    cachedL  = null;\n    cachedLT = null;\n\n    // check the matrix before transformation\n    for (int i = 0; i < order; ++i) {\n        final double[] lI = lTData[i];\n        // check off-diagonal elements (and reset them to 0)\n        for (int j = i + 1; j < order; ++j) {\n            final double[] lJ = lTData[j];\n            final double lIJ = lI[j];\n            final double lJI = lJ[i];\n            final double maxDelta =\n                relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n            if (Math.abs(lIJ - lJI) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n            lI[j] = (lIJ + lJI) / 2;\n            lJ[i] = 0;\n        }\n    }\n\n    // transform the matrix\n    for (int i = 0; i < order; ++i) {\n        final double[] ltI = lTData[i];\n        \n        // check diagonal element\n        for (int j = 0; j < i; ++j) {\n            final double[] ltJ = lTData[j];\n            double sum = 0;\n            for (int k = 0; k < j; ++k) {\n                sum += ltI[k] * ltJ[k];\n            }\n            ltI[j] = (ltI[j] - sum) / ltJ[j];\n        }\n        \n        // Calculate diagonal element\n        double sum = 0;\n        for (int k = 0; k < i; ++k) {\n            sum += ltI[k] * ltI[k];\n        }\n        ltI[i] = ltI[i] - sum;\n        \n        if (ltI[i] <= absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        \n        ltI[i] = Math.sqrt(ltI[i]);\n        \n        // Update the rest of the row\n        for (int j = i + 1; j < order; ++j) {\n            double sum2 = 0;\n            for (int k = 0; k < i; ++k) {\n                sum2 += lTData[j][k] * ltI[k];\n            }\n            lTData[j][i] = (lTData[j][i] - sum2) / ltI[i]; \n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}