{
    "generation": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n    throws NonSquareMatrixException,\n           NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                           matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData   = matrix.getData();\n    cachedL  = null;\n    cachedLT = null;\n\n    // First, check if the matrix is positive definite and symmetric\n    // before performing any transformations\n    for (int i = 0; i < order; ++i) {\n        double[] lI = lTData[i];\n        // Check diagonal element for positivity\n        if (lI[i] <= absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        // Check off-diagonal elements for symmetry (and reset them to 0)\n        for (int j = i + 1; j < order; ++j) {\n            double[] lJ = lTData[j];\n            double lIJ = lI[j];\n            double lJI = lJ[i];\n            double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n            if (Math.abs(lIJ - lJI) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n            lJ[i] = 0; // Reset to 0 for the decomposition\n        }\n    }\n\n    // Now perform the Cholesky decomposition\n    for (int i = 0; i < order; ++i) {\n        final double[] ltI = lTData[i];\n\n        // Process the diagonal element\n        for (int j = 0; j < i; ++j) {\n            final double[] ltJ = lTData[j];\n            ltI[i] -= ltJ[i] * ltJ[i];\n        }\n\n        // Check if the diagonal element is positive after processing\n        if (ltI[i] <= absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n\n        ltI[i] = Math.sqrt(ltI[i]);\n        final double inverse = 1.0 / ltI[i];\n\n        for (int p = i + 1; p < order; ++p) {\n            double[] ltP = lTData[p];\n            for (int j = 0; j < i; ++j) {\n                final double[] ltJ = lTData[j];\n                ltI[p] -= ltJ[i] * ltJ[p];\n            }\n            ltI[p] *= inverse;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}