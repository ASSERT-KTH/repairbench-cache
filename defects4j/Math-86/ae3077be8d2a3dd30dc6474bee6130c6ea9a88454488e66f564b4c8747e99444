{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData(); // Data is modified in place\n        cachedL  = null;\n        cachedLT = null;\n\n        // check the matrix before transformation\n        for (int i = 0; i < order; ++i) {\n\n            final double[] lI = lTData[i];\n\n            // check that the diagonal element is positive\n            if (lTData[i][i] <= absolutePositivityThreshold) { // Changed < to <= for robustness\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            // check off-diagonal elements (and reset the lower triangle elements to 0)\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j];\n                final double lIJ = lI[j];\n                final double lJI = lJ[i];\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                lJ[i] = 0.0; // Zero out lower triangle entry (lTData will store L^T)\n           }\n        }\n\n        // transform the matrix into L^T\n        for (int i = 0; i < order; ++i) {\n\n            final double[] ltI = lTData[i]; // Row i of L^T\n\n            // Calculate the diagonal element L_ii = sqrt(A_ii - sum_{k=0}^{i-1} L_ik^2)\n            // The value ltI[i] at this point holds the argument of the square root: A'_ii = A_ii - sum_{k=0}^{i-1} L_ik^2\n            final double diagonalElement = ltI[i];\n\n            // Check for positive definiteness: diagonal element must be positive.\n            if (diagonalElement <= absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            // Compute L_ii = sqrt(A'_ii) and store it\n            ltI[i] = Math.sqrt(diagonalElement);\n            final double inverse = 1.0 / ltI[i]; // Inverse of L_ii\n\n            // Compute the non-diagonal elements LT_iq for q > i in the current row\n            // and update the remaining lower-right submatrix A'\n            for (int q = i + 1; q < order; ++q) { // Corrected loop bounds: q > i -> q = i+1 to order-1\n                // Compute LT_iq = A'_iq / L_ii\n                // A'_iq is the value currently at ltI[q]\n                ltI[q] *= inverse;\n                final double[] ltQ = lTData[q]; // Row q of L^T\n                // Update the lower-right submatrix element A'_qp using outer product:\n                // A''_qp = A'_qp - L_qi * L_pi = A'_qp - LT_iq * LT_ip\n                for (int p = q; p < order; ++p) {\n                    // ltQ[p] is A'_qp\n                    // ltI[q] is LT_iq (calculated above)\n                    // ltI[p] is LT_ip (calculated in previous iterations of 'q' or is L_ii if p=i - which isn't the case here as p>=q>i)\n                    // The element ltI[p] should contain the value LT_ip computed previously.\n                    ltQ[p] -= ltI[q] * ltI[p];\n                }\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}