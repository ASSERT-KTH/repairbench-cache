{
    "generation": "/**\n * Calculates the Cholesky decomposition of the given matrix.\n * @param matrix the matrix to decompose\n * @param relativeSymmetryThreshold threshold above which off-diagonal\n * elements are considered too different and matrix not symmetric\n * @param absolutePositivityThreshold threshold below which diagonal\n * elements are considered null and matrix not positive definite\n * @exception NonSquareMatrixException if matrix is not square\n * @exception NotSymmetricMatrixException if matrix is not symmetric\n * @exception NotPositiveDefiniteMatrixException if the matrix is not\n * strictly positive definite\n * @see #CholeskyDecompositionImpl(RealMatrix)\n * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n */\npublic CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n    throws NonSquareMatrixException,\n           NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                           matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    // deep copy to make sure we don't modify input matrix\n    lTData = matrix.getData();\n    for (int i = 0; i < order; ++i) {\n        lTData[i] = lTData[i].clone();\n    }\n    cachedL  = null;\n    cachedLT = null;\n\n    // check the matrix before transformation\n    for (int i = 0; i < order; ++i) {\n\n        final double[] lI = lTData[i];\n\n        // check diagonal element before computation\n        if (lTData[i][i] < absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        // check off-diagonal elements (and reset them to 0)\n        for (int j = i + 1; j < order; ++j) {\n            final double[] lJ = lTData[j];\n            final double lIJ = lI[j];\n            final double lJI = lJ[i];\n            final double maxDelta =\n                relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n            if (Math.abs(lIJ - lJI) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n            lJ[i] = 0;\n       }\n    }\n\n    // transform the matrix\n    for (int i = 0; i < order; ++i) {\n\n        final double[] ltI = lTData[i];\n\n        // update diagonal element\n        double sum = ltI[i];\n        for (int k = 0; k < i; ++k) {\n            sum -= lTData[k][i] * lTData[k][i];\n        }\n\n        if (sum < absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n        ltI[i] = Math.sqrt(sum);\n        final double inverse = 1.0 / ltI[i];\n\n        for (int j = i + 1; j < order; ++j) {\n            double value = lTData[i][j];\n            for (int k = 0; k < i; ++k) {\n                value -= lTData[k][i] * lTData[k][j];\n            }\n            lTData[i][j] = value * inverse;\n        }\n\n        // set to zero lower triangle (for Cholesky L^T storage)\n        for (int j = i + 1; j < order; ++j) {\n            lTData[j][i] = 0;\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}