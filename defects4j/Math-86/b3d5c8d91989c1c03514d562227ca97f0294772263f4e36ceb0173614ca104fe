{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = matrix.getData(); // lTData will become L^T\n        cachedL  = null;\n        cachedLT = null;\n\n        // check the matrix before transformation\n        // This loop checks for symmetry and zeroes out the lower triangle of the copied matrix.\n        for (int i = 0; i < order; ++i) {\n            final double[] lI = lTData[i];\n            // check off-diagonal elements (and reset them to 0)\n            for (int j = i + 1; j < order; ++j) {\n                final double[] lJ = lTData[j];\n                final double lIJ = lI[j]; // A[i][j]\n                final double lJI = lJ[i]; // A[j][i]\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n                // Zero out the lower triangle entries (A[j][i] for j > i)\n                // This prepares lTData to store L^T (an upper triangular matrix).\n                lJ[i] = 0;\n           }\n        }\n\n        // transform the matrix into L^T in-place\n        // lTData[r][c] will store (L^T)_rc = L_cr\n        for (int i = 0; i < order; ++i) { // i is the current row of L^T (or column of L)\n\n            final double[] ltI = lTData[i]; // ltI represents the i-th row of L^T\n\n            // Calculate L_ii (diagonal element of L)\n            // L_ii = sqrt(A_ii - sum_{k=0}^{i-1} L_ik^2)\n            double sumDiag = 0.0;\n            for (int k = 0; k < i; ++k) {\n                // lTData[k][i] is (L^T)_ki which is L_ik\n                sumDiag += lTData[k][i] * lTData[k][i];\n            }\n            ltI[i] -= sumDiag; // lTData[i][i] now holds A_ii - sum(L_ik^2)\n\n            // Check for positive definiteness\n            if (ltI[i] <= absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            ltI[i] = Math.sqrt(ltI[i]); // Compute L_ii\n            final double inverse = 1.0 / ltI[i];\n\n            // Calculate L_ji (off-diagonal elements of L, for j > i)\n            // Which means calculating (L^T)_ij for j > i\n            // L_ji = (A_ji - sum_{k=0}^{i-1} L_jk * L_ik) / L_ii\n            for (int j = i + 1; j < order; ++j) { // j is the current column of L^T (j > i)\n                double sumOffDiag = 0.0;\n                for (int k = 0; k < i; ++k) {\n                    // lTData[k][i] is L_ik\n                    // lTData[k][j] is L_jk\n                    sumOffDiag += lTData[k][i] * lTData[k][j];\n                }\n                // lTData[i][j] initially holds A_ij (which is A_ji due to symmetry)\n                lTData[i][j] = (lTData[i][j] - sumOffDiag) * inverse;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}