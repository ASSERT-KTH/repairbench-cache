{
    "generation": "    /**\n     * Calculates the Cholesky decomposition of the given matrix.\n     * @param matrix the matrix to decompose\n     * @param relativeSymmetryThreshold threshold above which off-diagonal\n     * elements are considered too different and matrix not symmetric\n     * @param absolutePositivityThreshold threshold below which diagonal\n     * elements are considered null and matrix not positive definite\n     * @exception NonSquareMatrixException if matrix is not square\n     * @exception NotSymmetricMatrixException if matrix is not symmetric\n     * @exception NotPositiveDefiniteMatrixException if the matrix is not\n     * strictly positive definite\n     * @see #CholeskyDecompositionImpl(RealMatrix)\n     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n     */\n    public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                     final double relativeSymmetryThreshold,\n                                     final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n        if (!matrix.isSquare()) {\n            throw new NonSquareMatrixException(matrix.getRowDimension(),\n                                               matrix.getColumnDimension());\n        }\n\n        final int order = matrix.getRowDimension();\n        lTData   = new double[order][order];\n        cachedL  = null;\n        cachedLT = null;\n\n        // Copy the matrix data into lTData\n        for (int i = 0; i < order; ++i) {\n            for (int j = 0; j < order; ++j) {\n                lTData[i][j] = matrix.getEntry(i, j);\n            }\n        }\n\n        // check the matrix before transformation\n        for (int i = 0; i < order; ++i) {\n            if (lTData[i][i] < absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n            // check off-diagonal elements\n            for (int j = i + 1; j < order; ++j) {\n                final double lIJ = lTData[i][j];\n                final double lJI = lTData[j][i];\n                final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n                if (Math.abs(lIJ - lJI) > maxDelta) {\n                    throw new NotSymmetricMatrixException();\n                }\n            }\n        }\n\n        // transform the matrix\n        for (int i = 0; i < order; ++i) {\n            final double[] ltI = lTData[i];\n\n            // check diagonal element\n            if (ltI[i] <= 0) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n\n            ltI[i] = Math.sqrt(ltI[i]);\n            final double inverse = 1.0 / ltI[i];\n\n            for (int j = i + 1; j < order; ++j) {\n                double sum = 0;\n                for (int k = 0; k < i; ++k) {\n                    sum += lTData[j][k] * lTData[i][k];\n                }\n                lTData[j][i] = (lTData[j][i] - sum) * inverse;\n            }\n        }\n\n        // Zero out the upper triangular part to ensure it's a lower triangular matrix\n        for (int i = 0; i < order; ++i) {\n            for (int j = i + 1; j < order; ++j) {\n                lTData[i][j] = 0;\n            }\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}