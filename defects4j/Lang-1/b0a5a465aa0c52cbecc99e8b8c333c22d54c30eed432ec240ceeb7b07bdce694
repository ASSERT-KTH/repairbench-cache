{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n    *\n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen = pfx.length(); // Fixed: use assignment '=' instead of '+='\n                break;\n            }\n        }\n        if (pfxLen > 0) { // we have a hex number\n            final boolean negative = str.startsWith(\"-\");\n            // Count the number of digits after the prefix\n            final int hexDigits = str.length() - pfxLen;\n\n            // Find the first non-zero hex digit after the prefix\n            char firstSigDigit = '0'; // Default to '0' if all digits are zero\n            for (int i = pfxLen; i < str.length(); i++) {\n                firstSigDigit = str.charAt(i);\n                if (firstSigDigit != '0') {\n                    break;\n                }\n            }\n\n            // Check based on the number of hex digits and the first significant digit for boundary conditions\n            if (hexDigits > 16) { // More than 16 hex digits, definitely requires BigInteger\n                return createBigInteger(str);\n            }\n            // Check boundary case for Long.MAX_VALUE (0x7FFFFFFFFFFFFFFF)\n            // A 16-digit positive hex number starting with '8' or higher needs BigInteger\n            // as it exceeds Long.MAX_VALUE when treated as positive.\n            if (hexDigits == 16 && !negative && firstSigDigit >= '8') {\n                return createBigInteger(str);\n            }\n\n            if (hexDigits > 8) { // Between 9 and 16 hex digits, requires Long (or BigInteger, handled above)\n                 return createLong(str);\n            }\n            // Check boundary case for Integer.MAX_VALUE (0x7FFFFFFF)\n            // An 8-digit positive hex number starting with '8' or higher needs Long\n            // as it exceeds Integer.MAX_VALUE when treated as positive.\n            if (hexDigits == 8 && !negative && firstSigDigit >= '8') {\n                 return createLong(str);\n            }\n\n            // Otherwise, it fits in an Integer (or is negative within Integer range)\n            return createInteger(str);\n        }\n\n        // Non-hex number processing (original logic largely preserved)\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n\n        int numDecimals = 0;\n        if (decPos > -1) { // there is a decimal point\n            if (expPos > -1) { // there is an exponent\n                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n            numDecimals = dec.length(); // gets number of digits past the decimal\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            final String numeric = str.substring(0, str.length() - 1);\n            // Check for potential loss of precision (important for Float/Double)\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // isAllZeros needs to handle null/empty\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Note: hex processing is done above\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            // Use createLong/createBigInteger which handle octal/decimal prefixes if present\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        // Use createFloat to handle potential NaN/Infinity issues\n                        final Float f = NumberUtils.createFloat(numeric);\n                        // Check if it loses precision or becomes zero incorrectly\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                         // Use createDouble to handle potential NaN/Infinity issues\n                        final Double d = NumberUtils.createDouble(numeric);\n                         // Check if it loses precision or becomes zero incorrectly\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Fixed: use doubleValue()\n                            return d;\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        // Fallback to BigDecimal if Double loses precision or fails\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        }\n        // User doesn't have a preference on the return type (no suffix)\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) { // No decimal point and no exponent == Integral number\n            // Must be an Integer, Long, Biginteger\n            // Handles decimal and octal (via create* methods)\n            try {\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            try {\n                return createLong(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            // Safest fallback for integral numbers\n            return createBigInteger(str);\n        }\n\n        // Must be a Float, Double, BigDecimal (has decimal or exponent)\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); // isAllZeros needs to handle null/empty\n        try {\n             // Precision check based on number of decimal places (LANG-693)\n            if(numDecimals <= 7){ // Try Float if <= 7 decimal places\n                final Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    // Additional check: does the float value match the original string representation?\n                    // Avoid returning 1.23f if input was 1.2300000001 which rounds to 1.23f\n                    // This is complex; rely on the existing check for now.\n                    return f;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        try {\n             // Precision check based on number of decimal places (LANG-693)\n            if(numDecimals <= 16){ // Try Double if <= 16 decimal places\n                final Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Fixed: use doubleValue()\n                    // Similar precision concerns as Float.\n                    return d;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n\n        // Safest fallback for floating point numbers to preserve precision\n        return createBigDecimal(str);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}