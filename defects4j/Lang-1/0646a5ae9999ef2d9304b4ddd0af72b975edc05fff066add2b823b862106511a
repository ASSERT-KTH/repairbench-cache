{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * However, the number of digits is only a guideline, and the final type depends on the value's magnitude.\n     * Specifically, values within the range of {@code Integer} will be returned as {@code Integer}, values\n     * within the range of {@code Long} but outside the range of {@code Integer} will be returned as {@code Long},\n     * and values outside the range of {@code Long} will be returned as {@code BigInteger}.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n     *\n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigInteger as appropriate. This behavior is delegated to the underlying JDK's\n     * parsing methods (e.g., `Integer.decode`).\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen = pfx.length(); // Use the length of the prefix found\n                break;\n            }\n        }\n        if (pfxLen > 0) { // we have a hex number\n            // Check the number of digits *after* the prefix\n            final int hexDigits = str.length() - pfxLen;\n            if (hexDigits > 16) { // definitely BigInteger\n                return createBigInteger(str);\n            }\n            if (hexDigits > 8) { // Between 9 and 16 digits, potentially Long or BigInteger\n                try {\n                    // Use createLong as it should handle Long.decode appropriately\n                    return createLong(str);\n                } catch (final NumberFormatException nfe) {\n                    // NFE means the value is likely too large for Long range\n                    // (e.g., 0x8000000000000000 to 0xFFFFFFFFFFFFFFFF which are valid BigInteger)\n                    // or the format is invalid (which createBigInteger would also likely reject)\n                    return createBigInteger(str);\n                }\n            }\n            // Up to 8 digits, potentially Integer or Long\n            try {\n                 // Use createInteger as it should handle Integer.decode appropriately\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) {\n                 // NFE means the value is likely too large for Integer range\n                 // (e.g., 0x80000000 to 0xFFFFFFFF which are valid Long)\n                 // or the format is invalid (which createLong would also likely reject)\n                return createLong(str);\n            }\n        }\n        // Check for octal prefix \"0\" only if not a hex number\n        // Octal handling is implicit in createInteger/createLong/createBigInteger via decode\n        // unless it contains a decimal point or exponent.\n\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        // Correct calculation for exponent position\n        int expPos = str.indexOf('e') + str.indexOf('E') + 1; // Add 1 only if found, otherwise -1 + -1 + 1 = -1\n        if (expPos > 0) { // Found 'e' or 'E'\n             // Check for validity: exponent must appear after decimal point if both present\n             if (decPos != -1 && expPos < decPos) {\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n             // Check for validity: exponent must not be the last char without digits following\n             if (expPos == str.length() -1) {\n                  throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n             // Check for validity: make sure exponent appears only once\n             int anotherExpPos = str.indexOf('e', expPos) + str.indexOf('E', expPos) + 1;\n             if (anotherExpPos > expPos) {\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n        } else {\n             expPos = -1; // Ensure expPos is -1 if no 'e' or 'E' was found\n        }\n\n        int numDecimals = 0; // Check required precision (LANG-693)\n        if (decPos > -1) { // there is a decimal point\n\n            if (expPos > -1) { // there is an exponent\n                // Handled validity check above\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n        } else {\n            if (expPos > -1) {\n                // Handled validity check above\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            final String numeric = str.substring(0, str.length() - 1);\n            // Check for leading zeros (mant) and exponent zeros (exp) to decide if 0.0 is precise enough\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    // Check if the string, excluding the 'L', represents a valid integer (no decimal, no exponent)\n                    if (dec == null\n                        && expPos == -1 // Check original expPos, not derived 'exp' string\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            // Attempt Long first for 'L' suffix\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Too big for a long, must be BigInteger\n                        }\n                        return createBigInteger(numeric); // Only possible if Long fails\n\n                    }\n                    // Invalid format for 'L' suffix (e.g., has decimal or exponent)\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        final Float f = NumberUtils.createFloat(numeric);\n                        // Check for underflow/overflow (Infinite) and precision loss (0.0 when non-zero)\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                        // If Float is not suitable, fall-through to Double\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number format, fall-through to Double\n                    }\n                    //$FALL-THROUGH$ to 'd'/'D' case\n                case 'd' :\n                case 'D' :\n                    try {\n                        final Double d = NumberUtils.createDouble(numeric);\n                         // Check for underflow/overflow (Infinite) and precision loss (0.0 when non-zero)\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Use doubleValue() for comparison\n                            return d;\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number format, fall-through to BigDecimal\n                    }\n                    // If Double is not suitable, try BigDecimal\n                    try {\n                        // BigDecimal handles large values and precision correctly\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                        // If even BigDecimal fails, the number format is truly invalid\n                        // Let the default case handle the exception throwing\n                    }\n                    //$FALL-THROUGH$ to default case to throw exception\n                default :\n                    // Invalid type suffix or other format error\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        }\n        //User doesn't have a preference on the return type (no suffix), so let's start\n        //small and go from there...\n        if (expPos > -1 && expPos < str.length()) { // Check expPos against original string length\n             exp = str.substring(expPos + 1); // Correctly get full exponent part\n        } else {\n            exp = null;\n        }\n        if (dec == null && expPos == -1) { // no decimal point and no exponent (check original expPos)\n            //Must be an Integer, Long, Biginteger (or Octal)\n            // Handled by the createXXX methods which likely use decode()\n            try {\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number format or range issue\n            }\n            try {\n                return createLong(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number format or range issue\n            }\n            // If Integer and Long fail, try BigInteger\n            return createBigInteger(str); // Handles large integers and octal/hex via decode semantics if applicable\n        }\n\n        //Must be a Float, Double, BigDecimal\n        // Check for leading zeros (mant) and exponent zeros (exp) to decide if 0.0 is precise enough\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        try {\n            // Prioritize Float if it fits without issues (LANG-693 suggests precision check)\n            // However, simply checking numDecimals isn't robust. Let createFloat decide.\n            final Float f = createFloat(str);\n             // Check for underflow/overflow (Infinite) and precision loss (0.0 when non-zero)\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                 // Additional check: Ensure string representation matches if possible\n                 // This is complex; rely on standard behavior for now.\n                 // Maybe check if string value contains more digits than float precision allows?\n                 // A simpler check might be based on numDecimals, but Float/Double parsing is complex.\n                 // Let's keep the original infinity/zero check.\n                return f;\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number format, try Double\n        }\n        try {\n            final Double d = createDouble(str);\n             // Check for underflow/overflow (Infinite) and precision loss (0.0 when non-zero)\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Use doubleValue()\n                return d;\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number format, try BigDecimal\n        }\n        // If Float and Double are not suitable or fail, use BigDecimal for precision/range\n        return createBigDecimal(str);\n    }\n\n    // Helper methods used by createNumber (assuming they exist in NumberUtils or are accessible)\n    // We don't need to provide these unless they are part of the bug fix.\n    // private static native boolean isDigits(String str);\n    // private static native boolean isAllZeros(String str);\n    // private static native Integer createInteger(String str);\n    // private static native Long createLong(String str);\n    // private static native BigInteger createBigInteger(String str);\n    // private static native Float createFloat(String str);\n    // private static native Double createDouble(String str);\n    // private static native BigDecimal createBigDecimal(String str);\n\n    // Dummy implementations for compilation if needed for context, replace with actuals\n    private static class StringUtils {\n        public static boolean isBlank(final String str) {\n            int strLen;\n            if (str == null || (strLen = str.length()) == 0) {\n                return true;\n            }\n            for (int i = 0; i < strLen; i++) {\n                if (!Character.isWhitespace(str.charAt(i))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    private static boolean isDigits(final String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n     private static boolean isAllZeros(final String str) {\n        if (str == null) {\n            return true; // Treat null as all zeros for safety? Or false? Original code implies true.\n        }\n        for (int i = str.length() - 1; i >= 0; i--) {\n            if (str.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return !str.isEmpty(); // Treat \"\" as not all zeros? Or true? Let's say true if empty or null.\n    }\n\n    // Assuming these delegate to standard parsing methods like X.decode or new X(str)\n    private static Integer createInteger(final String str) throws NumberFormatException { return Integer.decode(str); }\n    private static Long createLong(final String str) throws NumberFormatException { return Long.decode(str); }\n    private static java.math.BigInteger createBigInteger(final String str) throws NumberFormatException {\n        // BigInteger constructor doesn't handle hex prefixes like \"0x\", need manual handling or use decode logic carefully\n        int pfxLen = 0;\n        int radix = 10;\n        boolean negative = false;\n        String parseStr = str;\n\n        if (parseStr.startsWith(\"-\")) {\n            negative = true;\n            parseStr = parseStr.substring(1);\n        }\n        if (parseStr.startsWith(\"0x\") || parseStr.startsWith(\"0X\")) {\n            radix = 16;\n            pfxLen = 2;\n            parseStr = parseStr.substring(pfxLen);\n        } else if (parseStr.startsWith(\"#\")) {\n             radix = 16;\n             pfxLen = 1;\n             parseStr = parseStr.substring(pfxLen);\n        } else if (parseStr.startsWith(\"0\") && parseStr.length() > 1) {\n             radix = 8;\n             pfxLen = 1;\n             // No substring needed for octal usually, but BigInteger constructor needs it clean\n             // Let BigInteger handle the leading '0' if radix is 8? Check docs.\n             // Okay, BigInteger(String, int) expects ONLY digits for that radix.\n             parseStr = parseStr.substring(pfxLen);\n        }\n        // Ensure string is not empty after removing prefix\n        if (parseStr.isEmpty()){\n             throw new NumberFormatException(\"Cannot parse empty string after prefix.\");\n        }\n\n        java.math.BigInteger val = new java.math.BigInteger(parseStr, radix);\n        return negative ? val.negate() : val;\n\n    }\n    private static Float createFloat(final String str) throws NumberFormatException { return Float.valueOf(str); }\n    private static Double createDouble(final String str) throws NumberFormatException { return Double.valueOf(str); }\n    private static java.math.BigDecimal createBigDecimal(final String str) throws NumberFormatException {\n         // BigDecimal constructor handles signs, decimals, exponents but NOT hex/octal prefixes\n         if (str.startsWith(\"0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0x\") || str.startsWith(\"-0X\") || str.startsWith(\"#\") || str.startsWith(\"-#\")) {\n            throw new NumberFormatException(\"BigDecimal cannot parse hexadecimal numbers\");\n         }\n         // It also doesn't handle octal prefix \"0\" directly. Let's rely on the integer path for those.\n         // If called here, it must be a decimal or scientific notation number.\n         return new java.math.BigDecimal(str);\n    }\n    // Need NumberUtils reference for createFloat/createDouble calls within the method itself\n    private static class NumberUtils {\n        public static Float createFloat(String str) { return org.apache.commons.lang3.math.NumberUtils.createFloat(str); }\n        public static Double createDouble(String str) { return org.apache.commons.lang3.math.NumberUtils.createDouble(str); }\n        // Add other methods if they recursively call NumberUtils.createNumber etc.\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}