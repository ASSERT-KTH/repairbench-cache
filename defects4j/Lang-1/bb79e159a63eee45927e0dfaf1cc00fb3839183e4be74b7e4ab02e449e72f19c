{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n    *\n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        // Assuming StringUtils.isBlank is from org.apache.commons.lang3.StringUtils\n        if (org.apache.commons.lang3.StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        boolean isNegative = false;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen = pfx.length();\n                if (pfx.startsWith(\"-\")) {\n                    isNegative = true;\n                }\n                break;\n            }\n        }\n        if (pfxLen > 0) { // we have a hex number\n            String hexDigits = str.substring(pfxLen);\n            if (hexDigits.isEmpty()) { // e.g., \"0x\" or \"-0x\"\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            try {\n                // Parse as BigInteger first to handle arbitrary precision.\n                // The BigInteger constructor with radix treats the hexDigits string as positive value.\n                BigInteger bi = new BigInteger(hexDigits, 16);\n\n                // Apply sign if prefix indicated negative.\n                // Special handling for negative zero, which should just be zero.\n                if (isNegative && bi.compareTo(BigInteger.ZERO) == 0) {\n                    return BigInteger.ZERO;\n                }\n\n                // Apply the negative sign if needed for comparison and final value\n                final BigInteger signedBi = isNegative ? bi.negate() : bi;\n\n                // Check if it fits in Integer (Java's int range: -2^31 to 2^31-1)\n                if (signedBi.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) <= 0 &&\n                    signedBi.compareTo(BigInteger.valueOf(Integer.MIN_VALUE)) >= 0) {\n                    return Integer.valueOf(signedBi.intValue());\n                }\n\n                // Check if it fits in Long (Java's long range: -2^63 to 2^63-1)\n                if (signedBi.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0 &&\n                    signedBi.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n                    return Long.valueOf(signedBi.longValue());\n                }\n\n                return signedBi;\n\n            } catch (final NumberFormatException e) {\n                // This will catch malformed hex strings, e.g., \"0xG\"\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        }\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        // Corrected expPos calculation: it should be the index of 'e' OR 'E', not sum of both plus 1\n        int expPos = -1;\n        int ePos = str.indexOf('e');\n        int EPos = str.indexOf('E');\n        if (ePos > -1) {\n            expPos = ePos;\n        }\n        if (EPos > -1) {\n            if (expPos == -1 || EPos < expPos) { // If 'E' is found and it's earlier or 'e' wasn't found\n                expPos = EPos;\n            }\n        }\n\n        int numDecimals = 0; // Check required precision (LANG-693)\n        if (decPos > -1) { // there is a decimal point\n\n            if (expPos > -1) { // there is an exponent\n                // Additional check for negative expPos or if expPos is after string length\n                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            final String numeric = str.substring(0, str.length() - 1);\n            // Assuming isAllZeros is an internal helper method from NumberUtils that handles null/empty strings\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            // Assuming createLong is an internal helper method\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        // Assuming createBigInteger is an internal helper method\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        // Assuming createFloat is an internal helper method\n                        final Float f = createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        // Assuming createDouble is an internal helper method\n                        final Double d = createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        // Assuming createBigDecimal is an internal helper method\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        }\n        //User doesn't have a preference on the return type, so let's start\n        //small and go from there...\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) { // no decimal point and no exponent\n            //Must be an Integer, Long, Biginteger\n            try {\n                // Assuming createInteger is an internal helper method\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            try {\n                // Assuming createLong is an internal helper method\n                return createLong(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            // Assuming createBigInteger is an internal helper method\n            return createBigInteger(str);\n        }\n\n        //Must be a Float, Double, BigDecimal\n        // Assuming isAllZeros is an internal helper method from NumberUtils that handles null/empty strings\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp);\n        try {\n            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n                // Assuming createFloat is an internal helper method\n                final Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        try {\n            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n                // Assuming createDouble is an internal helper method\n                final Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n\n        // Assuming createBigDecimal is an internal helper method\n        return createBigDecimal(str);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}