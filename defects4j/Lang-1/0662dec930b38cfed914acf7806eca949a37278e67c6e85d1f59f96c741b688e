{
    "generation": "import java.math.BigDecimal;\nimport java.math.BigInteger;\n\n// Assuming the existence of these helper methods from NumberUtils\n// (their content is not provided, but their typical behavior is assumed)\n// private static Number createFloat(String str) { return Float.valueOf(str); }\n// private static Number createDouble(String str) { return Double.valueOf(str); }\n// private static Integer createInteger(String str) { return Integer.decode(str); }\n// private static Long createLong(String str) { return Long.decode(str); }\n// private static BigInteger createBigInteger(String str) { return new BigInteger(str); } // This is for decimal\n// private static BigDecimal createBigDecimal(String str) { return new BigDecimal(str); }\n// private static boolean isAllZeros(String str) { return str == null || str.isEmpty() || str.chars().allMatch(c -> c == '0'); }\n\n// A dummy implementation of missing static helper methods for the purpose of compilation and demonstrating the fix.\n// In a real scenario, these would already exist in the NumberUtils class or be fully qualified from java.lang.*\nclass StringUtils {\n    public static boolean isBlank(CharSequence cs) {\n        int strLen;\n        if (cs == null || (strLen = cs.length()) == 0) {\n            return true;\n        }\n        for (int i = 0; i < strLen; i++) {\n            if (!Character.isWhitespace(cs.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nclass NumberUtils {\n    public static Integer createInteger(final String str) {\n        return Integer.decode(str);\n    }\n\n    public static Long createLong(final String str) {\n        return Long.decode(str);\n    }\n\n    public static BigInteger createBigInteger(final String str) {\n        // This method from NumberUtils usually parses decimal.\n        return new BigInteger(str);\n    }\n\n    public static Float createFloat(final String str) {\n        return Float.valueOf(str);\n    }\n\n    public static Double createDouble(final String str) {\n        return Double.valueOf(str);\n    }\n\n    public static BigDecimal createBigDecimal(final String str) {\n        return new BigDecimal(str);\n    }\n\n    private static boolean isAllZeros(String str) {\n        return str == null || str.isEmpty() || str.chars().allMatch(c -> c == '0');\n    }\n\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n    *\n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        boolean negativeHex = false;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen = pfx.length(); // Assign the length of the matched prefix\n                if (pfx.charAt(0) == '-') { // Check if the matched prefix starts with '-'\n                    negativeHex = true;\n                }\n                break;\n            }\n        }\n\n        if (pfxLen > 0) { // we have a hex number\n            // Try parsing as Integer, then Long, then BigInteger for hex values\n            try {\n                // createInteger uses Integer.decode, which correctly handles hex prefixes like \"0x\" and \"#\"\n                // and their signs, and will throw NFE for overflow.\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) {\n                // Fall through to Long if Integer fails (e.g., value too large for Integer)\n            }\n            try {\n                // createLong uses Long.decode, which correctly handles hex prefixes and signs,\n                // and will throw NFE for overflow.\n                return createLong(str);\n            } catch (final NumberFormatException nfe) {\n                // Fall through to BigInteger if Long fails (e.g., value too large for Long)\n            }\n            // If it's too large for Long, it must be a BigInteger.\n            // BigInteger(String, radix) constructor expects the string *without* the prefix\n            // and the sign must be applied separately if the original prefix was negative.\n            String hexDigitsStr = str.substring(pfxLen);\n            if (hexDigitsStr.isEmpty()) {\n                 throw new NumberFormatException(\"For input string: \\\"\" + str + \"\\\"\");\n            }\n            BigInteger bi = new BigInteger(hexDigitsStr, 16);\n            if (negativeHex) {\n                bi = bi.negate();\n            }\n            return bi;\n        }\n\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n\n        int numDecimals = 0; // Check required precision (LANG-693)\n        if (decPos > -1) { // there is a decimal point\n\n            if (expPos > -1) { // there is an exponent\n                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            final String numeric = str.substring(0, str.length() - 1);\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        final Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        final Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        }\n        //User doesn't have a preference on the return type, so let's start\n        //small and go from there...\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) { // no decimal point and no exponent\n            //Must be an Integer, Long, Biginteger\n            try {\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            try {\n                return createLong(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            return createBigInteger(str);\n        }\n\n        //Must be a Float, Double, BigDecimal\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        try {\n            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n                final Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        try {\n            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n                final Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n\n        return createBigDecimal(str);\n    }\n\n    // Dummy isDigits method for compilation, actual implementation would be in NumberUtils\n    private static boolean isDigits(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n        for (char c : str.toCharArray()) {\n            if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}