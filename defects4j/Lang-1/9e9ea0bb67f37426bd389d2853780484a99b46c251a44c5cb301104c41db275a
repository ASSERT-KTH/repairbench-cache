{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    final String[] hexPrefixes = {\"0x\", \"0X\", \"#\"};\n    String sign = \"\";\n    int signLength = 0;\n    if (str.charAt(0) == '+' || str.charAt(0) == '-') {\n        sign = str.substring(0, 1);\n        signLength = 1;\n        if (str.length() == 1) {\n            throw new NumberFormatException(\"Invalid numeric string: \" + str);\n        }\n    }\n\n    String hexNumber = null;\n    for (String pfx : hexPrefixes) {\n        if (str.substring(signLength).startsWith(pfx)) {\n            hexNumber = str.substring(signLength + pfx.length());\n            if (hexNumber.isEmpty()) {\n                throw new NumberFormatException(\"Invalid hex string: \" + str);\n            }\n            break;\n        }\n    }\n\n    if (hexNumber != null) {\n        try {\n            int hexLength = hexNumber.length();\n            String value = sign + hexNumber;\n            if (hexLength <= 8) {\n                return Integer.valueOf(value, 16);\n            } else if (hexLength <= 16) {\n                return Long.valueOf(value, 16);\n            } else {\n                return new BigInteger(value, 16);\n            }\n        } catch (NumberFormatException e) {\n            throw new NumberFormatException(\"Invalid hex string: \" + str);\n        }\n    }\n\n    final char lastChar = str.charAt(str.length() - 1);\n    String numeric = str;\n    String exp = null;\n    if (expPos >= 0) {\n        exp = str.substring(expPos + 1);\n        numeric = str.substring(0, expPos);\n    }\n\n    try {\n        if (lastChar == 'l' || lastChar == 'L') {\n            return Long.parseLong(numeric);\n        } else if (lastChar == 'f' || lastChar == 'F') {\n            return Float.parseFloat(numeric);\n        } else if (lastChar == 'd' || lastChar == 'D') {\n            return Double.parseDouble(numeric);\n        }\n    } catch (NumberFormatException e) {\n        if (lastChar != '.' && lastChar != 'e' && lastChar != 'E') {\n            throw new NumberFormatException(\"Invalid number: \" + str);\n        }\n    }\n\n    if (str.indexOf('.') != -1) {\n        try {\n            return new BigDecimal(str);\n        } catch (NumberFormatException e) {\n            throw new NumberFormatException(\"Invalid number: \" + str);\n        }\n    }\n\n    try {\n        return Long.parseLong(str);\n    } catch (NumberFormatException e1) {\n        try {\n            return new BigInteger(str);\n        } catch (NumberFormatException e2) {\n            throw new NumberFormatException(\"Invalid number: \" + str);\n        }\n    }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}