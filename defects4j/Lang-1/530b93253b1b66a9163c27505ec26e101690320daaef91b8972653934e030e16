{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n    *\n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen = pfx.length(); // Fixed: Changed += to =\n                break;\n            }\n        }\n        if (pfxLen > 0) { // we have a hex number\n            final int hexDigits = str.length() - pfxLen;\n\n            if (hexDigits > 16) { // More than 16 hex digits must be BigInteger\n                return createBigInteger(str);\n            }\n            // 1 to 16 hex digits remaining\n\n            if (hexDigits > 8) { // 9 to 16 hex digits\n                // Potential Long or BigInteger\n                try {\n                    // This might throw NFE for numbers > Long.MAX_VALUE or < Long.MIN_VALUE\n                    // e.g. \"0x8000000000000000\"\n                    return createLong(str);\n                } catch (final NumberFormatException nfe) {\n                    // If createLong fails (likely due to overflow), use BigInteger\n                    return createBigInteger(str);\n                }\n            } else { // hexDigits <= 8\n                // Potential Integer or Long\n                try {\n                    // This might throw NFE for numbers > Integer.MAX_VALUE or < Integer.MIN_VALUE\n                    // e.g. \"0x80000000\"\n                    return createInteger(str);\n                } catch (final NumberFormatException nfe) {\n                    // If createInteger fails (likely due to overflow), use Long.\n                    // Since hexDigits <= 8, it's guaranteed to fit in a Long.\n                    return createLong(str);\n                }\n            }\n        }\n\n        // Non-hex number processing starts here\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n\n        int numDecimals = 0; // Check required precision (LANG-693)\n        if (decPos > -1) { // there is a decimal point\n\n            if (expPos > -1) { // there is an exponent\n                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            final String numeric = str.substring(0, str.length() - 1);\n            // isAllZeros check depends on parsed mantissa and exponent, potentially null\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null // Ensure 'L' is not preceded by 'e' or 'E'\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            // First try Long. If NFE, assume it's too big for Long.\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Fallback to BigInteger for numbers too large for Long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    // Invalid format for 'L' suffix (e.g., has '.', 'e', or non-digits)\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        final Float f = createFloat(numeric);\n                        // Check for infinity and for lossy zero conversion\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            // If it parses okay and isn't infinite or a zero losing non-zero digits, return it.\n                            // Note: This doesn't guarantee precision for large numbers.\n                            return f;\n                        }\n                        // If Float resulted in Infinite or zero loss, fall through to Double/BigDecimal\n\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number, maybe it's valid for Double or BigDecimal\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        final Double d = createDouble(numeric);\n                         // Check for infinity and for lossy zero conversion\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { // Use doubleValue()\n                            return d;\n                        }\n                        // If Double resulted in Infinite or zero loss, fall through to BigDecimal\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number, maybe it's valid for BigDecimal\n                    }\n                    try {\n                        // Last resort for 'f', 'F', 'd', 'D' is BigDecimal\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                        // ignore the bad number if BigDecimal also fails\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    // Any other non-digit character is invalid\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        }\n        // User doesn't have a preference on the return type (no suffix)\n        // Start small and go from there...\n\n        if (expPos > -1 && expPos < str.length() - 1) {\n            // Extract exponent if present and valid\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n\n        // Handle non-hex integers (potentially octal)\n        if (dec == null && exp == null) { // No decimal point and no exponent\n            // Could be Integer, Long, Biginteger, or Octal\n            // Handle Octal (leading '0' followed by 0-7)\n            if (str.startsWith(\"0\") && str.length() > 1) {\n                boolean isOctal = true;\n                for (int i = 1; i < str.length(); i++) {\n                    char c = str.charAt(i);\n                    if (c < '0' || c > '7') {\n                        isOctal = false;\n                        break;\n                    }\n                }\n                if (isOctal) {\n                    try {\n                        // Use same overflow logic as hex: try Integer -> Long -> BigInteger\n                        try {\n                            return createInteger(str); // Assumes createInteger handles octal via decode()\n                        } catch (NumberFormatException nfe1) {\n                           try {\n                                return createLong(str); // Assumes createLong handles octal via decode()\n                           } catch (NumberFormatException nfe2){\n                               return createBigInteger(str); // For octal numbers > Long.MAX_VALUE\n                           }\n                       }\n                    } catch (NumberFormatException nfeOctal) { // Should not happen if createX use decode\n                       // Rethrow original NFE if low-level parsing fails unexpectedly\n                       throw new NumberFormatException(\"Cannot parse octal '\" + str + \"'\", nfeOctal);\n                    }\n                }\n                // If not octal (e.g., \"09\"), fall through to decimal parsing\n            }\n\n            // Try decimal Integer -> Long -> BigInteger\n            try {\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            try {\n                return createLong(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            return createBigInteger(str); // Fallback for large integers\n        }\n\n        // Must be a Float, Double, or BigDecimal (contains '.' or 'e'/'E')\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        try {\n            // Try Float if precision seems okay (LANG-693 heuristic)\n            if(numDecimals <= 7){ // If number has 7 or fewer digits past the decimal point\n                final Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    // Check if the string representation matches the float value exactly\n                    // This check is problematic, rely on limited decimal places for now\n                    // Alternative: Check if BigDecimal(str).equals(BigDecimal(f.toString()))? Too complex.\n                    // Let's return float based on decimal count heuristic.\n                    return f;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number, try Double\n        }\n        try {\n            // Try Double if precision seems okay (LANG-693 heuristic)\n             if(numDecimals <= 16){ // If number has between 8 and 16 digits past the decimal point\n                final Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                     // Return double based on decimal count heuristic.\n                    return d;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number, try BigDecimal\n        }\n\n        // Fallback to BigDecimal for best precision or if others failed/overflowed\n        return createBigDecimal(str);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}