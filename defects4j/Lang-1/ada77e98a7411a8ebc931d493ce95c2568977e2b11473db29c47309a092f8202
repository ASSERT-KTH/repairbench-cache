{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Handle hex (0x... / #...), with optional leading minus\n    final String[] hexPrefixes = { \"-0x\", \"-0X\", \"-#\", \"0x\", \"0X\", \"#\" };\n    int pfxLen = 0;\n    for (final String pfx : hexPrefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) {\n        // strip off prefix and count significant hex digits (no leading zeros)\n        String digits = str.substring(pfxLen);\n        int idx = 0;\n        while (idx < digits.length() && digits.charAt(idx) == '0') {\n            idx++;\n        }\n        int trimmedLen = digits.length() - idx;\n        // trimmedLen <= 0 means the value is zero => fits in Integer\n        if (trimmedLen <= 8) {\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe2) {\n                    return createBigInteger(str);\n                }\n            }\n        }\n        if (trimmedLen <= 16) {\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n                return createBigInteger(str);\n            }\n        }\n        return createBigInteger(str);\n    }\n    // No hex prefix: handle decimal, floating, type qualifiers, etc.\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n    int numDecimals = 0;\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length();\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l': case 'L':\n                if (dec == null && exp == null &&\n                   ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) \n                    || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                        return createBigInteger(numeric);\n                    }\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f': case 'F':\n                try {\n                    final Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                // fall through\n            case 'd': case 'D':\n                try {\n                    final Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                    // ignore\n                }\n                // fall through\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) {\n        try {\n            return createInteger(str);\n        } catch (NumberFormatException nfe) {\n            // ignore\n        }\n        try {\n            return createLong(str);\n        } catch (NumberFormatException nfe) {\n            // ignore\n        }\n        return createBigInteger(str);\n    }\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        if (numDecimals <= 7) {\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (NumberFormatException nfe) {\n        // ignore\n    }\n    try {\n        if (numDecimals <= 16) {\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (NumberFormatException nfe) {\n        // ignore\n    }\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}