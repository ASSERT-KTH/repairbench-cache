{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    String hexPfx = null;\n    for(final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length();\n            hexPfx = pfx;\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        // Remove sign for digit count if present\n        int hexStartIdx = pfxLen;\n        boolean negative = false;\n        if (str.charAt(0) == '-') {\n            negative = true;\n        }\n        // The 0x or # prefix always comes after sign so counting hex digits after that\n        String rawDigits = str.substring(pfxLen);\n        // skip any leading zeros in digits for correct digit length test\n        int i=0;\n        while(i<rawDigits.length() && rawDigits.charAt(i)=='0') i++;\n        int hexDigits = rawDigits.length() - i;\n        // Now, Integer supports up to 8 hex digits (without sign), but if top digit is > 7, must use Long\n        // Long supports up to 16 hex digits; above that BigInteger\n\n        // Remove the prefix\n        String cleanStr = str.substring(0);\n\n        // Now, extract prefix for use below.\n        // For all, test cleanStr without sign\n        String hexDigitsStr = str.substring(pfxLen);\n\n        // Remove sign for bounds checks\n        String testDigits = hexDigitsStr;\n        if (testDigits.length() > 0 && (testDigits.charAt(0) == '+' || testDigits.charAt(0)=='-')) {\n            testDigits = testDigits.substring(1);\n        }\n        // Remove leading zeros for actual digit length for bounds\n        testDigits = testDigits.replaceFirst(\"^0+\", \"\");\n\n        // For hex numbers, the case is subtle:\n        // - If string (without prefix) is 1..8 digits -> Integer\n        // - If >8 and <=16 digits -> Long\n        // - If >16 digits -> BigInteger\n        //\n        // BUT:\n        // If the unsigned value doesn't fit Integer, must use Long.\n        // That is, 0xFFFFFFFF (> Integer.MAX_VALUE), is valid for Long.\n\n        // For Integer: #digits <=8\n        if (hexDigitsStr.length() <= 8) {\n            // Parse as Integer\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException ex) {\n                // Fallback to Long\n                try {\n                    return createLong(str);\n                } catch(NumberFormatException ex2) {\n                    // Fallback to BigInteger\n                    return createBigInteger(str);\n                }\n            }\n        }\n        // For Long: #digits <=16\n        else if (hexDigitsStr.length() <= 16) {\n            // Actually, must parse as Long\n            try {\n                return createLong(str);\n            } catch(NumberFormatException ex) {\n                // Fallback to BigInteger\n                return createBigInteger(str);\n            }\n        }\n        // >16 digits: BigInteger\n        else {\n            return createBigInteger(str);\n        }\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n    int numDecimals = 0; // Check required precision (LANG-693)\n    if (decPos > -1) { // there is a decimal point\n\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        //Requesting a specific type..\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null\n                    && exp == null\n                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // Too big for a long\n                    }\n                    return createBigInteger(numeric);\n\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        //If it's too big for a float or the float value = 0 and the string\n                        //has non-zeros in it, then float does not have the precision we want\n                        return f;\n                    }\n\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n            case 'd' :\n            case 'D' :\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) { // NOPMD\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n\n        }\n    }\n    //User doesn't have a preference on the return type, so let's start\n    //small and go from there...\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        //Must be an Integer, Long, Biginteger\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        return createBigInteger(str);\n    }\n\n    //Must be a Float, Double, BigDecimal\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // ignore the bad number\n    }\n    try {\n        if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // ignore the bad number\n    }\n\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}