{
    "generation": "import java.math.BigDecimal;\nimport java.math.BigInteger;\n// It is assumed that the necessary helper methods like createFloat, createDouble,\n// createBigDecimal, createInteger, createLong, createBigInteger, isDigits, isAllZeros,\n// and StringUtils.isBlank are available in the context where this function is used.\n// Specifically, StringUtils is from org.apache.commons.lang3.StringUtils\n// and the createX methods, isDigits, isAllZeros are likely static methods within the same class.\n\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer, Long or BigInteger using a two's complement C-style interpretation\n     * based on the number of digits (up to 8 digits = 32 bits, up to 16 digits = 64 bits). Values exceeding the\n     * signed range of the type determined by the digit count (e.g., 0x80000000 for 32 bits, 0x8000000000000000 for 64 bits)\n     * will be returned as the smallest type that can fit the interpreted value (Long for 32-bit overflow, BigInteger for 64-bit overflow).\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n     * <code>BigDecimal</code>.</p>\n     *\n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigInteger as appropriate. This is handled by the downstream createInteger/createLong/createBigInteger methods.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n\n        // Hexadecimal Handling - Handles 0x, 0X, # prefixes with optional sign\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        String pfxFound = null;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen = pfx.length();\n                pfxFound = pfx;\n                break;\n            }\n        }\n\n        if (pfxLen > 0) {\n            final boolean negative = pfxFound.indexOf('-') != -1;\n            // Extract the part after the prefix\n            String hexDigitsStr = str.substring(pfxLen);\n\n            // Ensure there are digits after the prefix\n            if (hexDigitsStr.isEmpty()) {\n                throw new NumberFormatException(str + \" is not a valid number (no digits after hex indicator).\");\n            }\n\n            final int hexDigits = hexDigitsStr.length();\n\n            // Use BigInteger for parsing magnitude to handle potential overflows and signs correctly\n            try {\n                BigInteger magnitude = new BigInteger(hexDigitsStr, 16);\n\n                if (hexDigits <= 8) { // Potential 32-bit number\n                    if (negative) {\n                        BigInteger val = magnitude.negate();\n                        // Check if it fits in standard Integer range\n                        if (val.compareTo(BigInteger.valueOf(Integer.MIN_VALUE)) >= 0 && val.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) <= 0) {\n                            return Integer.valueOf(val.intValue());\n                        }\n                        // Doesn't fit in Integer, return as Long\n                        return Long.valueOf(val.longValue());\n                    } else {\n                        // Check bit length for unsigned 32-bit interpretation\n                        if (magnitude.bitLength() <= 31) { // Fits positive signed int range\n                            return Integer.valueOf(magnitude.intValue());\n                        }\n                        if (magnitude.bitLength() <= 32) { // Fits 32 bits (possibly negative two's complement like 0x80000000)\n                             // Interpret as 32-bit two's complement, return as Long (per LANG-747 test expectations)\n                             int intValue = magnitude.intValue(); // Get the 32-bit signed value via wrap-around\n                             return Long.valueOf(intValue);\n                        }\n                        // bitLength > 32 is impossible for <= 8 hex digits if BigInteger parsing works.\n                        // Fallback to Long if somehow reached.\n                        return Long.valueOf(magnitude.longValue());\n                    }\n                } else if (hexDigits <= 16) { // Potential 64-bit number\n                    if (negative) {\n                        BigInteger val = magnitude.negate();\n                         // Check if it fits in standard Long range\n                        if (val.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0 && val.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0) {\n                            return Long.valueOf(val.longValue());\n                        }\n                        // Negative, too small for Long (e.g. -0x8000000000000001), must be BigInteger\n                        return val;\n                    } else {\n                        // Check bit length for unsigned 64-bit interpretation\n                        if (magnitude.bitLength() <= 63) { // Fits positive signed long range\n                            return Long.valueOf(magnitude.longValue());\n                        }\n                         // Fits 64 bits, but >= 2^63 (e.g., 0x8000000000000000)\n                         // Test expects BigInteger for these magnitudes.\n                        return magnitude; // Return the positive BigInteger directly\n                    }\n                } else { // hexDigits > 16\n                     // Return BigInteger (handles sign correctly)\n                    return negative ? magnitude.negate() : magnitude;\n                }\n            } catch (NumberFormatException e) {\n                 // Rethrow exception from BigInteger constructor if hexDigitsStr contains invalid chars\n                 throw new NumberFormatException(str + \" is not a valid number. Invalid hex characters: \" + e.getMessage());\n            }\n        } // End hex processing\n\n        // Non-hex Number Parsing (Mostly original logic with exponent/decimal validation fixes)\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        final int expPos;\n        int expPosE = str.indexOf('e');\n        int expPosEb = str.indexOf('E');\n        if (expPosE == -1) {\n            expPos = expPosEb;\n        } else if (expPosEb == -1) {\n            expPos = expPosE;\n        } else {\n            expPos = Math.min(expPosE, expPosEb); // Use the first occurrence\n        }\n\n        // Validate number structure basics before splitting\n        boolean hasDecPoint = decPos > -1;\n        boolean hasExp = expPos > -1;\n\n        if (hasExp && hasDecPoint && expPos < decPos) { // Exponent cannot appear before decimal point\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        // Prevent \"e\", \"-e\", \".e\", \"-.e\" cases\n        if (hasExp && (expPos == 0 || (expPos == 1 && str.charAt(0)=='-'))) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        if (hasExp && expPos >= str.length() - 1) { // Exponent marker cannot be the last character\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n\n\n        // Split into mantissa, decimal, exponent parts\n        if (hasDecPoint) {\n            if (hasExp) {\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else { // No decimal point\n            if (hasExp) {\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n\n        // Extract exponent string\n        if (hasExp) {\n            // Determine end of exponent section (before potential type qualifier)\n            final int expEnd = (Character.isDigit(lastChar) || lastChar == '.') ? str.length() : str.length() - 1;\n            final int expStart = expPos + 1;\n            // Check for empty exponent, e.g., \"1e\" or \"1eL\"\n            if (expStart >= expEnd) {\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            exp = str.substring(expStart, expEnd);\n        } else {\n            exp = null;\n        }\n\n        // Handle Type Qualifiers (L, F, D) if last char is not a digit or '.'\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            // The numeric part excludes the qualifier\n            final String numeric = str.substring(0, str.length() - 1);\n            // isAllZeros check requires the actual helper implementation\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp);\n\n            switch (lastChar) {\n                case 'l':\n                case 'L':\n                    // Long requires no decimal point and no exponent\n                    if (dec == null && exp == null && numeric.indexOf('.') == -1 && numeric.indexOf('e') == -1 && numeric.indexOf('E') == -1) {\n                        // Rely on createLong/createBigInteger for final validation (handles octal too)\n                        try {\n                            // Use createLong for consistency. It should handle octal prefix.\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Too big for Long, parse as BigInteger\n                            return createBigInteger(numeric);\n                        }\n                    }\n                    // Invalid format if decimal/exponent present with L qualifier\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f':\n                case 'F':\n                    try {\n                        // Use createFloat helper which likely uses Float.valueOf(String)\n                        final Float f = createFloat(numeric);\n                        // Check for underflow/overflow using Float methods\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n                        // Fall through if Float representation is not adequate (original behavior)\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // Ignore if 'numeric' part is invalid for Float, fall through\n                    }\n                    // $FALL-THROUGH$ intended by original code\n                case 'd':\n                case 'D':\n                    try {\n                        // Use createDouble helper which likely uses Double.valueOf(String)\n                        final Double d = createDouble(numeric);\n                         // Check for underflow/overflow using Double methods\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                        // Fall through if Double representation is not adequate (original behavior)\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // Ignore if 'numeric' part is invalid for Double, fall through\n                    }\n                    // $FALL-THROUGH$ intended by original code to try BigDecimal\n                    try {\n                         // Use createBigDecimal if Float/Double fail or are not precise enough\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                         // If even BigDecimal fails, the format is fundamentally wrong\n                         // Fall through to default error case.\n                    }\n                    // $FALL-THROUGH$\n                default:\n                    // Invalid type qualifier or other non-digit character at the end\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            // This point should not be reached if default case throws exception\n             throw new NumberFormatException(str + \" is not a valid number.\");\n        } // End of type qualifier handling\n\n        // ---- No type qualifier ----\n        // Determine if it's an integer type or floating point type based on presence of '.' or 'e'/'E'\n        if (!hasDecPoint && !hasExp) { // Integer Types (Decimal or Octal)\n            // Hex was handled above. Octal/Decimal handled by createX methods.\n            try {\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) { // NOPMD ignore\n            }\n            try {\n                return createLong(str);\n            } catch (final NumberFormatException nfe) { // NOPMD ignore\n            }\n            // Must be BigInteger if others fail (or is explicitly octal/decimal large number)\n            return createBigInteger(str);\n\n        } else { // Floating Point Types\n            // isAllZeros check requires the actual helper implementation\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(dec) && isAllZeros(exp);\n            try {\n                final Float f = createFloat(str);\n                 // Check for valid Float range, ignoring previous numDecimals logic (LANG-693)\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    // Return Float if it seems valid range-wise.\n                    // More sophisticated precision checks are omitted for simplicity here.\n                    return f;\n                }\n            } catch (final NumberFormatException nfe) { // NOPMD ignore\n            }\n            try {\n                final Double d = createDouble(str);\n                 // Check for valid Double range\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (final NumberFormatException nfe) { // NOPMD ignore\n            }\n            // Default to BigDecimal for precision or range issues with Float/Double\n            return createBigDecimal(str);\n        }\n    }\n\n    // --- Helper method stubs ---\n    // These methods are assumed to exist elsewhere in the NumberUtils class or be accessible.\n    // Their implementation details (like using decode vs valueOf vs new) affect behavior.\n    // private static Integer createInteger(String str) { ... }\n    // private static Long createLong(String str) { ... }\n    // private static BigInteger createBigInteger(String str) { ... }\n    // private static Float createFloat(String str) { ... }\n    // private static Double createDouble(String str) { ... }\n    // private static BigDecimal createBigDecimal(String str) { ... }\n    // private static boolean isDigits(String str) { ... }\n    // private static boolean isAllZeros(String str) { ... }\n    // Assuming StringUtils is imported: import org.apache.commons.lang3.StringUtils;",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}