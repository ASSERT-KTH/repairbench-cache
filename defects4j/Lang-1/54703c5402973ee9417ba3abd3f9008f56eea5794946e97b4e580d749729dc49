{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for (final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        // Use numeric value comparison instead of raw digit count.\n        final boolean negative = str.charAt(0) == '-';\n        // The hex part does not include the sign because our prefixes for negatives include the '-' \n        final String hexPart = str.substring(pfxLen);\n        final BigInteger bi;\n        try {\n            // BigInteger will ignore any leading zeros.\n            BigInteger tmp = new BigInteger(hexPart, 16);\n            bi = negative ? tmp.negate() : tmp;\n        } catch (final NumberFormatException nfe) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        // If the hex value fits in an Integer then use that.\n        if (bi.compareTo(BigInteger.valueOf(Integer.MIN_VALUE)) >= 0 &&\n            bi.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) <= 0) {\n            return createInteger(str);\n        }\n        // Otherwise, if it fits in a Long then use that.\n        if (bi.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) >= 0 &&\n            bi.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) <= 0) {\n            return createLong(str);\n        }\n        // Otherwise use BigInteger.\n        return createBigInteger(str);\n    }\n    \n    // Now handle non-hex numbers.\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    \n    final int decPos = str.indexOf('.');\n    // Calculate position of exponent specifier. (Using indexOf for 'e' or 'E' may yield -1; the sum here is a shorthand.)\n    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n    int numDecimals = 0; // For checking precision\n    \n    if (decPos > -1) { // There is a decimal point.\n        if (expPos > -1) { // And an exponent.\n            if (expPos < decPos || expPos > str.length()) { // Protect against double exponents, etc.\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length();\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) { // Protection against malformed exponent indicators.\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    \n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null\n                    && exp == null\n                    && ((numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) \n                        || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) {\n                        // Too big for a long; fall through.\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (final NumberFormatException nfe) {\n                    // Ignore and try next option.\n                }\n                // Fall through intentionally.\n            case 'd' :\n            case 'D' :\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) {\n                    // Ignore and try next option.\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) {\n                    // Give up.\n                }\n                // Fall through.\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    \n    // If we reach here, the user did not specify a type explicitly.\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) { // No decimal or exponent => integral number.\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) {\n            // Try next size.\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) {\n            // Fall through.\n        }\n        return createBigInteger(str);\n    }\n    \n    // Must be a floating point number.\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        if (numDecimals <= 7) { // 7 or fewer decimals: try Float.\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // Fall through.\n    }\n    try {\n        if (numDecimals <= 16) { // 8 to 16 decimals: try Double.\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // Fall through.\n    }\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}