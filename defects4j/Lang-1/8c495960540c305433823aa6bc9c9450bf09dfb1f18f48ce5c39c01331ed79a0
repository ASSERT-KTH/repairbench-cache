{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n    *\n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (org.apache.commons.lang3.StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n\n        // --- Start of Hexadecimal Number Parsing ---\n        String hexPrefix = null;\n        int pfxLen = 0;\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                hexPrefix = pfx;\n                pfxLen = pfx.length();\n                break;\n            }\n        }\n\n        if (hexPrefix != null) { // we have a hex number\n            String hexDigitsStr = str.substring(pfxLen);\n\n            // Handle negative sign from prefix for BigInteger constructor\n            boolean isNegative = hexPrefix.startsWith(\"-\");\n            if (isNegative) {\n                hexDigitsStr = \"-\" + hexDigitsStr;\n            }\n\n            // Check for empty hex string after prefix (e.g., \"0x\" or \"-#\") or just \"-\"\n            if (hexDigitsStr.isEmpty() || (isNegative && hexDigitsStr.length() == 1 && hexDigitsStr.charAt(0) == '-')) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n\n            try {\n                // Parse with radix 16 (hexadecimal) using BigInteger for full range\n                final java.math.BigInteger bi = new java.math.BigInteger(hexDigitsStr, 16);\n\n                // Determine the smallest fitting number type\n                if (bi.compareTo(java.math.BigInteger.valueOf(Integer.MAX_VALUE)) <= 0 &&\n                    bi.compareTo(java.math.BigInteger.valueOf(Integer.MIN_VALUE)) >= 0) {\n                    return bi.intValue();\n                }\n                if (bi.compareTo(java.math.BigInteger.valueOf(Long.MAX_VALUE)) <= 0 &&\n                    bi.compareTo(java.math.BigInteger.valueOf(Long.MIN_VALUE)) >= 0) {\n                    return bi.longValue();\n                }\n                return bi;\n            } catch (final NumberFormatException e) {\n                // If BigInteger constructor throws an error (e.g., invalid hex digits like \"0xGHI\")\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        }\n        // --- End of Hexadecimal Number Parsing ---\n\n        // Rest of the existing code for non-hex numbers\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n\n        int numDecimals = 0;\n        if (decPos > -1) {\n            if (expPos > -1) {\n                if (expPos < decPos || expPos > str.length()) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n            numDecimals = dec.length();\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n\n        // Helper methods (isDigits, isAllZeros) are assumed to be present in NumberUtils or accessible.\n        // Corrected isAllZeros usage to handle null 'dec' string.\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            final String numeric = str.substring(0, str.length() - 1);\n            // Assumed NumberUtils has an isAllZeros helper:\n            // private static boolean isAllZeros(final String str) { ... }\n            final boolean allZeros = isAllZeros(mant) && (dec == null || isAllZeros(dec)) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && ( (numeric.length() > 0 && numeric.charAt(0) == '-' && isDigits(numeric.substring(1))) || isDigits(numeric) ) ) {\n                        try {\n                            // Assuming createLong is a helper method in this class or NumberUtils\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        // Assuming createBigInteger is a helper method in this class or NumberUtils\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        // Original code uses NumberUtils.createFloat, so retaining that\n                        final Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            return f;\n                        }\n\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        // Original code uses NumberUtils.createDouble, so retaining that\n                        final Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        // Assuming createBigDecimal is a helper method in this class or NumberUtils\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        }\n        //User doesn't have a preference on the return type, so let's start\n        //small and go from there...\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) { // no decimal point and no exponent\n            //Must be an Integer, Long, Biginteger\n            try {\n                // Assuming createInteger is a helper method in this class or NumberUtils\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            try {\n                // Assuming createLong is a helper method in this class or NumberUtils\n                return createLong(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            // Assuming createBigInteger is a helper method in this class or NumberUtils\n            return createBigInteger(str);\n        }\n\n        //Must be a Float, Double, BigDecimal\n        // Corrected isAllZeros usage to handle null 'dec' string.\n        final boolean allZeros = isAllZeros(mant) && (dec == null || isAllZeros(dec)) && isAllZeros(exp);\n        try {\n            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n                // Assuming createFloat is a helper method in this class or NumberUtils\n                final Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        try {\n            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n                // Assuming createDouble is a helper method in this class or NumberUtils\n                final Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n\n        // Assuming createBigDecimal is a helper method in this class or NumberUtils\n        return createBigDecimal(str);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}