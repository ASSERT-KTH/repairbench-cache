{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for (final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length(); // Use assignment instead of addition.\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        // Get the hex part (for negative numbers, the '-' is part of the prefix)\n        boolean isNegative = str.charAt(0) == '-';\n        String hexPart = str.substring(pfxLen);\n        // Strip any leading zeros so that our digit\u2010count is based on effective digits.\n        int i = 0;\n        while (i < hexPart.length() && hexPart.charAt(i) == '0') {\n            i++;\n        }\n        String effectiveHex = hexPart.substring(i);\n        int effectiveLength = effectiveHex.length();\n        if (effectiveLength == 0) { // the number is zero (e.g. \"0x0\" or \"-0x000\")\n            return createInteger(str);\n        }\n        if (effectiveLength > 16) {\n            return createBigInteger(str);\n        } else if (effectiveLength > 8) {\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n                return createBigInteger(str);\n            }\n        } else {\n            // effectiveLength <= 8: try Integer first, but some 8-digit positives may be out of int range.\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n                return createLong(str);\n            }\n        }\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n    int numDecimals = 0; // Check required precision (LANG-693)\n    if (decPos > -1) { // there is a decimal point\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length();\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        // Requesting a specific type..\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null && exp == null\n                    && (numeric.charAt(0) == '-' ? isDigits(numeric.substring(1)) : isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) {\n                        return createBigInteger(numeric);\n                    }\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (final NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                // Fall through\n            case 'd' :\n            case 'D' :\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) {\n                    // ignore the bad number\n                }\n                // Fall through\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) { // no decimal point and no exponent\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) {\n            // ignore\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) {\n            // ignore\n        }\n        return createBigInteger(str);\n    }\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        if (numDecimals <= 7) { // If number has 7 or fewer digits past the decimal point then make it a float\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // ignore the bad number\n    }\n    try {\n        if (numDecimals <= 16) { // If number has between 8 and 16 digits past the decimal point then make it a double\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (final NumberFormatException nfe) {\n        // ignore the bad number\n    }\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}