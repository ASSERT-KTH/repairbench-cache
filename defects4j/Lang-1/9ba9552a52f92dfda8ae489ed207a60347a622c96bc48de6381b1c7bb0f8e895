{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    final String[] hexPrefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for (final String pfx : hexPrefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { \n        String numberPart = str.substring(pfxLen);\n        if (numberPart.isEmpty()) {\n            throw new NumberFormatException(\"Empty numeric part after the prefix '\" + str.substring(0, pfxLen) + \"'\");\n        }\n        int hexDigits = numberPart.length();\n        if (hexDigits > 16) {\n            return createBigInteger(str);\n        }\n        if (hexDigits > 8) {\n            return createLong(str);\n        }\n        return createInteger(str);\n    }\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = str.indexOf('e');\n    final int expPosUpper = str.indexOf('E');\n    int expPosition = -1;\n    if (expPos != -1) {\n        expPosition = expPos;\n    } else if (expPosUpper != -1) {\n        expPosition = expPosUpper;\n    }\n    int numDecimals = 0;\n    if (decPos > -1) {\n        if (expPosition > -1) {\n            if (expPosition < decPos || expPosition > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPosition);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length();\n    } else {\n        if (expPosition > -1) {\n            mant = str.substring(0, expPosition);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    boolean allZeros = isAllZeros(mant);\n    if (expPosition > -1) {\n        String expPart = str.substring(expPosition + 1);\n        allZeros &= isAllZeros(expPart);\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        final String numeric = str.substring(0, str.length() - 1);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (expPosition == -1 && dec == null) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException e) {\n                        // Fall through to BigInteger\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    Float f = createFloat(numeric);\n                    if (!f.isInfinite() && !(f.floatValue() == 0.0F && !allZeros)) {\n                        return f;\n                    }\n                } catch (NumberFormatException e) {\n                    // Ignore and proceed\n                }\n                //$FALL-THROUGH$\n            case 'd':\n            case 'D':\n                try {\n                    Double d = createDouble(numeric);\n                    if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !allZeros)) {\n                        return d;\n                    }\n                } catch (NumberFormatException e) {\n                    // Ignore and proceed\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                    // Ignore and proceed\n                }\n                break;\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    if (expPosition > -1) {\n        exp = str.substring(expPosition + 1);\n        allZeros &= isAllZeros(exp);\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) {\n        try {\n            return createInteger(str);\n        } catch (NumberFormatException e) {\n            // Ignore and proceed\n        }\n        try {\n            return createLong(str);\n        } catch (NumberFormatException e) {\n            // Ignore and proceed\n        }\n        return createBigInteger(str);\n    }\n    try {\n        if (numDecimals <= 7) {\n            Float f = createFloat(str);\n            if (!f.isInfinite() && !(f.floatValue() == 0.0F && !allZeros)) {\n                return f;\n            }\n        }\n    } catch (NumberFormatException e) {\n        // Ignore and proceed\n    }\n    try {\n        if (numDecimals <= 16) {\n            Double d = createDouble(str);\n            if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !allZeros)) {\n                return d;\n            }\n        }\n    } catch (NumberFormatException e) {\n        // Ignore and proceed\n    }\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}