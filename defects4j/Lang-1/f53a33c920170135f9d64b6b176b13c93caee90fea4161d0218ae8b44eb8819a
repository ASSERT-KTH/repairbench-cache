{
    "generation": "    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it\n     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the\n     * prefix is more than 8 - or BigInteger if there are more than 16 digits.\n     * </p>\n     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n     * trying to create successively larger types from the type specified\n     * until one is found that can represent the value.</p>\n     *\n     * <p>If a type specifier is not found, it will check for a decimal point\n     * and then try successively larger types from <code>Integer</code> to\n     * <code>BigInteger</code> and from <code>Float</code> to\n    * <code>BigDecimal</code>.</p>\n     *\n     * <p>\n     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will\n     * be Integer, Long or BigDecimal as appropriate.\n     * </p>\n     *\n     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n     *\n     * <p>This method does not trim the input string, i.e., strings with leading\n     * or trailing spaces will generate NumberFormatExceptions.</p>\n     *\n     * @param str  String containing a number, may be null\n     * @return Number created from the string (or null if the input is null)\n     * @throws NumberFormatException if the value cannot be converted\n     */\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen = pfx.length(); // Use the length of the matched prefix\n                break;\n            }\n        }\n\n        if (pfxLen > 0) { // we have a hex number\n            int hexDigits = str.length() - pfxLen; // Number of digits after the prefix\n\n            if (hexDigits > 16) { // More than 16 hex digits (ignoring sign in prefix), must be BigInteger\n                // Assumes createBigInteger handles prefixes correctly\n                return createBigInteger(str);\n            }\n            // Can be Long or BigInteger (9-16 hex digits)\n            if (hexDigits > 8) {\n                try {\n                    // Try Long first. Assumes createLong uses Long.decode() or equivalent.\n                    return createLong(str);\n                } catch (final NumberFormatException nfe) {\n                    // If Long parsing fails (likely value outside signed Long range,\n                    // but representable as BigInteger like 0x8000000000000000).\n                    return createBigInteger(str);\n                }\n            }\n            // Can be Integer, Long or BigInteger (<= 8 hex digits)\n            try {\n                // Try Integer first. Assumes createInteger uses Integer.decode() or equivalent.\n                return createInteger(str);\n            } catch (final NumberFormatException nfe1) {\n                // If Integer parsing fails (likely value outside signed Integer range,\n                // like 0x80000000).\n                // Fall back to Long. This should succeed for valid hex strings <= 8 digits.\n                 try {\n                    return createLong(str);\n                 } catch (final NumberFormatException nfe2) {\n                    // This path is highly unlikely for valid hex strings with <= 8 digits\n                    // if createLong works correctly, but as a safeguard, try BigInteger.\n                    return createBigInteger(str);\n                 }\n            }\n        }\n        // End of hex number handling\n\n        // Code for non-hex numbers starts here\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n\n        int numDecimals = 0; // Check required precision (LANG-693)\n        if (decPos > -1) { // there is a decimal point\n\n            if (expPos > -1) { // there is an exponent\n                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            //Requesting a specific type..\n            final String numeric = str.substring(0, str.length() - 1);\n            // isAllZeros and isDigits are helper methods assumed to exist in the actual NumberUtils class\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null // Using exp here seems incorrect, should check expPos? Original code uses exp.\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            // Use a createLong that handles base-10 string without prefix.\n                            // Assuming createLong(numeric) does this, or replace with Long.parseLong(numeric).\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        // Use a createBigInteger that handles base-10 string.\n                        // Assuming createBigInteger(numeric) does this, or replace with new BigInteger(numeric).\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        // Assuming NumberUtils.createFloat exists and works like Float.valueOf\n                        final Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        // Assuming NumberUtils.createDouble exists and works like Double.valueOf\n                        final Double d = NumberUtils.createDouble(numeric);\n                        // NOTE: Original code used d.floatValue() == 0.0D which is likely a typo. Corrected to d.doubleValue().\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        // Assumes createBigDecimal handles base-10 string\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        }\n        //User doesn't have a preference on the return type, so let's start\n        //small and go from there...\n        if (expPos > -1 && expPos < str.length() - 1) {\n             // If expPos refers to the original string, and lastChar was not a digit/dot,\n             // this substring might include the type character if not handled correctly above.\n             // Let's assume exp extraction is correct for this path (no type suffix).\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            // No exponent found or it's at the very end (invalid like \"1e\")?\n            // Original code assigned null if no exponent part after position check.\n            exp = null;\n             // Add check for invalid exponent like \"1e\"\n             if (expPos > -1 && expPos == str.length() - 1) {\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n        }\n        if (dec == null && exp == null) { // no decimal point and no exponent\n            //Must be an Integer, Long, Biginteger\n            // Check for octal '0' prefix (requires createInteger/Long/BigInteger to handle decode logic)\n            try {\n                 // Assumes createInteger uses Integer.decode() or handles octal/decimal appropriately\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            try {\n                 // Assumes createLong uses Long.decode() or handles octal/decimal appropriately\n                return createLong(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n             // Assumes createBigInteger handles hex/octal/decimal appropriately\n            return createBigInteger(str);\n        }\n\n        //Must be a Float, Double, BigDecimal\n         // isAllZeros needs definition or import\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        try {\n             // This precision logic (numDecimals <= 7 for Float) is specific to Commons Lang.\n            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n                // Assumes createFloat parses the full string correctly\n                final Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        try {\n            // This precision logic (numDecimals <= 16 for Double) is specific to Commons Lang.\n            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n                 // Assumes createDouble parses the full string correctly\n                final Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        // Assumes createBigDecimal parses the full string correctly\n        return createBigDecimal(str);\n    }\n\n    /* Assume these helper methods exist in the context of org.apache.commons.lang3.math.NumberUtils */\n    // static Integer createInteger(String str) throws NumberFormatException { ... }\n    // static Long createLong(String str) throws NumberFormatException { ... }\n    // static BigInteger createBigInteger(String str) throws NumberFormatException { ... }\n    // static Float createFloat(String str) throws NumberFormatException { ... }\n    // static Double createDouble(String str) throws NumberFormatException { ... }\n    // static BigDecimal createBigDecimal(String str) throws NumberFormatException { ... }\n    // static boolean isAllZeros(String str) { ... }\n    // static boolean isDigits(String str) { ... }\n    /* Assume StringUtils.isBlank is available */\n    // import org.apache.commons.lang3.StringUtils;\n\n    // Dummy helper methods required for the snippet to be syntactically plausible standalone\n    // These would be replaced by the actual implementations in Apache Commons Lang.\n    private static class NumberUtils {\n        public static Float createFloat(String str) { return Float.valueOf(str); }\n        public static Double createDouble(String str) { return Double.valueOf(str); }\n    }\n    private static Integer createInteger(String str) throws NumberFormatException { return Integer.decode(str); }\n    private static Long createLong(String str) throws NumberFormatException {\n        if (str == null) throw new NumberFormatException(\"Null string\");\n        // Handle base-10 specific calls from suffix logic\n        if (!str.startsWith(\"0x\") && !str.startsWith(\"0X\") && !str.startsWith(\"#\") && !str.startsWith(\"-0x\") && !str.startsWith(\"-0X\") && !str.startsWith(\"-#\") && !str.startsWith(\"0\")) {\n           if(str.endsWith(\"L\") || str.endsWith(\"l\")) { // Should not happen if called with numeric part\n               return Long.parseLong(str.substring(0, str.length()-1));\n           }\n           return Long.parseLong(str);\n        }\n        return Long.decode(str);\n    }\n     private static BigInteger createBigInteger(String str) throws NumberFormatException {\n         if (str == null) throw new NumberFormatException(\"Null string\");\n         int index = 0;\n         int sign = 1;\n         int radix = 10;\n         if (str.startsWith(\"-\")) {\n             sign = -1;\n             index++;\n         }\n         if (str.startsWith(\"0x\", index) || str.startsWith(\"0X\", index)) {\n             radix = 16;\n             index += 2;\n         } else if (str.startsWith(\"#\", index)) {\n             radix = 16;\n             index++;\n         } else if (str.startsWith(\"0\", index) && str.length() > index + 1) {\n              // Check for actual octal digits? Let BigInteger handle if radix is not 16.\n              // If it's just a leading 0 for decimal, BigInteger(str, 10) works.\n              // If it's octal, BigInteger(str, 8) is needed.\n              // The decode methods handle this detection. BigInteger constructor doesn't directly.\n              // Reverting to simpler logic for dummy: assume base 10 unless hex prefix found.\n             try {\n                 // Quick check for octal - only 0-7 allowed after '0'\n                  if (str.charAt(index) == '0') {\n                     radix = 8; // Tentatively octal\n                     index++;\n                     for(int i=index; i < str.length(); i++) {\n                          if(str.charAt(i) < '0' || str.charAt(i) > '7') {\n                             radix = 10; // Not octal, treat as decimal\n                             index = (sign == -1) ? 1 : 0; // Reset index\n                             break;\n                          }\n                     }\n                      if (radix == 8 && index == str.length()) { // String was like \"0\" or \"-0\"\n                          radix = 10;\n                          index = (sign == -1) ? 1 : 0;\n                      } else if(radix == 8 && index > str.length()) { // Should not happen\n                           radix = 10;\n                           index = (sign == -1) ? 1 : 0;\n                      }\n                  } else { // Starts with sign or digit 1-9\n                      radix = 10;\n                      index = (sign == -1) ? 1 : 0; // Reset index\n                  }\n\n             } catch(Exception e) {\n                 // Fallback to decimal if checks fail\n                  radix = 10;\n                  index = (sign == -1) ? 1 : 0;\n             }\n         } else { // Single digit 0 or doesn't start with 0\n              radix = 10;\n              index = (sign == -1) ? 1 : 0;\n         }\n\n         String numPart = str.substring(index);\n         if (numPart.isEmpty()) {\n             // Handle case like \"#\" or \"-#\"\n             if (str.equals(\"#\") || str.equals(\"-#\"))\n                  throw new NumberFormatException(\"Cannot parse \\\"\"+ str +\"\\\"\");\n             // Handle case like \"0x\" or \"-0x\"\n             if ( (str.equals(\"0x\") || str.equals(\"0X\") || str.equals(\"-0x\") || str.equals(\"-0X\")) && radix == 16)\n                  throw new NumberFormatException(\"Cannot parse \\\"\"+ str +\"\\\"\");\n         }\n\n         BigInteger val;\n         try {\n             if (radix == 8 || radix == 16) {\n                val = new BigInteger(numPart, radix);\n             } else {\n                // Use constructor for base 10, handles sign correctly via string format.\n                val = new BigInteger(str);\n                return val; // Return early as sign is handled by constructor\n             }\n         } catch(NumberFormatException e) {\n             // Rethrow or wrap? Let's rethrow with original string for context.\n             throw new NumberFormatException(\"For input string: \\\"\" + str + \"\\\"\");\n         }\n\n         if (sign == -1) {\n             val = val.negate();\n         }\n         return val;\n     }\n\n    private static BigDecimal createBigDecimal(String str) throws NumberFormatException { return new BigDecimal(str); }\n    private static boolean isAllZeros(String str) {\n        if (str == null) return true;\n        for (char c : str.toCharArray()) {\n            if (c != '0') return false;\n        }\n        return !str.isEmpty(); // Treat \"\" as not all zeros? Or true? Let's assume original meant !isEmpty.\n    }\n     private static boolean isDigits(final String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Assume StringUtils is imported and available\n    private static class StringUtils {\n         public static boolean isBlank(final CharSequence cs) {\n            int strLen;\n            if (cs == null || (strLen = cs.length()) == 0) {\n                return true;\n            }\n            for (int i = 0; i < strLen; i++) {\n                if (!Character.isWhitespace(cs.charAt(i))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}