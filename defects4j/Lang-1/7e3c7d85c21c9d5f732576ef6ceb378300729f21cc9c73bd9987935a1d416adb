{
    "generation": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    // Need to deal with all possible hex prefixes here\n    final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n    int pfxLen = 0;\n    for (final String pfx : hex_prefixes) {\n        if (str.startsWith(pfx)) {\n            pfxLen = pfx.length();\n            break;\n        }\n    }\n    if (pfxLen > 0) { // we have a hex number\n        // Extract the hex digits after the prefix and remove any leading zeros\n        String hexPart = str.substring(pfxLen);\n        int i = 0;\n        while (i < hexPart.length() && hexPart.charAt(i) == '0') {\n            i++;\n        }\n        String trimmedHex = (i == hexPart.length()) ? \"0\" : hexPart.substring(i);\n        int significantDigits = trimmedHex.length();\n\n        // Now use the number of significant hex digits (ignoring leading zeros)\n        if (significantDigits > 16) {\n            return createBigInteger(str);\n        } else if (significantDigits == 16) {\n            // For 16 digits we need a borderline check for Long capacity.\n            boolean negative = str.charAt(0) == '-';\n            try {\n                BigInteger value = new BigInteger(trimmedHex, 16);\n                // For positive numbers, the maximum allowed is 0x7FFFFFFFFFFFFFFF;\n                // for negative numbers, 0x8000000000000000 is allowed (which maps to Integer.MIN_VALUE in two's complement)\n                BigInteger limit = new BigInteger(negative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\", 16);\n                if (value.compareTo(limit) > 0) {\n                    return createBigInteger(str);\n                } else {\n                    return createLong(str);\n                }\n            } catch (Exception e) {\n                return createLong(str);\n            }\n        } else if (significantDigits > 8) { // 9 to 15 significant digits: force a Long\n            return createLong(str);\n        } else if (significantDigits == 8) {\n            // For exactly 8 significant digits, check if the value exceeds Integer bounds.\n            boolean negative = str.charAt(0) == '-';\n            try {\n                long value = Long.parseLong(trimmedHex, 16);\n                if ((!negative && value > 0x7FFFFFFFL)\n                        || (negative && value > 0x80000000L)) {\n                    return createLong(str);\n                } else {\n                    return createInteger(str);\n                }\n            } catch (NumberFormatException nfe) {\n                return createLong(str);\n            }\n        } else { // fewer than 8 significant digits: safe as an Integer\n            return createInteger(str);\n        }\n    }\n\n    final char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    final int decPos = str.indexOf('.');\n    final int expPos = (str.indexOf('e') > -1) ? str.indexOf('e') : str.indexOf('E');\n\n    int numDecimals = 0; // Check required precision (LANG-693)\n    if (decPos > -1) { // there is a decimal point\n        if (expPos > -1) { // there is an exponent\n            if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n        numDecimals = dec.length(); // digits past the decimal point\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        // Requesting a specific type by type qualifier.\n        final String numeric = str.substring(0, str.length() - 1);\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' ? isDigits(numeric.substring(1)) : isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // Too big for a Long\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f':\n            case 'F':\n                try {\n                    final Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore\n                }\n                // FALL-THROUGH\n            case 'd':\n            case 'D':\n                try {\n                    final Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // ignore\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (final NumberFormatException e) { // NOPMD\n                    // ignore\n                }\n                // FALL-THROUGH\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    // If an exponent marker is present without a type qualifier, re-read the exponent\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n\n    if (dec == null && exp == null) { // no decimal point and no exponent -> integral value\n        try {\n            return createInteger(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore\n        }\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore\n        }\n        return createBigInteger(str);\n    }\n\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    try {\n        if (numDecimals <= 7) { // For 7 or fewer fraction digits, try a Float\n            final Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // ignore\n    }\n    try {\n        if (numDecimals <= 16) { // For between 8 and 16 fraction digits, try a Double\n            final Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        }\n    } catch (final NumberFormatException nfe) { // NOPMD\n        // ignore\n    }\n    return createBigDecimal(str);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}