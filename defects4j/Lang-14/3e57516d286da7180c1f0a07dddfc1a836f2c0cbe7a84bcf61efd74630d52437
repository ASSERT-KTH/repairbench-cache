{
    "generation": "    /**\n     * <p>Compares two CharSequences, returning {@code true} if they represent\n     * equal sequences of characters.</p>\n     *\n     * <p>{@code null}s are handled without exceptions. Two {@code null}\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * @see java.lang.CharSequence#equals(Object)\n     * @param cs1  the first CharSequence, may be {@code null}\n     * @param cs2  the second CharSequence, may be {@code null}\n     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}\n     * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n     */\n    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n        if (cs1 == cs2) { // Handles same object or both null\n            return true;\n        }\n        if (cs1 == null || cs2 == null) { // Handles one null, one non-null\n            return false;\n        }\n        // Both are non-null from here\n        if (cs1.length() != cs2.length()) { // Different lengths means not equal\n            return false;\n        }\n        // Optimization: If both are Strings, use the potentially faster String#equals(Object)\n        if (cs1 instanceof String && cs2 instanceof String) {\n            // String#equals(Object) is specified to compare characters\n            return cs1.equals(cs2);\n        }\n        // General case: Compare character by character for any CharSequence implementations\n        // CharSequence#equals(Object) is not specified to compare content, so we must do it manually.\n        final int length = cs1.length(); // Lengths are known to be equal here\n        for (int i = 0; i < length; i++) {\n            if (cs1.charAt(i) != cs2.charAt(i)) {\n                return false;\n            }\n        }\n        // If loop completes, all characters matched\n        return true;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}