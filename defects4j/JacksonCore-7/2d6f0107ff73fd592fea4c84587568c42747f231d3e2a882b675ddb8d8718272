{
    "generation": "    public int writeValue() {\n        // Most likely, object:\n        if (_type == TYPE_OBJECT) {\n            // In OBJECT context, can only write a value if a field name has just been written.\n            if (!_gotName) {\n                // If _gotName is false, it means a field name was expected but not provided.\n                // This indicates an invalid state for writing a value.\n                return STATUS_EXPECT_NAME;\n            }\n            // If _gotName is true, a name was just written, now we are writing its value.\n            _gotName = false; // Reset the flag, as the value for the current field has been processed.\n            ++_index; // Increment the count of entries (field-value pairs) in the object.\n            return STATUS_OK_AFTER_COLON; // A colon is needed before the value in an object.\n        }\n\n        // Ok, array?\n        if (_type == TYPE_ARRAY) {\n            int ix = _index; // Capture current index before incrementing.\n            ++_index; // Increment the count of elements in the array.\n            // For the first element (when ix was 0), no prefix. For subsequent elements, a comma is needed.\n            return (ix == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;\n        }\n        \n        // Nope, root context\n        // No commas within root context, but need space if multiple root values are allowed.\n        ++_index; // Increment the count of values at the root level.\n        // For the first root value (_index will be 1 after increment), no prefix.\n        // For subsequent root values, a space is typically used as a separator.\n        return (_index == 1) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}