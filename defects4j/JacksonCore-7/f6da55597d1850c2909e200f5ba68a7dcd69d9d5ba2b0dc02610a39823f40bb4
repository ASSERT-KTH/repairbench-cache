{
    "generation": "    public int writeValue() {\n        // Most likely, object:\n        if (_type == TYPE_OBJECT) {\n            // In an object context, a value can only be written if a field name\n            // has just been written (i.e., _gotName is true).\n            // If _gotName is false, it means we are currently expecting a field name, not a value.\n            if (!_gotName) {\n                // This state indicates an attempt to write a value without a preceding field name.\n                // The generator should report an error indicating that a field name is expected.\n                return STATUS_EXPECT_NAME;\n            }\n            // If we reach here, _gotName must be true, meaning a field name was just written.\n            // Now we are writing the value for that field.\n            \n            // After writing the value, we reset _gotName to false. This prepares the context\n            // for the next expected token, which will be either another field name (preceded by a comma)\n            // or the end of the object.\n            _gotName = false;\n            \n            // Increment the index for the field-value pair.\n            ++_index;\n            \n            // For the current value being written in an object, a colon should precede it.\n            // This status informs the generator to output a colon before writing the value.\n            return STATUS_OK_AFTER_COLON;\n        }\n\n        // Ok, array?\n        if (_type == TYPE_ARRAY) {\n            int ix = _index;\n            ++_index;\n            // In an array, the first value needs no prefix (ix < 0 initially, becomes 0 for first element).\n            // Subsequent values need a comma.\n            return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;\n        }\n        \n        // Nope, root context\n        // In the root context, the first value needs no prefix. Subsequent values need a space.\n        ++_index;\n        return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;\n    }",
    "exact_match": true,
    "ast_match": true,
    "compile": true,
    "test": true
}