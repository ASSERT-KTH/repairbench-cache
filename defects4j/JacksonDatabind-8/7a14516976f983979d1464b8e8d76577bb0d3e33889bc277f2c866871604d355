{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        boolean hadExplicit = (_explicitCreators & mask) != 0;\n        if (hadExplicit) {\n            if (!explicit) {\n                // already had explicit, new one isn't; ignore new one\n                return;\n            }\n            // both explicit: verify duplication\n        } else {\n            if (!explicit) {\n                // both implicit, nothing to check further\n                // We'll just override below\n            } else {\n                // new one explicit, prefer new\n                _explicitCreators |= mask;\n                _creators[typeIndex] = _fixAccess(newOne);\n                return;\n            }\n        }\n\n        // At this point: either replacing explicit with explicit, or implicit with explicit (already replaced above)\n        // Avoid duplicate exception if equal\n        if (oldOne.getClass() == newOne.getClass()) {\n            if (oldOne.getMember() != null && oldOne.getMember().equals(newOne.getMember())) {\n                // same underlying member, just ignore\n                return;\n            }\n            throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                        +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n        }\n    }\n\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}