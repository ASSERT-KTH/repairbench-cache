{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) { // existing is explicit\n            if (!explicit) {\n                return; // keep old explicit, ignore implicit new\n            }\n            // else: both explicit, verify...\n        } else {\n            if (!explicit) {\n                // both implicit: accept new & override old\n                _creators[typeIndex] = _fixAccess(newOne);\n                return;\n            }\n            // else: new explicit, override old implicit\n        }\n\n        // At this point: either both explicit, or new explicit overriding\n\n        // one more thing: ok to override in sub-class\n        if (oldOne.getClass() == newOne.getClass()) {\n            // If same raw class (constructors or methods), consider parameter classes\n            Class<?>[] oldParamTypes = oldOne.getParameterTypes();\n            Class<?>[] newParamTypes = newOne.getParameterTypes();\n            if (Arrays.equals(oldParamTypes, newParamTypes)) {\n                // [databind#667]: avoid one particular class of bogus problems\n                throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                        +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n            }\n            // else: different parameter types, may override\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}