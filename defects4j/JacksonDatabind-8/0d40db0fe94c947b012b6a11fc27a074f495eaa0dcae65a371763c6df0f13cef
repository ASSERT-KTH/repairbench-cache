{
    "generation": "    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n    {\n        final int mask = (1 << typeIndex);\n        _hasNonDefaultCreator = true;\n        AnnotatedWithParams oldOne = _creators[typeIndex];\n        // already had an explicitly marked one?\n        if (oldOne != null) {\n\n            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is\n                // but skip, if new one not annotated\n                if (!explicit) {\n                    return;\n                }\n                // both explicit: verify\n                // otherwise only verify if neither explicitly annotated.\n            }\n\n            // Check if one creator is from a subclass and handle accordingly\n            Class<?> oldDeclaring = ((java.lang.reflect.Member) oldOne.getAnnotated()).getDeclaringClass();\n            Class<?> newDeclaring = ((java.lang.reflect.Member) newOne.getAnnotated()).getDeclaringClass();\n\n            if (oldDeclaring.isAssignableFrom(newDeclaring)) {\n                // new is more specific (subclass), replace old\n            } else if (newDeclaring.isAssignableFrom(oldDeclaring)) {\n                // old is more specific, keep it\n                return;\n            } else if (oldDeclaring == newDeclaring) {\n                throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                        +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n            } else {\n                // unrelated classes, conflict\n                throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                        +\" creators: already had \"+oldOne+\" and encountered \"+newOne+\"; conflicting types\");\n            }\n        }\n        if (explicit) {\n            _explicitCreators |= mask;\n        }\n        _creators[typeIndex] = _fixAccess(newOne);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}