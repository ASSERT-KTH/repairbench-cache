{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    \n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) {\n            if (!explicit) {\n                return;\n            }\n        }\n        // Check if types have same root class and same number of parameters\n        Class<?> newType = newOne.getClass();\n        Class<?> oldType = oldOne.getClass();\n        if (newType.getTypeParameters().length == oldType.getTypeParameters().length &&\n            newType.getRawType().equals(oldType.getRawType()))\n        {\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex] \n                    + \" creators: already had \" + (oldOne.explicit ? \"explicitly \" : \"\") \n                    + \"marked \" + oldOne + \", encountered \" + newOne);\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}