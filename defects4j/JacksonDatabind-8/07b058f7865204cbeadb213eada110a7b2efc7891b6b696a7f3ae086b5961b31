{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is\n            // but skip, if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify\n        }\n        // one more thing: ok to override in sub-class\n        // Change: don't compare by class only, compare actual underlying method/constructor\n        if (oldOne.getMember() != null && newOne.getMember() != null) {\n            if (oldOne.getMember().equals(newOne.getMember())) {\n                // Same physical member (constructor or method), so just return, don't throw\n                return;\n            }\n        }\n        // [databind#667]: avoid one particular class of bogus problems\n        throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}