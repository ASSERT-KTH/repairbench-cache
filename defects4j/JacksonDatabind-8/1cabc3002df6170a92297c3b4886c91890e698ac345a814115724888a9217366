{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n        // Check if both old and new are of the same type (like StringBuilder)\n        if (oldOne.getClass() == newOne.getClass()) {\n            // If they're the same type, only proceed if the new one is explicitly marked\n            if (explicit) {\n                _explicitCreators |= mask;\n                _creators[typeIndex] = _fixAccess(newOne);\n            }\n            return;\n        }\n\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is\n            // but skip, if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify\n            // otherwise only verify if neither explicitly annotated.\n        }\n\n        // If we get here with same classes (like StringBuilder), it means they're duplicates\n        if (oldOne.getAnnotated().getRawType() == newOne.getAnnotated().getRawType()) {\n            return;\n        }\n\n        if (oldOne.getClass() == newOne.getClass()) {\n            // This was the problematic block - now moved up to handle same-class cases first\n        } else {\n            // For different classes, implement the logic for choosing between them\n            // Placeholder for the original comparison logic\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}