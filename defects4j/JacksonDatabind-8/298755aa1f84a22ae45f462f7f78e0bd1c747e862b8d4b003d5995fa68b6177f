{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        // skip if this is literally the same constructor/method again\n        if (oldOne.getClass() == newOne.getClass()\n            && oldOne.getMember().equals(newOne.getMember())) {\n            if (explicit) {\n                _explicitCreators |= mask;\n            }\n            return;\n        }\n        // already had an explicitly marked one?\n        if ((_explicitCreators & mask) != 0) {\n            // skip if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: fall through to conflict check\n        }\n        // one more thing: ok to override in sub-class\n        if (oldOne.getClass() == newOne.getClass()) {\n            // [databind#667]: avoid one particular class of bogus problems\n            return;\n        }\n        // otherwise wrapper types differ, fall through to override newOne\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}