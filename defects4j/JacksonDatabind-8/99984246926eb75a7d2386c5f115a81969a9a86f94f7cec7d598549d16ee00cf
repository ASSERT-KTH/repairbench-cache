{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        boolean oldExplicit = (_explicitCreators & mask) != 0;\n        // if we already have an explicit creator and the new one isn't explicit, skip it\n        if (oldExplicit && !explicit) {\n            return;\n        }\n        // if neither old nor new is explicit, choose the one with the more specific single-arg type\n        if (!oldExplicit && !explicit) {\n            int oldCount = oldOne.getParameterCount();\n            int newCount = newOne.getParameterCount();\n            if (oldCount == 1 && newCount == 1) {\n                Class<?> oldParam = oldOne.getRawParameterType(0);\n                Class<?> newParam = newOne.getRawParameterType(0);\n                if (oldParam != newParam) {\n                    if (oldParam.isAssignableFrom(newParam)) {\n                        // newParam is more specific: fall through to override\n                    } else if (newParam.isAssignableFrom(oldParam)) {\n                        // oldParam is more specific: keep old creator\n                        return;\n                    } else {\n                        // types unrelated: keep old creator\n                        return;\n                    }\n                } else {\n                    // exactly same parameter type: duplicate, skip new\n                    return;\n                }\n            } else {\n                // not a single-arg creator: skip new\n                return;\n            }\n        }\n        // if both are explicit, that's a real conflict\n        if (oldExplicit && explicit) {\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n        }\n        // otherwise (new explicit overriding old implicit), fall through\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}