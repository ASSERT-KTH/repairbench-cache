{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) {\n            // already had explicitly annotated, leave as-is\n            // but skip, if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify\n            // otherwise only verify if neither explicitly annotated.\n        }\n        // one more thing: ok to override in sub-class\n        if (oldOne.getClass() == newOne.getClass()) {\n            // same underlying element? just skip\n            if (oldOne.getAnnotated().equals(newOne.getAnnotated())) {\n                return;\n            }\n            // if single-arg creators, pick the more specific parameter type\n            if (oldOne.getParameterCount() == 1 && newOne.getParameterCount() == 1) {\n                Class<?> oldType = oldOne.getRawParameterType(0);\n                Class<?> newType = newOne.getRawParameterType(0);\n                if (oldType != newType) {\n                    if (oldType.isAssignableFrom(newType)) {\n                        // new is more specific -> override old\n                        // fall through to replace\n                    } else if (newType.isAssignableFrom(oldType)) {\n                        // old is more specific -> keep old\n                        return;\n                    }\n                }\n            }\n            // otherwise conflict\n            throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                    +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}