{
    "generation": "    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n    {\n        final int mask = (1 << typeIndex);\n        _hasNonDefaultCreator = true;\n        AnnotatedWithParams oldOne = _creators[typeIndex];\n\n        // already had an explicitly marked one?\n        if (oldOne != null) {\n            // [databind#1165]: If they refer to the exact same underlying Method/Constructor, it's not a conflict\n            // but rather a redundant registration or re-discovery.\n            if (oldOne.getMember().equals(newOne.getMember())) {\n                // If the 'new' instance is explicit and the 'old' one was not,\n                // update to be explicit and potentially update the stored creator instance\n                // (e.g., if new one has better access configuration).\n                if (explicit && ((_explicitCreators & mask) == 0)) {\n                    _explicitCreators |= mask;\n                    _creators[typeIndex] = _fixAccess(newOne);\n                }\n                return; // No conflict, handled.\n            }\n\n            // They are different creators; now apply conflict rules based on explicit marking\n            if ((_explicitCreators & mask) != 0) { // oldOne was explicitly annotated\n                if (!explicit) { // newOne is NOT explicit\n                    return; // Keep the old, explicit creator; ignore non-explicit new.\n                }\n                // Both old and new are explicit, AND they are different members. This is a conflict.\n                throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                        +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n            }\n            // oldOne was NOT explicitly annotated.\n            // If newOne is explicit, it replaces the non-explicit old one. This is not a conflict.\n            if (explicit) {\n                // Fall through to update the creator and explicit flag below.\n            } else {\n                // Neither old nor new are explicit, AND they are different members. This is a conflict.\n                throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                        +\" creators: already had \"+oldOne+\", encountered \"+newOne);\n            }\n        }\n\n        // If oldOne was null, or new one is explicit and replaces a non-explicit old one.\n        if (explicit) {\n            _explicitCreators |= mask;\n        }\n        _creators[typeIndex] = _fixAccess(newOne);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}