{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        // If we already had an explicit creator, ignore a non-explicit new one.\n        if ((_explicitCreators & mask) != 0) {\n            if (!explicit) {\n                return;\n            }\n        }\n        // If the underlying member is the same, no conflict: simply return.\n        if (oldOne.getMember() == newOne.getMember()) {\n            return;\n        }\n        // Compare the declaring classes so that a creator declared in a subclass can override one\n        // declared in a super-class.\n        Class<?> oldDeclaring = oldOne.getDeclaringClass();\n        Class<?> newDeclaring = newOne.getDeclaringClass();\n        if (oldDeclaring == newDeclaring) {\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n        }\n        if (oldDeclaring.isAssignableFrom(newDeclaring)) {\n            // newOne is declared in a subclass of oldOne's declaring class: allow override.\n            ; // fall through to replace oldOne with newOne\n        } else if (newDeclaring.isAssignableFrom(oldDeclaring)) {\n            // oldOne is more specific, so we keep it.\n            return;\n        } else {\n            // Ambiguous: neither declaring class is a subclass of the other.\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}