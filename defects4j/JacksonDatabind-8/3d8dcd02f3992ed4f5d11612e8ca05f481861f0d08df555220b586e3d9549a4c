{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n        // one more thing: ok to override in sub-class\n        if (oldOne.getClass() == newOne.getClass()) {\n            // [databind#667]: avoid one particular class of bogus problems\n            // If both are the same class and neither is explicit, prefer the new one\n            if (!explicit && ((_explicitCreators & mask) == 0)) {\n                // overwrite the old non-explicit one\n            } else {\n                throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                        +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n            }\n        } else {\n            if ((_explicitCreators & mask) != 0) {\n                if (!explicit) {\n                    return;\n                }\n                // both explicit: verify\n            }\n            // Check for more specific type (newOne) vs oldOne's type\n            // If newOne is subclass of oldOne's declaring class, prefer newOne\n            if (newOne.getDeclaringClass().isAssignableFrom(oldOne.getDeclaringClass())) {\n                // newOne is subclass, prefer it\n            } else if (oldOne.getDeclaringClass().isAssignableFrom(newOne.getDeclaringClass())) {\n                // oldOne is subclass, keep it\n                return;\n            }\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}