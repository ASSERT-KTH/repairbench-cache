{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        // already had explicitly marked one?\n        boolean hadExplicit = (_explicitCreators & mask) != 0;\n\n        if (hadExplicit) {\n            if (!explicit) { // new one not explicit, ignore\n                return;\n            }\n            // both explicit, check duplicates\n        } else {\n            if (!explicit) { \n                // both implicit: ok to override\n                ;\n            } else {\n                // new one explicit, prefer it\n            }\n        }\n\n        // Check for real duplication/override; allow only if different concrete class\n        if (oldOne.getClass() == newOne.getClass()) {\n            // Do not consider as conflict if constructors/factory methods are actually same \"method\"\n            if (oldOne.getMember().equals(newOne.getMember())) {\n                // same underlying method/ctor; ignore by default, leave old in place\n                return;\n            }\n            // else: conflict: two different candidates of the same class type\n            throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                    +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n        }\n        // else: allow override (subclass/superclass difference)\n    }\n\n    // if new one explicit, mark explicit\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}