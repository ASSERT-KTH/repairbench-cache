{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated creator\n            if (!explicit) {\n                return;\n            }\n        }\n        // Instead of comparing the wrapper types (with getClass()), compare the classes\n        // that actually declare the creator.\n        Class<?> oldDeclClass = oldOne.getDeclaringClass();\n        Class<?> newDeclClass = newOne.getDeclaringClass();\n        if (oldDeclClass == newDeclClass) {\n            // If both creators come from the same declaring class, that is a conflict.\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n        }\n        // If one declaring class is a subclass of the other, only accept the more specific one.\n        if (oldDeclClass.isAssignableFrom(newDeclClass)) {\n            // newOne is from a subclass of oldOne, so it overrides the old one.\n            // (Do nothing; fall through to override.)\n        } else if (newDeclClass.isAssignableFrom(oldDeclClass)) {\n            // The already collected creator is more specific; ignore newOne.\n            return;\n        } else {\n            // If the classes are not related by inheritance, that is an ambiguous/conflict situation.\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}