{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        boolean oldExplicit = (_explicitCreators & mask) != 0;\n        // If we already had an explicit creator, ignore a non-explicit new one:\n        if (oldExplicit && !explicit) {\n            return;\n        }\n        // If neither is explicit, try to disambiguate by parameter type specificity\n        if (!oldExplicit && !explicit) {\n            // only makes sense for single-arg creators\n            if (oldOne.getParameterCount() == 1 && newOne.getParameterCount() == 1) {\n                Class<?> oldType = oldOne.getRawParameterType(0);\n                Class<?> newType = newOne.getRawParameterType(0);\n                if (oldType != null && newType != null && oldType != newType) {\n                    if (oldType.isAssignableFrom(newType)) {\n                        // new is more specific -> accept newOne\n                    } else if (newType.isAssignableFrom(oldType)) {\n                        // old is more specific -> keep oldOne\n                        return;\n                    }\n                }\n            }\n            // if ambiguous, fall through to conflict below\n        }\n        // If new is explicit and old not, allow override:\n        else if (!oldExplicit && explicit) {\n            // accept newOne\n        }\n        // Otherwise (both explicit, or ambiguous), error out:\n        else {\n            throw new IllegalArgumentException(\"Conflicting \"\n                + TYPE_DESCS[typeIndex]\n                + \" creators: already had explicitly marked \"\n                + oldOne + \", encountered \" + newOne);\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}