{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    \n    // Check if there's already a creator for this type\n    if (oldOne != null) {\n        // If the existing creator is explicitly marked, and the new one isn't, skip\n        if ((_explicitCreators & mask) != 0 && !explicit) {\n            return;\n        }\n        \n        // If both are explicit or neither is explicit, check for conflicts\n        if ((explicit && (_explicitCreators & mask) != 0) || (!explicit && (_explicitCreators & mask) == 0)) {\n            // Check if the new creator is of the same class as the old one\n            if (oldOne.getClass() == newOne.getClass()) {\n                // If they are the same class, check if they are equal (e.g., same constructor)\n                if (oldOne.equals(newOne)) {\n                    // If they are equal, it's not a conflict, so we can replace the old one\n                    _creators[typeIndex] = _fixAccess(newOne);\n                    if (explicit) {\n                        _explicitCreators |= mask;\n                    }\n                    return;\n                } else {\n                    // If they are not equal, it's a conflict\n                    throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                            + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n                }\n            }\n        }\n    }\n    \n    // If no conflict or the new one is more specific, update the creator\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}