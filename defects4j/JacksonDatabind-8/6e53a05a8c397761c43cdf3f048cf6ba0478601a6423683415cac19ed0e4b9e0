{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated\n            if (!explicit) { // new one is not explicit, keep old\n                return;\n            }\n            // both explicit, may need to fail\n        } else { // old one not explicit\n            if (!explicit) { // neither explicit, prefer first one\n                return;\n            }\n            // new one explicit, override old one\n        }\n\n        // One more thing: ok to override based on class compatibility\n        // or fallback to specific rules, but in default case avoid throwing unnecessarily\n        if (oldOne.getClass() == newOne.getClass()) {\n            // [databind#667]: handle multiple creators of the same kind\n            // Instead of always failing with ambiguous match, let's prefer explicit marker\n            if (explicit) {\n                // override old with new explicit one\n            } else {\n                // both not explicit, or old explicit + new implicit handled earlier\n                // should not reach here, but just in case, prefer old\n                return;\n            }\n        } else {\n            // Different subclasses, not a conflict, prefer new explicit or override implicit\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}