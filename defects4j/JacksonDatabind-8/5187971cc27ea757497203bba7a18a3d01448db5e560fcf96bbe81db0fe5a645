{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n\n    if (oldOne != null) {\n        // If there is already an explicit creator, check if we have a real conflict\n        if ((_explicitCreators & mask) != 0) {\n            if (!explicit) {\n                // Already had explicit creator, ignore non-explicit one\n                return;\n            }\n            // both explicit: verify for genuine conflict (must be distinct methods/constructors)\n            if (oldOne.getClass() == newOne.getClass()\n                    && oldOne.getMember() == newOne.getMember()) {\n                // Same creator, ignore\n                return;\n            }\n            throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                    +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n        }\n        // If neither is explicit, or old is not explicit and new is explicit, we always override\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}