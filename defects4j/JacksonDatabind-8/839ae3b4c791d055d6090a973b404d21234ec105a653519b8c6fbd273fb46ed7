{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had an explicitly marked one?\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is\n            // but skip, if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify\n            // otherwise only verify if neither explicitly annotated.\n        }\n        // avoid duplicate for same underlying element (e.g. mix-in)\n        if (oldOne.getAnnotated() == newOne.getAnnotated()) {\n            return;\n        }\n        // handle overloaded non-explicit single-arg creators\n        // (for example StringBuilder(CharSequence) vs StringBuilder(String))\n        if (!explicit && (_explicitCreators & mask) == 0\n                && oldOne.getParameterCount() == 1\n                && newOne.getParameterCount() == 1) {\n            Class<?> oldType = oldOne.getRawParameterType(0);\n            Class<?> newType = newOne.getRawParameterType(0);\n            if (oldType != newType) {\n                if (oldType.isAssignableFrom(newType)) {\n                    // new is more specific: override old\n                    /* fall through to replacement */\n                } else if (newType.isAssignableFrom(oldType)) {\n                    // old is more specific: keep old\n                    return;\n                }\n            }\n        }\n        // one more thing: ok to override in sub-class\n        if (oldOne.getClass() == newOne.getClass()) {\n            // [databind#667]: avoid one particular class of bogus problems\n            throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                    +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}