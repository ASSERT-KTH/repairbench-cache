{
    "generation": "    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n    {\n        final int mask = (1 << typeIndex);\n        _hasNonDefaultCreator = true;\n        AnnotatedWithParams oldOne = _creators[typeIndex];\n        // already had an explicitly marked one?\n        if (oldOne != null) {\n\n            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is\n                // but skip, if new one not annotated\n                if (!explicit) {\n                    return;\n                }\n                // both explicit: verify only if they are of the same class\n                if (oldOne.getClass() == newOne.getClass()) {\n                    throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                            + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n                }\n                // otherwise, allow override if new type is more specific\n                return;\n            }\n\n            // one more thing: ok to override in sub-class\n            if (oldOne.getClass() != newOne.getClass() && !isMoreSpecific(newOne, oldOne)) {\n                throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                        + \" creators: already had \" + oldOne + \", encountered \" + newOne);\n            }\n        }\n        if (explicit) {\n            _explicitCreators |= mask;\n        }\n        _creators[typeIndex] = _fixAccess(newOne);\n    }\n\n    private boolean isMoreSpecific(AnnotatedWithParams newOne, AnnotatedWithParams oldOne) {\n        Class<?> newClass = newOne.getDeclaringClass();\n        Class<?> oldClass = oldOne.getDeclaringClass();\n        return oldClass.isAssignableFrom(newClass) && !newClass.equals(oldClass);\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}