{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        // If the two creators wrap the same underlying member, no need to change anything.\n        if (oldOne.getMember().equals(newOne.getMember())) {\n            return;\n        }\n        // If an explicit creator was already registered, ignore new non-explicit ones.\n        if ((_explicitCreators & mask) != 0) {\n            if (!explicit) {\n                return;\n            }\n        }\n        // Compare the classes in which the creators were declared.\n        Class<?> oldDecl = oldOne.getDeclaringClass();\n        Class<?> newDecl = newOne.getDeclaringClass();\n        // If they were declared in the same class, that\u2019s a real conflict.\n        if (oldDecl == newDecl) {\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n        }\n        // Otherwise, allow override if the new creator comes from a more specific subclass.\n        if (oldDecl.isAssignableFrom(newDecl)) {\n            // newOne comes from a more specific class; override the older one.\n        } else if (newDecl.isAssignableFrom(oldDecl)) {\n            // Otherwise, keep the older, more specific creator.\n            return;\n        } else {\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}