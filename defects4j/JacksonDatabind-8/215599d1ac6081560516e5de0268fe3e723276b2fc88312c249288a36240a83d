{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        boolean oldExplicit = (_explicitCreators & mask) != 0;\n        if (oldExplicit) {\n            // already had explicitly annotated, leave as-is\n            if (!explicit) {\n                return;\n            }\n            // both explicit: check for conflict\n        } else {\n            // old was implicit, if new is implicit, leave as-is\n            if (!explicit) {\n                return;\n            }\n            // new explicit should override old implicit\n        }\n\n        // one more thing: ok to override in sub-class\n        if (oldOne.getClass() == newOne.getClass()) {\n            // [databind#667]: avoid one particular class of bogus problems\n            // Avoid considering same class and same constructor as conflict\n            if (oldOne.getMember().equals(newOne.getMember())) {\n                // probably the same method or constructor, ignore\n                return;\n            }\n            // else, conflicting explicit creators -> error\n            throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                    +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}