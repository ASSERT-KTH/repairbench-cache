{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    // already had one?\n    if (oldOne != null) {\n        boolean oldExplicit = (_explicitCreators & mask) != 0;\n\n        if (oldExplicit) {\n            // already had explicitly annotated, leave as-is\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify conflict\n        } else {\n            // if new one not explicit, skip override, keep old one\n            if (!explicit) {\n                return;\n            }\n            // new is explicit, old is implicit: override\n        }\n\n        // check for real conflict when both creators are explicit\n        // (or upgrading implicit -> explicit)\n        if (oldOne.getClass() == newOne.getClass()) {\n            Class<?> oldRawType = oldOne.getRawParameterType(0);\n            Class<?> newRawType = newOne.getRawParameterType(0);\n            if (oldRawType != newRawType) {\n                // prefer more specific type\n                if (newRawType.isAssignableFrom(oldRawType)) {\n                    // old param type is subtype: keep old\n                    return;\n                } else if (oldRawType.isAssignableFrom(newRawType)) {\n                    // new param type is subtype: override old\n                } else {\n                    // unrelated types: conflict\n                    throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                            +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n                }\n            } else {\n                // same parameter type (usual case): prefer existing for implicit, or report conflict if both explicit\n                if (oldExplicit && explicit) {\n                    throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                            +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n                }\n            }\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}