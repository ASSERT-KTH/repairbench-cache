{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        if (!explicit) {\n            // If the new candidate is implicit, do not override an existing creator.\n            return;\n        } else {\n            // New creator is explicit.\n            if ((_explicitCreators & mask) != 0) {\n                // We already have an explicit creator.\n                // Check whether the two creators come from different declaring classes;\n                // if the new one comes from a more specific subclass, override.\n                Class<?> oldDecl = oldOne.getDeclaringClass();\n                Class<?> newDecl = newOne.getDeclaringClass();\n                if (oldDecl == newDecl) {\n                    // Both creators are declared on the same class.\n                    // In such a case we keep the original (avoiding a conflict).\n                    return;\n                } else if (oldDecl.isAssignableFrom(newDecl)) {\n                    // New creator comes from a subclass: use it.\n                    _creators[typeIndex] = _fixAccess(newOne);\n                } else if (newDecl.isAssignableFrom(oldDecl)) {\n                    // Existing creator is more specific; do nothing.\n                } else {\n                    // Neither is assignable from the other: genuine conflict.\n                    throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                            + \" creators: already had explicitly marked \" + oldOne\n                            + \", encountered \" + newOne);\n                }\n                return;\n            } else {\n                // Old creator was implicit but the new one is explicit: override it.\n                _creators[typeIndex] = _fixAccess(newOne);\n                _explicitCreators |= mask;\n                return;\n            }\n        }\n    }\n    // No prior creator: simply register the new one.\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}