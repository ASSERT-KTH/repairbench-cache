{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        // [databind#667] \u2013 if this is literally the same constructor/factory, just skip it\n        if (oldOne.getAnnotated().equals(newOne.getAnnotated())) {\n            // if the new one is explicit, carry over the flag and replace the wrapper\n            if (explicit) {\n                _explicitCreators |= mask;\n                _creators[typeIndex] = _fixAccess(newOne);\n            }\n            return;\n        }\n        // already had an explicitly marked one?\n        if ((_explicitCreators & mask) != 0) {\n            // if new one isn't explicit, keep the existing\n            if (!explicit) {\n                return;\n            }\n            // otherwise both explicit: conflict check below\n        }\n        // one more thing: ok to override in sub\u2010class\n        Class<?> oldDecl = oldOne.getDeclaringClass();\n        Class<?> newDecl = newOne.getDeclaringClass();\n        if (oldDecl != newDecl) {\n            if (oldDecl.isAssignableFrom(newDecl)) {\n                // newOne is in a subclass of oldOne's declaring class: allow override\n            } else if (newDecl.isAssignableFrom(oldDecl)) {\n                // newOne is in a superclass: keep old\n                return;\n            }\n        } else {\n            // same declaring class but different member: real conflict\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne\n                    + \", encountered \" + newOne);\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}