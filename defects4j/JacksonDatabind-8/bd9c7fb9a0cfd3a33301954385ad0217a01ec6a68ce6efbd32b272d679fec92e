{
    "generation": "@Override\nprotected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        // [databind#667]: may see the very same underlying constructor/method twice (e.g. via mix\u2010ins);\n        // if so, just merge explicitness and maybe replace the wrapper, but do NOT error\n        if (oldOne.getAnnotated() == newOne.getAnnotated()) {\n            if (explicit) {\n                _explicitCreators |= mask;\n                _creators[typeIndex] = _fixAccess(newOne);\n            }\n            return;\n        }\n        // already had an explicitly marked one? if so, and new is not explicit, skip\n        if (((_explicitCreators & mask) != 0) && !explicit) {\n            return;\n        }\n        // otherwise, if the two wrappers are of same kind, that's a genuine conflict\n        if (oldOne.getClass() == newOne.getClass()) {\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had\"\n                    + (((_explicitCreators & mask) != 0) ? \" explicitly marked \" : \" \")\n                    + oldOne + \", encountered \" + newOne);\n        }\n        // else: different kinds of creators (e.g. sub-class override), allow fall-through\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}