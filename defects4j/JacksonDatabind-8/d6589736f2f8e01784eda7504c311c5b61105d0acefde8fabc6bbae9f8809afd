{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        // If an explicit creator has already been registered,\n        // and the new one is not explicit, simply ignore it.\n        if (((_explicitCreators & mask) != 0)) {\n            if (!explicit) {\n                return;\n            }\n            // If both are explicit, check whether they actually represent the same member.\n            if (oldOne.getAnnotated() == newOne.getAnnotated()) {\n                return; // duplicate; no need to override\n            }\n        }\n        // Allow overriding only if the new creator is declared in a subclass.\n        Class<?> oldDeclaring = oldOne.getDeclaringClass();\n        Class<?> newDeclaring = newOne.getDeclaringClass();\n        if (oldDeclaring == newDeclaring) {\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne\n                    + \", encountered \" + newOne);\n        }\n        if (oldDeclaring.isAssignableFrom(newDeclaring)) {\n            // newOne is declared in a subclass; override the old creator.\n            // (fall through to replace oldOne)\n        } else if (newDeclaring.isAssignableFrom(oldDeclaring)) {\n            // oldOne is more specific; keep it (ignore newOne)\n            return;\n        } else {\n            // No clear inheritance relationship: this is ambiguous.\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne\n                    + \", encountered \" + newOne);\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}