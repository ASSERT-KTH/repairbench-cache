{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n{\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n\n    if (oldOne != null) {\n        if ((_explicitCreators & mask) != 0) {\n            // already had explicitly annotated, leave as-is\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify\n            // If equal, allow replacing (for cases like Java StringBuilder with multiple identical ctors)\n            if (oldOne.equals(newOne)) {\n                _creators[typeIndex] = _fixAccess(newOne);\n                return;\n            }\n            throw new IllegalArgumentException(\"Conflicting \"+TYPE_DESCS[typeIndex]\n                +\" creators: already had explicitly marked \"+oldOne+\", encountered \"+newOne);\n        }\n        // If not explicit before, but same as old, it's ok; just replace\n        if (oldOne.equals(newOne)) {\n            _creators[typeIndex] = _fixAccess(newOne);\n            return;\n        }\n        // else fall-through, replace as below\n    }\n\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}