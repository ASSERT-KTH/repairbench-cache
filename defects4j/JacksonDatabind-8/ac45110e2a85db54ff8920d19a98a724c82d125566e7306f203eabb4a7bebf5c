{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n\n    if (oldOne != null) {\n        // already had an explicitly marked one?\n        if ((_explicitCreators & mask) != 0) {\n            // already had explicitly annotated, leave as-is\n            // but skip, if new one not annotated\n            if (!explicit) {\n                return;\n            }\n            // both explicit: verify only if they are not of the same class\n            if (oldOne.getClass() != newOne.getClass()) {\n                throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                        + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n            }\n        } else {\n            // neither was explicit, or only new one is explicit: override\n            // but only if the new one is not a subclass of the old one\n            if (newOne.getClass().isAssignableFrom(oldOne.getClass())) {\n                return;\n            }\n            // otherwise, throw exception if they are not of the same class\n            if (oldOne.getClass() != newOne.getClass()) {\n                throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                        + \" creators: already had \" + oldOne + \", encountered \" + newOne);\n            }\n        }\n    }\n\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}