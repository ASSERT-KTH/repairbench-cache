{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        boolean oldExplicit = (_explicitCreators & mask) != 0;\n        // if we already had an explicit creator, ignore this one if it isn't explicit\n        if (oldExplicit && !explicit) {\n            return;\n        }\n        // if neither old nor new is explicit, try to resolve by parameter specificity\n        if (!oldExplicit && !explicit) {\n            if (oldOne.getParameterCount() == 1 && newOne.getParameterCount() == 1) {\n                Class<?> oldType = oldOne.getRawParameterType(0);\n                Class<?> newType = newOne.getRawParameterType(0);\n                if (oldType != null && newType != null) {\n                    // new is subtype of old -> override\n                    if (oldType.isAssignableFrom(newType) && !oldType.equals(newType)) {\n                        // ok, let new replace old\n                    }\n                    // new is supertype of old -> keep old\n                    else if (newType.isAssignableFrom(oldType) && !oldType.equals(newType)) {\n                        return;\n                    }\n                    // otherwise fall through to error\n                }\n            }\n        }\n        // conflict (either both explicit or no clear subtype relation)\n        throw new IllegalArgumentException(\"Conflicting \"\n                + TYPE_DESCS[typeIndex]\n                + \" creators: already had \" + oldOne\n                + \", encountered \" + newOne);\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}