{
    "generation": "protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {\n    final int mask = (1 << typeIndex);\n    _hasNonDefaultCreator = true;\n    AnnotatedWithParams oldOne = _creators[typeIndex];\n    if (oldOne != null) {\n        // If the same underlying member is being registered twice, simply ignore it.\n        if (oldOne.getAnnotated() == newOne.getAnnotated()) {\n            return;\n        }\n        // If an explicit creator is already registered, then a non-explicit one loses.\n        if (((_explicitCreators & mask) != 0) && !explicit) {\n            return;\n        }\n        // Otherwise, we have two different creators for the same type.\n        // We allow override only when the new creator comes from a more specific (sub-)class.\n        Class<?> oldDecl = oldOne.getDeclaringClass();\n        Class<?> newDecl = newOne.getDeclaringClass();\n        if (oldDecl.equals(newDecl)) {\n            // They come from the same class (and are not the same member), a conflict!\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n        } else if (oldDecl.isAssignableFrom(newDecl)) {\n            // newOne is declared in a subclass; it wins. (Fall through to override.)\n        } else if (newDecl.isAssignableFrom(oldDecl)) {\n            // oldOne is more specific; ignore newOne.\n            return;\n        } else {\n            throw new IllegalArgumentException(\"Conflicting \" + TYPE_DESCS[typeIndex]\n                    + \" creators: already had explicitly marked \" + oldOne + \", encountered \" + newOne);\n        }\n    }\n    if (explicit) {\n        _explicitCreators |= mask;\n    }\n    _creators[typeIndex] = _fixAccess(newOne);\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}