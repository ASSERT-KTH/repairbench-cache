{
    "generation": "  /**\n   * Computes the follow() node of a given node and its parent. There is a side\n   * effect when calling this function. If this function computed an edge that\n   * exits a FINALLY, it'll attempt to connect the fromNode to the outer\n   * FINALLY according to the finallyMap.\n   *\n   * @param fromNode The original source node since {@code node} is changed\n   *        during recursion.\n   * @param node The node that follow() should compute.\n   */\n  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case (fall-through), without having to go to the case condition.\n        Node nextCase = parent.getNext();\n        // Skip empty cases if any (though not syntactically valid usually)\n        while (nextCase != null && nextCase.isEmpty()) {\n            nextCase = nextCase.getNext();\n        }\n\n        if (nextCase != null) {\n          if (nextCase.isCase()) {\n            // Fall through to the next case's body (statement after condition).\n            return computeFallThrough(nextCase.getFirstChild().getNext());\n          } else if (nextCase.isDefaultCase()) {\n            // Fall through to the default case's body.\n            return computeFallThrough(nextCase.getFirstChild());\n          }\n          // If nextSibling is not CASE or DEFAULT_CASE, it means we are leaving\n          // the block of cases. Fall through the switch.\n        }\n        // If nextCase is null or not a case/default, control flows out of the switch.\n        // The follow is the follow of the parent SWITCH node.\n        return computeFollowNode(fromNode, parent.getParent(), cfa);\n\n      case Token.FOR:\n        // After the body of a FOR loop, control goes to the increment\n        // expression (if it exists), then the condition. If no increment,\n        // it goes straight to the condition. For FOR-IN, it's simpler.\n        if (NodeUtil.isForIn(parent)) {\n          // For-in body is followed by the loop condition check (the loop node itself).\n          return parent;\n        } else {\n          // Standard FOR(init; cond; inc) body;\n          // 'node' is the body block. Follow node is the increment expression.\n          Node increment = parent.getFirstChild().getNext().getNext();\n          if (increment != null && !increment.isEmpty()) {\n              // If increment exists, fall through to it.\n              return computeFallThrough(increment);\n          } else {\n              // No increment, follow is the condition check.\n              Node condition = parent.getFirstChild().getNext();\n              // If condition is empty, we follow the loop node itself?\n              // Or should computeFallThrough handle empty condition?\n              // Let's assume computeFallThrough handles it or condition isn't empty.\n              return computeFallThrough(condition); // Fall through to condition check\n          }\n        }\n\n      case Token.WHILE:\n        // After the body of a WHILE loop, control returns to the condition.\n        return parent; // The WHILE node itself represents the condition check.\n      case Token.DO:\n        // After the body of a DO-WHILE loop, control goes to the condition check.\n        return parent.getLastChild(); // The condition node is the last child.\n\n      case Token.TRY:\n        Node tryBlock = parent.getFirstChild();\n        // Use NodeUtil to find catch and finally blocks reliably.\n        Node catchBlock = NodeUtil.getCatchBlock(parent);\n        Node finallyBlock = NodeUtil.getFinallyBlock(parent);\n\n        // If we are coming out of the TRY block (node is the try block)...\n        if (tryBlock == node) {\n          if (finallyBlock != null) { // and have FINALLY block.\n            // Normal completion of TRY goes to FINALLY.\n            return computeFallThrough(finallyBlock);\n          } else { // and have no FINALLY.\n            // Normal completion of TRY flows out of the entire TRY statement.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the CATCH block (node is the catch block)...\n        } else if (catchBlock != null && catchBlock == node){\n          if (finallyBlock != null) { // and have FINALLY block.\n             // Normal completion of CATCH goes to FINALLY.\n             return computeFallThrough(finallyBlock);\n          } else { // and have no FINALLY.\n             // Normal completion of CATCH flows out of the entire TRY statement.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the FINALLY block (node is the finally block)...\n        } else if (finallyBlock != null && finallyBlock == node){\n          // After the FINALLY block executes (normally), control flow resumes\n          // wherever it would have gone *after* the entire TRY statement.\n          // The handling of pending jumps (return/break/throw from try/catch)\n          // is managed by the ControlFlowAnalysis edge creation logic (using finallyMap),\n          // not directly here. This function computes the normal fall-through successor node.\n          // The incorrect loop that created edges based on finallyMap was removed.\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        // If node is none of the above (e.g., the CATCH variable name node,\n        // or an intermediate node within the blocks), let the general sibling logic handle it.\n        break; // Fall through switch to general logic.\n    }\n\n    // General case: If node is not the last statement in a block,\n    // fallthrough should go to the next sibling.\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations as control doesn't fall into them.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      // Compute the node(s) that control flows to from the next sibling.\n      // This might be the sibling itself or the first executable node within it.\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      // We need to find the follow of the parent node. This recursive call\n      // handles block structures, loops, etc., by eventually hitting one\n      // of the cases in the switch or the base cases at the top.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}