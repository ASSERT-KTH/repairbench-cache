{
    "generation": "  /**\n   * Computes the follow() node of a given node and its parent. There is a side\n   * effect when calling this function. If this function computed an edge that\n   * exists a FINALLY, it'll attempt to connect the fromNode to the outer\n   * FINALLY according to the finallyMap.\n   *\n   * @param fromNode The original source node since {@code node} is changed\n   *        during recursion.\n   * @param node The node that follow() should compute.\n   */\n  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    //\n    // FIRST:  if this node aborts/changes control flow (return/throw/break/continue),\n    //         we must first wire it into any active finally blocks.\n    //\n    if (cfa != null) {\n      int t = node.getType();\n      if (t == Token.RETURN\n          || t == Token.THROW\n          || t == Token.BREAK\n          || t == Token.CONTINUE) {\n        // find the nearest enclosing TRY-with-FINALLY\n        Node ancestor = node.getParent();\n        while (ancestor != null) {\n          if (ancestor.getType() == Token.TRY && NodeUtil.hasFinally(ancestor)) {\n            Node finallyBlock = ancestor.getLastChild();\n            // throws go in the ON_EX channel, everything else is UNCOND\n            Branch br = (t == Token.THROW) ? Branch.ON_EX : Branch.UNCOND;\n            cfa.createEdge(fromNode, br, finallyBlock);\n            break;\n          }\n          ancestor = ancestor.getParent();\n        }\n      }\n    }\n\n    //\n    // SECOND:  the early exits: if we've hit the end of the script,\n    //          a function boundary, or a return itself, we stop.\n    //\n    Node parent = node.getParent();\n    if (parent == null\n        || parent.isFunction()\n        || node.isReturn()\n        || (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    //\n    // THIRD:  special AST cases (if, loops, switch, try/catch/finally)\n    //\n    switch (parent.getType()) {\n      case Token.IF:\n        // both then- and else-branches rejoin at the same follow\n        return computeFollowNode(fromNode, parent, cfa);\n\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // after one case, fall into the next case's body\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Unreachable switch case\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        break;\n\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          // for-in loops re-test the same node\n          return parent;\n        } else {\n          // for(init; cond; inc)  -> start at the increment\n          return parent.getFirstChild().getNext().getNext();\n        }\n\n      case Token.WHILE:\n      case Token.DO:\n        // loops go back to the condition\n        return parent;\n\n      case Token.TRY:\n        // three sub\u2010cases: exiting try\u2010block, exiting catch, exiting finally\n        // 1) out of the \"try { \u2026 }\"\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) {\n            // go into the finally block\n            return computeFallThrough(parent.getLastChild());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n\n        // 2) out of the \"catch (...) { \u2026 }\"\n        } else if (NodeUtil.getCatchBlock(parent) == node) {\n          if (NodeUtil.hasFinally(parent)) {\n            // catch falls into finally\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n\n        // 3) out of the \"finally { \u2026 }\"\n        } else if (parent.getLastChild() == node) {\n          // chain on any outer finally blocks\n          if (cfa != null) {\n            for (Node fn : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, fn);\n            }\n          }\n          // and then resume after the try\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        break;\n    }\n\n    //\n    // FOURTH:  default: fall to the next sibling (skipping function decls)\n    //\n    Node next = node.getNext();\n    while (next != null && next.isFunction()) {\n      next = next.getNext();\n    }\n    if (next != null) {\n      return computeFallThrough(next);\n    }\n\n    //\n    // FIFTH:  no more siblings: bubble up the tree\n    //\n    return computeFollowNode(fromNode, parent, cfa);\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}