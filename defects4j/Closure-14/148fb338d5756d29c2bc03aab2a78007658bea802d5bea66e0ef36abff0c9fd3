{
    "generation": "private static Node computeFollowNode(\n    Node fromNode, Node node, ControlFlowAnalysis cfa) {\n  Node parent = node.getParent();\n  if (parent == null || parent.isFunction() ||\n      (cfa != null && node == cfa.root)) {\n    return null;\n  }\n\n  // Special cases: IF, CASE, FOR, WHILE, DO\n  switch (parent.getType()) {\n    case Token.IF:\n      return computeFollowNode(fromNode, parent, cfa);\n    case Token.CASE:\n    case Token.DEFAULT_CASE:\n      if (parent.getNext() != null) {\n        if (parent.getNext().isCase()) {\n          return parent.getNext().getFirstChild().getNext();\n        } else if (parent.getNext().isDefaultCase()) {\n          return parent.getNext().getFirstChild();\n        } else {\n          Preconditions.checkState(false, \"Not reachable\");\n        }\n      } else {\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n      break;\n    case Token.FOR:\n      if (NodeUtil.isForIn(parent)) {\n        return parent;\n      } else {\n        // for(init; cond; incr) \u21d2 after \"cond\"\n        return parent.getFirstChild().getNext().getNext();\n      }\n    case Token.WHILE:\n    case Token.DO:\n      return parent;\n    case Token.TRY:\n      // Leaving the TRY block\n      if (parent.getFirstChild() == node) {\n        if (NodeUtil.hasFinally(parent)) {\n          return computeFallThrough(parent.getLastChild());\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      }\n      // Leaving the CATCH block\n      else if (NodeUtil.getCatchBlock(parent) == node) {\n        if (NodeUtil.hasFinally(parent)) {\n          return computeFallThrough(node.getNext());\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      }\n      // Leaving the FINALLY block: unwind into outer FINALLYs\n      else if (parent.getLastChild() == node) {\n        if (cfa != null) {\n          for (Node finallyNode : cfa.finallyMap.get(parent)) {\n            // map abnormal exits (throw/break/return) into any outer finally\n            cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);\n          }\n        }\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n  }\n\n  // Default case: fall through to next sibling (skipping function decls)\n  Node next = node.getNext();\n  while (next != null && next.isFunction()) {\n    next = next.getNext();\n  }\n  if (next != null) {\n    return computeFallThrough(next);\n  } else {\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}