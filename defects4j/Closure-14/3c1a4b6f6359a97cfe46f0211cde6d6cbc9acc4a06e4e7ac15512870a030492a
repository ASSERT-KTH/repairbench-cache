{
    "generation": "/**\n * Computes the follow() node of a given node and its parent. There is a side\n * effect when calling this function. If this function computed an edge that\n * exists a FINALLY, it'll attempt to connect the fromNode to the outer\n * FINALLY according to the finallyMap.\n *\n * @param fromNode The original source node since {@code node} is changed\n *        during recursion.\n * @param node The node that follow() should compute.\n */\nprivate static Node computeFollowNode(\n    Node fromNode, Node node, ControlFlowAnalysis cfa) {\n  Node parent = node.getParent();\n  if (parent == null || parent.isFunction() ||\n      (cfa != null && node == cfa.root)) {\n    return null;\n  }\n\n  switch (parent.getType()) {\n    case Token.IF:\n      // The follow() of any of the paths from IF is what follows the IF.\n      return computeFollowNode(fromNode, parent, cfa);\n\n    case Token.CASE:\n    case Token.DEFAULT_CASE:\n      // After the body of a CASE, control goes to the next case's body\n      if (parent.getNext() != null) {\n        if (parent.getNext().isCase()) {\n          return parent.getNext().getFirstChild().getNext();\n        } else if (parent.getNext().isDefaultCase()) {\n          return parent.getNext().getFirstChild();\n        } else {\n          Preconditions.checkState(false, \"Not reachable\");\n        }\n      }\n      return computeFollowNode(fromNode, parent, cfa);\n\n    case Token.FOR:\n      // for-in loops go back to the FOR node, normal FOR loops to the update\n      if (NodeUtil.isForIn(parent)) {\n        return parent;\n      } else {\n        return parent.getFirstChild().getNext().getNext();\n      }\n\n    case Token.WHILE:\n    case Token.DO:\n      // loops go back to the loop node\n      return parent;\n\n    case Token.TRY:\n      // coming out of the TRY block\n      if (parent.getFirstChild() == node) {\n        if (NodeUtil.hasFinally(parent)) {\n          return computeFallThrough(parent.getLastChild());\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      }\n      // coming out of the CATCH block\n      if (NodeUtil.getCatchBlock(parent) == node) {\n        if (NodeUtil.hasFinally(parent)) {\n          return computeFallThrough(node.getNext());\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      }\n      // coming out of the FINALLY block\n      if (parent.getLastChild() == node) {\n        if (cfa != null) {\n          for (Node finallyNode : cfa.finallyMap.get(parent)) {\n            // run any outer FINALLY blocks on both normal and exceptional exits\n            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);\n          }\n        }\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n      break;\n  }\n\n  // default: fall into the next sibling, skipping functions\n  Node nextSibling = node.getNext();\n  while (nextSibling != null && nextSibling.isFunction()) {\n    nextSibling = nextSibling.getNext();\n  }\n  if (nextSibling != null) {\n    return computeFallThrough(nextSibling);\n  } else {\n    // no more siblings: transfer control up the AST\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}