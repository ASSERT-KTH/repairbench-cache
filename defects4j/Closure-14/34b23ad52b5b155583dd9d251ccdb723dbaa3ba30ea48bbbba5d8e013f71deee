{
    "generation": "private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n  // If the node has no parent, is inside a function, or we\u2019ve reached the root,\n  // there is no follow node.\n  Node parent = node.getParent();\n  if (parent == null || parent.isFunction() ||\n      (cfa != null && node == cfa.root)) {\n    return null;\n  }\n\n  switch (parent.getType()) {\n    case Token.IF:\n      return computeFollowNode(fromNode, parent, cfa);\n\n    case Token.CASE:\n    case Token.DEFAULT_CASE:\n      // After a CASE (or DEFAULT) block, control goes to the next CASE block's body.\n      if (parent.getNext() != null) {\n        if (parent.getNext().isCase()) {\n          return parent.getNext().getFirstChild().getNext();\n        } else if (parent.getNext().isDefaultCase()) {\n          return parent.getNext().getFirstChild();\n        } else {\n          Preconditions.checkState(false, \"Not reachable\");\n        }\n      } else {\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n      \n    case Token.FOR:\n      if (NodeUtil.isForIn(parent)) {\n        return parent;\n      } else {\n        // For standard FOR loops, control flows to the condition after initializer.\n        return parent.getFirstChild().getNext().getNext();\n      }\n      \n    case Token.WHILE:\n    case Token.DO:\n      return parent;\n      \n    case Token.TRY:\n      // If coming out of the TRY block.\n      if (parent.getFirstChild() == node) {\n        if (NodeUtil.hasFinally(parent)) { // There is a FINALLY block.\n          return computeFallThrough(parent.getLastChild());\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      // If coming out of the CATCH block.\n      } else if (NodeUtil.getCatchBlock(parent) == node) {\n        if (NodeUtil.hasFinally(parent)) { // There is a FINALLY block.\n          return computeFallThrough(node.getNext());\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      // If coming out of the FINALLY block.\n      } else if (parent.getLastChild() == node) {\n        if (cfa != null) {\n          // When leaving a FINALLY, create cross edges to the outer FINALLY blocks.\n          // Use the branch type ON_EX if the original fromNode is a THROW or an IF,\n          // otherwise use UNCOND.\n          Branch branchType = Branch.UNCOND;\n          int fromType = fromNode.getType();\n          if (fromType == Token.THROW || fromType == Token.IF) {\n            branchType = Branch.ON_EX;\n          }\n          for (Node finallyNode : cfa.finallyMap.get(parent)) {\n            cfa.createEdge(fromNode, branchType, finallyNode);\n          }\n        }\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n      break;\n  }\n\n  // For non-special cases follow is the immediate sibling (skipping functions).\n  Node nextSibling = node.getNext();\n  while (nextSibling != null && nextSibling.isFunction()) {\n    nextSibling = nextSibling.getNext();\n  }\n  if (nextSibling != null) {\n    return computeFallThrough(nextSibling);\n  } else {\n    // If there are no more siblings, transfer control upward.\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}