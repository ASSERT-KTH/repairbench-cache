{
    "generation": "  /**\n   * Computes the follow() node of a given node and its parent. There is a side\n   * effect when calling this function. If this function computed an edge that\n   * exists a FINALLY, it'll attempt to connect the fromNode to the outer\n   * FINALLY according to the finallyMap.\n   *\n   * @param fromNode The original source node since {@code node} is changed\n   *        during recursion.\n   * @param node The node that follow() should compute.\n   */\n  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    Node parent = node.getParent();\n    // Base cases: end of script, function boundary, or the root of our traversal.\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // Handle special parents first.\n    switch (parent.getType()) {\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After one case, fall into the next case's statements.\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Unreachable\");\n          }\n        }\n        return computeFollowNode(fromNode, parent, cfa);\n\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          // for(init; cond; incr) body \u2192 incr\n          return parent.getFirstChild().getNext().getNext();\n        }\n\n      case Token.WHILE:\n      case Token.DO:\n        // while/ do \u2192 loop back to test\n        return parent;\n\n      case Token.TRY:\n        // We're exiting the TRY block (normal fall\u2010through).\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) {\n            // Even on a normal exit we must thread through all enclosing finallys.\n            // First recurse into the FINALLY so that its \"exit\" can wire up\n            // to outer finallys.\n            computeFollowNode(fromNode, parent.getLastChild(), cfa);\n            // Then enter this finally.\n            return computeFallThrough(parent.getLastChild());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n\n        // We're exiting the CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node) {\n          if (NodeUtil.hasFinally(parent)) {\n            computeFollowNode(fromNode, node.getNext(), cfa);\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n\n        // We're exiting the FINALLY block itself.\n        } else if (parent.getLastChild() == node) {\n          if (cfa != null) {\n            // Wire up all the outer finallys.\n            for (Node fn : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, fn);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        break;\n    }\n\n    // Default: fall through to the next sibling.\n    Node next = node.getNext();\n    // Skip function declarations; control never flows into them.\n    while (next != null && next.isFunction()) {\n      next = next.getNext();\n    }\n    if (next != null) {\n      return computeFallThrough(next);\n    } else {\n      // No more siblings \u2192 bubble up.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}