{
    "generation": "  /**\n   * Computes the follow() node of a given node and its parent. There is a side\n   * effect when calling this function. If this function computed an edge that\n   * exists a FINALLY, it'll attempt to connect the fromNode to the outer\n   * FINALLY according to the finallyMap.\n   *\n   * @param fromNode The original source node since {@code node} is changed\n   *        during recursion.\n   * @param node The node that follow() should compute.\n   */\n  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    Node parent = node.getParent();\n\n    // The original source node `fromNode` is used to detect if it's a special\n    // control flow node (return, break, continue) that needs to route through\n    // a finally block before reaching its ultimate destination.\n    // This condition needs to be checked early in the recursion.\n    // If 'node' is a descendant of a 'TRY' node (i.e., 'parent' is the 'TRY' node),\n    // and 'fromNode' is a special exit, we must go to the finally block.\n    if (parent != null && parent.isTry()) {\n      if (NodeUtil.hasFinally(parent) &&\n          (NodeUtil.isContinue(fromNode) || NodeUtil.isBreak(fromNode) || NodeUtil.isReturn(fromNode))) {\n          // If fromNode initiated a jump, and it is within a try block with a finally,\n          // then the next node in the control flow for fromNode is the finally block.\n          return computeFallThrough(parent.getLastChild());\n      }\n    }\n\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        break;\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) { // 'node' is the TRY block itself (the first child of the TRY node)\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild()); // Go to the FINALLY block\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfa); // Go to what follows the TRY statement\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node){ // 'node' is the CATCH block\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(node.getNext()); // Go to the FINALLY block (next sibling of CATCH)\n          } else {\n            return computeFollowNode(fromNode, parent, cfa); // Go to what follows the TRY statement\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() == node){ // 'node' is the FINALLY block itself\n          // The finallyMap contains the true destination after the finally block\n          // for control flow that was trapped by this finally block (e.g., fromNode).\n          // These edges are typically added by ControlFlowAnalysis.traverseFinallyBlocks.\n          // This part ensures that if fromNode is the original jumping node,\n          // it connects to its final destination *after* the finally block.\n          if (cfa != null) {\n            // Corrected: finallyMap.get(node) where node is the FINALLY block.\n            for (Node finallyNode : cfa.finallyMap.get(node)) {\n              // 'fromNode' is the original source node (e.g., a RETURN/BREAK).\n              // If 'fromNode' is the FINALLY block itself (normal fall-through),\n              // this connects the FINALLY block to its successor.\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          // After handling specific exits via finallyMap, the follow of the FINALLY block\n          // is what follows the TRY statement.\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        break;\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}