{
    "generation": "private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n  Node parent = node.getParent();\n  if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) {\n    return null;\n  }\n\n  switch (parent.getType()) {\n    case Token.IF:\n      return computeFollowNode(fromNode, parent, cfa);\n    case Token.CASE:\n    case Token.DEFAULT_CASE:\n      if (parent.getNext() != null) {\n        if (parent.getNext().isCase()) {\n          return parent.getNext().getFirstChild().getNext();\n        } else if (parent.getNext().isDefaultCase()) {\n          return parent.getNext().getFirstChild();\n        } else {\n          Preconditions.checkState(false, \"Not reachable\");\n        }\n      } else {\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n    case Token.FOR:\n      if (NodeUtil.isForIn(parent)) {\n        return parent;\n      } else {\n        return parent.getFirstChild().getNext().getNext();\n      }\n    case Token.WHILE:\n    case Token.DO:\n      return parent;\n    case Token.TRY:\n      // When leaving a TRY, if a FINALLY exists, control must flow to the FINALLY block.\n      // We add cross edges from the original (abrupt) node to the FINALLY targets.\n      if (parent.getFirstChild() == node) {\n        // Exiting the try block normally.\n        if (NodeUtil.hasFinally(parent)) {\n          if (cfa != null) {\n            int branchType = (fromNode.getType() == Token.THROW || fromNode.getType() == Token.IF)\n                ? Branch.ON_EX : Branch.UNCOND;\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, branchType, finallyNode);\n            }\n          }\n          return computeFallThrough(parent.getLastChild());\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      } else if (NodeUtil.getCatchBlock(parent) == node) {\n        // Exiting the catch block.\n        if (NodeUtil.hasFinally(parent)) {\n          if (cfa != null) {\n            int branchType = (fromNode.getType() == Token.THROW || fromNode.getType() == Token.IF)\n                ? Branch.ON_EX : Branch.UNCOND;\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, branchType, finallyNode);\n            }\n          }\n          return computeFallThrough(node.getNext());\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      } else if (parent.getLastChild() == node) {\n        // Exiting the FINALLY block.\n        if (cfa != null) {\n          int branchType = (fromNode.getType() == Token.THROW || fromNode.getType() == Token.IF)\n              ? Branch.ON_EX : Branch.UNCOND;\n          for (Node finallyNode : cfa.finallyMap.get(parent)) {\n            cfa.createEdge(fromNode, branchType, finallyNode);\n          }\n        }\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n      break;\n  }\n\n  // For all other cases, control flows to the immediate non-function sibling,\n  // or, if none exists, it propagates upward.\n  Node nextSibling = node.getNext();\n  while (nextSibling != null && nextSibling.isFunction()) {\n    nextSibling = nextSibling.getNext();\n  }\n  if (nextSibling != null) {\n    return computeFallThrough(nextSibling);\n  } else {\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}