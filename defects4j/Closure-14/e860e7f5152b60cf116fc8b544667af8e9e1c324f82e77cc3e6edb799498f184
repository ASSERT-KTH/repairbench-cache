{
    "generation": "private static Node computeFollowNode(\n    Node fromNode, Node node, ControlFlowAnalysis cfa) {\n  /*\n   * This is the case where:\n   *\n   * 1. Parent is null implies that we are transferring control to the end of\n   *    the script.\n   *\n   * 2. Parent is a function implies that we are transferring control back to\n   *    the caller of the function.\n   *\n   * 3. If the node is a return statement, we should also transfer control\n   *    back to the caller of the function.\n   *\n   * 4. If the node is root then we have reached the end of what we have been\n   *    asked to traverse.\n   *\n   * In all cases we should transfer control to a \"symbolic return\" node.\n   * This will make life easier for DFAs.\n   */\n  Node parent = node.getParent();\n  if (parent == null || parent.isFunction() ||\n      (cfa != null && node == cfa.root)) {\n    return null;\n  }\n\n  switch (parent.getType()) {\n    case Token.IF:\n      return computeFollowNode(fromNode, parent, cfa);\n\n    case Token.CASE:\n    case Token.DEFAULT_CASE:\n      // After the body of a CASE, the control goes to the body of the next\n      // case, without having to go to the case condition.\n      if (parent.getNext() != null) {\n        if (parent.getNext().isCase()) {\n          return parent.getNext().getFirstChild().getNext();\n        } else if (parent.getNext().isDefaultCase()) {\n          return parent.getNext().getFirstChild();\n        } else {\n          Preconditions.checkState(false, \"Not reachable\");\n        }\n      } else {\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n\n    case Token.FOR:\n      if (NodeUtil.isForIn(parent)) {\n        return parent;\n      } else {\n        return parent.getFirstChild().getNext().getNext();\n      }\n\n    case Token.WHILE:\n    case Token.DO:\n      return parent;\n\n    case Token.TRY:\n      if (NodeUtil.hasFinally(parent)) {\n        // Whether coming out of the try block or a catch block,\n        // if a FINALLY exists then control goes to the FINALLY block.\n        if (parent.getLastChild() != node) {\n          // Not yet in the FINALLY: route control to the FINALLY block.\n          return computeFallThrough(parent.getLastChild());\n        } else {\n          // Exiting the FINALLY block: add cross edges to any outer FINALLY\n          // handlers, then continue traversing up.\n          if (cfa != null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      } else {\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n  }\n\n  // For all other cases, follow the immediate sibling unless it's a function.\n  Node nextSibling = node.getNext();\n  while (nextSibling != null && nextSibling.isFunction()) {\n    nextSibling = nextSibling.getNext();\n  }\n\n  if (nextSibling != null) {\n    return computeFallThrough(nextSibling);\n  } else {\n    // If there are no more siblings, control is transferred up the AST.\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}