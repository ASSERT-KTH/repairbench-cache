{
    "generation": "  /**\n   * Computes the follow() node of a given node and its parent. There is a side\n   * effect when calling this function. If this function computed an edge that\n   * exists a FINALLY, it'll attempt to connect the fromNode to the outer\n   * FINALLY according to the finallyMap.\n   * --> UPDATE: Side effect removed as it was likely incorrect/redundant.\n   *\n   * @param fromNode The original source node since {@code node} is changed\n   *        during recursion.\n   * @param node The node that follow() should compute.\n   */\n  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          // No next CASE/DEFAULT sibling. We are at the end of the SWITCH block.\n          // Follow should be whatever follows the parent SWITCH statement.\n          // The fall-through to the generic sibling logic below handles this\n          // correctly because the parent of a CASE/DEFAULT is the SWITCH.\n          return computeFollowNode(fromNode, parent.getParent(), cfa);\n        }\n        // break was present in original code.\n        break;\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          // The follow of the FOR body or the init is the condition.\n          // The follow of the condition is the body (handled by computeFallThrough).\n          // The follow of the increment is the condition.\n          // This seems wrong? The follow of the body should be the increment.\n          // Node structure: FOR(init; cond; incr) { body }\n          // child0=init, child1=cond, child2=incr, child3=body\n          // Follow of body(child3) should be incr(child2).\n          // Follow of init(child0) is cond(child1).\n          // Follow of cond(child1) depends: true->body(child3), false->after FOR.\n          // Follow of incr(child2) is cond(child1).\n          // The current code handles follow of the BODY node.\n          // Let's find the increment node (child2).\n          Node increment = parent.getFirstChild().getNext().getNext();\n          // If there's no increment, follow is the condition node.\n          return (increment != null) ? increment : parent.getFirstChild().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and have no FINALLY.\n            // If we have a CATCH block, the CATCH node (not block) is next.\n            // Otherwise, follow the TRY statement.\n            // The generic sibling logic handles this: node.getNext() will be\n            // the CATCH node or null. If null, computeFollowNode(parent) is called.\n            // So, just falling through to the generic logic is fine.\n            // However, computeFollowNode(parent) might be more direct if no CATCH exists.\n            // Let's keep the original direct call for clarity.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node){\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            // Original used computeFallThrough(node.getNext()) assuming finally follows catch block.\n            // The finally block is the last child of TRY.\n            return computeFallThrough(parent.getLastChild());\n          } else {\n            // Follow the parent TRY statement.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() == node){\n          // The side effect using finallyMap was removed from here.\n          // It's assumed this is handled elsewhere (e.g. visitFinally).\n          // For normal flow, we follow the parent TRY statement.\n          // if (cfa != null) {\n          //   for (Node finallyNode : cfa.finallyMap.get(parent)) {\n          //     cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n          //   }\n          // } // <-- REMOVED THIS BLOCK\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        // Original code had no 'break' here, falling through to default logic below.\n        // This is important for handling the CATCH node itself.\n    } // End switch\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}