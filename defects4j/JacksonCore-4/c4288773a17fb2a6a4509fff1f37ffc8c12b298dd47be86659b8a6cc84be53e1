{
    "generation": "    /**\n     * Method called to expand size of the current segment, to\n     * accommodate for more contiguous content. Usually only\n     * used when parsing tokens like names if even then.\n     */\n    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        final int len = curr.length;\n        int newLen;\n\n        // If current length is exactly MAX_SEGMENT_LEN, grow by 1 to ensure progress.\n        // This handles the special case where the buffer has reached its \"normal\" maximum.\n        if (len == MAX_SEGMENT_LEN) {\n            newLen = MAX_SEGMENT_LEN + 1;\n        }\n        // If current length is less than MAX_SEGMENT_LEN, grow by 50%,\n        // but cap the new length at MAX_SEGMENT_LEN to prevent excessive allocation\n        // if the 50% growth would exceed MAX_SEGMENT_LEN.\n        else if (len < MAX_SEGMENT_LEN) {\n            newLen = len + (len >> 1); // Grow by 50% (len + len/2)\n            if (newLen > MAX_SEGMENT_LEN) {\n                newLen = MAX_SEGMENT_LEN;\n            }\n        }\n        // If current length is already greater than MAX_SEGMENT_LEN (as per the failing test case),\n        // apply a slower growth rate (25%) as indicated by comments, without capping below\n        // the current length. This ensures the buffer always expands if it's already\n        // larger than MAX_SEGMENT_LEN.\n        else { // len > MAX_SEGMENT_LEN\n            newLen = len + (len >> 2); // Grow by 25% (len + len/4)\n        }\n\n        // Final sanity check: ensure newLen is strictly greater than len and handles potential overflow.\n        // This is crucial to guarantee expansion and prevent issues if len is extremely large\n        // (e.g., near Integer.MAX_VALUE) or if a calculated newLen somehow resulted in no growth or shrink.\n        if (newLen <= len) {\n            // If newLen did not grow, force a minimum expansion of 1\n            newLen = len + 1;\n            // Check for integer overflow, if len was already Integer.MAX_VALUE\n            if (newLen < 0) { // Overflowed\n                newLen = Integer.MAX_VALUE;\n            }\n        }\n\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}