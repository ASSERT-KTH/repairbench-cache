{
    "generation": "import java.util.Arrays;\n\n// Added import and assuming MAX_SEGMENT_LEN is a defined constant in the class, like:\n// private final static int MAX_SEGMENT_LEN = 1 << 18; // 262144\n\n    /**\n     * Method called to expand size of the current segment, to\n     * accommodate for more contiguous content. Usually only\n     * used when parsing tokens like names if even then.\n     */\n    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        final int len = curr.length;\n\n        // Let's grow by 50% for smaller chunks; slower (25%) for larger one\n        // Also: only grow up to MAX_SEGMENT_LEN, if we are under that limit\n        int newLen;\n        // Increase by 50% up to MAX_SEGMENT_LEN\n        if (len < MAX_SEGMENT_LEN) { // below max?\n            newLen = Math.min(MAX_SEGMENT_LEN, len + (len >> 1));\n        } else {\n            // Otherwise, grow by 25% (or at least by 1 segment, i.e. 1 char)\n            // As per [core#152] let's allow exceeding max segment length\n            int increment = len >> 2; // 25% growth\n            newLen = len + Math.max(increment, 1); // Make sure we grow by at least 1 char\n        }\n        // Check for potential overflow (if newLen > Integer.MAX_VALUE)\n        if (newLen < len) { // integer overflow?\n            // This is very unlikely to happen given MAX_SEGMENT_LEN,\n            // but let's add a safeguard anyway\n            throw new IllegalStateException(\"Maximum segment size (\"+Integer.MAX_VALUE+\") exceeded\");\n        }\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}