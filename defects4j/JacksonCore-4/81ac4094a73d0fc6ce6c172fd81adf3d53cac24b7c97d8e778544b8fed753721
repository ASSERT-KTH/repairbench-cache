{
    "generation": "    /**\n     * Method called to expand size of the current segment, to\n     * accommodate for more contiguous content. Usually only\n     * used when parsing tokens like names if even then.\n     */\n    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        final int len = curr.length;\n        int newLen;\n\n        // \"Let's grow by 50% by default\" (when below MAX_SEGMENT_LEN)\n        // \"but above intended maximum, slow to increase by 25%\"\n        // MAX_SEGMENT_LEN is an \"intended maximum\", not a strict hard limit.\n\n        if (len < MAX_SEGMENT_LEN) {\n            // Grow by 50%, capped at MAX_SEGMENT_LEN\n            newLen = len + (len >> 1); // len + len/2\n            if (newLen > MAX_SEGMENT_LEN) {\n                newLen = MAX_SEGMENT_LEN;\n            }\n        } else if (len == MAX_SEGMENT_LEN) {\n            // Special case: if at the intended maximum, expand by just 1\n            // This allows exceeding MAX_SEGMENT_LEN by a small amount for the next step.\n            newLen = MAX_SEGMENT_LEN + 1;\n        } else { // len > MAX_SEGMENT_LEN\n            // If already above MAX_SEGMENT_LEN, apply the \"slow to increase by 25%\" rule.\n            newLen = len + (len >> 2); // len + len/4\n\n            // Ensure newLen is strictly greater than len, and handle potential overflow\n            // if len is very large or growth factor is 0 (e.g., len=1, 2, 3 for >>2)\n            if (newLen <= len) {\n                // If it didn't grow or overflowed to a smaller/negative number,\n                // try to grow by at least 1, up to Integer.MAX_VALUE.\n                newLen = len + 1;\n                if (newLen < 0) { // Indicates overflow from len + 1\n                    newLen = Integer.MAX_VALUE; // Cap at max possible array size\n                }\n            }\n        }\n\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}