{
    "generation": "    /**\n     * Method called to expand size of the current segment, to\n     * accommodate for more contiguous content. Usually only\n     * used when parsing tokens like names if even then.\n     */\n    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        final int len = curr.length;\n        int newLen;\n\n        // Determine base growth.\n        // Default growth is 50% (len + len/2).\n        // If current length is less than MAX_SEGMENT_LEN, cap at MAX_SEGMENT_LEN.\n        // If current length is already at or above MAX_SEGMENT_LEN, apply 25% growth.\n\n        if (len < MAX_SEGMENT_LEN) {\n            // Grow by 50% by default, but don't exceed MAX_SEGMENT_LEN.\n            newLen = len + (len >> 1); // equivalent to len + len/2\n            if (newLen > MAX_SEGMENT_LEN || newLen < len) { // Check for cap or potential overflow for very large len\n                newLen = MAX_SEGMENT_LEN;\n            }\n        } else {\n            // Current length is already at or above MAX_SEGMENT_LEN.\n            // As per comment: \"above intended maximum, slow to increase by 25%\".\n            // Calculate 25% of current length.\n            int quarterLen = (len >> 2); // equivalent to len / 4\n            if (quarterLen < 1) { // Ensure at least 1 character growth for very small lengths or when len is huge and >> 2 is 0\n                quarterLen = 1;\n            }\n            newLen = len + quarterLen;\n\n            // Handle potential integer overflow when adding quarterLen.\n            // If newLen wrapped around to a value smaller than or equal to len, it means overflow occurred.\n            // In such a case, set to Integer.MAX_VALUE to indicate largest possible buffer.\n            if (newLen <= len && len < Integer.MAX_VALUE) { // len < Integer.MAX_VALUE check avoids issues if len itself is MAX_VALUE\n                newLen = Integer.MAX_VALUE;\n            }\n        }\n\n        // Final safeguard to ensure the new length is strictly greater than the old length,\n        // unless the current length is already Integer.MAX_VALUE (cannot grow further).\n        if (newLen <= len && len < Integer.MAX_VALUE) {\n            newLen = len + 1;\n        }\n\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}