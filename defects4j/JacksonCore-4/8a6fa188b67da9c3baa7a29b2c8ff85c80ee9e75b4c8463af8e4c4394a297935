{
    "generation": "    /**\n     * Method called to expand size of the current segment, to\n     * accommodate for more contiguous content. Usually only\n     * used when parsing tokens like names if even then.\n     */\n    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        final int len = curr.length;\n        int newLen;\n\n        // Original code had specific handling for len == MAX_SEGMENT_LEN,\n        // expanding by just 1. We keep this behavior.\n        if (len == MAX_SEGMENT_LEN) {\n            newLen = MAX_SEGMENT_LEN + 1;\n        } else if (len < MAX_SEGMENT_LEN) {\n            // \"Let's grow by 50% by default\"\n            // Ensure we don't jump directly past MAX_SEGMENT_LEN\n            // if current len is much smaller.\n            newLen = len + (len >> 1); // grow by 50%\n            if (newLen > MAX_SEGMENT_LEN) {\n                newLen = MAX_SEGMENT_LEN;\n            }\n        } else { // len > MAX_SEGMENT_LEN\n            // \"but above intended maximum, slow to increase by 25%\"\n            newLen = len + (len >> 2); // grow by 25%\n            // Ensure actual growth (protect against (len >> 2) being 0 for small len,\n            // or potential overflow if len is extremely large, though unlikely here).\n            if (newLen <= len) {\n                newLen = len + 1;\n            }\n        }\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }\n",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}