{
    "generation": "    /**\n     * Method called to expand size of the current segment, to\n     * accommodate for more contiguous content. Usually only\n     * used when parsing tokens like names if even then.\n     */\n    public char[] expandCurrentSegment()\n    {\n        final char[] curr = _currentSegment;\n        final int len = curr.length;\n        int newLen;\n\n        // Original code's special case: if current length is exactly MAX_SEGMENT_LEN, grow by 1.\n        if (len == MAX_SEGMENT_LEN) {\n            newLen = MAX_SEGMENT_LEN + 1;\n        }\n        // If current length is less than MAX_SEGMENT_LEN, apply default 50% growth, capped at MAX_SEGMENT_LEN.\n        else if (len < MAX_SEGMENT_LEN) {\n            newLen = len + (len >> 1); // Grow by 50%\n            if (newLen > MAX_SEGMENT_LEN) {\n                newLen = MAX_SEGMENT_LEN; // Cap at MAX_SEGMENT_LEN\n            }\n        }\n        // This is the crucial part: if current length is already greater than MAX_SEGMENT_LEN\n        // (e.g., 262145 when MAX_SEGMENT_LEN is 262144, as seen in the test failure).\n        // The original code would shrink it to MAX_SEGMENT_LEN.\n        // The comment suggests \"slow to increase by 25%\".\n        else { // len > MAX_SEGMENT_LEN\n            newLen = len + (len >> 2); // Grow by 25%\n        }\n\n        // --- Defensive checks for array size limits and ensuring growth ---\n        // Java array maximum size is Integer.MAX_VALUE - 8\n        final int maxArrayLen = Integer.MAX_VALUE - 8;\n\n        // Ensure newLen does not exceed Java's max array length\n        if (newLen > maxArrayLen) {\n            newLen = maxArrayLen;\n        }\n\n        // Ensure newLen is strictly greater than len to guarantee expansion,\n        // unless already at absolute max length.\n        if (newLen <= len) {\n            // This condition is met if:\n            // 1. `len` is very large, and the calculated growth (`len >> X`) is 0.\n            // 2. An integer overflow occurred causing `newLen` to wrap around.\n            // 3. `len` is already `maxArrayLen`.\n            if (len < maxArrayLen) {\n                // If not yet at the absolute max, try to grow by at least 1.\n                newLen = len + 1;\n            } else {\n                // If already at maxArrayLen, cannot expand further.\n                return curr; // Return current segment, no expansion.\n            }\n        }\n\n        return (_currentSegment = Arrays.copyOf(curr, newLen));\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}