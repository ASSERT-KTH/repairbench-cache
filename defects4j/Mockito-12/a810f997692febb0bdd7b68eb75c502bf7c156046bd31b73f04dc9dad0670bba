{
    "generation": "    /**\n     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.\n     *\n     * @param field\n     * @return\n     */\n    public Class getGenericType(Field field) {\n        Type generic = field.getGenericType();\n        if (generic instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) generic;\n            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n            // Find the first actual type argument\n            if (actualTypeArguments.length > 0) {\n                Type firstActualTypeArgument = actualTypeArguments[0];\n                if (firstActualTypeArgument instanceof Class) {\n                    // If the argument type is a class (e.g., String in List<String>)\n                    return (Class) firstActualTypeArgument;\n                } else if (firstActualTypeArgument instanceof ParameterizedType) {\n                    // If the argument type is also parameterized (e.g., Set<String> in List<Set<String>>)\n                    // return the raw type (e.g., Set.class)\n                    // Cast to Class is safe because getRawType returns Class<?>\n                    return (Class) ((ParameterizedType) firstActualTypeArgument).getRawType();\n                }\n                // Handle other cases like TypeVariable, WildcardType?\n                // For now, fall back to Object.class as per original behavior for unhandled cases.\n            }\n        }\n\n        return Object.class;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}