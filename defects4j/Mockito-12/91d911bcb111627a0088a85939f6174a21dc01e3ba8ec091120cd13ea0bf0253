{
    "generation": "/**\n * Finds the generic type (parameterized type) of the field.\n * If the field is not generic it returns Object.class.\n *\n * @param field the field to inspect\n * @return the generic class or Object.class if unavailable\n */\npublic Class getGenericType(Field field) {\n    Type generic = field.getGenericType();\n    if (generic instanceof ParameterizedType) {\n        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        if (actual instanceof Class) {\n            return (Class) actual;\n        } else if (actual instanceof ParameterizedType) {\n            Type rawType = ((ParameterizedType) actual).getRawType();\n            if (rawType instanceof Class) {\n                return (Class) rawType;\n            }\n        }\n        // Unable to resolve to a class, fall through\n    }\n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}