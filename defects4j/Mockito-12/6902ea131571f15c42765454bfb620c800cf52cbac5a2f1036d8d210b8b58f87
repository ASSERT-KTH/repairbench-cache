{
    "generation": "public Class getGenericType(Field field) {\n    Type type = field.getGenericType();\n    // unwrap generic array types (e.g. List<String>[] -> List<String>)\n    if (type instanceof GenericArrayType) {\n        type = ((GenericArrayType) type).getGenericComponentType();\n    }\n    if (type instanceof ParameterizedType) {\n        ParameterizedType pt = (ParameterizedType) type;\n        Type actual = pt.getActualTypeArguments()[0];\n        // nested parameterized type -> return its raw type\n        if (actual instanceof ParameterizedType) {\n            Type raw = ((ParameterizedType) actual).getRawType();\n            if (raw instanceof Class) {\n                return (Class) raw;\n            }\n        }\n        // wildcard type -> inspect upper bound\n        else if (actual instanceof WildcardType) {\n            WildcardType wt = (WildcardType) actual;\n            Type[] bounds = wt.getUpperBounds();\n            if (bounds.length > 0) {\n                Type bound = bounds[0];\n                if (bound instanceof ParameterizedType) {\n                    Type raw = ((ParameterizedType) bound).getRawType();\n                    if (raw instanceof Class) {\n                        return (Class) raw;\n                    }\n                } else if (bound instanceof Class) {\n                    return (Class) bound;\n                }\n            }\n        }\n        // simple class type\n        else if (actual instanceof Class) {\n            return (Class) actual;\n        }\n    }\n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}