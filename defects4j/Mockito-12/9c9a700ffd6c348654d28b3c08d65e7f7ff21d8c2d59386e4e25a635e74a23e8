{
    "generation": "import java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\n\n// Add imports for Field, ParameterizedType, Type if not already present\n\n    /**\n     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.\n     *\n     * @param field\n     * @return\n     */\n    public Class<?> getGenericType(Field field) {\n        Type generic = field.getGenericType();\n        if (generic != null && generic instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) generic;\n            Type[] actualTypeArguments = pt.getActualTypeArguments();\n            // Ensure there is at least one type argument\n            if (actualTypeArguments.length > 0) {\n                Type firstTypeArgument = actualTypeArguments[0];\n                if (firstTypeArgument instanceof Class) {\n                    return (Class<?>) firstTypeArgument;\n                } else if (firstTypeArgument instanceof ParameterizedType) {\n                    // Handle nested generic types like List<Set<String>>\n                    // Return the raw type of the inner generic type (e.g., Set.class)\n                    Type rawType = ((ParameterizedType) firstTypeArgument).getRawType();\n                    if (rawType instanceof Class) {\n                         return (Class<?>) rawType;\n                    }\n                }\n                // Potentially handle other Type kinds like TypeVariable, WildcardType, GenericArrayType here if needed.\n                // For now, falling through to return Object.class matches the original behavior for unhandled cases.\n            }\n        }\n\n        return Object.class;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}