{
    "generation": "    /**\n     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.\n     * If the field is generic (e.g. List&lt;String&gt;) it returns the Class of the type parameter (e.g. String.class).\n     * If the type parameter is itself generic (e.g. List&lt;Set&lt;String&gt;&gt;), it returns the raw Class of the type parameter (e.g. Set.class).\n     *\n     * @param field the field to inspect\n     * @return the generic type, or Object.class if not found or not applicable.\n     */\n    public Class<?> getGenericType(Field field) {\n        Type genericType = field.getGenericType();\n        if (genericType instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) genericType;\n            Type[] actualTypeArguments = pt.getActualTypeArguments();\n            // Ensure there is at least one type argument\n            if (actualTypeArguments.length > 0) {\n                Type firstTypeArgument = actualTypeArguments[0];\n                if (firstTypeArgument instanceof Class) {\n                    // Argument is a simple class (e.g., String in List<String>)\n                    return (Class<?>) firstTypeArgument;\n                } else if (firstTypeArgument instanceof ParameterizedType) {\n                    // Argument is also generic (e.g., Set<String> in List<Set<String>>)\n                    // Return the raw type (e.g., Set.class)\n                    return (Class<?>) ((ParameterizedType) firstTypeArgument).getRawType();\n                }\n                // Handle cases like TypeVariable, WildcardType, GenericArrayType?\n                // The original code didn't handle these and failed with ClassCastException if actualTypeArgument wasn't Class.\n                // Falling back to Object.class seems the most reasonable default behavior here,\n                // consistent with the non-generic field case.\n            }\n        }\n        // If the field's type is not ParameterizedType (e.g. String, int, raw List)\n        // or if it has no type arguments, or if the first argument is not Class or ParameterizedType\n        return Object.class;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}