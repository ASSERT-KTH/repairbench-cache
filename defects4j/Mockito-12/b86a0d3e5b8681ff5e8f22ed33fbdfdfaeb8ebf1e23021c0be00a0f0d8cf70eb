{
    "generation": "public Class getGenericType(Field field) {\n    Type generic = field.getGenericType();\n    if (generic instanceof ParameterizedType) {\n        // start with the first type argument\n        Type arg = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        Class result = null;\n        // drill down nested ParameterizedTypes, remembering the raw type at each level\n        while (true) {\n            if (arg instanceof Class) {\n                // if it's a plain Class and we haven't set a result yet, use it\n                if (result == null) {\n                    result = (Class) arg;\n                }\n                break;\n            } else if (arg instanceof ParameterizedType) {\n                ParameterizedType pt = (ParameterizedType) arg;\n                // remember the raw type of this ParameterizedType\n                Type raw = pt.getRawType();\n                if (raw instanceof Class) {\n                    result = (Class) raw;\n                }\n                // descend into its first type argument\n                Type[] args = pt.getActualTypeArguments();\n                if (args.length > 0) {\n                    arg = args[0];\n                    continue;\n                }\n                break;\n            } else {\n                // other Type (WildcardType, TypeVariable, etc.), give up\n                break;\n            }\n        }\n        if (result != null) {\n            return result;\n        }\n    }\n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}