{
    "generation": "    /**\n     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. \n     * \n     * @param field\n     * @return\n     */\n    public Class getGenericType(Field field) {        \n        Type generic = field.getGenericType();\n        if (generic != null && generic instanceof ParameterizedType) {\n            // Get the first actual type argument of the parameterized type.\n            // For a field like 'List<String>', 'actual' will be 'String.class'.\n            // For a field like 'ArgumentCaptor<List<String>>', 'actual' will be 'List<String>' (which is itself a ParameterizedType).\n            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n            \n            if (actual instanceof Class) {\n                // If the actual type argument is already a Class (e.g., String for List<String>)\n                return (Class) actual;\n            } else if (actual instanceof ParameterizedType) {\n                // If the actual type argument is itself a ParameterizedType (e.g., List<String> for ArgumentCaptor<List<String>>),\n                // we need to return its raw type (e.g., List.class).\n                // This handles cases like ArgumentCaptor<List<String>> -> List.class\n                // and Set<Set<String>> -> Set.class (for the 'multiNested' test case).\n                return (Class) ((ParameterizedType) actual).getRawType();\n            } else {\n                // Handle other Type implementations like TypeVariable, GenericArrayType if necessary.\n                // For now, consistent with the default fallback for unresolvable types.\n                return Object.class; \n            }\n        }\n        \n        // If the field is not generic (e.g., a simple class like 'String field;')\n        // or if 'generic' is not a ParameterizedType (e.g., a raw type like 'List list;'),\n        // return Object.class as per the method's specification.\n        return Object.class;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}