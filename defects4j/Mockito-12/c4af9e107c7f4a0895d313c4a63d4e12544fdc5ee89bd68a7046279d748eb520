{
    "generation": "/**\n * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.\n * Handles nested generics by recursively resolving the type arguments.\n *\n * @param field\n * @return\n */\npublic Class getGenericType(Field field) {\n    Type generic = field.getGenericType();\n    if (generic != null && generic instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) generic).getActualTypeArguments();\n        if (actualTypeArguments.length > 0) {\n            Type actual = actualTypeArguments[0];\n            if (actual instanceof Class) {\n                return (Class) actual;\n            } else if (actual instanceof ParameterizedType) {\n                // Handle nested generics by recursively resolving the type\n                return getGenericTypeFromType(actual);\n            }\n        }\n    }\n    return Object.class;\n}\n\nprivate Class getGenericTypeFromType(Type type) {\n    if (type instanceof Class) {\n        return (Class) type;\n    } else if (type instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();\n        if (actualTypeArguments.length > 0) {\n            Type actual = actualTypeArguments[0];\n            if (actual instanceof Class) {\n                return (Class) actual;\n            } else if (actual instanceof ParameterizedType) {\n                return getGenericTypeFromType(actual);\n            }\n        }\n    }\n    return Object.class;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}