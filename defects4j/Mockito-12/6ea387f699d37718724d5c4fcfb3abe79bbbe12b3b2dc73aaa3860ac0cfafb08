{
    "generation": "import java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.Set; // Import added for clarity in the example below\n\n// Class definition added for context, assuming this method is part of some utility class\nclass ReflectionUtils {\n\n    /**\n     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.\n     * If the field has a nested generic type (e.g. List<Set<String>>) it returns the raw type of the first generic type argument (e.g. Set.class).\n     *\n     * @param field the field to inspect\n     * @return the generic type, or the raw type of the first generic type argument for nested types, or Object.class if not generic.\n     */\n    public Class<?> getGenericType(Field field) {\n        Type generic = field.getGenericType();\n        if (generic instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) generic;\n            Type[] actualTypeArguments = pt.getActualTypeArguments();\n            // Ensure there is at least one type argument\n            if (actualTypeArguments.length > 0) {\n                Type firstTypeArgument = actualTypeArguments[0];\n                if (firstTypeArgument instanceof Class) {\n                    // e.g. List<String> -> String.class\n                    return (Class<?>) firstTypeArgument;\n                } else if (firstTypeArgument instanceof ParameterizedType) {\n                    // e.g. List<Set<String>> -> Set.class (raw type of the nested generic)\n                    return (Class<?>) ((ParameterizedType) firstTypeArgument).getRawType();\n                }\n                // Other cases like TypeVariable, GenericArrayType, WildcardType might return Object.class\n                // depending on the exact requirement, but for the failing tests, handling\n                // Class and ParameterizedType is sufficient.\n            }\n        }\n\n        return Object.class;\n    }\n\n    // Example fields for context (would be in another class usually)\n    // List<String> simple;\n    // List<Set<String>> nested;\n    // List<Set<List<String>>> multiNested;\n    // String notGeneric;\n}",
    "exact_match": false,
    "ast_match": false,
    "compile": false,
    "test": false
}