{
    "generation": "    /**\n     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. \n     * \n     * @param field\n     * @return\n     */\n    public Class getGenericType(Field field) {        \n        Type generic = field.getGenericType();\n        if (generic != null && generic instanceof ParameterizedType) {\n            // Get the first actual type argument of the field's generic type\n            // For example, if field is List<String>, actual will be String.class\n            // If field is Map<Key, Value>, actual will be Key.class (as it takes the first argument [0])\n            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n            \n            if (actual instanceof Class) {\n                // If the actual type argument is a direct Class, return it\n                return (Class) actual;\n            } else if (actual instanceof ParameterizedType) {\n                // If the actual type argument is itself a ParameterizedType (nested generic),\n                // e.g., List<Set<String>> where 'actual' is Set<String>.\n                // As per the comment \"in case of nested generics we don't go deep\",\n                // we should return the raw type of this nested generic (e.g., Set.class).\n                return (Class) ((ParameterizedType) actual).getRawType();\n            } else {\n                // Handle other Type implementations like TypeVariable or WildcardType.\n                // In such cases, we cannot determine a concrete Class, so return Object.class.\n                return Object.class;\n            }\n        }\n        \n        // If the field is not generic or not a ParameterizedType, or if the generic type is null,\n        // return Object.class as a default fallback.\n        return Object.class;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}