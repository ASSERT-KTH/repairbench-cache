{
    "generation": "    /**\n     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. \n     * \n     * @param field\n     * @return\n     */\n    public Class getGenericType(Field field) {        \n        Type generic = field.getGenericType();\n        if (generic != null && generic instanceof ParameterizedType) {\n            // Get the first actual type argument of the parameterized type\n            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n            \n            // If the actual type argument is itself a Class, return it directly.\n            if (actual instanceof Class) {\n                return (Class) actual;\n            } \n            // If the actual type argument is another ParameterizedType (e.g., for nested generics like List<Set<String>>),\n            // extract its raw type (e.g., Set.class). This addresses the ClassCastException.\n            else if (actual instanceof ParameterizedType) {\n                return (Class) ((ParameterizedType) actual).getRawType();\n            }\n            // If the actual type argument is a TypeVariable, WildcardType, or GenericArrayType,\n            // it cannot be cast to Class directly. In such cases, return Object.class as a fallback,\n            // similar to how non-generic fields are handled.\n            else {\n                return Object.class;\n            }\n        }\n        \n        // If the generic type is null or not a ParameterizedType (i.e., a raw type or primitive),\n        // it's not considered generic in the context of this method, so return Object.class.\n        return Object.class;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": true
}