{
    "generation": "    /**\n     * Finds the raw generic type (raw parameterized type) of the field.\n     * If the field is not generic (e.g., `String`) or is a raw type (e.g., `List`), it returns its class directly.\n     * If the field is a parameterized type (e.g., `List<String>`), it returns the raw type (e.g., `List.class`).\n     * For other complex generic types like TypeVariables or GenericArrayTypes, it falls back to Object.class.\n     * \n     * @param field The field to inspect.\n     * @return The raw Class type of the field, or Object.class if it cannot be determined.\n     */\n    public Class getGenericType(Field field) {        \n        Type genericType = field.getGenericType();\n\n        if (genericType instanceof ParameterizedType) {\n            // If the field is a parameterized type (e.g., List<String>, Map<K, V>)\n            // We want to return the raw class (e.g., List.class, Map.class)\n            Type rawType = ((ParameterizedType) genericType).getRawType();\n            if (rawType instanceof Class) {\n                return (Class) rawType;\n            }\n        } else if (genericType instanceof Class) {\n            // If the field is a non-generic type (e.g., String) or a raw type (e.g., List)\n            // It's already a Class, so return it directly.\n            return (Class) genericType;\n        }\n        \n        // For other types (e.g., TypeVariable, GenericArrayType) or if the above conditions\n        // did not yield a Class, return Object.class as a fallback.\n        return Object.class;\n    }",
    "exact_match": false,
    "ast_match": false,
    "compile": true,
    "test": false
}